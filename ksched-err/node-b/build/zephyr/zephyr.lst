
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20004480 	.word	0x20004480
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00004a09 	.word	0x00004a09
   8:	00024edd 	.word	0x00024edd
		if (fdtable[fd].obj == NULL) {
   c:	000048f9 	.word	0x000048f9
  10:	000048f9 	.word	0x000048f9
  14:	000048f9 	.word	0x000048f9
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	000048f9 	.word	0x000048f9
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	000048f9 	.word	0x000048f9
	errno = ENFILE;
  20:	000048f9 	.word	0x000048f9
	return -1;
  24:	000048f9 	.word	0x000048f9
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  28:	000048f9 	.word	0x000048f9
  2c:	000046b5 	.word	0x000046b5
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	000048f9 	.word	0x000048f9
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	000048f9 	.word	0x000048f9
  38:	0000465d 	.word	0x0000465d
  3c:	00003e31 	.word	0x00003e31

00000040 <_irq_vector_table>:
  40:	000049c9 000278ad 000049c9 000049c9     .I...x...I...I..
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	000049c9 000049c9 000049c9 000049c9     .I...I...I...I..

		cid = CID_NVAL;
		mod_id = sys_get_le16(&buf->data[10]);
	}

	if (mod_id != param->mod_id || cid != param->cid) {
  60:	000049c9 000049c9 000049c9 000049c9     .I...I...I...I..
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
  70:	000049c9 000049c9 000049c9 000049c9     .I...I...I...I..
  80:	000049c9 000049c9 000049c9 000049c9     .I...I...I...I..
			BT_WARN("Unexpected Mod Pub Status with Vendor Model");
  90:	000049c9 000049c9 000049c9 000049c9     .I...I...I...I..
		BT_WARN("Mod Pub Model ID or Company ID mismatch");
		return;
	}

	status = net_buf_simple_pull_u8(buf);
  a0:	000049c9 000049c9 000049c9 000049c9     .I...I...I...I..

	elem_addr = net_buf_simple_pull_le16(buf);
	if (elem_addr != param->elem_addr) {
  b0:	000049c9 000049c9 000049c9 000049c9     .I...I...I...I..
		BT_WARN("Model Pub Status for unexpected element (0x%04x)",
  c0:	000049c9 000049c9 000049c9 000049c9     .I...I...I...I..
			elem_addr);
		return;
	}

	if (param->status) {
  d0:	000049c9 000049c9 000049c9              .I...I...I..

Disassembly of section text:

000000e0 <__aeabi_ldivmod>:
		*param->status = status;
	}

	if (param->pub) {
		param->pub->addr = net_buf_simple_pull_le16(buf);
		param->pub->app_idx = net_buf_simple_pull_le16(buf);
      e0:	b97b      	cbnz	r3, 102 <CONFIG_KOBJECT_TEXT_AREA+0x2>
      e2:	b972      	cbnz	r2, 102 <CONFIG_KOBJECT_TEXT_AREA+0x2>
      e4:	2900      	cmp	r1, #0
      e6:	bfbe      	ittt	lt
      e8:	2000      	movlt	r0, #0
		param->pub->cred_flag = (param->pub->app_idx & BIT(12));
      ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
      ee:	e006      	blt.n	fe <__aeabi_ldivmod+0x1e>
      f0:	bf08      	it	eq
		param->pub->app_idx &= BIT_MASK(12);
      f2:	2800      	cmpeq	r0, #0
      f4:	bf1c      	itt	ne
		param->pub->cred_flag = (param->pub->app_idx & BIT(12));
      f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
		param->pub->ttl = net_buf_simple_pull_u8(buf);
      fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      fe:	f000 b9cd 	b.w	49c <__aeabi_idiv0>
		param->pub->period = net_buf_simple_pull_u8(buf);
     102:	f1ad 0c08 	sub.w	ip, sp, #8
     106:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     10a:	2900      	cmp	r1, #0
		param->pub->transmit = net_buf_simple_pull_u8(buf);
     10c:	db09      	blt.n	122 <CONFIG_KOBJECT_TEXT_AREA+0x22>
     10e:	2b00      	cmp	r3, #0
     110:	db1a      	blt.n	148 <CONFIG_IDLE_STACK_SIZE+0x8>
     112:	f000 f861 	bl	1d8 <__udivmoddi4>
	}

	k_sem_give(&cli->op_sync);
     116:	f8dd e004 	ldr.w	lr, [sp, #4]
}
     11a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	k_sem_give(&cli->op_sync);
     11e:	b004      	add	sp, #16
     120:	4770      	bx	lr
     122:	4240      	negs	r0, r0
     124:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     128:	2b00      	cmp	r3, #0
     12a:	db1b      	blt.n	164 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x1a>
     12c:	f000 f854 	bl	1d8 <__udivmoddi4>
     130:	f8dd e004 	ldr.w	lr, [sp, #4]
     134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     138:	b004      	add	sp, #16
     13a:	4240      	negs	r0, r0
     13c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     140:	4252      	negs	r2, r2
     142:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     146:	4770      	bx	lr
     148:	4252      	negs	r2, r2
     14a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     14e:	f000 f843 	bl	1d8 <__udivmoddi4>
     152:	f8dd e004 	ldr.w	lr, [sp, #4]
     156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     15a:	b004      	add	sp, #16
     15c:	4240      	negs	r0, r0
     15e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     162:	4770      	bx	lr
     164:	4252      	negs	r2, r2
     166:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16a:	f000 f835 	bl	1d8 <__udivmoddi4>
     16e:	f8dd e004 	ldr.w	lr, [sp, #4]
     172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     176:	b004      	add	sp, #16
     178:	4252      	negs	r2, r2
     17a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     17e:	4770      	bx	lr

00000180 <__aeabi_uldivmod>:
     180:	b953      	cbnz	r3, 198 <__aeabi_uldivmod+0x18>
     182:	b94a      	cbnz	r2, 198 <__aeabi_uldivmod+0x18>
     184:	2900      	cmp	r1, #0
     186:	bf08      	it	eq
     188:	2800      	cmpeq	r0, #0
     18a:	bf1c      	itt	ne
     18c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     190:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     194:	f000 b982 	b.w	49c <__aeabi_idiv0>
     198:	f1ad 0c08 	sub.w	ip, sp, #8
     19c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1a0:	f000 f81a 	bl	1d8 <__udivmoddi4>
     1a4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1ac:	b004      	add	sp, #16
     1ae:	4770      	bx	lr

000001b0 <__popcountsi2>:
     1b0:	0843      	lsrs	r3, r0, #1
     1b2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     1b6:	1ac0      	subs	r0, r0, r3
     1b8:	0883      	lsrs	r3, r0, #2
     1ba:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     1be:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     1c2:	4418      	add	r0, r3
     1c4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     1c8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     1cc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     1d0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     1d4:	0e00      	lsrs	r0, r0, #24
     1d6:	4770      	bx	lr

000001d8 <__udivmoddi4>:
     1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1dc:	9d08      	ldr	r5, [sp, #32]
     1de:	460e      	mov	r6, r1
     1e0:	4604      	mov	r4, r0
     1e2:	468c      	mov	ip, r1
     1e4:	2b00      	cmp	r3, #0
     1e6:	f040 8081 	bne.w	2ec <CONFIG_BT_HCI_TX_STACK_SIZE+0x6c>
     1ea:	428a      	cmp	r2, r1
     1ec:	4617      	mov	r7, r2
     1ee:	d945      	bls.n	27c <CONFIG_FLASH_SIZE+0x7c>
     1f0:	fab2 f282 	clz	r2, r2
     1f4:	b14a      	cbz	r2, 20a <CONFIG_FLASH_SIZE+0xa>
     1f6:	f1c2 0120 	rsb	r1, r2, #32
     1fa:	fa06 f302 	lsl.w	r3, r6, r2
     1fe:	fa20 f101 	lsr.w	r1, r0, r1
     202:	4097      	lsls	r7, r2
     204:	ea41 0c03 	orr.w	ip, r1, r3
     208:	4094      	lsls	r4, r2
     20a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     20e:	0c23      	lsrs	r3, r4, #16
     210:	fbbc f6fe 	udiv	r6, ip, lr
     214:	b2b9      	uxth	r1, r7
     216:	fb0e cc16 	mls	ip, lr, r6, ip
     21a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     21e:	fb06 f001 	mul.w	r0, r6, r1
     222:	4298      	cmp	r0, r3
     224:	d909      	bls.n	23a <CONFIG_FLASH_SIZE+0x3a>
     226:	18fb      	adds	r3, r7, r3
     228:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     22c:	f080 8115 	bcs.w	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     230:	4298      	cmp	r0, r3
     232:	f240 8112 	bls.w	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     236:	3e02      	subs	r6, #2
     238:	443b      	add	r3, r7
     23a:	1a1b      	subs	r3, r3, r0
     23c:	b2a4      	uxth	r4, r4
     23e:	fbb3 f0fe 	udiv	r0, r3, lr
     242:	fb0e 3310 	mls	r3, lr, r0, r3
     246:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     24a:	fb00 f101 	mul.w	r1, r0, r1
     24e:	42a1      	cmp	r1, r4
     250:	d909      	bls.n	266 <CONFIG_FLASH_SIZE+0x66>
     252:	193c      	adds	r4, r7, r4
     254:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     258:	f080 8101 	bcs.w	45e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12>
     25c:	42a1      	cmp	r1, r4
     25e:	f240 80fe 	bls.w	45e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12>
     262:	3802      	subs	r0, #2
     264:	443c      	add	r4, r7
     266:	1a64      	subs	r4, r4, r1
     268:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     26c:	2100      	movs	r1, #0
     26e:	b11d      	cbz	r5, 278 <CONFIG_FLASH_SIZE+0x78>
     270:	40d4      	lsrs	r4, r2
     272:	2300      	movs	r3, #0
     274:	e9c5 4300 	strd	r4, r3, [r5]
     278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     27c:	b902      	cbnz	r2, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     27e:	deff      	udf	#255	; 0xff
     280:	fab2 f282 	clz	r2, r2
     284:	2a00      	cmp	r2, #0
     286:	d14f      	bne.n	328 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x28>
     288:	1bcb      	subs	r3, r1, r7
     28a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     28e:	fa1f f887 	uxth.w	r8, r7
     292:	2101      	movs	r1, #1
     294:	fbb3 fcfe 	udiv	ip, r3, lr
     298:	0c26      	lsrs	r6, r4, #16
     29a:	fb0e 331c 	mls	r3, lr, ip, r3
     29e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     2a2:	fb08 f30c 	mul.w	r3, r8, ip
     2a6:	42b3      	cmp	r3, r6
     2a8:	d907      	bls.n	2ba <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     2aa:	19be      	adds	r6, r7, r6
     2ac:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2b0:	d202      	bcs.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     2b2:	42b3      	cmp	r3, r6
     2b4:	f200 80eb 	bhi.w	48e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x42>
     2b8:	4684      	mov	ip, r0
     2ba:	1af6      	subs	r6, r6, r3
     2bc:	b2a3      	uxth	r3, r4
     2be:	fbb6 f0fe 	udiv	r0, r6, lr
     2c2:	fb0e 6610 	mls	r6, lr, r0, r6
     2c6:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     2ca:	fb08 f800 	mul.w	r8, r8, r0
     2ce:	45a0      	cmp	r8, r4
     2d0:	d907      	bls.n	2e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x62>
     2d2:	193c      	adds	r4, r7, r4
     2d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2d8:	d202      	bcs.n	2e0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x60>
     2da:	45a0      	cmp	r8, r4
     2dc:	f200 80d2 	bhi.w	484 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x38>
     2e0:	4618      	mov	r0, r3
     2e2:	eba4 0408 	sub.w	r4, r4, r8
     2e6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2ea:	e7c0      	b.n	26e <CONFIG_FLASH_SIZE+0x6e>
     2ec:	428b      	cmp	r3, r1
     2ee:	d908      	bls.n	302 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2>
     2f0:	2d00      	cmp	r5, #0
     2f2:	f000 80af 	beq.w	454 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>
     2f6:	2100      	movs	r1, #0
     2f8:	e9c5 0600 	strd	r0, r6, [r5]
     2fc:	4608      	mov	r0, r1
     2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     302:	fab3 f183 	clz	r1, r3
     306:	2900      	cmp	r1, #0
     308:	d149      	bne.n	39e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9e>
     30a:	42b3      	cmp	r3, r6
     30c:	d302      	bcc.n	314 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x14>
     30e:	4282      	cmp	r2, r0
     310:	f200 80bb 	bhi.w	48a <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3e>
     314:	1a84      	subs	r4, r0, r2
     316:	eb66 0303 	sbc.w	r3, r6, r3
     31a:	2001      	movs	r0, #1
     31c:	469c      	mov	ip, r3
     31e:	2d00      	cmp	r5, #0
     320:	d0aa      	beq.n	278 <CONFIG_FLASH_SIZE+0x78>
     322:	e9c5 4c00 	strd	r4, ip, [r5]
     326:	e7a7      	b.n	278 <CONFIG_FLASH_SIZE+0x78>
     328:	f1c2 0320 	rsb	r3, r2, #32
     32c:	4097      	lsls	r7, r2
     32e:	40d8      	lsrs	r0, r3
     330:	4091      	lsls	r1, r2
     332:	40de      	lsrs	r6, r3
     334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     338:	4308      	orrs	r0, r1
     33a:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     33e:	fbb6 f1fe 	udiv	r1, r6, lr
     342:	fa1f f887 	uxth.w	r8, r7
     346:	fb0e 6611 	mls	r6, lr, r1, r6
     34a:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     34e:	fb01 f308 	mul.w	r3, r1, r8
     352:	42b3      	cmp	r3, r6
     354:	fa04 f402 	lsl.w	r4, r4, r2
     358:	d909      	bls.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     35a:	19be      	adds	r6, r7, r6
     35c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     360:	f080 808e 	bcs.w	480 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x34>
     364:	42b3      	cmp	r3, r6
     366:	f240 808b 	bls.w	480 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x34>
     36a:	3902      	subs	r1, #2
     36c:	443e      	add	r6, r7
     36e:	1af3      	subs	r3, r6, r3
     370:	b286      	uxth	r6, r0
     372:	fbb3 f0fe 	udiv	r0, r3, lr
     376:	fb0e 3310 	mls	r3, lr, r0, r3
     37a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     37e:	fb00 f308 	mul.w	r3, r0, r8
     382:	42b3      	cmp	r3, r6
     384:	d907      	bls.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     386:	19be      	adds	r6, r7, r6
     388:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     38c:	d274      	bcs.n	478 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2c>
     38e:	42b3      	cmp	r3, r6
     390:	d972      	bls.n	478 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2c>
     392:	3802      	subs	r0, #2
     394:	443e      	add	r6, r7
     396:	1af3      	subs	r3, r6, r3
     398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     39c:	e77a      	b.n	294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     39e:	f1c1 0720 	rsb	r7, r1, #32
     3a2:	fa03 f401 	lsl.w	r4, r3, r1
     3a6:	fa22 f307 	lsr.w	r3, r2, r7
     3aa:	431c      	orrs	r4, r3
     3ac:	fa20 f907 	lsr.w	r9, r0, r7
     3b0:	fa06 f301 	lsl.w	r3, r6, r1
     3b4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     3b8:	40fe      	lsrs	r6, r7
     3ba:	ea49 0903 	orr.w	r9, r9, r3
     3be:	ea4f 4319 	mov.w	r3, r9, lsr #16
     3c2:	fbb6 fefc 	udiv	lr, r6, ip
     3c6:	fa1f f884 	uxth.w	r8, r4
     3ca:	fb0c 661e 	mls	r6, ip, lr, r6
     3ce:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     3d2:	fb0e fa08 	mul.w	sl, lr, r8
     3d6:	45b2      	cmp	sl, r6
     3d8:	fa02 f201 	lsl.w	r2, r2, r1
     3dc:	fa00 f301 	lsl.w	r3, r0, r1
     3e0:	d908      	bls.n	3f4 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xc>
     3e2:	19a6      	adds	r6, r4, r6
     3e4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     3e8:	d248      	bcs.n	47c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x30>
     3ea:	45b2      	cmp	sl, r6
     3ec:	d946      	bls.n	47c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x30>
     3ee:	f1ae 0e02 	sub.w	lr, lr, #2
     3f2:	4426      	add	r6, r4
     3f4:	eba6 060a 	sub.w	r6, r6, sl
     3f8:	fa1f f989 	uxth.w	r9, r9
     3fc:	fbb6 f0fc 	udiv	r0, r6, ip
     400:	fb0c 6610 	mls	r6, ip, r0, r6
     404:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     408:	fb00 f808 	mul.w	r8, r0, r8
     40c:	45b0      	cmp	r8, r6
     40e:	d907      	bls.n	420 <CONFIG_ISR_STACK_SIZE+0x20>
     410:	19a6      	adds	r6, r4, r6
     412:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     416:	d22d      	bcs.n	474 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x28>
     418:	45b0      	cmp	r8, r6
     41a:	d92b      	bls.n	474 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x28>
     41c:	3802      	subs	r0, #2
     41e:	4426      	add	r6, r4
     420:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     424:	eba6 0608 	sub.w	r6, r6, r8
     428:	fba0 8902 	umull	r8, r9, r0, r2
     42c:	454e      	cmp	r6, r9
     42e:	46c4      	mov	ip, r8
     430:	46ce      	mov	lr, r9
     432:	d318      	bcc.n	466 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
     434:	d015      	beq.n	462 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x16>
     436:	b375      	cbz	r5, 496 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4a>
     438:	ebb3 020c 	subs.w	r2, r3, ip
     43c:	eb66 060e 	sbc.w	r6, r6, lr
     440:	fa06 f707 	lsl.w	r7, r6, r7
     444:	fa22 f301 	lsr.w	r3, r2, r1
     448:	40ce      	lsrs	r6, r1
     44a:	431f      	orrs	r7, r3
     44c:	e9c5 7600 	strd	r7, r6, [r5]
     450:	2100      	movs	r1, #0
     452:	e711      	b.n	278 <CONFIG_FLASH_SIZE+0x78>
     454:	4629      	mov	r1, r5
     456:	4628      	mov	r0, r5
     458:	e70e      	b.n	278 <CONFIG_FLASH_SIZE+0x78>
     45a:	4666      	mov	r6, ip
     45c:	e6ed      	b.n	23a <CONFIG_FLASH_SIZE+0x3a>
     45e:	4618      	mov	r0, r3
     460:	e701      	b.n	266 <CONFIG_FLASH_SIZE+0x66>
     462:	4543      	cmp	r3, r8
     464:	d2e7      	bcs.n	436 <CONFIG_ISR_STACK_SIZE+0x36>
     466:	ebb8 0c02 	subs.w	ip, r8, r2
     46a:	eb69 0404 	sbc.w	r4, r9, r4
     46e:	3801      	subs	r0, #1
     470:	46a6      	mov	lr, r4
     472:	e7e0      	b.n	436 <CONFIG_ISR_STACK_SIZE+0x36>
     474:	4660      	mov	r0, ip
     476:	e7d3      	b.n	420 <CONFIG_ISR_STACK_SIZE+0x20>
     478:	4660      	mov	r0, ip
     47a:	e78c      	b.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     47c:	4686      	mov	lr, r0
     47e:	e7b9      	b.n	3f4 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xc>
     480:	4661      	mov	r1, ip
     482:	e774      	b.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     484:	3802      	subs	r0, #2
     486:	443c      	add	r4, r7
     488:	e72b      	b.n	2e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x62>
     48a:	4608      	mov	r0, r1
     48c:	e747      	b.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     48e:	f1ac 0c02 	sub.w	ip, ip, #2
     492:	443e      	add	r6, r7
     494:	e711      	b.n	2ba <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     496:	4629      	mov	r1, r5
     498:	e6ee      	b.n	278 <CONFIG_FLASH_SIZE+0x78>
     49a:	bf00      	nop

0000049c <__aeabi_idiv0>:
     49c:	4770      	bx	lr
     49e:	bf00      	nop

000004a0 <ll_adv_enable>:
{
	u32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
u8_t ll_adv_enable(u8_t enable)
{
     4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4a4:	b08f      	sub	sp, #60	; 0x3c
	u16_t const handle = 0;
	u32_t ticks_anchor;
#endif /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
     4a6:	2302      	movs	r3, #2
     4a8:	930d      	str	r3, [sp, #52]	; 0x34
	u32_t ticks_slot_offset;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	u32_t ret;

	if (!enable) {
     4aa:	b930      	cbnz	r0, 4ba <ll_adv_enable+0x1a>
		return disable(handle);
     4ac:	f019 ffde 	bl	1a46c <disable.constprop.0>
     4b0:	4606      	mov	r6, r0
		conn_release(adv);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
}
     4b2:	4630      	mov	r0, r6
     4b4:	b00f      	add	sp, #60	; 0x3c
     4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline struct ll_adv_set *is_disabled_get(u16_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     4ba:	4fcf      	ldr	r7, [pc, #828]	; (7f8 <CONFIG_BT_COMPANY_ID+0x207>)
     4bc:	f897 60cc 	ldrb.w	r6, [r7, #204]	; 0xcc
     4c0:	f016 0601 	ands.w	r6, r6, #1
     4c4:	463d      	mov	r5, r7
     4c6:	d001      	beq.n	4cc <ll_adv_enable+0x2c>
	return BT_HCI_ERR_CMD_DISALLOWED;
     4c8:	260c      	movs	r6, #12
     4ca:	e7f2      	b.n	4b2 <ll_adv_enable+0x12>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     4cc:	f897 802b 	ldrb.w	r8, [r7, #43]	; 0x2b
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     4d0:	f897 a07b 	ldrb.w	sl, [r7, #123]	; 0x7b
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     4d4:	2327      	movs	r3, #39	; 0x27
     4d6:	222c      	movs	r2, #44	; 0x2c
     4d8:	fb13 2808 	smlabb	r8, r3, r8, r2
     4dc:	eb07 0208 	add.w	r2, r7, r8
			u8_t *tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     4e0:	f817 0008 	ldrb.w	r0, [r7, r8]
     4e4:	920a      	str	r2, [sp, #40]	; 0x28
     4e6:	4631      	mov	r1, r6
     4e8:	f3c0 1080 	ubfx	r0, r0, #6, #1
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     4ec:	fb03 7a0a 	mla	sl, r3, sl, r7
     4f0:	f017 fe62 	bl	181b8 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     4f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     4f6:	f103 0902 	add.w	r9, r3, #2
     4fa:	4601      	mov	r1, r0
			u8_t *tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     4fc:	4604      	mov	r4, r0
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     4fe:	2206      	movs	r2, #6
     500:	f10a 0a7c 	add.w	sl, sl, #124	; 0x7c
     504:	4648      	mov	r0, r9
     506:	f024 fdc3 	bl	25090 <memcpy>
			memcpy(&pdu_scan->scan_rsp.addr[0], tx_addr,
     50a:	2206      	movs	r2, #6
     50c:	4621      	mov	r1, r4
     50e:	f10a 0002 	add.w	r0, sl, #2
     512:	f024 fdbd 	bl	25090 <memcpy>
		if (pdu_adv->tx_addr &&
     516:	f817 3008 	ldrb.w	r3, [r7, r8]
     51a:	065a      	lsls	r2, r3, #25
     51c:	f100 8093 	bmi.w	646 <CONFIG_BT_COMPANY_ID+0x55>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     520:	f817 3008 	ldrb.w	r3, [r7, r8]
     524:	f013 0f0e 	tst.w	r3, #14
     528:	f000 8096 	beq.w	658 <CONFIG_BT_COMPANY_ID+0x67>
	u8_t ch_map = lll->chan_map;
     52c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     530:	2101      	movs	r1, #1
	u8_t ch_map = lll->chan_map;
     532:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     536:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	u8_t ch_map = lll->chan_map;
     53a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     53e:	f026 febe 	bl	272be <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     542:	2800      	cmp	r0, #0
     544:	f000 814c 	beq.w	7e0 <CONFIG_BT_COMPANY_ID+0x1ef>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     548:	f817 4008 	ldrb.w	r4, [r7, r8]
		const u8_t adv_data_len = pdu_adv->len;
     54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     54e:	f004 040f 	and.w	r4, r4, #15
     552:	2c02      	cmp	r4, #2
		const u8_t adv_data_len = pdu_adv->len;
     554:	785a      	ldrb	r2, [r3, #1]
		const u8_t rsp_data_len = pdu_scan->len;
     556:	f89a 3001 	ldrb.w	r3, [sl, #1]
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     55a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
     55e:	f040 810f 	bne.w	780 <CONFIG_BT_COMPANY_ID+0x18f>
			adv_size += adv_data_len;
     562:	3210      	adds	r2, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     564:	00d2      	lsls	r2, r2, #3
     566:	4350      	muls	r0, r2
     568:	f500 70aa 	add.w	r0, r0, #340	; 0x154
     56c:	2364      	movs	r3, #100	; 0x64
     56e:	fb03 0001 	mla	r0, r3, r1, r0
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     572:	f895 3020 	ldrb.w	r3, [r5, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     576:	49a1      	ldr	r1, [pc, #644]	; (7fc <CONFIG_BT_COMPANY_ID+0x20b>)
	hdr->parent = parent;
     578:	61ed      	str	r5, [r5, #28]
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     57a:	2400      	movs	r4, #0
	hdr->is_stop = 0U;
     57c:	f364 0300 	bfi	r3, r4, #0, #1
     580:	f885 3020 	strb.w	r3, [r5, #32]
	adv->evt.ticks_xtal_to_start =
     584:	2331      	movs	r3, #49	; 0x31
     586:	602b      	str	r3, [r5, #0]
     588:	e9c5 4405 	strd	r4, r4, [r5, #20]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     58c:	a398      	add	r3, pc, #608	; (adr r3, 7f0 <CONFIG_BT_COMPANY_ID+0x1ff>)
     58e:	e9d3 2300 	ldrd	r2, r3, [r3]
	adv->evt.ticks_active_to_start = 0;
     592:	606c      	str	r4, [r5, #4]
	adv->evt.ticks_preempt_to_start =
     594:	60ac      	str	r4, [r5, #8]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     596:	fba0 0101 	umull	r0, r1, r0, r1
     59a:	f7ff fdf1 	bl	180 <__aeabi_uldivmod>
     59e:	60e8      	str	r0, [r5, #12]
	u16_t interval = adv->interval;
     5a0:	f8b5 a0d8 	ldrh.w	sl, [r5, #216]	; 0xd8
	ticks_anchor = ticker_ticks_now_get();
     5a4:	f026 ff46 	bl	27434 <ticker_ticks_now_get>
     5a8:	4681      	mov	r9, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     5aa:	f1ba 0f00 	cmp.w	sl, #0
     5ae:	d106      	bne.n	5be <ll_adv_enable+0x11e>
     5b0:	f817 4008 	ldrb.w	r4, [r7, r8]
     5b4:	f004 040f 	and.w	r4, r4, #15
     5b8:	1e63      	subs	r3, r4, #1
     5ba:	425c      	negs	r4, r3
     5bc:	415c      	adcs	r4, r3
     5be:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
     5c2:	f8df 8248 	ldr.w	r8, [pc, #584]	; 80c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc>
     5c6:	4a8e      	ldr	r2, [pc, #568]	; (800 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL>)
     5c8:	68eb      	ldr	r3, [r5, #12]
     5ca:	f364 0700 	bfi	r7, r4, #0, #1
     5ce:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
	if (lll->is_hdcd) {
     5d2:	ac0d      	add	r4, sp, #52	; 0x34
     5d4:	f017 0701 	ands.w	r7, r7, #1
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     5d8:	e9cd 8407 	strd	r8, r4, [sp, #28]
     5dc:	e9cd 2505 	strd	r2, r5, [sp, #20]
     5e0:	9304      	str	r3, [sp, #16]
	if (lll->is_hdcd) {
     5e2:	f000 80e9 	beq.w	7b8 <CONFIG_BT_COMPANY_ID+0x1c7>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     5e6:	2000      	movs	r0, #0
     5e8:	e9cd 0300 	strd	r0, r3, [sp]
     5ec:	2103      	movs	r1, #3
     5ee:	e9cd 0002 	strd	r0, r0, [sp, #8]
     5f2:	464b      	mov	r3, r9
     5f4:	2202      	movs	r2, #2
     5f6:	f017 fd17 	bl	18028 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     5fa:	4621      	mov	r1, r4
     5fc:	f019 f9f4 	bl	199e8 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     600:	2800      	cmp	r0, #0
     602:	f040 80ed 	bne.w	7e0 <CONFIG_BT_COMPANY_ID+0x1ef>
		ret_cb = TICKER_STATUS_BUSY;
     606:	2202      	movs	r2, #2
     608:	920d      	str	r2, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     60a:	e9cd 8407 	strd	r8, r4, [sp, #28]
     60e:	4a7d      	ldr	r2, [pc, #500]	; (804 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4>)
     610:	9506      	str	r5, [sp, #24]
     612:	e9cd 0002 	strd	r0, r0, [sp, #8]
     616:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
     61a:	e9cd 0204 	strd	r0, r2, [sp, #16]
     61e:	9300      	str	r3, [sp, #0]
     620:	9001      	str	r0, [sp, #4]
     622:	464b      	mov	r3, r9
     624:	2201      	movs	r2, #1
     626:	2103      	movs	r1, #3
		ret = ticker_start(
     628:	f017 fcfe 	bl	18028 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     62c:	4621      	mov	r1, r4
     62e:	f019 f9db 	bl	199e8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     632:	2800      	cmp	r0, #0
     634:	f040 80d4 	bne.w	7e0 <CONFIG_BT_COMPANY_ID+0x1ef>
	adv->is_enabled = 1;
     638:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
     63c:	f043 0301 	orr.w	r3, r3, #1
     640:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
	return 0;
     644:	e735      	b.n	4b2 <ll_adv_enable+0x12>
		    !mem_nz(pdu_adv->adv_ind.addr, BDADDR_SIZE)) {
     646:	2106      	movs	r1, #6
     648:	4648      	mov	r0, r9
     64a:	f026 fe01 	bl	27250 <mem_nz>
		if (pdu_adv->tx_addr &&
     64e:	2800      	cmp	r0, #0
     650:	f47f af66 	bne.w	520 <ll_adv_enable+0x80>
			return BT_HCI_ERR_INVALID_PARAM;
     654:	2612      	movs	r6, #18
     656:	e72c      	b.n	4b2 <ll_adv_enable+0x12>
		if (lll->conn) {
     658:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     65a:	2b00      	cmp	r3, #0
     65c:	f47f af34 	bne.w	4c8 <ll_adv_enable+0x28>
		link = ll_rx_link_alloc();
     660:	f019 f91a 	bl	19898 <ll_rx_link_alloc>
		if (!link) {
     664:	4681      	mov	r9, r0
     666:	b130      	cbz	r0, 676 <CONFIG_BT_COMPANY_ID+0x85>
		node_rx = ll_rx_alloc();
     668:	f019 f922 	bl	198b0 <ll_rx_alloc>
		if (!node_rx) {
     66c:	4683      	mov	fp, r0
     66e:	b920      	cbnz	r0, 67a <CONFIG_BT_COMPANY_ID+0x89>
			ll_rx_link_release(link);
     670:	4648      	mov	r0, r9
     672:	f019 f917 	bl	198a4 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     676:	2607      	movs	r6, #7
     678:	e71b      	b.n	4b2 <ll_adv_enable+0x12>
		conn = ll_conn_acquire();
     67a:	f01a f985 	bl	1a988 <ll_conn_acquire>
		if (!conn) {
     67e:	4604      	mov	r4, r0
     680:	b918      	cbnz	r0, 68a <CONFIG_BT_COMPANY_ID+0x99>
			ll_rx_release(node_rx);
     682:	4658      	mov	r0, fp
     684:	f019 f91a 	bl	198bc <ll_rx_release>
     688:	e7f2      	b.n	670 <CONFIG_BT_COMPANY_ID+0x7f>
		conn_lll->handle = 0xFFFF;
     68a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     68e:	8582      	strh	r2, [r0, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     690:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
		conn_lll = &conn->lll;
     692:	f100 031c 	add.w	r3, r0, #28
     696:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     698:	b912      	cbnz	r2, 6a0 <CONFIG_BT_COMPANY_ID+0xaf>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     69a:	f100 0264 	add.w	r2, r0, #100	; 0x64
     69e:	66c2      	str	r2, [r0, #108]	; 0x6c
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     6a0:	f104 0260 	add.w	r2, r4, #96	; 0x60
     6a4:	f104 015c 	add.w	r1, r4, #92	; 0x5c
     6a8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
     6aa:	f026 fddc 	bl	27266 <memq_init>
		conn_lll->sn = 0;
     6ae:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
		conn->llcp_terminate.node_rx.hdr.link = link;
     6b2:	f8c4 90c8 	str.w	r9, [r4, #200]	; 0xc8
		conn_lll->sn = 0;
     6b6:	f021 0107 	bic.w	r1, r1, #7
     6ba:	f884 1072 	strb.w	r1, [r4, #114]	; 0x72
		conn_lll->data_chan_sel = 0;
     6be:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
     6c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
     6c6:	f061 017f 	orn	r1, r1, #127	; 0x7f
     6ca:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
		conn_lll->slave.latency_enabled = 0;
     6ce:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
		conn_lll->link_tx_free = NULL;
     6d2:	2200      	movs	r2, #0
		conn_lll->slave.latency_enabled = 0;
     6d4:	f362 0100 	bfi	r1, r2, #0, #1
     6d8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
		conn->common.fex_valid = 0;
     6dc:	f894 1080 	ldrb.w	r1, [r4, #128]	; 0x80
		conn_lll->link_tx_free = NULL;
     6e0:	66e2      	str	r2, [r4, #108]	; 0x6c
		conn->common.fex_valid = 0;
     6e2:	f021 0103 	bic.w	r1, r1, #3
     6e6:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     6ea:	f894 10be 	ldrb.w	r1, [r4, #190]	; 0xbe
		conn_lll->packet_tx_head_len = 0;
     6ee:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     6f2:	f021 0103 	bic.w	r1, r1, #3
     6f6:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
		conn->llcp_conn_param.disabled = 0;
     6fa:	f894 10ee 	ldrb.w	r1, [r4, #238]	; 0xee
		conn_lll->data_chan_use = 0;
     6fe:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
		conn->connect_expire = 6;
     702:	2006      	movs	r0, #6
		conn->llcp_conn_param.disabled = 0;
     704:	f362 1104 	bfi	r1, r2, #4, #1
		conn_lll->slave.window_widening_event_us = 0;
     708:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
		conn_lll->latency_prepare = 0;
     70c:	8662      	strh	r2, [r4, #50]	; 0x32
		conn_lll->latency_event = 0;
     70e:	6362      	str	r2, [r4, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
     710:	6562      	str	r2, [r4, #84]	; 0x54
		conn->connect_expire = 6;
     712:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
		conn->supervision_expire = 0;
     716:	f8a4 2078 	strh.w	r2, [r4, #120]	; 0x78
		conn->procedure_expire = 0;
     71a:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     71e:	f8a4 208c 	strh.w	r2, [r4, #140]	; 0x8c
     722:	f884 208e 	strb.w	r2, [r4, #142]	; 0x8e
		conn->llcp_rx = NULL;
     726:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     72a:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     72e:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
		conn->llcp_feature.features = LL_FEAT;
     732:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     736:	f8a4 20bc 	strh.w	r2, [r4, #188]	; 0xbc
		conn->llcp_terminate.reason_peer = 0;
     73a:	f884 20c7 	strb.w	r2, [r4, #199]	; 0xc7
		conn->llcp_conn_param.req = 0;
     73e:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
		conn->llcp_conn_param.disabled = 0;
     742:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
		adv->node_rx_cc_free = node_rx;
     746:	e9c5 9b34 	strd	r9, fp, [r5, #208]	; 0xd0
		lll->conn = conn_lll;
     74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     74c:	626b      	str	r3, [r5, #36]	; 0x24
     74e:	f894 3020 	ldrb.w	r3, [r4, #32]
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     752:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
     756:	f362 0300 	bfi	r3, r2, #0, #1
		conn->tx_data = conn->tx_data_last = 0;
     75a:	e9c4 2248 	strd	r2, r2, [r4, #288]	; 0x120
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     75e:	e9c4 2246 	strd	r2, r2, [r4, #280]	; 0x118
     762:	e9c4 2205 	strd	r2, r2, [r4, #20]
	hdr->parent = parent;
     766:	61e4      	str	r4, [r4, #28]
	hdr->is_stop = 0U;
     768:	f884 3020 	strb.w	r3, [r4, #32]
		err = lll_clock_wait();
     76c:	f01b fd74 	bl	1c258 <lll_clock_wait>
		if (err) {
     770:	2800      	cmp	r0, #0
     772:	f43f aedb 	beq.w	52c <ll_adv_enable+0x8c>
			conn_release(adv);
     776:	4820      	ldr	r0, [pc, #128]	; (7f8 <CONFIG_BT_COMPANY_ID+0x207>)
     778:	f019 fc90 	bl	1a09c <conn_release>
			return BT_HCI_ERR_HW_FAILURE;
     77c:	2603      	movs	r6, #3
     77e:	e698      	b.n	4b2 <ll_adv_enable+0x12>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     780:	2c01      	cmp	r4, #1
     782:	d015      	beq.n	7b0 <CONFIG_BT_COMPANY_ID+0x1bf>
					  BYTES2US(ADVA_SIZE + rsp_data_len,
     784:	00db      	lsls	r3, r3, #3
		const u16_t scan_rsp_us  = ll_hdr_us +
     786:	3380      	adds	r3, #128	; 0x80
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     788:	b964      	cbnz	r4, 7a4 <CONFIG_BT_COMPANY_ID+0x1b3>
				adv_size += adv_data_len;
     78a:	f102 0010 	add.w	r0, r2, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
     78e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     792:	00c2      	lsls	r2, r0, #3
     794:	3398      	adds	r3, #152	; 0x98
     796:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
     79a:	f502 709a 	add.w	r0, r2, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     79e:	fb01 3000 	mla	r0, r1, r0, r3
     7a2:	e6e6      	b.n	572 <ll_adv_enable+0xd2>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     7a4:	2c06      	cmp	r4, #6
     7a6:	d0f0      	beq.n	78a <CONFIG_BT_COMPANY_ID+0x199>
		u32_t adv_size		= ll_hdr_size + ADVA_SIZE;
     7a8:	2010      	movs	r0, #16
	u32_t slot_us	= EVENT_OVERHEAD_START_US + EVENT_OVERHEAD_END_US;
     7aa:	f44f 73aa 	mov.w	r3, #340	; 0x154
     7ae:	e7f0      	b.n	792 <CONFIG_BT_COMPANY_ID+0x1a1>
				adv_size += TARGETA_SIZE;
     7b0:	2016      	movs	r0, #22
				slot_us += conn_ind_us;
     7b2:	f44f 732d 	mov.w	r3, #692	; 0x2b4
     7b6:	e7ec      	b.n	792 <CONFIG_BT_COMPANY_ID+0x1a1>
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     7b8:	4813      	ldr	r0, [pc, #76]	; (808 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8>)
     7ba:	2391      	movs	r3, #145	; 0x91
     7bc:	fbaa 0100 	umull	r0, r1, sl, r0
     7c0:	fb03 110a 	mla	r1, r3, sl, r1
     7c4:	a30a      	add	r3, pc, #40	; (adr r3, 7f0 <CONFIG_BT_COMPANY_ID+0x1ff>)
     7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start(
     7ca:	e9cd 7702 	strd	r7, r7, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     7ce:	f7ff fcd7 	bl	180 <__aeabi_uldivmod>
		ret = ticker_start(
     7d2:	464b      	mov	r3, r9
     7d4:	e9cd 7000 	strd	r7, r0, [sp]
     7d8:	2202      	movs	r2, #2
     7da:	2103      	movs	r1, #3
     7dc:	4638      	mov	r0, r7
     7de:	e723      	b.n	628 <CONFIG_BT_COMPANY_ID+0x37>
	if (adv->lll.conn) {
     7e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     7e2:	2b00      	cmp	r3, #0
     7e4:	f43f ae70 	beq.w	4c8 <ll_adv_enable+0x28>
		conn_release(adv);
     7e8:	4803      	ldr	r0, [pc, #12]	; (7f8 <CONFIG_BT_COMPANY_ID+0x207>)
     7ea:	f019 fc57 	bl	1a09c <conn_release>
     7ee:	e66b      	b.n	4c8 <ll_adv_enable+0x28>
     7f0:	1afd498d 	.word	0x1afd498d
     7f4:	00000007 	.word	0x00000007
     7f8:	200014bc 	.word	0x200014bc
     7fc:	3b9aca00 	.word	0x3b9aca00
     800:	00019f9d 	.word	0x00019f9d
     804:	0001a1f5 	.word	0x0001a1f5
     808:	84e72a00 	.word	0x84e72a00
     80c:	000199dd 	.word	0x000199dd

00000810 <ull_scan_enable>:
	lll->interval = interval;
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window * 625U);
}

u8_t ull_scan_enable(struct ll_scan_set *scan)
{
     810:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
     814:	b08c      	sub	sp, #48	; 0x30
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
     816:	2302      	movs	r3, #2
{
     818:	4604      	mov	r4, r0
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
     81a:	930b      	str	r3, [sp, #44]	; 0x2c
	u32_t ticks_slot_offset;
	u32_t ticks_interval;
	u32_t ticks_anchor;
	u32_t ret;

	lll->chan = 0;
     81c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	lll->init_addr_type = scan->own_addr_type;
     820:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	ull_hdr_init(&scan->ull);
	lll_hdr_init(lll, scan);

	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t)lll->interval * 625U);
     824:	4e36      	ldr	r6, [pc, #216]	; (900 <ull_scan_enable+0xf0>)
	lll->init_addr_type = scan->own_addr_type;
     826:	f3c0 0040 	ubfx	r0, r0, #1, #1
     82a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
     82e:	f360 1386 	bfi	r3, r0, #6, #1
     832:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	ll_addr_get(lll->init_addr_type, lll->init_addr);
     836:	f104 0125 	add.w	r1, r4, #37	; 0x25
     83a:	f017 fcbd 	bl	181b8 <ll_addr_get>
     83e:	f894 3020 	ldrb.w	r3, [r4, #32]
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t)lll->interval * 625U);
     842:	8e67      	ldrh	r7, [r4, #50]	; 0x32
	hdr->parent = parent;
     844:	61e4      	str	r4, [r4, #28]
     846:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
     848:	f365 0300 	bfi	r3, r5, #0, #1
     84c:	fba7 0106 	umull	r0, r1, r7, r6
     850:	f884 3020 	strb.w	r3, [r4, #32]
     854:	2391      	movs	r3, #145	; 0x91
     856:	fb03 1107 	mla	r1, r3, r7, r1
     85a:	e9c4 5505 	strd	r5, r5, [r4, #20]
     85e:	a326      	add	r3, pc, #152	; (adr r3, 8f8 <ull_scan_enable+0xe8>)
     860:	e9d3 2300 	ldrd	r2, r3, [r3]
     864:	f7ff fc8c 	bl	180 <__aeabi_uldivmod>

	/* TODO: active_to_start feature port */
	scan->evt.ticks_active_to_start = 0U;
	scan->evt.ticks_xtal_to_start =
     868:	2331      	movs	r3, #49	; 0x31
     86a:	6023      	str	r3, [r4, #0]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	scan->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	if ((lll->ticks_window +
     86c:	6b63      	ldr	r3, [r4, #52]	; 0x34
	scan->evt.ticks_active_to_start = 0U;
     86e:	6065      	str	r5, [r4, #4]
	if ((lll->ticks_window +
     870:	3309      	adds	r3, #9
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) <
	    (ticks_interval -
     872:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
     876:	4293      	cmp	r3, r2
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US))) {
		scan->evt.ticks_slot =
     878:	bf32      	itee	cc
     87a:	60e3      	strcc	r3, [r4, #12]
			(lll->ticks_window +
			 HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US));
	} else {
		scan->evt.ticks_slot =
     87c:	60e2      	strcs	r2, [r4, #12]
			(ticks_interval -
			 HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US));
		lll->ticks_window = 0;
     87e:	6365      	strcs	r5, [r4, #52]	; 0x34
	scan->evt.ticks_preempt_to_start =
     880:	60a5      	str	r5, [r4, #8]
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t)lll->interval * 625U);
     882:	4607      	mov	r7, r0
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	ticks_anchor = ticker_ticks_now_get();
     884:	f026 fdd6 	bl	27434 <ticker_ticks_now_get>
				       HAL_TICKER_US_TO_TICKS(offset_us);
		}
	}
#endif /* CONFIG_BT_CENTRAL && CONFIG_BT_CTLR_SCHED_ADVANCED */

	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     888:	4b1e      	ldr	r3, [pc, #120]	; (904 <ull_scan_enable+0xf4>)
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE,
			   ticks_anchor, 0, ticks_interval,
			   HAL_TICKER_REMAINDER((u64_t)lll->interval * 625U),
     88a:	f8b4 b032 	ldrh.w	fp, [r4, #50]	; 0x32
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     88e:	e9cd 4306 	strd	r4, r3, [sp, #24]
     892:	4b1d      	ldr	r3, [pc, #116]	; (908 <ull_scan_enable+0xf8>)
     894:	9305      	str	r3, [sp, #20]
     896:	46b1      	mov	r9, r6
     898:	68e3      	ldr	r3, [r4, #12]
     89a:	9304      	str	r3, [sp, #16]
	ticks_anchor = ticker_ticks_now_get();
     89c:	4680      	mov	r8, r0
			   HAL_TICKER_REMAINDER((u64_t)lll->interval * 625U),
     89e:	2391      	movs	r3, #145	; 0x91
     8a0:	fbab 0109 	umull	r0, r1, fp, r9
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     8a4:	2500      	movs	r5, #0
     8a6:	ae0b      	add	r6, sp, #44	; 0x2c
			   HAL_TICKER_REMAINDER((u64_t)lll->interval * 625U),
     8a8:	fb03 110b 	mla	r1, r3, fp, r1
     8ac:	a312      	add	r3, pc, #72	; (adr r3, 8f8 <ull_scan_enable+0xe8>)
     8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     8b2:	9608      	str	r6, [sp, #32]
     8b4:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t)lll->interval * 625U),
     8b6:	f7ff fc63 	bl	180 <__aeabi_uldivmod>
     8ba:	4610      	mov	r0, r2
     8bc:	4619      	mov	r1, r3
     8be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8c2:	2300      	movs	r3, #0
     8c4:	f7ff fc5c 	bl	180 <__aeabi_uldivmod>
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     8c8:	2103      	movs	r1, #3
     8ca:	e9cd 7001 	strd	r7, r0, [sp, #4]
     8ce:	9500      	str	r5, [sp, #0]
     8d0:	4643      	mov	r3, r8
     8d2:	2204      	movs	r2, #4
     8d4:	4628      	mov	r0, r5
     8d6:	f017 fba7 	bl	18028 <ticker_start>
			   TICKER_NULL_LAZY,
			   (scan->evt.ticks_slot + ticks_slot_overhead),
			   ticker_cb, scan,
			   ull_ticker_status_give, (void *)&ret_cb);

	ret = ull_ticker_status_take(ret, &ret_cb);
     8da:	4631      	mov	r1, r6
     8dc:	f019 f884 	bl	199e8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     8e0:	b940      	cbnz	r0, 8f4 <ull_scan_enable+0xe4>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	scan->is_enabled = 1U;
     8e2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
     8e6:	f043 0301 	orr.w	r3, r3, #1
     8ea:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		ull_filter_adv_scan_state_cb(BIT(1));
	}
#endif

	return 0;
}
     8ee:	b00c      	add	sp, #48	; 0x30
     8f0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     8f4:	200c      	movs	r0, #12
     8f6:	e7fa      	b.n	8ee <ull_scan_enable+0xde>
     8f8:	1afd498d 	.word	0x1afd498d
     8fc:	00000007 	.word	0x00000007
     900:	84e72a00 	.word	0x84e72a00
     904:	000199dd 	.word	0x000199dd
     908:	0001a58d 	.word	0x0001a58d
     90c:	00000000 	.word	0x00000000

00000910 <ll_scan_params_set>:
{
     910:	b570      	push	{r4, r5, r6, lr}
     912:	4605      	mov	r5, r0
	scan = ull_scan_is_disabled_get(0);
     914:	2000      	movs	r0, #0
{
     916:	461e      	mov	r6, r3
	scan = ull_scan_is_disabled_get(0);
     918:	f019 fefa 	bl	1a710 <ull_scan_is_disabled_get>
	if (!scan) {
     91c:	4604      	mov	r4, r0
     91e:	b310      	cbz	r0, 966 <ll_scan_params_set+0x56>
	scan->own_addr_type = own_addr_type;
     920:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
     924:	f366 0342 	bfi	r3, r6, #1, #2
     928:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	lll->filter_policy = filter_policy;
     92c:	f89d 3010 	ldrb.w	r3, [sp, #16]
	lll->interval = interval;
     930:	8661      	strh	r1, [r4, #50]	; 0x32
	lll->filter_policy = filter_policy;
     932:	00db      	lsls	r3, r3, #3
     934:	f003 0318 	and.w	r3, r3, #24
     938:	ea43 10c5 	orr.w	r0, r3, r5, lsl #7
     93c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
     940:	f003 0367 	and.w	r3, r3, #103	; 0x67
     944:	4318      	orrs	r0, r3
     946:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window * 625U);
     94a:	480b      	ldr	r0, [pc, #44]	; (978 <ll_scan_params_set+0x68>)
     94c:	2391      	movs	r3, #145	; 0x91
     94e:	fba2 0100 	umull	r0, r1, r2, r0
     952:	fb03 1102 	mla	r1, r3, r2, r1
     956:	a306      	add	r3, pc, #24	; (adr r3, 970 <ll_scan_params_set+0x60>)
     958:	e9d3 2300 	ldrd	r2, r3, [r3]
     95c:	f7ff fc10 	bl	180 <__aeabi_uldivmod>
     960:	6360      	str	r0, [r4, #52]	; 0x34
	return 0;
     962:	2000      	movs	r0, #0
}
     964:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     966:	200c      	movs	r0, #12
     968:	e7fc      	b.n	964 <ll_scan_params_set+0x54>
     96a:	bf00      	nop
     96c:	f3af 8000 	nop.w
     970:	1afd498d 	.word	0x1afd498d
     974:	00000007 	.word	0x00000007
     978:	84e72a00 	.word	0x84e72a00
     97c:	00000000 	.word	0x00000000

00000980 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, u32_t ticks_at_expire, u16_t lazy)
{
     980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     984:	4690      	mov	r8, r2
	LL_ASSERT(conn->lll.handle != 0xFFFF);
     986:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     988:	f64f 73ff 	movw	r3, #65535	; 0xffff
     98c:	429a      	cmp	r2, r3
{
     98e:	b08d      	sub	sp, #52	; 0x34
     990:	4604      	mov	r4, r0
     992:	460e      	mov	r6, r1
	LL_ASSERT(conn->lll.handle != 0xFFFF);
     994:	d10c      	bne.n	9b0 <ull_conn_llcp+0x30>
     996:	4acd      	ldr	r2, [pc, #820]	; (ccc <ull_conn_llcp+0x34c>)
     998:	49cd      	ldr	r1, [pc, #820]	; (cd0 <ull_conn_llcp+0x350>)
     99a:	48ce      	ldr	r0, [pc, #824]	; (cd4 <ull_conn_llcp+0x354>)
     99c:	f44f 7344 	mov.w	r3, #784	; 0x310
     9a0:	f022 fc93 	bl	232ca <printk>
     9a4:	4040      	eors	r0, r0
     9a6:	f380 8811 	msr	BASEPRI, r0
     9aa:	f04f 0003 	mov.w	r0, #3
     9ae:	df02      	svc	2

	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
     9b0:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
     9b4:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
     9b8:	4293      	cmp	r3, r2
     9ba:	d10b      	bne.n	9d4 <ull_conn_llcp+0x54>
#endif /* !CONFIG_BT_CTLR_LE_ENC */

		/* TODO: Optimize the checks below, maybe have common flag */

		/* check if connection update procedure is requested */
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
     9bc:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
     9c0:	f894 10a0 	ldrb.w	r1, [r4, #160]	; 0xa0
     9c4:	4291      	cmp	r1, r2
     9c6:	d025      	beq.n	a14 <ull_conn_llcp+0x94>
			/* switch to LLCP_CONN_UPD state machine */
			conn->llcp_type = LLCP_CONN_UPD;
     9c8:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
     9ca:	3b02      	subs	r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
     9cc:	f884 208e 	strb.w	r2, [r4, #142]	; 0x8e
			conn->llcp_ack -= 2U;
     9d0:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
     9d4:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
     9d8:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
     9dc:	1acb      	subs	r3, r1, r3
     9de:	f003 0303 	and.w	r3, r3, #3
     9e2:	2b02      	cmp	r3, #2
     9e4:	f040 8279 	bne.w	eda <ull_conn_llcp+0x55a>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Process procedures with instants or encryption setup */
		/* FIXME: Make LE Ping cacheable */
		switch (conn->llcp_type) {
     9e8:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
     9ec:	2b01      	cmp	r3, #1
     9ee:	f000 8222 	beq.w	e36 <ull_conn_llcp+0x4b6>
     9f2:	2b02      	cmp	r3, #2
     9f4:	f000 8438 	beq.w	1268 <ull_conn_llcp+0x8e8>
		}
		break;
#endif /* CONFIG_BT_CTLR_PHY */

		default:
			LL_ASSERT(0);
     9f8:	4ab4      	ldr	r2, [pc, #720]	; (ccc <ull_conn_llcp+0x34c>)
     9fa:	49b7      	ldr	r1, [pc, #732]	; (cd8 <ull_conn_llcp+0x358>)
     9fc:	48b5      	ldr	r0, [pc, #724]	; (cd4 <ull_conn_llcp+0x354>)
     9fe:	f240 3396 	movw	r3, #918	; 0x396
     a02:	f022 fc62 	bl	232ca <printk>
     a06:	4040      	eors	r0, r0
     a08:	f380 8811 	msr	BASEPRI, r0
     a0c:	f04f 0003 	mov.w	r0, #3
     a10:	df02      	svc	2
			break;
     a12:	e262      	b.n	eda <ull_conn_llcp+0x55a>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
     a14:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
     a18:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
     a1c:	428b      	cmp	r3, r1
     a1e:	d067      	beq.n	af0 <ull_conn_llcp+0x170>
static inline void event_fex_prep(struct ll_conn *conn)
{
	struct node_tx *tx;

	/* If waiting for response, do nothing */
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
     a20:	1a5b      	subs	r3, r3, r1
     a22:	07d8      	lsls	r0, r3, #31
     a24:	d5d6      	bpl.n	9d4 <ull_conn_llcp+0x54>
		return;
	}

	if (conn->common.fex_valid) {
     a26:	f894 1080 	ldrb.w	r1, [r4, #128]	; 0x80
     a2a:	f011 0701 	ands.w	r7, r1, #1
     a2e:	d02e      	beq.n	a8e <ull_conn_llcp+0x10e>
		struct node_rx_pdu *rx;
		struct pdu_data *pdu;

		/* get a rx node for ULL->LL */
		rx = ll_pdu_rx_alloc();
     a30:	f018 ff72 	bl	19918 <ll_pdu_rx_alloc>
		if (!rx) {
     a34:	4605      	mov	r5, r0
     a36:	2800      	cmp	r0, #0
     a38:	d0cc      	beq.n	9d4 <ull_conn_llcp+0x54>
			return;
		}

		/* procedure request acked */
		conn->llcp_feature.ack = conn->llcp_feature.req;
     a3a:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
     a3e:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5

		/* prepare feature rsp structure */
		rx->hdr.handle = conn->lll.handle;
     a42:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     a44:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     a46:	2302      	movs	r3, #2
     a48:	7103      	strb	r3, [r0, #4]
		pdu = (void *)rx->pdu;
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     a4a:	f890 3020 	ldrb.w	r3, [r0, #32]
     a4e:	f043 0303 	orr.w	r3, r3, #3
     a52:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
     a56:	2309      	movs	r3, #9
     a58:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
			   sizeof(struct pdu_data_llctrl_feature_rsp);
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
     a5c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
     a60:	2208      	movs	r2, #8
     a62:	2100      	movs	r1, #0
     a64:	3024      	adds	r0, #36	; 0x24
     a66:	f024 fb3e 	bl	250e6 <memset>
			sizeof(pdu->llctrl.feature_rsp.features));
		sys_put_le24(conn->llcp_feature.features,
     a6a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
     a6e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	dst[1] = val >> 8;
     a72:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le24(u32_t val, u8_t dst[3])
{
	sys_put_le16(val, dst);
	dst[2] = val >> 16;
     a76:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
     a78:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	dst[2] = val >> 16;
     a7c:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
			     pdu->llctrl.feature_req.features);

		/* enqueue feature rsp structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
     a80:	4629      	mov	r1, r5
			sys_cpu_to_le16(conn->llcp_version.company_id);
		pdu->llctrl.version_ind.sub_version_number =
			sys_cpu_to_le16(conn->llcp_version.sub_version_number);

		/* enqueue version ind structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
     a82:	6808      	ldr	r0, [r1, #0]
     a84:	f018 ff20 	bl	198c8 <ll_rx_put>
		ll_rx_sched();
     a88:	f018 ff28 	bl	198dc <ll_rx_sched>
     a8c:	e7a2      	b.n	9d4 <ull_conn_llcp+0x54>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     a8e:	4893      	ldr	r0, [pc, #588]	; (cdc <ull_conn_llcp+0x35c>)
     a90:	f026 fb99 	bl	271c6 <mem_acquire>
	if (tx) {
     a94:	4605      	mov	r5, r0
     a96:	2800      	cmp	r0, #0
     a98:	d09c      	beq.n	9d4 <ull_conn_llcp+0x54>
		conn->llcp_feature.ack--;
     a9a:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
     a9e:	3b01      	subs	r3, #1
     aa0:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
		conn->llcp_feature.features = LL_FEAT;
     aa4:	2306      	movs	r3, #6
     aa6:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     aaa:	7903      	ldrb	r3, [r0, #4]
     aac:	f043 0303 	orr.w	r3, r3, #3
     ab0:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
     ab2:	2309      	movs	r3, #9
     ab4:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
     ab6:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
     aba:	2b00      	cmp	r3, #0
     abc:	bfac      	ite	ge
     abe:	2308      	movge	r3, #8
     ac0:	230e      	movlt	r3, #14
		(void)memset(&pdu->llctrl.feature_req.features[0],
     ac2:	2208      	movs	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
     ac4:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
     ac6:	4639      	mov	r1, r7
     ac8:	4410      	add	r0, r2
     aca:	f024 fb0c 	bl	250e6 <memset>
		sys_put_le24(conn->llcp_feature.features,
     ace:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	dst[0] = val;
     ad2:	722b      	strb	r3, [r5, #8]
	dst[1] = val >> 8;
     ad4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
     ad8:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
     ada:	726a      	strb	r2, [r5, #9]
	dst[2] = val >> 16;
     adc:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, tx);
     ade:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, tx);
     ae0:	4620      	mov	r0, r4
     ae2:	f026 fded 	bl	276c0 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
     ae6:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
     aea:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
     aee:	e771      	b.n	9d4 <ull_conn_llcp+0x54>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
     af0:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
     af4:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
     af8:	428b      	cmp	r3, r1
     afa:	d064      	beq.n	bc6 <ull_conn_llcp+0x246>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
     afc:	1a5b      	subs	r3, r3, r1
     afe:	07d9      	lsls	r1, r3, #31
     b00:	f57f af68 	bpl.w	9d4 <ull_conn_llcp+0x54>
	if (conn->llcp_version.tx == 0U) {
     b04:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
     b08:	07da      	lsls	r2, r3, #31
     b0a:	d425      	bmi.n	b58 <ull_conn_llcp+0x1d8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     b0c:	4873      	ldr	r0, [pc, #460]	; (cdc <ull_conn_llcp+0x35c>)
     b0e:	f026 fb5a 	bl	271c6 <mem_acquire>
		if (tx) {
     b12:	4601      	mov	r1, r0
     b14:	2800      	cmp	r0, #0
     b16:	f43f af5d 	beq.w	9d4 <ull_conn_llcp+0x54>
			conn->llcp_version.ack--;
     b1a:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
     b1e:	3b01      	subs	r3, #1
     b20:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
			conn->llcp_version.tx = 1U;
     b24:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
     b28:	f043 0301 	orr.w	r3, r3, #1
     b2c:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
			pdu->ll_id = PDU_DATA_LLID_CTRL;
     b30:	7903      	ldrb	r3, [r0, #4]
     b32:	f043 0303 	orr.w	r3, r3, #3
     b36:	7103      	strb	r3, [r0, #4]
			pdu->len =
     b38:	2306      	movs	r3, #6
     b3a:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
     b3c:	230c      	movs	r3, #12
     b3e:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
     b40:	230a      	movs	r3, #10
     b42:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
     b44:	f06f 030e 	mvn.w	r3, #14
     b48:	7243      	strb	r3, [r0, #9]
     b4a:	2305      	movs	r3, #5
     b4c:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
     b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     b52:	72c3      	strb	r3, [r0, #11]
     b54:	7303      	strb	r3, [r0, #12]
     b56:	e7c3      	b.n	ae0 <ull_conn_llcp+0x160>
	} else if (conn->llcp_version.rx) {
     b58:	079f      	lsls	r7, r3, #30
     b5a:	d526      	bpl.n	baa <ull_conn_llcp+0x22a>
		rx = ll_pdu_rx_alloc();
     b5c:	f018 fedc 	bl	19918 <ll_pdu_rx_alloc>
		if (!rx) {
     b60:	4601      	mov	r1, r0
     b62:	2800      	cmp	r0, #0
     b64:	f43f af36 	beq.w	9d4 <ull_conn_llcp+0x54>
		conn->llcp_version.ack = conn->llcp_version.req;
     b68:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
     b6c:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
		rx->hdr.handle = conn->lll.handle;
     b70:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     b72:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     b74:	2302      	movs	r3, #2
     b76:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     b78:	f890 3020 	ldrb.w	r3, [r0, #32]
     b7c:	f043 0303 	orr.w	r3, r3, #3
     b80:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
     b84:	2306      	movs	r3, #6
     b86:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
     b8a:	230c      	movs	r3, #12
     b8c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
     b90:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
     b94:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		pdu->llctrl.version_ind.company_id =
     b98:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
     b9c:	f8a0 3025 	strh.w	r3, [r0, #37]	; 0x25
		pdu->llctrl.version_ind.sub_version_number =
     ba0:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
     ba4:	f8a0 3027 	strh.w	r3, [r0, #39]	; 0x27
     ba8:	e76b      	b.n	a82 <ull_conn_llcp+0x102>
	} else {
		/* tx-ed but no rx, and new request placed */
		LL_ASSERT(0);
     baa:	f640 332a 	movw	r3, #2858	; 0xb2a
	case LLCP_CPR_STATE_UPD:
		/* Do nothing */
		break;

	default:
		LL_ASSERT(0);
     bae:	4a47      	ldr	r2, [pc, #284]	; (ccc <ull_conn_llcp+0x34c>)
     bb0:	4949      	ldr	r1, [pc, #292]	; (cd8 <ull_conn_llcp+0x358>)
     bb2:	4848      	ldr	r0, [pc, #288]	; (cd4 <ull_conn_llcp+0x354>)
     bb4:	f022 fb89 	bl	232ca <printk>
     bb8:	4040      	eors	r0, r0
     bba:	f380 8811 	msr	BASEPRI, r0
     bbe:	f04f 0003 	mov.w	r0, #3
     bc2:	df02      	svc	2
		break;
     bc4:	e706      	b.n	9d4 <ull_conn_llcp+0x54>
		} else if (conn->llcp_conn_param.ack !=
     bc6:	f894 10ed 	ldrb.w	r1, [r4, #237]	; 0xed
     bca:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
     bce:	4299      	cmp	r1, r3
     bd0:	f43f af00 	beq.w	9d4 <ull_conn_llcp+0x54>
	conn_upd = conn_upd_curr;
     bd4:	4d42      	ldr	r5, [pc, #264]	; (ce0 <ull_conn_llcp+0x360>)
     bd6:	682b      	ldr	r3, [r5, #0]
	if (conn_upd && (conn_upd != conn)) {
     bd8:	b113      	cbz	r3, be0 <ull_conn_llcp+0x260>
     bda:	429c      	cmp	r4, r3
     bdc:	f47f aefa 	bne.w	9d4 <ull_conn_llcp+0x54>
	switch (conn->llcp_conn_param.state) {
     be0:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
     be4:	f003 0307 	and.w	r3, r3, #7
     be8:	2b05      	cmp	r3, #5
     bea:	f200 8121 	bhi.w	e30 <ull_conn_llcp+0x4b0>
     bee:	a101      	add	r1, pc, #4	; (adr r1, bf4 <ull_conn_llcp+0x274>)
     bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     bf4:	00000c0d 	.word	0x00000c0d
     bf8:	00000c89 	.word	0x00000c89
     bfc:	00000ddf 	.word	0x00000ddf
     c00:	000009d5 	.word	0x000009d5
     c04:	000009d5 	.word	0x000009d5
     c08:	000009d5 	.word	0x000009d5
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     c0c:	4833      	ldr	r0, [pc, #204]	; (cdc <ull_conn_llcp+0x35c>)
			event_counter = lll->event_counter +
     c0e:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
     c10:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     c14:	f026 fad7 	bl	271c6 <mem_acquire>
	if (!tx) {
     c18:	4601      	mov	r1, r0
     c1a:	2800      	cmp	r0, #0
     c1c:	f43f aeda 	beq.w	9d4 <ull_conn_llcp+0x54>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
     c20:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
     c24:	2204      	movs	r2, #4
     c26:	f362 0302 	bfi	r3, r2, #0, #3
     c2a:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     c2e:	7903      	ldrb	r3, [r0, #4]
     c30:	f043 0303 	orr.w	r3, r3, #3
     c34:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     c36:	2318      	movs	r3, #24
     c38:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     c3a:	230f      	movs	r3, #15
     c3c:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
     c3e:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
     c42:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
     c44:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
     c48:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
     c4a:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
     c4e:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
     c50:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
     c54:	81c3      	strh	r3, [r0, #14]
			event_counter = lll->event_counter +
     c56:	444f      	add	r7, r9
	p->preferred_periodicity = 0U;
     c58:	2300      	movs	r3, #0
     c5a:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
     c5c:	74c3      	strb	r3, [r0, #19]
     c5e:	7503      	strb	r3, [r0, #20]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
     c60:	4447      	add	r7, r8
	p->offset1 = sys_cpu_to_le16(0xffff);
     c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
     c66:	f8a0 7011 	strh.w	r7, [r0, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
     c6a:	7543      	strb	r3, [r0, #21]
     c6c:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
     c6e:	75c3      	strb	r3, [r0, #23]
     c70:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
     c72:	7643      	strb	r3, [r0, #25]
     c74:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
     c76:	76c3      	strb	r3, [r0, #27]
     c78:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
     c7a:	7743      	strb	r3, [r0, #29]
     c7c:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, tx);
     c7e:	4620      	mov	r0, r4
     c80:	f026 fd1e 	bl	276c0 <ctrl_tx_enqueue>
	conn_upd_curr = conn;
     c84:	602c      	str	r4, [r5, #0]
	conn->procedure_expire = conn->procedure_reload;
     c86:	e72e      	b.n	ae6 <ull_conn_llcp+0x166>
	if (conn->llcp_conn_param.status) {
     c88:	f894 70ef 	ldrb.w	r7, [r4, #239]	; 0xef
     c8c:	b357      	cbz	r7, ce4 <ull_conn_llcp+0x364>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     c8e:	4813      	ldr	r0, [pc, #76]	; (cdc <ull_conn_llcp+0x35c>)
     c90:	f026 fa99 	bl	271c6 <mem_acquire>
		if (!tx) {
     c94:	4601      	mov	r1, r0
     c96:	2800      	cmp	r0, #0
     c98:	f43f ae9c 	beq.w	9d4 <ull_conn_llcp+0x54>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     c9c:	7903      	ldrb	r3, [r0, #4]
     c9e:	f043 0303 	orr.w	r3, r3, #3
     ca2:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
     ca4:	2311      	movs	r3, #17
     ca6:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
     ca8:	2303      	movs	r3, #3
     caa:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     cac:	230f      	movs	r3, #15
     cae:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
     cb0:	f894 30ef 	ldrb.w	r3, [r4, #239]	; 0xef
     cb4:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, tx);
     cb6:	4620      	mov	r0, r4
     cb8:	f026 fd02 	bl	276c0 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     cbc:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
     cc0:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
		conn_upd_curr = NULL;
     cc4:	2300      	movs	r3, #0
     cc6:	602b      	str	r3, [r5, #0]
		return;
     cc8:	e684      	b.n	9d4 <ull_conn_llcp+0x54>
     cca:	bf00      	nop
     ccc:	0002f06c 	.word	0x0002f06c
     cd0:	0002f199 	.word	0x0002f199
     cd4:	000297e6 	.word	0x000297e6
     cd8:	0002d2c6 	.word	0x0002d2c6
     cdc:	200017a8 	.word	0x200017a8
     ce0:	2000172c 	.word	0x2000172c
	if (!conn->lll.role) {
     ce4:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
     ce8:	2b00      	cmp	r3, #0
     cea:	db35      	blt.n	d58 <ull_conn_llcp+0x3d8>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     cec:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
		conn->llcp_cu.win_offset_us = 0U;
     cf0:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     cf4:	2105      	movs	r1, #5
     cf6:	f361 0302 	bfi	r3, r1, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
     cfa:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     cfe:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
		conn->llcp_cu.win_size = 1U;
     d02:	2301      	movs	r3, #1
     d04:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		if (conn->llcp_conn_param.preferred_periodicity) {
     d08:	b319      	cbz	r1, d52 <ull_conn_llcp+0x3d2>
				((conn->llcp_conn_param.interval_min /
     d0a:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
     d0e:	fbb3 f3f1 	udiv	r3, r3, r1
				  conn->llcp_conn_param.preferred_periodicity) +
     d12:	3301      	adds	r3, #1
			conn->llcp_cu.interval =
     d14:	fb13 f301 	smulbb	r3, r3, r1
     d18:	b29b      	uxth	r3, r3
     d1a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
     d1e:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
     d22:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
     d26:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
     d2a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
     d2e:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
     d32:	f894 10a2 	ldrb.w	r1, [r4, #162]	; 0xa2
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
     d36:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
     d3a:	009b      	lsls	r3, r3, #2
     d3c:	f043 0302 	orr.w	r3, r3, #2
     d40:	f021 0107 	bic.w	r1, r1, #7
     d44:	430b      	orrs	r3, r1
		conn->llcp_cu.ack--;
     d46:	3a01      	subs	r2, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
     d48:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_cu.ack--;
     d4c:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
		return;
     d50:	e640      	b.n	9d4 <ull_conn_llcp+0x54>
				conn->llcp_conn_param.interval_max;
     d52:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
     d56:	e7e0      	b.n	d1a <ull_conn_llcp+0x39a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     d58:	4865      	ldr	r0, [pc, #404]	; (ef0 <ull_conn_llcp+0x570>)
     d5a:	f026 fa34 	bl	271c6 <mem_acquire>
	if (!tx) {
     d5e:	4601      	mov	r1, r0
     d60:	2800      	cmp	r0, #0
     d62:	f43f ae37 	beq.w	9d4 <ull_conn_llcp+0x54>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     d66:	7903      	ldrb	r3, [r0, #4]
     d68:	f043 0303 	orr.w	r3, r3, #3
     d6c:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
     d6e:	2318      	movs	r3, #24
     d70:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
     d72:	2310      	movs	r3, #16
     d74:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min =
     d76:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
     d7a:	8103      	strh	r3, [r0, #8]
	rsp->interval_max =
     d7c:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
     d80:	8143      	strh	r3, [r0, #10]
	rsp->latency =
     d82:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
     d86:	8183      	strh	r3, [r0, #12]
	rsp->timeout =
     d88:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
     d8c:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
     d8e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
     d92:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
     d94:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
     d98:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
     d9c:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
     da0:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
     da4:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
     da8:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
     dac:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
     db0:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
     db4:	f8b4 3102 	ldrh.w	r3, [r4, #258]	; 0x102
     db8:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
     dbc:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
     dc0:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
     dc4:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
     dc8:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, tx);
     dcc:	4620      	mov	r0, r4
     dce:	f026 fc77 	bl	276c0 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     dd2:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
     dd6:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
	conn_upd_curr = NULL;
     dda:	602f      	str	r7, [r5, #0]
     ddc:	e5fa      	b.n	9d4 <ull_conn_llcp+0x54>
	rx = ll_pdu_rx_alloc();
     dde:	f018 fd9b 	bl	19918 <ll_pdu_rx_alloc>
	if (!rx) {
     de2:	4601      	mov	r1, r0
     de4:	2800      	cmp	r0, #0
     de6:	f43f adf5 	beq.w	9d4 <ull_conn_llcp+0x54>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
     dea:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
     dee:	2203      	movs	r2, #3
     df0:	f362 0302 	bfi	r3, r2, #0, #3
     df4:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
	rx->hdr.handle = conn->lll.handle;
     df8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     dfa:	80c3      	strh	r3, [r0, #6]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     dfc:	2302      	movs	r3, #2
     dfe:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     e00:	f890 3020 	ldrb.w	r3, [r0, #32]
     e04:	4313      	orrs	r3, r2
     e06:	f880 3020 	strb.w	r3, [r0, #32]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     e0a:	2318      	movs	r3, #24
     e0c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     e10:	230f      	movs	r3, #15
     e12:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
     e16:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
     e1a:	8483      	strh	r3, [r0, #36]	; 0x24
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
     e1c:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
     e20:	84c3      	strh	r3, [r0, #38]	; 0x26
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
     e22:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
     e26:	8503      	strh	r3, [r0, #40]	; 0x28
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
     e28:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
     e2c:	8543      	strh	r3, [r0, #42]	; 0x2a
	ll_rx_put(rx->hdr.link, rx);
     e2e:	e628      	b.n	a82 <ull_conn_llcp+0x102>
		LL_ASSERT(0);
     e30:	f640 4337 	movw	r3, #3127	; 0xc37
     e34:	e6bb      	b.n	bae <ull_conn_llcp+0x22e>
	conn_upd = conn_upd_curr;
     e36:	4b2f      	ldr	r3, [pc, #188]	; (ef4 <ull_conn_llcp+0x574>)
	if (!conn_upd) {
     e38:	681a      	ldr	r2, [r3, #0]
     e3a:	b902      	cbnz	r2, e3e <ull_conn_llcp+0x4be>
		conn_upd_curr = conn;
     e3c:	601c      	str	r4, [r3, #0]
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     e3e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
     e40:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
     e42:	4417      	add	r7, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     e44:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     e48:	4447      	add	r7, r8
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     e4a:	f012 0003 	ands.w	r0, r2, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     e4e:	b2bf      	uxth	r7, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     e50:	d052      	beq.n	ef8 <ull_conn_llcp+0x578>
		rx = ll_pdu_rx_alloc_peek(1);
     e52:	2001      	movs	r0, #1
     e54:	f018 fd48 	bl	198e8 <ll_pdu_rx_alloc_peek>
		if (!rx) {
     e58:	4606      	mov	r6, r0
     e5a:	2800      	cmp	r0, #0
     e5c:	d03d      	beq.n	eda <ull_conn_llcp+0x55a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     e5e:	4824      	ldr	r0, [pc, #144]	; (ef0 <ull_conn_llcp+0x570>)
     e60:	f026 f9b1 	bl	271c6 <mem_acquire>
		if (!tx) {
     e64:	4605      	mov	r5, r0
     e66:	b3c0      	cbz	r0, eda <ull_conn_llcp+0x55a>
		(void)ll_pdu_rx_alloc();
     e68:	f018 fd56 	bl	19918 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
     e6c:	6833      	ldr	r3, [r6, #0]
     e6e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
     e72:	605a      	str	r2, [r3, #4]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     e74:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_rx = rx;
     e78:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     e7c:	f36f 0301 	bfc	r3, #0, #2
     e80:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
     e84:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     e86:	441f      	add	r7, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e88:	792b      	ldrb	r3, [r5, #4]
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
     e8a:	3706      	adds	r7, #6
     e8c:	b2bf      	uxth	r7, r7
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e8e:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
     e92:	f8a4 7090 	strh.w	r7, [r4, #144]	; 0x90
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e96:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
     e98:	230c      	movs	r3, #12
     e9a:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     e9c:	2300      	movs	r3, #0
     e9e:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
     ea0:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
     ea4:	722b      	strb	r3, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     ea6:	f240 42e2 	movw	r2, #1250	; 0x4e2
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
     eaa:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     eae:	fbb3 f3f2 	udiv	r3, r3, r2
     eb2:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
     eb6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
     eba:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
     ebe:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
     ec2:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
     ec6:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
     eca:	f8a5 300f 	strh.w	r3, [r5, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
     ece:	f8a5 7011 	strh.w	r7, [r5, #17]
			ctrl_tx_enqueue(conn, tx);
     ed2:	4629      	mov	r1, r5
     ed4:	4620      	mov	r0, r4
     ed6:	f026 fbf3 	bl	276c0 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
     eda:	f894 20c5 	ldrb.w	r2, [r4, #197]	; 0xc5
     ede:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
     ee2:	429a      	cmp	r2, r3
     ee4:	f040 8210 	bne.w	1308 <ull_conn_llcp+0x988>
	return 0;
     ee8:	2000      	movs	r0, #0
}
     eea:	b00d      	add	sp, #52	; 0x34
     eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ef0:	200017a8 	.word	0x200017a8
     ef4:	2000172c 	.word	0x2000172c
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     ef8:	f8b4 9090 	ldrh.w	r9, [r4, #144]	; 0x90
     efc:	eba7 0209 	sub.w	r2, r7, r9
	} else if (instant_latency <= 0x7FFF) {
     f00:	0415      	lsls	r5, r2, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     f02:	fa1f fb82 	uxth.w	fp, r2
	} else if (instant_latency <= 0x7FFF) {
     f06:	d4e8      	bmi.n	eda <ull_conn_llcp+0x55a>
		conn->llcp_cu.ack = conn->llcp_cu.req;
     f08:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
     f0c:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
		conn->llcp_ack = conn->llcp_req;
     f10:	f884 108d 	strb.w	r1, [r4, #141]	; 0x8d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     f14:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
     f18:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
     f1c:	428a      	cmp	r2, r1
     f1e:	d009      	beq.n	f34 <ull_conn_llcp+0x5b4>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     f20:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     f24:	f002 0207 	and.w	r2, r2, #7
     f28:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     f2a:	bf04      	itt	eq
     f2c:	f884 10ed 	strbeq.w	r1, [r4, #237]	; 0xed
			conn->procedure_expire = 0U;
     f30:	f8a4 007c 	strheq.w	r0, [r4, #124]	; 0x7c
		if (conn_upd_curr == conn) {
     f34:	681a      	ldr	r2, [r3, #0]
		rx = conn->llcp_rx;
     f36:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
		if (conn_upd_curr == conn) {
     f3a:	4294      	cmp	r4, r2
			conn_upd_curr = NULL;
     f3c:	bf04      	itt	eq
     f3e:	2200      	moveq	r2, #0
     f40:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
     f42:	b10d      	cbz	r5, f48 <ull_conn_llcp+0x5c8>
     f44:	682b      	ldr	r3, [r5, #0]
     f46:	b963      	cbnz	r3, f62 <ull_conn_llcp+0x5e2>
     f48:	4abb      	ldr	r2, [pc, #748]	; (1238 <ull_conn_llcp+0x8b8>)
     f4a:	49bc      	ldr	r1, [pc, #752]	; (123c <ull_conn_llcp+0x8bc>)
     f4c:	48bc      	ldr	r0, [pc, #752]	; (1240 <ull_conn_llcp+0x8c0>)
     f4e:	f640 03c3 	movw	r3, #2243	; 0x8c3
     f52:	f022 f9ba 	bl	232ca <printk>
     f56:	4040      	eors	r0, r0
     f58:	f380 8811 	msr	BASEPRI, r0
     f5c:	f04f 0003 	mov.w	r0, #3
     f60:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
     f62:	6828      	ldr	r0, [r5, #0]
		if ((conn->llcp_cu.interval != lll->interval) ||
     f64:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
		conn->llcp_rx = rx->hdr.link->mem;
     f68:	6843      	ldr	r3, [r0, #4]
     f6a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		if ((conn->llcp_cu.interval != lll->interval) ||
     f6e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
     f70:	f8b4 c0a6 	ldrh.w	ip, [r4, #166]	; 0xa6
     f74:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
     f78:	429a      	cmp	r2, r3
     f7a:	d113      	bne.n	fa4 <ull_conn_llcp+0x624>
     f7c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     f7e:	4563      	cmp	r3, ip
     f80:	d110      	bne.n	fa4 <ull_conn_llcp+0x624>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
     f82:	f240 43e2 	movw	r3, #1250	; 0x4e2
     f86:	fb03 fe02 	mul.w	lr, r3, r2
     f8a:	f242 7310 	movw	r3, #10000	; 0x2710
     f8e:	fb03 e301 	mla	r3, r3, r1, lr
     f92:	3b01      	subs	r3, #1
     f94:	fbb3 f3fe 	udiv	r3, r3, lr
		    (conn->llcp_cu.latency != lll->latency) ||
     f98:	f8b4 e076 	ldrh.w	lr, [r4, #118]	; 0x76
     f9c:	b29b      	uxth	r3, r3
     f9e:	459e      	cmp	lr, r3
     fa0:	f000 8124 	beq.w	11ec <ull_conn_llcp+0x86c>
			rx->hdr.handle = lll->handle;
     fa4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     fa6:	80eb      	strh	r3, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     fa8:	230a      	movs	r3, #10
     faa:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
     fac:	2300      	movs	r3, #0
     fae:	f885 3020 	strb.w	r3, [r5, #32]
			cu->interval = conn->llcp_cu.interval;
     fb2:	846a      	strh	r2, [r5, #34]	; 0x22
			cu->latency = conn->llcp_cu.latency;
     fb4:	f8a5 c024 	strh.w	ip, [r5, #36]	; 0x24
			cu->timeout = conn->llcp_cu.timeout;
     fb8:	84e9      	strh	r1, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
     fba:	4629      	mov	r1, r5
     fbc:	f018 fc84 	bl	198c8 <ll_rx_put>
		ll_rx_sched();
     fc0:	f018 fc8c 	bl	198dc <ll_rx_sched>
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
     fc4:	6823      	ldr	r3, [r4, #0]
     fc6:	2b00      	cmp	r3, #0
     fc8:	da09      	bge.n	fde <ull_conn_llcp+0x65e>
			u32_t ticks_prepare_to_start =
     fca:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
     fce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
     fd2:	4281      	cmp	r1, r0
     fd4:	bf2c      	ite	cs
     fd6:	1876      	addcs	r6, r6, r1
     fd8:	1836      	addcc	r6, r6, r0
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
     fda:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
     fdc:	1af6      	subs	r6, r6, r3
		conn_interval_old = instant_latency * lll->interval;
     fde:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
     fe0:	f8b4 50a4 	ldrh.w	r5, [r4, #164]	; 0xa4
     fe4:	f8df a27c 	ldr.w	sl, [pc, #636]	; 1264 <ull_conn_llcp+0x8e4>
		conn_interval_old = instant_latency * lll->interval;
     fe8:	fb13 f30b 	smulbb	r3, r3, fp
     fec:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
     fee:	fbb3 f1f5 	udiv	r1, r3, r5
     ff2:	b28a      	uxth	r2, r1
     ff4:	920a      	str	r2, [sp, #40]	; 0x28
		conn_interval_new = latency * conn->llcp_cu.interval;
     ff6:	fb15 f201 	smulbb	r2, r5, r1
     ffa:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
     ffc:	4293      	cmp	r3, r2
     ffe:	f240 40e2 	movw	r0, #1250	; 0x4e2
    1002:	f080 80f6 	bcs.w	11f2 <ull_conn_llcp+0x872>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1006:	1ad3      	subs	r3, r2, r3
    1008:	4358      	muls	r0, r3
    100a:	fba0 010a 	umull	r0, r1, r0, sl
    100e:	a388      	add	r3, pc, #544	; (adr r3, 1230 <ull_conn_llcp+0x8b0>)
    1010:	e9d3 2300 	ldrd	r2, r3, [r3]
    1014:	f7ff f8b4 	bl	180 <__aeabi_uldivmod>
    1018:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    101c:	4406      	add	r6, r0
		lll->latency_prepare -= (instant_latency - latency);
    101e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		lll->latency_prepare += lazy;
    1020:	8e62      	ldrh	r2, [r4, #50]	; 0x32
		lll->latency_prepare -= (instant_latency - latency);
    1022:	eba9 0707 	sub.w	r7, r9, r7
    1026:	441f      	add	r7, r3
		} else if (lll->role) {
    1028:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare += lazy;
    102c:	4490      	add	r8, r2
		lll->latency_prepare -= (instant_latency - latency);
    102e:	4447      	add	r7, r8
		} else if (lll->role) {
    1030:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    1032:	f240 48e2 	movw	r8, #1250	; 0x4e2
		lll->latency_prepare -= (instant_latency - latency);
    1036:	8667      	strh	r7, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    1038:	fb08 f505 	mul.w	r5, r8, r5
		} else if (lll->role) {
    103c:	f280 80e6 	bge.w	120c <ull_conn_llcp+0x88c>
			lll->slave.window_widening_prepare_us -=
    1040:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    1042:	6c63      	ldr	r3, [r4, #68]	; 0x44
			lll->slave.window_widening_prepare_us -=
    1044:	fb03 231b 	mls	r3, r3, fp, r2
    1048:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_conn_ppm_local_get() +
    104a:	f026 fd7a 	bl	27b42 <lll_conn_ppm_local_get>
    104e:	4607      	mov	r7, r0
				   lll_conn_ppm_get(conn->slave.sca)) *
    1050:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
    1054:	f3c0 0082 	ubfx	r0, r0, #2, #3
    1058:	f01c f832 	bl	1d0c0 <lll_conn_ppm_get>
				conn->llcp_cu.win_size * 1250U;
    105c:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1060:	4b78      	ldr	r3, [pc, #480]	; (1244 <ull_conn_llcp+0x8c4>)
				conn->llcp_cu.win_size * 1250U;
    1062:	fb08 f202 	mul.w	r2, r8, r2
				(((lll_conn_ppm_local_get() +
    1066:	4407      	add	r7, r0
			lll->slave.window_size_prepare_us =
    1068:	6562      	str	r2, [r4, #84]	; 0x54
				lll->slave.window_widening_periodic_us *
    106a:	980a      	ldr	r0, [sp, #40]	; 0x28
			conn->slave.ticks_to_offset = 0U;
    106c:	2200      	movs	r2, #0
				   lll_conn_ppm_get(conn->slave.sca)) *
    106e:	436f      	muls	r7, r5
			conn->slave.ticks_to_offset = 0U;
    1070:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1074:	f507 2774 	add.w	r7, r7, #999424	; 0xf4000
			lll->slave.window_widening_prepare_us +=
    1078:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    107a:	f207 273f 	addw	r7, r7, #575	; 0x23f
    107e:	fbb7 f7f3 	udiv	r7, r7, r3
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1082:	086b      	lsrs	r3, r5, #1
				lll->slave.window_widening_periodic_us *
    1084:	4378      	muls	r0, r7
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1086:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    1088:	4402      	add	r2, r0
			lll->slave.window_widening_max_us =
    108a:	64a3      	str	r3, [r4, #72]	; 0x48
			lll->slave.window_widening_prepare_us +=
    108c:	429a      	cmp	r2, r3
    108e:	bf94      	ite	ls
    1090:	64e2      	strls	r2, [r4, #76]	; 0x4c
    1092:	64e3      	strhi	r3, [r4, #76]	; 0x4c
			lll->slave.window_widening_periodic_us =
    1094:	6467      	str	r7, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1096:	a366      	add	r3, pc, #408	; (adr r3, 1230 <ull_conn_llcp+0x8b0>)
    1098:	e9d3 2300 	ldrd	r2, r3, [r3]
    109c:	fba0 010a 	umull	r0, r1, r0, sl
    10a0:	f7ff f86e 	bl	180 <__aeabi_uldivmod>
    10a4:	1a36      	subs	r6, r6, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    10a6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    10aa:	fbb0 f0f8 	udiv	r0, r0, r8
    10ae:	fb08 f000 	mul.w	r0, r8, r0
    10b2:	a35f      	add	r3, pc, #380	; (adr r3, 1230 <ull_conn_llcp+0x8b0>)
    10b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    10b8:	fba0 010a 	umull	r0, r1, r0, sl
    10bc:	f7ff f860 	bl	180 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    10c0:	eba5 0907 	sub.w	r9, r5, r7
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    10c4:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
		lll->interval = conn->llcp_cu.interval;
    10c8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    10cc:	85e3      	strh	r3, [r4, #46]	; 0x2e
		lll->latency = conn->llcp_cu.latency;
    10ce:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    10d2:	8623      	strh	r3, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    10d4:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    10d8:	f242 7210 	movw	r2, #10000	; 0x2710
    10dc:	fb02 5303 	mla	r3, r2, r3, r5
    10e0:	3b01      	subs	r3, #1
    10e2:	fbb3 f3f5 	udiv	r3, r3, r5
    10e6:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    10ea:	4b57      	ldr	r3, [pc, #348]	; (1248 <ull_conn_llcp+0x8c8>)
    10ec:	442b      	add	r3, r5
    10ee:	fbb3 f5f5 	udiv	r5, r3, r5
		if (conn->llcp_cu.cmd) {
    10f2:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    10f6:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
		if (conn->llcp_cu.cmd) {
    10fa:	075a      	lsls	r2, r3, #29
			conn->supervision_expire = 0U;
    10fc:	bf44      	itt	mi
    10fe:	2300      	movmi	r3, #0
    1100:	f8a4 3078 	strhmi.w	r3, [r4, #120]	; 0x78
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1104:	2102      	movs	r1, #2
    1106:	2001      	movs	r0, #1
    1108:	f01c febe 	bl	1de88 <mayfly_is_enabled>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    110c:	2200      	movs	r2, #0
    110e:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1110:	4607      	mov	r7, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1112:	2001      	movs	r0, #1
    1114:	f016 f9c6 	bl	174a4 <mayfly_enable>
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1118:	4620      	mov	r0, r4
    111a:	f019 fc41 	bl	1a9a0 <ll_conn_handle_get>
    111e:	1d45      	adds	r5, r0, #5
    1120:	b2ed      	uxtb	r5, r5
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1122:	4b4a      	ldr	r3, [pc, #296]	; (124c <ull_conn_llcp+0x8cc>)
    1124:	9400      	str	r4, [sp, #0]
    1126:	462a      	mov	r2, r5
    1128:	2101      	movs	r1, #1
    112a:	2000      	movs	r0, #0
    112c:	f017 f80c 	bl	18148 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1130:	f030 0302 	bics.w	r3, r0, #2
    1134:	d00c      	beq.n	1150 <ull_conn_llcp+0x7d0>
    1136:	4a40      	ldr	r2, [pc, #256]	; (1238 <ull_conn_llcp+0x8b8>)
    1138:	4945      	ldr	r1, [pc, #276]	; (1250 <ull_conn_llcp+0x8d0>)
    113a:	4841      	ldr	r0, [pc, #260]	; (1240 <ull_conn_llcp+0x8c0>)
    113c:	f640 1367 	movw	r3, #2407	; 0x967
    1140:	f022 f8c3 	bl	232ca <printk>
    1144:	4040      	eors	r0, r0
    1146:	f380 8811 	msr	BASEPRI, r0
    114a:	f04f 0003 	mov.w	r0, #3
    114e:	df02      	svc	2
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1150:	fba9 230a 	umull	r2, r3, r9, sl
    1154:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1158:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    115c:	a334      	add	r3, pc, #208	; (adr r3, 1230 <ull_conn_llcp+0x8b0>)
    115e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1162:	f7ff f80d 	bl	180 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1166:	4b3b      	ldr	r3, [pc, #236]	; (1254 <ull_conn_llcp+0x8d4>)
    1168:	9408      	str	r4, [sp, #32]
    116a:	e9cd 4306 	strd	r4, r3, [sp, #24]
    116e:	4b3a      	ldr	r3, [pc, #232]	; (1258 <ull_conn_llcp+0x8d8>)
    1170:	9305      	str	r3, [sp, #20]
    1172:	68e3      	ldr	r3, [r4, #12]
    1174:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    1176:	4b39      	ldr	r3, [pc, #228]	; (125c <ull_conn_llcp+0x8dc>)
    1178:	990a      	ldr	r1, [sp, #40]	; 0x28
    117a:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    117e:	fba4 ab03 	umull	sl, fp, r4, r3
    1182:	ebb1 000a 	subs.w	r0, r1, sl
    1186:	f04f 0307 	mov.w	r3, #7
    118a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    118c:	fb03 bb04 	mla	fp, r3, r4, fp
    1190:	eb61 010b 	sbc.w	r1, r1, fp
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1194:	f04f 0900 	mov.w	r9, #0
				     HAL_TICKER_REMAINDER(periodic_us),
    1198:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    119c:	2300      	movs	r3, #0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    119e:	f8cd 900c 	str.w	r9, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    11a2:	f7fe ffed 	bl	180 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    11a6:	4633      	mov	r3, r6
    11a8:	e9cd 4001 	strd	r4, r0, [sp, #4]
    11ac:	f8cd 8000 	str.w	r8, [sp]
    11b0:	462a      	mov	r2, r5
    11b2:	2101      	movs	r1, #1
    11b4:	4648      	mov	r0, r9
    11b6:	f016 ff37 	bl	18028 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    11ba:	f030 0302 	bics.w	r3, r0, #2
    11be:	d00c      	beq.n	11da <ull_conn_llcp+0x85a>
    11c0:	4a1d      	ldr	r2, [pc, #116]	; (1238 <ull_conn_llcp+0x8b8>)
    11c2:	4923      	ldr	r1, [pc, #140]	; (1250 <ull_conn_llcp+0x8d0>)
    11c4:	481e      	ldr	r0, [pc, #120]	; (1240 <ull_conn_llcp+0x8c0>)
    11c6:	f640 1381 	movw	r3, #2433	; 0x981
    11ca:	f022 f87e 	bl	232ca <printk>
    11ce:	4040      	eors	r0, r0
    11d0:	f380 8811 	msr	BASEPRI, r0
    11d4:	f04f 0003 	mov.w	r0, #3
    11d8:	df02      	svc	2
		if (mayfly_was_enabled) {
    11da:	b127      	cbz	r7, 11e6 <ull_conn_llcp+0x866>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    11dc:	2201      	movs	r2, #1
    11de:	2102      	movs	r1, #2
    11e0:	4610      	mov	r0, r2
    11e2:	f016 f95f 	bl	174a4 <mayfly_enable>
				return -ECANCELED;
    11e6:	f06f 0047 	mvn.w	r0, #71	; 0x47
    11ea:	e67e      	b.n	eea <ull_conn_llcp+0x56a>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    11ec:	2303      	movs	r3, #3
    11ee:	712b      	strb	r3, [r5, #4]
    11f0:	e6e3      	b.n	fba <ull_conn_llcp+0x63a>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    11f2:	fb05 3111 	mls	r1, r5, r1, r3
    11f6:	b289      	uxth	r1, r1
    11f8:	4348      	muls	r0, r1
    11fa:	a30d      	add	r3, pc, #52	; (adr r3, 1230 <ull_conn_llcp+0x8b0>)
    11fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    1200:	fba0 010a 	umull	r0, r1, r0, sl
    1204:	f7fe ffbc 	bl	180 <__aeabi_uldivmod>
    1208:	1a36      	subs	r6, r6, r0
    120a:	e708      	b.n	101e <ull_conn_llcp+0x69e>
			LL_ASSERT(0);
    120c:	4a0a      	ldr	r2, [pc, #40]	; (1238 <ull_conn_llcp+0x8b8>)
    120e:	4914      	ldr	r1, [pc, #80]	; (1260 <ull_conn_llcp+0x8e0>)
    1210:	480b      	ldr	r0, [pc, #44]	; (1240 <ull_conn_llcp+0x8c0>)
    1212:	f640 1338 	movw	r3, #2360	; 0x938
    1216:	f022 f858 	bl	232ca <printk>
    121a:	4040      	eors	r0, r0
    121c:	f380 8811 	msr	BASEPRI, r0
    1220:	f04f 0003 	mov.w	r0, #3
    1224:	df02      	svc	2
		u32_t ticks_win_offset = 0;
    1226:	f04f 0800 	mov.w	r8, #0
		periodic_us = conn_interval_us;
    122a:	46a9      	mov	r9, r5
    122c:	e74c      	b.n	10c8 <ull_conn_llcp+0x748>
    122e:	bf00      	nop
    1230:	1afd498d 	.word	0x1afd498d
    1234:	00000007 	.word	0x00000007
    1238:	0002f06c 	.word	0x0002f06c
    123c:	0002f1b4 	.word	0x0002f1b4
    1240:	000297e6 	.word	0x000297e6
    1244:	000f4240 	.word	0x000f4240
    1248:	026259ff 	.word	0x026259ff
    124c:	0001a849 	.word	0x0001a849
    1250:	0002f122 	.word	0x0002f122
    1254:	0001a7f1 	.word	0x0001a7f1
    1258:	0001bc91 	.word	0x0001bc91
    125c:	1afd498d 	.word	0x1afd498d
    1260:	0002d2c6 	.word	0x0002d2c6
    1264:	3b9aca00 	.word	0x3b9aca00
			event_counter = lll->event_counter +
    1268:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    126a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    126c:	441a      	add	r2, r3
	if (conn->llcp.chan_map.initiate) {
    126e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
					lll->latency_prepare + lazy;
    1272:	4490      	add	r8, r2
	if (conn->llcp.chan_map.initiate) {
    1274:	07db      	lsls	r3, r3, #31
			event_counter = lll->event_counter +
    1276:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp.chan_map.initiate) {
    127a:	d525      	bpl.n	12c8 <ull_conn_llcp+0x948>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    127c:	4835      	ldr	r0, [pc, #212]	; (1354 <ull_conn_llcp+0x9d4>)
    127e:	f025 ffa2 	bl	271c6 <mem_acquire>
		if (tx) {
    1282:	4605      	mov	r5, r0
    1284:	2800      	cmp	r0, #0
    1286:	f43f ae28 	beq.w	eda <ull_conn_llcp+0x55a>
			conn->llcp.chan_map.initiate = 0U;
    128a:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    128e:	f36f 0300 	bfc	r3, #0, #1
    1292:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			conn->llcp.chan_map.instant = event_counter +
    1296:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1298:	4498      	add	r8, r3
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    129a:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    129c:	f108 0806 	add.w	r8, r8, #6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    12a0:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.instant = event_counter +
    12a4:	f8a4 8096 	strh.w	r8, [r4, #150]	; 0x96
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    12a8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    12aa:	2308      	movs	r3, #8
    12ac:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    12ae:	2301      	movs	r3, #1
    12b0:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    12b2:	2205      	movs	r2, #5
    12b4:	f104 0191 	add.w	r1, r4, #145	; 0x91
    12b8:	3008      	adds	r0, #8
    12ba:	f023 fee9 	bl	25090 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    12be:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    12c2:	f8a5 300d 	strh.w	r3, [r5, #13]
    12c6:	e604      	b.n	ed2 <ull_conn_llcp+0x552>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    12c8:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    12cc:	eba8 0803 	sub.w	r8, r8, r3
    12d0:	f418 4f00 	tst.w	r8, #32768	; 0x8000
    12d4:	f47f ae01 	bne.w	eda <ull_conn_llcp+0x55a>
		memcpy(&lll->data_chan_map[0],
    12d8:	f104 0538 	add.w	r5, r4, #56	; 0x38
		conn->llcp_ack = conn->llcp_req;
    12dc:	f884 108d 	strb.w	r1, [r4, #141]	; 0x8d
		memcpy(&lll->data_chan_map[0],
    12e0:	2205      	movs	r2, #5
    12e2:	f104 0191 	add.w	r1, r4, #145	; 0x91
    12e6:	4628      	mov	r0, r5
    12e8:	f023 fed2 	bl	25090 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    12ec:	2105      	movs	r1, #5
    12ee:	4628      	mov	r0, r5
    12f0:	f025 ffe5 	bl	272be <util_ones_count_get>
		lll->data_chan_count =
    12f4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    12f8:	f360 0305 	bfi	r3, r0, #0, #6
    12fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    1300:	2301      	movs	r3, #1
    1302:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    1306:	e5e8      	b.n	eda <ull_conn_llcp+0x55a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1308:	4812      	ldr	r0, [pc, #72]	; (1354 <ull_conn_llcp+0x9d4>)
    130a:	f025 ff5c 	bl	271c6 <mem_acquire>
		if (tx) {
    130e:	4601      	mov	r1, r0
    1310:	b180      	cbz	r0, 1334 <ull_conn_llcp+0x9b4>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    1312:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    1316:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    131a:	7903      	ldrb	r3, [r0, #4]
    131c:	f043 0303 	orr.w	r3, r3, #3
    1320:	7103      	strb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    1322:	2302      	movs	r3, #2
    1324:	7143      	strb	r3, [r0, #5]
			pdu_tx->llctrl.opcode =
    1326:	71c3      	strb	r3, [r0, #7]
			pdu_tx->llctrl.terminate_ind.error_code =
    1328:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
    132c:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, tx);
    132e:	4620      	mov	r0, r4
    1330:	f026 f9c6 	bl	276c0 <ctrl_tx_enqueue>
		if (!conn->procedure_expire) {
    1334:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    1338:	2800      	cmp	r0, #0
    133a:	f47f add5 	bne.w	ee8 <ull_conn_llcp+0x568>
			conn->procedure_expire = conn->supervision_reload;
    133e:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
			if (conn->procedure_expire <= 1U) {
    1342:	2b01      	cmp	r3, #1
    1344:	d902      	bls.n	134c <ull_conn_llcp+0x9cc>
			conn->procedure_expire = conn->supervision_reload;
    1346:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    134a:	e5cd      	b.n	ee8 <ull_conn_llcp+0x568>
				conn->procedure_expire++;
    134c:	3301      	adds	r3, #1
    134e:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    1352:	e5ca      	b.n	eea <ull_conn_llcp+0x56a>
    1354:	200017a8 	.word	0x200017a8

00001358 <ull_slave_setup>:
static void ticker_op_stop_adv_cb(u32_t status, void *param);
static void ticker_op_cb(u32_t status, void *param);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    1358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    135c:	b091      	sub	sp, #68	; 0x44
    135e:	461c      	mov	r4, r3
    1360:	900b      	str	r0, [sp, #44]	; 0x2c
	u16_t win_offset;
	u16_t timeout;
	u16_t interval;
	u8_t chan_sel;

	((struct lll_adv *)ftr->param)->conn = NULL;
    1362:	6813      	ldr	r3, [r2, #0]

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;
    1364:	4620      	mov	r0, r4
	((struct lll_adv *)ftr->param)->conn = NULL;
    1366:	2700      	movs	r7, #0
{
    1368:	4689      	mov	r9, r1
	conn = lll->hdr.parent;
    136a:	f850 5b0c 	ldr.w	r5, [r0], #12
	((struct lll_adv *)ftr->param)->conn = NULL;
    136e:	609f      	str	r7, [r3, #8]
{
    1370:	4690      	mov	r8, r2

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1372:	f104 0b08 	add.w	fp, r4, #8
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1376:	2203      	movs	r2, #3
    1378:	3132      	adds	r1, #50	; 0x32
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    137a:	f8d3 a000 	ldr.w	sl, [r3]
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    137e:	f104 061c 	add.w	r6, r4, #28
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1382:	f023 fe85 	bl	25090 <memcpy>
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1386:	f109 012e 	add.w	r1, r9, #46	; 0x2e
    138a:	2204      	movs	r2, #4
    138c:	4658      	mov	r0, fp
    138e:	f023 fe7f 	bl	25090 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1392:	2205      	movs	r2, #5
    1394:	f109 013e 	add.w	r1, r9, #62	; 0x3e
    1398:	4630      	mov	r0, r6
    139a:	f023 fe79 	bl	25090 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    139e:	2105      	movs	r1, #5
    13a0:	4630      	mov	r0, r6
    13a2:	f025 ff8c 	bl	272be <util_ones_count_get>
    13a6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    13aa:	f360 0305 	bfi	r3, r0, #0, #6
    13ae:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    13b2:	f899 3043 	ldrb.w	r3, [r9, #67]	; 0x43
    13b6:	f3c3 0304 	ubfx	r3, r3, #0, #5
    13ba:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    13be:	f8b9 6038 	ldrh.w	r6, [r9, #56]	; 0x38
	lll->interval = interval;
    13c2:	8266      	strh	r6, [r4, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    13c4:	f899 203b 	ldrb.w	r2, [r9, #59]	; 0x3b
    13c8:	f899 303a 	ldrb.w	r3, [r9, #58]	; 0x3a
    13cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    13d0:	82a3      	strh	r3, [r4, #20]

	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    13d2:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
    13d6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
	conn_interval_us = interval * 1250U;
    13da:	f240 43e2 	movw	r3, #1250	; 0x4e2
    13de:	435e      	muls	r6, r3

	/* calculate the window widening */
	conn->slave.sca = pdu_adv->connect_ind.sca;
    13e0:	f899 3043 	ldrb.w	r3, [r9, #67]	; 0x43
    13e4:	f895 2080 	ldrb.w	r2, [r5, #128]	; 0x80
    13e8:	095b      	lsrs	r3, r3, #5
    13ea:	f363 0284 	bfi	r2, r3, #2, #3
    13ee:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
	lll->slave.window_widening_periodic_us =
		(((lll_conn_ppm_local_get() +
    13f2:	f026 fba6 	bl	27b42 <lll_conn_ppm_local_get>
    13f6:	900d      	str	r0, [sp, #52]	; 0x34
		   lll_conn_ppm_get(conn->slave.sca)) *
    13f8:	f895 0080 	ldrb.w	r0, [r5, #128]	; 0x80
    13fc:	f3c0 0082 	ubfx	r0, r0, #2, #3
    1400:	f01b fe5e 	bl	1d0c0 <lll_conn_ppm_get>
		(((lll_conn_ppm_local_get() +
    1404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1406:	4418      	add	r0, r3
		   lll_conn_ppm_get(conn->slave.sca)) *
    1408:	4370      	muls	r0, r6
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    140a:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    140e:	4b7e      	ldr	r3, [pc, #504]	; (1608 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x280>)
    1410:	f200 203f 	addw	r0, r0, #575	; 0x23f
    1414:	fbb0 f0f3 	udiv	r0, r0, r3
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    1418:	0873      	lsrs	r3, r6, #1
    141a:	3b96      	subs	r3, #150	; 0x96
    141c:	62e3      	str	r3, [r4, #44]	; 0x2c
					    EVENT_IFS_US;
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    141e:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
	lll->slave.window_widening_periodic_us =
    1422:	62a0      	str	r0, [r4, #40]	; 0x28
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    1424:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1428:	4353      	muls	r3, r2
    142a:	63e3      	str	r3, [r4, #60]	; 0x3c

	/* procedure timeouts */
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    142c:	f8b9 303c 	ldrh.w	r3, [r9, #60]	; 0x3c
	conn->supervision_reload =
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1430:	930d      	str	r3, [sp, #52]	; 0x34
    1432:	f242 7210 	movw	r2, #10000	; 0x2710
    1436:	fb02 6203 	mla	r2, r2, r3, r6
    143a:	3a01      	subs	r2, #1
    143c:	fbb2 f2f6 	udiv	r2, r2, r6
    1440:	f8a5 2076 	strh.w	r2, [r5, #118]	; 0x76
	conn->procedure_reload =
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1444:	4a71      	ldr	r2, [pc, #452]	; (160c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x284>)
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
			     (conn->apto_reload - (lll->latency + 6)) :
			     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    1446:	4659      	mov	r1, fp
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1448:	4432      	add	r2, r6
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    144a:	f105 0084 	add.w	r0, r5, #132	; 0x84
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    144e:	fbb2 f2f6 	udiv	r2, r2, r6
    1452:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    1456:	2204      	movs	r2, #4
    1458:	f023 fe1a 	bl	25090 <memcpy>
	u8_t rl_idx = ftr->rl_idx;

	memcpy(own_addr, &pdu_adv->connect_ind.adv_addr[0], BDADDR_SIZE);
#endif

	peer_addr_type = pdu_adv->tx_addr;
    145c:	f899 b020 	ldrb.w	fp, [r9, #32]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1460:	f109 0122 	add.w	r1, r9, #34	; 0x22
    1464:	2206      	movs	r2, #6
    1466:	a80e      	add	r0, sp, #56	; 0x38
    1468:	f023 fe12 	bl	25090 <memcpy>
	peer_addr_type = pdu_adv->tx_addr;
    146c:	f3cb 1b80 	ubfx	fp, fp, #6, #1

	chan_sel = pdu_adv->chan_sel;

	cc = (void *)pdu_adv;
	cc->status = 0U;
    1470:	f44f 7280 	mov.w	r2, #256	; 0x100
    1474:	f8a9 2020 	strh.w	r2, [r9, #32]
	} else {
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		cc->peer_addr_type = peer_addr_type;
    1478:	f889 b022 	strb.w	fp, [r9, #34]	; 0x22
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    147c:	a90e      	add	r1, sp, #56	; 0x38
    147e:	2206      	movs	r2, #6
    1480:	f109 0023 	add.w	r0, r9, #35	; 0x23
    1484:	f023 fe04 	bl	25090 <memcpy>
	}

	cc->interval = lll->interval;
    1488:	8a62      	ldrh	r2, [r4, #18]
	cc->latency = lll->latency;
	cc->timeout = timeout;
    148a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	cc->interval = lll->interval;
    148c:	f8a9 202a 	strh.w	r2, [r9, #42]	; 0x2a
	cc->latency = lll->latency;
    1490:	8aa2      	ldrh	r2, [r4, #20]
	cc->timeout = timeout;
    1492:	f8a9 302e 	strh.w	r3, [r9, #46]	; 0x2e
	cc->sca = conn->slave.sca;
    1496:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
	cc->latency = lll->latency;
    149a:	f8a9 202c 	strh.w	r2, [r9, #44]	; 0x2c
	cc->sca = conn->slave.sca;
    149e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    14a2:	f889 3030 	strb.w	r3, [r9, #48]	; 0x30

	lll->handle = ll_conn_handle_get(conn);
    14a6:	4628      	mov	r0, r5
    14a8:	f019 fa7a 	bl	1a9a0 <ll_conn_handle_get>
		} else {
			cs->csa = 0x00;
		}
	}

	ll_rx_put(link, rx);
    14ac:	4649      	mov	r1, r9
	lll->handle = ll_conn_handle_get(conn);
    14ae:	8220      	strh	r0, [r4, #16]
	rx->handle = lll->handle;
    14b0:	f8a9 0006 	strh.w	r0, [r9, #6]
	ll_rx_put(link, rx);
    14b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    14b6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 162c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a4>
	ll_rx_put(link, rx);
    14ba:	f018 fa05 	bl	198c8 <ll_rx_put>
	ll_rx_sched();
    14be:	f018 fa0d 	bl	198dc <ll_rx_sched>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    14c2:	f8d8 b010 	ldr.w	fp, [r8, #16]
	conn->evt.ticks_active_to_start = 0U;
    14c6:	606f      	str	r7, [r5, #4]
	conn->evt.ticks_xtal_to_start =
    14c8:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    14ca:	f20b 4052 	addw	r0, fp, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    14ce:	602b      	str	r3, [r5, #0]
	conn->evt.ticks_preempt_to_start =
    14d0:	60af      	str	r7, [r5, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    14d2:	a34b      	add	r3, pc, #300	; (adr r3, 1600 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x278>)
    14d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    14d8:	fba0 0109 	umull	r0, r1, r0, r9
    14dc:	f7fe fe50 	bl	180 <__aeabi_uldivmod>
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	conn_interval_us -= lll->slave.window_widening_periodic_us;
    14e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28

	conn_offset_us = ftr->us_radio_end;
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    14e2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    14e6:	1af6      	subs	r6, r6, r3
    14e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    14ec:	4611      	mov	r1, r2
    14ee:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
    14f2:	f240 42e2 	movw	r2, #1250	; 0x4e2
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    14f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14fa:	eba3 030b 	sub.w	r3, r3, fp
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    14fe:	fb02 2b01 	mla	fp, r2, r1, r2
	conn_offset_us -= EVENT_OVERHEAD_START_US;
	conn_offset_us -= EVENT_TICKER_RES_MARGIN_US;
	conn_offset_us -= EVENT_JITTER_US;
	conn_offset_us -= ftr->us_radio_rdy;
    1502:	445b      	add	r3, fp

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1504:	463a      	mov	r2, r7
    1506:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    1508:	60e8      	str	r0, [r5, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    150a:	2001      	movs	r0, #1
	conn_offset_us -= ftr->us_radio_rdy;
    150c:	930b      	str	r3, [sp, #44]	; 0x2c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    150e:	f015 ffc9 	bl	174a4 <mayfly_enable>
#endif

	/* Stop Advertiser */
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    1512:	4650      	mov	r0, sl
    1514:	f018 ff88 	bl	1a428 <ull_adv_handle_get>
    1518:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    151a:	4b3d      	ldr	r3, [pc, #244]	; (1610 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x288>)
    151c:	f8cd a000 	str.w	sl, [sp]
    1520:	b2d2      	uxtb	r2, r2
    1522:	2101      	movs	r1, #1
    1524:	4638      	mov	r0, r7
    1526:	f016 fe0f 	bl	18148 <ticker_stop>
				    TICKER_USER_ID_ULL_HIGH,
				    ticker_id_adv, ticker_op_stop_adv_cb, adv);
	ticker_op_stop_adv_cb(ticker_status, adv);
    152a:	4651      	mov	r1, sl
    152c:	f01a fb94 	bl	1bc58 <ticker_op_stop_adv_cb>

	/* Stop Direct Adv Stop */
	if (adv->lll.is_hdcd) {
    1530:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    1534:	07db      	lsls	r3, r3, #31
    1536:	d506      	bpl.n	1546 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1be>
		/* Advertiser stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    1538:	2201      	movs	r2, #1
    153a:	9700      	str	r7, [sp, #0]
    153c:	463b      	mov	r3, r7
    153e:	4611      	mov	r1, r2
    1540:	4638      	mov	r0, r7
    1542:	f016 fe01 	bl	18148 <ticker_stop>
			    TICKER_ID_ADV_STOP, NULL, NULL);
	}

	/* Start Slave */
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1546:	4628      	mov	r0, r5
    1548:	f019 fa2a 	bl	1a9a0 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ftr->ticks_anchor - ticks_slot_offset,
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    154c:	fba6 6709 	umull	r6, r7, r6, r9
    1550:	a32b      	add	r3, pc, #172	; (adr r3, 1600 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x278>)
    1552:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1556:	4604      	mov	r4, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1558:	4639      	mov	r1, r7
    155a:	4630      	mov	r0, r6
    155c:	f7fe fe10 	bl	180 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1560:	f8d8 3008 	ldr.w	r3, [r8, #8]
    1564:	f1a3 0831 	sub.w	r8, r3, #49	; 0x31
    1568:	f240 131d 	movw	r3, #285	; 0x11d
    156c:	9308      	str	r3, [sp, #32]
    156e:	4b29      	ldr	r3, [pc, #164]	; (1614 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28c>)
    1570:	e9cd 5306 	strd	r5, r3, [sp, #24]
    1574:	4b28      	ldr	r3, [pc, #160]	; (1618 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x290>)
    1576:	9305      	str	r3, [sp, #20]
    1578:	68eb      	ldr	r3, [r5, #12]
    157a:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    157c:	4b27      	ldr	r3, [pc, #156]	; (161c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x294>)
    157e:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    1582:	fba5 bc03 	umull	fp, ip, r5, r3
    1586:	2307      	movs	r3, #7
    1588:	fb03 cc05 	mla	ip, r3, r5, ip
    158c:	ebb6 000b 	subs.w	r0, r6, fp
    1590:	eb67 010c 	sbc.w	r1, r7, ip
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1594:	f04f 0a00 	mov.w	sl, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    159c:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    159e:	f8cd a00c 	str.w	sl, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    15a2:	f7fe fded 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    15a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    15a8:	a315      	add	r3, pc, #84	; (adr r3, 1600 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x278>)
    15aa:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    15ae:	e9cd 5001 	strd	r5, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    15b2:	fba1 0109 	umull	r0, r1, r1, r9
    15b6:	f7fe fde3 	bl	180 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    15ba:	3405      	adds	r4, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    15bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15c0:	b2e4      	uxtb	r4, r4
    15c2:	9000      	str	r0, [sp, #0]
    15c4:	4643      	mov	r3, r8
    15c6:	4622      	mov	r2, r4
    15c8:	2101      	movs	r1, #1
    15ca:	4650      	mov	r0, sl
    15cc:	f016 fd2c 	bl	18028 <ticker_start>
#endif /* CONFIG_BT_CTLR_CONN_META */
				     (conn->evt.ticks_slot +
				      ticks_slot_overhead),
				     ull_slave_ticker_cb, conn, ticker_op_cb,
				     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    15d0:	f030 0302 	bics.w	r3, r0, #2
    15d4:	d00c      	beq.n	15f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x268>
    15d6:	4a12      	ldr	r2, [pc, #72]	; (1620 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x298>)
    15d8:	4912      	ldr	r1, [pc, #72]	; (1624 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x29c>)
    15da:	4813      	ldr	r0, [pc, #76]	; (1628 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a0>)
    15dc:	f44f 738f 	mov.w	r3, #286	; 0x11e
    15e0:	f021 fe73 	bl	232ca <printk>
    15e4:	4040      	eors	r0, r0
    15e6:	f380 8811 	msr	BASEPRI, r0
    15ea:	f04f 0003 	mov.w	r0, #3
    15ee:	df02      	svc	2

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    15f0:	2201      	movs	r2, #1
    15f2:	2102      	movs	r1, #2
    15f4:	4610      	mov	r0, r2
    15f6:	f015 ff55 	bl	174a4 <mayfly_enable>
#endif
}
    15fa:	b011      	add	sp, #68	; 0x44
    15fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1600:	1afd498d 	.word	0x1afd498d
    1604:	00000007 	.word	0x00000007
    1608:	000f4240 	.word	0x000f4240
    160c:	026259ff 	.word	0x026259ff
    1610:	0001bc59 	.word	0x0001bc59
    1614:	0001bc2d 	.word	0x0001bc2d
    1618:	0001bc91 	.word	0x0001bc91
    161c:	1afd498d 	.word	0x1afd498d
    1620:	0002f249 	.word	0x0002f249
    1624:	0002f122 	.word	0x0002f122
    1628:	000297e6 	.word	0x000297e6
    162c:	3b9aca00 	.word	0x3b9aca00

00001630 <ull_slave_done>:
 * @param ticks_drift_plus[out]  Positive part of drift uncertainty window
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_slave_done(struct node_rx_event_done *done, u32_t *ticks_drift_plus,
		    u32_t *ticks_drift_minus)
{
    1630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1634:	4688      	mov	r8, r1
	u32_t window_widening_event_us;
	u32_t preamble_to_addr_us;

	start_to_address_actual_us =
		done->extra.slave.start_to_address_actual_us;
	window_widening_event_us =
    1636:	e9d0 910b 	ldrd	r9, r1, [r0, #44]	; 0x2c
		done->extra.slave.window_widening_event_us;
	preamble_to_addr_us =
    163a:	6b45      	ldr	r5, [r0, #52]	; 0x34
		done->extra.slave.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
    163c:	4f16      	ldr	r7, [pc, #88]	; (1698 <ull_slave_done+0x68>)
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    163e:	194c      	adds	r4, r1, r5
	start_to_address_expected_us = EVENT_JITTER_US +
    1640:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1642:	45a1      	cmp	r9, r4
{
    1644:	4616      	mov	r6, r2
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1646:	a312      	add	r3, pc, #72	; (adr r3, 1690 <ull_slave_done+0x60>)
    1648:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    164c:	d815      	bhi.n	167a <ull_slave_done+0x4a>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    164e:	fba1 0107 	umull	r0, r1, r1, r7
    1652:	f7fe fd95 	bl	180 <__aeabi_uldivmod>
    1656:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    165a:	f8c8 0000 	str.w	r0, [r8]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    165e:	eba4 0009 	sub.w	r0, r4, r9
					       start_to_address_actual_us));
	} else {
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1662:	a30b      	add	r3, pc, #44	; (adr r3, 1690 <ull_slave_done+0x60>)
    1664:	e9d3 2300 	ldrd	r2, r3, [r3]
    1668:	fba0 0107 	umull	r0, r1, r0, r7
    166c:	f7fe fd88 	bl	180 <__aeabi_uldivmod>
    1670:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    1674:	6030      	str	r0, [r6, #0]
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    1676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    167a:	fba9 0107 	umull	r0, r1, r9, r7
    167e:	f7fe fd7f 	bl	180 <__aeabi_uldivmod>
    1682:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1686:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    168a:	f105 0030 	add.w	r0, r5, #48	; 0x30
    168e:	e7e8      	b.n	1662 <ull_slave_done+0x32>
    1690:	1afd498d 	.word	0x1afd498d
    1694:	00000007 	.word	0x00000007
    1698:	3b9aca00 	.word	0x3b9aca00
    169c:	00000000 	.word	0x00000000

000016a0 <erase_op>:
}

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
    16a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16a4:	4604      	mov	r4, r0
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    16a6:	f026 fdb8 	bl	2821a <nrfx_nvmc_flash_page_size_get>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	u32_t ticks_begin = 0U;
	u32_t ticks_diff;
	u32_t i = 0U;

	if (e_ctx->enable_time_limit) {
    16aa:	7b25      	ldrb	r5, [r4, #12]
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    16ac:	4606      	mov	r6, r0
	if (e_ctx->enable_time_limit) {
    16ae:	b115      	cbz	r5, 16b6 <erase_op+0x16>
		ticks_begin = ticker_ticks_now_get();
    16b0:	f025 fec0 	bl	27434 <ticker_ticks_now_get>
    16b4:	4605      	mov	r5, r0
		if (e_ctx->enable_time_limit) {
			ticks_diff =
				ticker_ticks_diff_get(ticker_ticks_now_get(),
						      ticks_begin);
			if (ticks_diff + ticks_diff/i >
			    HAL_TICKER_US_TO_TICKS(e_ctx->slot)) {
    16b6:	f20f 0968 	addw	r9, pc, #104	; 0x68
    16ba:	e9d9 8900 	ldrd	r8, r9, [r9]
    16be:	f8df b068 	ldr.w	fp, [pc, #104]	; 1728 <erase_op+0x88>
	u32_t ticks_begin = 0U;
    16c2:	f04f 0a00 	mov.w	sl, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    16c6:	6860      	ldr	r0, [r4, #4]
    16c8:	f01d ffb6 	bl	1f638 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
    16cc:	68a3      	ldr	r3, [r4, #8]
    16ce:	1b9b      	subs	r3, r3, r6
    16d0:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
    16d2:	6863      	ldr	r3, [r4, #4]
    16d4:	4433      	add	r3, r6
    16d6:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
    16d8:	7b23      	ldrb	r3, [r4, #12]
		i++;
    16da:	f10a 0a01 	add.w	sl, sl, #1
		if (e_ctx->enable_time_limit) {
    16de:	b94b      	cbnz	r3, 16f4 <erase_op+0x54>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
    16e0:	68a3      	ldr	r3, [r4, #8]
    16e2:	2b00      	cmp	r3, #0
    16e4:	d1ef      	bne.n	16c6 <erase_op+0x26>

	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
    16e6:	68a0      	ldr	r0, [r4, #8]
    16e8:	3800      	subs	r0, #0
    16ea:	bf18      	it	ne
    16ec:	2001      	movne	r0, #1
}
    16ee:	4240      	negs	r0, r0
    16f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    16f4:	f025 fe9e 	bl	27434 <ticker_ticks_now_get>
    16f8:	4629      	mov	r1, r5
    16fa:	f025 fe9d 	bl	27438 <ticker_ticks_diff_get>
			if (ticks_diff + ticks_diff/i >
    16fe:	fbb0 f7fa 	udiv	r7, r0, sl
    1702:	4407      	add	r7, r0
			    HAL_TICKER_US_TO_TICKS(e_ctx->slot)) {
    1704:	6960      	ldr	r0, [r4, #20]
    1706:	4642      	mov	r2, r8
    1708:	464b      	mov	r3, r9
    170a:	fba0 010b 	umull	r0, r1, r0, fp
    170e:	f7fe fd37 	bl	180 <__aeabi_uldivmod>
    1712:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (ticks_diff + ticks_diff/i >
    1716:	4287      	cmp	r7, r0
    1718:	d9e2      	bls.n	16e0 <erase_op+0x40>
    171a:	e7e4      	b.n	16e6 <erase_op+0x46>
    171c:	f3af 8000 	nop.w
    1720:	1afd498d 	.word	0x1afd498d
    1724:	00000007 	.word	0x00000007
    1728:	3b9aca00 	.word	0x3b9aca00
    172c:	00000000 	.word	0x00000000

00001730 <work_in_time_slice>:
{
    1730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1734:	b08f      	sub	sp, #60	; 0x3c
	struct flash_context *context = p_flash_op_desc->context;
    1736:	f8d0 9004 	ldr.w	r9, [r0, #4]
			   HAL_TICKER_US_TO_TICKS(context->interval),
    173a:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 181c <work_in_time_slice+0xec>
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    173e:	f10d 0137 	add.w	r1, sp, #55	; 0x37
{
    1742:	4606      	mov	r6, r0
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    1744:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    1748:	f025 fef4 	bl	27534 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index,
    174c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    1750:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    1754:	930a      	str	r3, [sp, #40]	; 0x28
    1756:	f025 fe6d 	bl	27434 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(context->interval),
    175a:	f8d9 4010 	ldr.w	r4, [r9, #16]
    175e:	fba4 450b 	umull	r4, r5, r4, fp
    1762:	a329      	add	r3, pc, #164	; (adr r3, 1808 <work_in_time_slice+0xd8>)
    1764:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    1768:	2700      	movs	r7, #0
    176a:	4680      	mov	r8, r0
			   HAL_TICKER_US_TO_TICKS(context->interval),
    176c:	4629      	mov	r1, r5
    176e:	4620      	mov	r0, r4
    1770:	f7fe fd06 	bl	180 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    1774:	e9cd 7707 	strd	r7, r7, [sp, #28]
    1778:	4b25      	ldr	r3, [pc, #148]	; (1810 <work_in_time_slice+0xe0>)
    177a:	9305      	str	r3, [sp, #20]
    177c:	9606      	str	r6, [sp, #24]
			   HAL_TICKER_US_TO_TICKS(context->interval),
    177e:	900b      	str	r0, [sp, #44]	; 0x2c
			   HAL_TICKER_US_TO_TICKS(context->slot),
    1780:	f8d9 0014 	ldr.w	r0, [r9, #20]
    1784:	a320      	add	r3, pc, #128	; (adr r3, 1808 <work_in_time_slice+0xd8>)
    1786:	e9d3 2300 	ldrd	r2, r3, [r3]
    178a:	fba0 010b 	umull	r0, r1, r0, fp
    178e:	f7fe fcf7 	bl	180 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(context->interval),
    1792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1794:	f023 497f 	bic.w	r9, r3, #4278190080	; 0xff000000
    1798:	4b1e      	ldr	r3, [pc, #120]	; (1814 <work_in_time_slice+0xe4>)
	err = ticker_start(instance_index,
    179a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(context->interval),
    179e:	fba9 bc03 	umull	fp, ip, r9, r3
    17a2:	2307      	movs	r3, #7
    17a4:	fb03 cc09 	mla	ip, r3, r9, ip
	err = ticker_start(instance_index,
    17a8:	e9cd 7003 	strd	r7, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(context->interval),
    17ac:	ebb4 000b 	subs.w	r0, r4, fp
    17b0:	eb65 010c 	sbc.w	r1, r5, ip
    17b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    17b8:	2300      	movs	r3, #0
    17ba:	f7fe fce1 	bl	180 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    17be:	4643      	mov	r3, r8
    17c0:	e9cd 9001 	strd	r9, r0, [sp, #4]
    17c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    17c6:	9700      	str	r7, [sp, #0]
    17c8:	2103      	movs	r1, #3
    17ca:	4650      	mov	r0, sl
    17cc:	f016 fc2c 	bl	18028 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    17d0:	f030 0302 	bics.w	r3, r0, #2
    17d4:	d113      	bne.n	17fe <work_in_time_slice+0xce>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sem, *(uintptr_t *)&timeout, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    17d6:	4810      	ldr	r0, [pc, #64]	; (1818 <work_in_time_slice+0xe8>)
    17d8:	f645 11b3 	movw	r1, #22963	; 0x59b3
    17dc:	f020 f9a0 	bl	21b20 <z_impl_k_sem_take>
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    17e0:	b158      	cbz	r0, 17fa <work_in_time_slice+0xca>
		_ticker_stop(instance_index, 3, ticker_id);
    17e2:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    17e6:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    17ea:	2103      	movs	r1, #3
    17ec:	f01d f994 	bl	1eb18 <_ticker_stop>
		result = -ETIMEDOUT;
    17f0:	f06f 003b 	mvn.w	r0, #59	; 0x3b
}
    17f4:	b00f      	add	sp, #60	; 0x3c
    17f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = p_flash_op_desc->result;
    17fa:	68b0      	ldr	r0, [r6, #8]
    17fc:	e7fa      	b.n	17f4 <work_in_time_slice+0xc4>
		result = -ECANCELED;
    17fe:	f06f 0047 	mvn.w	r0, #71	; 0x47
	return result;
    1802:	e7f7      	b.n	17f4 <work_in_time_slice+0xc4>
    1804:	f3af 8000 	nop.w
    1808:	1afd498d 	.word	0x1afd498d
    180c:	00000007 	.word	0x00000007
    1810:	0001eb61 	.word	0x0001eb61
    1814:	1afd498d 	.word	0x1afd498d
    1818:	20001a20 	.word	0x20001a20
    181c:	3b9aca00 	.word	0x3b9aca00

00001820 <write_op>:
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
{
    1820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	u32_t ticks_begin = 0U;
	u32_t ticks_diff;
	u32_t i = 1U;

	if (w_ctx->enable_time_limit) {
    1824:	7b05      	ldrb	r5, [r0, #12]
{
    1826:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
    1828:	b115      	cbz	r5, 1830 <write_op+0x10>
		ticks_begin = ticker_ticks_now_get();
    182a:	f025 fe03 	bl	27434 <ticker_ticks_now_get>
    182e:	4605      	mov	r5, r0
		if (w_ctx->enable_time_limit) {
			ticks_diff =
				ticker_ticks_diff_get(ticker_ticks_now_get(),
						      ticks_begin);
			if (ticks_diff + ticks_diff/i >
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    1830:	f20f 0980 	addw	r9, pc, #128	; 0x80
    1834:	e9d9 8900 	ldrd	r8, r9, [r9]
    1838:	f8df a080 	ldr.w	sl, [pc, #128]	; 18bc <write_op+0x9c>
	u32_t ticks_begin = 0U;
    183c:	2601      	movs	r6, #1
	while (w_ctx->len >= sizeof(u32_t)) {
    183e:	68a3      	ldr	r3, [r4, #8]
    1840:	2b03      	cmp	r3, #3
    1842:	d807      	bhi.n	1854 <write_op+0x34>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    1844:	4a1a      	ldr	r2, [pc, #104]	; (18b0 <write_op+0x90>)
    1846:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    184a:	07db      	lsls	r3, r3, #31
    184c:	d5fb      	bpl.n	1846 <write_op+0x26>
		shift_write_context(w_ctx->len, w_ctx);
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	nvmc_wait_ready();

	return FLASH_OP_DONE;
    184e:	2000      	movs	r0, #0
}
    1850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				     UNALIGNED_GET((u32_t *)w_ctx->data_addr));
    1854:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    1856:	6860      	ldr	r0, [r4, #4]
    1858:	6819      	ldr	r1, [r3, #0]
    185a:	f01d ff23 	bl	1f6a4 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
    185e:	6863      	ldr	r3, [r4, #4]
    1860:	3304      	adds	r3, #4
    1862:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
    1864:	6823      	ldr	r3, [r4, #0]
    1866:	3304      	adds	r3, #4
    1868:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    186a:	68a3      	ldr	r3, [r4, #8]
    186c:	3b04      	subs	r3, #4
    186e:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
    1870:	7b23      	ldrb	r3, [r4, #12]
		i++;
    1872:	3601      	adds	r6, #1
		if (w_ctx->enable_time_limit) {
    1874:	2b00      	cmp	r3, #0
    1876:	d0e2      	beq.n	183e <write_op+0x1e>
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    1878:	f025 fddc 	bl	27434 <ticker_ticks_now_get>
    187c:	4629      	mov	r1, r5
    187e:	f025 fddb 	bl	27438 <ticker_ticks_diff_get>
			if (ticks_diff + ticks_diff/i >
    1882:	fbb0 f7f6 	udiv	r7, r0, r6
    1886:	4407      	add	r7, r0
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    1888:	6960      	ldr	r0, [r4, #20]
    188a:	4642      	mov	r2, r8
    188c:	464b      	mov	r3, r9
    188e:	fba0 010a 	umull	r0, r1, r0, sl
    1892:	f7fe fc75 	bl	180 <__aeabi_uldivmod>
    1896:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (ticks_diff + ticks_diff/i >
    189a:	4287      	cmp	r7, r0
    189c:	d9cf      	bls.n	183e <write_op+0x1e>
    189e:	4a04      	ldr	r2, [pc, #16]	; (18b0 <write_op+0x90>)
    18a0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    18a4:	07d9      	lsls	r1, r3, #31
    18a6:	d5fb      	bpl.n	18a0 <write_op+0x80>
				return FLASH_OP_ONGOING;
    18a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    18ac:	e7d0      	b.n	1850 <write_op+0x30>
    18ae:	bf00      	nop
    18b0:	4001e000 	.word	0x4001e000
    18b4:	1afd498d 	.word	0x1afd498d
    18b8:	00000007 	.word	0x00000007
    18bc:	3b9aca00 	.word	0x3b9aca00

000018c0 <prov_complete>:
	.elem_count = ARRAY_SIZE(elements),
};

static u16_t node_addr;
static void prov_complete(u16_t net_idx, u16_t addr)
{
    18c0:	b508      	push	{r3, lr}
	struct bt_mesh_elem *ele = &elements[0];

	printk(APP_NAME"%s\n", __func__);
    18c2:	4905      	ldr	r1, [pc, #20]	; (18d8 <prov_complete+0x18>)
    18c4:	4805      	ldr	r0, [pc, #20]	; (18dc <prov_complete+0x1c>)
    18c6:	f021 fd00 	bl	232ca <printk>
	//board_prov_complete();
	node_addr = ele->addr;
	printk("NODE_ADDR = 0x%04x\n", node_addr);
    18ca:	4b05      	ldr	r3, [pc, #20]	; (18e0 <prov_complete+0x20>)
    18cc:	4805      	ldr	r0, [pc, #20]	; (18e4 <prov_complete+0x24>)
    18ce:	8819      	ldrh	r1, [r3, #0]

}
    18d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("NODE_ADDR = 0x%04x\n", node_addr);
    18d4:	f021 bcf9 	b.w	232ca <printk>
    18d8:	0002976c 	.word	0x0002976c
    18dc:	000295a8 	.word	0x000295a8
    18e0:	2000697c 	.word	0x2000697c
    18e4:	000295b0 	.word	0x000295b0

000018e8 <bt_ready>:
	.complete = prov_complete,
	.reset = prov_reset,
};

static void bt_ready(int err)
{
    18e8:	b508      	push	{r3, lr}
	struct bt_mesh_elem *ele = &elements[0];
	if (err) {
		printk(APP_NAME"%s: Bluetooth init failed (err %d)\n", __func__, err);
    18ea:	4920      	ldr	r1, [pc, #128]	; (196c <bt_ready+0x84>)
	if (err) {
    18ec:	4602      	mov	r2, r0
    18ee:	b120      	cbz	r0, 18fa <bt_ready+0x12>
		printk(APP_NAME"%s: Bluetooth init failed (err %d)\n", __func__, err);
    18f0:	481f      	ldr	r0, [pc, #124]	; (1970 <bt_ready+0x88>)
	printk("\n....Node....\n");
	err = bt_set_name("Node");
	if(err)
		printk("bt_set_name failed, err=%d\n", err);

}
    18f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk(APP_NAME"%s: Initializing mesh failed (err %d)\n", __func__, err);
    18f6:	f021 bce8 	b.w	232ca <printk>
	printk(APP_NAME"%s:Bluetooth initialized\n", __func__);
    18fa:	481e      	ldr	r0, [pc, #120]	; (1974 <bt_ready+0x8c>)
    18fc:	f021 fce5 	bl	232ca <printk>
	err = bt_mesh_init(&prov, &comp);
    1900:	491d      	ldr	r1, [pc, #116]	; (1978 <bt_ready+0x90>)
    1902:	481e      	ldr	r0, [pc, #120]	; (197c <bt_ready+0x94>)
    1904:	f024 fd60 	bl	263c8 <bt_mesh_init>
	if (err) {
    1908:	4602      	mov	r2, r0
    190a:	b110      	cbz	r0, 1912 <bt_ready+0x2a>
		printk(APP_NAME"%s: Initializing mesh failed (err %d)\n", __func__, err);
    190c:	4917      	ldr	r1, [pc, #92]	; (196c <bt_ready+0x84>)
    190e:	481c      	ldr	r0, [pc, #112]	; (1980 <bt_ready+0x98>)
    1910:	e7ef      	b.n	18f2 <bt_ready+0xa>
		settings_load();
    1912:	f022 f8fe 	bl	23b12 <settings_load>
	mod_cli = &root_models[ARRAY_SIZE(root_models)-1];
    1916:	4b1b      	ldr	r3, [pc, #108]	; (1984 <bt_ready+0x9c>)
    1918:	4a1b      	ldr	r2, [pc, #108]	; (1988 <bt_ready+0xa0>)
    191a:	f103 0120 	add.w	r1, r3, #32
    191e:	6011      	str	r1, [r2, #0]
	mod_pub = mod_cli->pub;
    1920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1922:	4b1a      	ldr	r3, [pc, #104]	; (198c <bt_ready+0xa4>)
	err = bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
    1924:	2003      	movs	r0, #3
	mod_pub = mod_cli->pub;
    1926:	601a      	str	r2, [r3, #0]
	err = bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
    1928:	f014 f804 	bl	15934 <bt_mesh_prov_enable>
	if (err == -EALREADY) {
    192c:	3045      	adds	r0, #69	; 0x45
    192e:	d118      	bne.n	1962 <bt_ready+0x7a>
		printk("\nUsing stored settings\n");
    1930:	4817      	ldr	r0, [pc, #92]	; (1990 <bt_ready+0xa8>)
    1932:	f021 fcca 	bl	232ca <printk>
		printk("NODE_ADDR = 0x%04x\n", node_addr);
    1936:	4b17      	ldr	r3, [pc, #92]	; (1994 <bt_ready+0xac>)
    1938:	4817      	ldr	r0, [pc, #92]	; (1998 <bt_ready+0xb0>)
    193a:	8819      	ldrh	r1, [r3, #0]
    193c:	f021 fcc5 	bl	232ca <printk>
	printk(APP_NAME"%s: Mesh initialized\n", __func__);
    1940:	490a      	ldr	r1, [pc, #40]	; (196c <bt_ready+0x84>)
    1942:	4816      	ldr	r0, [pc, #88]	; (199c <bt_ready+0xb4>)
    1944:	f021 fcc1 	bl	232ca <printk>
	printk("\n....Node....\n");
    1948:	4815      	ldr	r0, [pc, #84]	; (19a0 <bt_ready+0xb8>)
    194a:	f021 fcbe 	bl	232ca <printk>
	err = bt_set_name("Node");
    194e:	4815      	ldr	r0, [pc, #84]	; (19a4 <bt_ready+0xbc>)
    1950:	f006 f9a4 	bl	7c9c <bt_set_name>
	if(err)
    1954:	4601      	mov	r1, r0
    1956:	b140      	cbz	r0, 196a <bt_ready+0x82>
}
    1958:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("bt_set_name failed, err=%d\n", err);
    195c:	4812      	ldr	r0, [pc, #72]	; (19a8 <bt_ready+0xc0>)
    195e:	f021 bcb4 	b.w	232ca <printk>
		printk("\n\nPlease provision the node\n\n");
    1962:	4812      	ldr	r0, [pc, #72]	; (19ac <bt_ready+0xc4>)
    1964:	f021 fcb1 	bl	232ca <printk>
    1968:	e7ea      	b.n	1940 <bt_ready+0x58>
}
    196a:	bd08      	pop	{r3, pc}
    196c:	0002977a 	.word	0x0002977a
    1970:	000295c4 	.word	0x000295c4
    1974:	000295ec 	.word	0x000295ec
    1978:	00028af8 	.word	0x00028af8
    197c:	00028b20 	.word	0x00028b20
    1980:	0002960a 	.word	0x0002960a
    1984:	200069c4 	.word	0x200069c4
    1988:	200001dc 	.word	0x200001dc
    198c:	200001e0 	.word	0x200001e0
    1990:	00029635 	.word	0x00029635
    1994:	2000697c 	.word	0x2000697c
    1998:	000295b0 	.word	0x000295b0
    199c:	0002966b 	.word	0x0002966b
    19a0:	00029685 	.word	0x00029685
    19a4:	00029694 	.word	0x00029694
    19a8:	00029699 	.word	0x00029699
    19ac:	0002964d 	.word	0x0002964d

000019b0 <envi_report_set>:
{
    19b0:	b508      	push	{r3, lr}
	envi_report_flg = net_buf_simple_pull_u8(buf);
    19b2:	4610      	mov	r0, r2
    19b4:	f026 fa6a 	bl	27e8c <net_buf_simple_pull_u8>
    19b8:	4b09      	ldr	r3, [pc, #36]	; (19e0 <envi_report_set+0x30>)
    19ba:	7018      	strb	r0, [r3, #0]
	if (envi_report_flg) {
    19bc:	781b      	ldrb	r3, [r3, #0]
    19be:	b13b      	cbz	r3, 19d0 <envi_report_set+0x20>
		printk("NODE:Start ENVI report\n");
    19c0:	4808      	ldr	r0, [pc, #32]	; (19e4 <envi_report_set+0x34>)
    19c2:	f021 fc82 	bl	232ca <printk>
	z_impl_k_thread_resume(thread);
    19c6:	4808      	ldr	r0, [pc, #32]	; (19e8 <envi_report_set+0x38>)
}
    19c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    19cc:	f01f ba1e 	b.w	20e0c <z_impl_k_thread_resume>
		printk("NODE:Stop ENVI report\n");
    19d0:	4806      	ldr	r0, [pc, #24]	; (19ec <envi_report_set+0x3c>)
    19d2:	f021 fc7a 	bl	232ca <printk>
	z_impl_k_thread_suspend(thread);
    19d6:	4804      	ldr	r0, [pc, #16]	; (19e8 <envi_report_set+0x38>)
}
    19d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    19dc:	f01f bb14 	b.w	21008 <z_impl_k_thread_suspend>
    19e0:	20001d74 	.word	0x20001d74
    19e4:	000296b5 	.word	0x000296b5
    19e8:	20000148 	.word	0x20000148
    19ec:	000296cd 	.word	0x000296cd

000019f0 <envi_thread>:
{
    19f0:	b580      	push	{r7, lr}
		if (envi_report_flg) {
    19f2:	4e23      	ldr	r6, [pc, #140]	; (1a80 <envi_thread+0x90>)

static s8_t die_temperature(void)
{
        int32_t temp;

        NRF_TEMP->TASKS_START = 1;
    19f4:	4d23      	ldr	r5, [pc, #140]	; (1a84 <envi_thread+0x94>)
		if (envi_report_flg) {
    19f6:	7833      	ldrb	r3, [r6, #0]
    19f8:	2b00      	cmp	r3, #0
    19fa:	d03d      	beq.n	1a78 <envi_thread+0x88>
        NRF_TEMP->TASKS_START = 1;
    19fc:	2401      	movs	r4, #1
	return z_impl_k_sleep(timeout);
    19fe:	f640 10c4 	movw	r0, #2500	; 0x9c4
    1a02:	f020 f807 	bl	21a14 <z_impl_k_sleep>
    1a06:	602c      	str	r4, [r5, #0]
    1a08:	2064      	movs	r0, #100	; 0x64
    1a0a:	f020 f803 	bl	21a14 <z_impl_k_sleep>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    1a0e:	f8d5 7508 	ldr.w	r7, [r5, #1288]	; 0x508
        k_sleep(K_MSEC(100));
        temp = (nrf_temp_result_get(NRF_TEMP) / 4);
        NRF_TEMP->TASKS_STOP = 1;
    1a12:	606c      	str	r4, [r5, #4]
        bt_mesh_model_msg_init(mod_pub->msg, OP_ENVI_REPORT);
    1a14:	4c1c      	ldr	r4, [pc, #112]	; (1a88 <envi_thread+0x98>)
    1a16:	6823      	ldr	r3, [r4, #0]
        temp = (nrf_temp_result_get(NRF_TEMP) / 4);
    1a18:	2f00      	cmp	r7, #0
        bt_mesh_model_msg_init(mod_pub->msg, OP_ENVI_REPORT);
    1a1a:	6918      	ldr	r0, [r3, #16]
    1a1c:	f248 2101 	movw	r1, #33281	; 0x8201
        temp = (nrf_temp_result_get(NRF_TEMP) / 4);
    1a20:	bfb8      	it	lt
    1a22:	3703      	addlt	r7, #3
        bt_mesh_model_msg_init(mod_pub->msg, OP_ENVI_REPORT);
    1a24:	f024 ffc9 	bl	269ba <bt_mesh_model_msg_init>
        net_buf_simple_add_u8(mod_pub->msg, temperature);
    1a28:	6823      	ldr	r3, [r4, #0]
        temp = (nrf_temp_result_get(NRF_TEMP) / 4);
    1a2a:	10bf      	asrs	r7, r7, #2
        net_buf_simple_add_u8(mod_pub->msg, temperature);
    1a2c:	6918      	ldr	r0, [r3, #16]
    1a2e:	b2f9      	uxtb	r1, r7
    1a30:	f026 fa68 	bl	27f04 <net_buf_simple_add_u8>
        net_buf_simple_add_le16(mod_pub->msg, airp);
    1a34:	6823      	ldr	r3, [r4, #0]
    1a36:	2112      	movs	r1, #18
    1a38:	6918      	ldr	r0, [r3, #16]
    1a3a:	f026 fa6a 	bl	27f12 <net_buf_simple_add_le16>
        net_buf_simple_add_le16(mod_pub->msg, humidity);
    1a3e:	6823      	ldr	r3, [r4, #0]
    1a40:	2154      	movs	r1, #84	; 0x54
    1a42:	6918      	ldr	r0, [r3, #16]
    1a44:	f026 fa65 	bl	27f12 <net_buf_simple_add_le16>
        ret = bt_mesh_model_publish(mod_cli);
    1a48:	4b10      	ldr	r3, [pc, #64]	; (1a8c <envi_thread+0x9c>)
    1a4a:	6818      	ldr	r0, [r3, #0]
    1a4c:	f00e f808 	bl	fa60 <bt_mesh_model_publish>
        if (ret) {
    1a50:	4602      	mov	r2, r0
    1a52:	b120      	cbz	r0, 1a5e <envi_thread+0x6e>
                printk("\n%s:bt_mesh_model_publish failed, ERR = %d\n", __func__, ret);
    1a54:	490e      	ldr	r1, [pc, #56]	; (1a90 <envi_thread+0xa0>)
    1a56:	480f      	ldr	r0, [pc, #60]	; (1a94 <envi_thread+0xa4>)
    1a58:	f021 fc37 	bl	232ca <printk>
                return;
    1a5c:	e7cb      	b.n	19f6 <envi_thread+0x6>
        printk("------------------------\n");
    1a5e:	480e      	ldr	r0, [pc, #56]	; (1a98 <envi_thread+0xa8>)
    1a60:	f021 fc33 	bl	232ca <printk>
        printk("temperature:%hhd airp:%hu humidity:%hu\n", temperature, airp, humidity);
    1a64:	480d      	ldr	r0, [pc, #52]	; (1a9c <envi_thread+0xac>)
    1a66:	2354      	movs	r3, #84	; 0x54
    1a68:	2212      	movs	r2, #18
    1a6a:	b279      	sxtb	r1, r7
    1a6c:	f021 fc2d 	bl	232ca <printk>
        printk("-------------------------\n");
    1a70:	480b      	ldr	r0, [pc, #44]	; (1aa0 <envi_thread+0xb0>)
    1a72:	f021 fc2a 	bl	232ca <printk>
    1a76:	e7be      	b.n	19f6 <envi_thread+0x6>
	z_impl_k_thread_suspend(thread);
    1a78:	480a      	ldr	r0, [pc, #40]	; (1aa4 <envi_thread+0xb4>)
    1a7a:	f01f fac5 	bl	21008 <z_impl_k_thread_suspend>
}
    1a7e:	e7ba      	b.n	19f6 <envi_thread+0x6>
    1a80:	20001d74 	.word	0x20001d74
    1a84:	4000c000 	.word	0x4000c000
    1a88:	200001e0 	.word	0x200001e0
    1a8c:	200001dc 	.word	0x200001dc
    1a90:	0002975c 	.word	0x0002975c
    1a94:	000296e4 	.word	0x000296e4
    1a98:	00029739 	.word	0x00029739
    1a9c:	00029710 	.word	0x00029710
    1aa0:	00029738 	.word	0x00029738
    1aa4:	20000148 	.word	0x20000148

00001aa8 <main>:
{       
    1aa8:	b508      	push	{r3, lr}
	z_impl_k_thread_suspend(thread);
    1aaa:	4809      	ldr	r0, [pc, #36]	; (1ad0 <main+0x28>)
    1aac:	f01f faac 	bl	21008 <z_impl_k_thread_suspend>
	err = bt_enable(bt_ready);
    1ab0:	4808      	ldr	r0, [pc, #32]	; (1ad4 <main+0x2c>)
    1ab2:	f006 f87b 	bl	7bac <bt_enable>
	if (err) {
    1ab6:	4601      	mov	r1, r0
    1ab8:	b120      	cbz	r0, 1ac4 <main+0x1c>
}
    1aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    1abe:	4806      	ldr	r0, [pc, #24]	; (1ad8 <main+0x30>)
    1ac0:	f021 bc03 	b.w	232ca <printk>
}
    1ac4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Bluetooth initialized\n");
    1ac8:	4804      	ldr	r0, [pc, #16]	; (1adc <main+0x34>)
    1aca:	f021 bbfe 	b.w	232ca <printk>
    1ace:	bf00      	nop
    1ad0:	20000148 	.word	0x20000148
    1ad4:	000018e9 	.word	0x000018e9
    1ad8:	000295cc 	.word	0x000295cc
    1adc:	000295f3 	.word	0x000295f3

00001ae0 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

u8_t crc8_ccitt(u8_t val, const void *buf, size_t cnt)
{
    1ae0:	b530      	push	{r4, r5, lr}
	int i;
	const u8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    1ae2:	4c0a      	ldr	r4, [pc, #40]	; (1b0c <crc8_ccitt+0x2c>)
    1ae4:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    1ae6:	4291      	cmp	r1, r2
    1ae8:	d100      	bne.n	1aec <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    1aea:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    1aec:	f811 3b01 	ldrb.w	r3, [r1], #1
    1af0:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    1af2:	0903      	lsrs	r3, r0, #4
    1af4:	5ce3      	ldrb	r3, [r4, r3]
    1af6:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    1afa:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    1afc:	f3c3 1303 	ubfx	r3, r3, #4, #4
    1b00:	5ce0      	ldrb	r0, [r4, r3]
    1b02:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    1b06:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    1b08:	e7ed      	b.n	1ae6 <crc8_ccitt+0x6>
    1b0a:	bf00      	nop
    1b0c:	00029793 	.word	0x00029793

00001b10 <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
    1b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b14:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    1b16:	7a83      	ldrb	r3, [r0, #10]
    1b18:	009b      	lsls	r3, r3, #2
    1b1a:	3307      	adds	r3, #7
    1b1c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
    1b20:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    1b22:	ebad 0d03 	sub.w	sp, sp, r3
    1b26:	46e9      	mov	r9, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
    1b28:	6843      	ldr	r3, [r0, #4]
    1b2a:	f8c9 3000 	str.w	r3, [r9]
{
    1b2e:	4688      	mov	r8, r1
    1b30:	4615      	mov	r5, r2
    1b32:	4606      	mov	r6, r0
	for (i = 1; i <= level; i++) {
    1b34:	4649      	mov	r1, r9
    1b36:	2201      	movs	r2, #1
    1b38:	4590      	cmp	r8, r2
    1b3a:	d220      	bcs.n	1b7e <z_sys_mem_pool_block_free+0x6e>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    1b3c:	7c34      	ldrb	r4, [r6, #16]
    1b3e:	f014 0401 	ands.w	r4, r4, #1
    1b42:	d002      	beq.n	1b4a <z_sys_mem_pool_block_free+0x3a>
    1b44:	f021 fa90 	bl	23068 <pool_irq_lock.isra.0.part.0>
    1b48:	4604      	mov	r4, r0
	while (level >= 0) {
    1b4a:	f1b8 0f00 	cmp.w	r8, #0
    1b4e:	da1e      	bge.n	1b8e <z_sys_mem_pool_block_free+0x7e>
	__ASSERT(0, "out of levels");
    1b50:	4a50      	ldr	r2, [pc, #320]	; (1c94 <z_sys_mem_pool_block_free+0x184>)
    1b52:	4951      	ldr	r1, [pc, #324]	; (1c98 <z_sys_mem_pool_block_free+0x188>)
    1b54:	4851      	ldr	r0, [pc, #324]	; (1c9c <z_sys_mem_pool_block_free+0x18c>)
    1b56:	23bc      	movs	r3, #188	; 0xbc
    1b58:	f021 fbb7 	bl	232ca <printk>
    1b5c:	4850      	ldr	r0, [pc, #320]	; (1ca0 <z_sys_mem_pool_block_free+0x190>)
    1b5e:	f021 fbb4 	bl	232ca <printk>
    1b62:	484c      	ldr	r0, [pc, #304]	; (1c94 <z_sys_mem_pool_block_free+0x184>)
    1b64:	21bc      	movs	r1, #188	; 0xbc
    1b66:	f021 fbf3 	bl	23350 <assert_post_action>
	return -1;
    1b6a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
    1b6e:	7c30      	ldrb	r0, [r6, #16]
    1b70:	4621      	mov	r1, r4
    1b72:	f021 fa82 	bl	2307a <pool_irq_unlock.isra.0>
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
}
    1b76:	3714      	adds	r7, #20
    1b78:	46bd      	mov	sp, r7
    1b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
    1b7e:	680b      	ldr	r3, [r1, #0]
    1b80:	089b      	lsrs	r3, r3, #2
    1b82:	f023 0303 	bic.w	r3, r3, #3
    1b86:	f841 3f04 	str.w	r3, [r1, #4]!
	for (i = 1; i <= level; i++) {
    1b8a:	3201      	adds	r2, #1
    1b8c:	e7d4      	b.n	1b38 <z_sys_mem_pool_block_free+0x28>
		int i, lsz = lsizes[level];
    1b8e:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
    1b92:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
    1b94:	fb03 fb05 	mul.w	fp, r3, r5
    1b98:	6833      	ldr	r3, [r6, #0]
    1b9a:	603b      	str	r3, [r7, #0]
    1b9c:	eb03 0a0b 	add.w	sl, r3, fp
	int bit = get_bit_ptr(p, level, bn, &word);
    1ba0:	462a      	mov	r2, r5
    1ba2:	f107 030c 	add.w	r3, r7, #12
    1ba6:	4641      	mov	r1, r8
    1ba8:	4630      	mov	r0, r6
    1baa:	f021 fa45 	bl	23038 <get_bit_ptr>
	return (*word >> bit) & 1;
    1bae:	68fb      	ldr	r3, [r7, #12]
    1bb0:	681b      	ldr	r3, [r3, #0]
    1bb2:	40c3      	lsrs	r3, r0
		__ASSERT(alloc_bit_is_set(p, level, bn),
    1bb4:	07db      	lsls	r3, r3, #31
    1bb6:	d40d      	bmi.n	1bd4 <z_sys_mem_pool_block_free+0xc4>
    1bb8:	4a36      	ldr	r2, [pc, #216]	; (1c94 <z_sys_mem_pool_block_free+0x184>)
    1bba:	493a      	ldr	r1, [pc, #232]	; (1ca4 <z_sys_mem_pool_block_free+0x194>)
    1bbc:	4837      	ldr	r0, [pc, #220]	; (1c9c <z_sys_mem_pool_block_free+0x18c>)
    1bbe:	23a2      	movs	r3, #162	; 0xa2
    1bc0:	f021 fb83 	bl	232ca <printk>
    1bc4:	4838      	ldr	r0, [pc, #224]	; (1ca8 <z_sys_mem_pool_block_free+0x198>)
    1bc6:	4651      	mov	r1, sl
    1bc8:	f021 fb7f 	bl	232ca <printk>
    1bcc:	4831      	ldr	r0, [pc, #196]	; (1c94 <z_sys_mem_pool_block_free+0x184>)
    1bce:	21a2      	movs	r1, #162	; 0xa2
    1bd0:	f021 fbbe 	bl	23350 <assert_post_action>
	int bit = get_bit_ptr(p, level, bn, &word);
    1bd4:	f107 030c 	add.w	r3, r7, #12
    1bd8:	462a      	mov	r2, r5
    1bda:	4641      	mov	r1, r8
    1bdc:	4630      	mov	r0, r6
    1bde:	f021 fa2b 	bl	23038 <get_bit_ptr>
	*word &= ~(1<<bit);
    1be2:	68fa      	ldr	r2, [r7, #12]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    1be4:	6839      	ldr	r1, [r7, #0]
    1be6:	2301      	movs	r3, #1
    1be8:	fa03 f000 	lsl.w	r0, r3, r0
    1bec:	6813      	ldr	r3, [r2, #0]
    1bee:	ea23 0300 	bic.w	r3, r3, r0
    1bf2:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
    1bf4:	68f2      	ldr	r2, [r6, #12]
    1bf6:	230c      	movs	r3, #12
    1bf8:	fb03 2308 	mla	r3, r3, r8, r2
    1bfc:	1d1a      	adds	r2, r3, #4
    1bfe:	f841 200b 	str.w	r2, [r1, fp]
	node->prev = list->tail;
    1c02:	689a      	ldr	r2, [r3, #8]
    1c04:	f8ca 2004 	str.w	r2, [sl, #4]

	list->tail->next = node;
    1c08:	689a      	ldr	r2, [r3, #8]
    1c0a:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    1c0e:	f8c3 a008 	str.w	sl, [r3, #8]
		pool_irq_unlock(p, key);
    1c12:	4621      	mov	r1, r4
    1c14:	7c30      	ldrb	r0, [r6, #16]
    1c16:	f021 fa30 	bl	2307a <pool_irq_unlock.isra.0>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    1c1a:	7c34      	ldrb	r4, [r6, #16]
    1c1c:	f014 0401 	ands.w	r4, r4, #1
    1c20:	d002      	beq.n	1c28 <z_sys_mem_pool_block_free+0x118>
    1c22:	f021 fa21 	bl	23068 <pool_irq_lock.isra.0.part.0>
    1c26:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
    1c28:	f1b8 0f00 	cmp.w	r8, #0
    1c2c:	d09f      	beq.n	1b6e <z_sys_mem_pool_block_free+0x5e>
	int bit = get_bit_ptr(p, level, bn, &word);
    1c2e:	f107 030c 	add.w	r3, r7, #12
    1c32:	462a      	mov	r2, r5
    1c34:	4641      	mov	r1, r8
    1c36:	4630      	mov	r0, r6
    1c38:	f021 f9fe 	bl	23038 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
    1c3c:	68fb      	ldr	r3, [r7, #12]
    1c3e:	2800      	cmp	r0, #0
    1c40:	681b      	ldr	r3, [r3, #0]
    1c42:	bfb8      	it	lt
    1c44:	3003      	addlt	r0, #3
    1c46:	f020 0003 	bic.w	r0, r0, #3
    1c4a:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
    1c4e:	f010 030f 	ands.w	r3, r0, #15
    1c52:	d18c      	bne.n	1b6e <z_sys_mem_pool_block_free+0x5e>
			int b = (bn & ~3) + i;
    1c54:	f025 0b03 	bic.w	fp, r5, #3
	node->next = NULL;
    1c58:	469c      	mov	ip, r3
	return (u8_t *)p->buf + lsz * block;
    1c5a:	6879      	ldr	r1, [r7, #4]
			int b = (bn & ~3) + i;
    1c5c:	eb0b 0203 	add.w	r2, fp, r3
	return (u8_t *)p->buf + lsz * block;
    1c60:	434a      	muls	r2, r1
    1c62:	6831      	ldr	r1, [r6, #0]
    1c64:	1888      	adds	r0, r1, r2
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    1c66:	f851 e002 	ldr.w	lr, [r1, r2]
    1c6a:	f8d0 a004 	ldr.w	sl, [r0, #4]
		for (i = 0; i < 4; i++) {
    1c6e:	3301      	adds	r3, #1
    1c70:	2b04      	cmp	r3, #4
    1c72:	f8ca e000 	str.w	lr, [sl]
	node->next->prev = node->prev;
    1c76:	f8ce a004 	str.w	sl, [lr, #4]
	node->next = NULL;
    1c7a:	f841 c002 	str.w	ip, [r1, r2]
	node->prev = NULL;
    1c7e:	f8c0 c004 	str.w	ip, [r0, #4]
    1c82:	d1ea      	bne.n	1c5a <z_sys_mem_pool_block_free+0x14a>
		bn = bn / 4;
    1c84:	2d00      	cmp	r5, #0
    1c86:	bfb8      	it	lt
    1c88:	3503      	addlt	r5, #3
		level = level - 1;
    1c8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
    1c8e:	10ad      	asrs	r5, r5, #2
    1c90:	e75b      	b.n	1b4a <z_sys_mem_pool_block_free+0x3a>
    1c92:	bf00      	nop
    1c94:	000297a3 	.word	0x000297a3
    1c98:	0002d2c6 	.word	0x0002d2c6
    1c9c:	000297e6 	.word	0x000297e6
    1ca0:	00029828 	.word	0x00029828
    1ca4:	000297c7 	.word	0x000297c7
    1ca8:	00029803 	.word	0x00029803

00001cac <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1cac:	680b      	ldr	r3, [r1, #0]
    1cae:	3301      	adds	r3, #1
    1cb0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1cb2:	4b01      	ldr	r3, [pc, #4]	; (1cb8 <char_out+0xc>)
    1cb4:	681b      	ldr	r3, [r3, #0]
    1cb6:	4718      	bx	r3
    1cb8:	20006a04 	.word	0x20006a04

00001cbc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    1cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cc0:	b085      	sub	sp, #20
    1cc2:	469b      	mov	fp, r3
    1cc4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    1cc6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 1d58 <_printk_dec_ulong+0x9c>
    1cca:	2c01      	cmp	r4, #1
    1ccc:	bfb8      	it	lt
    1cce:	2401      	movlt	r4, #1
    1cd0:	2b01      	cmp	r3, #1
    1cd2:	bf0c      	ite	eq
    1cd4:	2330      	moveq	r3, #48	; 0x30
    1cd6:	2320      	movne	r3, #32
    1cd8:	4615      	mov	r5, r2
    1cda:	4606      	mov	r6, r0
    1cdc:	468a      	mov	sl, r1
    1cde:	9302      	str	r3, [sp, #8]
    1ce0:	2701      	movs	r7, #1
    1ce2:	f04f 080a 	mov.w	r8, #10
    1ce6:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    1ce8:	fbb5 f3f9 	udiv	r3, r5, r9
    1cec:	9301      	str	r3, [sp, #4]
    1cee:	b90a      	cbnz	r2, 1cf4 <_printk_dec_ulong+0x38>
    1cf0:	45a9      	cmp	r9, r5
    1cf2:	d81f      	bhi.n	1d34 <_printk_dec_ulong+0x78>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    1cf4:	9b01      	ldr	r3, [sp, #4]
    1cf6:	4651      	mov	r1, sl
    1cf8:	f103 0030 	add.w	r0, r3, #48	; 0x30
    1cfc:	47b0      	blx	r6
			digits++;
    1cfe:	3701      	adds	r7, #1
			found_largest_digit = 1;
    1d00:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    1d02:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    1d04:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
    1d08:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
    1d0c:	fb09 5513 	mls	r5, r9, r3, r5
		pos /= 10;
    1d10:	f04f 030a 	mov.w	r3, #10
    1d14:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    1d18:	d1e6      	bne.n	1ce8 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    1d1a:	4651      	mov	r1, sl
    1d1c:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1d20:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
    1d22:	f1bb 0f03 	cmp.w	fp, #3
    1d26:	d102      	bne.n	1d2e <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
    1d28:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
    1d2a:	2c00      	cmp	r4, #0
    1d2c:	dc0e      	bgt.n	1d4c <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    1d2e:	b005      	add	sp, #20
    1d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    1d34:	4544      	cmp	r4, r8
    1d36:	dbe4      	blt.n	1d02 <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
    1d38:	f1bb 0f02 	cmp.w	fp, #2
    1d3c:	d8e1      	bhi.n	1d02 <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1d3e:	9802      	ldr	r0, [sp, #8]
    1d40:	9203      	str	r2, [sp, #12]
    1d42:	4651      	mov	r1, sl
    1d44:	47b0      	blx	r6
			digits++;
    1d46:	3701      	adds	r7, #1
    1d48:	9a03      	ldr	r2, [sp, #12]
    1d4a:	e7da      	b.n	1d02 <_printk_dec_ulong+0x46>
			out(' ', ctx);
    1d4c:	4651      	mov	r1, sl
    1d4e:	2020      	movs	r0, #32
    1d50:	47b0      	blx	r6
    1d52:	3c01      	subs	r4, #1
    1d54:	e7e9      	b.n	1d2a <_printk_dec_ulong+0x6e>
    1d56:	bf00      	nop
    1d58:	3b9aca00 	.word	0x3b9aca00

00001d5c <__printk_hook_install>:
	_char_out = fn;
    1d5c:	4b01      	ldr	r3, [pc, #4]	; (1d64 <__printk_hook_install+0x8>)
    1d5e:	6018      	str	r0, [r3, #0]
}
    1d60:	4770      	bx	lr
    1d62:	bf00      	nop
    1d64:	20006a04 	.word	0x20006a04

00001d68 <z_vprintk>:
{
    1d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d6c:	b08d      	sub	sp, #52	; 0x34
    1d6e:	461c      	mov	r4, r3
	char length_mod = 0;
    1d70:	2700      	movs	r7, #0
    1d72:	1e53      	subs	r3, r2, #1
{
    1d74:	4605      	mov	r5, r0
    1d76:	468b      	mov	fp, r1
    1d78:	9303      	str	r3, [sp, #12]
	int min_width = -1;
    1d7a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    1d7e:	46b8      	mov	r8, r7
			might_format = 0;
    1d80:	2600      	movs	r6, #0
					break;
    1d82:	e005      	b.n	1d90 <z_vprintk+0x28>
		if (!might_format) {
    1d84:	b96e      	cbnz	r6, 1da2 <z_vprintk+0x3a>
			if (*fmt != '%') {
    1d86:	2825      	cmp	r0, #37	; 0x25
    1d88:	f000 8171 	beq.w	206e <z_vprintk+0x306>
				out((int)*fmt, ctx);
    1d8c:	4659      	mov	r1, fp
    1d8e:	47a8      	blx	r5
	while (*fmt) {
    1d90:	9b03      	ldr	r3, [sp, #12]
    1d92:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    1d96:	9303      	str	r3, [sp, #12]
    1d98:	2800      	cmp	r0, #0
    1d9a:	d1f3      	bne.n	1d84 <z_vprintk+0x1c>
}
    1d9c:	b00d      	add	sp, #52	; 0x34
    1d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    1da2:	287a      	cmp	r0, #122	; 0x7a
    1da4:	d80a      	bhi.n	1dbc <z_vprintk+0x54>
    1da6:	2862      	cmp	r0, #98	; 0x62
    1da8:	d810      	bhi.n	1dcc <z_vprintk+0x64>
    1daa:	2830      	cmp	r0, #48	; 0x30
    1dac:	d054      	beq.n	1e58 <z_vprintk+0xf0>
    1dae:	d845      	bhi.n	1e3c <z_vprintk+0xd4>
    1db0:	2825      	cmp	r0, #37	; 0x25
    1db2:	f000 815a 	beq.w	206a <z_vprintk+0x302>
    1db6:	282d      	cmp	r0, #45	; 0x2d
    1db8:	f000 815f 	beq.w	207a <z_vprintk+0x312>
					out((int)'%', ctx);
    1dbc:	4659      	mov	r1, fp
    1dbe:	2025      	movs	r0, #37	; 0x25
    1dc0:	47a8      	blx	r5
					out((int)*fmt, ctx);
    1dc2:	9b03      	ldr	r3, [sp, #12]
    1dc4:	7818      	ldrb	r0, [r3, #0]
    1dc6:	4659      	mov	r1, fp
    1dc8:	47a8      	blx	r5
    1dca:	e7d9      	b.n	1d80 <z_vprintk+0x18>
    1dcc:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    1dd0:	2b17      	cmp	r3, #23
    1dd2:	d8f3      	bhi.n	1dbc <z_vprintk+0x54>
    1dd4:	a201      	add	r2, pc, #4	; (adr r2, 1ddc <z_vprintk+0x74>)
    1dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1dda:	bf00      	nop
    1ddc:	00002063 	.word	0x00002063
    1de0:	00001ea7 	.word	0x00001ea7
    1de4:	00001dbd 	.word	0x00001dbd
    1de8:	00001dbd 	.word	0x00001dbd
    1dec:	00001dbd 	.word	0x00001dbd
    1df0:	00001e89 	.word	0x00001e89
    1df4:	00001ea7 	.word	0x00001ea7
    1df8:	00001dbd 	.word	0x00001dbd
    1dfc:	00001dbd 	.word	0x00001dbd
    1e00:	00001e89 	.word	0x00001e89
    1e04:	00001dbd 	.word	0x00001dbd
    1e08:	00001dbd 	.word	0x00001dbd
    1e0c:	00001dbd 	.word	0x00001dbd
    1e10:	00001f49 	.word	0x00001f49
    1e14:	00001dbd 	.word	0x00001dbd
    1e18:	00001dbd 	.word	0x00001dbd
    1e1c:	00002033 	.word	0x00002033
    1e20:	00001dbd 	.word	0x00001dbd
    1e24:	00001f17 	.word	0x00001f17
    1e28:	00001dbd 	.word	0x00001dbd
    1e2c:	00001dbd 	.word	0x00001dbd
    1e30:	00001e45 	.word	0x00001e45
    1e34:	00001dbd 	.word	0x00001dbd
    1e38:	00001e89 	.word	0x00001e89
			switch (*fmt) {
    1e3c:	2839      	cmp	r0, #57	; 0x39
    1e3e:	d91a      	bls.n	1e76 <z_vprintk+0x10e>
    1e40:	2858      	cmp	r0, #88	; 0x58
    1e42:	d1bb      	bne.n	1dbc <z_vprintk+0x54>
				if (*fmt == 'p') {
    1e44:	9b03      	ldr	r3, [sp, #12]
    1e46:	781b      	ldrb	r3, [r3, #0]
    1e48:	2b70      	cmp	r3, #112	; 0x70
    1e4a:	f040 8088 	bne.w	1f5e <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
    1e4e:	f854 3b04 	ldr.w	r3, [r4], #4
    1e52:	9306      	str	r3, [sp, #24]
    1e54:	2200      	movs	r2, #0
    1e56:	e090      	b.n	1f7a <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
    1e58:	f1b9 0f00 	cmp.w	r9, #0
    1e5c:	da0e      	bge.n	1e7c <z_vprintk+0x114>
    1e5e:	f1b8 0f00 	cmp.w	r8, #0
    1e62:	f000 810d 	beq.w	2080 <z_vprintk+0x318>
					min_width = *fmt - '0';
    1e66:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    1e6a:	f1b8 0f00 	cmp.w	r8, #0
    1e6e:	bf08      	it	eq
    1e70:	f04f 0802 	moveq.w	r8, #2
    1e74:	e78c      	b.n	1d90 <z_vprintk+0x28>
				if (min_width < 0) {
    1e76:	f1b9 0f00 	cmp.w	r9, #0
    1e7a:	dbf4      	blt.n	1e66 <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
    1e7c:	230a      	movs	r3, #10
    1e7e:	fb03 0909 	mla	r9, r3, r9, r0
    1e82:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    1e86:	e7f0      	b.n	1e6a <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
    1e88:	2868      	cmp	r0, #104	; 0x68
    1e8a:	d103      	bne.n	1e94 <z_vprintk+0x12c>
    1e8c:	2f68      	cmp	r7, #104	; 0x68
    1e8e:	d106      	bne.n	1e9e <z_vprintk+0x136>
					length_mod = 'H';
    1e90:	2748      	movs	r7, #72	; 0x48
    1e92:	e77d      	b.n	1d90 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
    1e94:	286c      	cmp	r0, #108	; 0x6c
    1e96:	d102      	bne.n	1e9e <z_vprintk+0x136>
    1e98:	2f6c      	cmp	r7, #108	; 0x6c
    1e9a:	f000 80f4 	beq.w	2086 <z_vprintk+0x31e>
				} else if (length_mod == 0) {
    1e9e:	2f00      	cmp	r7, #0
    1ea0:	d18c      	bne.n	1dbc <z_vprintk+0x54>
    1ea2:	4607      	mov	r7, r0
    1ea4:	e774      	b.n	1d90 <z_vprintk+0x28>
				if (length_mod == 'z') {
    1ea6:	2f7a      	cmp	r7, #122	; 0x7a
    1ea8:	d102      	bne.n	1eb0 <z_vprintk+0x148>
					d = va_arg(ap, int);
    1eaa:	f854 6b04 	ldr.w	r6, [r4], #4
    1eae:	e021      	b.n	1ef4 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
    1eb0:	2f6c      	cmp	r7, #108	; 0x6c
    1eb2:	d0fa      	beq.n	1eaa <z_vprintk+0x142>
				} else if (length_mod == 'L') {
    1eb4:	2f4c      	cmp	r7, #76	; 0x4c
    1eb6:	d1f8      	bne.n	1eaa <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
    1eb8:	3407      	adds	r4, #7
    1eba:	f024 0407 	bic.w	r4, r4, #7
    1ebe:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1ec2:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
    1ec6:	9b04      	ldr	r3, [sp, #16]
    1ec8:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
    1ecc:	9b05      	ldr	r3, [sp, #20]
    1ece:	9108      	str	r1, [sp, #32]
    1ed0:	f143 0100 	adc.w	r1, r3, #0
    1ed4:	9109      	str	r1, [sp, #36]	; 0x24
    1ed6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    1eda:	2100      	movs	r1, #0
    1edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ee0:	4299      	cmp	r1, r3
    1ee2:	bf08      	it	eq
    1ee4:	4290      	cmpeq	r0, r2
    1ee6:	d204      	bcs.n	1ef2 <z_vprintk+0x18a>
						print_err(out, ctx);
    1ee8:	4659      	mov	r1, fp
    1eea:	4628      	mov	r0, r5
    1eec:	f021 f9cc 	bl	23288 <print_err>
						break;
    1ef0:	e746      	b.n	1d80 <z_vprintk+0x18>
					d = lld;
    1ef2:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
    1ef4:	2e00      	cmp	r6, #0
    1ef6:	da05      	bge.n	1f04 <z_vprintk+0x19c>
					out((int)'-', ctx);
    1ef8:	4659      	mov	r1, fp
    1efa:	202d      	movs	r0, #45	; 0x2d
    1efc:	47a8      	blx	r5
					d = -d;
    1efe:	4276      	negs	r6, r6
					min_width--;
    1f00:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    1f04:	f8cd 9000 	str.w	r9, [sp]
    1f08:	4643      	mov	r3, r8
    1f0a:	4632      	mov	r2, r6
				_printk_dec_ulong(out, ctx, u, padding,
    1f0c:	4659      	mov	r1, fp
    1f0e:	4628      	mov	r0, r5
    1f10:	f7ff fed4 	bl	1cbc <_printk_dec_ulong>
				break;
    1f14:	e734      	b.n	1d80 <z_vprintk+0x18>
				if (length_mod == 'z') {
    1f16:	2f7a      	cmp	r7, #122	; 0x7a
    1f18:	d102      	bne.n	1f20 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
    1f1a:	f854 2b04 	ldr.w	r2, [r4], #4
    1f1e:	e00f      	b.n	1f40 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
    1f20:	2f6c      	cmp	r7, #108	; 0x6c
    1f22:	d0fa      	beq.n	1f1a <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
    1f24:	2f4c      	cmp	r7, #76	; 0x4c
    1f26:	d1f8      	bne.n	1f1a <z_vprintk+0x1b2>
					unsigned long long llu =
    1f28:	3407      	adds	r4, #7
    1f2a:	f024 0407 	bic.w	r4, r4, #7
    1f2e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    1f32:	2100      	movs	r1, #0
    1f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1f38:	4299      	cmp	r1, r3
    1f3a:	bf08      	it	eq
    1f3c:	4290      	cmpeq	r0, r2
    1f3e:	d3d3      	bcc.n	1ee8 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
    1f40:	f8cd 9000 	str.w	r9, [sp]
    1f44:	4643      	mov	r3, r8
    1f46:	e7e1      	b.n	1f0c <z_vprintk+0x1a4>
				out('0', ctx);
    1f48:	4659      	mov	r1, fp
    1f4a:	2030      	movs	r0, #48	; 0x30
    1f4c:	47a8      	blx	r5
				out('x', ctx);
    1f4e:	4659      	mov	r1, fp
    1f50:	2078      	movs	r0, #120	; 0x78
    1f52:	47a8      	blx	r5
					min_width = 8;
    1f54:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    1f58:	f04f 0801 	mov.w	r8, #1
    1f5c:	e772      	b.n	1e44 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    1f5e:	2f6c      	cmp	r7, #108	; 0x6c
    1f60:	f43f af75 	beq.w	1e4e <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
    1f64:	2f4c      	cmp	r7, #76	; 0x4c
    1f66:	f47f af72 	bne.w	1e4e <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
    1f6a:	1de3      	adds	r3, r4, #7
    1f6c:	f023 0307 	bic.w	r3, r3, #7
    1f70:	461c      	mov	r4, r3
    1f72:	f854 2b08 	ldr.w	r2, [r4], #8
    1f76:	9206      	str	r2, [sp, #24]
    1f78:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
    1f7a:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    1f7c:	2310      	movs	r3, #16
	int digits = 0;
    1f7e:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
    1f80:	9107      	str	r1, [sp, #28]
	int shift = sizeof(num) * 8;
    1f82:	f04f 0a40 	mov.w	sl, #64	; 0x40
		shift -= 4;
    1f86:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
    1f8a:	9906      	ldr	r1, [sp, #24]
    1f8c:	f1ca 0e20 	rsb	lr, sl, #32
    1f90:	f1aa 0c20 	sub.w	ip, sl, #32
    1f94:	fa21 f00a 	lsr.w	r0, r1, sl
    1f98:	fa02 fe0e 	lsl.w	lr, r2, lr
    1f9c:	ea40 000e 	orr.w	r0, r0, lr
    1fa0:	fa22 fc0c 	lsr.w	ip, r2, ip
    1fa4:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    1fa8:	f010 000f 	ands.w	r0, r0, #15
    1fac:	d107      	bne.n	1fbe <z_vprintk+0x256>
    1fae:	9907      	ldr	r1, [sp, #28]
    1fb0:	b911      	cbnz	r1, 1fb8 <z_vprintk+0x250>
    1fb2:	f1ba 0f00 	cmp.w	sl, #0
    1fb6:	d125      	bne.n	2004 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
    1fb8:	f04f 0c30 	mov.w	ip, #48	; 0x30
    1fbc:	e005      	b.n	1fca <z_vprintk+0x262>
    1fbe:	2809      	cmp	r0, #9
    1fc0:	bf8c      	ite	hi
    1fc2:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    1fc6:	f04f 0c30 	movls.w	ip, #48	; 0x30
    1fca:	4460      	add	r0, ip
			out((int)nibble, ctx);
    1fcc:	4659      	mov	r1, fp
    1fce:	b240      	sxtb	r0, r0
    1fd0:	920a      	str	r2, [sp, #40]	; 0x28
    1fd2:	9307      	str	r3, [sp, #28]
    1fd4:	47a8      	blx	r5
			digits++;
    1fd6:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
    1fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
    1fda:	3301      	adds	r3, #1
    1fdc:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
    1fde:	9b07      	ldr	r3, [sp, #28]
    1fe0:	f1ba 0f00 	cmp.w	sl, #0
    1fe4:	d123      	bne.n	202e <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
    1fe6:	f1b8 0f03 	cmp.w	r8, #3
    1fea:	f47f aec9 	bne.w	1d80 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
    1fee:	9b04      	ldr	r3, [sp, #16]
    1ff0:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
    1ff4:	2e00      	cmp	r6, #0
    1ff6:	f77f aec3 	ble.w	1d80 <z_vprintk+0x18>
			out(' ', ctx);
    1ffa:	4659      	mov	r1, fp
    1ffc:	2020      	movs	r0, #32
    1ffe:	47a8      	blx	r5
    2000:	3e01      	subs	r6, #1
    2002:	e7f7      	b.n	1ff4 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
    2004:	1e59      	subs	r1, r3, #1
    2006:	4599      	cmp	r9, r3
    2008:	910a      	str	r1, [sp, #40]	; 0x28
    200a:	db07      	blt.n	201c <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
    200c:	f1b8 0f01 	cmp.w	r8, #1
    2010:	d106      	bne.n	2020 <z_vprintk+0x2b8>
    2012:	920b      	str	r2, [sp, #44]	; 0x2c
				out('0', ctx);
    2014:	4659      	mov	r1, fp
    2016:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    2018:	47a8      	blx	r5
    201a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
    201c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    201e:	e7b2      	b.n	1f86 <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
    2020:	f1b8 0f02 	cmp.w	r8, #2
    2024:	d1fa      	bne.n	201c <z_vprintk+0x2b4>
    2026:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
    2028:	4659      	mov	r1, fp
    202a:	2020      	movs	r0, #32
    202c:	e7f4      	b.n	2018 <z_vprintk+0x2b0>
			found_largest_digit = 1;
    202e:	9607      	str	r6, [sp, #28]
    2030:	e7a9      	b.n	1f86 <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
    2032:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
    2036:	46b2      	mov	sl, r6
    2038:	4653      	mov	r3, sl
    203a:	f81a 0b01 	ldrb.w	r0, [sl], #1
    203e:	b968      	cbnz	r0, 205c <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
    2040:	f1b8 0f03 	cmp.w	r8, #3
    2044:	d121      	bne.n	208a <z_vprintk+0x322>
					int remaining = min_width - (s - start);
    2046:	1b9e      	subs	r6, r3, r6
    2048:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
    204c:	2e00      	cmp	r6, #0
    204e:	f77f ae97 	ble.w	1d80 <z_vprintk+0x18>
						out(' ', ctx);
    2052:	4659      	mov	r1, fp
    2054:	2020      	movs	r0, #32
    2056:	47a8      	blx	r5
    2058:	3e01      	subs	r6, #1
    205a:	e7f7      	b.n	204c <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
    205c:	4659      	mov	r1, fp
    205e:	47a8      	blx	r5
    2060:	e7ea      	b.n	2038 <z_vprintk+0x2d0>
				out(c, ctx);
    2062:	f854 0b04 	ldr.w	r0, [r4], #4
    2066:	4659      	mov	r1, fp
    2068:	e6ae      	b.n	1dc8 <z_vprintk+0x60>
				out((int)'%', ctx);
    206a:	4659      	mov	r1, fp
    206c:	e6ac      	b.n	1dc8 <z_vprintk+0x60>
				length_mod = 0;
    206e:	4637      	mov	r7, r6
				padding = PAD_NONE;
    2070:	46b0      	mov	r8, r6
				min_width = -1;
    2072:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    2076:	2601      	movs	r6, #1
    2078:	e68a      	b.n	1d90 <z_vprintk+0x28>
			switch (*fmt) {
    207a:	f04f 0803 	mov.w	r8, #3
    207e:	e687      	b.n	1d90 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
    2080:	f04f 0801 	mov.w	r8, #1
    2084:	e684      	b.n	1d90 <z_vprintk+0x28>
					length_mod = 'L';
    2086:	274c      	movs	r7, #76	; 0x4c
    2088:	e682      	b.n	1d90 <z_vprintk+0x28>
			might_format = 0;
    208a:	4606      	mov	r6, r0
		++fmt;
    208c:	e680      	b.n	1d90 <z_vprintk+0x28>
    208e:	bf00      	nop

00002090 <vprintk>:
{
    2090:	b507      	push	{r0, r1, r2, lr}
    2092:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    2094:	2100      	movs	r1, #0
{
    2096:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    2098:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    209a:	4803      	ldr	r0, [pc, #12]	; (20a8 <vprintk+0x18>)
    209c:	a901      	add	r1, sp, #4
    209e:	f7ff fe63 	bl	1d68 <z_vprintk>
}
    20a2:	b003      	add	sp, #12
    20a4:	f85d fb04 	ldr.w	pc, [sp], #4
    20a8:	00001cad 	.word	0x00001cad

000020ac <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    20ac:	b530      	push	{r4, r5, lr}
    20ae:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    20b0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    20b4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    20b6:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    20b8:	4805      	ldr	r0, [pc, #20]	; (20d0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    20ba:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    20bc:	a901      	add	r1, sp, #4
    20be:	f7ff fe53 	bl	1d68 <z_vprintk>

	if (ctx.count < ctx.max) {
    20c2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    20c6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    20c8:	bfb8      	it	lt
    20ca:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    20cc:	b005      	add	sp, #20
    20ce:	bd30      	pop	{r4, r5, pc}
    20d0:	000232a5 	.word	0x000232a5

000020d4 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    20d4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    20d6:	490e      	ldr	r1, [pc, #56]	; (2110 <enable_logger+0x3c>)
    20d8:	480e      	ldr	r0, [pc, #56]	; (2114 <enable_logger+0x40>)
{
    20da:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    20dc:	2200      	movs	r2, #0
    20de:	f026 fa08 	bl	284f2 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    20e2:	4d0d      	ldr	r5, [pc, #52]	; (2118 <enable_logger+0x44>)
    20e4:	490d      	ldr	r1, [pc, #52]	; (211c <enable_logger+0x48>)
    20e6:	2400      	movs	r4, #0
    20e8:	230e      	movs	r3, #14
    20ea:	e9cd 4302 	strd	r4, r3, [sp, #8]
    20ee:	e9cd 4404 	strd	r4, r4, [sp, #16]
    20f2:	e9cd 4400 	strd	r4, r4, [sp]
    20f6:	4b0a      	ldr	r3, [pc, #40]	; (2120 <enable_logger+0x4c>)
    20f8:	f44f 7240 	mov.w	r2, #768	; 0x300
    20fc:	4628      	mov	r0, r5
    20fe:	f01f fde5 	bl	21ccc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    2102:	4908      	ldr	r1, [pc, #32]	; (2124 <enable_logger+0x50>)
    2104:	4628      	mov	r0, r5
    2106:	f01f fda7 	bl	21c58 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    210a:	4620      	mov	r0, r4
    210c:	b007      	add	sp, #28
    210e:	bd30      	pop	{r4, r5, pc}
    2110:	00002129 	.word	0x00002129
    2114:	200001f8 	.word	0x200001f8
    2118:	20000240 	.word	0x20000240
    211c:	20002b60 	.word	0x20002b60
    2120:	000025fd 	.word	0x000025fd
    2124:	00029838 	.word	0x00029838

00002128 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2128:	4801      	ldr	r0, [pc, #4]	; (2130 <log_process_thread_timer_expiry_fn+0x8>)
    212a:	f01f bcb5 	b.w	21a98 <z_impl_k_sem_give>
    212e:	bf00      	nop
    2130:	2000749c 	.word	0x2000749c

00002134 <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
    2134:	2920      	cmp	r1, #32
{
    2136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2138:	4605      	mov	r5, r0
    213a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
    213c:	d909      	bls.n	2152 <z_log_get_s_mask+0x1e>
    213e:	4914      	ldr	r1, [pc, #80]	; (2190 <z_log_get_s_mask+0x5c>)
    2140:	4814      	ldr	r0, [pc, #80]	; (2194 <z_log_get_s_mask+0x60>)
    2142:	4a15      	ldr	r2, [pc, #84]	; (2198 <z_log_get_s_mask+0x64>)
    2144:	235b      	movs	r3, #91	; 0x5b
    2146:	f021 f8c0 	bl	232ca <printk>
    214a:	4813      	ldr	r0, [pc, #76]	; (2198 <z_log_get_s_mask+0x64>)
    214c:	215b      	movs	r1, #91	; 0x5b
    214e:	f021 f8ff 	bl	23350 <assert_post_action>
			arm = false;
    2152:	2000      	movs	r0, #0
    2154:	4603      	mov	r3, r0
    2156:	4602      	mov	r2, r0
				mask |= BIT(arg);
    2158:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    215a:	f815 1b01 	ldrb.w	r1, [r5], #1
    215e:	b109      	cbz	r1, 2164 <z_log_get_s_mask+0x30>
    2160:	42a3      	cmp	r3, r4
    2162:	d300      	bcc.n	2166 <z_log_get_s_mask+0x32>
}
    2164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
    2166:	2925      	cmp	r1, #37	; 0x25
    2168:	d102      	bne.n	2170 <z_log_get_s_mask+0x3c>
			arm = !arm;
    216a:	f082 0201 	eor.w	r2, r2, #1
    216e:	e7f4      	b.n	215a <z_log_get_s_mask+0x26>
		} else if (arm && isalpha((int)curr)) {
    2170:	2a00      	cmp	r2, #0
    2172:	d0f2      	beq.n	215a <z_log_get_s_mask+0x26>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    2174:	f041 0620 	orr.w	r6, r1, #32
    2178:	3e61      	subs	r6, #97	; 0x61
    217a:	2e19      	cmp	r6, #25
    217c:	d8ed      	bhi.n	215a <z_log_get_s_mask+0x26>
			if (curr == 's') {
    217e:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
    2180:	bf04      	itt	eq
    2182:	fa07 f203 	lsleq.w	r2, r7, r3
    2186:	4310      	orreq	r0, r2
			arg++;
    2188:	3301      	adds	r3, #1
			arm = false;
    218a:	2200      	movs	r2, #0
    218c:	e7e5      	b.n	215a <z_log_get_s_mask+0x26>
    218e:	bf00      	nop
    2190:	0002986d 	.word	0x0002986d
    2194:	000297e6 	.word	0x000297e6
    2198:	00029840 	.word	0x00029840

0000219c <log_core_init>:
{
    219c:	b508      	push	{r3, lr}
		log_msg_pool_init();
    219e:	f000 faa9 	bl	26f4 <log_msg_pool_init>
		log_list_init(&list);
    21a2:	4809      	ldr	r0, [pc, #36]	; (21c8 <log_core_init+0x2c>)
    21a4:	f021 f8dc 	bl	23360 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    21a8:	2304      	movs	r3, #4
    21aa:	2228      	movs	r2, #40	; 0x28
    21ac:	4907      	ldr	r1, [pc, #28]	; (21cc <log_core_init+0x30>)
    21ae:	4808      	ldr	r0, [pc, #32]	; (21d0 <log_core_init+0x34>)
    21b0:	f026 f846 	bl	28240 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    21b4:	4b07      	ldr	r3, [pc, #28]	; (21d4 <log_core_init+0x38>)
    21b6:	4a08      	ldr	r2, [pc, #32]	; (21d8 <log_core_init+0x3c>)
    21b8:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    21ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    21be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    21c2:	f000 bd8b 	b.w	2cdc <log_output_timestamp_freq_set>
    21c6:	bf00      	nop
    21c8:	200001f0 	.word	0x200001f0
    21cc:	20005394 	.word	0x20005394
    21d0:	20000224 	.word	0x20000224
    21d4:	20006a08 	.word	0x20006a08
    21d8:	000233a5 	.word	0x000233a5

000021dc <dropped_notify>:
{
    21dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    21de:	4b10      	ldr	r3, [pc, #64]	; (2220 <dropped_notify+0x44>)
    21e0:	f3bf 8f5b 	dmb	ish
    21e4:	2500      	movs	r5, #0
    21e6:	e853 7f00 	ldrex	r7, [r3]
    21ea:	e843 5200 	strex	r2, r5, [r3]
    21ee:	2a00      	cmp	r2, #0
    21f0:	d1f9      	bne.n	21e6 <dropped_notify+0xa>
    21f2:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    21f6:	4c0b      	ldr	r4, [pc, #44]	; (2224 <dropped_notify+0x48>)
    21f8:	4e0b      	ldr	r6, [pc, #44]	; (2228 <dropped_notify+0x4c>)
    21fa:	1b36      	subs	r6, r6, r4
    21fc:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    21fe:	42b5      	cmp	r5, r6
    2200:	db00      	blt.n	2204 <dropped_notify+0x28>
}
    2202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
    2204:	4620      	mov	r0, r4
    2206:	f021 f8c1 	bl	2338c <log_backend_is_active>
    220a:	b128      	cbz	r0, 2218 <dropped_notify+0x3c>
	if (backend->api->dropped != NULL) {
    220c:	6823      	ldr	r3, [r4, #0]
    220e:	68db      	ldr	r3, [r3, #12]
    2210:	b113      	cbz	r3, 2218 <dropped_notify+0x3c>
		backend->api->dropped(backend, cnt);
    2212:	4639      	mov	r1, r7
    2214:	4620      	mov	r0, r4
    2216:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2218:	3501      	adds	r5, #1
    221a:	3410      	adds	r4, #16
    221c:	e7ef      	b.n	21fe <dropped_notify+0x22>
    221e:	bf00      	nop
    2220:	200001e8 	.word	0x200001e8
    2224:	00028a20 	.word	0x00028a20
    2228:	00028a40 	.word	0x00028a40

0000222c <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    222c:	4b06      	ldr	r3, [pc, #24]	; (2248 <log_dropped+0x1c>)
    222e:	f3bf 8f5b 	dmb	ish
    2232:	e853 2f00 	ldrex	r2, [r3]
    2236:	3201      	adds	r2, #1
    2238:	e843 2100 	strex	r1, r2, [r3]
    223c:	2900      	cmp	r1, #0
    223e:	d1f8      	bne.n	2232 <log_dropped+0x6>
    2240:	f3bf 8f5b 	dmb	ish
}
    2244:	4770      	bx	lr
    2246:	bf00      	nop
    2248:	200001e8 	.word	0x200001e8

0000224c <log_source_name_get>:
    224c:	4a04      	ldr	r2, [pc, #16]	; (2260 <log_source_name_get+0x14>)
    224e:	4b05      	ldr	r3, [pc, #20]	; (2264 <log_source_name_get+0x18>)
    2250:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2252:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    2256:	bf34      	ite	cc
    2258:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    225c:	2000      	movcs	r0, #0
}
    225e:	4770      	bx	lr
    2260:	00028868 	.word	0x00028868
    2264:	00028a20 	.word	0x00028a20

00002268 <log_backend_enable>:
{
    2268:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
    226a:	4c10      	ldr	r4, [pc, #64]	; (22ac <log_backend_enable+0x44>)
    226c:	1b04      	subs	r4, r0, r4
    226e:	1124      	asrs	r4, r4, #4
    2270:	3401      	adds	r4, #1
{
    2272:	4605      	mov	r5, r0
    2274:	460e      	mov	r6, r1
	log_backend_id_set(backend, id);
    2276:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
    2278:	b948      	cbnz	r0, 228e <log_backend_enable+0x26>
    227a:	490d      	ldr	r1, [pc, #52]	; (22b0 <log_backend_enable+0x48>)
    227c:	480d      	ldr	r0, [pc, #52]	; (22b4 <log_backend_enable+0x4c>)
    227e:	4a0e      	ldr	r2, [pc, #56]	; (22b8 <log_backend_enable+0x50>)
    2280:	23c0      	movs	r3, #192	; 0xc0
    2282:	f021 f822 	bl	232ca <printk>
    2286:	480c      	ldr	r0, [pc, #48]	; (22b8 <log_backend_enable+0x50>)
    2288:	21c0      	movs	r1, #192	; 0xc0
    228a:	f021 f861 	bl	23350 <assert_post_action>
	backend->cb->id = id;
    228e:	686b      	ldr	r3, [r5, #4]
    2290:	711c      	strb	r4, [r3, #4]
	if (!backend_attached) {
    2292:	4c0a      	ldr	r4, [pc, #40]	; (22bc <log_backend_enable+0x54>)
 */
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
    2294:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    2296:	2201      	movs	r2, #1
    2298:	715a      	strb	r2, [r3, #5]
    229a:	7822      	ldrb	r2, [r4, #0]
    229c:	b912      	cbnz	r2, 22a4 <log_backend_enable+0x3c>
    229e:	4808      	ldr	r0, [pc, #32]	; (22c0 <log_backend_enable+0x58>)
    22a0:	f01f fbfa 	bl	21a98 <z_impl_k_sem_give>
	backend_attached = true;
    22a4:	2301      	movs	r3, #1
    22a6:	7023      	strb	r3, [r4, #0]
}
    22a8:	bd70      	pop	{r4, r5, r6, pc}
    22aa:	bf00      	nop
    22ac:	00028a20 	.word	0x00028a20
    22b0:	000298b2 	.word	0x000298b2
    22b4:	000297e6 	.word	0x000297e6
    22b8:	00029885 	.word	0x00029885
    22bc:	20001d75 	.word	0x20001d75
    22c0:	2000749c 	.word	0x2000749c

000022c4 <log_init>:
{
    22c4:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    22c6:	4b18      	ldr	r3, [pc, #96]	; (2328 <log_init+0x64>)
    22c8:	4c18      	ldr	r4, [pc, #96]	; (232c <log_init+0x68>)
    22ca:	1ae4      	subs	r4, r4, r3
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    22cc:	2c90      	cmp	r4, #144	; 0x90
    22ce:	dd0b      	ble.n	22e8 <log_init+0x24>
    22d0:	4917      	ldr	r1, [pc, #92]	; (2330 <log_init+0x6c>)
    22d2:	4818      	ldr	r0, [pc, #96]	; (2334 <log_init+0x70>)
    22d4:	4a18      	ldr	r2, [pc, #96]	; (2338 <log_init+0x74>)
    22d6:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    22da:	f020 fff6 	bl	232ca <printk>
    22de:	4816      	ldr	r0, [pc, #88]	; (2338 <log_init+0x74>)
    22e0:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    22e4:	f021 f834 	bl	23350 <assert_post_action>
    22e8:	f3bf 8f5b 	dmb	ish
    22ec:	4b13      	ldr	r3, [pc, #76]	; (233c <log_init+0x78>)
    22ee:	e853 5f00 	ldrex	r5, [r3]
    22f2:	1c6a      	adds	r2, r5, #1
    22f4:	e843 2100 	strex	r1, r2, [r3]
    22f8:	2900      	cmp	r1, #0
    22fa:	d1f8      	bne.n	22ee <log_init+0x2a>
    22fc:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    2300:	b91d      	cbnz	r5, 230a <log_init+0x46>
    2302:	4e09      	ldr	r6, [pc, #36]	; (2328 <log_init+0x64>)
    2304:	1124      	asrs	r4, r4, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    2306:	42a5      	cmp	r5, r4
    2308:	db00      	blt.n	230c <log_init+0x48>
}
    230a:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    230c:	7b33      	ldrb	r3, [r6, #12]
    230e:	b143      	cbz	r3, 2322 <log_init+0x5e>
			if (backend->api->init != NULL) {
    2310:	6833      	ldr	r3, [r6, #0]
    2312:	695b      	ldr	r3, [r3, #20]
    2314:	b103      	cbz	r3, 2318 <log_init+0x54>
				backend->api->init();
    2316:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    2318:	2204      	movs	r2, #4
    231a:	2100      	movs	r1, #0
    231c:	4630      	mov	r0, r6
    231e:	f7ff ffa3 	bl	2268 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    2322:	3501      	adds	r5, #1
    2324:	3610      	adds	r6, #16
    2326:	e7ee      	b.n	2306 <log_init+0x42>
    2328:	00028a20 	.word	0x00028a20
    232c:	00028a40 	.word	0x00028a40
    2330:	000298c9 	.word	0x000298c9
    2334:	000297e6 	.word	0x000297e6
    2338:	00029840 	.word	0x00029840
    233c:	200001ec 	.word	0x200001ec

00002340 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    2340:	4b16      	ldr	r3, [pc, #88]	; (239c <log_strdup+0x5c>)
    2342:	4298      	cmp	r0, r3
{
    2344:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2346:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2348:	d302      	bcc.n	2350 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    234a:	4b15      	ldr	r3, [pc, #84]	; (23a0 <log_strdup+0x60>)
    234c:	4298      	cmp	r0, r3
    234e:	d31f      	bcc.n	2390 <log_strdup+0x50>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    2350:	4814      	ldr	r0, [pc, #80]	; (23a4 <log_strdup+0x64>)
    2352:	2200      	movs	r2, #0
    2354:	a901      	add	r1, sp, #4
    2356:	f01d fbd1 	bl	1fafc <k_mem_slab_alloc>
	if (err != 0) {
    235a:	4605      	mov	r5, r0
    235c:	b9d8      	cbnz	r0, 2396 <log_strdup+0x56>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    235e:	2201      	movs	r2, #1
    2360:	9b01      	ldr	r3, [sp, #4]
    2362:	f3bf 8f5b 	dmb	ish
    2366:	e853 1f00 	ldrex	r1, [r3]
    236a:	e843 2000 	strex	r0, r2, [r3]
    236e:	2800      	cmp	r0, #0
    2370:	d1f9      	bne.n	2366 <log_strdup+0x26>
    2372:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    2376:	9801      	ldr	r0, [sp, #4]
    2378:	4621      	mov	r1, r4
    237a:	221f      	movs	r2, #31
    237c:	3004      	adds	r0, #4
    237e:	f022 fe34 	bl	24fea <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    2382:	9c01      	ldr	r4, [sp, #4]
    2384:	237e      	movs	r3, #126	; 0x7e
    2386:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    238a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    238e:	3404      	adds	r4, #4
}
    2390:	4620      	mov	r0, r4
    2392:	b003      	add	sp, #12
    2394:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    2396:	4c04      	ldr	r4, [pc, #16]	; (23a8 <log_strdup+0x68>)
    2398:	e7fa      	b.n	2390 <log_strdup+0x50>
    239a:	bf00      	nop
    239c:	0002860c 	.word	0x0002860c
    23a0:	000301c0 	.word	0x000301c0
    23a4:	20000224 	.word	0x20000224
    23a8:	000298ec 	.word	0x000298ec

000023ac <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    23ac:	b148      	cbz	r0, 23c2 <log_is_strdup+0x16>
    23ae:	4b05      	ldr	r3, [pc, #20]	; (23c4 <log_is_strdup+0x18>)
    23b0:	4298      	cmp	r0, r3
    23b2:	d305      	bcc.n	23c0 <log_is_strdup+0x14>
    23b4:	33a0      	adds	r3, #160	; 0xa0
    23b6:	4298      	cmp	r0, r3
    23b8:	bf2c      	ite	cs
    23ba:	2000      	movcs	r0, #0
    23bc:	2001      	movcc	r0, #1
    23be:	4770      	bx	lr
    23c0:	2000      	movs	r0, #0
}
    23c2:	4770      	bx	lr
    23c4:	20005394 	.word	0x20005394

000023c8 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    23c8:	4b4e      	ldr	r3, [pc, #312]	; (2504 <z_impl_log_process+0x13c>)
    23ca:	781b      	ldrb	r3, [r3, #0]
{
    23cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23d0:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    23d2:	b903      	cbnz	r3, 23d6 <z_impl_log_process+0xe>
    23d4:	b360      	cbz	r0, 2430 <z_impl_log_process+0x68>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    23d6:	f04f 0320 	mov.w	r3, #32
    23da:	f3ef 8611 	mrs	r6, BASEPRI
    23de:	f383 8811 	msr	BASEPRI, r3
    23e2:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    23e6:	4848      	ldr	r0, [pc, #288]	; (2508 <z_impl_log_process+0x140>)
    23e8:	f020 ffca 	bl	23380 <log_list_head_get>
    23ec:	4605      	mov	r5, r0
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    23ee:	f386 8811 	msr	BASEPRI, r6
    23f2:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    23f6:	b178      	cbz	r0, 2418 <z_impl_log_process+0x50>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    23f8:	f3bf 8f5b 	dmb	ish
    23fc:	4b43      	ldr	r3, [pc, #268]	; (250c <z_impl_log_process+0x144>)
    23fe:	e853 2f00 	ldrex	r2, [r3]
    2402:	3a01      	subs	r2, #1
    2404:	e843 2100 	strex	r1, r2, [r3]
    2408:	2900      	cmp	r1, #0
    240a:	d1f8      	bne.n	23fe <z_impl_log_process+0x36>
    240c:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    2410:	b194      	cbz	r4, 2438 <z_impl_log_process+0x70>
	log_msg_put(msg);
    2412:	4628      	mov	r0, r5
    2414:	f021 f8ae 	bl	23574 <log_msg_put>
	if (!bypass && dropped_cnt) {
    2418:	b924      	cbnz	r4, 2424 <z_impl_log_process+0x5c>
    241a:	4b3d      	ldr	r3, [pc, #244]	; (2510 <z_impl_log_process+0x148>)
    241c:	681b      	ldr	r3, [r3, #0]
    241e:	b10b      	cbz	r3, 2424 <z_impl_log_process+0x5c>
		dropped_notify();
    2420:	f7ff fedc 	bl	21dc <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    2424:	4838      	ldr	r0, [pc, #224]	; (2508 <z_impl_log_process+0x140>)
    2426:	f020 ffa9 	bl	2337c <log_list_head_peek>
    242a:	1e04      	subs	r4, r0, #0
    242c:	bf18      	it	ne
    242e:	2401      	movne	r4, #1
}
    2430:	4620      	mov	r0, r4
    2432:	b003      	add	sp, #12
    2434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    2438:	4b36      	ldr	r3, [pc, #216]	; (2514 <z_impl_log_process+0x14c>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    243a:	781b      	ldrb	r3, [r3, #0]
    243c:	b9b3      	cbnz	r3, 246c <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    243e:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    2440:	07db      	lsls	r3, r3, #31
    2442:	d413      	bmi.n	246c <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
    2444:	f021 f8a9 	bl	2359a <log_msg_str_get>
    2448:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    244a:	4628      	mov	r0, r5
    244c:	f021 f870 	bl	23530 <log_msg_nargs_get>
    2450:	4601      	mov	r1, r0
    2452:	4648      	mov	r0, r9
    2454:	f7ff fe6e 	bl	2134 <z_log_get_s_mask>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    2458:	4a2f      	ldr	r2, [pc, #188]	; (2518 <z_impl_log_process+0x150>)
    245a:	4b30      	ldr	r3, [pc, #192]	; (251c <z_impl_log_process+0x154>)
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
    245c:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 2540 <z_impl_log_process+0x178>
    2460:	9201      	str	r2, [sp, #4]
    2462:	1a9b      	subs	r3, r3, r2
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    2464:	4607      	mov	r7, r0
    2466:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	while (mask) {
    246a:	b937      	cbnz	r7, 247a <z_impl_log_process+0xb2>
    246c:	4e2c      	ldr	r6, [pc, #176]	; (2520 <z_impl_log_process+0x158>)
    246e:	4f2d      	ldr	r7, [pc, #180]	; (2524 <z_impl_log_process+0x15c>)
    2470:	1bbf      	subs	r7, r7, r6
    2472:	113f      	asrs	r7, r7, #4
    2474:	f04f 0800 	mov.w	r8, #0
    2478:	e041      	b.n	24fe <z_impl_log_process+0x136>
		idx = 31 - __builtin_clz(mask);
    247a:	fab7 f887 	clz	r8, r7
    247e:	f1c8 081f 	rsb	r8, r8, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    2482:	4641      	mov	r1, r8
    2484:	4628      	mov	r0, r5
    2486:	f021 f856 	bl	23536 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    248a:	4b27      	ldr	r3, [pc, #156]	; (2528 <z_impl_log_process+0x160>)
    248c:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    248e:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2490:	d302      	bcc.n	2498 <z_impl_log_process+0xd0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    2492:	4b26      	ldr	r3, [pc, #152]	; (252c <z_impl_log_process+0x164>)
    2494:	4298      	cmp	r0, r3
    2496:	d320      	bcc.n	24da <z_impl_log_process+0x112>
    2498:	4610      	mov	r0, r2
    249a:	f7ff ff87 	bl	23ac <log_is_strdup>
    249e:	4606      	mov	r6, r0
    24a0:	b9d8      	cbnz	r0, 24da <z_impl_log_process+0x112>
    24a2:	4b23      	ldr	r3, [pc, #140]	; (2530 <z_impl_log_process+0x168>)
    24a4:	429a      	cmp	r2, r3
    24a6:	d018      	beq.n	24da <z_impl_log_process+0x112>
	return msg->hdr.ids.source_id;
    24a8:	896b      	ldrh	r3, [r5, #10]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
    24aa:	4922      	ldr	r1, [pc, #136]	; (2534 <z_impl_log_process+0x16c>)
    24ac:	4822      	ldr	r0, [pc, #136]	; (2538 <z_impl_log_process+0x170>)
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    24ae:	ebbb 1f93 	cmp.w	fp, r3, lsr #6
    24b2:	ea4f 1293 	mov.w	r2, r3, lsr #6
	return __log_const_start[source_id].name;
    24b6:	bf84      	itt	hi
    24b8:	9b01      	ldrhi	r3, [sp, #4]
    24ba:	f853 6032 	ldrhi.w	r6, [r3, r2, lsl #3]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
    24be:	23ad      	movs	r3, #173	; 0xad
    24c0:	4652      	mov	r2, sl
    24c2:	f020 ff02 	bl	232ca <printk>
    24c6:	481d      	ldr	r0, [pc, #116]	; (253c <z_impl_log_process+0x174>)
    24c8:	4641      	mov	r1, r8
    24ca:	464b      	mov	r3, r9
    24cc:	4632      	mov	r2, r6
    24ce:	f020 fefc 	bl	232ca <printk>
    24d2:	21ad      	movs	r1, #173	; 0xad
    24d4:	4650      	mov	r0, sl
    24d6:	f020 ff3b 	bl	23350 <assert_post_action>
		mask &= ~BIT(idx);
    24da:	2301      	movs	r3, #1
    24dc:	fa03 f808 	lsl.w	r8, r3, r8
    24e0:	ea27 0708 	bic.w	r7, r7, r8
    24e4:	e7c1      	b.n	246a <z_impl_log_process+0xa2>
			if (log_backend_is_active(backend) &&
    24e6:	4630      	mov	r0, r6
    24e8:	f020 ff50 	bl	2338c <log_backend_is_active>
    24ec:	b120      	cbz	r0, 24f8 <z_impl_log_process+0x130>
	backend->api->put(backend, msg);
    24ee:	6833      	ldr	r3, [r6, #0]
    24f0:	4629      	mov	r1, r5
    24f2:	681b      	ldr	r3, [r3, #0]
    24f4:	4630      	mov	r0, r6
    24f6:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    24f8:	f108 0801 	add.w	r8, r8, #1
    24fc:	3610      	adds	r6, #16
    24fe:	45b8      	cmp	r8, r7
    2500:	dbf1      	blt.n	24e6 <z_impl_log_process+0x11e>
    2502:	e786      	b.n	2412 <z_impl_log_process+0x4a>
    2504:	20001d75 	.word	0x20001d75
    2508:	200001f0 	.word	0x200001f0
    250c:	200001e4 	.word	0x200001e4
    2510:	200001e8 	.word	0x200001e8
    2514:	20001d76 	.word	0x20001d76
    2518:	00028868 	.word	0x00028868
    251c:	00028a20 	.word	0x00028a20
    2520:	00028a20 	.word	0x00028a20
    2524:	00028a40 	.word	0x00028a40
    2528:	0002860c 	.word	0x0002860c
    252c:	000301c0 	.word	0x000301c0
    2530:	000298ec 	.word	0x000298ec
    2534:	0002d2c6 	.word	0x0002d2c6
    2538:	000297e6 	.word	0x000297e6
    253c:	00029906 	.word	0x00029906
    2540:	00029840 	.word	0x00029840

00002544 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    2544:	4b26      	ldr	r3, [pc, #152]	; (25e0 <msg_finalize+0x9c>)
{
    2546:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    2548:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    254a:	8141      	strh	r1, [r0, #10]
{
    254c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    254e:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2550:	4d24      	ldr	r5, [pc, #144]	; (25e4 <msg_finalize+0xa0>)
    2552:	60e0      	str	r0, [r4, #12]
    2554:	f3bf 8f5b 	dmb	ish
    2558:	e855 3f00 	ldrex	r3, [r5]
    255c:	3301      	adds	r3, #1
    255e:	e845 3200 	strex	r2, r3, [r5]
    2562:	2a00      	cmp	r2, #0
    2564:	d1f8      	bne.n	2558 <msg_finalize+0x14>
    2566:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    256a:	f04f 0320 	mov.w	r3, #32
    256e:	f3ef 8611 	mrs	r6, BASEPRI
    2572:	f383 8811 	msr	BASEPRI, r3
    2576:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    257a:	481b      	ldr	r0, [pc, #108]	; (25e8 <msg_finalize+0xa4>)
    257c:	4621      	mov	r1, r4
    257e:	f020 fef3 	bl	23368 <log_list_add_tail>
	__asm__ volatile(
    2582:	f386 8811 	msr	BASEPRI, r6
    2586:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    258a:	4b18      	ldr	r3, [pc, #96]	; (25ec <msg_finalize+0xa8>)
    258c:	781a      	ldrb	r2, [r3, #0]
    258e:	b17a      	cbz	r2, 25b0 <msg_finalize+0x6c>
	__asm__ volatile(
    2590:	f04f 0320 	mov.w	r3, #32
    2594:	f3ef 8411 	mrs	r4, BASEPRI
    2598:	f383 8811 	msr	BASEPRI, r3
    259c:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    25a0:	2000      	movs	r0, #0
    25a2:	f7ff ff11 	bl	23c8 <z_impl_log_process>
	__asm__ volatile(
    25a6:	f384 8811 	msr	BASEPRI, r4
    25aa:	f3bf 8f6f 	isb	sy
}
    25ae:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    25b0:	490f      	ldr	r1, [pc, #60]	; (25f0 <msg_finalize+0xac>)
    25b2:	682b      	ldr	r3, [r5, #0]
    25b4:	6809      	ldr	r1, [r1, #0]
    25b6:	2900      	cmp	r1, #0
    25b8:	d0f9      	beq.n	25ae <msg_finalize+0x6a>
    25ba:	2b01      	cmp	r3, #1
    25bc:	d106      	bne.n	25cc <msg_finalize+0x88>
	z_impl_k_timer_start(timer, duration, period);
    25be:	480d      	ldr	r0, [pc, #52]	; (25f4 <msg_finalize+0xb0>)
}
    25c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    25c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    25c8:	f020 b8ee 	b.w	227a8 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    25cc:	2b0a      	cmp	r3, #10
    25ce:	d1ee      	bne.n	25ae <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    25d0:	4808      	ldr	r0, [pc, #32]	; (25f4 <msg_finalize+0xb0>)
    25d2:	f025 ff9a 	bl	2850a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    25d6:	4808      	ldr	r0, [pc, #32]	; (25f8 <msg_finalize+0xb4>)
}
    25d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    25dc:	f01f ba5c 	b.w	21a98 <z_impl_k_sem_give>
    25e0:	20006a08 	.word	0x20006a08
    25e4:	200001e4 	.word	0x200001e4
    25e8:	200001f0 	.word	0x200001f0
    25ec:	20001d76 	.word	0x20001d76
    25f0:	200002d4 	.word	0x200002d4
    25f4:	200001f8 	.word	0x200001f8
    25f8:	2000749c 	.word	0x2000749c

000025fc <log_process_thread_func>:
{
    25fc:	b508      	push	{r3, lr}
	return __log_backends_end - __log_backends_start;
    25fe:	4a15      	ldr	r2, [pc, #84]	; (2654 <log_process_thread_func+0x58>)
    2600:	4b15      	ldr	r3, [pc, #84]	; (2658 <log_process_thread_func+0x5c>)
    2602:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    2604:	2b00      	cmp	r3, #0
    2606:	dc0b      	bgt.n	2620 <log_process_thread_func+0x24>
    2608:	4914      	ldr	r1, [pc, #80]	; (265c <log_process_thread_func+0x60>)
    260a:	4815      	ldr	r0, [pc, #84]	; (2660 <log_process_thread_func+0x64>)
    260c:	4a15      	ldr	r2, [pc, #84]	; (2664 <log_process_thread_func+0x68>)
    260e:	f240 437f 	movw	r3, #1151	; 0x47f
    2612:	f020 fe5a 	bl	232ca <printk>
    2616:	4813      	ldr	r0, [pc, #76]	; (2664 <log_process_thread_func+0x68>)
    2618:	f240 417f 	movw	r1, #1151	; 0x47f
    261c:	f020 fe98 	bl	23350 <assert_post_action>
	log_init();
    2620:	f7ff fe50 	bl	22c4 <log_init>
	return z_impl_k_current_get();
    2624:	f01f fa32 	bl	21a8c <z_impl_k_current_get>
	proc_tid = process_tid;
    2628:	4b0f      	ldr	r3, [pc, #60]	; (2668 <log_process_thread_func+0x6c>)
    262a:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    262c:	b130      	cbz	r0, 263c <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    262e:	4b0f      	ldr	r3, [pc, #60]	; (266c <log_process_thread_func+0x70>)
	    process_tid &&
    2630:	681b      	ldr	r3, [r3, #0]
    2632:	2b09      	cmp	r3, #9
    2634:	dd02      	ble.n	263c <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
    2636:	480e      	ldr	r0, [pc, #56]	; (2670 <log_process_thread_func+0x74>)
    2638:	f01f fa2e 	bl	21a98 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    263c:	4c0c      	ldr	r4, [pc, #48]	; (2670 <log_process_thread_func+0x74>)
    263e:	2000      	movs	r0, #0
    2640:	f7ff fec2 	bl	23c8 <z_impl_log_process>
		if (log_process(false) == false) {
    2644:	2800      	cmp	r0, #0
    2646:	d1fa      	bne.n	263e <log_process_thread_func+0x42>
    2648:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    264c:	4620      	mov	r0, r4
    264e:	f01f fa67 	bl	21b20 <z_impl_k_sem_take>
    2652:	e7f4      	b.n	263e <log_process_thread_func+0x42>
    2654:	00028a20 	.word	0x00028a20
    2658:	00028a40 	.word	0x00028a40
    265c:	00029947 	.word	0x00029947
    2660:	000297e6 	.word	0x000297e6
    2664:	00029840 	.word	0x00029840
    2668:	200002d4 	.word	0x200002d4
    266c:	200001e4 	.word	0x200001e4
    2670:	2000749c 	.word	0x2000749c

00002674 <z_impl_log_panic>:
{
    2674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    2676:	4f0f      	ldr	r7, [pc, #60]	; (26b4 <z_impl_log_panic+0x40>)
    2678:	783d      	ldrb	r5, [r7, #0]
    267a:	b975      	cbnz	r5, 269a <z_impl_log_panic+0x26>
    267c:	4c0e      	ldr	r4, [pc, #56]	; (26b8 <z_impl_log_panic+0x44>)
    267e:	4e0f      	ldr	r6, [pc, #60]	; (26bc <z_impl_log_panic+0x48>)
	log_init();
    2680:	f7ff fe20 	bl	22c4 <log_init>
    2684:	1b36      	subs	r6, r6, r4
    2686:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2688:	42b5      	cmp	r5, r6
    268a:	db07      	blt.n	269c <z_impl_log_panic+0x28>
    268c:	2000      	movs	r0, #0
    268e:	f7ff fe9b 	bl	23c8 <z_impl_log_process>
		while (log_process(false) == true) {
    2692:	2800      	cmp	r0, #0
    2694:	d1fa      	bne.n	268c <z_impl_log_panic+0x18>
	panic_mode = true;
    2696:	2301      	movs	r3, #1
    2698:	703b      	strb	r3, [r7, #0]
}
    269a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
    269c:	4620      	mov	r0, r4
    269e:	f020 fe75 	bl	2338c <log_backend_is_active>
    26a2:	b118      	cbz	r0, 26ac <z_impl_log_panic+0x38>
	backend->api->panic(backend);
    26a4:	6823      	ldr	r3, [r4, #0]
    26a6:	4620      	mov	r0, r4
    26a8:	691b      	ldr	r3, [r3, #16]
    26aa:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    26ac:	3501      	adds	r5, #1
    26ae:	3410      	adds	r4, #16
    26b0:	e7ea      	b.n	2688 <z_impl_log_panic+0x14>
    26b2:	bf00      	nop
    26b4:	20001d76 	.word	0x20001d76
    26b8:	00028a20 	.word	0x00028a20
    26bc:	00028a40 	.word	0x00028a40

000026c0 <log_free>:
{
    26c0:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    26c2:	3804      	subs	r0, #4
    26c4:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    26c6:	f3bf 8f5b 	dmb	ish
    26ca:	e850 3f00 	ldrex	r3, [r0]
    26ce:	1e5a      	subs	r2, r3, #1
    26d0:	e840 2100 	strex	r1, r2, [r0]
    26d4:	2900      	cmp	r1, #0
    26d6:	d1f8      	bne.n	26ca <log_free+0xa>
    26d8:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    26dc:	2b01      	cmp	r3, #1
    26de:	d103      	bne.n	26e8 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    26e0:	4803      	ldr	r0, [pc, #12]	; (26f0 <log_free+0x30>)
    26e2:	a901      	add	r1, sp, #4
    26e4:	f01d fa6e 	bl	1fbc4 <k_mem_slab_free>
}
    26e8:	b003      	add	sp, #12
    26ea:	f85d fb04 	ldr.w	pc, [sp], #4
    26ee:	bf00      	nop
    26f0:	20000224 	.word	0x20000224

000026f4 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    26f4:	2320      	movs	r3, #32
    26f6:	4902      	ldr	r1, [pc, #8]	; (2700 <log_msg_pool_init+0xc>)
    26f8:	4802      	ldr	r0, [pc, #8]	; (2704 <log_msg_pool_init+0x10>)
    26fa:	461a      	mov	r2, r3
    26fc:	f025 bda0 	b.w	28240 <k_mem_slab_init>
    2700:	20005434 	.word	0x20005434
    2704:	200002d8 	.word	0x200002d8

00002708 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    2708:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    270a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    270c:	4d09      	ldr	r5, [pc, #36]	; (2734 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    270e:	9301      	str	r3, [sp, #4]
    2710:	2001      	movs	r0, #1
    2712:	f7ff fe59 	bl	23c8 <z_impl_log_process>
    2716:	4604      	mov	r4, r0
			log_dropped();
    2718:	f7ff fd88 	bl	222c <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    271c:	2200      	movs	r2, #0
    271e:	a901      	add	r1, sp, #4
    2720:	4628      	mov	r0, r5
    2722:	f01d f9eb 	bl	1fafc <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    2726:	b108      	cbz	r0, 272c <log_msg_no_space_handle+0x24>
    2728:	2c00      	cmp	r4, #0
    272a:	d1f1      	bne.n	2710 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    272c:	9801      	ldr	r0, [sp, #4]
    272e:	b003      	add	sp, #12
    2730:	bd30      	pop	{r4, r5, pc}
    2732:	bf00      	nop
    2734:	200002d8 	.word	0x200002d8

00002738 <log_msg_chunk_alloc>:
{
    2738:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    273a:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    273c:	4806      	ldr	r0, [pc, #24]	; (2758 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    273e:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    2740:	a901      	add	r1, sp, #4
    2742:	f01d f9db 	bl	1fafc <k_mem_slab_alloc>
	if (err != 0) {
    2746:	b110      	cbz	r0, 274e <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    2748:	f7ff ffde 	bl	2708 <log_msg_no_space_handle>
    274c:	9001      	str	r0, [sp, #4]
}
    274e:	9801      	ldr	r0, [sp, #4]
    2750:	b003      	add	sp, #12
    2752:	f85d fb04 	ldr.w	pc, [sp], #4
    2756:	bf00      	nop
    2758:	200002d8 	.word	0x200002d8

0000275c <msg_free>:
{
    275c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    275e:	7a03      	ldrb	r3, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    2760:	7a46      	ldrb	r6, [r0, #9]
{
    2762:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    2764:	07d9      	lsls	r1, r3, #31
{
    2766:	9001      	str	r0, [sp, #4]
	return msg->hdr.params.std.nargs;
    2768:	ea4f 1616 	mov.w	r6, r6, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    276c:	d50e      	bpl.n	278c <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
    276e:	9b01      	ldr	r3, [sp, #4]
    2770:	7a1a      	ldrb	r2, [r3, #8]
    2772:	0792      	lsls	r2, r2, #30
    2774:	d504      	bpl.n	2780 <msg_free+0x24>
		cont_free(msg->payload.ext.next);
    2776:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2778:	4c18      	ldr	r4, [pc, #96]	; (27dc <msg_free+0x80>)
    277a:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    277c:	9b03      	ldr	r3, [sp, #12]
    277e:	bb33      	cbnz	r3, 27ce <msg_free+0x72>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    2780:	4816      	ldr	r0, [pc, #88]	; (27dc <msg_free+0x80>)
    2782:	a901      	add	r1, sp, #4
    2784:	f01d fa1e 	bl	1fbc4 <k_mem_slab_free>
}
    2788:	b005      	add	sp, #20
    278a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (log_msg_is_std(msg) && nargs) {
    278c:	2e00      	cmp	r6, #0
    278e:	d0ee      	beq.n	276e <msg_free+0x12>
		u32_t smask = 0;
    2790:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    2792:	4625      	mov	r5, r4
    2794:	e017      	b.n	27c6 <msg_free+0x6a>
			void *buf = (void *)log_msg_arg_get(msg, i);
    2796:	4629      	mov	r1, r5
    2798:	f020 fecd 	bl	23536 <log_msg_arg_get>
    279c:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    279e:	f7ff fe05 	bl	23ac <log_is_strdup>
    27a2:	b178      	cbz	r0, 27c4 <msg_free+0x68>
				if (smask == 0) {
    27a4:	b93c      	cbnz	r4, 27b6 <msg_free+0x5a>
					smask = z_log_get_s_mask(
    27a6:	9b01      	ldr	r3, [sp, #4]
    27a8:	4631      	mov	r1, r6
    27aa:	6918      	ldr	r0, [r3, #16]
    27ac:	f7ff fcc2 	bl	2134 <z_log_get_s_mask>
					if (smask == 0) {
    27b0:	4604      	mov	r4, r0
    27b2:	2800      	cmp	r0, #0
    27b4:	d0db      	beq.n	276e <msg_free+0x12>
				if (smask & BIT(i)) {
    27b6:	fa24 f305 	lsr.w	r3, r4, r5
    27ba:	07db      	lsls	r3, r3, #31
    27bc:	d502      	bpl.n	27c4 <msg_free+0x68>
					log_free(buf);
    27be:	4638      	mov	r0, r7
    27c0:	f7ff ff7e 	bl	26c0 <log_free>
		for (i = 0; i < nargs; i++) {
    27c4:	3501      	adds	r5, #1
    27c6:	42ae      	cmp	r6, r5
    27c8:	9801      	ldr	r0, [sp, #4]
    27ca:	d8e4      	bhi.n	2796 <msg_free+0x3a>
    27cc:	e7cf      	b.n	276e <msg_free+0x12>
		next = cont->next;
    27ce:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    27d0:	a903      	add	r1, sp, #12
    27d2:	4620      	mov	r0, r4
    27d4:	f01d f9f6 	bl	1fbc4 <k_mem_slab_free>
		cont = next;
    27d8:	9503      	str	r5, [sp, #12]
    27da:	e7cf      	b.n	277c <msg_free+0x20>
    27dc:	200002d8 	.word	0x200002d8

000027e0 <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, u32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
    27e0:	2a0e      	cmp	r2, #14
{
    27e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27e6:	4681      	mov	r9, r0
    27e8:	4688      	mov	r8, r1
    27ea:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
    27ec:	d90b      	bls.n	2806 <log_msg_create_n+0x26>
    27ee:	492d      	ldr	r1, [pc, #180]	; (28a4 <log_msg_create_n+0xc4>)
    27f0:	482d      	ldr	r0, [pc, #180]	; (28a8 <log_msg_create_n+0xc8>)
    27f2:	4a2e      	ldr	r2, [pc, #184]	; (28ac <log_msg_create_n+0xcc>)
    27f4:	f44f 739b 	mov.w	r3, #310	; 0x136
    27f8:	f020 fd67 	bl	232ca <printk>
    27fc:	482b      	ldr	r0, [pc, #172]	; (28ac <log_msg_create_n+0xcc>)
    27fe:	f44f 719b 	mov.w	r1, #310	; 0x136
    2802:	f020 fda5 	bl	23350 <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    2806:	f7ff ff97 	bl	2738 <log_msg_chunk_alloc>

	if (msg != NULL) {
    280a:	4604      	mov	r4, r0
    280c:	b330      	cbz	r0, 285c <log_msg_create_n+0x7c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    280e:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
    2810:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    2812:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
    2814:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    2816:	8107      	strh	r7, [r0, #8]
    2818:	d909      	bls.n	282e <log_msg_create_n+0x4e>
	msg->hdr.params.generic.ext = 1;
    281a:	2202      	movs	r2, #2
    281c:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
    281e:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
    2822:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
    2826:	6147      	str	r7, [r0, #20]
	while (n > 0) {
    2828:	f1ba 0f00 	cmp.w	sl, #0
    282c:	dc0e      	bgt.n	284c <log_msg_create_n+0x6c>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
    282e:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
    2830:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
    2834:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    2838:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
    283a:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    283c:	d818      	bhi.n	2870 <log_msg_create_n+0x90>
		(void)memcpy(msg->payload.single.args, args,
    283e:	00aa      	lsls	r2, r5, #2
    2840:	4641      	mov	r1, r8
    2842:	f104 0014 	add.w	r0, r4, #20
    2846:	f022 fc23 	bl	25090 <memcpy>
	while (nargs != 0U) {
    284a:	e007      	b.n	285c <log_msg_create_n+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    284c:	f7ff ff74 	bl	2738 <log_msg_chunk_alloc>
		if (cont == NULL) {
    2850:	4606      	mov	r6, r0
    2852:	b930      	cbnz	r0, 2862 <log_msg_create_n+0x82>
			msg_free(msg);
    2854:	4620      	mov	r0, r4
    2856:	f7ff ff81 	bl	275c <msg_free>
			return NULL;
    285a:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
    285c:	4620      	mov	r0, r4
    285e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
    2862:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
    2866:	f1aa 0a07 	sub.w	sl, sl, #7
    286a:	6007      	str	r7, [r0, #0]
		next = &cont->next;
    286c:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
    286e:	e7db      	b.n	2828 <log_msg_create_n+0x48>
		(void)memcpy(msg->payload.ext.data.args, args,
    2870:	4641      	mov	r1, r8
    2872:	2208      	movs	r2, #8
    2874:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
    2878:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
    287a:	f022 fc09 	bl	25090 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
    287e:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
    2880:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
    2884:	2d07      	cmp	r5, #7
    2886:	462e      	mov	r6, r5
    2888:	bf28      	it	cs
    288a:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
    288c:	ea4f 0986 	mov.w	r9, r6, lsl #2
    2890:	4641      	mov	r1, r8
    2892:	1d38      	adds	r0, r7, #4
    2894:	464a      	mov	r2, r9
    2896:	f022 fbfb 	bl	25090 <memcpy>
	while (nargs != 0U) {
    289a:	1bad      	subs	r5, r5, r6
		cont = cont->next;
    289c:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
    289e:	44c8      	add	r8, r9
	while (nargs != 0U) {
    28a0:	d1f0      	bne.n	2884 <log_msg_create_n+0xa4>
    28a2:	e7db      	b.n	285c <log_msg_create_n+0x7c>
    28a4:	00029993 	.word	0x00029993
    28a8:	000297e6 	.word	0x000297e6
    28ac:	00029967 	.word	0x00029967

000028b0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    28b0:	b40e      	push	{r1, r2, r3}
    28b2:	b503      	push	{r0, r1, lr}
    28b4:	ab03      	add	r3, sp, #12
    28b6:	4601      	mov	r1, r0
    28b8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    28bc:	4804      	ldr	r0, [pc, #16]	; (28d0 <print_formatted+0x20>)
	va_start(args, fmt);
    28be:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    28c0:	f7ff fa52 	bl	1d68 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    28c4:	2000      	movs	r0, #0
    28c6:	b002      	add	sp, #8
    28c8:	f85d eb04 	ldr.w	lr, [sp], #4
    28cc:	b003      	add	sp, #12
    28ce:	4770      	bx	lr
    28d0:	00002b09 	.word	0x00002b09

000028d4 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    28d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28d8:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    28da:	f011 0402 	ands.w	r4, r1, #2
{
    28de:	4690      	mov	r8, r2
    28e0:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    28e4:	4606      	mov	r6, r0
    28e6:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    28e8:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    28ec:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    28f0:	d007      	beq.n	2902 <prefix_print+0x2e>
	if (!format) {
    28f2:	f011 0f44 	tst.w	r1, #68	; 0x44
    28f6:	d137      	bne.n	2968 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    28f8:	4932      	ldr	r1, [pc, #200]	; (29c4 <prefix_print+0xf0>)
    28fa:	f7ff ffd9 	bl	28b0 <print_formatted>
			length = print_formatted(log_output,
    28fe:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    2900:	460c      	mov	r4, r1
	if (color) {
    2902:	f1b9 0f00 	cmp.w	r9, #0
    2906:	d00a      	beq.n	291e <prefix_print+0x4a>
		const char *color = start && (colors[level] != NULL) ?
    2908:	4b2f      	ldr	r3, [pc, #188]	; (29c8 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    290a:	4930      	ldr	r1, [pc, #192]	; (29cc <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    290c:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    2910:	4b2f      	ldr	r3, [pc, #188]	; (29d0 <prefix_print+0xfc>)
    2912:	4630      	mov	r0, r6
    2914:	2a00      	cmp	r2, #0
    2916:	bf08      	it	eq
    2918:	461a      	moveq	r2, r3
    291a:	f7ff ffc9 	bl	28b0 <print_formatted>
	if (level_on) {
    291e:	b13d      	cbz	r5, 2930 <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    2920:	4b2c      	ldr	r3, [pc, #176]	; (29d4 <prefix_print+0x100>)
    2922:	492d      	ldr	r1, [pc, #180]	; (29d8 <prefix_print+0x104>)
    2924:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    2928:	4630      	mov	r0, r6
    292a:	f7ff ffc1 	bl	28b0 <print_formatted>
    292e:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    2930:	f1b8 0f00 	cmp.w	r8, #0
    2934:	d043      	beq.n	29be <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    2936:	2301      	movs	r3, #1
    2938:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    293c:	4b27      	ldr	r3, [pc, #156]	; (29dc <prefix_print+0x108>)
    293e:	f017 0f10 	tst.w	r7, #16
    2942:	4f27      	ldr	r7, [pc, #156]	; (29e0 <prefix_print+0x10c>)
    2944:	bf18      	it	ne
    2946:	461f      	movne	r7, r3
    2948:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    294c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2950:	f7ff fc7c 	bl	224c <log_source_name_get>
    2954:	4639      	mov	r1, r7
    2956:	4602      	mov	r2, r0
    2958:	4630      	mov	r0, r6
    295a:	f7ff ffa9 	bl	28b0 <print_formatted>
    295e:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    2960:	4420      	add	r0, r4
    2962:	b005      	add	sp, #20
    2964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    2968:	4b1e      	ldr	r3, [pc, #120]	; (29e4 <prefix_print+0x110>)
    296a:	6819      	ldr	r1, [r3, #0]
    296c:	2900      	cmp	r1, #0
    296e:	d0c7      	beq.n	2900 <prefix_print+0x2c>
		timestamp /= timestamp_div;
    2970:	4b1d      	ldr	r3, [pc, #116]	; (29e8 <prefix_print+0x114>)
    2972:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    2976:	681b      	ldr	r3, [r3, #0]
    2978:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    297c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    2980:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    2984:	fbb4 f2fe 	udiv	r2, r4, lr
    2988:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    298c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    2990:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    2994:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2998:	fbb4 fbf1 	udiv	fp, r4, r1
    299c:	fb01 441b 	mls	r4, r1, fp, r4
    29a0:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    29a4:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    29a8:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    29ac:	e9cd b101 	strd	fp, r1, [sp, #4]
    29b0:	fb0a e113 	mls	r1, sl, r3, lr
    29b4:	9100      	str	r1, [sp, #0]
    29b6:	490d      	ldr	r1, [pc, #52]	; (29ec <prefix_print+0x118>)
    29b8:	f7ff ff7a 	bl	28b0 <print_formatted>
    29bc:	e79f      	b.n	28fe <prefix_print+0x2a>
	total += print_formatted(log_output,
    29be:	4f08      	ldr	r7, [pc, #32]	; (29e0 <prefix_print+0x10c>)
    29c0:	e7c2      	b.n	2948 <prefix_print+0x74>
    29c2:	bf00      	nop
    29c4:	000299ac 	.word	0x000299ac
    29c8:	00028b60 	.word	0x00028b60
    29cc:	0002e3d1 	.word	0x0002e3d1
    29d0:	0002999e 	.word	0x0002999e
    29d4:	00028b74 	.word	0x00028b74
    29d8:	000299d1 	.word	0x000299d1
    29dc:	000299a8 	.word	0x000299a8
    29e0:	000299a3 	.word	0x000299a3
    29e4:	200002f4 	.word	0x200002f4
    29e8:	200002f8 	.word	0x200002f8
    29ec:	000299b5 	.word	0x000299b5

000029f0 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    29f0:	b538      	push	{r3, r4, r5, lr}
    29f2:	460c      	mov	r4, r1
	if (color) {
    29f4:	07e1      	lsls	r1, r4, #31
{
    29f6:	4605      	mov	r5, r0
	if (color) {
    29f8:	d503      	bpl.n	2a02 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    29fa:	4a08      	ldr	r2, [pc, #32]	; (2a1c <postfix_print+0x2c>)
    29fc:	4908      	ldr	r1, [pc, #32]	; (2a20 <postfix_print+0x30>)
    29fe:	f7ff ff57 	bl	28b0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2a02:	06e2      	lsls	r2, r4, #27
    2a04:	d408      	bmi.n	2a18 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2a06:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    2a08:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    2a0a:	bf4c      	ite	mi
    2a0c:	4905      	ldrmi	r1, [pc, #20]	; (2a24 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    2a0e:	4906      	ldrpl	r1, [pc, #24]	; (2a28 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    2a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    2a14:	f7ff bf4c 	b.w	28b0 <print_formatted>
}
    2a18:	bd38      	pop	{r3, r4, r5, pc}
    2a1a:	bf00      	nop
    2a1c:	0002999e 	.word	0x0002999e
    2a20:	0002e3d1 	.word	0x0002e3d1
    2a24:	0002f76b 	.word	0x0002f76b
    2a28:	000299d7 	.word	0x000299d7

00002a2c <hexdump_line_print>:
{
    2a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a30:	461d      	mov	r5, r3
    2a32:	9b08      	ldr	r3, [sp, #32]
    2a34:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2a36:	06da      	lsls	r2, r3, #27
{
    2a38:	4604      	mov	r4, r0
    2a3a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2a3c:	d405      	bmi.n	2a4a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2a3e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    2a40:	bf4c      	ite	mi
    2a42:	492a      	ldrmi	r1, [pc, #168]	; (2aec <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    2a44:	492a      	ldrpl	r1, [pc, #168]	; (2af0 <hexdump_line_print+0xc4>)
    2a46:	f7ff ff33 	bl	28b0 <print_formatted>
		print_formatted(log_output, " ");
    2a4a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 2af8 <hexdump_line_print+0xcc>
{
    2a4e:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    2a52:	45a8      	cmp	r8, r5
    2a54:	db2a      	blt.n	2aac <hexdump_line_print+0x80>
			print_formatted(log_output, "   ");
    2a56:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2afc <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    2a5a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2b00 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    2a5e:	f8df a098 	ldr.w	sl, [pc, #152]	; 2af8 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2a62:	2500      	movs	r5, #0
		if (i < length) {
    2a64:	42bd      	cmp	r5, r7
    2a66:	d22f      	bcs.n	2ac8 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    2a68:	5d72      	ldrb	r2, [r6, r5]
    2a6a:	4649      	mov	r1, r9
    2a6c:	4620      	mov	r0, r4
    2a6e:	f7ff ff1f 	bl	28b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2a72:	3501      	adds	r5, #1
    2a74:	2d10      	cmp	r5, #16
    2a76:	d120      	bne.n	2aba <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    2a78:	491e      	ldr	r1, [pc, #120]	; (2af4 <hexdump_line_print+0xc8>)
			print_formatted(log_output, " ");
    2a7a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2af8 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    2a7e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2b04 <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
    2a82:	4620      	mov	r0, r4
    2a84:	f7ff ff14 	bl	28b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2a88:	2500      	movs	r5, #0
		if (i < length) {
    2a8a:	42af      	cmp	r7, r5
    2a8c:	d928      	bls.n	2ae0 <hexdump_line_print+0xb4>
			      isprint((int)c) ? c : '.');
    2a8e:	5d72      	ldrb	r2, [r6, r5]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    2a90:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    2a94:	2b5f      	cmp	r3, #95	; 0x5f
    2a96:	bf28      	it	cs
    2a98:	222e      	movcs	r2, #46	; 0x2e
    2a9a:	4649      	mov	r1, r9
    2a9c:	4620      	mov	r0, r4
    2a9e:	f7ff ff07 	bl	28b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2aa2:	3501      	adds	r5, #1
    2aa4:	2d10      	cmp	r5, #16
    2aa6:	d114      	bne.n	2ad2 <hexdump_line_print+0xa6>
}
    2aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    2aac:	4649      	mov	r1, r9
    2aae:	4620      	mov	r0, r4
    2ab0:	f7ff fefe 	bl	28b0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2ab4:	f108 0801 	add.w	r8, r8, #1
    2ab8:	e7cb      	b.n	2a52 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    2aba:	076a      	lsls	r2, r5, #29
    2abc:	d1d2      	bne.n	2a64 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    2abe:	4651      	mov	r1, sl
    2ac0:	4620      	mov	r0, r4
    2ac2:	f7ff fef5 	bl	28b0 <print_formatted>
    2ac6:	e7cd      	b.n	2a64 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    2ac8:	4641      	mov	r1, r8
    2aca:	4620      	mov	r0, r4
    2acc:	f7ff fef0 	bl	28b0 <print_formatted>
    2ad0:	e7cf      	b.n	2a72 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    2ad2:	076b      	lsls	r3, r5, #29
    2ad4:	d1d9      	bne.n	2a8a <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    2ad6:	4641      	mov	r1, r8
    2ad8:	4620      	mov	r0, r4
    2ada:	f7ff fee9 	bl	28b0 <print_formatted>
    2ade:	e7d4      	b.n	2a8a <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    2ae0:	4641      	mov	r1, r8
    2ae2:	4620      	mov	r0, r4
    2ae4:	f7ff fee4 	bl	28b0 <print_formatted>
    2ae8:	e7db      	b.n	2aa2 <hexdump_line_print+0x76>
    2aea:	bf00      	nop
    2aec:	0002f76b 	.word	0x0002f76b
    2af0:	000299d7 	.word	0x000299d7
    2af4:	000299e4 	.word	0x000299e4
    2af8:	000299e2 	.word	0x000299e2
    2afc:	000299e0 	.word	0x000299e0
    2b00:	000299da 	.word	0x000299da
    2b04:	000299e6 	.word	0x000299e6

00002b08 <out_func>:
{
    2b08:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    2b0a:	684b      	ldr	r3, [r1, #4]
    2b0c:	681a      	ldr	r2, [r3, #0]
    2b0e:	68cb      	ldr	r3, [r1, #12]
    2b10:	429a      	cmp	r2, r3
{
    2b12:	4605      	mov	r5, r0
    2b14:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    2b16:	d102      	bne.n	2b1e <out_func+0x16>
		log_output_flush(out_ctx);
    2b18:	4608      	mov	r0, r1
    2b1a:	f020 feb1 	bl	23880 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2b1e:	6863      	ldr	r3, [r4, #4]
    2b20:	f3bf 8f5b 	dmb	ish
    2b24:	e853 2f00 	ldrex	r2, [r3]
    2b28:	1c51      	adds	r1, r2, #1
    2b2a:	e843 1000 	strex	r0, r1, [r3]
    2b2e:	2800      	cmp	r0, #0
    2b30:	d1f8      	bne.n	2b24 <out_func+0x1c>
    2b32:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (u8_t)c;
    2b36:	68a3      	ldr	r3, [r4, #8]
    2b38:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    2b3a:	6863      	ldr	r3, [r4, #4]
    2b3c:	681a      	ldr	r2, [r3, #0]
    2b3e:	68e3      	ldr	r3, [r4, #12]
    2b40:	429a      	cmp	r2, r3
    2b42:	d909      	bls.n	2b58 <out_func+0x50>
    2b44:	4905      	ldr	r1, [pc, #20]	; (2b5c <out_func+0x54>)
    2b46:	4806      	ldr	r0, [pc, #24]	; (2b60 <out_func+0x58>)
    2b48:	4a06      	ldr	r2, [pc, #24]	; (2b64 <out_func+0x5c>)
    2b4a:	2378      	movs	r3, #120	; 0x78
    2b4c:	f020 fbbd 	bl	232ca <printk>
    2b50:	4804      	ldr	r0, [pc, #16]	; (2b64 <out_func+0x5c>)
    2b52:	2178      	movs	r1, #120	; 0x78
    2b54:	f020 fbfc 	bl	23350 <assert_post_action>
}
    2b58:	2000      	movs	r0, #0
    2b5a:	bd38      	pop	{r3, r4, r5, pc}
    2b5c:	00029a18 	.word	0x00029a18
    2b60:	000297e6 	.word	0x000297e6
    2b64:	000299e9 	.word	0x000299e9

00002b68 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    2b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    2b6c:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    2b6e:	f013 0707 	ands.w	r7, r3, #7
{
    2b72:	4616      	mov	r6, r2
    2b74:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2b76:	7a0a      	ldrb	r2, [r1, #8]
    2b78:	4604      	mov	r4, r0
    2b7a:	460d      	mov	r5, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    2b7c:	d01f      	beq.n	2bbe <log_output_msg_process+0x56>
	return msg->hdr.ids.source_id;
    2b7e:	8949      	ldrh	r1, [r1, #10]
    2b80:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    2b84:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2b86:	43d2      	mvns	r2, r2
    2b88:	e9cd 7300 	strd	r7, r3, [sp]
    2b8c:	9102      	str	r1, [sp, #8]
    2b8e:	68eb      	ldr	r3, [r5, #12]
    2b90:	f002 0201 	and.w	r2, r2, #1
    2b94:	4631      	mov	r1, r6
    2b96:	f7ff fe9d 	bl	28d4 <prefix_print>
    2b9a:	4681      	mov	r9, r0
    2b9c:	7a2b      	ldrb	r3, [r5, #8]
    2b9e:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    2ba0:	f013 0801 	ands.w	r8, r3, #1
    2ba4:	d00d      	beq.n	2bc2 <log_output_msg_process+0x5a>
		std_print(msg, log_output);
    2ba6:	4621      	mov	r1, r4
    2ba8:	4628      	mov	r0, r5
    2baa:	f020 fd0c 	bl	235c6 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    2bae:	2f00      	cmp	r7, #0
    2bb0:	d03c      	beq.n	2c2c <log_output_msg_process+0xc4>
		postfix_print(log_output, flags, level);
    2bb2:	463a      	mov	r2, r7
    2bb4:	4631      	mov	r1, r6
    2bb6:	4620      	mov	r0, r4
    2bb8:	f7ff ff1a 	bl	29f0 <postfix_print>
    2bbc:	e036      	b.n	2c2c <log_output_msg_process+0xc4>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    2bbe:	46b9      	mov	r9, r7
    2bc0:	e7ec      	b.n	2b9c <log_output_msg_process+0x34>
	} else if (raw_string) {
    2bc2:	2f00      	cmp	r7, #0
    2bc4:	d138      	bne.n	2c38 <log_output_msg_process+0xd0>
	__ASSERT_NO_MSG(log_output->size);
    2bc6:	68e3      	ldr	r3, [r4, #12]
    2bc8:	b95b      	cbnz	r3, 2be2 <log_output_msg_process+0x7a>
    2bca:	492a      	ldr	r1, [pc, #168]	; (2c74 <log_output_msg_process+0x10c>)
    2bcc:	482a      	ldr	r0, [pc, #168]	; (2c78 <log_output_msg_process+0x110>)
    2bce:	4a2b      	ldr	r2, [pc, #172]	; (2c7c <log_output_msg_process+0x114>)
    2bd0:	f240 13b9 	movw	r3, #441	; 0x1b9
    2bd4:	f020 fb79 	bl	232ca <printk>
    2bd8:	4828      	ldr	r0, [pc, #160]	; (2c7c <log_output_msg_process+0x114>)
    2bda:	f240 11b9 	movw	r1, #441	; 0x1b9
    2bde:	f020 fbb7 	bl	23350 <assert_post_action>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    2be2:	2600      	movs	r6, #0
		length = log_output->size;
    2be4:	68e3      	ldr	r3, [r4, #12]
    2be6:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    2be8:	aa06      	add	r2, sp, #24
    2bea:	4633      	mov	r3, r6
    2bec:	68a1      	ldr	r1, [r4, #8]
    2bee:	4628      	mov	r0, r5
    2bf0:	f020 fcd5 	bl	2359e <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    2bf4:	9a06      	ldr	r2, [sp, #24]
    2bf6:	6863      	ldr	r3, [r4, #4]
    2bf8:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    2bfa:	b14a      	cbz	r2, 2c10 <log_output_msg_process+0xa8>
			eol = (log_output->buf[length - 1] == '\n');
    2bfc:	68a3      	ldr	r3, [r4, #8]
    2bfe:	4413      	add	r3, r2
    2c00:	f813 8c01 	ldrb.w	r8, [r3, #-1]
    2c04:	f1a8 030a 	sub.w	r3, r8, #10
    2c08:	f1d3 0800 	rsbs	r8, r3, #0
    2c0c:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(log_output);
    2c10:	4620      	mov	r0, r4
    2c12:	f020 fe35 	bl	23880 <log_output_flush>
		offset += length;
    2c16:	9b06      	ldr	r3, [sp, #24]
    2c18:	441e      	add	r6, r3
	} while (length > 0);
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	d1e2      	bne.n	2be4 <log_output_msg_process+0x7c>
	if (eol) {
    2c1e:	f1b8 0f00 	cmp.w	r8, #0
    2c22:	d003      	beq.n	2c2c <log_output_msg_process+0xc4>
		print_formatted(log_output, "\r");
    2c24:	4916      	ldr	r1, [pc, #88]	; (2c80 <log_output_msg_process+0x118>)
    2c26:	4620      	mov	r0, r4
    2c28:	f7ff fe42 	bl	28b0 <print_formatted>
	}

	log_output_flush(log_output);
    2c2c:	4620      	mov	r0, r4
    2c2e:	f020 fe27 	bl	23880 <log_output_flush>
}
    2c32:	b00a      	add	sp, #40	; 0x28
    2c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    2c38:	4628      	mov	r0, r5
    2c3a:	f020 fcae 	bl	2359a <log_msg_str_get>
    2c3e:	4911      	ldr	r1, [pc, #68]	; (2c84 <log_output_msg_process+0x11c>)
    2c40:	4602      	mov	r2, r0
    2c42:	4620      	mov	r0, r4
    2c44:	f7ff fe34 	bl	28b0 <print_formatted>
		length = sizeof(buf);
    2c48:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2c4c:	aa05      	add	r2, sp, #20
    2c4e:	4643      	mov	r3, r8
    2c50:	a906      	add	r1, sp, #24
    2c52:	4628      	mov	r0, r5
		length = sizeof(buf);
    2c54:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2c58:	f020 fca1 	bl	2359e <log_msg_hexdump_data_get>
		if (length) {
    2c5c:	9a05      	ldr	r2, [sp, #20]
    2c5e:	2a00      	cmp	r2, #0
    2c60:	d0a7      	beq.n	2bb2 <log_output_msg_process+0x4a>
			hexdump_line_print(log_output, buf, length,
    2c62:	464b      	mov	r3, r9
    2c64:	9600      	str	r6, [sp, #0]
    2c66:	a906      	add	r1, sp, #24
    2c68:	4620      	mov	r0, r4
    2c6a:	f7ff fedf 	bl	2a2c <hexdump_line_print>
			offset += length;
    2c6e:	9b05      	ldr	r3, [sp, #20]
    2c70:	4498      	add	r8, r3
		length = sizeof(buf);
    2c72:	e7eb      	b.n	2c4c <log_output_msg_process+0xe4>
    2c74:	00029a48 	.word	0x00029a48
    2c78:	000297e6 	.word	0x000297e6
    2c7c:	000299e9 	.word	0x000299e9
    2c80:	00029a59 	.word	0x00029a59
    2c84:	0002e3d1 	.word	0x0002e3d1

00002c88 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    2c88:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    2c8a:	e9d0 4300 	ldrd	r4, r3, [r0]
    2c8e:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    2c90:	4a0f      	ldr	r2, [pc, #60]	; (2cd0 <log_output_dropped_process+0x48>)
    2c92:	f242 730f 	movw	r3, #9999	; 0x270f
    2c96:	428b      	cmp	r3, r1
    2c98:	bf28      	it	cs
    2c9a:	460b      	movcs	r3, r1
    2c9c:	4668      	mov	r0, sp
    2c9e:	2105      	movs	r1, #5
    2ca0:	f002 ffb4 	bl	5c0c <snprintf>

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    2ca4:	462b      	mov	r3, r5
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    2ca6:	4606      	mov	r6, r0
	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    2ca8:	490a      	ldr	r1, [pc, #40]	; (2cd4 <log_output_dropped_process+0x4c>)
    2caa:	4620      	mov	r0, r4
    2cac:	220b      	movs	r2, #11
    2cae:	f020 fc7d 	bl	235ac <buffer_write>
	buffer_write(outf, buf, len, dev);
    2cb2:	462b      	mov	r3, r5
    2cb4:	4632      	mov	r2, r6
    2cb6:	4669      	mov	r1, sp
    2cb8:	4620      	mov	r0, r4
    2cba:	f020 fc77 	bl	235ac <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    2cbe:	4906      	ldr	r1, [pc, #24]	; (2cd8 <log_output_dropped_process+0x50>)
    2cc0:	462b      	mov	r3, r5
    2cc2:	221b      	movs	r2, #27
    2cc4:	4620      	mov	r0, r4
    2cc6:	f020 fc71 	bl	235ac <buffer_write>
}
    2cca:	b002      	add	sp, #8
    2ccc:	bd70      	pop	{r4, r5, r6, pc}
    2cce:	bf00      	nop
    2cd0:	0002b9b9 	.word	0x0002b9b9
    2cd4:	00029a93 	.word	0x00029a93
    2cd8:	00029a77 	.word	0x00029a77

00002cdc <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    2cdc:	4a08      	ldr	r2, [pc, #32]	; (2d00 <log_output_timestamp_freq_set+0x24>)
{
    2cde:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    2ce0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2ce2:	4c08      	ldr	r4, [pc, #32]	; (2d04 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2ce4:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2ce6:	2100      	movs	r1, #0
    2ce8:	42a0      	cmp	r0, r4
    2cea:	d804      	bhi.n	2cf6 <log_output_timestamp_freq_set+0x1a>
    2cec:	b101      	cbz	r1, 2cf0 <log_output_timestamp_freq_set+0x14>
    2cee:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2cf0:	4b05      	ldr	r3, [pc, #20]	; (2d08 <log_output_timestamp_freq_set+0x2c>)
    2cf2:	6018      	str	r0, [r3, #0]
}
    2cf4:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    2cf6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2cf8:	005b      	lsls	r3, r3, #1
    2cfa:	2101      	movs	r1, #1
    2cfc:	e7f4      	b.n	2ce8 <log_output_timestamp_freq_set+0xc>
    2cfe:	bf00      	nop
    2d00:	200002f8 	.word	0x200002f8
    2d04:	000f4240 	.word	0x000f4240
    2d08:	200002f4 	.word	0x200002f4

00002d0c <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    2d0c:	4801      	ldr	r0, [pc, #4]	; (2d14 <panic+0x8>)
    2d0e:	f020 bdb7 	b.w	23880 <log_output_flush>
    2d12:	bf00      	nop
    2d14:	00028ba0 	.word	0x00028ba0

00002d18 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    2d18:	4801      	ldr	r0, [pc, #4]	; (2d20 <dropped+0x8>)
    2d1a:	f7ff bfb5 	b.w	2c88 <log_output_dropped_process>
    2d1e:	bf00      	nop
    2d20:	00028ba0 	.word	0x00028ba0

00002d24 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    2d24:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    2d26:	4809      	ldr	r0, [pc, #36]	; (2d4c <log_backend_uart_init+0x28>)
    2d28:	f01c fd0c 	bl	1f744 <z_impl_device_get_binding>
	struct device *dev;

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);
    2d2c:	4604      	mov	r4, r0
    2d2e:	b948      	cbnz	r0, 2d44 <log_backend_uart_init+0x20>
    2d30:	4907      	ldr	r1, [pc, #28]	; (2d50 <log_backend_uart_init+0x2c>)
    2d32:	4808      	ldr	r0, [pc, #32]	; (2d54 <log_backend_uart_init+0x30>)
    2d34:	4a08      	ldr	r2, [pc, #32]	; (2d58 <log_backend_uart_init+0x34>)
    2d36:	232d      	movs	r3, #45	; 0x2d
    2d38:	f020 fac7 	bl	232ca <printk>
    2d3c:	4806      	ldr	r0, [pc, #24]	; (2d58 <log_backend_uart_init+0x34>)
    2d3e:	212d      	movs	r1, #45	; 0x2d
    2d40:	f020 fb06 	bl	23350 <assert_post_action>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    2d44:	4b05      	ldr	r3, [pc, #20]	; (2d5c <log_backend_uart_init+0x38>)
    2d46:	605c      	str	r4, [r3, #4]

	log_output_ctx_set(&log_output, dev);
}
    2d48:	bd10      	pop	{r4, pc}
    2d4a:	bf00      	nop
    2d4c:	00029a9f 	.word	0x00029a9f
    2d50:	00029adb 	.word	0x00029adb
    2d54:	000297e6 	.word	0x000297e6
    2d58:	00029aa6 	.word	0x00029aa6
    2d5c:	20000304 	.word	0x20000304

00002d60 <put>:
{
    2d60:	b510      	push	{r4, lr}
	log_msg_get(msg);
    2d62:	4608      	mov	r0, r1
    2d64:	460c      	mov	r4, r1
    2d66:	f020 fbd6 	bl	23516 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    2d6a:	4805      	ldr	r0, [pc, #20]	; (2d80 <put+0x20>)
    2d6c:	4621      	mov	r1, r4
    2d6e:	220f      	movs	r2, #15
    2d70:	f7ff fefa 	bl	2b68 <log_output_msg_process>
	log_msg_put(msg);
    2d74:	4620      	mov	r0, r4
}
    2d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2d7a:	f020 bbfb 	b.w	23574 <log_msg_put>
    2d7e:	bf00      	nop
    2d80:	00028ba0 	.word	0x00028ba0

00002d84 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2d84:	4b01      	ldr	r3, [pc, #4]	; (2d8c <log_backend_rtt_init+0x8>)
    2d86:	2201      	movs	r2, #1
    2d88:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2d8a:	4770      	bx	lr
    2d8c:	20001d88 	.word	0x20001d88

00002d90 <panic>:

static void panic(struct log_backend const *const backend)
{
    2d90:	b508      	push	{r3, lr}
	log_output_flush(log_output);
    2d92:	4803      	ldr	r0, [pc, #12]	; (2da0 <panic+0x10>)
    2d94:	f020 fd74 	bl	23880 <log_output_flush>
	log_backend_std_panic(&log_output);
	panic_mode = true;
    2d98:	4b02      	ldr	r3, [pc, #8]	; (2da4 <panic+0x14>)
    2d9a:	2201      	movs	r2, #1
    2d9c:	701a      	strb	r2, [r3, #0]
}
    2d9e:	bd08      	pop	{r3, pc}
    2da0:	00028bc8 	.word	0x00028bc8
    2da4:	20001d89 	.word	0x20001d89

00002da8 <dropped>:
	log_output_dropped_process(log_output, cnt);
    2da8:	4801      	ldr	r0, [pc, #4]	; (2db0 <dropped+0x8>)
    2daa:	f7ff bf6d 	b.w	2c88 <log_output_dropped_process>
    2dae:	bf00      	nop
    2db0:	00028bc8 	.word	0x00028bc8

00002db4 <put>:
{
    2db4:	b510      	push	{r4, lr}
	log_msg_get(msg);
    2db6:	4608      	mov	r0, r1
    2db8:	460c      	mov	r4, r1
    2dba:	f020 fbac 	bl	23516 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    2dbe:	4805      	ldr	r0, [pc, #20]	; (2dd4 <put+0x20>)
    2dc0:	4621      	mov	r1, r4
    2dc2:	220f      	movs	r2, #15
    2dc4:	f7ff fed0 	bl	2b68 <log_output_msg_process>
	log_msg_put(msg);
    2dc8:	4620      	mov	r0, r4
}
    2dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2dce:	f020 bbd1 	b.w	23574 <log_msg_put>
    2dd2:	bf00      	nop
    2dd4:	00028bc8 	.word	0x00028bc8

00002dd8 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    2dd8:	4b04      	ldr	r3, [pc, #16]	; (2dec <on_failed_write.part.0+0x14>)
	} else if (is_sync_mode()) {
    2dda:	781b      	ldrb	r3, [r3, #0]
    2ddc:	b11b      	cbz	r3, 2de6 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    2dde:	f241 3088 	movw	r0, #5000	; 0x1388
    2de2:	f025 bad6 	b.w	28392 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    2de6:	2005      	movs	r0, #5
    2de8:	f01e be14 	b.w	21a14 <z_impl_k_sleep>
    2dec:	20001d89 	.word	0x20001d89

00002df0 <data_out_block_mode>:
{
    2df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    2df4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2e84 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    2df8:	f8df b08c 	ldr.w	fp, [pc, #140]	; 2e88 <data_out_block_mode+0x98>
{
    2dfc:	4607      	mov	r7, r0
    2dfe:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
    2e00:	2404      	movs	r4, #4
    2e02:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    2e04:	f899 3000 	ldrb.w	r3, [r9]
    2e08:	b923      	cbnz	r3, 2e14 <data_out_block_mode+0x24>
    2e0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2e0e:	4658      	mov	r0, fp
    2e10:	f01d f848 	bl	1fea4 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2e14:	4632      	mov	r2, r6
    2e16:	4639      	mov	r1, r7
    2e18:	2000      	movs	r0, #0
    2e1a:	f001 fa0d 	bl	4238 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    2e1e:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2e22:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    2e24:	b913      	cbnz	r3, 2e2c <data_out_block_mode+0x3c>
	return z_impl_k_mutex_unlock(mutex);
    2e26:	4658      	mov	r0, fp
    2e28:	f01d f91a 	bl	20060 <z_impl_k_mutex_unlock>
		if (ret) {
    2e2c:	4d14      	ldr	r5, [pc, #80]	; (2e80 <data_out_block_mode+0x90>)
    2e2e:	f1b8 0f00 	cmp.w	r8, #0
    2e32:	d018      	beq.n	2e66 <data_out_block_mode+0x76>
	host_present = true;
    2e34:	2301      	movs	r3, #1
    2e36:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    2e38:	f89a 3000 	ldrb.w	r3, [sl]
    2e3c:	b933      	cbnz	r3, 2e4c <data_out_block_mode+0x5c>
}
    2e3e:	4630      	mov	r0, r6
    2e40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    2e44:	b95c      	cbnz	r4, 2e5e <data_out_block_mode+0x6e>
		host_present = false;
    2e46:	702c      	strb	r4, [r5, #0]
    2e48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2e4c:	2000      	movs	r0, #0
    2e4e:	f001 fa3f 	bl	42d0 <SEGGER_RTT_HasDataUp>
    2e52:	2800      	cmp	r0, #0
    2e54:	d0f3      	beq.n	2e3e <data_out_block_mode+0x4e>
    2e56:	782b      	ldrb	r3, [r5, #0]
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d1f3      	bne.n	2e44 <data_out_block_mode+0x54>
    2e5c:	e7ef      	b.n	2e3e <data_out_block_mode+0x4e>
			on_failed_write(retry_cnt--);
    2e5e:	3c01      	subs	r4, #1
    2e60:	f7ff ffba 	bl	2dd8 <on_failed_write.part.0>
    2e64:	e7f2      	b.n	2e4c <data_out_block_mode+0x5c>
		} else if (host_present) {
    2e66:	782b      	ldrb	r3, [r5, #0]
    2e68:	b113      	cbz	r3, 2e70 <data_out_block_mode+0x80>
	if (retry_cnt == 0) {
    2e6a:	3c01      	subs	r4, #1
    2e6c:	d104      	bne.n	2e78 <data_out_block_mode+0x88>
		host_present = false;
    2e6e:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    2e70:	782b      	ldrb	r3, [r5, #0]
    2e72:	2b00      	cmp	r3, #0
    2e74:	d1c6      	bne.n	2e04 <data_out_block_mode+0x14>
    2e76:	e7e2      	b.n	2e3e <data_out_block_mode+0x4e>
    2e78:	f7ff ffae 	bl	2dd8 <on_failed_write.part.0>
    2e7c:	e7f8      	b.n	2e70 <data_out_block_mode+0x80>
    2e7e:	bf00      	nop
    2e80:	20001d88 	.word	0x20001d88
    2e84:	20001d89 	.word	0x20001d89
    2e88:	2000750c 	.word	0x2000750c

00002e8c <nvs_prev_ate>:

/* walking through allocation entry list, from newest to oldest entries
 * read ate from addr, modify addr to the previous ate
 */
static int nvs_prev_ate(struct nvs_fs *fs, u32_t *addr, struct nvs_ate *ate)
{
    2e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    2e90:	2308      	movs	r3, #8
{
    2e92:	b085      	sub	sp, #20
    2e94:	460d      	mov	r5, r1
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    2e96:	6809      	ldr	r1, [r1, #0]
	int rc;
	struct nvs_ate close_ate, end_ate;
	u32_t data_end_addr, ate_end_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2e98:	7c04      	ldrb	r4, [r0, #16]
{
    2e9a:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    2e9c:	f020 fd10 	bl	238c0 <nvs_flash_rd>

	rc = nvs_flash_ate_rd(fs, *addr, ate);
	if (rc) {
    2ea0:	b968      	cbnz	r0, 2ebe <nvs_prev_ate+0x32>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2ea2:	2108      	movs	r1, #8
    2ea4:	4620      	mov	r0, r4
    2ea6:	f020 fd57 	bl	23958 <nvs_al_size.isra.0>
		return rc;
	}

	*addr += ate_size;
    2eaa:	6829      	ldr	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    2eac:	89bb      	ldrh	r3, [r7, #12]
	*addr += ate_size;
    2eae:	4401      	add	r1, r0
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    2eb0:	b28a      	uxth	r2, r1
    2eb2:	1a1b      	subs	r3, r3, r0
    2eb4:	429a      	cmp	r2, r3
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2eb6:	4606      	mov	r6, r0
	*addr += ate_size;
    2eb8:	6029      	str	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    2eba:	d003      	beq.n	2ec4 <nvs_prev_ate+0x38>
		return 0;
    2ebc:	2000      	movs	r0, #0
	/* remark: if there was absolutely no valid data in the sector *addr
	 * is kept at sector_end - 2*ate_size, the next read will contain
	 * invalid data and continue with a sector jump
	 */
	return 0;
}
    2ebe:	b005      	add	sp, #20
    2ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
    2ec4:	0c0b      	lsrs	r3, r1, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
    2ec6:	bf03      	ittte	eq
    2ec8:	89fb      	ldrheq	r3, [r7, #14]
    2eca:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
    2ece:	eb01 4103 	addeq.w	r1, r1, r3, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
    2ed2:	f5a1 3180 	subne.w	r1, r1, #65536	; 0x10000
    2ed6:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    2ed8:	2308      	movs	r3, #8
    2eda:	466a      	mov	r2, sp
    2edc:	4638      	mov	r0, r7
    2ede:	f020 fcef 	bl	238c0 <nvs_flash_rd>
	if (rc) {
    2ee2:	2800      	cmp	r0, #0
    2ee4:	d1eb      	bne.n	2ebe <nvs_prev_ate+0x32>
    2ee6:	466a      	mov	r2, sp
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    2ee8:	4603      	mov	r3, r0
		if (data8[i] != value) {
    2eea:	f812 1b01 	ldrb.w	r1, [r2], #1
    2eee:	29ff      	cmp	r1, #255	; 0xff
    2ef0:	d115      	bne.n	2f1e <nvs_prev_ate+0x92>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    2ef2:	3301      	adds	r3, #1
    2ef4:	2b08      	cmp	r3, #8
    2ef6:	d1f8      	bne.n	2eea <nvs_prev_ate+0x5e>
		*addr = fs->ate_wra;
    2ef8:	687b      	ldr	r3, [r7, #4]
    2efa:	602b      	str	r3, [r5, #0]
		return 0;
    2efc:	e7df      	b.n	2ebe <nvs_prev_ate+0x32>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
    2efe:	89bb      	ldrh	r3, [r7, #12]
    2f00:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    2f04:	1b9b      	subs	r3, r3, r6
    2f06:	4299      	cmp	r1, r3
    2f08:	d20f      	bcs.n	2f2a <nvs_prev_ate+0x9e>
		    !(close_ate.offset % ate_size)) {
    2f0a:	fbb1 f3f6 	udiv	r3, r1, r6
    2f0e:	fb06 1313 	mls	r3, r6, r3, r1
		if (close_ate.offset < (fs->sector_size - ate_size) &&
    2f12:	b953      	cbnz	r3, 2f2a <nvs_prev_ate+0x9e>
			(*addr) &= ADDR_SECT_MASK;
    2f14:	0c24      	lsrs	r4, r4, #16
    2f16:	0424      	lsls	r4, r4, #16
			(*addr) += close_ate.offset;
    2f18:	440c      	add	r4, r1
    2f1a:	602c      	str	r4, [r5, #0]
			return 0;
    2f1c:	e7cf      	b.n	2ebe <nvs_prev_ate+0x32>
	if (!nvs_ate_crc8_check(&close_ate)) {
    2f1e:	4668      	mov	r0, sp
    2f20:	f020 fd05 	bl	2392e <nvs_ate_crc8_check>
    2f24:	682c      	ldr	r4, [r5, #0]
    2f26:	2800      	cmp	r0, #0
    2f28:	d0e9      	beq.n	2efe <nvs_prev_ate+0x72>
	data_end_addr = *addr & ADDR_SECT_MASK;
    2f2a:	4b10      	ldr	r3, [pc, #64]	; (2f6c <nvs_prev_ate+0xe0>)
	*addr -= ate_size;
    2f2c:	1ba4      	subs	r4, r4, r6
    2f2e:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    2f30:	ea04 0803 	and.w	r8, r4, r3
			data_end_addr &= ADDR_SECT_MASK;
    2f34:	4699      	mov	r9, r3
	while (ate_end_addr > data_end_addr) {
    2f36:	45a0      	cmp	r8, r4
    2f38:	d2c0      	bcs.n	2ebc <nvs_prev_ate+0x30>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    2f3a:	2308      	movs	r3, #8
    2f3c:	eb0d 0203 	add.w	r2, sp, r3
    2f40:	4621      	mov	r1, r4
    2f42:	4638      	mov	r0, r7
    2f44:	f020 fcbc 	bl	238c0 <nvs_flash_rd>
		if (rc) {
    2f48:	2800      	cmp	r0, #0
    2f4a:	d1b8      	bne.n	2ebe <nvs_prev_ate+0x32>
		if (!nvs_ate_crc8_check(&end_ate)) {
    2f4c:	a802      	add	r0, sp, #8
    2f4e:	f020 fcee 	bl	2392e <nvs_ate_crc8_check>
    2f52:	b940      	cbnz	r0, 2f66 <nvs_prev_ate+0xda>
			data_end_addr += end_ate.offset + end_ate.len;
    2f54:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    2f58:	f8bd 200c 	ldrh.w	r2, [sp, #12]
			*addr = ate_end_addr;
    2f5c:	602c      	str	r4, [r5, #0]
			data_end_addr &= ADDR_SECT_MASK;
    2f5e:	ea08 0809 	and.w	r8, r8, r9
			data_end_addr += end_ate.offset + end_ate.len;
    2f62:	4413      	add	r3, r2
    2f64:	4498      	add	r8, r3
		ate_end_addr -= ate_size;
    2f66:	1ba4      	subs	r4, r4, r6
    2f68:	e7e5      	b.n	2f36 <nvs_prev_ate+0xaa>
    2f6a:	bf00      	nop
    2f6c:	ffff0000 	.word	0xffff0000

00002f70 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    2f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f74:	4605      	mov	r5, r0
    2f76:	b095      	sub	sp, #84	; 0x54
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	u32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2f78:	7c00      	ldrb	r0, [r0, #16]
    2f7a:	2108      	movs	r1, #8
    2f7c:	f020 fcec 	bl	23958 <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    2f80:	686b      	ldr	r3, [r5, #4]
    2f82:	0c1b      	lsrs	r3, r3, #16
    2f84:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2f86:	4606      	mov	r6, r0
	nvs_sector_advance(fs, &sec_addr);
    2f88:	a903      	add	r1, sp, #12
    2f8a:	89e8      	ldrh	r0, [r5, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    2f8c:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
    2f8e:	f020 fced 	bl	2396c <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    2f92:	9b03      	ldr	r3, [sp, #12]
    2f94:	89a9      	ldrh	r1, [r5, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    2f96:	af06      	add	r7, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
    2f98:	4419      	add	r1, r3
    2f9a:	1b89      	subs	r1, r1, r6
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    2f9c:	2308      	movs	r3, #8
    2f9e:	463a      	mov	r2, r7
    2fa0:	4628      	mov	r0, r5
	gc_addr = sec_addr + fs->sector_size - ate_size;
    2fa2:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    2fa4:	f020 fc8c 	bl	238c0 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    2fa8:	1e04      	subs	r4, r0, #0
    2faa:	db71      	blt.n	3090 <nvs_gc+0x120>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    2fac:	2300      	movs	r3, #0
		if (data8[i] != value) {
    2fae:	5cfa      	ldrb	r2, [r7, r3]
    2fb0:	2aff      	cmp	r2, #255	; 0xff
    2fb2:	d171      	bne.n	3098 <nvs_gc+0x128>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    2fb4:	3301      	adds	r3, #1
    2fb6:	2b08      	cmp	r3, #8
    2fb8:	d1f9      	bne.n	2fae <nvs_gc+0x3e>
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, 0xff);
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    2fba:	9903      	ldr	r1, [sp, #12]
    2fbc:	4628      	mov	r0, r5
    2fbe:	f020 fd04 	bl	239ca <nvs_flash_erase_sector>
    2fc2:	4604      	mov	r4, r0
		if (rc) {
    2fc4:	e064      	b.n	3090 <nvs_gc+0x120>
		bytes_to_copy = MIN(block_size, len);
    2fc6:	4557      	cmp	r7, sl
    2fc8:	463e      	mov	r6, r7
    2fca:	bf28      	it	cs
    2fcc:	4656      	movcs	r6, sl
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    2fce:	4633      	mov	r3, r6
    2fd0:	aa0c      	add	r2, sp, #48	; 0x30
    2fd2:	4641      	mov	r1, r8
    2fd4:	4628      	mov	r0, r5
    2fd6:	f020 fc73 	bl	238c0 <nvs_flash_rd>
		if (rc) {
    2fda:	4604      	mov	r4, r0
    2fdc:	2800      	cmp	r0, #0
    2fde:	d157      	bne.n	3090 <nvs_gc+0x120>
	if (!len) {
    2fe0:	b136      	cbz	r6, 2ff0 <nvs_gc+0x80>
    2fe2:	68a9      	ldr	r1, [r5, #8]
    2fe4:	4633      	mov	r3, r6
    2fe6:	aa0c      	add	r2, sp, #48	; 0x30
    2fe8:	4628      	mov	r0, r5
    2fea:	f020 fd14 	bl	23a16 <nvs_flash_al_wrt.part.0>
    2fee:	4604      	mov	r4, r0
	fs->data_wra += nvs_al_size(fs, len);
    2ff0:	7c28      	ldrb	r0, [r5, #16]
    2ff2:	4631      	mov	r1, r6
    2ff4:	f020 fcb0 	bl	23958 <nvs_al_size.isra.0>
    2ff8:	68aa      	ldr	r2, [r5, #8]
    2ffa:	4402      	add	r2, r0
    2ffc:	60aa      	str	r2, [r5, #8]
		if (rc) {
    2ffe:	2c00      	cmp	r4, #0
    3000:	d146      	bne.n	3090 <nvs_gc+0x120>
		len -= bytes_to_copy;
    3002:	ebaa 0a06 	sub.w	sl, sl, r6
		addr += bytes_to_copy;
    3006:	44b0      	add	r8, r6
    3008:	e038      	b.n	307c <nvs_gc+0x10c>
				return rc;
			}
		}

		/* stop gc at end of the sector */
		if (gc_prev_addr == stop_addr) {
    300a:	9b01      	ldr	r3, [sp, #4]
    300c:	455b      	cmp	r3, fp
    300e:	d0d4      	beq.n	2fba <nvs_gc+0x4a>
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    3010:	aa08      	add	r2, sp, #32
    3012:	a904      	add	r1, sp, #16
    3014:	4628      	mov	r0, r5
		gc_prev_addr = gc_addr;
    3016:	f8dd b010 	ldr.w	fp, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    301a:	f7ff ff37 	bl	2e8c <nvs_prev_ate>
		if (rc) {
    301e:	4604      	mov	r4, r0
    3020:	2800      	cmp	r0, #0
    3022:	d135      	bne.n	3090 <nvs_gc+0x120>
		wlk_addr = fs->ate_wra;
    3024:	686b      	ldr	r3, [r5, #4]
    3026:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    3028:	aa0a      	add	r2, sp, #40	; 0x28
    302a:	a905      	add	r1, sp, #20
    302c:	4628      	mov	r0, r5
			wlk_prev_addr = wlk_addr;
    302e:	9f05      	ldr	r7, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    3030:	f7ff ff2c 	bl	2e8c <nvs_prev_ate>
			if (rc) {
    3034:	4604      	mov	r4, r0
    3036:	bb58      	cbnz	r0, 3090 <nvs_gc+0x120>
			if ((wlk_ate.id == gc_ate.id) &&
    3038:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    303c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    3040:	429a      	cmp	r2, r3
    3042:	d1f1      	bne.n	3028 <nvs_gc+0xb8>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    3044:	a80a      	add	r0, sp, #40	; 0x28
    3046:	f020 fc72 	bl	2392e <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    304a:	2800      	cmp	r0, #0
    304c:	d1ec      	bne.n	3028 <nvs_gc+0xb8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    304e:	455f      	cmp	r7, fp
    3050:	d1db      	bne.n	300a <nvs_gc+0x9a>
    3052:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    3056:	2b00      	cmp	r3, #0
    3058:	d0d7      	beq.n	300a <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
    305a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    305e:	ea0b 0809 	and.w	r8, fp, r9
			data_addr += gc_ate.offset;
    3062:	4498      	add	r8, r3
			nvs_ate_crc8_update(&gc_ate);
    3064:	a808      	add	r0, sp, #32
			gc_ate.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
    3066:	68ab      	ldr	r3, [r5, #8]
    3068:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
    306c:	f020 fc6b 	bl	23946 <nvs_ate_crc8_update>
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
    3070:	7c2f      	ldrb	r7, [r5, #16]
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    3072:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
    3076:	427f      	negs	r7, r7
    3078:	f007 0720 	and.w	r7, r7, #32
	while (len) {
    307c:	f1ba 0f00 	cmp.w	sl, #0
    3080:	d1a1      	bne.n	2fc6 <nvs_gc+0x56>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    3082:	a908      	add	r1, sp, #32
    3084:	4628      	mov	r0, r5
    3086:	f020 fd0a 	bl	23a9e <nvs_flash_ate_wrt>
			if (rc) {
    308a:	4604      	mov	r4, r0
    308c:	2800      	cmp	r0, #0
    308e:	d0bc      	beq.n	300a <nvs_gc+0x9a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    3090:	4620      	mov	r0, r4
    3092:	b015      	add	sp, #84	; 0x54
    3094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	stop_addr = gc_addr - ate_size;
    3098:	9b04      	ldr	r3, [sp, #16]
	gc_addr += close_ate.offset;
    309a:	f8bd 101a 	ldrh.w	r1, [sp, #26]
	stop_addr = gc_addr - ate_size;
    309e:	1b9a      	subs	r2, r3, r6
    30a0:	9201      	str	r2, [sp, #4]
	gc_addr &= ADDR_SECT_MASK;
    30a2:	4a03      	ldr	r2, [pc, #12]	; (30b0 <nvs_gc+0x140>)
    30a4:	4013      	ands	r3, r2
	gc_addr += close_ate.offset;
    30a6:	440b      	add	r3, r1
    30a8:	9304      	str	r3, [sp, #16]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    30aa:	4691      	mov	r9, r2
    30ac:	e7b0      	b.n	3010 <nvs_gc+0xa0>
    30ae:	bf00      	nop
    30b0:	ffff0000 	.word	0xffff0000

000030b4 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    30b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    30b8:	4604      	mov	r4, r0
    30ba:	b087      	sub	sp, #28
    30bc:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;

	k_mutex_init(&fs->nvs_lock);
    30be:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    30c2:	4630      	mov	r0, r6
    30c4:	f025 f8f0 	bl	282a8 <z_impl_k_mutex_init>
    30c8:	4628      	mov	r0, r5
    30ca:	f01c fb3b 	bl	1f744 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    30ce:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    30d0:	b978      	cbnz	r0, 30f2 <nvs_init+0x3e>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    30d2:	4b91      	ldr	r3, [pc, #580]	; (3318 <nvs_init+0x264>)
    30d4:	4991      	ldr	r1, [pc, #580]	; (331c <nvs_init+0x268>)
		LOG_ERR("No valid flash device found");
    30d6:	4892      	ldr	r0, [pc, #584]	; (3320 <nvs_init+0x26c>)
    30d8:	1ac9      	subs	r1, r1, r3
    30da:	08c9      	lsrs	r1, r1, #3
    30dc:	0189      	lsls	r1, r1, #6
    30de:	f041 0101 	orr.w	r1, r1, #1
    30e2:	f020 f963 	bl	233ac <log_0>
		return -ENXIO;
    30e6:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    30ea:	4628      	mov	r0, r5
    30ec:	b007      	add	sp, #28
    30ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->driver_api;

	return api->write_block_size;
    30f2:	6843      	ldr	r3, [r0, #4]
	fs->write_block_size = flash_get_write_block_size(fs->flash_device);
    30f4:	7d1b      	ldrb	r3, [r3, #20]
    30f6:	7423      	strb	r3, [r4, #16]
	if (fs->write_block_size > NVS_BLOCK_SIZE) {
    30f8:	2b20      	cmp	r3, #32
    30fa:	d90c      	bls.n	3116 <nvs_init+0x62>
    30fc:	4987      	ldr	r1, [pc, #540]	; (331c <nvs_init+0x268>)
    30fe:	4b86      	ldr	r3, [pc, #536]	; (3318 <nvs_init+0x264>)
		LOG_ERR("Unsupported write block size");
    3100:	4888      	ldr	r0, [pc, #544]	; (3324 <nvs_init+0x270>)
    3102:	1ac9      	subs	r1, r1, r3
    3104:	08c9      	lsrs	r1, r1, #3
    3106:	0189      	lsls	r1, r1, #6
    3108:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to get page info");
    310c:	f020 f94e 	bl	233ac <log_0>
		return -EINVAL;
    3110:	f06f 0515 	mvn.w	r5, #21
    3114:	e7e9      	b.n	30ea <nvs_init+0x36>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    3116:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3118:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    311a:	aa03      	add	r2, sp, #12
    311c:	f025 f83b 	bl	28196 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    3120:	b140      	cbz	r0, 3134 <nvs_init+0x80>
    3122:	497e      	ldr	r1, [pc, #504]	; (331c <nvs_init+0x268>)
    3124:	4b7c      	ldr	r3, [pc, #496]	; (3318 <nvs_init+0x264>)
		LOG_ERR("Unable to get page info");
    3126:	4880      	ldr	r0, [pc, #512]	; (3328 <nvs_init+0x274>)
    3128:	1ac9      	subs	r1, r1, r3
    312a:	08c9      	lsrs	r1, r1, #3
    312c:	0189      	lsls	r1, r1, #6
    312e:	f041 0101 	orr.w	r1, r1, #1
    3132:	e7eb      	b.n	310c <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
    3134:	89a3      	ldrh	r3, [r4, #12]
    3136:	b12b      	cbz	r3, 3144 <nvs_init+0x90>
    3138:	9a04      	ldr	r2, [sp, #16]
    313a:	fbb3 f5f2 	udiv	r5, r3, r2
    313e:	fb02 3515 	mls	r5, r2, r5, r3
    3142:	b145      	cbz	r5, 3156 <nvs_init+0xa2>
    3144:	4975      	ldr	r1, [pc, #468]	; (331c <nvs_init+0x268>)
    3146:	4b74      	ldr	r3, [pc, #464]	; (3318 <nvs_init+0x264>)
		LOG_ERR("Invalid sector size");
    3148:	4878      	ldr	r0, [pc, #480]	; (332c <nvs_init+0x278>)
    314a:	1ac9      	subs	r1, r1, r3
    314c:	08c9      	lsrs	r1, r1, #3
    314e:	0189      	lsls	r1, r1, #6
    3150:	f041 0101 	orr.w	r1, r1, #1
    3154:	e7da      	b.n	310c <nvs_init+0x58>
	if (fs->sector_count < 2) {
    3156:	89e3      	ldrh	r3, [r4, #14]
    3158:	2b01      	cmp	r3, #1
    315a:	d808      	bhi.n	316e <nvs_init+0xba>
    315c:	496f      	ldr	r1, [pc, #444]	; (331c <nvs_init+0x268>)
    315e:	4b6e      	ldr	r3, [pc, #440]	; (3318 <nvs_init+0x264>)
		LOG_ERR("Configuration error - sector count");
    3160:	4873      	ldr	r0, [pc, #460]	; (3330 <nvs_init+0x27c>)
    3162:	1ac9      	subs	r1, r1, r3
    3164:	08c9      	lsrs	r1, r1, #3
    3166:	0189      	lsls	r1, r1, #6
    3168:	f041 0101 	orr.w	r1, r1, #1
    316c:	e7ce      	b.n	310c <nvs_init+0x58>
	u32_t addr = 0U;
    316e:	9500      	str	r5, [sp, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3170:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3174:	4630      	mov	r0, r6
    3176:	f01c fe95 	bl	1fea4 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    317a:	7c20      	ldrb	r0, [r4, #16]
    317c:	2108      	movs	r1, #8
    317e:	f020 fbeb 	bl	23958 <nvs_al_size.isra.0>
	u16_t i, closed_sectors = 0;
    3182:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3184:	4607      	mov	r7, r0
	for (i = 0; i < fs->sector_count; i++) {
    3186:	89e3      	ldrh	r3, [r4, #14]
    3188:	fa1f f885 	uxth.w	r8, r5
    318c:	4543      	cmp	r3, r8
    318e:	d805      	bhi.n	319c <nvs_init+0xe8>
	if (closed_sectors == fs->sector_count) {
    3190:	89e3      	ldrh	r3, [r4, #14]
    3192:	454b      	cmp	r3, r9
    3194:	d11e      	bne.n	31d4 <nvs_init+0x120>
		return -EDEADLK;
    3196:	f06f 0520 	mvn.w	r5, #32
    319a:	e7a6      	b.n	30ea <nvs_init+0x36>
		       (u16_t)(fs->sector_size - ate_size);
    319c:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    319e:	042b      	lsls	r3, r5, #16
		       (u16_t)(fs->sector_size - ate_size);
    31a0:	1bc9      	subs	r1, r1, r7
		addr = (i << ADDR_SECT_SHIFT) +
    31a2:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, 0xff,
    31a6:	2208      	movs	r2, #8
    31a8:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    31aa:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, 0xff,
    31ac:	f020 fbe9 	bl	23982 <nvs_flash_cmp_const.constprop.0>
		if (rc) {
    31b0:	b170      	cbz	r0, 31d0 <nvs_init+0x11c>
			nvs_sector_advance(fs, &addr);
    31b2:	89e0      	ldrh	r0, [r4, #14]
    31b4:	4669      	mov	r1, sp
    31b6:	f020 fbd9 	bl	2396c <nvs_sector_advance.isra.0>
			closed_sectors++;
    31ba:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, 0xff,
    31be:	9900      	ldr	r1, [sp, #0]
    31c0:	2208      	movs	r2, #8
    31c2:	4620      	mov	r0, r4
			closed_sectors++;
    31c4:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, 0xff,
    31c8:	f020 fbdb 	bl	23982 <nvs_flash_cmp_const.constprop.0>
			if (!rc) {
    31cc:	2800      	cmp	r0, #0
    31ce:	d0df      	beq.n	3190 <nvs_init+0xdc>
	for (i = 0; i < fs->sector_count; i++) {
    31d0:	3501      	adds	r5, #1
    31d2:	e7d8      	b.n	3186 <nvs_init+0xd2>
	if (i == fs->sector_count) {
    31d4:	4598      	cmp	r8, r3
    31d6:	d10a      	bne.n	31ee <nvs_init+0x13a>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, 0xff,
    31d8:	9900      	ldr	r1, [sp, #0]
    31da:	2208      	movs	r2, #8
    31dc:	1bc9      	subs	r1, r1, r7
    31de:	4620      	mov	r0, r4
    31e0:	f020 fbcf 	bl	23982 <nvs_flash_cmp_const.constprop.0>
		if (!rc) {
    31e4:	b918      	cbnz	r0, 31ee <nvs_init+0x13a>
			nvs_sector_advance(fs, &addr);
    31e6:	89e0      	ldrh	r0, [r4, #14]
    31e8:	4669      	mov	r1, sp
    31ea:	f020 fbbf 	bl	2396c <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
    31ee:	9b00      	ldr	r3, [sp, #0]
    31f0:	1bda      	subs	r2, r3, r7
    31f2:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    31f4:	4a4f      	ldr	r2, [pc, #316]	; (3334 <nvs_init+0x280>)
    31f6:	4013      	ands	r3, r2
    31f8:	60a3      	str	r3, [r4, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    31fa:	4690      	mov	r8, r2
	while (fs->ate_wra >= fs->data_wra) {
    31fc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    3200:	4299      	cmp	r1, r3
    3202:	d30e      	bcc.n	3222 <nvs_init+0x16e>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    3204:	2308      	movs	r3, #8
    3206:	aa01      	add	r2, sp, #4
    3208:	4620      	mov	r0, r4
    320a:	f020 fb59 	bl	238c0 <nvs_flash_rd>
		if (rc) {
    320e:	4605      	mov	r5, r0
    3210:	bb18      	cbnz	r0, 325a <nvs_init+0x1a6>
    3212:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    3214:	f813 2b01 	ldrb.w	r2, [r3], #1
    3218:	2aff      	cmp	r2, #255	; 0xff
    321a:	d165      	bne.n	32e8 <nvs_init+0x234>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    321c:	3501      	adds	r5, #1
    321e:	2d08      	cmp	r5, #8
    3220:	d1f8      	bne.n	3214 <nvs_init+0x160>
	while (fs->ate_wra > fs->data_wra) {
    3222:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
    3226:	428a      	cmp	r2, r1
    3228:	d906      	bls.n	3238 <nvs_init+0x184>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, 0xff, empty_len);
    322a:	1a52      	subs	r2, r2, r1
    322c:	4620      	mov	r0, r4
    322e:	f020 fba8 	bl	23982 <nvs_flash_cmp_const.constprop.0>
		if (rc < 0) {
    3232:	1e05      	subs	r5, r0, #0
    3234:	db11      	blt.n	325a <nvs_init+0x1a6>
		if (!rc) {
    3236:	d13a      	bne.n	32ae <nvs_init+0x1fa>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    3238:	6863      	ldr	r3, [r4, #4]
    323a:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 3334 <nvs_init+0x280>
	nvs_sector_advance(fs, &addr);
    323e:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    3240:	ea03 0308 	and.w	r3, r3, r8
	nvs_sector_advance(fs, &addr);
    3244:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    3246:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    3248:	f020 fb90 	bl	2396c <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
    324c:	89a2      	ldrh	r2, [r4, #12]
    324e:	9900      	ldr	r1, [sp, #0]
    3250:	4620      	mov	r0, r4
    3252:	f020 fb96 	bl	23982 <nvs_flash_cmp_const.constprop.0>
	if (rc < 0) {
    3256:	1e05      	subs	r5, r0, #0
    3258:	da2e      	bge.n	32b8 <nvs_init+0x204>
	return z_impl_k_mutex_unlock(mutex);
    325a:	4630      	mov	r0, r6
    325c:	f01c ff00 	bl	20060 <z_impl_k_mutex_unlock>
	if (rc) {
    3260:	2d00      	cmp	r5, #0
    3262:	f47f af42 	bne.w	30ea <nvs_init+0x36>
	fs->ready = true;
    3266:	2301      	movs	r3, #1
    3268:	7463      	strb	r3, [r4, #17]
    326a:	4e2c      	ldr	r6, [pc, #176]	; (331c <nvs_init+0x268>)
    326c:	4b2a      	ldr	r3, [pc, #168]	; (3318 <nvs_init+0x264>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    326e:	89a2      	ldrh	r2, [r4, #12]
    3270:	89e1      	ldrh	r1, [r4, #14]
    3272:	4831      	ldr	r0, [pc, #196]	; (3338 <nvs_init+0x284>)
    3274:	1af6      	subs	r6, r6, r3
    3276:	08f6      	lsrs	r6, r6, #3
    3278:	01b6      	lsls	r6, r6, #6
    327a:	f046 0603 	orr.w	r6, r6, #3
    327e:	4633      	mov	r3, r6
    3280:	f020 f8b5 	bl	233ee <log_2>
	LOG_INF("alloc wra: %d, %x",
    3284:	6861      	ldr	r1, [r4, #4]
    3286:	482d      	ldr	r0, [pc, #180]	; (333c <nvs_init+0x288>)
    3288:	4633      	mov	r3, r6
    328a:	b28a      	uxth	r2, r1
    328c:	0c09      	lsrs	r1, r1, #16
    328e:	f020 f8ae 	bl	233ee <log_2>
	LOG_INF("data wra: %d, %x",
    3292:	68a1      	ldr	r1, [r4, #8]
    3294:	482a      	ldr	r0, [pc, #168]	; (3340 <nvs_init+0x28c>)
    3296:	b28a      	uxth	r2, r1
    3298:	4633      	mov	r3, r6
    329a:	0c09      	lsrs	r1, r1, #16
    329c:	f020 f8a7 	bl	233ee <log_2>
	return 0;
    32a0:	e723      	b.n	30ea <nvs_init+0x36>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    32a2:	f1b9 0f00 	cmp.w	r9, #0
    32a6:	d034      	beq.n	3312 <nvs_init+0x25e>
				return -ESPIPE;
    32a8:	f06f 051c 	mvn.w	r5, #28
    32ac:	e71d      	b.n	30ea <nvs_init+0x36>
		fs->data_wra += fs->write_block_size;
    32ae:	68a3      	ldr	r3, [r4, #8]
    32b0:	7c22      	ldrb	r2, [r4, #16]
    32b2:	4413      	add	r3, r2
    32b4:	60a3      	str	r3, [r4, #8]
    32b6:	e7b4      	b.n	3222 <nvs_init+0x16e>
	if (rc) {
    32b8:	d0cf      	beq.n	325a <nvs_init+0x1a6>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    32ba:	6861      	ldr	r1, [r4, #4]
    32bc:	4620      	mov	r0, r4
    32be:	f020 fb84 	bl	239ca <nvs_flash_erase_sector>
		if (rc) {
    32c2:	4605      	mov	r5, r0
    32c4:	2800      	cmp	r0, #0
    32c6:	d1c8      	bne.n	325a <nvs_init+0x1a6>
		fs->ate_wra &= ADDR_SECT_MASK;
    32c8:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    32ca:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    32cc:	ea03 0308 	and.w	r3, r3, r8
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    32d0:	4403      	add	r3, r0
    32d2:	eba3 0047 	sub.w	r0, r3, r7, lsl #1
    32d6:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    32d8:	ea00 0008 	and.w	r0, r0, r8
    32dc:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    32de:	4620      	mov	r0, r4
    32e0:	f7ff fe46 	bl	2f70 <nvs_gc>
    32e4:	4605      	mov	r5, r0
end:
    32e6:	e7b8      	b.n	325a <nvs_init+0x1a6>
		if (!nvs_ate_crc8_check(&last_ate)) {
    32e8:	a801      	add	r0, sp, #4
    32ea:	f020 fb20 	bl	2392e <nvs_ate_crc8_check>
    32ee:	6865      	ldr	r5, [r4, #4]
    32f0:	b978      	cbnz	r0, 3312 <nvs_init+0x25e>
			fs->data_wra = addr & ADDR_SECT_MASK;
    32f2:	9800      	ldr	r0, [sp, #0]
			fs->data_wra += last_ate.offset;
    32f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    32f8:	f8bd 9008 	ldrh.w	r9, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    32fc:	ea00 0008 	and.w	r0, r0, r8
			fs->data_wra += last_ate.offset;
    3300:	4402      	add	r2, r0
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    3302:	4649      	mov	r1, r9
    3304:	7c20      	ldrb	r0, [r4, #16]
    3306:	f020 fb27 	bl	23958 <nvs_al_size.isra.0>
    330a:	4410      	add	r0, r2
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    330c:	42a8      	cmp	r0, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    330e:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    3310:	d0c7      	beq.n	32a2 <nvs_init+0x1ee>
		fs->ate_wra -= ate_size;
    3312:	1bed      	subs	r5, r5, r7
    3314:	6065      	str	r5, [r4, #4]
    3316:	e771      	b.n	31fc <nvs_init+0x148>
    3318:	00028868 	.word	0x00028868
    331c:	000289e0 	.word	0x000289e0
    3320:	00029b14 	.word	0x00029b14
    3324:	00029b30 	.word	0x00029b30
    3328:	00029b4d 	.word	0x00029b4d
    332c:	00029b65 	.word	0x00029b65
    3330:	00029b79 	.word	0x00029b79
    3334:	ffff0000 	.word	0xffff0000
    3338:	00029b9c 	.word	0x00029b9c
    333c:	00029bb3 	.word	0x00029bb3
    3340:	00029bc5 	.word	0x00029bc5

00003344 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, u16_t id, const void *data, size_t len)
{
    3344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3348:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	u32_t wlk_addr, rd_addr;
	u16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    334a:	7c43      	ldrb	r3, [r0, #17]
{
    334c:	b089      	sub	sp, #36	; 0x24
    334e:	4604      	mov	r4, r0
    3350:	4689      	mov	r9, r1
    3352:	4690      	mov	r8, r2
	if (!fs->ready) {
    3354:	b97b      	cbnz	r3, 3376 <nvs_write+0x32>
    3356:	4b67      	ldr	r3, [pc, #412]	; (34f4 <nvs_write+0x1b0>)
    3358:	4967      	ldr	r1, [pc, #412]	; (34f8 <nvs_write+0x1b4>)
		LOG_ERR("NVS not initialized");
    335a:	4868      	ldr	r0, [pc, #416]	; (34fc <nvs_write+0x1b8>)
    335c:	1ac9      	subs	r1, r1, r3
    335e:	08c9      	lsrs	r1, r1, #3
    3360:	0189      	lsls	r1, r1, #6
    3362:	f041 0101 	orr.w	r1, r1, #1
    3366:	f020 f821 	bl	233ac <log_0>
		return -EACCES;
    336a:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    336e:	4628      	mov	r0, r5
    3370:	b009      	add	sp, #36	; 0x24
    3372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3376:	f890 b010 	ldrb.w	fp, [r0, #16]
    337a:	2108      	movs	r1, #8
    337c:	4658      	mov	r0, fp
    337e:	f020 faeb 	bl	23958 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    3382:	89a3      	ldrh	r3, [r4, #12]
    3384:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    3388:	1a9b      	subs	r3, r3, r2
    338a:	42b3      	cmp	r3, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    338c:	4682      	mov	sl, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    338e:	f0c0 80ac 	bcc.w	34ea <nvs_write+0x1a6>
    3392:	b11e      	cbz	r6, 339c <nvs_write+0x58>
	    ((len > 0) && (data == NULL))) {
    3394:	f1b8 0f00 	cmp.w	r8, #0
    3398:	f000 80a7 	beq.w	34ea <nvs_write+0x1a6>
	wlk_addr = fs->ate_wra;
    339c:	6863      	ldr	r3, [r4, #4]
    339e:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    33a0:	aa04      	add	r2, sp, #16
    33a2:	a903      	add	r1, sp, #12
    33a4:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    33a6:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    33a8:	f7ff fd70 	bl	2e8c <nvs_prev_ate>
		if (rc) {
    33ac:	4605      	mov	r5, r0
    33ae:	2800      	cmp	r0, #0
    33b0:	d1dd      	bne.n	336e <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    33b2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    33b6:	454b      	cmp	r3, r9
    33b8:	d005      	beq.n	33c6 <nvs_write+0x82>
		if (wlk_addr == fs->ate_wra) {
    33ba:	6862      	ldr	r2, [r4, #4]
    33bc:	9b03      	ldr	r3, [sp, #12]
    33be:	429a      	cmp	r2, r3
    33c0:	d1ee      	bne.n	33a0 <nvs_write+0x5c>
		if (len == 0) {
    33c2:	b9d6      	cbnz	r6, 33fa <nvs_write+0xb6>
    33c4:	e7d3      	b.n	336e <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    33c6:	a804      	add	r0, sp, #16
    33c8:	f020 fab1 	bl	2392e <nvs_ate_crc8_check>
    33cc:	2800      	cmp	r0, #0
    33ce:	d1f4      	bne.n	33ba <nvs_write+0x76>
		if (len == 0) {
    33d0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    33d4:	b17e      	cbz	r6, 33f6 <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
    33d6:	42b3      	cmp	r3, r6
    33d8:	d10f      	bne.n	33fa <nvs_write+0xb6>
		rd_addr += wlk_ate.offset;
    33da:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    33de:	0c39      	lsrs	r1, r7, #16
    33e0:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    33e2:	4401      	add	r1, r0
    33e4:	4633      	mov	r3, r6
    33e6:	4642      	mov	r2, r8
    33e8:	4620      	mov	r0, r4
    33ea:	f020 fa77 	bl	238dc <nvs_flash_block_cmp>
			if (rc <= 0) {
    33ee:	2800      	cmp	r0, #0
    33f0:	dc03      	bgt.n	33fa <nvs_write+0xb6>
    33f2:	4605      	mov	r5, r0
    33f4:	e7bb      	b.n	336e <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    33f6:	2b00      	cmp	r3, #0
    33f8:	d0b9      	beq.n	336e <nvs_write+0x2a>
	data_size = nvs_al_size(fs, len);
    33fa:	4631      	mov	r1, r6
    33fc:	4658      	mov	r0, fp
    33fe:	f020 faab 	bl	23958 <nvs_al_size.isra.0>
	if (data_size) {
    3402:	4607      	mov	r7, r0
    3404:	2800      	cmp	r0, #0
    3406:	d13d      	bne.n	3484 <nvs_write+0x140>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    3408:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    340c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3410:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
    3412:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 3500 <nvs_write+0x1bc>
    3416:	f01c fd45 	bl	1fea4 <z_impl_k_mutex_lock>
	gc_count = 0;
    341a:	2300      	movs	r3, #0
		if (gc_count == fs->sector_count) {
    341c:	89e2      	ldrh	r2, [r4, #14]
    341e:	4293      	cmp	r3, r2
    3420:	d060      	beq.n	34e4 <nvs_write+0x1a0>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    3422:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
    3426:	1878      	adds	r0, r7, r1
    3428:	4282      	cmp	r2, r0
    342a:	d32e      	bcc.n	348a <nvs_write+0x146>
	entry.part = 0xff;
    342c:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    342e:	a806      	add	r0, sp, #24
	entry.id = id;
    3430:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
    3434:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (u16_t)len;
    3438:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
    343c:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
    3440:	f020 fa81 	bl	23946 <nvs_ate_crc8_update>
	if (!len) {
    3444:	b136      	cbz	r6, 3454 <nvs_write+0x110>
    3446:	68a1      	ldr	r1, [r4, #8]
    3448:	4633      	mov	r3, r6
    344a:	4642      	mov	r2, r8
    344c:	4620      	mov	r0, r4
    344e:	f020 fae2 	bl	23a16 <nvs_flash_al_wrt.part.0>
    3452:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
    3454:	7c20      	ldrb	r0, [r4, #16]
    3456:	4631      	mov	r1, r6
    3458:	f020 fa7e 	bl	23958 <nvs_al_size.isra.0>
    345c:	68a3      	ldr	r3, [r4, #8]
    345e:	4403      	add	r3, r0
    3460:	60a3      	str	r3, [r4, #8]
	if (rc) {
    3462:	2d00      	cmp	r5, #0
    3464:	d144      	bne.n	34f0 <nvs_write+0x1ac>
	rc = nvs_flash_ate_wrt(fs, &entry);
    3466:	a906      	add	r1, sp, #24
    3468:	4620      	mov	r0, r4
    346a:	f020 fb18 	bl	23a9e <nvs_flash_ate_wrt>
	if (rc) {
    346e:	4605      	mov	r5, r0
    3470:	2800      	cmp	r0, #0
    3472:	d13d      	bne.n	34f0 <nvs_write+0x1ac>
	rc = len;
    3474:	4632      	mov	r2, r6
    3476:	9201      	str	r2, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    3478:	4650      	mov	r0, sl
    347a:	f01c fdf1 	bl	20060 <z_impl_k_mutex_unlock>
	return rc;
    347e:	9a01      	ldr	r2, [sp, #4]
    3480:	4615      	mov	r5, r2
    3482:	e774      	b.n	336e <nvs_write+0x2a>
		required_space = data_size + ate_size;
    3484:	4457      	add	r7, sl
    3486:	b2bf      	uxth	r7, r7
    3488:	e7be      	b.n	3408 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    348a:	7c20      	ldrb	r0, [r4, #16]
    348c:	9301      	str	r3, [sp, #4]
    348e:	2108      	movs	r1, #8
    3490:	f020 fa62 	bl	23958 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    3494:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3498:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
    349c:	2100      	movs	r1, #0
    349e:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (u16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    34a2:	1811      	adds	r1, r2, r0
    34a4:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    34a8:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    34aa:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    34ae:	440a      	add	r2, r1
    34b0:	1a10      	subs	r0, r2, r0
    34b2:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    34b4:	a806      	add	r0, sp, #24
    34b6:	f020 fa46 	bl	23946 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    34ba:	a906      	add	r1, sp, #24
    34bc:	4620      	mov	r0, r4
    34be:	f020 faee 	bl	23a9e <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    34c2:	89e0      	ldrh	r0, [r4, #14]
    34c4:	1d21      	adds	r1, r4, #4
    34c6:	f020 fa51 	bl	2396c <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    34ca:	6862      	ldr	r2, [r4, #4]
    34cc:	ea02 020b 	and.w	r2, r2, fp
    34d0:	60a2      	str	r2, [r4, #8]
		rc = nvs_gc(fs);
    34d2:	4620      	mov	r0, r4
    34d4:	f7ff fd4c 	bl	2f70 <nvs_gc>
		if (rc) {
    34d8:	4602      	mov	r2, r0
    34da:	2800      	cmp	r0, #0
    34dc:	d1cb      	bne.n	3476 <nvs_write+0x132>
		gc_count++;
    34de:	9b01      	ldr	r3, [sp, #4]
    34e0:	3301      	adds	r3, #1
		if (gc_count == fs->sector_count) {
    34e2:	e79b      	b.n	341c <nvs_write+0xd8>
			rc = -ENOSPC;
    34e4:	f06f 021b 	mvn.w	r2, #27
    34e8:	e7c5      	b.n	3476 <nvs_write+0x132>
		return -EINVAL;
    34ea:	f06f 0515 	mvn.w	r5, #21
    34ee:	e73e      	b.n	336e <nvs_write+0x2a>
			if (rc) {
    34f0:	462a      	mov	r2, r5
    34f2:	e7c0      	b.n	3476 <nvs_write+0x132>
    34f4:	00028868 	.word	0x00028868
    34f8:	000289e0 	.word	0x000289e0
    34fc:	00029b00 	.word	0x00029b00
    3500:	ffff0000 	.word	0xffff0000

00003504 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, u16_t id, void *data, size_t len,
		      u16_t cnt)
{
    3504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    3508:	461e      	mov	r6, r3
	u32_t wlk_addr, rd_addr;
	u16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    350a:	7c43      	ldrb	r3, [r0, #17]
{
    350c:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
    3510:	4604      	mov	r4, r0
    3512:	460f      	mov	r7, r1
    3514:	4690      	mov	r8, r2
	if (!fs->ready) {
    3516:	b973      	cbnz	r3, 3536 <nvs_read_hist+0x32>
    3518:	4b2b      	ldr	r3, [pc, #172]	; (35c8 <nvs_read_hist+0xc4>)
    351a:	492c      	ldr	r1, [pc, #176]	; (35cc <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
    351c:	482c      	ldr	r0, [pc, #176]	; (35d0 <nvs_read_hist+0xcc>)
    351e:	1ac9      	subs	r1, r1, r3
    3520:	08c9      	lsrs	r1, r1, #3
    3522:	0189      	lsls	r1, r1, #6
    3524:	f041 0101 	orr.w	r1, r1, #1
    3528:	f01f ff40 	bl	233ac <log_0>
		return -EACCES;
    352c:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    3530:	b004      	add	sp, #16
    3532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3536:	7c00      	ldrb	r0, [r0, #16]
    3538:	2108      	movs	r1, #8
    353a:	f020 fa0d 	bl	23958 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    353e:	89a3      	ldrh	r3, [r4, #12]
    3540:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    3544:	42b3      	cmp	r3, r6
    3546:	d33b      	bcc.n	35c0 <nvs_read_hist+0xbc>
	wlk_addr = fs->ate_wra;
    3548:	6863      	ldr	r3, [r4, #4]
    354a:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
    354c:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    3550:	aa02      	add	r2, sp, #8
    3552:	a901      	add	r1, sp, #4
    3554:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    3556:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    3558:	f7ff fc98 	bl	2e8c <nvs_prev_ate>
		if (rc) {
    355c:	2800      	cmp	r0, #0
    355e:	d1e7      	bne.n	3530 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    3560:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    3564:	42bb      	cmp	r3, r7
    3566:	d107      	bne.n	3578 <nvs_read_hist+0x74>
    3568:	a802      	add	r0, sp, #8
    356a:	f020 f9e0 	bl	2392e <nvs_ate_crc8_check>
    356e:	b918      	cbnz	r0, 3578 <nvs_read_hist+0x74>
			cnt_his++;
    3570:	f10a 0a01 	add.w	sl, sl, #1
    3574:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    3578:	6862      	ldr	r2, [r4, #4]
    357a:	9b01      	ldr	r3, [sp, #4]
    357c:	429a      	cmp	r2, r3
    357e:	d018      	beq.n	35b2 <nvs_read_hist+0xae>
	while (cnt_his <= cnt) {
    3580:	45ca      	cmp	sl, r9
    3582:	d9e5      	bls.n	3550 <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    3584:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    3588:	b1bb      	cbz	r3, 35ba <nvs_read_hist+0xb6>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    358a:	45ca      	cmp	sl, r9
    358c:	d315      	bcc.n	35ba <nvs_read_hist+0xb6>
	rd_addr += wlk_ate.offset;
    358e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    3592:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    3594:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    3596:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    359a:	bf28      	it	cs
    359c:	4633      	movcs	r3, r6
    359e:	4642      	mov	r2, r8
    35a0:	4429      	add	r1, r5
    35a2:	4620      	mov	r0, r4
    35a4:	f020 f98c 	bl	238c0 <nvs_flash_rd>
	if (rc) {
    35a8:	2800      	cmp	r0, #0
    35aa:	d1c1      	bne.n	3530 <nvs_read_hist+0x2c>
	return wlk_ate.len;
    35ac:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    35b0:	e7be      	b.n	3530 <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    35b2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    35b6:	42bb      	cmp	r3, r7
    35b8:	d0e4      	beq.n	3584 <nvs_read_hist+0x80>
		return -ENOENT;
    35ba:	f06f 0001 	mvn.w	r0, #1
    35be:	e7b7      	b.n	3530 <nvs_read_hist+0x2c>
		return -EINVAL;
    35c0:	f06f 0015 	mvn.w	r0, #21
    35c4:	e7b4      	b.n	3530 <nvs_read_hist+0x2c>
    35c6:	bf00      	nop
    35c8:	00028868 	.word	0x00028868
    35cc:	000289e0 	.word	0x000289e0
    35d0:	00029b00 	.word	0x00029b00

000035d4 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    35d4:	4b09      	ldr	r3, [pc, #36]	; (35fc <get_flash_area_from_id+0x28>)
{
    35d6:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    35d8:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    35da:	4b09      	ldr	r3, [pc, #36]	; (3600 <get_flash_area_from_id+0x2c>)
{
    35dc:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
    35de:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    35e0:	2300      	movs	r3, #0
    35e2:	429d      	cmp	r5, r3
    35e4:	dc01      	bgt.n	35ea <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    35e6:	2000      	movs	r0, #0
}
    35e8:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    35ea:	0119      	lsls	r1, r3, #4
    35ec:	eb04 1003 	add.w	r0, r4, r3, lsl #4
    35f0:	5c61      	ldrb	r1, [r4, r1]
    35f2:	4291      	cmp	r1, r2
    35f4:	d0f8      	beq.n	35e8 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    35f6:	3301      	adds	r3, #1
    35f8:	e7f3      	b.n	35e2 <get_flash_area_from_id+0xe>
    35fa:	bf00      	nop
    35fc:	00028c28 	.word	0x00028c28
    3600:	20006a0c 	.word	0x20006a0c

00003604 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    3604:	4b08      	ldr	r3, [pc, #32]	; (3628 <flash_area_open+0x24>)
    3606:	681b      	ldr	r3, [r3, #0]
{
    3608:	b510      	push	{r4, lr}
    360a:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    360c:	b12b      	cbz	r3, 361a <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    360e:	f7ff ffe1 	bl	35d4 <get_flash_area_from_id>
	if (area == NULL) {
    3612:	b128      	cbz	r0, 3620 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    3614:	6020      	str	r0, [r4, #0]
	return 0;
    3616:	2000      	movs	r0, #0
}
    3618:	bd10      	pop	{r4, pc}
		return -EACCES;
    361a:	f06f 000c 	mvn.w	r0, #12
    361e:	e7fb      	b.n	3618 <flash_area_open+0x14>
		return -ENOENT;
    3620:	f06f 0001 	mvn.w	r0, #1
    3624:	e7f8      	b.n	3618 <flash_area_open+0x14>
    3626:	bf00      	nop
    3628:	20006a0c 	.word	0x20006a0c

0000362c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, u32_t *cnt, struct flash_sector *ret)
{
    362c:	b530      	push	{r4, r5, lr}
    362e:	b089      	sub	sp, #36	; 0x24
    3630:	460c      	mov	r4, r1
    3632:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    3634:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    3636:	f7ff ffcd 	bl	35d4 <get_flash_area_from_id>
	if (fa == NULL) {
    363a:	b1b8      	cbz	r0, 366c <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    363c:	6843      	ldr	r3, [r0, #4]
    363e:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    3640:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    3642:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    3644:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    3646:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    364a:	2300      	movs	r3, #0
	cb_data->status = 0;
    364c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    3650:	9305      	str	r3, [sp, #20]
    3652:	f01c f877 	bl	1f744 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
    3656:	b160      	cbz	r0, 3672 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    3658:	4907      	ldr	r1, [pc, #28]	; (3678 <flash_area_get_sectors+0x4c>)
    365a:	aa01      	add	r2, sp, #4
    365c:	f024 fd9f 	bl	2819e <flash_page_foreach>
	if (cb_data->status == 0) {
    3660:	9807      	ldr	r0, [sp, #28]
    3662:	b908      	cbnz	r0, 3668 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    3664:	9b05      	ldr	r3, [sp, #20]
    3666:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    3668:	b009      	add	sp, #36	; 0x24
    366a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    366c:	f06f 0015 	mvn.w	r0, #21
    3670:	e7fa      	b.n	3668 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    3672:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    3676:	e7f7      	b.n	3668 <flash_area_get_sectors+0x3c>
    3678:	00023ad7 	.word	0x00023ad7

0000367c <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    367c:	4b0f      	ldr	r3, [pc, #60]	; (36bc <settings_save_one+0x40>)
{
    367e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    3682:	681c      	ldr	r4, [r3, #0]
{
    3684:	4605      	mov	r5, r0
    3686:	460e      	mov	r6, r1
    3688:	4617      	mov	r7, r2
	if (!cs) {
    368a:	b19c      	cbz	r4, 36b4 <settings_save_one+0x38>
	return z_impl_k_mutex_lock(mutex, timeout);
    368c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3690:	480b      	ldr	r0, [pc, #44]	; (36c0 <settings_save_one+0x44>)
    3692:	f01c fc07 	bl	1fea4 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    3696:	6863      	ldr	r3, [r4, #4]
    3698:	4632      	mov	r2, r6
    369a:	f8d3 8008 	ldr.w	r8, [r3, #8]
    369e:	4629      	mov	r1, r5
    36a0:	463b      	mov	r3, r7
    36a2:	4620      	mov	r0, r4
    36a4:	47c0      	blx	r8
    36a6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    36a8:	4805      	ldr	r0, [pc, #20]	; (36c0 <settings_save_one+0x44>)
    36aa:	f01c fcd9 	bl	20060 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    36ae:	4620      	mov	r0, r4
    36b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    36b4:	f06f 0401 	mvn.w	r4, #1
    36b8:	e7f9      	b.n	36ae <settings_save_one+0x32>
    36ba:	bf00      	nop
    36bc:	2000032c 	.word	0x2000032c
    36c0:	200074f8 	.word	0x200074f8

000036c4 <settings_src_register>:
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    36c4:	2300      	movs	r3, #0
    36c6:	6003      	str	r3, [r0, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    36c8:	4b04      	ldr	r3, [pc, #16]	; (36dc <settings_src_register+0x18>)
    36ca:	685a      	ldr	r2, [r3, #4]
    36cc:	b912      	cbnz	r2, 36d4 <settings_src_register+0x10>
	list->head = node;
    36ce:	e9c3 0000 	strd	r0, r0, [r3]
}
    36d2:	4770      	bx	lr
	parent->next = child;
    36d4:	6010      	str	r0, [r2, #0]
	list->tail = node;
    36d6:	6058      	str	r0, [r3, #4]
}
    36d8:	4770      	bx	lr
    36da:	bf00      	nop
    36dc:	20000324 	.word	0x20000324

000036e0 <settings_dst_register>:
	settings_save_dst = cs;
    36e0:	4b01      	ldr	r3, [pc, #4]	; (36e8 <settings_dst_register+0x8>)
    36e2:	6018      	str	r0, [r3, #0]
}
    36e4:	4770      	bx	lr
    36e6:	bf00      	nop
    36e8:	2000032c 	.word	0x2000032c

000036ec <settings_load_subtree>:
{
    36ec:	b530      	push	{r4, r5, lr}
    36ee:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    36f0:	2300      	movs	r3, #0
{
    36f2:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    36f4:	e9cd 3302 	strd	r3, r3, [sp, #8]
    36f8:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    36fa:	480e      	ldr	r0, [pc, #56]	; (3734 <settings_load_subtree+0x48>)
    36fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3700:	f01c fbd0 	bl	1fea4 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    3704:	4b0c      	ldr	r3, [pc, #48]	; (3738 <settings_load_subtree+0x4c>)
    3706:	681c      	ldr	r4, [r3, #0]
    3708:	2c00      	cmp	r4, #0
    370a:	bf38      	it	cc
    370c:	2400      	movcc	r4, #0
    370e:	b13c      	cbz	r4, 3720 <settings_load_subtree+0x34>
		cs->cs_itf->csi_load(cs, &arg);
    3710:	6863      	ldr	r3, [r4, #4]
    3712:	4620      	mov	r0, r4
    3714:	681b      	ldr	r3, [r3, #0]
    3716:	a901      	add	r1, sp, #4
    3718:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    371a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    371c:	2c00      	cmp	r4, #0
    371e:	d1f6      	bne.n	370e <settings_load_subtree+0x22>
	rc = settings_commit_subtree(subtree);
    3720:	4628      	mov	r0, r5
    3722:	f000 f8ef 	bl	3904 <settings_commit_subtree>
    3726:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    3728:	4802      	ldr	r0, [pc, #8]	; (3734 <settings_load_subtree+0x48>)
    372a:	f01c fc99 	bl	20060 <z_impl_k_mutex_unlock>
}
    372e:	4620      	mov	r0, r4
    3730:	b005      	add	sp, #20
    3732:	bd30      	pop	{r4, r5, pc}
    3734:	200074f8 	.word	0x200074f8
    3738:	20000324 	.word	0x20000324

0000373c <settings_load_subtree_direct>:
{
    373c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    373e:	e9cd 0101 	strd	r0, r1, [sp, #4]
    3742:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    3744:	480c      	ldr	r0, [pc, #48]	; (3778 <settings_load_subtree_direct+0x3c>)
    3746:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    374a:	f01c fbab 	bl	1fea4 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    374e:	4b0b      	ldr	r3, [pc, #44]	; (377c <settings_load_subtree_direct+0x40>)
    3750:	681c      	ldr	r4, [r3, #0]
    3752:	2c00      	cmp	r4, #0
    3754:	bf38      	it	cc
    3756:	2400      	movcc	r4, #0
    3758:	b13c      	cbz	r4, 376a <settings_load_subtree_direct+0x2e>
		cs->cs_itf->csi_load(cs, &arg);
    375a:	6863      	ldr	r3, [r4, #4]
    375c:	4620      	mov	r0, r4
    375e:	681b      	ldr	r3, [r3, #0]
    3760:	a901      	add	r1, sp, #4
    3762:	4798      	blx	r3
    3764:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    3766:	2c00      	cmp	r4, #0
    3768:	d1f6      	bne.n	3758 <settings_load_subtree_direct+0x1c>
	return z_impl_k_mutex_unlock(mutex);
    376a:	4803      	ldr	r0, [pc, #12]	; (3778 <settings_load_subtree_direct+0x3c>)
    376c:	f01c fc78 	bl	20060 <z_impl_k_mutex_unlock>
}
    3770:	2000      	movs	r0, #0
    3772:	b004      	add	sp, #16
    3774:	bd10      	pop	{r4, pc}
    3776:	bf00      	nop
    3778:	200074f8 	.word	0x200074f8
    377c:	20000324 	.word	0x20000324

00003780 <settings_store_init>:
	list->head = NULL;
    3780:	4b02      	ldr	r3, [pc, #8]	; (378c <settings_store_init+0xc>)
    3782:	2200      	movs	r2, #0
	list->tail = NULL;
    3784:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    3788:	4770      	bx	lr
    378a:	bf00      	nop
    378c:	20000324 	.word	0x20000324

00003790 <settings_init>:
	list->head = NULL;
    3790:	4b02      	ldr	r3, [pc, #8]	; (379c <settings_init+0xc>)
    3792:	2200      	movs	r2, #0
	list->tail = NULL;
    3794:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    3798:	f7ff bff2 	b.w	3780 <settings_store_init>
    379c:	20000330 	.word	0x20000330

000037a0 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    37a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    37a4:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    37a6:	460e      	mov	r6, r1
    37a8:	b109      	cbz	r1, 37ae <settings_parse_and_lookup+0xe>
		*next = NULL;
    37aa:	2300      	movs	r3, #0
    37ac:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    37ae:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 3860 <settings_parse_and_lookup+0xc0>
    37b2:	4c26      	ldr	r4, [pc, #152]	; (384c <settings_parse_and_lookup+0xac>)
    37b4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 3864 <settings_parse_and_lookup+0xc4>
    37b8:	2500      	movs	r5, #0
    37ba:	46c2      	mov	sl, r8
    37bc:	4544      	cmp	r4, r8
    37be:	d90c      	bls.n	37da <settings_parse_and_lookup+0x3a>
    37c0:	4923      	ldr	r1, [pc, #140]	; (3850 <settings_parse_and_lookup+0xb0>)
    37c2:	4824      	ldr	r0, [pc, #144]	; (3854 <settings_parse_and_lookup+0xb4>)
    37c4:	2394      	movs	r3, #148	; 0x94
    37c6:	464a      	mov	r2, r9
    37c8:	f01f fd7f 	bl	232ca <printk>
    37cc:	4822      	ldr	r0, [pc, #136]	; (3858 <settings_parse_and_lookup+0xb8>)
    37ce:	f01f fd7c 	bl	232ca <printk>
    37d2:	2194      	movs	r1, #148	; 0x94
    37d4:	4648      	mov	r0, r9
    37d6:	f01f fdbb 	bl	23350 <assert_post_action>
    37da:	4554      	cmp	r4, sl
    37dc:	d308      	bcc.n	37f0 <settings_parse_and_lookup+0x50>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    37de:	4b1f      	ldr	r3, [pc, #124]	; (385c <settings_parse_and_lookup+0xbc>)
    37e0:	681c      	ldr	r4, [r3, #0]
    37e2:	b10c      	cbz	r4, 37e8 <settings_parse_and_lookup+0x48>
    37e4:	3c14      	subs	r4, #20
    37e6:	b9c4      	cbnz	r4, 381a <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    37e8:	4628      	mov	r0, r5
    37ea:	b002      	add	sp, #8
    37ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    37f0:	6821      	ldr	r1, [r4, #0]
    37f2:	aa01      	add	r2, sp, #4
    37f4:	4638      	mov	r0, r7
    37f6:	f020 f993 	bl	23b20 <settings_name_steq>
    37fa:	b160      	cbz	r0, 3816 <settings_parse_and_lookup+0x76>
		if (!bestmatch) {
    37fc:	b925      	cbnz	r5, 3808 <settings_parse_and_lookup+0x68>
			if (next) {
    37fe:	b10e      	cbz	r6, 3804 <settings_parse_and_lookup+0x64>
				*next = tmpnext;
    3800:	9b01      	ldr	r3, [sp, #4]
    3802:	6033      	str	r3, [r6, #0]
    3804:	4625      	mov	r5, r4
    3806:	e006      	b.n	3816 <settings_parse_and_lookup+0x76>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    3808:	6829      	ldr	r1, [r5, #0]
    380a:	6820      	ldr	r0, [r4, #0]
    380c:	2200      	movs	r2, #0
    380e:	f020 f987 	bl	23b20 <settings_name_steq>
    3812:	2800      	cmp	r0, #0
    3814:	d1f3      	bne.n	37fe <settings_parse_and_lookup+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3816:	3414      	adds	r4, #20
    3818:	e7d0      	b.n	37bc <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    381a:	6821      	ldr	r1, [r4, #0]
    381c:	aa01      	add	r2, sp, #4
    381e:	4638      	mov	r0, r7
    3820:	f020 f97e 	bl	23b20 <settings_name_steq>
    3824:	b160      	cbz	r0, 3840 <settings_parse_and_lookup+0xa0>
		if (!bestmatch) {
    3826:	b925      	cbnz	r5, 3832 <settings_parse_and_lookup+0x92>
			if (next) {
    3828:	b10e      	cbz	r6, 382e <settings_parse_and_lookup+0x8e>
				*next = tmpnext;
    382a:	9b01      	ldr	r3, [sp, #4]
    382c:	6033      	str	r3, [r6, #0]
    382e:	4625      	mov	r5, r4
    3830:	e006      	b.n	3840 <settings_parse_and_lookup+0xa0>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    3832:	6829      	ldr	r1, [r5, #0]
    3834:	6820      	ldr	r0, [r4, #0]
    3836:	2200      	movs	r2, #0
    3838:	f020 f972 	bl	23b20 <settings_name_steq>
    383c:	2800      	cmp	r0, #0
    383e:	d1f3      	bne.n	3828 <settings_parse_and_lookup+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
    3840:	f114 0f14 	cmn.w	r4, #20
    3844:	d0d0      	beq.n	37e8 <settings_parse_and_lookup+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3846:	6964      	ldr	r4, [r4, #20]
    3848:	e7cb      	b.n	37e2 <settings_parse_and_lookup+0x42>
    384a:	bf00      	nop
    384c:	0002882c 	.word	0x0002882c
    3850:	00029c22 	.word	0x00029c22
    3854:	000297e6 	.word	0x000297e6
    3858:	00029c4a 	.word	0x00029c4a
    385c:	20000330 	.word	0x20000330
    3860:	00028868 	.word	0x00028868
    3864:	00029bf0 	.word	0x00029bf0

00003868 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    3868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    386c:	b085      	sub	sp, #20
    386e:	4605      	mov	r5, r0
    3870:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
    3874:	9003      	str	r0, [sp, #12]
{
    3876:	460c      	mov	r4, r1
    3878:	4616      	mov	r6, r2
    387a:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
    387c:	f1b8 0f00 	cmp.w	r8, #0
    3880:	d018      	beq.n	38b4 <settings_call_set_handler+0x4c>
    3882:	f8d8 1000 	ldr.w	r1, [r8]
    3886:	b181      	cbz	r1, 38aa <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    3888:	aa03      	add	r2, sp, #12
    388a:	f020 f949 	bl	23b20 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    388e:	b960      	cbnz	r0, 38aa <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    3890:	2000      	movs	r0, #0
    3892:	e007      	b.n	38a4 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    3894:	f8d8 3008 	ldr.w	r3, [r8, #8]
    3898:	9300      	str	r3, [sp, #0]
    389a:	9803      	ldr	r0, [sp, #12]
    389c:	463b      	mov	r3, r7
    389e:	4632      	mov	r2, r6
    38a0:	4621      	mov	r1, r4
    38a2:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    38a4:	b005      	add	sp, #20
    38a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    38aa:	f8d8 9004 	ldr.w	r9, [r8, #4]
    38ae:	f1b9 0f00 	cmp.w	r9, #0
    38b2:	d1ef      	bne.n	3894 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
    38b4:	a903      	add	r1, sp, #12
    38b6:	4628      	mov	r0, r5
    38b8:	f7ff ff72 	bl	37a0 <settings_parse_and_lookup>
		if (!ch) {
    38bc:	2800      	cmp	r0, #0
    38be:	d0e7      	beq.n	3890 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    38c0:	f8d0 8008 	ldr.w	r8, [r0, #8]
    38c4:	9803      	ldr	r0, [sp, #12]
    38c6:	4632      	mov	r2, r6
    38c8:	463b      	mov	r3, r7
    38ca:	4621      	mov	r1, r4
    38cc:	47c0      	blx	r8
		if (rc != 0) {
    38ce:	4606      	mov	r6, r0
    38d0:	2800      	cmp	r0, #0
    38d2:	d0dd      	beq.n	3890 <settings_call_set_handler+0x28>
    38d4:	4b08      	ldr	r3, [pc, #32]	; (38f8 <settings_call_set_handler+0x90>)
    38d6:	4c09      	ldr	r4, [pc, #36]	; (38fc <settings_call_set_handler+0x94>)
			LOG_ERR("set-value failure. key: %s error(%d)",
    38d8:	4628      	mov	r0, r5
    38da:	1ae4      	subs	r4, r4, r3
    38dc:	08e4      	lsrs	r4, r4, #3
    38de:	f7fe fd2f 	bl	2340 <log_strdup>
    38e2:	01a4      	lsls	r4, r4, #6
    38e4:	f044 0401 	orr.w	r4, r4, #1
    38e8:	4601      	mov	r1, r0
    38ea:	4623      	mov	r3, r4
    38ec:	4804      	ldr	r0, [pc, #16]	; (3900 <settings_call_set_handler+0x98>)
    38ee:	4632      	mov	r2, r6
    38f0:	f01f fd7d 	bl	233ee <log_2>
    38f4:	e7cc      	b.n	3890 <settings_call_set_handler+0x28>
    38f6:	bf00      	nop
    38f8:	00028868 	.word	0x00028868
    38fc:	00028a10 	.word	0x00028a10
    3900:	00029c69 	.word	0x00029c69

00003904 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    3904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3908:	4f23      	ldr	r7, [pc, #140]	; (3998 <settings_commit_subtree+0x94>)
    390a:	4c24      	ldr	r4, [pc, #144]	; (399c <settings_commit_subtree+0x98>)
    390c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 39b0 <settings_commit_subtree+0xac>
{
    3910:	4606      	mov	r6, r0
	rc = 0;
    3912:	2500      	movs	r5, #0
    3914:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3916:	42bc      	cmp	r4, r7
    3918:	d90c      	bls.n	3934 <settings_commit_subtree+0x30>
    391a:	4921      	ldr	r1, [pc, #132]	; (39a0 <settings_commit_subtree+0x9c>)
    391c:	4821      	ldr	r0, [pc, #132]	; (39a4 <settings_commit_subtree+0xa0>)
    391e:	23f4      	movs	r3, #244	; 0xf4
    3920:	4642      	mov	r2, r8
    3922:	f01f fcd2 	bl	232ca <printk>
    3926:	4820      	ldr	r0, [pc, #128]	; (39a8 <settings_commit_subtree+0xa4>)
    3928:	f01f fccf 	bl	232ca <printk>
    392c:	21f4      	movs	r1, #244	; 0xf4
    392e:	4640      	mov	r0, r8
    3930:	f01f fd0e 	bl	23350 <assert_post_action>
    3934:	454c      	cmp	r4, r9
    3936:	d307      	bcc.n	3948 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    3938:	4b1c      	ldr	r3, [pc, #112]	; (39ac <settings_commit_subtree+0xa8>)
    393a:	681c      	ldr	r4, [r3, #0]
    393c:	b10c      	cbz	r4, 3942 <settings_commit_subtree+0x3e>
    393e:	3c14      	subs	r4, #20
    3940:	b9a4      	cbnz	r4, 396c <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    3942:	4628      	mov	r0, r5
    3944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3948:	b91e      	cbnz	r6, 3952 <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
    394a:	68e3      	ldr	r3, [r4, #12]
    394c:	b94b      	cbnz	r3, 3962 <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    394e:	3414      	adds	r4, #20
    3950:	e7e1      	b.n	3916 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3952:	6820      	ldr	r0, [r4, #0]
    3954:	2200      	movs	r2, #0
    3956:	4631      	mov	r1, r6
    3958:	f020 f8e2 	bl	23b20 <settings_name_steq>
    395c:	2800      	cmp	r0, #0
    395e:	d1f4      	bne.n	394a <settings_commit_subtree+0x46>
    3960:	e7f5      	b.n	394e <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
    3962:	4798      	blx	r3
				rc = rc2;
    3964:	2d00      	cmp	r5, #0
    3966:	bf08      	it	eq
    3968:	4605      	moveq	r5, r0
    396a:	e7f0      	b.n	394e <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    396c:	b936      	cbnz	r6, 397c <settings_commit_subtree+0x78>
		if (ch->h_commit) {
    396e:	68e3      	ldr	r3, [r4, #12]
    3970:	b963      	cbnz	r3, 398c <settings_commit_subtree+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
    3972:	f114 0f14 	cmn.w	r4, #20
    3976:	d0e4      	beq.n	3942 <settings_commit_subtree+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3978:	6964      	ldr	r4, [r4, #20]
    397a:	e7df      	b.n	393c <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    397c:	6820      	ldr	r0, [r4, #0]
    397e:	2200      	movs	r2, #0
    3980:	4631      	mov	r1, r6
    3982:	f020 f8cd 	bl	23b20 <settings_name_steq>
    3986:	2800      	cmp	r0, #0
    3988:	d1f1      	bne.n	396e <settings_commit_subtree+0x6a>
    398a:	e7f2      	b.n	3972 <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
    398c:	4798      	blx	r3
				rc = rc2;
    398e:	2d00      	cmp	r5, #0
    3990:	bf08      	it	eq
    3992:	4605      	moveq	r5, r0
    3994:	e7ed      	b.n	3972 <settings_commit_subtree+0x6e>
    3996:	bf00      	nop
    3998:	00028868 	.word	0x00028868
    399c:	0002882c 	.word	0x0002882c
    39a0:	00029c22 	.word	0x00029c22
    39a4:	000297e6 	.word	0x000297e6
    39a8:	00029c4a 	.word	0x00029c4a
    39ac:	20000330 	.word	0x20000330
    39b0:	00029bf0 	.word	0x00029bf0

000039b4 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    39b4:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    39b6:	4c06      	ldr	r4, [pc, #24]	; (39d0 <settings_subsys_init+0x1c>)
    39b8:	7823      	ldrb	r3, [r4, #0]
    39ba:	b93b      	cbnz	r3, 39cc <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    39bc:	f7ff fee8 	bl	3790 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    39c0:	f000 f864 	bl	3a8c <settings_backend_init>

	if (!err) {
    39c4:	b908      	cbnz	r0, 39ca <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    39c6:	2301      	movs	r3, #1
    39c8:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    39ca:	bd10      	pop	{r4, pc}
		return 0;
    39cc:	2000      	movs	r0, #0
    39ce:	e7fc      	b.n	39ca <settings_subsys_init+0x16>
    39d0:	20001d8a 	.word	0x20001d8a

000039d4 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    39d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	u16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    39d8:	8e84      	ldrh	r4, [r0, #52]	; 0x34
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    39da:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 3a88 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    39de:	3401      	adds	r4, #1
{
    39e0:	b098      	sub	sp, #96	; 0x60
    39e2:	4680      	mov	r8, r0
    39e4:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
    39e6:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    39e8:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    39ec:	1e65      	subs	r5, r4, #1
    39ee:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    39f0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    39f4:	d045      	beq.n	3a82 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    39f6:	234a      	movs	r3, #74	; 0x4a
    39f8:	aa05      	add	r2, sp, #20
    39fa:	4629      	mov	r1, r5
    39fc:	4630      	mov	r0, r6
    39fe:	f020 f863 	bl	23ac8 <nvs_read>
    3a02:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    3a06:	343f      	adds	r4, #63	; 0x3f
    3a08:	b2a4      	uxth	r4, r4
    3a0a:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    3a0c:	4621      	mov	r1, r4
    3a0e:	2301      	movs	r3, #1
    3a10:	f10d 020b 	add.w	r2, sp, #11
    3a14:	4630      	mov	r0, r6
    3a16:	f020 f857 	bl	23ac8 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    3a1a:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    3a1c:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    3a1e:	dc03      	bgt.n	3a28 <settings_nvs_load+0x54>
    3a20:	2800      	cmp	r0, #0
    3a22:	dc03      	bgt.n	3a2c <settings_nvs_load+0x58>
{
    3a24:	462c      	mov	r4, r5
    3a26:	e7e1      	b.n	39ec <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    3a28:	2800      	cmp	r0, #0
    3a2a:	dc16      	bgt.n	3a5a <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    3a2c:	f8b8 3034 	ldrh.w	r3, [r8, #52]	; 0x34
    3a30:	42ab      	cmp	r3, r5
    3a32:	d109      	bne.n	3a48 <settings_nvs_load+0x74>
				cf->last_name_id--;
    3a34:	4642      	mov	r2, r8
    3a36:	1e6b      	subs	r3, r5, #1
    3a38:	f822 3f34 	strh.w	r3, [r2, #52]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    3a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3a40:	2302      	movs	r3, #2
    3a42:	4630      	mov	r0, r6
    3a44:	f7ff fc7e 	bl	3344 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    3a48:	4629      	mov	r1, r5
    3a4a:	4630      	mov	r0, r6
    3a4c:	f020 f838 	bl	23ac0 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    3a50:	4621      	mov	r1, r4
    3a52:	4630      	mov	r0, r6
    3a54:	f020 f834 	bl	23ac0 <nvs_delete>
			continue;
    3a58:	e7e4      	b.n	3a24 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    3a5a:	ab18      	add	r3, sp, #96	; 0x60
    3a5c:	441f      	add	r7, r3
    3a5e:	2300      	movs	r3, #0
    3a60:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    3a64:	4652      	mov	r2, sl
    3a66:	f8cd 9000 	str.w	r9, [sp]
    3a6a:	ab03      	add	r3, sp, #12
    3a6c:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
    3a6e:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    3a70:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    3a74:	f7ff fef8 	bl	3868 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    3a78:	2800      	cmp	r0, #0
    3a7a:	d0d3      	beq.n	3a24 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    3a7c:	b018      	add	sp, #96	; 0x60
    3a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a82:	2000      	movs	r0, #0
	return ret;
    3a84:	e7fa      	b.n	3a7c <settings_nvs_load+0xa8>
    3a86:	bf00      	nop
    3a88:	00023b93 	.word	0x00023b93

00003a8c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    3a8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	u16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	u32_t sector_cnt = 1;
    3a8e:	2301      	movs	r3, #1

	rc = flash_area_open(DT_FLASH_AREA_STORAGE_ID, &fa);
    3a90:	4669      	mov	r1, sp
    3a92:	2004      	movs	r0, #4
	u32_t sector_cnt = 1;
    3a94:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(DT_FLASH_AREA_STORAGE_ID, &fa);
    3a96:	f7ff fdb5 	bl	3604 <flash_area_open>
	if (rc) {
    3a9a:	4604      	mov	r4, r0
    3a9c:	2800      	cmp	r0, #0
    3a9e:	d136      	bne.n	3b0e <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(DT_FLASH_AREA_STORAGE_ID, &sector_cnt,
    3aa0:	aa02      	add	r2, sp, #8
    3aa2:	a901      	add	r1, sp, #4
    3aa4:	2004      	movs	r0, #4
    3aa6:	f7ff fdc1 	bl	362c <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    3aaa:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(DT_FLASH_AREA_STORAGE_ID, &sector_cnt,
    3aae:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    3ab0:	d02d      	beq.n	3b0e <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    3ab2:	b138      	cbz	r0, 3ac4 <settings_backend_init+0x38>
    3ab4:	340c      	adds	r4, #12
    3ab6:	d005      	beq.n	3ac4 <settings_backend_init+0x38>
		k_panic();
    3ab8:	4040      	eors	r0, r0
    3aba:	f380 8811 	msr	BASEPRI, r0
    3abe:	f04f 0004 	mov.w	r0, #4
    3ac2:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    3ac4:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    3ac6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    3aca:	d223      	bcs.n	3b14 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    3acc:	9a00      	ldr	r2, [sp, #0]
    3ace:	2300      	movs	r3, #0
    3ad0:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
    3ad2:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
    3ad4:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    3ad6:	4285      	cmp	r5, r0
    3ad8:	b29c      	uxth	r4, r3
    3ada:	d303      	bcc.n	3ae4 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    3adc:	3301      	adds	r3, #1
    3ade:	2b08      	cmp	r3, #8
    3ae0:	d1f8      	bne.n	3ad4 <settings_backend_init+0x48>
    3ae2:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    3ae4:	4d0d      	ldr	r5, [pc, #52]	; (3b1c <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    3ae6:	6853      	ldr	r3, [r2, #4]
    3ae8:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    3aea:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    3aec:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    3aee:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    3af0:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    3af2:	63ab      	str	r3, [r5, #56]	; 0x38
	rc = settings_nvs_backend_init(&default_settings_nvs);
    3af4:	f020 f8e2 	bl	23cbc <settings_nvs_backend_init>
	if (rc) {
    3af8:	4604      	mov	r4, r0
    3afa:	b940      	cbnz	r0, 3b0e <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    3afc:	4e08      	ldr	r6, [pc, #32]	; (3b20 <settings_backend_init+0x94>)
    3afe:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    3b00:	4628      	mov	r0, r5
    3b02:	f7ff fddf 	bl	36c4 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    3b06:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    3b08:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    3b0a:	f7ff fde9 	bl	36e0 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    3b0e:	4620      	mov	r0, r4
    3b10:	b004      	add	sp, #16
    3b12:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    3b14:	f06f 0424 	mvn.w	r4, #36	; 0x24
    3b18:	e7f9      	b.n	3b0e <settings_backend_init+0x82>
    3b1a:	bf00      	nop
    3b1c:	20000338 	.word	0x20000338
    3b20:	20006a10 	.word	0x20006a10

00003b24 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    3b24:	b510      	push	{r4, lr}
    3b26:	4807      	ldr	r0, [pc, #28]	; (3b44 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    3b28:	4c07      	ldr	r4, [pc, #28]	; (3b48 <uart_console_init+0x24>)
    3b2a:	f01b fe0b 	bl	1f744 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    3b2e:	4b07      	ldr	r3, [pc, #28]	; (3b4c <uart_console_init+0x28>)
    3b30:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    3b32:	4620      	mov	r0, r4
    3b34:	f002 f864 	bl	5c00 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3b38:	4620      	mov	r0, r4
    3b3a:	f7fe f90f 	bl	1d5c <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
    3b3e:	2000      	movs	r0, #0
    3b40:	bd10      	pop	{r4, pc}
    3b42:	bf00      	nop
    3b44:	00029a9f 	.word	0x00029a9f
    3b48:	00003b51 	.word	0x00003b51
    3b4c:	20000374 	.word	0x20000374

00003b50 <console_out>:
	if ('\n' == c) {
    3b50:	280a      	cmp	r0, #10
{
    3b52:	b538      	push	{r3, r4, r5, lr}
    3b54:	4d07      	ldr	r5, [pc, #28]	; (3b74 <console_out+0x24>)
    3b56:	4604      	mov	r4, r0
	if ('\n' == c) {
    3b58:	d104      	bne.n	3b64 <console_out+0x14>
    3b5a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    3b5c:	6843      	ldr	r3, [r0, #4]
    3b5e:	210d      	movs	r1, #13
    3b60:	685b      	ldr	r3, [r3, #4]
    3b62:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    3b64:	6828      	ldr	r0, [r5, #0]
    3b66:	6843      	ldr	r3, [r0, #4]
    3b68:	b2e1      	uxtb	r1, r4
    3b6a:	685b      	ldr	r3, [r3, #4]
    3b6c:	4798      	blx	r3
}
    3b6e:	4620      	mov	r0, r4
    3b70:	bd38      	pop	{r3, r4, r5, pc}
    3b72:	bf00      	nop
    3b74:	20000374 	.word	0x20000374

00003b78 <get_status>:
	return &config->subsys[type];
}

static enum clock_control_status get_status(struct device *dev,
					    clock_control_subsys_t subsys)
{
    3b78:	b538      	push	{r3, r4, r5, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
	struct nrf_clock_control_sub_data *data;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3b7a:	b2cc      	uxtb	r4, r1
    3b7c:	2c01      	cmp	r4, #1
{
    3b7e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3b80:	d909      	bls.n	3b96 <get_status+0x1e>
    3b82:	490b      	ldr	r1, [pc, #44]	; (3bb0 <get_status+0x38>)
    3b84:	480b      	ldr	r0, [pc, #44]	; (3bb4 <get_status+0x3c>)
    3b86:	4a0c      	ldr	r2, [pc, #48]	; (3bb8 <get_status+0x40>)
    3b88:	237d      	movs	r3, #125	; 0x7d
    3b8a:	f01f fb9e 	bl	232ca <printk>
    3b8e:	480a      	ldr	r0, [pc, #40]	; (3bb8 <get_status+0x40>)
    3b90:	217d      	movs	r1, #125	; 0x7d
    3b92:	f01f fbdd 	bl	23350 <assert_post_action>
	data = get_sub_data(dev, type);
    3b96:	68ab      	ldr	r3, [r5, #8]
	if (data->started) {
    3b98:	210c      	movs	r1, #12
    3b9a:	fb04 3101 	mla	r1, r4, r1, r3
    3b9e:	7a4b      	ldrb	r3, [r1, #9]
    3ba0:	b923      	cbnz	r3, 3bac <get_status+0x34>
		return CLOCK_CONTROL_STATUS_ON;
	}

	if (data->ref > 0) {
    3ba2:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    3ba4:	fab0 f080 	clz	r0, r0
    3ba8:	0940      	lsrs	r0, r0, #5
		return CLOCK_CONTROL_STATUS_STARTING;
	}

	return CLOCK_CONTROL_STATUS_OFF;
}
    3baa:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
    3bac:	2002      	movs	r0, #2
    3bae:	e7fc      	b.n	3baa <get_status+0x32>
    3bb0:	00029ccf 	.word	0x00029ccf
    3bb4:	000297e6 	.word	0x000297e6
    3bb8:	00029c94 	.word	0x00029c94

00003bbc <clock_stop>:

static int clock_stop(struct device *dev, clock_control_subsys_t subsys)
{
    3bbc:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_sub_config *config;
	struct nrf_clock_control_sub_data *data;
	int err = 0;
	int key;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3bbe:	b2cc      	uxtb	r4, r1
    3bc0:	2c01      	cmp	r4, #1
{
    3bc2:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3bc4:	d909      	bls.n	3bda <clock_stop+0x1e>
    3bc6:	4919      	ldr	r1, [pc, #100]	; (3c2c <clock_stop+0x70>)
    3bc8:	4819      	ldr	r0, [pc, #100]	; (3c30 <clock_stop+0x74>)
    3bca:	4a1a      	ldr	r2, [pc, #104]	; (3c34 <clock_stop+0x78>)
    3bcc:	2392      	movs	r3, #146	; 0x92
    3bce:	f01f fb7c 	bl	232ca <printk>
    3bd2:	4818      	ldr	r0, [pc, #96]	; (3c34 <clock_stop+0x78>)
    3bd4:	2192      	movs	r1, #146	; 0x92
    3bd6:	f01f fbbb 	bl	23350 <assert_post_action>
	const struct nrf_clock_control_config *config =
    3bda:	682b      	ldr	r3, [r5, #0]
	config = get_sub_config(dev, type);
	data = get_sub_data(dev, type);
    3bdc:	68ad      	ldr	r5, [r5, #8]
	const struct nrf_clock_control_config *config =
    3bde:	6899      	ldr	r1, [r3, #8]
	__asm__ volatile(
    3be0:	f04f 0320 	mov.w	r3, #32
    3be4:	f3ef 8611 	mrs	r6, BASEPRI
    3be8:	f383 8811 	msr	BASEPRI, r3
    3bec:	f3bf 8f6f 	isb	sy

	key = irq_lock();
	if (data->ref == 0) {
    3bf0:	220c      	movs	r2, #12
    3bf2:	4362      	muls	r2, r4
    3bf4:	18ab      	adds	r3, r5, r2
    3bf6:	7a18      	ldrb	r0, [r3, #8]
    3bf8:	b190      	cbz	r0, 3c20 <clock_stop+0x64>
		err = -EALREADY;
		goto out;
	}
	data->ref--;
    3bfa:	3801      	subs	r0, #1
    3bfc:	b2c0      	uxtb	r0, r0
    3bfe:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
    3c00:	b988      	cbnz	r0, 3c26 <clock_stop+0x6a>
		if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)
			&& (subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
			z_nrf_clock_calibration_lfclk_stopped();
		}

		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    3c02:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
	list->head = NULL;
    3c06:	50a8      	str	r0, [r5, r2]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3c08:	78e2      	ldrb	r2, [r4, #3]
	list->tail = NULL;
    3c0a:	6058      	str	r0, [r3, #4]
    3c0c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3c10:	2101      	movs	r1, #1
    3c12:	6011      	str	r1, [r2, #0]

		data->started = false;
    3c14:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
    3c16:	f386 8811 	msr	BASEPRI, r6
    3c1a:	f3bf 8f6f 	isb	sy

out:
	irq_unlock(key);

	return err;
}
    3c1e:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
    3c20:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3c24:	e7f7      	b.n	3c16 <clock_stop+0x5a>
	int err = 0;
    3c26:	2000      	movs	r0, #0
    3c28:	e7f5      	b.n	3c16 <clock_stop+0x5a>
    3c2a:	bf00      	nop
    3c2c:	00029ccf 	.word	0x00029ccf
    3c30:	000297e6 	.word	0x000297e6
    3c34:	00029c94 	.word	0x00029c94

00003c38 <clkstarted_handle.constprop.0>:
		    DT_INST_0_NORDIC_NRF_CLOCK_LABEL,
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    3c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      enum clock_control_nrf_type type)
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    3c3a:	4e12      	ldr	r6, [pc, #72]	; (3c84 <clkstarted_handle.constprop.0+0x4c>)
    3c3c:	68b3      	ldr	r3, [r6, #8]
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    3c3e:	240c      	movs	r4, #12
    3c40:	fb04 3400 	mla	r4, r4, r0, r3
    3c44:	2301      	movs	r3, #1
static void clkstarted_handle(struct device *dev,
    3c46:	4605      	mov	r5, r0
	sub_data->started = true;
    3c48:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    3c4a:	f04f 0320 	mov.w	r3, #32
    3c4e:	f3ef 8111 	mrs	r1, BASEPRI
    3c52:	f383 8811 	msr	BASEPRI, r3
    3c56:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    3c5a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    3c5c:	b12b      	cbz	r3, 3c6a <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3c5e:	6860      	ldr	r0, [r4, #4]
    3c60:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    3c62:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3c64:	4283      	cmp	r3, r0
	list->tail = node;
    3c66:	bf08      	it	eq
    3c68:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    3c6a:	f381 8811 	msr	BASEPRI, r1
    3c6e:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    3c72:	b903      	cbnz	r3, 3c76 <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    3c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    3c76:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
    3c7a:	4629      	mov	r1, r5
    3c7c:	4630      	mov	r0, r6
    3c7e:	47b8      	blx	r7
    3c80:	e7e3      	b.n	3c4a <clkstarted_handle.constprop.0+0x12>
    3c82:	bf00      	nop
    3c84:	200073a0 	.word	0x200073a0

00003c88 <clock_async_start>:
{
    3c88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3c8c:	b2cf      	uxtb	r7, r1
    3c8e:	2f01      	cmp	r7, #1
{
    3c90:	4680      	mov	r8, r0
    3c92:	460e      	mov	r6, r1
    3c94:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3c96:	d909      	bls.n	3cac <clock_async_start+0x24>
    3c98:	4946      	ldr	r1, [pc, #280]	; (3db4 <clock_async_start+0x12c>)
    3c9a:	4847      	ldr	r0, [pc, #284]	; (3db8 <clock_async_start+0x130>)
    3c9c:	4a47      	ldr	r2, [pc, #284]	; (3dbc <clock_async_start+0x134>)
    3c9e:	23ed      	movs	r3, #237	; 0xed
    3ca0:	f01f fb13 	bl	232ca <printk>
    3ca4:	4845      	ldr	r0, [pc, #276]	; (3dbc <clock_async_start+0x134>)
    3ca6:	21ed      	movs	r1, #237	; 0xed
    3ca8:	f01f fb52 	bl	23350 <assert_post_action>
	const struct nrf_clock_control_config *config =
    3cac:	f8d8 3000 	ldr.w	r3, [r8]
	clk_data = get_sub_data(dev, type);
    3cb0:	f8d8 9008 	ldr.w	r9, [r8, #8]
	const struct nrf_clock_control_config *config =
    3cb4:	f8d3 a008 	ldr.w	sl, [r3, #8]
	__ASSERT_NO_MSG((data == NULL) ||
    3cb8:	2c00      	cmp	r4, #0
    3cba:	d15c      	bne.n	3d76 <clock_async_start+0xee>
	__asm__ volatile(
    3cbc:	f04f 0320 	mov.w	r3, #32
    3cc0:	f3ef 8b11 	mrs	fp, BASEPRI
    3cc4:	f383 8811 	msr	BASEPRI, r3
    3cc8:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    3ccc:	230c      	movs	r3, #12
    3cce:	fb07 9303 	mla	r3, r7, r3, r9
    3cd2:	7a1d      	ldrb	r5, [r3, #8]
    3cd4:	3501      	adds	r5, #1
    3cd6:	b2ed      	uxtb	r5, r5
    3cd8:	721d      	strb	r5, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
    3cda:	b94d      	cbnz	r5, 3cf0 <clock_async_start+0x68>
    3cdc:	4938      	ldr	r1, [pc, #224]	; (3dc0 <clock_async_start+0x138>)
    3cde:	4836      	ldr	r0, [pc, #216]	; (3db8 <clock_async_start+0x130>)
    3ce0:	4a36      	ldr	r2, [pc, #216]	; (3dbc <clock_async_start+0x134>)
    3ce2:	23fe      	movs	r3, #254	; 0xfe
    3ce4:	f01f faf1 	bl	232ca <printk>
    3ce8:	4834      	ldr	r0, [pc, #208]	; (3dbc <clock_async_start+0x134>)
    3cea:	21fe      	movs	r1, #254	; 0xfe
    3cec:	f01f fb30 	bl	23350 <assert_post_action>
	__asm__ volatile(
    3cf0:	f38b 8811 	msr	BASEPRI, fp
    3cf4:	f3bf 8f6f 	isb	sy
	if (data) {
    3cf8:	b344      	cbz	r4, 3d4c <clock_async_start+0xc4>
    p_reg->INTENCLR = mask;
    3cfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3cfe:	2203      	movs	r2, #3
    3d00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		already_started = clk_data->started;
    3d04:	220c      	movs	r2, #12
    3d06:	437a      	muls	r2, r7
    3d08:	eb09 0302 	add.w	r3, r9, r2
    3d0c:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
    3d0e:	b991      	cbnz	r1, 3d36 <clock_async_start+0xae>
	__asm__ volatile(
    3d10:	f04f 0020 	mov.w	r0, #32
    3d14:	f3ef 8c11 	mrs	ip, BASEPRI
    3d18:	f380 8811 	msr	BASEPRI, r0
    3d1c:	f3bf 8f6f 	isb	sy
	parent->next = child;
    3d20:	6021      	str	r1, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    3d22:	6858      	ldr	r0, [r3, #4]
    3d24:	2800      	cmp	r0, #0
    3d26:	d13e      	bne.n	3da6 <clock_async_start+0x11e>
	list->tail = node;
    3d28:	605c      	str	r4, [r3, #4]
	list->head = node;
    3d2a:	f849 4002 	str.w	r4, [r9, r2]
	__asm__ volatile(
    3d2e:	f38c 8811 	msr	BASEPRI, ip
    3d32:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    3d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d3a:	2203      	movs	r2, #3
    3d3c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		if (already_started) {
    3d40:	b121      	cbz	r1, 3d4c <clock_async_start+0xc4>
			data->cb(dev, subsys, data->user_data);
    3d42:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3d46:	4631      	mov	r1, r6
    3d48:	4640      	mov	r0, r8
    3d4a:	4798      	blx	r3
	if (ref == 1) {
    3d4c:	2d01      	cmp	r5, #1
    3d4e:	d110      	bne.n	3d72 <clock_async_start+0xea>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
    3d50:	2e01      	cmp	r6, #1
    3d52:	d107      	bne.n	3d64 <clock_async_start+0xdc>
	if (!once) {
    3d54:	4c1b      	ldr	r4, [pc, #108]	; (3dc4 <clock_async_start+0x13c>)
    3d56:	7823      	ldrb	r3, [r4, #0]
    3d58:	b923      	cbnz	r3, 3d64 <clock_async_start+0xdc>
	z_impl_k_busy_wait(usec_to_wait);
    3d5a:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    3d5e:	f024 fb18 	bl	28392 <z_impl_k_busy_wait>
		once = true;
    3d62:	7026      	strb	r6, [r4, #0]
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    3d64:	eb0a 07c7 	add.w	r7, sl, r7, lsl #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d68:	2201      	movs	r2, #1
    3d6a:	78bb      	ldrb	r3, [r7, #2]
    3d6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3d70:	601a      	str	r2, [r3, #0]
	return 0;
    3d72:	2000      	movs	r0, #0
    3d74:	e01c      	b.n	3db0 <clock_async_start+0x128>
	__ASSERT_NO_MSG((data == NULL) ||
    3d76:	6863      	ldr	r3, [r4, #4]
    3d78:	b94b      	cbnz	r3, 3d8e <clock_async_start+0x106>
    3d7a:	4913      	ldr	r1, [pc, #76]	; (3dc8 <clock_async_start+0x140>)
    3d7c:	480e      	ldr	r0, [pc, #56]	; (3db8 <clock_async_start+0x130>)
    3d7e:	4a0f      	ldr	r2, [pc, #60]	; (3dbc <clock_async_start+0x134>)
    3d80:	23f1      	movs	r3, #241	; 0xf1
    3d82:	f01f faa2 	bl	232ca <printk>
    3d86:	480d      	ldr	r0, [pc, #52]	; (3dbc <clock_async_start+0x134>)
    3d88:	21f1      	movs	r1, #241	; 0xf1
    3d8a:	f01f fae1 	bl	23350 <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
    3d8e:	230c      	movs	r3, #12
    3d90:	437b      	muls	r3, r7
    3d92:	f859 3003 	ldr.w	r3, [r9, r3]
		if (item == node) {
    3d96:	429c      	cmp	r4, r3
    3d98:	d008      	beq.n	3dac <clock_async_start+0x124>
Z_GENLIST_PEEK_NEXT(slist, snode)
    3d9a:	2b00      	cmp	r3, #0
    3d9c:	d08e      	beq.n	3cbc <clock_async_start+0x34>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3d9e:	681b      	ldr	r3, [r3, #0]
	} while (item);
    3da0:	2b00      	cmp	r3, #0
    3da2:	d1f8      	bne.n	3d96 <clock_async_start+0x10e>
    3da4:	e78a      	b.n	3cbc <clock_async_start+0x34>
	parent->next = child;
    3da6:	6004      	str	r4, [r0, #0]
	list->tail = node;
    3da8:	605c      	str	r4, [r3, #4]
}
    3daa:	e7c0      	b.n	3d2e <clock_async_start+0xa6>
		return -EBUSY;
    3dac:	f06f 000f 	mvn.w	r0, #15
}
    3db0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3db4:	00029ccf 	.word	0x00029ccf
    3db8:	000297e6 	.word	0x000297e6
    3dbc:	00029c94 	.word	0x00029c94
    3dc0:	00029d41 	.word	0x00029d41
    3dc4:	20001d8b 	.word	0x20001d8b
    3dc8:	00029cf3 	.word	0x00029cf3

00003dcc <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3dcc:	4b15      	ldr	r3, [pc, #84]	; (3e24 <nrf_power_clock_isr+0x58>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    3dce:	b507      	push	{r0, r1, r2, lr}
    3dd0:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    3dd2:	b182      	cbz	r2, 3df6 <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
    3dd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3dd8:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    3ddc:	07d1      	lsls	r1, r2, #31
    3dde:	d50a      	bpl.n	3df6 <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3de0:	2200      	movs	r2, #0
    3de2:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3de4:	681b      	ldr	r3, [r3, #0]
    3de6:	9300      	str	r3, [sp, #0]
    (void)dummy;
    3de8:	9b00      	ldr	r3, [sp, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3dea:	4b0f      	ldr	r3, [pc, #60]	; (3e28 <nrf_power_clock_isr+0x5c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    3dec:	689b      	ldr	r3, [r3, #8]
    3dee:	7a58      	ldrb	r0, [r3, #9]
    3df0:	b908      	cbnz	r0, 3df6 <nrf_power_clock_isr+0x2a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3df2:	f7ff ff21 	bl	3c38 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3df6:	4b0d      	ldr	r3, [pc, #52]	; (3e2c <nrf_power_clock_isr+0x60>)
    3df8:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    3dfa:	b182      	cbz	r2, 3e1e <nrf_power_clock_isr+0x52>
    return p_reg->INTENSET & mask;
    3dfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3e00:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    3e04:	0792      	lsls	r2, r2, #30
    3e06:	d50a      	bpl.n	3e1e <nrf_power_clock_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e08:	2200      	movs	r2, #0
    3e0a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3e0c:	681b      	ldr	r3, [r3, #0]
    3e0e:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3e10:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3e12:	2001      	movs	r0, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    3e14:	b003      	add	sp, #12
    3e16:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3e1a:	f7ff bf0d 	b.w	3c38 <clkstarted_handle.constprop.0>
}
    3e1e:	b003      	add	sp, #12
    3e20:	f85d fb04 	ldr.w	pc, [sp], #4
    3e24:	40000100 	.word	0x40000100
    3e28:	200073a0 	.word	0x200073a0
    3e2c:	40000104 	.word	0x40000104

00003e30 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    3e30:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    3e32:	4c06      	ldr	r4, [pc, #24]	; (3e4c <z_clock_isr+0x1c>)
    3e34:	4906      	ldr	r1, [pc, #24]	; (3e50 <z_clock_isr+0x20>)
    3e36:	4807      	ldr	r0, [pc, #28]	; (3e54 <z_clock_isr+0x24>)
    3e38:	4622      	mov	r2, r4
    3e3a:	2317      	movs	r3, #23
    3e3c:	f01f fa45 	bl	232ca <printk>
    3e40:	4620      	mov	r0, r4
    3e42:	2117      	movs	r1, #23
}
    3e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    3e48:	f01f ba82 	b.w	23350 <assert_post_action>
    3e4c:	00029d73 	.word	0x00029d73
    3e50:	0002d2c6 	.word	0x0002d2c6
    3e54:	000297e6 	.word	0x000297e6

00003e58 <rtc1_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
    3e58:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    3e5a:	4c22      	ldr	r4, [pc, #136]	; (3ee4 <rtc1_nrf_isr+0x8c>)
    3e5c:	2300      	movs	r3, #0
    3e5e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    3e62:	f04f 0320 	mov.w	r3, #32
    3e66:	f3ef 8511 	mrs	r5, BASEPRI
    3e6a:	f383 8811 	msr	BASEPRI, r3
    3e6e:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3e72:	481d      	ldr	r0, [pc, #116]	; (3ee8 <rtc1_nrf_isr+0x90>)
    3e74:	f01e f81e 	bl	21eb4 <z_spin_lock_valid>
    3e78:	b968      	cbnz	r0, 3e96 <rtc1_nrf_isr+0x3e>
    3e7a:	4a1c      	ldr	r2, [pc, #112]	; (3eec <rtc1_nrf_isr+0x94>)
    3e7c:	491c      	ldr	r1, [pc, #112]	; (3ef0 <rtc1_nrf_isr+0x98>)
    3e7e:	481d      	ldr	r0, [pc, #116]	; (3ef4 <rtc1_nrf_isr+0x9c>)
    3e80:	234a      	movs	r3, #74	; 0x4a
    3e82:	f01f fa22 	bl	232ca <printk>
    3e86:	4918      	ldr	r1, [pc, #96]	; (3ee8 <rtc1_nrf_isr+0x90>)
    3e88:	481b      	ldr	r0, [pc, #108]	; (3ef8 <rtc1_nrf_isr+0xa0>)
    3e8a:	f01f fa1e 	bl	232ca <printk>
    3e8e:	4817      	ldr	r0, [pc, #92]	; (3eec <rtc1_nrf_isr+0x94>)
    3e90:	214a      	movs	r1, #74	; 0x4a
    3e92:	f01f fa5d 	bl	23350 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    3e96:	4814      	ldr	r0, [pc, #80]	; (3ee8 <rtc1_nrf_isr+0x90>)
    3e98:	f01e f82a 	bl	21ef0 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    3e9c:	4a17      	ldr	r2, [pc, #92]	; (3efc <rtc1_nrf_isr+0xa4>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    3e9e:	f8d4 4504 	ldr.w	r4, [r4, #1284]	; 0x504
    3ea2:	6813      	ldr	r3, [r2, #0]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3ea4:	4810      	ldr	r0, [pc, #64]	; (3ee8 <rtc1_nrf_isr+0x90>)
	return (a - b) & COUNTER_MAX;
    3ea6:	1ae4      	subs	r4, r4, r3
    3ea8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    3eac:	4423      	add	r3, r4
    3eae:	6013      	str	r3, [r2, #0]
    3eb0:	f01e f80e 	bl	21ed0 <z_spin_unlock_valid>
    3eb4:	b968      	cbnz	r0, 3ed2 <rtc1_nrf_isr+0x7a>
    3eb6:	4a0d      	ldr	r2, [pc, #52]	; (3eec <rtc1_nrf_isr+0x94>)
    3eb8:	4911      	ldr	r1, [pc, #68]	; (3f00 <rtc1_nrf_isr+0xa8>)
    3eba:	480e      	ldr	r0, [pc, #56]	; (3ef4 <rtc1_nrf_isr+0x9c>)
    3ebc:	235d      	movs	r3, #93	; 0x5d
    3ebe:	f01f fa04 	bl	232ca <printk>
    3ec2:	4909      	ldr	r1, [pc, #36]	; (3ee8 <rtc1_nrf_isr+0x90>)
    3ec4:	480f      	ldr	r0, [pc, #60]	; (3f04 <rtc1_nrf_isr+0xac>)
    3ec6:	f01f fa00 	bl	232ca <printk>
    3eca:	4808      	ldr	r0, [pc, #32]	; (3eec <rtc1_nrf_isr+0x94>)
    3ecc:	215d      	movs	r1, #93	; 0x5d
    3ece:	f01f fa3f 	bl	23350 <assert_post_action>
	__asm__ volatile(
    3ed2:	f385 8811 	msr	BASEPRI, r5
    3ed6:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    3eda:	4620      	mov	r0, r4
}
    3edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    3ee0:	f01e bb40 	b.w	22564 <z_clock_announce>
    3ee4:	40011000 	.word	0x40011000
    3ee8:	20000394 	.word	0x20000394
    3eec:	00029daf 	.word	0x00029daf
    3ef0:	00029dd1 	.word	0x00029dd1
    3ef4:	000297e6 	.word	0x000297e6
    3ef8:	00029de6 	.word	0x00029de6
    3efc:	20000390 	.word	0x20000390
    3f00:	00029dfe 	.word	0x00029dfe
    3f04:	00029e15 	.word	0x00029e15

00003f08 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    3f08:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3f0a:	4818      	ldr	r0, [pc, #96]	; (3f6c <z_clock_driver_init+0x64>)
    3f0c:	f01b fc1a 	bl	1f744 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
    3f10:	b348      	cbz	r0, 3f66 <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    3f12:	6843      	ldr	r3, [r0, #4]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    3f14:	4d16      	ldr	r5, [pc, #88]	; (3f70 <z_clock_driver_init+0x68>)
    3f16:	681b      	ldr	r3, [r3, #0]
    3f18:	2101      	movs	r1, #1
    3f1a:	4798      	blx	r3
    3f1c:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    3f1e:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
    3f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    3f24:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    3f28:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    3f2c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3f30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3f34:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3f3c:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3f3e:	681b      	ldr	r3, [r3, #0]
    3f40:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3f42:	9b01      	ldr	r3, [sp, #4]
    3f44:	4b0b      	ldr	r3, [pc, #44]	; (3f74 <z_clock_driver_init+0x6c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    3f46:	4631      	mov	r1, r6
    3f48:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3f4c:	2011      	movs	r0, #17
    3f4e:	4622      	mov	r2, r4
    3f50:	f000 fbf2 	bl	4738 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    3f54:	2011      	movs	r0, #17
    3f56:	f000 fbbd 	bl	46d4 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3f5a:	4b07      	ldr	r3, [pc, #28]	; (3f78 <z_clock_driver_init+0x70>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    3f5c:	4620      	mov	r0, r4
    3f5e:	601e      	str	r6, [r3, #0]
    3f60:	602e      	str	r6, [r5, #0]
}
    3f62:	b002      	add	sp, #8
    3f64:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    3f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3f6a:	e7fa      	b.n	3f62 <z_clock_driver_init+0x5a>
    3f6c:	00029d53 	.word	0x00029d53
    3f70:	40011000 	.word	0x40011000
    3f74:	e000e100 	.word	0xe000e100
    3f78:	40011008 	.word	0x40011008

00003f7c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    3f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3f7e:	4c39      	ldr	r4, [pc, #228]	; (4064 <z_clock_set_timeout+0xe8>)
    3f80:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3f84:	bf18      	it	ne
    3f86:	4604      	movne	r4, r0
	__asm__ volatile(
    3f88:	f04f 0320 	mov.w	r3, #32
    3f8c:	f3ef 8511 	mrs	r5, BASEPRI
    3f90:	f383 8811 	msr	BASEPRI, r3
    3f94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3f98:	4833      	ldr	r0, [pc, #204]	; (4068 <z_clock_set_timeout+0xec>)
    3f9a:	f01d ff8b 	bl	21eb4 <z_spin_lock_valid>
    3f9e:	b968      	cbnz	r0, 3fbc <z_clock_set_timeout+0x40>
    3fa0:	4a32      	ldr	r2, [pc, #200]	; (406c <z_clock_set_timeout+0xf0>)
    3fa2:	4933      	ldr	r1, [pc, #204]	; (4070 <z_clock_set_timeout+0xf4>)
    3fa4:	4833      	ldr	r0, [pc, #204]	; (4074 <z_clock_set_timeout+0xf8>)
    3fa6:	234a      	movs	r3, #74	; 0x4a
    3fa8:	f01f f98f 	bl	232ca <printk>
    3fac:	492e      	ldr	r1, [pc, #184]	; (4068 <z_clock_set_timeout+0xec>)
    3fae:	4832      	ldr	r0, [pc, #200]	; (4078 <z_clock_set_timeout+0xfc>)
    3fb0:	f01f f98b 	bl	232ca <printk>
    3fb4:	482d      	ldr	r0, [pc, #180]	; (406c <z_clock_set_timeout+0xf0>)
    3fb6:	214a      	movs	r1, #74	; 0x4a
    3fb8:	f01f f9ca 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
    3fbc:	482a      	ldr	r0, [pc, #168]	; (4068 <z_clock_set_timeout+0xec>)
    3fbe:	4f29      	ldr	r7, [pc, #164]	; (4064 <z_clock_set_timeout+0xe8>)
    3fc0:	f01d ff96 	bl	21ef0 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    3fc4:	4a2d      	ldr	r2, [pc, #180]	; (407c <z_clock_set_timeout+0x100>)
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    3fc6:	4b2e      	ldr	r3, [pc, #184]	; (4080 <z_clock_set_timeout+0x104>)
    3fc8:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    3fcc:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    3fce:	1ac8      	subs	r0, r1, r3
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    3fd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    3fd4:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
	if (unannounced >= COUNTER_HALF_SPAN) {
    3fd8:	d12b      	bne.n	4032 <z_clock_set_timeout+0xb6>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    3fda:	1e60      	subs	r0, r4, #1
    3fdc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    3fe0:	42b8      	cmp	r0, r7
    3fe2:	bfa8      	it	ge
    3fe4:	4638      	movge	r0, r7
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3fe6:	1c74      	adds	r4, r6, #1
    3fe8:	4420      	add	r0, r4
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    3fea:	42b8      	cmp	r0, r7
    3fec:	bf94      	ite	ls
    3fee:	181b      	addls	r3, r3, r0
    3ff0:	19db      	addhi	r3, r3, r7
	return (a - b) & COUNTER_MAX;
    3ff2:	1a59      	subs	r1, r3, r1
    3ff4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3ff8:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    3ffc:	2902      	cmp	r1, #2
    p_reg->CC[ch] = cc_val;
    3ffe:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4002:	d918      	bls.n	4036 <z_clock_set_timeout+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4004:	4818      	ldr	r0, [pc, #96]	; (4068 <z_clock_set_timeout+0xec>)
    4006:	f01d ff63 	bl	21ed0 <z_spin_unlock_valid>
    400a:	b968      	cbnz	r0, 4028 <z_clock_set_timeout+0xac>
    400c:	4a17      	ldr	r2, [pc, #92]	; (406c <z_clock_set_timeout+0xf0>)
    400e:	491d      	ldr	r1, [pc, #116]	; (4084 <z_clock_set_timeout+0x108>)
    4010:	4818      	ldr	r0, [pc, #96]	; (4074 <z_clock_set_timeout+0xf8>)
    4012:	235d      	movs	r3, #93	; 0x5d
    4014:	f01f f959 	bl	232ca <printk>
    4018:	4913      	ldr	r1, [pc, #76]	; (4068 <z_clock_set_timeout+0xec>)
    401a:	481b      	ldr	r0, [pc, #108]	; (4088 <z_clock_set_timeout+0x10c>)
    401c:	f01f f955 	bl	232ca <printk>
    4020:	4812      	ldr	r0, [pc, #72]	; (406c <z_clock_set_timeout+0xf0>)
    4022:	215d      	movs	r1, #93	; 0x5d
    4024:	f01f f994 	bl	23350 <assert_post_action>
	__asm__ volatile(
    4028:	f385 8811 	msr	BASEPRI, r5
    402c:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    4030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ticks = 0;
    4032:	2000      	movs	r0, #0
    4034:	e7d7      	b.n	3fe6 <z_clock_set_timeout+0x6a>
     return p_reg->COUNTER;
    4036:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    403a:	4814      	ldr	r0, [pc, #80]	; (408c <z_clock_set_timeout+0x110>)
	return (a - b) & COUNTER_MAX;
    403c:	1a59      	subs	r1, r3, r1
    403e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    4042:	1e4c      	subs	r4, r1, #1
    4044:	4284      	cmp	r4, r0
    4046:	d905      	bls.n	4054 <z_clock_set_timeout+0xd8>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4048:	4b11      	ldr	r3, [pc, #68]	; (4090 <z_clock_set_timeout+0x114>)
    404a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    404e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    4052:	e7d7      	b.n	4004 <z_clock_set_timeout+0x88>
		} else if (dt == 1) {
    4054:	2901      	cmp	r1, #1
			set_comparator(cyc + 2);
    4056:	bf02      	ittt	eq
    4058:	3302      	addeq	r3, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    405a:	f023 437f 	biceq.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    405e:	f8c2 3540 	streq.w	r3, [r2, #1344]	; 0x540
}
    4062:	e7cf      	b.n	4004 <z_clock_set_timeout+0x88>
    4064:	00fffffe 	.word	0x00fffffe
    4068:	20000394 	.word	0x20000394
    406c:	00029daf 	.word	0x00029daf
    4070:	00029dd1 	.word	0x00029dd1
    4074:	000297e6 	.word	0x000297e6
    4078:	00029de6 	.word	0x00029de6
    407c:	40011000 	.word	0x40011000
    4080:	20000390 	.word	0x20000390
    4084:	00029dfe 	.word	0x00029dfe
    4088:	00029e15 	.word	0x00029e15
    408c:	007ffffe 	.word	0x007ffffe
    4090:	e000e100 	.word	0xe000e100

00004094 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
    4094:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4096:	f04f 0320 	mov.w	r3, #32
    409a:	f3ef 8511 	mrs	r5, BASEPRI
    409e:	f383 8811 	msr	BASEPRI, r3
    40a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    40a6:	481a      	ldr	r0, [pc, #104]	; (4110 <z_clock_elapsed+0x7c>)
    40a8:	f01d ff04 	bl	21eb4 <z_spin_lock_valid>
    40ac:	b968      	cbnz	r0, 40ca <z_clock_elapsed+0x36>
    40ae:	4a19      	ldr	r2, [pc, #100]	; (4114 <z_clock_elapsed+0x80>)
    40b0:	4919      	ldr	r1, [pc, #100]	; (4118 <z_clock_elapsed+0x84>)
    40b2:	481a      	ldr	r0, [pc, #104]	; (411c <z_clock_elapsed+0x88>)
    40b4:	234a      	movs	r3, #74	; 0x4a
    40b6:	f01f f908 	bl	232ca <printk>
    40ba:	4915      	ldr	r1, [pc, #84]	; (4110 <z_clock_elapsed+0x7c>)
    40bc:	4818      	ldr	r0, [pc, #96]	; (4120 <z_clock_elapsed+0x8c>)
    40be:	f01f f904 	bl	232ca <printk>
    40c2:	4814      	ldr	r0, [pc, #80]	; (4114 <z_clock_elapsed+0x80>)
    40c4:	214a      	movs	r1, #74	; 0x4a
    40c6:	f01f f943 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
    40ca:	4811      	ldr	r0, [pc, #68]	; (4110 <z_clock_elapsed+0x7c>)
    40cc:	f01d ff10 	bl	21ef0 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    40d0:	4b14      	ldr	r3, [pc, #80]	; (4124 <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    40d2:	480f      	ldr	r0, [pc, #60]	; (4110 <z_clock_elapsed+0x7c>)
    40d4:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    40d8:	4b13      	ldr	r3, [pc, #76]	; (4128 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
    40da:	681b      	ldr	r3, [r3, #0]
    40dc:	1ae4      	subs	r4, r4, r3
    40de:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    40e2:	f01d fef5 	bl	21ed0 <z_spin_unlock_valid>
    40e6:	b968      	cbnz	r0, 4104 <z_clock_elapsed+0x70>
    40e8:	4a0a      	ldr	r2, [pc, #40]	; (4114 <z_clock_elapsed+0x80>)
    40ea:	4910      	ldr	r1, [pc, #64]	; (412c <z_clock_elapsed+0x98>)
    40ec:	480b      	ldr	r0, [pc, #44]	; (411c <z_clock_elapsed+0x88>)
    40ee:	235d      	movs	r3, #93	; 0x5d
    40f0:	f01f f8eb 	bl	232ca <printk>
    40f4:	4906      	ldr	r1, [pc, #24]	; (4110 <z_clock_elapsed+0x7c>)
    40f6:	480e      	ldr	r0, [pc, #56]	; (4130 <z_clock_elapsed+0x9c>)
    40f8:	f01f f8e7 	bl	232ca <printk>
    40fc:	4805      	ldr	r0, [pc, #20]	; (4114 <z_clock_elapsed+0x80>)
    40fe:	215d      	movs	r1, #93	; 0x5d
    4100:	f01f f926 	bl	23350 <assert_post_action>
	__asm__ volatile(
    4104:	f385 8811 	msr	BASEPRI, r5
    4108:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    410c:	4620      	mov	r0, r4
    410e:	bd38      	pop	{r3, r4, r5, pc}
    4110:	20000394 	.word	0x20000394
    4114:	00029daf 	.word	0x00029daf
    4118:	00029dd1 	.word	0x00029dd1
    411c:	000297e6 	.word	0x000297e6
    4120:	00029de6 	.word	0x00029de6
    4124:	40011000 	.word	0x40011000
    4128:	20000390 	.word	0x20000390
    412c:	00029dfe 	.word	0x00029dfe
    4130:	00029e15 	.word	0x00029e15

00004134 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
    4134:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4136:	f04f 0320 	mov.w	r3, #32
    413a:	f3ef 8511 	mrs	r5, BASEPRI
    413e:	f383 8811 	msr	BASEPRI, r3
    4142:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4146:	481b      	ldr	r0, [pc, #108]	; (41b4 <z_timer_cycle_get_32+0x80>)
    4148:	f01d feb4 	bl	21eb4 <z_spin_lock_valid>
    414c:	b968      	cbnz	r0, 416a <z_timer_cycle_get_32+0x36>
    414e:	4a1a      	ldr	r2, [pc, #104]	; (41b8 <z_timer_cycle_get_32+0x84>)
    4150:	491a      	ldr	r1, [pc, #104]	; (41bc <z_timer_cycle_get_32+0x88>)
    4152:	481b      	ldr	r0, [pc, #108]	; (41c0 <z_timer_cycle_get_32+0x8c>)
    4154:	234a      	movs	r3, #74	; 0x4a
    4156:	f01f f8b8 	bl	232ca <printk>
    415a:	4916      	ldr	r1, [pc, #88]	; (41b4 <z_timer_cycle_get_32+0x80>)
    415c:	4819      	ldr	r0, [pc, #100]	; (41c4 <z_timer_cycle_get_32+0x90>)
    415e:	f01f f8b4 	bl	232ca <printk>
    4162:	4815      	ldr	r0, [pc, #84]	; (41b8 <z_timer_cycle_get_32+0x84>)
    4164:	214a      	movs	r1, #74	; 0x4a
    4166:	f01f f8f3 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
    416a:	4812      	ldr	r0, [pc, #72]	; (41b4 <z_timer_cycle_get_32+0x80>)
    416c:	f01d fec0 	bl	21ef0 <z_spin_lock_set_owner>
    4170:	4b15      	ldr	r3, [pc, #84]	; (41c8 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4172:	4810      	ldr	r0, [pc, #64]	; (41b4 <z_timer_cycle_get_32+0x80>)
    4174:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    4178:	4b14      	ldr	r3, [pc, #80]	; (41cc <z_timer_cycle_get_32+0x98>)
    417a:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    417c:	1ae4      	subs	r4, r4, r3
    417e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    4182:	441c      	add	r4, r3
    4184:	f01d fea4 	bl	21ed0 <z_spin_unlock_valid>
    4188:	b968      	cbnz	r0, 41a6 <z_timer_cycle_get_32+0x72>
    418a:	4a0b      	ldr	r2, [pc, #44]	; (41b8 <z_timer_cycle_get_32+0x84>)
    418c:	4910      	ldr	r1, [pc, #64]	; (41d0 <z_timer_cycle_get_32+0x9c>)
    418e:	480c      	ldr	r0, [pc, #48]	; (41c0 <z_timer_cycle_get_32+0x8c>)
    4190:	235d      	movs	r3, #93	; 0x5d
    4192:	f01f f89a 	bl	232ca <printk>
    4196:	4907      	ldr	r1, [pc, #28]	; (41b4 <z_timer_cycle_get_32+0x80>)
    4198:	480e      	ldr	r0, [pc, #56]	; (41d4 <z_timer_cycle_get_32+0xa0>)
    419a:	f01f f896 	bl	232ca <printk>
    419e:	4806      	ldr	r0, [pc, #24]	; (41b8 <z_timer_cycle_get_32+0x84>)
    41a0:	215d      	movs	r1, #93	; 0x5d
    41a2:	f01f f8d5 	bl	23350 <assert_post_action>
	__asm__ volatile(
    41a6:	f385 8811 	msr	BASEPRI, r5
    41aa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    41ae:	4620      	mov	r0, r4
    41b0:	bd38      	pop	{r3, r4, r5, pc}
    41b2:	bf00      	nop
    41b4:	20000394 	.word	0x20000394
    41b8:	00029daf 	.word	0x00029daf
    41bc:	00029dd1 	.word	0x00029dd1
    41c0:	000297e6 	.word	0x000297e6
    41c4:	00029de6 	.word	0x00029de6
    41c8:	40011000 	.word	0x40011000
    41cc:	20000390 	.word	0x20000390
    41d0:	00029dfe 	.word	0x00029dfe
    41d4:	00029e15 	.word	0x00029e15

000041d8 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    41d8:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    41da:	4c11      	ldr	r4, [pc, #68]	; (4220 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    41dc:	4a11      	ldr	r2, [pc, #68]	; (4224 <_DoInit+0x4c>)
    41de:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    41e0:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    41e2:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    41e6:	4b10      	ldr	r3, [pc, #64]	; (4228 <_DoInit+0x50>)
    41e8:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    41ea:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    41ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    41f0:	4a0e      	ldr	r2, [pc, #56]	; (422c <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    41f2:	490f      	ldr	r1, [pc, #60]	; (4230 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    41f4:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    41f6:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    41f8:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    41fa:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    41fc:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    41fe:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4200:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4202:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    4204:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4206:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4208:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    420a:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    420c:	f020 fee3 	bl	24fd6 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    4210:	4908      	ldr	r1, [pc, #32]	; (4234 <_DoInit+0x5c>)
    4212:	4620      	mov	r0, r4
    4214:	f020 fedf 	bl	24fd6 <strcpy>
  p->acID[6] = ' ';
    4218:	2320      	movs	r3, #32
    421a:	71a3      	strb	r3, [r4, #6]
}
    421c:	bd10      	pop	{r4, pc}
    421e:	bf00      	nop
    4220:	20000398 	.word	0x20000398
    4224:	00029e2a 	.word	0x00029e2a
    4228:	20001d9c 	.word	0x20001d9c
    422c:	20001d8c 	.word	0x20001d8c
    4230:	00029e33 	.word	0x00029e33
    4234:	00029e37 	.word	0x00029e37

00004238 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    423c:	4f23      	ldr	r7, [pc, #140]	; (42cc <SEGGER_RTT_WriteSkipNoLock+0x94>)
    423e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4242:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    4244:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4248:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    424a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    424c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    424e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4250:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4252:	d834      	bhi.n	42be <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    4254:	f8d2 a020 	ldr.w	sl, [r2, #32]
    4258:	ebaa 0905 	sub.w	r9, sl, r5
    425c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    4260:	4294      	cmp	r4, r2
    4262:	d811      	bhi.n	4288 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    4264:	f04f 0918 	mov.w	r9, #24
    4268:	fb06 9309 	mla	r3, r6, r9, r9
    426c:	443b      	add	r3, r7
    426e:	4622      	mov	r2, r4
    4270:	6858      	ldr	r0, [r3, #4]
    4272:	4641      	mov	r1, r8
    4274:	4428      	add	r0, r5
    4276:	f020 ff0b 	bl	25090 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    427a:	fb09 7606 	mla	r6, r9, r6, r7
    427e:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    4280:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    4282:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    4284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    4288:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    428a:	429c      	cmp	r4, r3
    428c:	d81b      	bhi.n	42c6 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    428e:	fb00 bb0b 	mla	fp, r0, fp, fp
    4292:	44bb      	add	fp, r7
    4294:	464a      	mov	r2, r9
    4296:	f8db 0004 	ldr.w	r0, [fp, #4]
    429a:	442c      	add	r4, r5
    429c:	4428      	add	r0, r5
    429e:	f020 fef7 	bl	25090 <memcpy>
      if (NumBytes) {
    42a2:	ebb4 040a 	subs.w	r4, r4, sl
    42a6:	d006      	beq.n	42b6 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    42a8:	f8db 0004 	ldr.w	r0, [fp, #4]
    42ac:	4622      	mov	r2, r4
    42ae:	eb08 0109 	add.w	r1, r8, r9
    42b2:	f020 feed 	bl	25090 <memcpy>
      pRing->WrOff = NumBytes;
    42b6:	2018      	movs	r0, #24
    42b8:	fb00 7606 	mla	r6, r0, r6, r7
    42bc:	e7e0      	b.n	4280 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    42be:	3b01      	subs	r3, #1
    42c0:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    42c2:	42a3      	cmp	r3, r4
    42c4:	d2ce      	bcs.n	4264 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    42c6:	2000      	movs	r0, #0
    42c8:	e7dc      	b.n	4284 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    42ca:	bf00      	nop
    42cc:	20000398 	.word	0x20000398

000042d0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    42d0:	4b03      	ldr	r3, [pc, #12]	; (42e0 <SEGGER_RTT_HasDataUp+0x10>)
    42d2:	2218      	movs	r2, #24
    42d4:	fb02 3300 	mla	r3, r2, r0, r3
    42d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    42da:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    42dc:	1a80      	subs	r0, r0, r2
    42de:	4770      	bx	lr
    42e0:	20000398 	.word	0x20000398

000042e4 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    42e4:	4b01      	ldr	r3, [pc, #4]	; (42ec <uECC_get_rng+0x8>)
    42e6:	6818      	ldr	r0, [r3, #0]
    42e8:	4770      	bx	lr
    42ea:	bf00      	nop
    42ec:	20006a20 	.word	0x20006a20

000042f0 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    42f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    42f2:	2208      	movs	r2, #8
{
    42f4:	b089      	sub	sp, #36	; 0x24
    42f6:	460c      	mov	r4, r1
    42f8:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    42fa:	f01f fee2 	bl	240c2 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    42fe:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    4300:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    4302:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    4304:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    4306:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    4308:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    430a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    430c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    430e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    4310:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    4312:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4314:	2308      	movs	r3, #8
    4316:	466a      	mov	r2, sp
    4318:	4669      	mov	r1, sp
    431a:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    431c:	e9cd 7701 	strd	r7, r7, [sp, #4]
    4320:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4322:	f01f fdd0 	bl	23ec6 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4326:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4328:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    432a:	466a      	mov	r2, sp
    432c:	4631      	mov	r1, r6
    432e:	4630      	mov	r0, r6
    4330:	f01f fdc9 	bl	23ec6 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    4334:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4336:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    4338:	6b63      	ldr	r3, [r4, #52]	; 0x34
    433a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    433c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    433e:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    4340:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4342:	4405      	add	r5, r0
	tmp[7] = 0;
    4344:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4348:	466a      	mov	r2, sp
    434a:	2308      	movs	r3, #8
    434c:	4669      	mov	r1, sp
    434e:	4668      	mov	r0, sp
    4350:	f01f fdb9 	bl	23ec6 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4354:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4356:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4358:	2308      	movs	r3, #8
    435a:	466a      	mov	r2, sp
    435c:	4630      	mov	r0, r6
    435e:	f01f fdb2 	bl	23ec6 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    4362:	6a23      	ldr	r3, [r4, #32]
    4364:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    4366:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4368:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    436a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    436c:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    436e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4370:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    4372:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4374:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4376:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4378:	2308      	movs	r3, #8
    437a:	466a      	mov	r2, sp
    437c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    437e:	e9cd 7704 	strd	r7, r7, [sp, #16]
    4382:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4384:	f01f fd9f 	bl	23ec6 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    4388:	6a63      	ldr	r3, [r4, #36]	; 0x24
    438a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    438c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    438e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    4390:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    4392:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4394:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    4396:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    4398:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    439a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    439c:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    439e:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    43a2:	6a23      	ldr	r3, [r4, #32]
    43a4:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    43a6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    43a8:	2308      	movs	r3, #8
    43aa:	466a      	mov	r2, sp
    43ac:	4630      	mov	r0, r6
    43ae:	f01f fd8a 	bl	23ec6 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    43b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    43b4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    43b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    43b8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    43ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
    43bc:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    43be:	6a23      	ldr	r3, [r4, #32]
    43c0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    43c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    43c4:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    43c6:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    43c8:	2308      	movs	r3, #8
    43ca:	466a      	mov	r2, sp
    43cc:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    43ce:	e9cd 7704 	strd	r7, r7, [sp, #16]
    43d2:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    43d4:	f01f feab 	bl	2412e <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    43d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    43da:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    43dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    43de:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    43e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    43e2:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    43e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    43e6:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    43e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    43ea:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    43ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    43ee:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    43f0:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    43f2:	2308      	movs	r3, #8
    43f4:	466a      	mov	r2, sp
    43f6:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    43f8:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    43fc:	f01f fe97 	bl	2412e <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    4400:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4402:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    4404:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4406:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    4408:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    440a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    440c:	6a23      	ldr	r3, [r4, #32]
    440e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    4410:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4412:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    4414:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    4416:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    441a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    441c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    441e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    4420:	2308      	movs	r3, #8
    4422:	466a      	mov	r2, sp
    4424:	4630      	mov	r0, r6
    4426:	f01f fe82 	bl	2412e <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    442a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    442c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    442e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    4430:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    4434:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4436:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    4438:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    443a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    443c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    443e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    4442:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4444:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    4446:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    4448:	2308      	movs	r3, #8
    444a:	466a      	mov	r2, sp
    444c:	4630      	mov	r0, r6
    444e:	f01f fe6e 	bl	2412e <uECC_vli_sub>

	if (carry < 0) {
    4452:	1a2d      	subs	r5, r5, r0
    4454:	d410      	bmi.n	4478 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    4456:	4c0d      	ldr	r4, [pc, #52]	; (448c <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
    4458:	b935      	cbnz	r5, 4468 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    445a:	2208      	movs	r2, #8
    445c:	4631      	mov	r1, r6
    445e:	4620      	mov	r0, r4
    4460:	f01f fe3b 	bl	240da <uECC_vli_cmp_unsafe>
		while (carry || 
    4464:	2801      	cmp	r0, #1
    4466:	d00f      	beq.n	4488 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    4468:	2308      	movs	r3, #8
    446a:	4622      	mov	r2, r4
    446c:	4631      	mov	r1, r6
    446e:	4630      	mov	r0, r6
    4470:	f01f fe5d 	bl	2412e <uECC_vli_sub>
    4474:	1a2d      	subs	r5, r5, r0
    4476:	e7ef      	b.n	4458 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    4478:	4a04      	ldr	r2, [pc, #16]	; (448c <vli_mmod_fast_secp256r1+0x19c>)
    447a:	2308      	movs	r3, #8
    447c:	4631      	mov	r1, r6
    447e:	4630      	mov	r0, r6
    4480:	f01f fd21 	bl	23ec6 <uECC_vli_add>
		while (carry < 0);
    4484:	182d      	adds	r5, r5, r0
    4486:	d4f8      	bmi.n	447a <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
    4488:	b009      	add	sp, #36	; 0x24
    448a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    448c:	00028c54 	.word	0x00028c54

00004490 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    4490:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    4492:	4e26      	ldr	r6, [pc, #152]	; (452c <tc_aes128_set_encrypt_key+0x9c>)
{
    4494:	4607      	mov	r7, r0
    4496:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    4498:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    449a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    449c:	ad01      	add	r5, sp, #4
    449e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    44a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    44a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    44a4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    44a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    44ac:	4638      	mov	r0, r7
    44ae:	2f00      	cmp	r7, #0
    44b0:	d038      	beq.n	4524 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    44b2:	2c00      	cmp	r4, #0
    44b4:	d038      	beq.n	4528 <tc_aes128_set_encrypt_key+0x98>
    44b6:	1f38      	subs	r0, r7, #4
    44b8:	4621      	mov	r1, r4
    44ba:	4602      	mov	r2, r0
    44bc:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    44be:	784b      	ldrb	r3, [r1, #1]
    44c0:	780d      	ldrb	r5, [r1, #0]
    44c2:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    44c4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    44c8:	78cd      	ldrb	r5, [r1, #3]
    44ca:	432b      	orrs	r3, r5
    44cc:	788d      	ldrb	r5, [r1, #2]
    44ce:	3104      	adds	r1, #4
    44d0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    44d4:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    44d6:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    44da:	d1f0      	bne.n	44be <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    44dc:	4c14      	ldr	r4, [pc, #80]	; (4530 <tc_aes128_set_encrypt_key+0xa0>)
    44de:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    44e0:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    44e2:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    44e4:	d116      	bne.n	4514 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    44e6:	f3c3 4207 	ubfx	r2, r3, #16, #8
    44ea:	5ca5      	ldrb	r5, [r4, r2]
    44ec:	0e1a      	lsrs	r2, r3, #24
    44ee:	5ca2      	ldrb	r2, [r4, r2]
    44f0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    44f4:	f3c3 2507 	ubfx	r5, r3, #8, #8
    44f8:	b2db      	uxtb	r3, r3
    44fa:	5d65      	ldrb	r5, [r4, r5]
    44fc:	5ce3      	ldrb	r3, [r4, r3]
    44fe:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    4502:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    4506:	ad0c      	add	r5, sp, #48	; 0x30
    4508:	f021 0303 	bic.w	r3, r1, #3
    450c:	442b      	add	r3, r5
    450e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    4512:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    4514:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    4518:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    451a:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    451c:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    451e:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    4520:	d1de      	bne.n	44e0 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    4522:	2001      	movs	r0, #1
}
    4524:	b00d      	add	sp, #52	; 0x34
    4526:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    4528:	4620      	mov	r0, r4
    452a:	e7fb      	b.n	4524 <tc_aes128_set_encrypt_key+0x94>
    452c:	00028a40 	.word	0x00028a40
    4530:	00029e3e 	.word	0x00029e3e

00004534 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    4534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4538:	4615      	mov	r5, r2
    453a:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    453c:	4606      	mov	r6, r0
    453e:	2800      	cmp	r0, #0
    4540:	d058      	beq.n	45f4 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    4542:	2900      	cmp	r1, #0
    4544:	d059      	beq.n	45fa <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    4546:	2a00      	cmp	r2, #0
    4548:	d059      	beq.n	45fe <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    454a:	2310      	movs	r3, #16
    454c:	460a      	mov	r2, r1
    454e:	4668      	mov	r0, sp
    4550:	4619      	mov	r1, r3
    4552:	f01f fbf4 	bl	23d3e <_copy>
	add_round_key(state, s->words);
    4556:	4629      	mov	r1, r5
    4558:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    455a:	4c2a      	ldr	r4, [pc, #168]	; (4604 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    455c:	f020 faf9 	bl	24b52 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    4560:	f105 0710 	add.w	r7, r5, #16
    4564:	46a1      	mov	r9, r4
    4566:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    4568:	46e8      	mov	r8, sp
{
    456a:	466a      	mov	r2, sp
    456c:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    456e:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    4570:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    4572:	5c61      	ldrb	r1, [r4, r1]
    4574:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    4578:	d1f9      	bne.n	456e <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    457a:	4668      	mov	r0, sp
    457c:	f020 fb2e 	bl	24bdc <shift_rows>
	mult_row_column(t, s);
    4580:	4669      	mov	r1, sp
    4582:	a804      	add	r0, sp, #16
    4584:	f020 fb63 	bl	24c4e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    4588:	a901      	add	r1, sp, #4
    458a:	a805      	add	r0, sp, #20
    458c:	f020 fb5f 	bl	24c4e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    4590:	a902      	add	r1, sp, #8
    4592:	a806      	add	r0, sp, #24
    4594:	f020 fb5b 	bl	24c4e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    4598:	a903      	add	r1, sp, #12
    459a:	a807      	add	r0, sp, #28
    459c:	f020 fb57 	bl	24c4e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    45a0:	2310      	movs	r3, #16
    45a2:	4619      	mov	r1, r3
    45a4:	eb0d 0203 	add.w	r2, sp, r3
    45a8:	4668      	mov	r0, sp
    45aa:	f01f fbc8 	bl	23d3e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    45ae:	4639      	mov	r1, r7
    45b0:	4668      	mov	r0, sp
    45b2:	3710      	adds	r7, #16
    45b4:	f020 facd 	bl	24b52 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    45b8:	42af      	cmp	r7, r5
    45ba:	d1d5      	bne.n	4568 <tc_aes_encrypt+0x34>
    45bc:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    45be:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    45c2:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    45c4:	f819 3003 	ldrb.w	r3, [r9, r3]
    45c8:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    45cc:	d1f7      	bne.n	45be <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    45ce:	4668      	mov	r0, sp
    45d0:	f020 fb04 	bl	24bdc <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    45d4:	4629      	mov	r1, r5
    45d6:	4668      	mov	r0, sp
    45d8:	f020 fabb 	bl	24b52 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    45dc:	2310      	movs	r3, #16
    45de:	4619      	mov	r1, r3
    45e0:	466a      	mov	r2, sp
    45e2:	4630      	mov	r0, r6
    45e4:	f01f fbab 	bl	23d3e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    45e8:	4668      	mov	r0, sp
    45ea:	2210      	movs	r2, #16
    45ec:	4621      	mov	r1, r4
    45ee:	f01f fbb3 	bl	23d58 <_set>

	return TC_CRYPTO_SUCCESS;
    45f2:	2001      	movs	r0, #1
}
    45f4:	b009      	add	sp, #36	; 0x24
    45f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    45fa:	4608      	mov	r0, r1
    45fc:	e7fa      	b.n	45f4 <tc_aes_encrypt+0xc0>
    45fe:	4610      	mov	r0, r2
    4600:	e7f8      	b.n	45f4 <tc_aes_encrypt+0xc0>
    4602:	bf00      	nop
    4604:	00029e3e 	.word	0x00029e3e

00004608 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    4608:	4804      	ldr	r0, [pc, #16]	; (461c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    460a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    460c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    460e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    4610:	d003      	beq.n	461a <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    4612:	4903      	ldr	r1, [pc, #12]	; (4620 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    4614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    4618:	600a      	str	r2, [r1, #0]

0000461a <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    461a:	4770      	bx	lr
    ldr r0, =_kernel
    461c:	20001bc4 	.word	0x20001bc4
    ldr r1, =_SCS_ICSR
    4620:	e000ed04 	.word	0xe000ed04

00004624 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    4624:	4a0a      	ldr	r2, [pc, #40]	; (4650 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    4626:	490b      	ldr	r1, [pc, #44]	; (4654 <arch_swap+0x30>)
	_current->arch.basepri = key;
    4628:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    462a:	6809      	ldr	r1, [r1, #0]
    462c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4630:	4909      	ldr	r1, [pc, #36]	; (4658 <arch_swap+0x34>)
	_current->arch.basepri = key;
    4632:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4636:	684b      	ldr	r3, [r1, #4]
    4638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    463c:	604b      	str	r3, [r1, #4]
    463e:	2300      	movs	r3, #0
    4640:	f383 8811 	msr	BASEPRI, r3
    4644:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4648:	6893      	ldr	r3, [r2, #8]
}
    464a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
    464e:	4770      	bx	lr
    4650:	20001bc4 	.word	0x20001bc4
    4654:	00029580 	.word	0x00029580
    4658:	e000ed00 	.word	0xe000ed00

0000465c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    465c:	4913      	ldr	r1, [pc, #76]	; (46ac <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    465e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4660:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4664:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4666:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    466a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    466e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4670:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4674:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4678:	4f0d      	ldr	r7, [pc, #52]	; (46b0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    467a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    467e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    4680:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4682:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4684:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    movs r3, #0
    4688:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    468a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    468e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    4692:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4694:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4696:	f000 fc85 	bl	4fa4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    469a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    469e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    46a2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    46a6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    46aa:	4770      	bx	lr
    ldr r1, =_kernel
    46ac:	20001bc4 	.word	0x20001bc4
    ldr v4, =_SCS_ICSR
    46b0:	e000ed04 	.word	0xe000ed04

000046b4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    46b4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    46b8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    46ba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    46be:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    46c2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    46c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    46c8:	2902      	cmp	r1, #2
    beq _oops
    46ca:	d0ff      	beq.n	46cc <_oops>

000046cc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    46cc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    46ce:	f020 fc01 	bl	24ed4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    46d2:	bd01      	pop	{r0, pc}

000046d4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    46d4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    46d6:	2b00      	cmp	r3, #0
    46d8:	db08      	blt.n	46ec <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    46da:	2201      	movs	r2, #1
    46dc:	f000 001f 	and.w	r0, r0, #31
    46e0:	fa02 f000 	lsl.w	r0, r2, r0
    46e4:	095b      	lsrs	r3, r3, #5
    46e6:	4a02      	ldr	r2, [pc, #8]	; (46f0 <arch_irq_enable+0x1c>)
    46e8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    46ec:	4770      	bx	lr
    46ee:	bf00      	nop
    46f0:	e000e100 	.word	0xe000e100

000046f4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    46f4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    46f6:	2b00      	cmp	r3, #0
    46f8:	db0d      	blt.n	4716 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    46fa:	2201      	movs	r2, #1
    46fc:	095b      	lsrs	r3, r3, #5
    46fe:	f000 001f 	and.w	r0, r0, #31
    4702:	fa02 f000 	lsl.w	r0, r2, r0
    4706:	3320      	adds	r3, #32
    4708:	4a03      	ldr	r2, [pc, #12]	; (4718 <arch_irq_disable+0x24>)
    470a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    470e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4712:	f3bf 8f6f 	isb	sy
}
    4716:	4770      	bx	lr
    4718:	e000e100 	.word	0xe000e100

0000471c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    471c:	4b05      	ldr	r3, [pc, #20]	; (4734 <arch_irq_is_enabled+0x18>)
    471e:	0942      	lsrs	r2, r0, #5
    4720:	f000 001f 	and.w	r0, r0, #31
    4724:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4728:	2301      	movs	r3, #1
    472a:	fa03 f000 	lsl.w	r0, r3, r0
}
    472e:	4010      	ands	r0, r2
    4730:	4770      	bx	lr
    4732:	bf00      	nop
    4734:	e000e100 	.word	0xe000e100

00004738 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
    4738:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    473a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
    473c:	2c07      	cmp	r4, #7
{
    473e:	4605      	mov	r5, r0
    4740:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
    4742:	d90e      	bls.n	4762 <z_arm_irq_priority_set+0x2a>
    4744:	4a10      	ldr	r2, [pc, #64]	; (4788 <z_arm_irq_priority_set+0x50>)
    4746:	4911      	ldr	r1, [pc, #68]	; (478c <z_arm_irq_priority_set+0x54>)
    4748:	4811      	ldr	r0, [pc, #68]	; (4790 <z_arm_irq_priority_set+0x58>)
    474a:	235b      	movs	r3, #91	; 0x5b
    474c:	f01e fdbd 	bl	232ca <printk>
    4750:	4810      	ldr	r0, [pc, #64]	; (4794 <z_arm_irq_priority_set+0x5c>)
    4752:	4631      	mov	r1, r6
    4754:	2207      	movs	r2, #7
    4756:	f01e fdb8 	bl	232ca <printk>
    475a:	480b      	ldr	r0, [pc, #44]	; (4788 <z_arm_irq_priority_set+0x50>)
    475c:	215b      	movs	r1, #91	; 0x5b
    475e:	f01e fdf7 	bl	23350 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4762:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4764:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4766:	bfac      	ite	ge
    4768:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    476c:	4b0a      	ldrlt	r3, [pc, #40]	; (4798 <z_arm_irq_priority_set+0x60>)
    476e:	ea4f 1444 	mov.w	r4, r4, lsl #5
    4772:	bfb8      	it	lt
    4774:	f005 050f 	andlt.w	r5, r5, #15
    4778:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    477a:	bfaa      	itet	ge
    477c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4780:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4782:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    4786:	bd70      	pop	{r4, r5, r6, pc}
    4788:	00029f3e 	.word	0x00029f3e
    478c:	00029f74 	.word	0x00029f74
    4790:	000297e6 	.word	0x000297e6
    4794:	00029f8f 	.word	0x00029f8f
    4798:	e000ed14 	.word	0xe000ed14

0000479c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    479c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    479e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    47a0:	4b04      	ldr	r3, [pc, #16]	; (47b4 <_arch_isr_direct_pm+0x18>)
    47a2:	6a18      	ldr	r0, [r3, #32]
    47a4:	b118      	cbz	r0, 47ae <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    47a6:	2200      	movs	r2, #0
    47a8:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    47aa:	f023 fd47 	bl	2823c <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    47ae:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    47b0:	bd08      	pop	{r3, pc}
    47b2:	bf00      	nop
    47b4:	20001bc4 	.word	0x20001bc4

000047b8 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    47b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    47bc:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
    47c0:	f1b9 0f0f 	cmp.w	r9, #15
{
    47c4:	4605      	mov	r5, r0
    47c6:	4690      	mov	r8, r2
    47c8:	461e      	mov	r6, r3
#define K_THREAD_STACK_MEMBER(sym, size) ARCH_THREAD_STACK_MEMBER(sym, size)
#define K_THREAD_STACK_SIZEOF(sym) ARCH_THREAD_STACK_SIZEOF(sym)
#define K_THREAD_STACK_RESERVED ((size_t)ARCH_THREAD_STACK_RESERVED)
static inline char *Z_THREAD_STACK_BUFFER(k_thread_stack_t *sym)
{
	return ARCH_THREAD_STACK_BUFFER(sym);
    47ca:	f101 0720 	add.w	r7, r1, #32
	Z_ASSERT_VALID_PRIO(priority, pEntry);
    47ce:	d125      	bne.n	481c <arch_new_thread+0x64>
    47d0:	4b1d      	ldr	r3, [pc, #116]	; (4848 <arch_new_thread+0x90>)
    47d2:	429e      	cmp	r6, r3
    47d4:	d126      	bne.n	4824 <arch_new_thread+0x6c>
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    47d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    47d8:	9300      	str	r3, [sp, #0]
    47da:	4642      	mov	r2, r8
    47dc:	464b      	mov	r3, r9
	stackEnd = pStackMem + stackSize;
    47de:	eb07 0408 	add.w	r4, r7, r8
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    47e2:	4639      	mov	r1, r7
    47e4:	4628      	mov	r0, r5
    47e6:	f023 fdd8 	bl	2839a <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    47ea:	f1a4 0220 	sub.w	r2, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    47ee:	4b17      	ldr	r3, [pc, #92]	; (484c <arch_new_thread+0x94>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    47f0:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    47f4:	f023 0301 	bic.w	r3, r3, #1
    47f8:	6193      	str	r3, [r2, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    47fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    47fc:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    47fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4800:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    4802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4804:	60d3      	str	r3, [r2, #12]
	pInitCtx->basic.xpsr =
    4806:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    480a:	61d3      	str	r3, [r2, #28]
	thread->callee_saved.spsr |= T_BIT;
#endif

	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif /* CONFIG_CPU_CORTEX_R */
	thread->arch.basepri = 0;
    480c:	2300      	movs	r3, #0
	pInitCtx->basic.a1 = (u32_t)pEntry;
    480e:	6016      	str	r6, [r2, #0]
	thread->callee_saved.psp = (u32_t)pInitCtx;
    4810:	652a      	str	r2, [r5, #80]	; 0x50
	thread->arch.basepri = 0;
    4812:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4816:	b003      	add	sp, #12
    4818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(priority, pEntry);
    481c:	f109 0310 	add.w	r3, r9, #16
    4820:	2b1e      	cmp	r3, #30
    4822:	d9d8      	bls.n	47d6 <arch_new_thread+0x1e>
    4824:	4a0a      	ldr	r2, [pc, #40]	; (4850 <arch_new_thread+0x98>)
    4826:	490b      	ldr	r1, [pc, #44]	; (4854 <arch_new_thread+0x9c>)
    4828:	480b      	ldr	r0, [pc, #44]	; (4858 <arch_new_thread+0xa0>)
    482a:	2329      	movs	r3, #41	; 0x29
    482c:	f01e fd4d 	bl	232ca <printk>
    4830:	4649      	mov	r1, r9
    4832:	480a      	ldr	r0, [pc, #40]	; (485c <arch_new_thread+0xa4>)
    4834:	f06f 030f 	mvn.w	r3, #15
    4838:	220e      	movs	r2, #14
    483a:	f01e fd46 	bl	232ca <printk>
    483e:	4804      	ldr	r0, [pc, #16]	; (4850 <arch_new_thread+0x98>)
    4840:	2129      	movs	r1, #41	; 0x29
    4842:	f01e fd85 	bl	23350 <assert_post_action>
    4846:	e7c6      	b.n	47d6 <arch_new_thread+0x1e>
    4848:	0001f8ad 	.word	0x0001f8ad
    484c:	000232ff 	.word	0x000232ff
    4850:	00029fc4 	.word	0x00029fc4
    4854:	00029ff6 	.word	0x00029ff6
    4858:	000297e6 	.word	0x000297e6
    485c:	0002a083 	.word	0x0002a083

00004860 <z_check_thread_stack_fail>:
 * @return The lowest allowed stack frame pointer, if error is a
 *         thread stack corruption, otherwise return 0.
 */
u32_t z_check_thread_stack_fail(const u32_t fault_addr, const u32_t psp)
{
	const struct k_thread *thread = _current;
    4860:	4a0a      	ldr	r2, [pc, #40]	; (488c <z_check_thread_stack_fail+0x2c>)
{
    4862:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    4864:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
    4866:	b178      	cbz	r0, 4888 <z_check_thread_stack_fail+0x28>
			/* Supervisor thread stack corruption */
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4868:	3316      	adds	r3, #22
    486a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
    486e:	d102      	bne.n	4876 <z_check_thread_stack_fail+0x16>
    4870:	f110 0f16 	cmn.w	r0, #22
    4874:	d904      	bls.n	4880 <z_check_thread_stack_fail+0x20>
    4876:	4281      	cmp	r1, r0
    4878:	bf2c      	ite	cs
    487a:	2100      	movcs	r1, #0
    487c:	2101      	movcc	r1, #1
    487e:	e000      	b.n	4882 <z_check_thread_stack_fail+0x22>
    4880:	2100      	movs	r1, #0
    4882:	2900      	cmp	r1, #0
		/* Thread stack corruption */
		return thread->stack_info.start;
	}
#endif /* CONFIG_USERSPACE */

	return 0;
    4884:	bf08      	it	eq
    4886:	2000      	moveq	r0, #0
}
    4888:	4770      	bx	lr
    488a:	bf00      	nop
    488c:	20001bc4 	.word	0x20001bc4

00004890 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    4890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4892:	4615      	mov	r5, r2
    4894:	4606      	mov	r6, r0
    4896:	460c      	mov	r4, r1
    4898:	461f      	mov	r7, r3
#endif

	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
    489a:	3520      	adds	r5, #32
	z_arm_configure_static_mpu_regions();
    489c:	f000 fb66 	bl	4f6c <z_arm_configure_static_mpu_regions>
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    48a0:	4b0a      	ldr	r3, [pc, #40]	; (48cc <arch_switch_to_main_thread+0x3c>)
	start_of_main_stack =
    48a2:	442c      	add	r4, r5
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    48a4:	4630      	mov	r0, r6
	_current = main_thread;
    48a6:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    48a8:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    48ac:	f000 fb7a 	bl	4fa4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    48b0:	4638      	mov	r0, r7
    48b2:	f384 8809 	msr	PSP, r4
    48b6:	2100      	movs	r1, #0
    48b8:	b663      	cpsie	if
    48ba:	f381 8811 	msr	BASEPRI, r1
    48be:	f3bf 8f6f 	isb	sy
    48c2:	2200      	movs	r2, #0
    48c4:	2300      	movs	r3, #0
    48c6:	f01e fd1a 	bl	232fe <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    48ca:	bf00      	nop
    48cc:	20001bc4 	.word	0x20001bc4

000048d0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    48d0:	4901      	ldr	r1, [pc, #4]	; (48d8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    48d2:	2210      	movs	r2, #16
	str	r2, [r1]
    48d4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    48d6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    48d8:	e000ed10 	.word	0xe000ed10

000048dc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    48dc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    48de:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    48e0:	f380 8811 	msr	BASEPRI, r0
	isb
    48e4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    48e8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    48ec:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    48ee:	b662      	cpsie	i
	isb
    48f0:	f3bf 8f6f 	isb	sy

	bx	lr
    48f4:	4770      	bx	lr
    48f6:	bf00      	nop

000048f8 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    48f8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    48fc:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    4900:	4672      	mov	r2, lr

	push {r0, lr}
    4902:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    4904:	f000 f9fa 	bl	4cfc <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    4908:	bd01      	pop	{r0, pc}
    490a:	bf00      	nop

0000490c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    490c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    490e:	4606      	mov	r6, r0

	if (esf != NULL) {
    4910:	460c      	mov	r4, r1
    4912:	b301      	cbz	r1, 4956 <z_arm_fatal_error+0x4a>
    4914:	4b13      	ldr	r3, [pc, #76]	; (4964 <z_arm_fatal_error+0x58>)
    4916:	4d14      	ldr	r5, [pc, #80]	; (4968 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4918:	4814      	ldr	r0, [pc, #80]	; (496c <z_arm_fatal_error+0x60>)
    491a:	1aed      	subs	r5, r5, r3
    491c:	08ed      	lsrs	r5, r5, #3
    491e:	01ad      	lsls	r5, r5, #6
    4920:	f045 0501 	orr.w	r5, r5, #1
    4924:	f8ad 5000 	strh.w	r5, [sp]
    4928:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    492c:	6809      	ldr	r1, [r1, #0]
    492e:	f01e fd77 	bl	23420 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    4932:	f8ad 5000 	strh.w	r5, [sp]
    4936:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    493a:	68e1      	ldr	r1, [r4, #12]
    493c:	480c      	ldr	r0, [pc, #48]	; (4970 <z_arm_fatal_error+0x64>)
    493e:	f01e fd6f 	bl	23420 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4942:	69e1      	ldr	r1, [r4, #28]
    4944:	480b      	ldr	r0, [pc, #44]	; (4974 <z_arm_fatal_error+0x68>)
    4946:	462a      	mov	r2, r5
    4948:	f01e fd3d 	bl	233c6 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    494c:	69a1      	ldr	r1, [r4, #24]
    494e:	480a      	ldr	r0, [pc, #40]	; (4978 <z_arm_fatal_error+0x6c>)
    4950:	462a      	mov	r2, r5
    4952:	f01e fd38 	bl	233c6 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4956:	4621      	mov	r1, r4
    4958:	4630      	mov	r0, r6
}
    495a:	b002      	add	sp, #8
    495c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    4960:	f01a bf34 	b.w	1f7cc <z_fatal_error>
    4964:	00028868 	.word	0x00028868
    4968:	00028a00 	.word	0x00028a00
    496c:	0002a0b4 	.word	0x0002a0b4
    4970:	0002a0e3 	.word	0x0002a0e3
    4974:	0002a112 	.word	0x0002a112
    4978:	0002a121 	.word	0x0002a121

0000497c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    497c:	bf30      	wfi
    b z_SysNmiOnReset
    497e:	f7ff bffd 	b.w	497c <z_SysNmiOnReset>
    4982:	bf00      	nop

00004984 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4984:	4a0e      	ldr	r2, [pc, #56]	; (49c0 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4986:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4988:	4b0e      	ldr	r3, [pc, #56]	; (49c4 <z_arm_prep_c+0x40>)
    498a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    498e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4990:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4994:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4998:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    499c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    49a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    49a4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    49a8:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    49ac:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    49b0:	f01a ff96 	bl	1f8e0 <z_bss_zero>
	z_data_copy();
    49b4:	f01a ff9e 	bl	1f8f4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    49b8:	f000 fa8e 	bl	4ed8 <z_arm_interrupt_init>
	z_cstart();
    49bc:	f01a ffd8 	bl	1f970 <z_cstart>
    49c0:	00000000 	.word	0x00000000
    49c4:	e000ed00 	.word	0xe000ed00

000049c8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    49c8:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
    49ca:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    49cc:	4a0b      	ldr	r2, [pc, #44]	; (49fc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    49ce:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    49d0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    49d2:	bf1e      	ittt	ne
	movne	r1, #0
    49d4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    49d6:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    49d8:	f023 fc30 	blne	2823c <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    49dc:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    49de:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    49e2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    49e6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	push {r0, r1}
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_CPU_CORTEX_M */
	ldr r1, =_sw_isr_table
    49ea:	4905      	ldr	r1, [pc, #20]	; (4a00 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    49ec:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    49ee:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    49f0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    49f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    49f6:	4903      	ldr	r1, [pc, #12]	; (4a04 <_isr_wrapper+0x3c>)
	bx r1
    49f8:	4708      	bx	r1
    49fa:	0000      	.short	0x0000
	ldr r2, =_kernel
    49fc:	20001bc4 	.word	0x20001bc4
	ldr r1, =_sw_isr_table
    4a00:	0002860c 	.word	0x0002860c
	ldr r1, =z_arm_int_exit
    4a04:	00004609 	.word	0x00004609

00004a08 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    4a08:	f020 fc16 	bl	25238 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4a0c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4a0e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4a12:	4808      	ldr	r0, [pc, #32]	; (4a34 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    4a14:	f44f 6180 	mov.w	r1, #1024	; 0x400
    adds r0, r0, r1
    4a18:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4a1a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4a1e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4a22:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4a24:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4a26:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4a2a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4a2e:	f7ff ffa9 	bl	4984 <z_arm_prep_c>
    4a32:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    4a34:	20004600 	.word	0x20004600

00004a38 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    4a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a3c:	4b3c      	ldr	r3, [pc, #240]	; (4b30 <mem_manage_fault+0xf8>)
    4a3e:	4c3d      	ldr	r4, [pc, #244]	; (4b34 <mem_manage_fault+0xfc>)
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4a40:	4d3d      	ldr	r5, [pc, #244]	; (4b38 <mem_manage_fault+0x100>)
    4a42:	1ae4      	subs	r4, r4, r3
    4a44:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    4a46:	01a4      	lsls	r4, r4, #6
    4a48:	f044 0901 	orr.w	r9, r4, #1
{
    4a4c:	4607      	mov	r7, r0
    4a4e:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    4a50:	483a      	ldr	r0, [pc, #232]	; (4b3c <mem_manage_fault+0x104>)
    4a52:	4649      	mov	r1, r9
{
    4a54:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    4a56:	f01e fca9 	bl	233ac <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4a5a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4a5c:	06d3      	lsls	r3, r2, #27
    4a5e:	d503      	bpl.n	4a68 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    4a60:	4837      	ldr	r0, [pc, #220]	; (4b40 <mem_manage_fault+0x108>)
    4a62:	4649      	mov	r1, r9
    4a64:	f01e fca2 	bl	233ac <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4a68:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4a6a:	071d      	lsls	r5, r3, #28
    4a6c:	d504      	bpl.n	4a78 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    4a6e:	4835      	ldr	r0, [pc, #212]	; (4b44 <mem_manage_fault+0x10c>)
    4a70:	f044 0101 	orr.w	r1, r4, #1
    4a74:	f01e fc9a 	bl	233ac <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4a78:	4d2f      	ldr	r5, [pc, #188]	; (4b38 <mem_manage_fault+0x100>)
    4a7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4a7c:	0798      	lsls	r0, r3, #30
    4a7e:	d543      	bpl.n	4b08 <mem_manage_fault+0xd0>
		PR_FAULT_INFO("  Data Access Violation");
    4a80:	f044 0a01 	orr.w	sl, r4, #1
    4a84:	4651      	mov	r1, sl
    4a86:	4830      	ldr	r0, [pc, #192]	; (4b48 <mem_manage_fault+0x110>)
    4a88:	f01e fc90 	bl	233ac <log_0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    4a8c:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4a90:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4a92:	0619      	lsls	r1, r3, #24
    4a94:	d50b      	bpl.n	4aae <mem_manage_fault+0x76>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4a96:	482d      	ldr	r0, [pc, #180]	; (4b4c <mem_manage_fault+0x114>)
    4a98:	4652      	mov	r2, sl
    4a9a:	4649      	mov	r1, r9
    4a9c:	f01e fc93 	bl	233c6 <log_1>
			if (from_hard_fault) {
    4aa0:	f1b8 0f00 	cmp.w	r8, #0
    4aa4:	d003      	beq.n	4aae <mem_manage_fault+0x76>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4aa6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4aac:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4aae:	4d22      	ldr	r5, [pc, #136]	; (4b38 <mem_manage_fault+0x100>)
    4ab0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4ab2:	07d2      	lsls	r2, r2, #31
    4ab4:	d504      	bpl.n	4ac0 <mem_manage_fault+0x88>
		PR_FAULT_INFO("  Instruction Access Violation");
    4ab6:	4826      	ldr	r0, [pc, #152]	; (4b50 <mem_manage_fault+0x118>)
    4ab8:	f044 0101 	orr.w	r1, r4, #1
    4abc:	f01e fc76 	bl	233ac <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4ac0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4ac2:	069b      	lsls	r3, r3, #26
    4ac4:	d504      	bpl.n	4ad0 <mem_manage_fault+0x98>
		PR_FAULT_INFO(
    4ac6:	4823      	ldr	r0, [pc, #140]	; (4b54 <mem_manage_fault+0x11c>)
    4ac8:	f044 0101 	orr.w	r1, r4, #1
    4acc:	f01e fc6e 	bl	233ac <log_0>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    4ad0:	4b19      	ldr	r3, [pc, #100]	; (4b38 <mem_manage_fault+0x100>)
    4ad2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    4ad4:	f014 0410 	ands.w	r4, r4, #16
    4ad8:	d00c      	beq.n	4af4 <mem_manage_fault+0xbc>
		 * As we only assess thread stack corruption, we only
		 * process the error further if the stack frame is on
		 * PSP. For always-banked MemManage Fault, this is
		 * equivalent to inspecting the RETTOBASE flag.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4ada:	685c      	ldr	r4, [r3, #4]
    4adc:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    4ae0:	d008      	beq.n	4af4 <mem_manage_fault+0xbc>
			u32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4ae2:	4639      	mov	r1, r7
    4ae4:	4648      	mov	r0, r9
    4ae6:	f7ff febb 	bl	4860 <z_check_thread_stack_fail>
				((u32_t) &esf[0]));

			if (min_stack_ptr) {
    4aea:	4604      	mov	r4, r0
    4aec:	b178      	cbz	r0, 4b0e <mem_manage_fault+0xd6>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4aee:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
    4af2:	2402      	movs	r4, #2
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4af4:	4a10      	ldr	r2, [pc, #64]	; (4b38 <mem_manage_fault+0x100>)
    4af6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4af8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4afc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    4afe:	2300      	movs	r3, #0
    4b00:	7033      	strb	r3, [r6, #0]

	return reason;
}
    4b02:	4620      	mov	r0, r4
    4b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	u32_t mmfar = -EINVAL;
    4b08:	f06f 0915 	mvn.w	r9, #21
    4b0c:	e7cf      	b.n	4aae <mem_manage_fault+0x76>
				__ASSERT(0,
    4b0e:	4a12      	ldr	r2, [pc, #72]	; (4b58 <mem_manage_fault+0x120>)
    4b10:	4912      	ldr	r1, [pc, #72]	; (4b5c <mem_manage_fault+0x124>)
    4b12:	4813      	ldr	r0, [pc, #76]	; (4b60 <mem_manage_fault+0x128>)
    4b14:	f240 132f 	movw	r3, #303	; 0x12f
    4b18:	f01e fbd7 	bl	232ca <printk>
    4b1c:	4811      	ldr	r0, [pc, #68]	; (4b64 <mem_manage_fault+0x12c>)
    4b1e:	f01e fbd4 	bl	232ca <printk>
    4b22:	480d      	ldr	r0, [pc, #52]	; (4b58 <mem_manage_fault+0x120>)
    4b24:	f240 112f 	movw	r1, #303	; 0x12f
    4b28:	f01e fc12 	bl	23350 <assert_post_action>
    4b2c:	e7e2      	b.n	4af4 <mem_manage_fault+0xbc>
    4b2e:	bf00      	nop
    4b30:	00028868 	.word	0x00028868
    4b34:	00028a00 	.word	0x00028a00
    4b38:	e000ed00 	.word	0xe000ed00
    4b3c:	0002a14f 	.word	0x0002a14f
    4b40:	0002a165 	.word	0x0002a165
    4b44:	0002a198 	.word	0x0002a198
    4b48:	0002a1ab 	.word	0x0002a1ab
    4b4c:	0002a1c3 	.word	0x0002a1c3
    4b50:	0002a1d9 	.word	0x0002a1d9
    4b54:	0002a1f8 	.word	0x0002a1f8
    4b58:	0002a227 	.word	0x0002a227
    4b5c:	0002d2c6 	.word	0x0002d2c6
    4b60:	000297e6 	.word	0x000297e6
    4b64:	0002a261 	.word	0x0002a261

00004b68 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
    4b68:	b570      	push	{r4, r5, r6, lr}
    4b6a:	4b23      	ldr	r3, [pc, #140]	; (4bf8 <usage_fault.isra.0+0x90>)
    4b6c:	4c23      	ldr	r4, [pc, #140]	; (4bfc <usage_fault.isra.0+0x94>)
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4b6e:	4d24      	ldr	r5, [pc, #144]	; (4c00 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    4b70:	4824      	ldr	r0, [pc, #144]	; (4c04 <usage_fault.isra.0+0x9c>)
    4b72:	1ae4      	subs	r4, r4, r3
    4b74:	08e4      	lsrs	r4, r4, #3
    4b76:	01a4      	lsls	r4, r4, #6
    4b78:	f044 0601 	orr.w	r6, r4, #1
    4b7c:	4631      	mov	r1, r6
    4b7e:	f01e fc15 	bl	233ac <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4b82:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4b84:	0193      	lsls	r3, r2, #6
    4b86:	d503      	bpl.n	4b90 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    4b88:	481f      	ldr	r0, [pc, #124]	; (4c08 <usage_fault.isra.0+0xa0>)
    4b8a:	4631      	mov	r1, r6
    4b8c:	f01e fc0e 	bl	233ac <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4b90:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4b92:	01dd      	lsls	r5, r3, #7
    4b94:	d504      	bpl.n	4ba0 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    4b96:	481d      	ldr	r0, [pc, #116]	; (4c0c <usage_fault.isra.0+0xa4>)
    4b98:	f044 0101 	orr.w	r1, r4, #1
    4b9c:	f01e fc06 	bl	233ac <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4ba0:	4d17      	ldr	r5, [pc, #92]	; (4c00 <usage_fault.isra.0+0x98>)
    4ba2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4ba4:	0310      	lsls	r0, r2, #12
    4ba6:	d504      	bpl.n	4bb2 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    4ba8:	4819      	ldr	r0, [pc, #100]	; (4c10 <usage_fault.isra.0+0xa8>)
    4baa:	f044 0101 	orr.w	r1, r4, #1
    4bae:	f01e fbfd 	bl	233ac <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4bb2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4bb4:	0359      	lsls	r1, r3, #13
    4bb6:	d504      	bpl.n	4bc2 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4bb8:	4816      	ldr	r0, [pc, #88]	; (4c14 <usage_fault.isra.0+0xac>)
    4bba:	f044 0101 	orr.w	r1, r4, #1
    4bbe:	f01e fbf5 	bl	233ac <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4bc2:	4d0f      	ldr	r5, [pc, #60]	; (4c00 <usage_fault.isra.0+0x98>)
    4bc4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4bc6:	0392      	lsls	r2, r2, #14
    4bc8:	d504      	bpl.n	4bd4 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4bca:	4813      	ldr	r0, [pc, #76]	; (4c18 <usage_fault.isra.0+0xb0>)
    4bcc:	f044 0101 	orr.w	r1, r4, #1
    4bd0:	f01e fbec 	bl	233ac <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4bd4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4bd6:	03db      	lsls	r3, r3, #15
    4bd8:	d504      	bpl.n	4be4 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4bda:	4810      	ldr	r0, [pc, #64]	; (4c1c <usage_fault.isra.0+0xb4>)
    4bdc:	f044 0101 	orr.w	r1, r4, #1
    4be0:	f01e fbe4 	bl	233ac <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4be4:	4a06      	ldr	r2, [pc, #24]	; (4c00 <usage_fault.isra.0+0x98>)
    4be6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4be8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4bec:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    4bf0:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    4bf2:	2000      	movs	r0, #0
    4bf4:	bd70      	pop	{r4, r5, r6, pc}
    4bf6:	bf00      	nop
    4bf8:	00028868 	.word	0x00028868
    4bfc:	00028a00 	.word	0x00028a00
    4c00:	e000ed00 	.word	0xe000ed00
    4c04:	0002a284 	.word	0x0002a284
    4c08:	0002a29c 	.word	0x0002a29c
    4c0c:	0002a2af 	.word	0x0002a2af
    4c10:	0002a2c9 	.word	0x0002a2c9
    4c14:	0002a2e7 	.word	0x0002a2e7
    4c18:	0002a30c 	.word	0x0002a30c
    4c1c:	0002a326 	.word	0x0002a326

00004c20 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c24:	4b2a      	ldr	r3, [pc, #168]	; (4cd0 <bus_fault.isra.0+0xb0>)
    4c26:	4c2b      	ldr	r4, [pc, #172]	; (4cd4 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4c28:	4d2b      	ldr	r5, [pc, #172]	; (4cd8 <bus_fault.isra.0+0xb8>)
    4c2a:	1ae4      	subs	r4, r4, r3
    4c2c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    4c2e:	01a4      	lsls	r4, r4, #6
    4c30:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4c34:	4607      	mov	r7, r0
    4c36:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    4c38:	4828      	ldr	r0, [pc, #160]	; (4cdc <bus_fault.isra.0+0xbc>)
    4c3a:	4641      	mov	r1, r8
    4c3c:	f01e fbb6 	bl	233ac <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4c40:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4c42:	04d1      	lsls	r1, r2, #19
    4c44:	d503      	bpl.n	4c4e <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    4c46:	4826      	ldr	r0, [pc, #152]	; (4ce0 <bus_fault.isra.0+0xc0>)
    4c48:	4641      	mov	r1, r8
    4c4a:	f01e fbaf 	bl	233ac <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4c4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4c50:	051a      	lsls	r2, r3, #20
    4c52:	d504      	bpl.n	4c5e <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    4c54:	4823      	ldr	r0, [pc, #140]	; (4ce4 <bus_fault.isra.0+0xc4>)
    4c56:	f044 0101 	orr.w	r1, r4, #1
    4c5a:	f01e fba7 	bl	233ac <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4c5e:	4d1e      	ldr	r5, [pc, #120]	; (4cd8 <bus_fault.isra.0+0xb8>)
    4c60:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4c62:	059b      	lsls	r3, r3, #22
    4c64:	d512      	bpl.n	4c8c <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    4c66:	f044 0801 	orr.w	r8, r4, #1
    4c6a:	481f      	ldr	r0, [pc, #124]	; (4ce8 <bus_fault.isra.0+0xc8>)
    4c6c:	4641      	mov	r1, r8
    4c6e:	f01e fb9d 	bl	233ac <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    4c72:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4c74:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4c76:	0418      	lsls	r0, r3, #16
    4c78:	d508      	bpl.n	4c8c <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4c7a:	481c      	ldr	r0, [pc, #112]	; (4cec <bus_fault.isra.0+0xcc>)
    4c7c:	4642      	mov	r2, r8
    4c7e:	f01e fba2 	bl	233c6 <log_1>
			if (from_hard_fault) {
    4c82:	b11f      	cbz	r7, 4c8c <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4c84:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4c86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4c8a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4c8c:	4d12      	ldr	r5, [pc, #72]	; (4cd8 <bus_fault.isra.0+0xb8>)
    4c8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4c90:	0559      	lsls	r1, r3, #21
    4c92:	d504      	bpl.n	4c9e <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    4c94:	4816      	ldr	r0, [pc, #88]	; (4cf0 <bus_fault.isra.0+0xd0>)
    4c96:	f044 0101 	orr.w	r1, r4, #1
    4c9a:	f01e fb87 	bl	233ac <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4c9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4ca0:	05da      	lsls	r2, r3, #23
    4ca2:	d50d      	bpl.n	4cc0 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    4ca4:	4813      	ldr	r0, [pc, #76]	; (4cf4 <bus_fault.isra.0+0xd4>)
    4ca6:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4caa:	f01e fb7f 	bl	233ac <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4cae:	4a0a      	ldr	r2, [pc, #40]	; (4cd8 <bus_fault.isra.0+0xb8>)
    4cb0:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4cb2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4cb4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4cb8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4cba:	7030      	strb	r0, [r6, #0]
}
    4cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4cc0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4cc2:	049b      	lsls	r3, r3, #18
    4cc4:	d5f3      	bpl.n	4cae <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4cc6:	480c      	ldr	r0, [pc, #48]	; (4cf8 <bus_fault.isra.0+0xd8>)
    4cc8:	f044 0101 	orr.w	r1, r4, #1
    4ccc:	e7ed      	b.n	4caa <bus_fault.isra.0+0x8a>
    4cce:	bf00      	nop
    4cd0:	00028868 	.word	0x00028868
    4cd4:	00028a00 	.word	0x00028a00
    4cd8:	e000ed00 	.word	0xe000ed00
    4cdc:	0002a351 	.word	0x0002a351
    4ce0:	0002a367 	.word	0x0002a367
    4ce4:	0002a198 	.word	0x0002a198
    4ce8:	0002a378 	.word	0x0002a378
    4cec:	0002a391 	.word	0x0002a391
    4cf0:	0002a3a6 	.word	0x0002a3a6
    4cf4:	0002a3c1 	.word	0x0002a3c1
    4cf8:	0002a1f8 	.word	0x0002a1f8

00004cfc <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    4cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4d00:	4b5f      	ldr	r3, [pc, #380]	; (4e80 <z_arm_fault+0x184>)
    4d02:	685d      	ldr	r5, [r3, #4]
{
    4d04:	b08a      	sub	sp, #40	; 0x28
    4d06:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4d08:	f3c5 0408 	ubfx	r4, r5, #0, #9
    4d0c:	2700      	movs	r7, #0
    4d0e:	f387 8811 	msr	BASEPRI, r7
    4d12:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4d16:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4d1a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4d1e:	d10d      	bne.n	4d3c <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4d20:	f002 030c 	and.w	r3, r2, #12
    4d24:	2b08      	cmp	r3, #8
    4d26:	d11a      	bne.n	4d5e <z_arm_fault+0x62>
    4d28:	4956      	ldr	r1, [pc, #344]	; (4e84 <z_arm_fault+0x188>)
    4d2a:	4b57      	ldr	r3, [pc, #348]	; (4e88 <z_arm_fault+0x18c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4d2c:	4857      	ldr	r0, [pc, #348]	; (4e8c <z_arm_fault+0x190>)
    4d2e:	1ac9      	subs	r1, r1, r3
    4d30:	08c9      	lsrs	r1, r1, #3
    4d32:	0189      	lsls	r1, r1, #6
    4d34:	f041 0101 	orr.w	r1, r1, #1
    4d38:	f01e fb38 	bl	233ac <log_0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    4d3c:	4a54      	ldr	r2, [pc, #336]	; (4e90 <z_arm_fault+0x194>)
    4d3e:	4955      	ldr	r1, [pc, #340]	; (4e94 <z_arm_fault+0x198>)
    4d40:	4855      	ldr	r0, [pc, #340]	; (4e98 <z_arm_fault+0x19c>)
    4d42:	f44f 736c 	mov.w	r3, #944	; 0x3b0
    4d46:	f01e fac0 	bl	232ca <printk>
    4d4a:	4854      	ldr	r0, [pc, #336]	; (4e9c <z_arm_fault+0x1a0>)
    4d4c:	f01e fabd 	bl	232ca <printk>
    4d50:	484f      	ldr	r0, [pc, #316]	; (4e90 <z_arm_fault+0x194>)
    4d52:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    4d56:	f01e fafb 	bl	23350 <assert_post_action>
    4d5a:	2600      	movs	r6, #0
    4d5c:	e005      	b.n	4d6a <z_arm_fault+0x6e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4d5e:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    4d60:	bf5c      	itt	pl
    4d62:	4606      	movpl	r6, r0
			*nested_exc = true;
    4d64:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
    4d66:	2e00      	cmp	r6, #0
    4d68:	d0e8      	beq.n	4d3c <z_arm_fault+0x40>
	*recoverable = false;
    4d6a:	2300      	movs	r3, #0
    4d6c:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    4d70:	1ee3      	subs	r3, r4, #3
    4d72:	2b09      	cmp	r3, #9
    4d74:	d86b      	bhi.n	4e4e <z_arm_fault+0x152>
    4d76:	e8df f003 	tbb	[pc, r3]
    4d7a:	5905      	.short	0x5905
    4d7c:	6a6a3d5d 	.word	0x6a6a3d5d
    4d80:	616a6a6a 	.word	0x616a6a6a
    4d84:	4b40      	ldr	r3, [pc, #256]	; (4e88 <z_arm_fault+0x18c>)
    4d86:	4d3f      	ldr	r5, [pc, #252]	; (4e84 <z_arm_fault+0x188>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    4d88:	4845      	ldr	r0, [pc, #276]	; (4ea0 <z_arm_fault+0x1a4>)
    4d8a:	1aed      	subs	r5, r5, r3
    4d8c:	08ed      	lsrs	r5, r5, #3
    4d8e:	01ad      	lsls	r5, r5, #6
    4d90:	f045 0501 	orr.w	r5, r5, #1
    4d94:	4629      	mov	r1, r5
    4d96:	f01e fb09 	bl	233ac <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4d9a:	4b39      	ldr	r3, [pc, #228]	; (4e80 <z_arm_fault+0x184>)
    4d9c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    4d9e:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4da2:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    4da6:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4daa:	d005      	beq.n	4db8 <z_arm_fault+0xbc>
		PR_EXC("  Bus fault on vector table read");
    4dac:	483d      	ldr	r0, [pc, #244]	; (4ea4 <z_arm_fault+0x1a8>)
    4dae:	4629      	mov	r1, r5
	PR_FAULT_INFO(
    4db0:	f01e fafc 	bl	233ac <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    4db4:	2400      	movs	r4, #0
}
    4db6:	e020      	b.n	4dfa <z_arm_fault+0xfe>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4dba:	005b      	lsls	r3, r3, #1
    4dbc:	d51d      	bpl.n	4dfa <z_arm_fault+0xfe>
		PR_EXC("  Fault escalation (see below)");
    4dbe:	483a      	ldr	r0, [pc, #232]	; (4ea8 <z_arm_fault+0x1ac>)
    4dc0:	4629      	mov	r1, r5
    4dc2:	f01e faf3 	bl	233ac <log_0>
		if (SCB_MMFSR != 0) {
    4dc6:	4b39      	ldr	r3, [pc, #228]	; (4eac <z_arm_fault+0x1b0>)
    4dc8:	781b      	ldrb	r3, [r3, #0]
    4dca:	b133      	cbz	r3, 4dda <z_arm_fault+0xde>
			reason = mem_manage_fault(esf, 1, recoverable);
    4dcc:	f10d 0207 	add.w	r2, sp, #7
    4dd0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4dd2:	4630      	mov	r0, r6
    4dd4:	f7ff fe30 	bl	4a38 <mem_manage_fault>
    4dd8:	e00e      	b.n	4df8 <z_arm_fault+0xfc>
		} else if (SCB_BFSR != 0) {
    4dda:	4b35      	ldr	r3, [pc, #212]	; (4eb0 <z_arm_fault+0x1b4>)
    4ddc:	781b      	ldrb	r3, [r3, #0]
    4dde:	b12b      	cbz	r3, 4dec <z_arm_fault+0xf0>
			reason = bus_fault(esf, 1, recoverable);
    4de0:	f10d 0107 	add.w	r1, sp, #7
    4de4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4de6:	f7ff ff1b 	bl	4c20 <bus_fault.isra.0>
    4dea:	e005      	b.n	4df8 <z_arm_fault+0xfc>
		} else if (SCB_UFSR != 0) {
    4dec:	4b31      	ldr	r3, [pc, #196]	; (4eb4 <z_arm_fault+0x1b8>)
    4dee:	881b      	ldrh	r3, [r3, #0]
    4df0:	b29b      	uxth	r3, r3
    4df2:	b113      	cbz	r3, 4dfa <z_arm_fault+0xfe>
			reason = usage_fault(esf);
    4df4:	f7ff feb8 	bl	4b68 <usage_fault.isra.0>
    4df8:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4dfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4dfe:	b993      	cbnz	r3, 4e26 <z_arm_fault+0x12a>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4e00:	2220      	movs	r2, #32
    4e02:	4631      	mov	r1, r6
    4e04:	a802      	add	r0, sp, #8
    4e06:	f020 f943 	bl	25090 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4e0c:	b39f      	cbz	r7, 4e76 <z_arm_fault+0x17a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4e0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4e12:	b922      	cbnz	r2, 4e1e <z_arm_fault+0x122>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4e14:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4e18:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4e1c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4e1e:	a902      	add	r1, sp, #8
    4e20:	4620      	mov	r0, r4
    4e22:	f7ff fd73 	bl	490c <z_arm_fatal_error>
}
    4e26:	b00a      	add	sp, #40	; 0x28
    4e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    4e2c:	f10d 0207 	add.w	r2, sp, #7
    4e30:	2100      	movs	r1, #0
    4e32:	e7ce      	b.n	4dd2 <z_arm_fault+0xd6>
		reason = bus_fault(esf, 0, recoverable);
    4e34:	f10d 0107 	add.w	r1, sp, #7
    4e38:	2000      	movs	r0, #0
    4e3a:	e7d4      	b.n	4de6 <z_arm_fault+0xea>
    4e3c:	4911      	ldr	r1, [pc, #68]	; (4e84 <z_arm_fault+0x188>)
    4e3e:	4b12      	ldr	r3, [pc, #72]	; (4e88 <z_arm_fault+0x18c>)
	PR_FAULT_INFO(
    4e40:	481d      	ldr	r0, [pc, #116]	; (4eb8 <z_arm_fault+0x1bc>)
    4e42:	1ac9      	subs	r1, r1, r3
    4e44:	08c9      	lsrs	r1, r1, #3
    4e46:	0189      	lsls	r1, r1, #6
    4e48:	f041 0101 	orr.w	r1, r1, #1
    4e4c:	e7b0      	b.n	4db0 <z_arm_fault+0xb4>
    4e4e:	4a0e      	ldr	r2, [pc, #56]	; (4e88 <z_arm_fault+0x18c>)
    4e50:	4b0c      	ldr	r3, [pc, #48]	; (4e84 <z_arm_fault+0x188>)
	PR_FAULT_INFO("***** %s %d) *****",
    4e52:	481a      	ldr	r0, [pc, #104]	; (4ebc <z_arm_fault+0x1c0>)
    4e54:	491a      	ldr	r1, [pc, #104]	; (4ec0 <z_arm_fault+0x1c4>)
    4e56:	1a9b      	subs	r3, r3, r2
    4e58:	08db      	lsrs	r3, r3, #3
    4e5a:	f415 7ff8 	tst.w	r5, #496	; 0x1f0
    4e5e:	ea4f 1383 	mov.w	r3, r3, lsl #6
    4e62:	bf18      	it	ne
    4e64:	4601      	movne	r1, r0
    4e66:	f043 0301 	orr.w	r3, r3, #1
    4e6a:	4816      	ldr	r0, [pc, #88]	; (4ec4 <z_arm_fault+0x1c8>)
    4e6c:	f1a4 0210 	sub.w	r2, r4, #16
    4e70:	f01e fabd 	bl	233ee <log_2>
    4e74:	e79e      	b.n	4db4 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4e76:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4e7a:	f023 0301 	bic.w	r3, r3, #1
    4e7e:	e7cd      	b.n	4e1c <z_arm_fault+0x120>
    4e80:	e000ed00 	.word	0xe000ed00
    4e84:	00028a00 	.word	0x00028a00
    4e88:	00028868 	.word	0x00028868
    4e8c:	0002a3d9 	.word	0x0002a3d9
    4e90:	0002a227 	.word	0x0002a227
    4e94:	0002a404 	.word	0x0002a404
    4e98:	000297e6 	.word	0x000297e6
    4e9c:	0002a417 	.word	0x0002a417
    4ea0:	0002a455 	.word	0x0002a455
    4ea4:	0002a46c 	.word	0x0002a46c
    4ea8:	0002a48d 	.word	0x0002a48d
    4eac:	e000ed28 	.word	0xe000ed28
    4eb0:	e000ed29 	.word	0xe000ed29
    4eb4:	e000ed2a 	.word	0xe000ed2a
    4eb8:	0002a4ac 	.word	0x0002a4ac
    4ebc:	0002a4f7 	.word	0x0002a4f7
    4ec0:	0002a4e2 	.word	0x0002a4e2
    4ec4:	0002a510 	.word	0x0002a510

00004ec8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4ec8:	4a02      	ldr	r2, [pc, #8]	; (4ed4 <z_arm_fault_init+0xc>)
    4eca:	6953      	ldr	r3, [r2, #20]
    4ecc:	f043 0310 	orr.w	r3, r3, #16
    4ed0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4ed2:	4770      	bx	lr
    4ed4:	e000ed00 	.word	0xe000ed00

00004ed8 <z_arm_interrupt_init>:
    4ed8:	4804      	ldr	r0, [pc, #16]	; (4eec <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4eda:	2300      	movs	r3, #0
    4edc:	2120      	movs	r1, #32
    4ede:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4ee0:	3301      	adds	r3, #1
    4ee2:	2b27      	cmp	r3, #39	; 0x27
    4ee4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4ee8:	d1f9      	bne.n	4ede <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4eea:	4770      	bx	lr
    4eec:	e000e100 	.word	0xe000e100

00004ef0 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    4ef0:	b538      	push	{r3, r4, r5, lr}
    4ef2:	4604      	mov	r4, r0
	__asm__ volatile(
    4ef4:	f04f 0320 	mov.w	r3, #32
    4ef8:	f3ef 8511 	mrs	r5, BASEPRI
    4efc:	f383 8811 	msr	BASEPRI, r3
    4f00:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    4f04:	7b03      	ldrb	r3, [r0, #12]
    4f06:	07db      	lsls	r3, r3, #31
    4f08:	d50c      	bpl.n	4f24 <z_impl_k_thread_abort+0x34>
    4f0a:	4912      	ldr	r1, [pc, #72]	; (4f54 <z_impl_k_thread_abort+0x64>)
    4f0c:	4a12      	ldr	r2, [pc, #72]	; (4f58 <z_impl_k_thread_abort+0x68>)
    4f0e:	4813      	ldr	r0, [pc, #76]	; (4f5c <z_impl_k_thread_abort+0x6c>)
    4f10:	2323      	movs	r3, #35	; 0x23
    4f12:	f01e f9da 	bl	232ca <printk>
    4f16:	4812      	ldr	r0, [pc, #72]	; (4f60 <z_impl_k_thread_abort+0x70>)
    4f18:	f01e f9d7 	bl	232ca <printk>
    4f1c:	480e      	ldr	r0, [pc, #56]	; (4f58 <z_impl_k_thread_abort+0x68>)
    4f1e:	2123      	movs	r1, #35	; 0x23
    4f20:	f01e fa16 	bl	23350 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
    4f24:	4620      	mov	r0, r4
    4f26:	f01c f8d9 	bl	210dc <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    4f2a:	4b0e      	ldr	r3, [pc, #56]	; (4f64 <z_impl_k_thread_abort+0x74>)
    4f2c:	689b      	ldr	r3, [r3, #8]
    4f2e:	42a3      	cmp	r3, r4
    4f30:	d10b      	bne.n	4f4a <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    4f32:	4b0d      	ldr	r3, [pc, #52]	; (4f68 <z_impl_k_thread_abort+0x78>)
    4f34:	685a      	ldr	r2, [r3, #4]
    4f36:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4f3a:	b912      	cbnz	r2, 4f42 <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    4f3c:	4628      	mov	r0, r5
    4f3e:	f7ff fb71 	bl	4624 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4f42:	685a      	ldr	r2, [r3, #4]
    4f44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4f48:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    4f4a:	4628      	mov	r0, r5
}
    4f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    4f50:	f023 b9d9 	b.w	28306 <z_reschedule_irqlock>
    4f54:	0002a564 	.word	0x0002a564
    4f58:	0002a523 	.word	0x0002a523
    4f5c:	000297e6 	.word	0x000297e6
    4f60:	0002a592 	.word	0x0002a592
    4f64:	20001bc4 	.word	0x20001bc4
    4f68:	e000ed00 	.word	0xe000ed00

00004f6c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    4f6e:	4b08      	ldr	r3, [pc, #32]	; (4f90 <z_arm_configure_static_mpu_regions+0x24>)
    4f70:	9301      	str	r3, [sp, #4]
    4f72:	4b08      	ldr	r3, [pc, #32]	; (4f94 <z_arm_configure_static_mpu_regions+0x28>)
    4f74:	9302      	str	r3, [sp, #8]
    4f76:	4b08      	ldr	r3, [pc, #32]	; (4f98 <z_arm_configure_static_mpu_regions+0x2c>)
    4f78:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    4f7a:	ab01      	add	r3, sp, #4
    4f7c:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4f7e:	4a07      	ldr	r2, [pc, #28]	; (4f9c <z_arm_configure_static_mpu_regions+0x30>)
    4f80:	4b07      	ldr	r3, [pc, #28]	; (4fa0 <z_arm_configure_static_mpu_regions+0x34>)
    4f82:	2101      	movs	r1, #1
    4f84:	4668      	mov	r0, sp
    4f86:	f000 f8f3 	bl	5170 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    4f8a:	b005      	add	sp, #20
    4f8c:	f85d fb04 	ldr.w	pc, [sp], #4
    4f90:	20000000 	.word	0x20000000
    4f94:	00000000 	.word	0x00000000
    4f98:	060b0000 	.word	0x060b0000
    4f9c:	20000000 	.word	0x20000000
    4fa0:	20010000 	.word	0x20010000

00004fa4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    4fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		__ASSERT((u32_t)thread->stack_obj == guard_start,
		"Guard start (0x%x) not beginning at stack object (0x%x)\n",
		guard_start, (u32_t)thread->stack_obj);
	}
#else
	guard_start = thread->stack_info.start - guard_size;
    4fa6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    4faa:	3b20      	subs	r3, #32
#endif /* CONFIG_USERSPACE */

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");
	guard = (const struct k_mem_partition)
    4fac:	9301      	str	r3, [sp, #4]
    4fae:	4b06      	ldr	r3, [pc, #24]	; (4fc8 <z_arm_configure_dynamic_mpu_regions+0x24>)
    4fb0:	2220      	movs	r2, #32
    4fb2:	e9cd 2302 	strd	r2, r3, [sp, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    4fb6:	2101      	movs	r1, #1
	dynamic_regions[region_num] = &guard;
    4fb8:	ab01      	add	r3, sp, #4
	arm_core_mpu_configure_dynamic_mpu_regions(
    4fba:	4668      	mov	r0, sp
	dynamic_regions[region_num] = &guard;
    4fbc:	9300      	str	r3, [sp, #0]
	arm_core_mpu_configure_dynamic_mpu_regions(
    4fbe:	f000 f8fd 	bl	51bc <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    4fc2:	b005      	add	sp, #20
    4fc4:	f85d fb04 	ldr.w	pc, [sp], #4
    4fc8:	150b0000 	.word	0x150b0000

00004fcc <mpu_configure_regions>:
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    4fcc:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 508c <mpu_configure_regions+0xc0>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    4fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fd2:	4606      	mov	r6, r0
    4fd4:	460f      	mov	r7, r1
	int i;
	int reg_index = start_reg_index;
    4fd6:	4610      	mov	r0, r2

	for (i = 0; i < regions_num; i++) {
    4fd8:	2100      	movs	r1, #0
    4fda:	42b9      	cmp	r1, r7
    4fdc:	da1b      	bge.n	5016 <mpu_configure_regions+0x4a>
		if (regions[i]->size == 0U) {
    4fde:	f856 e021 	ldr.w	lr, [r6, r1, lsl #2]
    4fe2:	f8de 4004 	ldr.w	r4, [lr, #4]
    4fe6:	2c00      	cmp	r4, #0
    4fe8:	d046      	beq.n	5078 <mpu_configure_regions+0xac>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    4fea:	b1ab      	cbz	r3, 5018 <mpu_configure_regions+0x4c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    4fec:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    4fee:	422c      	tst	r4, r5
    4ff0:	d105      	bne.n	4ffe <mpu_configure_regions+0x32>
		&&
    4ff2:	2c1f      	cmp	r4, #31
    4ff4:	d903      	bls.n	4ffe <mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0U);
    4ff6:	f8de 2000 	ldr.w	r2, [lr]
		&&
    4ffa:	4215      	tst	r5, r2
    4ffc:	d00c      	beq.n	5018 <mpu_configure_regions+0x4c>
    4ffe:	4a1f      	ldr	r2, [pc, #124]	; (507c <mpu_configure_regions+0xb0>)
    5000:	4b1f      	ldr	r3, [pc, #124]	; (5080 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    5002:	4820      	ldr	r0, [pc, #128]	; (5084 <mpu_configure_regions+0xb8>)
    5004:	1ad2      	subs	r2, r2, r3
    5006:	08d2      	lsrs	r2, r2, #3
    5008:	0192      	lsls	r2, r2, #6
    500a:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    500e:	f01e f9da 	bl	233c6 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    5012:	f06f 0015 	mvn.w	r0, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    5016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    5018:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    501a:	b2c5      	uxtb	r5, r0
	region_conf.base = new_region->start;
    501c:	f8de 2000 	ldr.w	r2, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    5020:	f8de 0008 	ldr.w	r0, [lr, #8]
    5024:	d916      	bls.n	5054 <mpu_configure_regions+0x88>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    5026:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    502a:	d815      	bhi.n	5058 <mpu_configure_regions+0x8c>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    502c:	3c01      	subs	r4, #1
    502e:	fab4 f484 	clz	r4, r4
    5032:	f1c4 041f 	rsb	r4, r4, #31
    5036:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    5038:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    503a:	ea44 0400 	orr.w	r4, r4, r0
    503e:	d90d      	bls.n	505c <mpu_configure_regions+0x90>
    5040:	4a0e      	ldr	r2, [pc, #56]	; (507c <mpu_configure_regions+0xb0>)
    5042:	4b0f      	ldr	r3, [pc, #60]	; (5080 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    5044:	4810      	ldr	r0, [pc, #64]	; (5088 <mpu_configure_regions+0xbc>)
    5046:	1ad2      	subs	r2, r2, r3
    5048:	08d2      	lsrs	r2, r2, #3
    504a:	0192      	lsls	r2, r2, #6
    504c:	f042 0201 	orr.w	r2, r2, #1
    5050:	4629      	mov	r1, r5
    5052:	e7dc      	b.n	500e <mpu_configure_regions+0x42>
		return REGION_32B;
    5054:	2408      	movs	r4, #8
    5056:	e7ef      	b.n	5038 <mpu_configure_regions+0x6c>
		return REGION_4G;
    5058:	243e      	movs	r4, #62	; 0x3e
    505a:	e7ed      	b.n	5038 <mpu_configure_regions+0x6c>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    505c:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    5060:	432a      	orrs	r2, r5
    5062:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5066:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    506a:	f8cc 5008 	str.w	r5, [ip, #8]
		reg_index++;
    506e:	1c68      	adds	r0, r5, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5070:	f8cc 200c 	str.w	r2, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5074:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    5078:	3101      	adds	r1, #1
    507a:	e7ae      	b.n	4fda <mpu_configure_regions+0xe>
    507c:	000289f0 	.word	0x000289f0
    5080:	00028868 	.word	0x00028868
    5084:	0002a5b1 	.word	0x0002a5b1
    5088:	0002a5d4 	.word	0x0002a5d4
    508c:	e000ed90 	.word	0xe000ed90

00005090 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    5090:	4b03      	ldr	r3, [pc, #12]	; (50a0 <arm_core_mpu_enable+0x10>)
    5092:	2205      	movs	r2, #5
    5094:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    5096:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    509a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    509e:	4770      	bx	lr
    50a0:	e000ed90 	.word	0xe000ed90

000050a4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    50a4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    50a8:	4b01      	ldr	r3, [pc, #4]	; (50b0 <arm_core_mpu_disable+0xc>)
    50aa:	2200      	movs	r2, #0
    50ac:	605a      	str	r2, [r3, #4]
}
    50ae:	4770      	bx	lr
    50b0:	e000ed90 	.word	0xe000ed90

000050b4 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    50b4:	4925      	ldr	r1, [pc, #148]	; (514c <arm_mpu_init+0x98>)
{
    50b6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    50b8:	680c      	ldr	r4, [r1, #0]
    50ba:	2c08      	cmp	r4, #8
    50bc:	d913      	bls.n	50e6 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    50be:	f240 1329 	movw	r3, #297	; 0x129
    50c2:	4a23      	ldr	r2, [pc, #140]	; (5150 <arm_mpu_init+0x9c>)
    50c4:	4923      	ldr	r1, [pc, #140]	; (5154 <arm_mpu_init+0xa0>)
    50c6:	4824      	ldr	r0, [pc, #144]	; (5158 <arm_mpu_init+0xa4>)
    50c8:	f01e f8ff 	bl	232ca <printk>
    50cc:	4823      	ldr	r0, [pc, #140]	; (515c <arm_mpu_init+0xa8>)
    50ce:	2208      	movs	r2, #8
    50d0:	4621      	mov	r1, r4
    50d2:	f01e f8fa 	bl	232ca <printk>
    50d6:	481e      	ldr	r0, [pc, #120]	; (5150 <arm_mpu_init+0x9c>)
    50d8:	f240 1129 	movw	r1, #297	; 0x129
    50dc:	f01e f938 	bl	23350 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    50e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    50e4:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    50e6:	f7ff ffdd 	bl	50a4 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    50ea:	6848      	ldr	r0, [r1, #4]
    50ec:	491c      	ldr	r1, [pc, #112]	; (5160 <arm_mpu_init+0xac>)
    50ee:	2200      	movs	r2, #0
    50f0:	4294      	cmp	r4, r2
    50f2:	f100 000c 	add.w	r0, r0, #12
    50f6:	d119      	bne.n	512c <arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    50f8:	4b1a      	ldr	r3, [pc, #104]	; (5164 <arm_mpu_init+0xb0>)
    50fa:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    50fc:	f7ff ffc8 	bl	5090 <arm_core_mpu_enable>
	__ASSERT(
    5100:	680b      	ldr	r3, [r1, #0]
    5102:	f3c3 2307 	ubfx	r3, r3, #8, #8
    5106:	2b08      	cmp	r3, #8
    5108:	d00e      	beq.n	5128 <arm_mpu_init+0x74>
    510a:	4917      	ldr	r1, [pc, #92]	; (5168 <arm_mpu_init+0xb4>)
    510c:	4a10      	ldr	r2, [pc, #64]	; (5150 <arm_mpu_init+0x9c>)
    510e:	4812      	ldr	r0, [pc, #72]	; (5158 <arm_mpu_init+0xa4>)
    5110:	f240 1347 	movw	r3, #327	; 0x147
    5114:	f01e f8d9 	bl	232ca <printk>
    5118:	4814      	ldr	r0, [pc, #80]	; (516c <arm_mpu_init+0xb8>)
    511a:	f01e f8d6 	bl	232ca <printk>
    511e:	480c      	ldr	r0, [pc, #48]	; (5150 <arm_mpu_init+0x9c>)
    5120:	f240 1147 	movw	r1, #327	; 0x147
    5124:	f01e f914 	bl	23350 <assert_post_action>
	return 0;
    5128:	2000      	movs	r0, #0
    512a:	e7db      	b.n	50e4 <arm_mpu_init+0x30>
	MPU->RNR = index;
    512c:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    512e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    5132:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    5136:	4313      	orrs	r3, r2
    5138:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    513c:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    513e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    5142:	f043 0301 	orr.w	r3, r3, #1
    5146:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5148:	3201      	adds	r2, #1
    514a:	e7d1      	b.n	50f0 <arm_mpu_init+0x3c>
    514c:	00028d00 	.word	0x00028d00
    5150:	0002a5fa 	.word	0x0002a5fa
    5154:	0002d2c6 	.word	0x0002d2c6
    5158:	000297e6 	.word	0x000297e6
    515c:	0002a63a 	.word	0x0002a63a
    5160:	e000ed90 	.word	0xe000ed90
    5164:	2000219c 	.word	0x2000219c
    5168:	0002a66e 	.word	0x0002a66e
    516c:	0002a6be 	.word	0x0002a6be

00005170 <arm_core_mpu_configure_static_mpu_regions>:
{
    5170:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    5172:	4d0d      	ldr	r5, [pc, #52]	; (51a8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    5174:	2301      	movs	r3, #1
    5176:	782a      	ldrb	r2, [r5, #0]
    5178:	460c      	mov	r4, r1
    517a:	f7ff ff27 	bl	4fcc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    517e:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    5180:	3016      	adds	r0, #22
    5182:	d10f      	bne.n	51a4 <arm_core_mpu_configure_static_mpu_regions+0x34>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    5184:	23f2      	movs	r3, #242	; 0xf2
    5186:	4a09      	ldr	r2, [pc, #36]	; (51ac <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    5188:	4909      	ldr	r1, [pc, #36]	; (51b0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    518a:	480a      	ldr	r0, [pc, #40]	; (51b4 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    518c:	f01e f89d 	bl	232ca <printk>
    5190:	4621      	mov	r1, r4
    5192:	4809      	ldr	r0, [pc, #36]	; (51b8 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    5194:	f01e f899 	bl	232ca <printk>
}
    5198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    519c:	4803      	ldr	r0, [pc, #12]	; (51ac <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    519e:	21f2      	movs	r1, #242	; 0xf2
    51a0:	f01e b8d6 	b.w	23350 <assert_post_action>
}
    51a4:	bd38      	pop	{r3, r4, r5, pc}
    51a6:	bf00      	nop
    51a8:	2000219c 	.word	0x2000219c
    51ac:	0002a5fa 	.word	0x0002a5fa
    51b0:	0002d2c6 	.word	0x0002d2c6
    51b4:	000297e6 	.word	0x000297e6
    51b8:	0002a6df 	.word	0x0002a6df

000051bc <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    51bc:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    51be:	4a12      	ldr	r2, [pc, #72]	; (5208 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    51c0:	2300      	movs	r3, #0
    51c2:	7812      	ldrb	r2, [r2, #0]
    51c4:	460c      	mov	r4, r1
    51c6:	f7ff ff01 	bl	4fcc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    51ca:	f110 0f16 	cmn.w	r0, #22
    51ce:	d008      	beq.n	51e2 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    51d0:	4b0e      	ldr	r3, [pc, #56]	; (520c <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    51d2:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    51d4:	2807      	cmp	r0, #7
    51d6:	dd00      	ble.n	51da <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
}
    51d8:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    51da:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    51dc:	611a      	str	r2, [r3, #16]
    51de:	3001      	adds	r0, #1
    51e0:	e7f8      	b.n	51d4 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    51e2:	4a0b      	ldr	r2, [pc, #44]	; (5210 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    51e4:	490b      	ldr	r1, [pc, #44]	; (5214 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    51e6:	480c      	ldr	r0, [pc, #48]	; (5218 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    51e8:	f240 1311 	movw	r3, #273	; 0x111
    51ec:	f01e f86d 	bl	232ca <printk>
    51f0:	4621      	mov	r1, r4
    51f2:	480a      	ldr	r0, [pc, #40]	; (521c <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    51f4:	f01e f869 	bl	232ca <printk>
}
    51f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    51fc:	4804      	ldr	r0, [pc, #16]	; (5210 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    51fe:	f240 1111 	movw	r1, #273	; 0x111
    5202:	f01e b8a5 	b.w	23350 <assert_post_action>
    5206:	bf00      	nop
    5208:	2000219c 	.word	0x2000219c
    520c:	e000ed90 	.word	0xe000ed90
    5210:	0002a5fa 	.word	0x0002a5fa
    5214:	0002d2c6 	.word	0x0002d2c6
    5218:	000297e6 	.word	0x000297e6
    521c:	0002a70b 	.word	0x0002a70b

00005220 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    5220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5224:	b0a1      	sub	sp, #132	; 0x84
    5226:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    5228:	2300      	movs	r3, #0
{
    522a:	9003      	str	r0, [sp, #12]
    522c:	4689      	mov	r9, r1
	count = 0;
    522e:	9302      	str	r3, [sp, #8]

	while ((c = *format++)) {
    5230:	4613      	mov	r3, r2
    5232:	f813 0b01 	ldrb.w	r0, [r3], #1
    5236:	9306      	str	r3, [sp, #24]
    5238:	b158      	cbz	r0, 5252 <z_prf+0x32>
		if (c != '%') {
    523a:	2825      	cmp	r0, #37	; 0x25
    523c:	f000 8081 	beq.w	5342 <z_prf+0x122>
			PUTC(c);
    5240:	4649      	mov	r1, r9
    5242:	9b03      	ldr	r3, [sp, #12]
    5244:	4798      	blx	r3
    5246:	3001      	adds	r0, #1
    5248:	f040 844a 	bne.w	5ae0 <z_prf+0x8c0>
    524c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5250:	9302      	str	r3, [sp, #8]
		}
	}
	return count;

#undef PUTC
}
    5252:	9802      	ldr	r0, [sp, #8]
    5254:	b021      	add	sp, #132	; 0x84
    5256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    525a:	2d2b      	cmp	r5, #43	; 0x2b
    525c:	d065      	beq.n	532a <z_prf+0x10a>
    525e:	d85c      	bhi.n	531a <z_prf+0xfa>
    5260:	2d20      	cmp	r5, #32
    5262:	d065      	beq.n	5330 <z_prf+0x110>
    5264:	2d23      	cmp	r5, #35	; 0x23
    5266:	d066      	beq.n	5336 <z_prf+0x116>
    5268:	2d00      	cmp	r5, #0
    526a:	d0f2      	beq.n	5252 <z_prf+0x32>
					fzero = true;
    526c:	f8cd 8018 	str.w	r8, [sp, #24]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    5270:	f8dd 8018 	ldr.w	r8, [sp, #24]
    5274:	48a4      	ldr	r0, [pc, #656]	; (5508 <z_prf+0x2e8>)
    5276:	f818 5b01 	ldrb.w	r5, [r8], #1
    527a:	4629      	mov	r1, r5
    527c:	f01f fec8 	bl	25010 <strchr>
    5280:	2800      	cmp	r0, #0
    5282:	d1ea      	bne.n	525a <z_prf+0x3a>
			if (c == '*') {
    5284:	2d2a      	cmp	r5, #42	; 0x2a
    5286:	d163      	bne.n	5350 <z_prf+0x130>
				width = va_arg(vargs, int);
    5288:	f856 3b04 	ldr.w	r3, [r6], #4
    528c:	9307      	str	r3, [sp, #28]
				if (width < 0) {
    528e:	2b00      	cmp	r3, #0
					width = -width;
    5290:	bfbf      	itttt	lt
    5292:	425b      	neglt	r3, r3
    5294:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    5296:	2301      	movlt	r3, #1
    5298:	930d      	strlt	r3, [sp, #52]	; 0x34
				c = *format++;
    529a:	9b06      	ldr	r3, [sp, #24]
    529c:	f898 5000 	ldrb.w	r5, [r8]
    52a0:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    52a4:	2d2e      	cmp	r5, #46	; 0x2e
    52a6:	d178      	bne.n	539a <z_prf+0x17a>
				if (c == '*') {
    52a8:	f898 3000 	ldrb.w	r3, [r8]
    52ac:	2b2a      	cmp	r3, #42	; 0x2a
    52ae:	d171      	bne.n	5394 <z_prf+0x174>
					precision = va_arg(vargs, int);
    52b0:	f856 4b04 	ldr.w	r4, [r6], #4
				c = *format++;
    52b4:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    52b8:	f818 5b01 	ldrb.w	r5, [r8], #1
			if (strchr("hlz", c) != NULL) {
    52bc:	4893      	ldr	r0, [pc, #588]	; (550c <z_prf+0x2ec>)
    52be:	4629      	mov	r1, r5
    52c0:	462f      	mov	r7, r5
    52c2:	f01f fea5 	bl	25010 <strchr>
    52c6:	2800      	cmp	r0, #0
    52c8:	d06a      	beq.n	53a0 <z_prf+0x180>
				c = *format++;
    52ca:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
    52cc:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    52ce:	f813 5b01 	ldrb.w	r5, [r3], #1
    52d2:	9306      	str	r3, [sp, #24]
				} else if (i == 'h' && c == 'h') {
    52d4:	d107      	bne.n	52e6 <z_prf+0xc6>
    52d6:	2d68      	cmp	r5, #104	; 0x68
    52d8:	d105      	bne.n	52e6 <z_prf+0xc6>
					c = *format++;
    52da:	f108 0302 	add.w	r3, r8, #2
    52de:	f898 5001 	ldrb.w	r5, [r8, #1]
    52e2:	9306      	str	r3, [sp, #24]
					i = 'H';
    52e4:	2748      	movs	r7, #72	; 0x48
			switch (c) {
    52e6:	2d78      	cmp	r5, #120	; 0x78
    52e8:	d808      	bhi.n	52fc <z_prf+0xdc>
    52ea:	2d57      	cmp	r5, #87	; 0x57
    52ec:	d85c      	bhi.n	53a8 <z_prf+0x188>
    52ee:	2d25      	cmp	r5, #37	; 0x25
    52f0:	f000 83f2 	beq.w	5ad8 <z_prf+0x8b8>
    52f4:	f200 80a2 	bhi.w	543c <z_prf+0x21c>
    52f8:	2d00      	cmp	r5, #0
    52fa:	d0aa      	beq.n	5252 <z_prf+0x32>
				PUTC('%');
    52fc:	9b03      	ldr	r3, [sp, #12]
    52fe:	4649      	mov	r1, r9
    5300:	2025      	movs	r0, #37	; 0x25
    5302:	4798      	blx	r3
    5304:	3001      	adds	r0, #1
    5306:	d0a1      	beq.n	524c <z_prf+0x2c>
				PUTC(c);
    5308:	9b03      	ldr	r3, [sp, #12]
    530a:	4649      	mov	r1, r9
    530c:	4628      	mov	r0, r5
    530e:	4798      	blx	r3
    5310:	3001      	adds	r0, #1
    5312:	d09b      	beq.n	524c <z_prf+0x2c>
				count += 2;
    5314:	9b02      	ldr	r3, [sp, #8]
    5316:	3302      	adds	r3, #2
    5318:	e3e4      	b.n	5ae4 <z_prf+0x8c4>
				switch (c) {
    531a:	2d2d      	cmp	r5, #45	; 0x2d
    531c:	d00e      	beq.n	533c <z_prf+0x11c>
					fzero = true;
    531e:	2d30      	cmp	r5, #48	; 0x30
    5320:	9b08      	ldr	r3, [sp, #32]
    5322:	bf08      	it	eq
    5324:	2301      	moveq	r3, #1
    5326:	9308      	str	r3, [sp, #32]
    5328:	e7a0      	b.n	526c <z_prf+0x4c>
					fplus = true;
    532a:	2301      	movs	r3, #1
    532c:	9309      	str	r3, [sp, #36]	; 0x24
    532e:	e79d      	b.n	526c <z_prf+0x4c>
					fspace = true;
    5330:	2301      	movs	r3, #1
    5332:	930c      	str	r3, [sp, #48]	; 0x30
    5334:	e79a      	b.n	526c <z_prf+0x4c>
					falt = true;
    5336:	f04f 0a01 	mov.w	sl, #1
    533a:	e797      	b.n	526c <z_prf+0x4c>
				switch (c) {
    533c:	2301      	movs	r3, #1
    533e:	930d      	str	r3, [sp, #52]	; 0x34
    5340:	e794      	b.n	526c <z_prf+0x4c>
			fminus = fplus = fspace = falt = fzero = false;
    5342:	2300      	movs	r3, #0
    5344:	9308      	str	r3, [sp, #32]
    5346:	930c      	str	r3, [sp, #48]	; 0x30
    5348:	9309      	str	r3, [sp, #36]	; 0x24
    534a:	930d      	str	r3, [sp, #52]	; 0x34
    534c:	469a      	mov	sl, r3
    534e:	e78f      	b.n	5270 <z_prf+0x50>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5350:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
			} else if (!isdigit(c)) {
    5354:	2b09      	cmp	r3, #9
				width = 0;
    5356:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
    5358:	d8a4      	bhi.n	52a4 <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    535a:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    535c:	f8dd 8018 	ldr.w	r8, [sp, #24]
    5360:	f818 5b01 	ldrb.w	r5, [r8], #1
    5364:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    5368:	2b09      	cmp	r3, #9
    536a:	d89b      	bhi.n	52a4 <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    536c:	9b07      	ldr	r3, [sp, #28]
    536e:	fb02 5503 	mla	r5, r2, r3, r5
    5372:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    5376:	e9cd 8306 	strd	r8, r3, [sp, #24]
    537a:	e7ef      	b.n	535c <z_prf+0x13c>
    537c:	fb01 3404 	mla	r4, r1, r4, r3
    5380:	3c30      	subs	r4, #48	; 0x30
    5382:	4690      	mov	r8, r2
	while (isdigit(*p)) {
    5384:	4642      	mov	r2, r8
    5386:	f812 3b01 	ldrb.w	r3, [r2], #1
    538a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    538e:	2809      	cmp	r0, #9
    5390:	d9f4      	bls.n	537c <z_prf+0x15c>
    5392:	e791      	b.n	52b8 <z_prf+0x98>
	int i = 0;
    5394:	2400      	movs	r4, #0
		i = 10 * i + *p++ - '0';
    5396:	210a      	movs	r1, #10
    5398:	e7f4      	b.n	5384 <z_prf+0x164>
			precision = -1;
    539a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    539e:	e78d      	b.n	52bc <z_prf+0x9c>
    53a0:	f8cd 8018 	str.w	r8, [sp, #24]
			i = 0;
    53a4:	4607      	mov	r7, r0
    53a6:	e79e      	b.n	52e6 <z_prf+0xc6>
    53a8:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
    53ac:	2b20      	cmp	r3, #32
    53ae:	d8a5      	bhi.n	52fc <z_prf+0xdc>
    53b0:	a201      	add	r2, pc, #4	; (adr r2, 53b8 <z_prf+0x198>)
    53b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    53b6:	bf00      	nop
    53b8:	00005a3d 	.word	0x00005a3d
    53bc:	000052fd 	.word	0x000052fd
    53c0:	000052fd 	.word	0x000052fd
    53c4:	000052fd 	.word	0x000052fd
    53c8:	000052fd 	.word	0x000052fd
    53cc:	000052fd 	.word	0x000052fd
    53d0:	000052fd 	.word	0x000052fd
    53d4:	000052fd 	.word	0x000052fd
    53d8:	000052fd 	.word	0x000052fd
    53dc:	000052fd 	.word	0x000052fd
    53e0:	000052fd 	.word	0x000052fd
    53e4:	00005511 	.word	0x00005511
    53e8:	000055e7 	.word	0x000055e7
    53ec:	00005449 	.word	0x00005449
    53f0:	00005449 	.word	0x00005449
    53f4:	00005449 	.word	0x00005449
    53f8:	000052fd 	.word	0x000052fd
    53fc:	000055e7 	.word	0x000055e7
    5400:	000052fd 	.word	0x000052fd
    5404:	000052fd 	.word	0x000052fd
    5408:	000052fd 	.word	0x000052fd
    540c:	000052fd 	.word	0x000052fd
    5410:	000059c9 	.word	0x000059c9
    5414:	00005a3d 	.word	0x00005a3d
    5418:	000059f3 	.word	0x000059f3
    541c:	000052fd 	.word	0x000052fd
    5420:	000052fd 	.word	0x000052fd
    5424:	00005a15 	.word	0x00005a15
    5428:	000052fd 	.word	0x000052fd
    542c:	00005a3d 	.word	0x00005a3d
    5430:	000052fd 	.word	0x000052fd
    5434:	000052fd 	.word	0x000052fd
    5438:	00005a3d 	.word	0x00005a3d
			switch (c) {
    543c:	f1a5 0345 	sub.w	r3, r5, #69	; 0x45
    5440:	b2db      	uxtb	r3, r3
    5442:	2b02      	cmp	r3, #2
    5444:	f63f af5a 	bhi.w	52fc <z_prf+0xdc>
				u.d = va_arg(vargs, double);
    5448:	3607      	adds	r6, #7
    544a:	f026 0307 	bic.w	r3, r6, #7
    544e:	4619      	mov	r1, r3
    5450:	e8f1 2302 	ldrd	r2, r3, [r1], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    5454:	02d8      	lsls	r0, r3, #11
    5456:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    545a:	02d6      	lsls	r6, r2, #11
    545c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    5460:	9604      	str	r6, [sp, #16]
    5462:	9005      	str	r0, [sp, #20]
    5464:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
	if (sign) {
    5468:	2a00      	cmp	r2, #0
				u.d = va_arg(vargs, double);
    546a:	9101      	str	r1, [sp, #4]
	exp = double_temp >> 52 & 0x7ff;
    546c:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
    5470:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    5474:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
	if (sign) {
    5478:	f280 80e5 	bge.w	5646 <z_prf+0x426>
		*buf++ = '-';
    547c:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    547e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    5482:	f10d 0765 	add.w	r7, sp, #101	; 0x65
	if (exp == 0x7ff) {
    5486:	f240 73ff 	movw	r3, #2047	; 0x7ff
    548a:	4299      	cmp	r1, r3
    548c:	f040 80f6 	bne.w	567c <z_prf+0x45c>
		if (!fract) {
    5490:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    5494:	430a      	orrs	r2, r1
    5496:	f1a5 0541 	sub.w	r5, r5, #65	; 0x41
    549a:	f107 0303 	add.w	r3, r7, #3
    549e:	f040 80e2 	bne.w	5666 <z_prf+0x446>
			if (isupper(c)) {
    54a2:	2d19      	cmp	r5, #25
    54a4:	f200 80d9 	bhi.w	565a <z_prf+0x43a>
				*buf++ = 'I';
    54a8:	2249      	movs	r2, #73	; 0x49
    54aa:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    54ac:	224e      	movs	r2, #78	; 0x4e
    54ae:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    54b0:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    54b2:	2400      	movs	r4, #0
		return buf - start;
    54b4:	ae19      	add	r6, sp, #100	; 0x64
				*buf++ = 'n';
    54b6:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    54b8:	70fc      	strb	r4, [r7, #3]
		return buf - start;
    54ba:	1b9b      	subs	r3, r3, r6
			zero.predot = zero.postdot = zero.trail = 0;
    54bc:	46a2      	mov	sl, r4
    54be:	46a3      	mov	fp, r4
				if (fplus || fspace || (buf[0] == '-')) {
    54c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    54c2:	2a00      	cmp	r2, #0
    54c4:	f040 827d 	bne.w	59c2 <z_prf+0x7a2>
    54c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    54ca:	2a00      	cmp	r2, #0
    54cc:	f040 8279 	bne.w	59c2 <z_prf+0x7a2>
    54d0:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    54d4:	f1a8 022d 	sub.w	r2, r8, #45	; 0x2d
    54d8:	f1d2 0800 	rsbs	r8, r2, #0
    54dc:	eb48 0802 	adc.w	r8, r8, r2
				clen += zero.predot + zero.postdot + zero.trail;
    54e0:	eb0b 060a 	add.w	r6, fp, sl
    54e4:	4433      	add	r3, r6
    54e6:	191e      	adds	r6, r3, r4
				if (!isdigit(buf[prefix])) {
    54e8:	ab20      	add	r3, sp, #128	; 0x80
    54ea:	4443      	add	r3, r8
    54ec:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    54f0:	3b30      	subs	r3, #48	; 0x30
    54f2:	2b09      	cmp	r3, #9
    54f4:	f200 82fe 	bhi.w	5af4 <z_prf+0x8d4>
			} else if (fzero) {
    54f8:	9b08      	ldr	r3, [sp, #32]
    54fa:	2b00      	cmp	r3, #0
    54fc:	f000 82fd 	beq.w	5afa <z_prf+0x8da>
    5500:	9b07      	ldr	r3, [sp, #28]
    5502:	af19      	add	r7, sp, #100	; 0x64
    5504:	1b9b      	subs	r3, r3, r6
    5506:	e014      	b.n	5532 <z_prf+0x312>
    5508:	0002a738 	.word	0x0002a738
    550c:	0002a73e 	.word	0x0002a73e
				buf[0] = va_arg(vargs, int);
    5510:	4632      	mov	r2, r6
				break;
    5512:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    5516:	f852 3b04 	ldr.w	r3, [r2], #4
    551a:	9201      	str	r2, [sp, #4]
    551c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
				clen = 1;
    5520:	2601      	movs	r6, #1
				break;
    5522:	4644      	mov	r4, r8
    5524:	af19      	add	r7, sp, #100	; 0x64
				zero_head = precision - clen + prefix;
    5526:	eb04 0308 	add.w	r3, r4, r8
			zero.predot = zero.postdot = zero.trail = 0;
    552a:	2400      	movs	r4, #0
				zero_head = precision - clen + prefix;
    552c:	1b9b      	subs	r3, r3, r6
			zero.predot = zero.postdot = zero.trail = 0;
    552e:	46a2      	mov	sl, r4
    5530:	46a3      	mov	fp, r4
			if (zero_head < 0) {
    5532:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			width -= clen + zero_head;
    5536:	199a      	adds	r2, r3, r6
    5538:	9208      	str	r2, [sp, #32]
    553a:	9a07      	ldr	r2, [sp, #28]
    553c:	1999      	adds	r1, r3, r6
    553e:	1a55      	subs	r5, r2, r1
			if (!fminus && width > 0) {
    5540:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5542:	b912      	cbnz	r2, 554a <z_prf+0x32a>
    5544:	2d00      	cmp	r5, #0
    5546:	f300 82ed 	bgt.w	5b24 <z_prf+0x904>
			while (prefix-- > 0) {
    554a:	eb07 0208 	add.w	r2, r7, r8
    554e:	42ba      	cmp	r2, r7
    5550:	f040 82ea 	bne.w	5b28 <z_prf+0x908>
			while (zero_head-- > 0) {
    5554:	3b01      	subs	r3, #1
    5556:	f080 82f5 	bcs.w	5b44 <z_prf+0x924>
			clen -= prefix;
    555a:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    555e:	f1bb 0f00 	cmp.w	fp, #0
    5562:	d010      	beq.n	5586 <z_prf+0x366>
				c = *cptr;
    5564:	7838      	ldrb	r0, [r7, #0]
				while (isdigit(c)) {
    5566:	eb07 0806 	add.w	r8, r7, r6
    556a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    556e:	2b09      	cmp	r3, #9
    5570:	eba8 0607 	sub.w	r6, r8, r7
    5574:	f240 82f1 	bls.w	5b5a <z_prf+0x93a>
    5578:	46d8      	mov	r8, fp
				while (zero.predot-- > 0) {
    557a:	f1b8 0801 	subs.w	r8, r8, #1
    557e:	f080 82f5 	bcs.w	5b6c <z_prf+0x94c>
				clen -= zero.predot;
    5582:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.postdot) {
    5586:	f1ba 0f00 	cmp.w	sl, #0
    558a:	d016      	beq.n	55ba <z_prf+0x39a>
    558c:	eb07 0806 	add.w	r8, r7, r6
					c = *cptr++;
    5590:	f817 bb01 	ldrb.w	fp, [r7], #1
					PUTC(c);
    5594:	9b03      	ldr	r3, [sp, #12]
    5596:	4649      	mov	r1, r9
    5598:	4658      	mov	r0, fp
    559a:	4798      	blx	r3
    559c:	3001      	adds	r0, #1
    559e:	f43f ae55 	beq.w	524c <z_prf+0x2c>
				} while (c != '.');
    55a2:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
    55a6:	eba8 0607 	sub.w	r6, r8, r7
    55aa:	d1f1      	bne.n	5590 <z_prf+0x370>
				while (zero.postdot-- > 0) {
    55ac:	46d0      	mov	r8, sl
    55ae:	f1b8 0f00 	cmp.w	r8, #0
    55b2:	f300 82e4 	bgt.w	5b7e <z_prf+0x95e>
				clen -= zero.postdot;
    55b6:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.trail) {
    55ba:	b194      	cbz	r4, 55e2 <z_prf+0x3c2>
				c = *cptr;
    55bc:	7838      	ldrb	r0, [r7, #0]
				while (isdigit(c) || c == '.') {
    55be:	eb07 0806 	add.w	r8, r7, r6
    55c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    55c6:	2b09      	cmp	r3, #9
    55c8:	eba8 0607 	sub.w	r6, r8, r7
    55cc:	f240 82e2 	bls.w	5b94 <z_prf+0x974>
    55d0:	282e      	cmp	r0, #46	; 0x2e
    55d2:	f000 82df 	beq.w	5b94 <z_prf+0x974>
				while (zero.trail-- > 0) {
    55d6:	46a0      	mov	r8, r4
    55d8:	f1b8 0f00 	cmp.w	r8, #0
    55dc:	f300 82e3 	bgt.w	5ba6 <z_prf+0x986>
				clen -= zero.trail;
    55e0:	1b36      	subs	r6, r6, r4
    55e2:	443e      	add	r6, r7
    55e4:	e2f2      	b.n	5bcc <z_prf+0x9ac>
				switch (i) {
    55e6:	6835      	ldr	r5, [r6, #0]
	if (value < 0) {
    55e8:	1d33      	adds	r3, r6, #4
    55ea:	2d00      	cmp	r5, #0
    55ec:	9301      	str	r3, [sp, #4]
    55ee:	da1c      	bge.n	562a <z_prf+0x40a>
		*buf++ = '-';
    55f0:	232d      	movs	r3, #45	; 0x2d
    55f2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		value = -value;
    55f6:	4269      	negs	r1, r5
		*buf++ = ' ';
    55f8:	f10d 0665 	add.w	r6, sp, #101	; 0x65
	return _to_x(buf, value, 10);
    55fc:	4630      	mov	r0, r6
    55fe:	220a      	movs	r2, #10
    5600:	f01f fd94 	bl	2512c <_to_x>
				if (fplus || fspace || val < 0) {
    5604:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    5606:	4406      	add	r6, r0
    5608:	a819      	add	r0, sp, #100	; 0x64
    560a:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    560c:	2b00      	cmp	r3, #0
    560e:	f040 826c 	bne.w	5aea <z_prf+0x8ca>
    5612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5614:	2b00      	cmp	r3, #0
    5616:	f040 8268 	bne.w	5aea <z_prf+0x8ca>
    561a:	ea4f 78d5 	mov.w	r8, r5, lsr #31
			if (precision >= 0) {
    561e:	2c00      	cmp	r4, #0
    5620:	da80      	bge.n	5524 <z_prf+0x304>
			zero.predot = zero.postdot = zero.trail = 0;
    5622:	2400      	movs	r4, #0
    5624:	46a2      	mov	sl, r4
    5626:	46a3      	mov	fp, r4
    5628:	e766      	b.n	54f8 <z_prf+0x2d8>
	} else if (fplus) {
    562a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    562c:	b123      	cbz	r3, 5638 <z_prf+0x418>
		*buf++ = '+';
    562e:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    5630:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    5634:	4629      	mov	r1, r5
    5636:	e7df      	b.n	55f8 <z_prf+0x3d8>
	} else if (fspace) {
    5638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    563a:	b10b      	cbz	r3, 5640 <z_prf+0x420>
		*buf++ = ' ';
    563c:	2320      	movs	r3, #32
    563e:	e7f7      	b.n	5630 <z_prf+0x410>
    5640:	4629      	mov	r1, r5
    5642:	ae19      	add	r6, sp, #100	; 0x64
    5644:	e7da      	b.n	55fc <z_prf+0x3dc>
	} else if (fplus) {
    5646:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5648:	b10b      	cbz	r3, 564e <z_prf+0x42e>
		*buf++ = '+';
    564a:	232b      	movs	r3, #43	; 0x2b
    564c:	e717      	b.n	547e <z_prf+0x25e>
	} else if (fspace) {
    564e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5650:	b10b      	cbz	r3, 5656 <z_prf+0x436>
		*buf++ = ' ';
    5652:	2320      	movs	r3, #32
    5654:	e713      	b.n	547e <z_prf+0x25e>
    5656:	af19      	add	r7, sp, #100	; 0x64
    5658:	e715      	b.n	5486 <z_prf+0x266>
				*buf++ = 'i';
    565a:	2269      	movs	r2, #105	; 0x69
    565c:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    565e:	226e      	movs	r2, #110	; 0x6e
    5660:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    5662:	2266      	movs	r2, #102	; 0x66
    5664:	e725      	b.n	54b2 <z_prf+0x292>
			if (isupper(c)) {
    5666:	2d19      	cmp	r5, #25
				*buf++ = 'N';
    5668:	bf99      	ittee	ls
    566a:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    566c:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    566e:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    5670:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    5672:	bf94      	ite	ls
    5674:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    5676:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    5678:	7079      	strb	r1, [r7, #1]
    567a:	e71a      	b.n	54b2 <z_prf+0x292>
	if ((exp | fract) != 0) {
    567c:	9b04      	ldr	r3, [sp, #16]
    567e:	9805      	ldr	r0, [sp, #20]
    5680:	430b      	orrs	r3, r1
    5682:	930e      	str	r3, [sp, #56]	; 0x38
    5684:	17cb      	asrs	r3, r1, #31
    5686:	4303      	orrs	r3, r0
    5688:	930f      	str	r3, [sp, #60]	; 0x3c
    568a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
		c = 'f';
    568e:	2d46      	cmp	r5, #70	; 0x46
    5690:	bf08      	it	eq
    5692:	2566      	moveq	r5, #102	; 0x66
	if ((exp | fract) != 0) {
    5694:	4313      	orrs	r3, r2
    5696:	f000 8107 	beq.w	58a8 <z_prf+0x688>
		if (exp == 0) {
    569a:	2900      	cmp	r1, #0
    569c:	f000 809f 	beq.w	57de <z_prf+0x5be>
		fract |= HIGHBIT64;
    56a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    56a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    56a6:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    56aa:	9315      	str	r3, [sp, #84]	; 0x54
    56ac:	2600      	movs	r6, #0
	while (exp <= -3) {
    56ae:	f118 0f02 	cmn.w	r8, #2
    56b2:	f2c0 80a8 	blt.w	5806 <z_prf+0x5e6>
	while (exp > 0) {
    56b6:	f1b8 0f00 	cmp.w	r8, #0
    56ba:	f300 80d4 	bgt.w	5866 <z_prf+0x646>
		_rlrshift(&fract);
    56be:	a814      	add	r0, sp, #80	; 0x50
		exp++;
    56c0:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    56c4:	f01f fd56 	bl	25174 <_rlrshift>
	while (exp < (0 + 4)) {
    56c8:	f1b8 0f04 	cmp.w	r8, #4
    56cc:	d1f7      	bne.n	56be <z_prf+0x49e>
		precision = 6;		/* Default precision if none given */
    56ce:	2c00      	cmp	r4, #0
	if ((c == 'g') || (c == 'G')) {
    56d0:	f005 03df 	and.w	r3, r5, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    56d4:	bfb8      	it	lt
    56d6:	2406      	movlt	r4, #6
	if ((c == 'g') || (c == 'G')) {
    56d8:	2b47      	cmp	r3, #71	; 0x47
    56da:	f040 80ee 	bne.w	58ba <z_prf+0x69a>
		if (decexp < (-4 + 1) || decexp > precision) {
    56de:	1cf1      	adds	r1, r6, #3
    56e0:	db02      	blt.n	56e8 <z_prf+0x4c8>
    56e2:	42b4      	cmp	r4, r6
    56e4:	f280 80e3 	bge.w	58ae <z_prf+0x68e>
			c += 'e' - 'g';
    56e8:	3d02      	subs	r5, #2
    56ea:	b2ed      	uxtb	r5, r5
			if (precision > 0) {
    56ec:	2c00      	cmp	r4, #0
    56ee:	f000 80ea 	beq.w	58c6 <z_prf+0x6a6>
				precision--;
    56f2:	3c01      	subs	r4, #1
		if (!falt && (precision > 0)) {
    56f4:	f1ba 0f00 	cmp.w	sl, #0
    56f8:	f040 80e5 	bne.w	58c6 <z_prf+0x6a6>
    56fc:	2c00      	cmp	r4, #0
    56fe:	bfd4      	ite	le
    5700:	f04f 0800 	movle.w	r8, #0
    5704:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    5708:	2d66      	cmp	r5, #102	; 0x66
    570a:	f040 80de 	bne.w	58ca <z_prf+0x6aa>
		if (exp < 0) {
    570e:	eb14 0b06 	adds.w	fp, r4, r6
    5712:	f04f 0566 	mov.w	r5, #102	; 0x66
    5716:	f100 80db 	bmi.w	58d0 <z_prf+0x6b0>
	if (exp > 16) {
    571a:	f1bb 0f10 	cmp.w	fp, #16
    571e:	bfa8      	it	ge
    5720:	f04f 0b10 	movge.w	fp, #16
    5724:	2310      	movs	r3, #16
    5726:	9313      	str	r3, [sp, #76]	; 0x4c
	ltemp = 0x0800000000000000;
    5728:	2200      	movs	r2, #0
    572a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    572e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	while (exp--) {
    5732:	f1bb 0b01 	subs.w	fp, fp, #1
    5736:	f080 80ce 	bcs.w	58d6 <z_prf+0x6b6>
	fract += ltemp;
    573a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    573c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    573e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    5740:	189b      	adds	r3, r3, r2
    5742:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5744:	eb41 0202 	adc.w	r2, r1, r2
    5748:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
	if ((fract >> 32) & 0xF0000000) {
    574c:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    5750:	9310      	str	r3, [sp, #64]	; 0x40
    5752:	2300      	movs	r3, #0
    5754:	9311      	str	r3, [sp, #68]	; 0x44
    5756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    575a:	4313      	orrs	r3, r2
    575c:	d006      	beq.n	576c <z_prf+0x54c>
		_ldiv5(&fract);
    575e:	a814      	add	r0, sp, #80	; 0x50
    5760:	f01f fd1a 	bl	25198 <_ldiv5>
		_rlrshift(&fract);
    5764:	a814      	add	r0, sp, #80	; 0x50
    5766:	f01f fd05 	bl	25174 <_rlrshift>
		decexp++;
    576a:	3601      	adds	r6, #1
	if (c == 'f') {
    576c:	2d66      	cmp	r5, #102	; 0x66
    576e:	f040 80cf 	bne.w	5910 <z_prf+0x6f0>
		if (decexp > 0) {
    5772:	2e00      	cmp	r6, #0
    5774:	f340 80b6 	ble.w	58e4 <z_prf+0x6c4>
			while (decexp > 0 && digit_count > 0) {
    5778:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    577a:	2b00      	cmp	r3, #0
    577c:	dd07      	ble.n	578e <z_prf+0x56e>
				*buf++ = _get_digit(&fract, &digit_count);
    577e:	a913      	add	r1, sp, #76	; 0x4c
    5780:	a814      	add	r0, sp, #80	; 0x50
    5782:	f01f fd32 	bl	251ea <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    5786:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    5788:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    578c:	d1f4      	bne.n	5778 <z_prf+0x558>
			zp->predot = decexp;
    578e:	46b3      	mov	fp, r6
    5790:	463b      	mov	r3, r7
			decexp = 0;
    5792:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    5794:	f1ba 0f00 	cmp.w	sl, #0
    5798:	d101      	bne.n	579e <z_prf+0x57e>
    579a:	2c00      	cmp	r4, #0
    579c:	dd15      	ble.n	57ca <z_prf+0x5aa>
			*buf++ = '.';
    579e:	222e      	movs	r2, #46	; 0x2e
    57a0:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    57a4:	2e00      	cmp	r6, #0
    57a6:	f000 80ae 	beq.w	5906 <z_prf+0x6e6>
    57aa:	2c00      	cmp	r4, #0
    57ac:	f340 80ad 	ble.w	590a <z_prf+0x6ea>
			zp->postdot = -decexp;
    57b0:	f1c6 0a00 	rsb	sl, r6, #0
    57b4:	45a2      	cmp	sl, r4
    57b6:	bfa8      	it	ge
    57b8:	46a2      	movge	sl, r4
			precision -= zp->postdot;
    57ba:	eba4 040a 	sub.w	r4, r4, sl
		while (precision > 0 && digit_count > 0) {
    57be:	2c00      	cmp	r4, #0
    57c0:	dd03      	ble.n	57ca <z_prf+0x5aa>
    57c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    57c4:	2a00      	cmp	r2, #0
    57c6:	f300 8094 	bgt.w	58f2 <z_prf+0x6d2>
	if (prune_zero) {
    57ca:	f1b8 0f00 	cmp.w	r8, #0
    57ce:	f040 80b4 	bne.w	593a <z_prf+0x71a>
	*buf = 0;
    57d2:	2200      	movs	r2, #0
	return buf - start;
    57d4:	ae19      	add	r6, sp, #100	; 0x64
	*buf = 0;
    57d6:	701a      	strb	r2, [r3, #0]
	return buf - start;
    57d8:	1b9b      	subs	r3, r3, r6
    57da:	e671      	b.n	54c0 <z_prf+0x2a0>
				exp--;
    57dc:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    57de:	9b04      	ldr	r3, [sp, #16]
    57e0:	18db      	adds	r3, r3, r3
    57e2:	9304      	str	r3, [sp, #16]
    57e4:	9b05      	ldr	r3, [sp, #20]
    57e6:	415b      	adcs	r3, r3
    57e8:	9305      	str	r3, [sp, #20]
    57ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    57ee:	2a00      	cmp	r2, #0
    57f0:	f173 0300 	sbcs.w	r3, r3, #0
    57f4:	daf2      	bge.n	57dc <z_prf+0x5bc>
    57f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    57fa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    57fe:	e74f      	b.n	56a0 <z_prf+0x480>
			_rlrshift(&fract);
    5800:	a814      	add	r0, sp, #80	; 0x50
    5802:	f01f fcb7 	bl	25174 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    5806:	e9dd 2c14 	ldrd	r2, ip, [sp, #80]	; 0x50
    580a:	2300      	movs	r3, #0
    580c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    5810:	930b      	str	r3, [sp, #44]	; 0x2c
    5812:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    5816:	2900      	cmp	r1, #0
    5818:	bf08      	it	eq
    581a:	f1b0 3f33 	cmpeq.w	r0, #858993459	; 0x33333333
    581e:	f108 0801 	add.w	r8, r8, #1
    5822:	d2ed      	bcs.n	5800 <z_prf+0x5e0>
		fract *= 5U;
    5824:	2005      	movs	r0, #5
    5826:	fba2 2300 	umull	r2, r3, r2, r0
    582a:	fb00 330c 	mla	r3, r0, ip, r3
    582e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		decexp--;
    5832:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    5834:	f04f 0e00 	mov.w	lr, #0
    5838:	2100      	movs	r1, #0
    583a:	f04f 0c00 	mov.w	ip, #0
    583e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    5842:	458c      	cmp	ip, r1
    5844:	bf08      	it	eq
    5846:	459b      	cmpeq	fp, r3
    5848:	d206      	bcs.n	5858 <z_prf+0x638>
    584a:	f1be 0f00 	cmp.w	lr, #0
    584e:	f43f af2e 	beq.w	56ae <z_prf+0x48e>
    5852:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    5856:	e72a      	b.n	56ae <z_prf+0x48e>
			fract <<= 1;
    5858:	1892      	adds	r2, r2, r2
    585a:	415b      	adcs	r3, r3
			exp--;
    585c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    5860:	f04f 0e01 	mov.w	lr, #1
    5864:	e7e8      	b.n	5838 <z_prf+0x618>
		_ldiv5(&fract);
    5866:	a814      	add	r0, sp, #80	; 0x50
    5868:	f01f fc96 	bl	25198 <_ldiv5>
		exp--;
    586c:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
    5870:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    5874:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    5876:	f04f 0e00 	mov.w	lr, #0
    587a:	2300      	movs	r3, #0
    587c:	f04f 0c00 	mov.w	ip, #0
    5880:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    5884:	459c      	cmp	ip, r3
    5886:	bf08      	it	eq
    5888:	4583      	cmpeq	fp, r0
    588a:	d206      	bcs.n	589a <z_prf+0x67a>
    588c:	f1be 0f00 	cmp.w	lr, #0
    5890:	f43f af11 	beq.w	56b6 <z_prf+0x496>
    5894:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
    5898:	e70d      	b.n	56b6 <z_prf+0x496>
			fract <<= 1;
    589a:	1849      	adds	r1, r1, r1
    589c:	4140      	adcs	r0, r0
			exp--;
    589e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    58a2:	f04f 0e01 	mov.w	lr, #1
    58a6:	e7e8      	b.n	587a <z_prf+0x65a>
    58a8:	2600      	movs	r6, #0
    58aa:	46b0      	mov	r8, r6
    58ac:	e707      	b.n	56be <z_prf+0x49e>
			precision -= decexp;
    58ae:	1ba4      	subs	r4, r4, r6
		if (!falt && (precision > 0)) {
    58b0:	f1ba 0f00 	cmp.w	sl, #0
    58b4:	d104      	bne.n	58c0 <z_prf+0x6a0>
			c = 'f';
    58b6:	2566      	movs	r5, #102	; 0x66
    58b8:	e720      	b.n	56fc <z_prf+0x4dc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    58ba:	f04f 0800 	mov.w	r8, #0
    58be:	e723      	b.n	5708 <z_prf+0x4e8>
    58c0:	f04f 0800 	mov.w	r8, #0
    58c4:	e723      	b.n	570e <z_prf+0x4ee>
    58c6:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    58ca:	f104 0b01 	add.w	fp, r4, #1
    58ce:	e724      	b.n	571a <z_prf+0x4fa>
			exp = 0;
    58d0:	f04f 0b00 	mov.w	fp, #0
    58d4:	e726      	b.n	5724 <z_prf+0x504>
		_ldiv5(&ltemp);
    58d6:	a816      	add	r0, sp, #88	; 0x58
    58d8:	f01f fc5e 	bl	25198 <_ldiv5>
		_rlrshift(&ltemp);
    58dc:	a816      	add	r0, sp, #88	; 0x58
    58de:	f01f fc49 	bl	25174 <_rlrshift>
    58e2:	e726      	b.n	5732 <z_prf+0x512>
			*buf++ = '0';
    58e4:	463b      	mov	r3, r7
    58e6:	2230      	movs	r2, #48	; 0x30
    58e8:	f803 2b01 	strb.w	r2, [r3], #1
			zero.predot = zero.postdot = zero.trail = 0;
    58ec:	f04f 0b00 	mov.w	fp, #0
    58f0:	e750      	b.n	5794 <z_prf+0x574>
			*buf++ = _get_digit(&fract, &digit_count);
    58f2:	a913      	add	r1, sp, #76	; 0x4c
    58f4:	a814      	add	r0, sp, #80	; 0x50
    58f6:	930a      	str	r3, [sp, #40]	; 0x28
    58f8:	f01f fc77 	bl	251ea <_get_digit>
    58fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    58fe:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    5900:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    5904:	e75b      	b.n	57be <z_prf+0x59e>
			zero.predot = zero.postdot = zero.trail = 0;
    5906:	46b2      	mov	sl, r6
    5908:	e759      	b.n	57be <z_prf+0x59e>
    590a:	f04f 0a00 	mov.w	sl, #0
    590e:	e75c      	b.n	57ca <z_prf+0x5aa>
		*buf = _get_digit(&fract, &digit_count);
    5910:	a913      	add	r1, sp, #76	; 0x4c
    5912:	a814      	add	r0, sp, #80	; 0x50
    5914:	f01f fc69 	bl	251ea <_get_digit>
		if (*buf++ != '0') {
    5918:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    591a:	7038      	strb	r0, [r7, #0]
			decexp--;
    591c:	bf18      	it	ne
    591e:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    5922:	f1ba 0f00 	cmp.w	sl, #0
    5926:	d137      	bne.n	5998 <z_prf+0x778>
    5928:	2c00      	cmp	r4, #0
    592a:	dc35      	bgt.n	5998 <z_prf+0x778>
		if (*buf++ != '0') {
    592c:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    592e:	f1b8 0f00 	cmp.w	r8, #0
    5932:	d043      	beq.n	59bc <z_prf+0x79c>
			zero.predot = zero.postdot = zero.trail = 0;
    5934:	f04f 0b00 	mov.w	fp, #0
    5938:	46da      	mov	sl, fp
		while (*--buf == '0')
    593a:	4619      	mov	r1, r3
    593c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    5940:	2a30      	cmp	r2, #48	; 0x30
    5942:	d0fa      	beq.n	593a <z_prf+0x71a>
		if (*buf != '.') {
    5944:	2a2e      	cmp	r2, #46	; 0x2e
    5946:	bf18      	it	ne
    5948:	460b      	movne	r3, r1
    594a:	2400      	movs	r4, #0
	if ((c == 'e') || (c == 'E')) {
    594c:	f005 02df 	and.w	r2, r5, #223	; 0xdf
    5950:	2a45      	cmp	r2, #69	; 0x45
    5952:	f47f af3e 	bne.w	57d2 <z_prf+0x5b2>
		if (decexp < 0) {
    5956:	2e00      	cmp	r6, #0
		*buf++ = c;
    5958:	4619      	mov	r1, r3
			decexp = -decexp;
    595a:	bfba      	itte	lt
    595c:	4276      	neglt	r6, r6
			*buf++ = '-';
    595e:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    5960:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    5962:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    5964:	f801 5b02 	strb.w	r5, [r1], #2
			*buf++ = '-';
    5968:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    596a:	dd08      	ble.n	597e <z_prf+0x75e>
			*buf++ = (decexp / 100) + '0';
    596c:	2064      	movs	r0, #100	; 0x64
    596e:	fb96 f2f0 	sdiv	r2, r6, r0
    5972:	f102 0530 	add.w	r5, r2, #48	; 0x30
    5976:	1cd9      	adds	r1, r3, #3
    5978:	709d      	strb	r5, [r3, #2]
			decexp %= 100;
    597a:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    597e:	200a      	movs	r0, #10
    5980:	460b      	mov	r3, r1
    5982:	fb96 f2f0 	sdiv	r2, r6, r0
		decexp %= 10;
    5986:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    598a:	f102 0530 	add.w	r5, r2, #48	; 0x30
		*buf++ = decexp + '0';
    598e:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    5990:	f803 5b02 	strb.w	r5, [r3], #2
		*buf++ = decexp + '0';
    5994:	704e      	strb	r6, [r1, #1]
    5996:	e71c      	b.n	57d2 <z_prf+0x5b2>
			*buf++ = '.';
    5998:	222e      	movs	r2, #46	; 0x2e
    599a:	1cbb      	adds	r3, r7, #2
    599c:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    599e:	2c00      	cmp	r4, #0
    59a0:	ddc5      	ble.n	592e <z_prf+0x70e>
    59a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    59a4:	2a00      	cmp	r2, #0
    59a6:	ddc2      	ble.n	592e <z_prf+0x70e>
			*buf++ = _get_digit(&fract, &digit_count);
    59a8:	a913      	add	r1, sp, #76	; 0x4c
    59aa:	a814      	add	r0, sp, #80	; 0x50
    59ac:	930a      	str	r3, [sp, #40]	; 0x28
    59ae:	f01f fc1c 	bl	251ea <_get_digit>
    59b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    59b4:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    59b6:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    59ba:	e7f0      	b.n	599e <z_prf+0x77e>
			zero.predot = zero.postdot = zero.trail = 0;
    59bc:	46c3      	mov	fp, r8
    59be:	46c2      	mov	sl, r8
    59c0:	e7c4      	b.n	594c <z_prf+0x72c>
					prefix = 1;
    59c2:	f04f 0801 	mov.w	r8, #1
    59c6:	e58b      	b.n	54e0 <z_prf+0x2c0>
				switch (i) {
    59c8:	4632      	mov	r2, r6
    59ca:	2f68      	cmp	r7, #104	; 0x68
    59cc:	f852 3b04 	ldr.w	r3, [r2], #4
    59d0:	9201      	str	r2, [sp, #4]
    59d2:	d006      	beq.n	59e2 <z_prf+0x7c2>
    59d4:	2f6c      	cmp	r7, #108	; 0x6c
    59d6:	d009      	beq.n	59ec <z_prf+0x7cc>
    59d8:	2f48      	cmp	r7, #72	; 0x48
    59da:	d107      	bne.n	59ec <z_prf+0x7cc>
					*va_arg(vargs, char *) = count;
    59dc:	9a02      	ldr	r2, [sp, #8]
    59de:	701a      	strb	r2, [r3, #0]
					break;
    59e0:	e001      	b.n	59e6 <z_prf+0x7c6>
					*va_arg(vargs, short *) = count;
    59e2:	9a02      	ldr	r2, [sp, #8]
    59e4:	801a      	strh	r2, [r3, #0]
				continue;
    59e6:	9e01      	ldr	r6, [sp, #4]
    59e8:	9a06      	ldr	r2, [sp, #24]
    59ea:	e421      	b.n	5230 <z_prf+0x10>
					*va_arg(vargs, int *) = count;
    59ec:	9a02      	ldr	r2, [sp, #8]
    59ee:	601a      	str	r2, [r3, #0]
					break;
    59f0:	e7f9      	b.n	59e6 <z_prf+0x7c6>
		*buf++ = '0';
    59f2:	f647 0330 	movw	r3, #30768	; 0x7830
    59f6:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16);
    59fa:	4633      	mov	r3, r6
    59fc:	2210      	movs	r2, #16
    59fe:	f853 1b04 	ldr.w	r1, [r3], #4
    5a02:	9301      	str	r3, [sp, #4]
    5a04:	f10d 0066 	add.w	r0, sp, #102	; 0x66
    5a08:	f01f fb90 	bl	2512c <_to_x>
				prefix = 2;
    5a0c:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    5a10:	1c86      	adds	r6, r0, #2
				break;
    5a12:	e604      	b.n	561e <z_prf+0x3fe>
				cptr = va_arg(vargs, char *);
    5a14:	4633      	mov	r3, r6
					precision = INT_MAX;
    5a16:	2c00      	cmp	r4, #0
				cptr = va_arg(vargs, char *);
    5a18:	f853 7b04 	ldr.w	r7, [r3], #4
    5a1c:	9301      	str	r3, [sp, #4]
					precision = INT_MAX;
    5a1e:	bfb8      	it	lt
    5a20:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    5a24:	2600      	movs	r6, #0
    5a26:	42b4      	cmp	r4, r6
    5a28:	d103      	bne.n	5a32 <z_prf+0x812>
    5a2a:	4626      	mov	r6, r4
    5a2c:	2400      	movs	r4, #0
    5a2e:	46a0      	mov	r8, r4
    5a30:	e579      	b.n	5526 <z_prf+0x306>
					if (cptr[clen] == '\0') {
    5a32:	5dbb      	ldrb	r3, [r7, r6]
    5a34:	2b00      	cmp	r3, #0
    5a36:	d05b      	beq.n	5af0 <z_prf+0x8d0>
				for (clen = 0; clen < precision; clen++) {
    5a38:	3601      	adds	r6, #1
    5a3a:	e7f4      	b.n	5a26 <z_prf+0x806>
				switch (i) {
    5a3c:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
    5a3e:	2d6f      	cmp	r5, #111	; 0x6f
    5a40:	6831      	ldr	r1, [r6, #0]
    5a42:	9301      	str	r3, [sp, #4]
    5a44:	d119      	bne.n	5a7a <z_prf+0x85a>
	if (alt_form) {
    5a46:	f1ba 0f00 	cmp.w	sl, #0
    5a4a:	d008      	beq.n	5a5e <z_prf+0x83e>
		*buf++ = '0';
    5a4c:	2330      	movs	r3, #48	; 0x30
    5a4e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (!value) {
    5a52:	b979      	cbnz	r1, 5a74 <z_prf+0x854>
			*buf++ = 0;
    5a54:	f88d 1065 	strb.w	r1, [sp, #101]	; 0x65
			prefix = 0;
    5a58:	4688      	mov	r8, r1
			return 1;
    5a5a:	2601      	movs	r6, #1
    5a5c:	e5df      	b.n	561e <z_prf+0x3fe>
    5a5e:	ad19      	add	r5, sp, #100	; 0x64
	return (buf - buf0) + _to_x(buf, value, 8);
    5a60:	4628      	mov	r0, r5
    5a62:	2208      	movs	r2, #8
    5a64:	f01f fb62 	bl	2512c <_to_x>
    5a68:	ae19      	add	r6, sp, #100	; 0x64
    5a6a:	1bad      	subs	r5, r5, r6
    5a6c:	182e      	adds	r6, r5, r0
			prefix = 0;
    5a6e:	f04f 0800 	mov.w	r8, #0
    5a72:	e5d4      	b.n	561e <z_prf+0x3fe>
		*buf++ = '0';
    5a74:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    5a78:	e7f2      	b.n	5a60 <z_prf+0x840>
				} else if (c == 'u') {
    5a7a:	2d75      	cmp	r5, #117	; 0x75
    5a7c:	d105      	bne.n	5a8a <z_prf+0x86a>
	return _to_x(buf, value, 10);
    5a7e:	220a      	movs	r2, #10
    5a80:	a819      	add	r0, sp, #100	; 0x64
    5a82:	f01f fb53 	bl	2512c <_to_x>
    5a86:	4606      	mov	r6, r0
    5a88:	e7f1      	b.n	5a6e <z_prf+0x84e>
	if (alt_form) {
    5a8a:	f1ba 0f00 	cmp.w	sl, #0
    5a8e:	d011      	beq.n	5ab4 <z_prf+0x894>
		*buf++ = '0';
    5a90:	f647 0330 	movw	r3, #30768	; 0x7830
    5a94:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
		*buf++ = 'x';
    5a98:	f10d 0766 	add.w	r7, sp, #102	; 0x66
	len = _to_x(buf, value, 16);
    5a9c:	2210      	movs	r2, #16
    5a9e:	4638      	mov	r0, r7
    5aa0:	f01f fb44 	bl	2512c <_to_x>
	if (prefix == 'X') {
    5aa4:	2d58      	cmp	r5, #88	; 0x58
    5aa6:	d007      	beq.n	5ab8 <z_prf+0x898>
	return len + (buf - buf0);
    5aa8:	ae19      	add	r6, sp, #100	; 0x64
    5aaa:	1bbf      	subs	r7, r7, r6
    5aac:	183e      	adds	r6, r7, r0
						prefix = 2;
    5aae:	ea4f 084a 	mov.w	r8, sl, lsl #1
    5ab2:	e5b4      	b.n	561e <z_prf+0x3fe>
    5ab4:	af19      	add	r7, sp, #100	; 0x64
    5ab6:	e7f1      	b.n	5a9c <z_prf+0x87c>
    5ab8:	aa19      	add	r2, sp, #100	; 0x64
		if (*buf >= 'a' && *buf <= 'z') {
    5aba:	f812 3b01 	ldrb.w	r3, [r2], #1
    5abe:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    5ac2:	2919      	cmp	r1, #25
    5ac4:	d803      	bhi.n	5ace <z_prf+0x8ae>
			*buf += 'A' - 'a';
    5ac6:	3b20      	subs	r3, #32
    5ac8:	f802 3c01 	strb.w	r3, [r2, #-1]
	} while (*buf++);
    5acc:	e7f5      	b.n	5aba <z_prf+0x89a>
    5ace:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	d1f1      	bne.n	5aba <z_prf+0x89a>
    5ad6:	e7e7      	b.n	5aa8 <z_prf+0x888>
				PUTC('%');
    5ad8:	4649      	mov	r1, r9
    5ada:	4628      	mov	r0, r5
    5adc:	f7ff bbb1 	b.w	5242 <z_prf+0x22>
				count++;
    5ae0:	9b02      	ldr	r3, [sp, #8]
    5ae2:	3301      	adds	r3, #1
				continue;
    5ae4:	e9cd 6301 	strd	r6, r3, [sp, #4]
    5ae8:	e77d      	b.n	59e6 <z_prf+0x7c6>
					prefix = 1;
    5aea:	f04f 0801 	mov.w	r8, #1
    5aee:	e596      	b.n	561e <z_prf+0x3fe>
    5af0:	461c      	mov	r4, r3
    5af2:	e79c      	b.n	5a2e <z_prf+0x80e>
			cptr = buf;
    5af4:	af19      	add	r7, sp, #100	; 0x64
				zero_head = 0;
    5af6:	2300      	movs	r3, #0
    5af8:	e51d      	b.n	5536 <z_prf+0x316>
    5afa:	9b08      	ldr	r3, [sp, #32]
    5afc:	af19      	add	r7, sp, #100	; 0x64
    5afe:	e51a      	b.n	5536 <z_prf+0x316>
    5b00:	9309      	str	r3, [sp, #36]	; 0x24
					PUTC(' ');
    5b02:	4649      	mov	r1, r9
    5b04:	9b03      	ldr	r3, [sp, #12]
    5b06:	9207      	str	r2, [sp, #28]
    5b08:	2020      	movs	r0, #32
    5b0a:	4798      	blx	r3
    5b0c:	3001      	adds	r0, #1
    5b0e:	9a07      	ldr	r2, [sp, #28]
    5b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b12:	f43f ab9b 	beq.w	524c <z_prf+0x2c>
				while (width-- > 0) {
    5b16:	3a01      	subs	r2, #1
    5b18:	d2f2      	bcs.n	5b00 <z_prf+0x8e0>
				count += width;
    5b1a:	9902      	ldr	r1, [sp, #8]
    5b1c:	4429      	add	r1, r5
    5b1e:	9102      	str	r1, [sp, #8]
				while (width-- > 0) {
    5b20:	4615      	mov	r5, r2
    5b22:	e512      	b.n	554a <z_prf+0x32a>
    5b24:	462a      	mov	r2, r5
    5b26:	e7f6      	b.n	5b16 <z_prf+0x8f6>
    5b28:	9309      	str	r3, [sp, #36]	; 0x24
				PUTC(*cptr++);
    5b2a:	f817 0b01 	ldrb.w	r0, [r7], #1
    5b2e:	9b03      	ldr	r3, [sp, #12]
    5b30:	9207      	str	r2, [sp, #28]
    5b32:	4649      	mov	r1, r9
    5b34:	4798      	blx	r3
    5b36:	3001      	adds	r0, #1
    5b38:	9a07      	ldr	r2, [sp, #28]
    5b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b3c:	f47f ad07 	bne.w	554e <z_prf+0x32e>
    5b40:	f7ff bb84 	b.w	524c <z_prf+0x2c>
    5b44:	9307      	str	r3, [sp, #28]
				PUTC('0');
    5b46:	4649      	mov	r1, r9
    5b48:	9b03      	ldr	r3, [sp, #12]
    5b4a:	2030      	movs	r0, #48	; 0x30
    5b4c:	4798      	blx	r3
    5b4e:	3001      	adds	r0, #1
    5b50:	9b07      	ldr	r3, [sp, #28]
    5b52:	f47f acff 	bne.w	5554 <z_prf+0x334>
    5b56:	f7ff bb79 	b.w	524c <z_prf+0x2c>
					PUTC(c);
    5b5a:	9b03      	ldr	r3, [sp, #12]
    5b5c:	4649      	mov	r1, r9
    5b5e:	4798      	blx	r3
    5b60:	3001      	adds	r0, #1
    5b62:	f43f ab73 	beq.w	524c <z_prf+0x2c>
					c = *++cptr;
    5b66:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    5b6a:	e4fe      	b.n	556a <z_prf+0x34a>
					PUTC('0');
    5b6c:	9b03      	ldr	r3, [sp, #12]
    5b6e:	4649      	mov	r1, r9
    5b70:	2030      	movs	r0, #48	; 0x30
    5b72:	4798      	blx	r3
    5b74:	3001      	adds	r0, #1
    5b76:	f47f ad00 	bne.w	557a <z_prf+0x35a>
    5b7a:	f7ff bb67 	b.w	524c <z_prf+0x2c>
					PUTC('0');
    5b7e:	9b03      	ldr	r3, [sp, #12]
    5b80:	4649      	mov	r1, r9
    5b82:	2030      	movs	r0, #48	; 0x30
    5b84:	4798      	blx	r3
    5b86:	3001      	adds	r0, #1
    5b88:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    5b8c:	f47f ad0f 	bne.w	55ae <z_prf+0x38e>
    5b90:	f7ff bb5c 	b.w	524c <z_prf+0x2c>
					PUTC(c);
    5b94:	9b03      	ldr	r3, [sp, #12]
    5b96:	4649      	mov	r1, r9
    5b98:	4798      	blx	r3
    5b9a:	3001      	adds	r0, #1
    5b9c:	f43f ab56 	beq.w	524c <z_prf+0x2c>
					c = *++cptr;
    5ba0:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    5ba4:	e50d      	b.n	55c2 <z_prf+0x3a2>
					PUTC('0');
    5ba6:	9b03      	ldr	r3, [sp, #12]
    5ba8:	4649      	mov	r1, r9
    5baa:	2030      	movs	r0, #48	; 0x30
    5bac:	4798      	blx	r3
    5bae:	3001      	adds	r0, #1
    5bb0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    5bb4:	f47f ad10 	bne.w	55d8 <z_prf+0x3b8>
    5bb8:	f7ff bb48 	b.w	524c <z_prf+0x2c>
				PUTC(*cptr++);
    5bbc:	f817 0b01 	ldrb.w	r0, [r7], #1
    5bc0:	9b03      	ldr	r3, [sp, #12]
    5bc2:	4649      	mov	r1, r9
    5bc4:	4798      	blx	r3
    5bc6:	3001      	adds	r0, #1
    5bc8:	f43f ab40 	beq.w	524c <z_prf+0x2c>
			while (clen-- > 0) {
    5bcc:	1bf3      	subs	r3, r6, r7
    5bce:	2b00      	cmp	r3, #0
    5bd0:	dcf4      	bgt.n	5bbc <z_prf+0x99c>
			count += clen;
    5bd2:	9b02      	ldr	r3, [sp, #8]
    5bd4:	9a08      	ldr	r2, [sp, #32]
			if (width > 0) {
    5bd6:	2d00      	cmp	r5, #0
			count += clen;
    5bd8:	4413      	add	r3, r2
    5bda:	9302      	str	r3, [sp, #8]
			if (width > 0) {
    5bdc:	f77f af03 	ble.w	59e6 <z_prf+0x7c6>
    5be0:	462c      	mov	r4, r5
    5be2:	e006      	b.n	5bf2 <z_prf+0x9d2>
					PUTC(' ');
    5be4:	9b03      	ldr	r3, [sp, #12]
    5be6:	4649      	mov	r1, r9
    5be8:	2020      	movs	r0, #32
    5bea:	4798      	blx	r3
    5bec:	3001      	adds	r0, #1
    5bee:	f43f ab2d 	beq.w	524c <z_prf+0x2c>
				while (width-- > 0) {
    5bf2:	3c01      	subs	r4, #1
    5bf4:	d2f6      	bcs.n	5be4 <z_prf+0x9c4>
				count += width;
    5bf6:	9b02      	ldr	r3, [sp, #8]
    5bf8:	442b      	add	r3, r5
    5bfa:	9302      	str	r3, [sp, #8]
    5bfc:	e6f3      	b.n	59e6 <z_prf+0x7c6>
    5bfe:	bf00      	nop

00005c00 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    5c00:	4b01      	ldr	r3, [pc, #4]	; (5c08 <__stdout_hook_install+0x8>)
    5c02:	6018      	str	r0, [r3, #0]
}
    5c04:	4770      	bx	lr
    5c06:	bf00      	nop
    5c08:	20006a24 	.word	0x20006a24

00005c0c <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    5c0c:	b40c      	push	{r2, r3}
    5c0e:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    5c10:	b909      	cbnz	r1, 5c16 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    5c12:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    5c16:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    5c1a:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    5c1c:	9a06      	ldr	r2, [sp, #24]
    5c1e:	4806      	ldr	r0, [pc, #24]	; (5c38 <snprintf+0x2c>)
	va_start(vargs, format);
    5c20:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    5c22:	a902      	add	r1, sp, #8
    5c24:	f7ff fafc 	bl	5220 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    5c28:	9b02      	ldr	r3, [sp, #8]
    5c2a:	2200      	movs	r2, #0
    5c2c:	701a      	strb	r2, [r3, #0]
	return r;
}
    5c2e:	b005      	add	sp, #20
    5c30:	f85d eb04 	ldr.w	lr, [sp], #4
    5c34:	b002      	add	sp, #8
    5c36:	4770      	bx	lr
    5c38:	0002521f 	.word	0x0002521f

00005c3c <nordicsemi_nrf52_init>:
    5c3c:	f04f 0320 	mov.w	r3, #32
    5c40:	f3ef 8211 	mrs	r2, BASEPRI
    5c44:	f383 8811 	msr	BASEPRI, r3
    5c48:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    5c4c:	4906      	ldr	r1, [pc, #24]	; (5c68 <nordicsemi_nrf52_init+0x2c>)
    5c4e:	2301      	movs	r3, #1
    5c50:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5c54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5c58:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    5c5c:	f382 8811 	msr	BASEPRI, r2
    5c60:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    5c64:	2000      	movs	r0, #0
    5c66:	4770      	bx	lr
    5c68:	4001e000 	.word	0x4001e000

00005c6c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5c6c:	b120      	cbz	r0, 5c78 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    5c6e:	4b03      	ldr	r3, [pc, #12]	; (5c7c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    5c70:	0180      	lsls	r0, r0, #6
    5c72:	f043 0301 	orr.w	r3, r3, #1
    5c76:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    5c78:	4770      	bx	lr
    5c7a:	bf00      	nop
    5c7c:	00028af0 	.word	0x00028af0

00005c80 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const u8_t *b = buf;
	int i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    5c80:	4b0e      	ldr	r3, [pc, #56]	; (5cbc <bt_hex_real+0x3c>)
    5c82:	2940      	cmp	r1, #64	; 0x40
{
    5c84:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    5c86:	bf28      	it	cs
    5c88:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    5c8a:	4c0d      	ldr	r4, [pc, #52]	; (5cc0 <bt_hex_real+0x40>)
    5c8c:	1846      	adds	r6, r0, r1
    5c8e:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    5c90:	42b0      	cmp	r0, r6
    5c92:	f103 0302 	add.w	r3, r3, #2
    5c96:	d104      	bne.n	5ca2 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    5c98:	2300      	movs	r3, #0
    5c9a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    5c9e:	4807      	ldr	r0, [pc, #28]	; (5cbc <bt_hex_real+0x3c>)
    5ca0:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    5ca2:	7802      	ldrb	r2, [r0, #0]
    5ca4:	0912      	lsrs	r2, r2, #4
    5ca6:	5ca2      	ldrb	r2, [r4, r2]
    5ca8:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    5cac:	f810 2b01 	ldrb.w	r2, [r0], #1
    5cb0:	f002 020f 	and.w	r2, r2, #15
    5cb4:	5ca2      	ldrb	r2, [r4, r2]
    5cb6:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    5cba:	e7e9      	b.n	5c90 <bt_hex_real+0x10>
    5cbc:	2000219d 	.word	0x2000219d
    5cc0:	0002a79a 	.word	0x0002a79a

00005cc4 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    5cc4:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    5cc6:	7803      	ldrb	r3, [r0, #0]
    5cc8:	b08b      	sub	sp, #44	; 0x2c
    5cca:	4604      	mov	r4, r0
    5ccc:	ad07      	add	r5, sp, #28
    5cce:	2b03      	cmp	r3, #3
    5cd0:	d821      	bhi.n	5d16 <bt_addr_le_str_real+0x52>
    5cd2:	e8df f003 	tbb	[pc, r3]
    5cd6:	1a02      	.short	0x1a02
    5cd8:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    5cda:	4912      	ldr	r1, [pc, #72]	; (5d24 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    5cdc:	4628      	mov	r0, r5
    5cde:	f01f f97a 	bl	24fd6 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    5ce2:	7863      	ldrb	r3, [r4, #1]
    5ce4:	9304      	str	r3, [sp, #16]
    5ce6:	78a3      	ldrb	r3, [r4, #2]
    5ce8:	9303      	str	r3, [sp, #12]
    5cea:	78e3      	ldrb	r3, [r4, #3]
    5cec:	9302      	str	r3, [sp, #8]
    5cee:	7923      	ldrb	r3, [r4, #4]
    5cf0:	9301      	str	r3, [sp, #4]
    5cf2:	7963      	ldrb	r3, [r4, #5]
    5cf4:	9300      	str	r3, [sp, #0]
    5cf6:	4a0c      	ldr	r2, [pc, #48]	; (5d28 <bt_addr_le_str_real+0x64>)
    5cf8:	79a3      	ldrb	r3, [r4, #6]
    5cfa:	9505      	str	r5, [sp, #20]
    5cfc:	211e      	movs	r1, #30
    5cfe:	480b      	ldr	r0, [pc, #44]	; (5d2c <bt_addr_le_str_real+0x68>)
    5d00:	f01d faf0 	bl	232e4 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    5d04:	4809      	ldr	r0, [pc, #36]	; (5d2c <bt_addr_le_str_real+0x68>)
    5d06:	b00b      	add	sp, #44	; 0x2c
    5d08:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    5d0a:	4909      	ldr	r1, [pc, #36]	; (5d30 <bt_addr_le_str_real+0x6c>)
    5d0c:	e7e6      	b.n	5cdc <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    5d0e:	4909      	ldr	r1, [pc, #36]	; (5d34 <bt_addr_le_str_real+0x70>)
    5d10:	e7e4      	b.n	5cdc <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    5d12:	4909      	ldr	r1, [pc, #36]	; (5d38 <bt_addr_le_str_real+0x74>)
    5d14:	e7e2      	b.n	5cdc <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    5d16:	4a09      	ldr	r2, [pc, #36]	; (5d3c <bt_addr_le_str_real+0x78>)
    5d18:	210a      	movs	r1, #10
    5d1a:	4628      	mov	r0, r5
    5d1c:	f01d fae2 	bl	232e4 <snprintk>
		break;
    5d20:	e7df      	b.n	5ce2 <bt_addr_le_str_real+0x1e>
    5d22:	bf00      	nop
    5d24:	0002a755 	.word	0x0002a755
    5d28:	0002a777 	.word	0x0002a777
    5d2c:	2000221e 	.word	0x2000221e
    5d30:	0002a75c 	.word	0x0002a75c
    5d34:	0002a763 	.word	0x0002a763
    5d38:	0002a76d 	.word	0x0002a76d
    5d3c:	0002e56d 	.word	0x0002e56d

00005d40 <bt_uuid_str_real>:

const char *bt_uuid_str_real(const struct bt_uuid *uuid)
{
    5d40:	b510      	push	{r4, lr}
	static char str[BT_UUID_STR_LEN];

	bt_uuid_to_str(uuid, str, sizeof(str));
    5d42:	4c03      	ldr	r4, [pc, #12]	; (5d50 <bt_uuid_str_real+0x10>)
    5d44:	2225      	movs	r2, #37	; 0x25
    5d46:	4621      	mov	r1, r4
    5d48:	f000 fb64 	bl	6414 <bt_uuid_to_str>

	return str;
}
    5d4c:	4620      	mov	r0, r4
    5d4e:	bd10      	pop	{r4, pc}
    5d50:	2000223c 	.word	0x2000223c

00005d54 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	u8_t *pdst = (u8_t *)dst;
	const u8_t *psrc = (const u8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    5d54:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
    5d56:	b570      	push	{r4, r5, r6, lr}
    5d58:	4604      	mov	r4, r0
    5d5a:	460d      	mov	r5, r1
    5d5c:	f101 0620 	add.w	r6, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    5d60:	d919      	bls.n	5d96 <sys_memcpy_swap.constprop.0+0x42>
    5d62:	42b0      	cmp	r0, r6
    5d64:	d20e      	bcs.n	5d84 <sys_memcpy_swap.constprop.0+0x30>
    5d66:	490e      	ldr	r1, [pc, #56]	; (5da0 <sys_memcpy_swap.constprop.0+0x4c>)
    5d68:	4a0e      	ldr	r2, [pc, #56]	; (5da4 <sys_memcpy_swap.constprop.0+0x50>)
    5d6a:	480f      	ldr	r0, [pc, #60]	; (5da8 <sys_memcpy_swap.constprop.0+0x54>)
    5d6c:	f240 2317 	movw	r3, #535	; 0x217
    5d70:	f01d faab 	bl	232ca <printk>
    5d74:	480d      	ldr	r0, [pc, #52]	; (5dac <sys_memcpy_swap.constprop.0+0x58>)
    5d76:	f01d faa8 	bl	232ca <printk>
    5d7a:	480a      	ldr	r0, [pc, #40]	; (5da4 <sys_memcpy_swap.constprop.0+0x50>)
    5d7c:	f240 2117 	movw	r1, #535	; 0x217
    5d80:	f01d fae6 	bl	23350 <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
    5d84:	4633      	mov	r3, r6
    5d86:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
    5d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    5d8c:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
    5d90:	42ab      	cmp	r3, r5
    5d92:	d1f9      	bne.n	5d88 <sys_memcpy_swap.constprop.0+0x34>
	}
}
    5d94:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    5d96:	d0e6      	beq.n	5d66 <sys_memcpy_swap.constprop.0+0x12>
    5d98:	f100 0320 	add.w	r3, r0, #32
    5d9c:	4299      	cmp	r1, r3
    5d9e:	e7e1      	b.n	5d64 <sys_memcpy_swap.constprop.0+0x10>
    5da0:	0002a7d2 	.word	0x0002a7d2
    5da4:	0002a7ab 	.word	0x0002a7ab
    5da8:	000297e6 	.word	0x000297e6
    5dac:	0002a829 	.word	0x0002a829

00005db0 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    5db0:	b580      	push	{r7, lr}
    5db2:	4d69      	ldr	r5, [pc, #420]	; (5f58 <ecc_thread+0x1a8>)
    5db4:	4b69      	ldr	r3, [pc, #420]	; (5f5c <ecc_thread+0x1ac>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5db6:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 5f8c <ecc_thread+0x1dc>
	return z_impl_k_sem_take(sem, timeout);
    5dba:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 5f90 <ecc_thread+0x1e0>
    5dbe:	1aed      	subs	r5, r5, r3
    5dc0:	08ed      	lsrs	r5, r5, #3
    5dc2:	4646      	mov	r6, r8
    5dc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5dc8:	4648      	mov	r0, r9
    5dca:	f01b fea9 	bl	21b20 <z_impl_k_sem_take>
    5dce:	f3bf 8f5b 	dmb	ish
    5dd2:	f8d8 4000 	ldr.w	r4, [r8]
    5dd6:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    5dda:	f014 0401 	ands.w	r4, r4, #1
    5dde:	d058      	beq.n	5e92 <ecc_thread+0xe2>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    5de0:	f8df a190 	ldr.w	sl, [pc, #400]	; 5f74 <ecc_thread+0x1c4>
    5de4:	4c5e      	ldr	r4, [pc, #376]	; (5f60 <ecc_thread+0x1b0>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    5de6:	4f5f      	ldr	r7, [pc, #380]	; (5f64 <ecc_thread+0x1b4>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    5de8:	485f      	ldr	r0, [pc, #380]	; (5f68 <ecc_thread+0x1b8>)
    5dea:	4652      	mov	r2, sl
    5dec:	4621      	mov	r1, r4
    5dee:	f01d ffbe 	bl	23d6e <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    5df2:	bbd8      	cbnz	r0, 5e6c <ecc_thread+0xbc>
			BT_ERR("Failed to create ECC public/private pair");
    5df4:	01a9      	lsls	r1, r5, #6
    5df6:	485d      	ldr	r0, [pc, #372]	; (5f6c <ecc_thread+0x1bc>)
    5df8:	f041 0101 	orr.w	r1, r1, #1
    5dfc:	f01d fad6 	bl	233ac <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    5e00:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5e04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5e08:	2001      	movs	r0, #1
    5e0a:	f002 fc67 	bl	86dc <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5e0e:	f100 0708 	add.w	r7, r0, #8
    5e12:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5e14:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5e16:	4638      	mov	r0, r7
    5e18:	f018 fc00 	bl	1e61c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    5e1c:	233e      	movs	r3, #62	; 0x3e
    5e1e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    5e20:	2342      	movs	r3, #66	; 0x42
    5e22:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    5e24:	2101      	movs	r1, #1
    5e26:	4638      	mov	r0, r7
    5e28:	f018 fbf8 	bl	1e61c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    5e2c:	2308      	movs	r3, #8
    5e2e:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    5e30:	2141      	movs	r1, #65	; 0x41
    5e32:	4638      	mov	r0, r7
    5e34:	f018 fbf2 	bl	1e61c <net_buf_simple_add>
    5e38:	4607      	mov	r7, r0
	evt->status = status;
    5e3a:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    5e3e:	f1ba 0f00 	cmp.w	sl, #0
    5e42:	d01d      	beq.n	5e80 <ecc_thread+0xd0>
		(void)memset(evt->key, 0, sizeof(evt->key));
    5e44:	2240      	movs	r2, #64	; 0x40
    5e46:	2100      	movs	r1, #0
    5e48:	f01f f94d 	bl	250e6 <memset>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5e4c:	f3bf 8f5b 	dmb	ish
    5e50:	e856 3f00 	ldrex	r3, [r6]
    5e54:	f023 0301 	bic.w	r3, r3, #1
    5e58:	e846 3200 	strex	r2, r3, [r6]
    5e5c:	2a00      	cmp	r2, #0
    5e5e:	d1f7      	bne.n	5e50 <ecc_thread+0xa0>
    5e60:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    5e64:	4620      	mov	r0, r4
	bt_recv(buf);
    5e66:	f001 fae9 	bl	743c <bt_recv>
}
    5e6a:	e7ab      	b.n	5dc4 <ecc_thread+0x14>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    5e6c:	2220      	movs	r2, #32
    5e6e:	4639      	mov	r1, r7
    5e70:	4620      	mov	r0, r4
    5e72:	f01f f8fd 	bl	25070 <memcmp>
    5e76:	2800      	cmp	r0, #0
    5e78:	d0b6      	beq.n	5de8 <ecc_thread+0x38>
	return 0;
    5e7a:	f04f 0a00 	mov.w	sl, #0
    5e7e:	e7c1      	b.n	5e04 <ecc_thread+0x54>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
    5e80:	4939      	ldr	r1, [pc, #228]	; (5f68 <ecc_thread+0x1b8>)
    5e82:	f7ff ff67 	bl	5d54 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
    5e86:	493a      	ldr	r1, [pc, #232]	; (5f70 <ecc_thread+0x1c0>)
    5e88:	f107 0021 	add.w	r0, r7, #33	; 0x21
    5e8c:	f7ff ff62 	bl	5d54 <sys_memcpy_swap.constprop.0>
    5e90:	e7dc      	b.n	5e4c <ecc_thread+0x9c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5e92:	f3bf 8f5b 	dmb	ish
    5e96:	f8d8 3000 	ldr.w	r3, [r8]
    5e9a:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    5e9e:	079b      	lsls	r3, r3, #30
    5ea0:	d54b      	bpl.n	5f3a <ecc_thread+0x18a>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
    5ea2:	4934      	ldr	r1, [pc, #208]	; (5f74 <ecc_thread+0x1c4>)
    5ea4:	4830      	ldr	r0, [pc, #192]	; (5f68 <ecc_thread+0x1b8>)
    5ea6:	f01e fe31 	bl	24b0c <uECC_valid_public_key>
	if (ret < 0) {
    5eaa:	1e01      	subs	r1, r0, #0
    5eac:	da36      	bge.n	5f1c <ecc_thread+0x16c>
		BT_ERR("public key is not valid (ret %d)", ret);
    5eae:	01aa      	lsls	r2, r5, #6
    5eb0:	4831      	ldr	r0, [pc, #196]	; (5f78 <ecc_thread+0x1c8>)
    5eb2:	f042 0201 	orr.w	r2, r2, #1
    5eb6:	f01d fa86 	bl	233c6 <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5eba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5ebe:	2001      	movs	r0, #1
    5ec0:	f002 fc0c 	bl	86dc <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5ec4:	f100 0a08 	add.w	sl, r0, #8
    5ec8:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5eca:	4607      	mov	r7, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5ecc:	4650      	mov	r0, sl
    5ece:	f018 fba5 	bl	1e61c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    5ed2:	233e      	movs	r3, #62	; 0x3e
    5ed4:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    5ed6:	2322      	movs	r3, #34	; 0x22
    5ed8:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    5eda:	2101      	movs	r1, #1
    5edc:	4650      	mov	r0, sl
    5ede:	f018 fb9d 	bl	1e61c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    5ee2:	2309      	movs	r3, #9
    5ee4:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    5ee6:	2121      	movs	r1, #33	; 0x21
    5ee8:	4650      	mov	r0, sl
    5eea:	f018 fb97 	bl	1e61c <net_buf_simple_add>
    5eee:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    5ef0:	3001      	adds	r0, #1
    5ef2:	b9e4      	cbnz	r4, 5f2e <ecc_thread+0x17e>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    5ef4:	221f      	movs	r2, #31
    5ef6:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0, sizeof(evt->dhkey));
    5ef8:	4621      	mov	r1, r4
    5efa:	2220      	movs	r2, #32
    5efc:	f01f f8f3 	bl	250e6 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5f00:	f3bf 8f5b 	dmb	ish
    5f04:	e856 3f00 	ldrex	r3, [r6]
    5f08:	f023 0302 	bic.w	r3, r3, #2
    5f0c:	e846 3200 	strex	r2, r3, [r6]
    5f10:	2a00      	cmp	r2, #0
    5f12:	d1f7      	bne.n	5f04 <ecc_thread+0x154>
    5f14:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    5f18:	4638      	mov	r0, r7
    5f1a:	e7a4      	b.n	5e66 <ecc_thread+0xb6>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
    5f1c:	4a12      	ldr	r2, [pc, #72]	; (5f68 <ecc_thread+0x1b8>)
    5f1e:	4b15      	ldr	r3, [pc, #84]	; (5f74 <ecc_thread+0x1c4>)
    5f20:	f1a2 0120 	sub.w	r1, r2, #32
    5f24:	4610      	mov	r0, r2
    5f26:	f01d ff71 	bl	23e0c <uECC_shared_secret>
    5f2a:	4604      	mov	r4, r0
    5f2c:	e7c5      	b.n	5eba <ecc_thread+0x10a>
		evt->status = 0U;
    5f2e:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    5f30:	490d      	ldr	r1, [pc, #52]	; (5f68 <ecc_thread+0x1b8>)
		evt->status = 0U;
    5f32:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    5f34:	f7ff ff0e 	bl	5d54 <sys_memcpy_swap.constprop.0>
    5f38:	e7e2      	b.n	5f00 <ecc_thread+0x150>
			emulate_le_generate_dhkey();
		} else {
			__ASSERT(0, "Unhandled ECC command");
    5f3a:	4a10      	ldr	r2, [pc, #64]	; (5f7c <ecc_thread+0x1cc>)
    5f3c:	4910      	ldr	r1, [pc, #64]	; (5f80 <ecc_thread+0x1d0>)
    5f3e:	4811      	ldr	r0, [pc, #68]	; (5f84 <ecc_thread+0x1d4>)
    5f40:	23d9      	movs	r3, #217	; 0xd9
    5f42:	f01d f9c2 	bl	232ca <printk>
    5f46:	4810      	ldr	r0, [pc, #64]	; (5f88 <ecc_thread+0x1d8>)
    5f48:	f01d f9bf 	bl	232ca <printk>
    5f4c:	480b      	ldr	r0, [pc, #44]	; (5f7c <ecc_thread+0x1cc>)
    5f4e:	21d9      	movs	r1, #217	; 0xd9
    5f50:	f01d f9fe 	bl	23350 <assert_post_action>
    5f54:	e736      	b.n	5dc4 <ecc_thread+0x14>
    5f56:	bf00      	nop
    5f58:	00028930 	.word	0x00028930
    5f5c:	00028868 	.word	0x00028868
    5f60:	20002261 	.word	0x20002261
    5f64:	00028dd0 	.word	0x00028dd0
    5f68:	20002281 	.word	0x20002281
    5f6c:	0002a85b 	.word	0x0002a85b
    5f70:	200022a1 	.word	0x200022a1
    5f74:	00028d20 	.word	0x00028d20
    5f78:	0002a884 	.word	0x0002a884
    5f7c:	0002a8a5 	.word	0x0002a8a5
    5f80:	0002d2c6 	.word	0x0002d2c6
    5f84:	000297e6 	.word	0x000297e6
    5f88:	0002a8d8 	.word	0x0002a8d8
    5f8c:	200004d4 	.word	0x200004d4
    5f90:	200074b4 	.word	0x200074b4

00005f94 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    5f94:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    5f96:	7d05      	ldrb	r5, [r0, #20]
    5f98:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    5f9a:	b9ad      	cbnz	r5, 5fc8 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    5f9c:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    5f9e:	881a      	ldrh	r2, [r3, #0]
    5fa0:	f242 0125 	movw	r1, #8229	; 0x2025
    5fa4:	428a      	cmp	r2, r1
    5fa6:	d017      	beq.n	5fd8 <bt_hci_ecc_send+0x44>
    5fa8:	f242 0126 	movw	r1, #8230	; 0x2026
    5fac:	428a      	cmp	r2, r1
    5fae:	d03c      	beq.n	602a <bt_hci_ecc_send+0x96>
    5fb0:	f242 0101 	movw	r1, #8193	; 0x2001
    5fb4:	428a      	cmp	r2, r1
    5fb6:	d107      	bne.n	5fc8 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    5fb8:	78da      	ldrb	r2, [r3, #3]
    5fba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    5fbe:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    5fc0:	791a      	ldrb	r2, [r3, #4]
    5fc2:	f022 0201 	bic.w	r2, r2, #1
    5fc6:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    5fc8:	4b32      	ldr	r3, [pc, #200]	; (6094 <bt_hci_ecc_send+0x100>)
    5fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    5fce:	4620      	mov	r0, r4
    5fd0:	691b      	ldr	r3, [r3, #16]
}
    5fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    5fd6:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    5fd8:	2103      	movs	r1, #3
    5fda:	3008      	adds	r0, #8
    5fdc:	f018 fadc 	bl	1e598 <net_buf_simple_pull>
	net_buf_unref(buf);
    5fe0:	4620      	mov	r0, r4
    5fe2:	f018 fa55 	bl	1e490 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5fe6:	f3bf 8f5b 	dmb	ish
    5fea:	4b2b      	ldr	r3, [pc, #172]	; (6098 <bt_hci_ecc_send+0x104>)
    5fec:	681a      	ldr	r2, [r3, #0]
    5fee:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    5ff2:	0790      	lsls	r0, r2, #30
    5ff4:	d507      	bpl.n	6006 <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    5ff6:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    5ff8:	4629      	mov	r1, r5
    5ffa:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    5ffe:	f01f f91d 	bl	2523c <send_cmd_status>
}
    6002:	2000      	movs	r0, #0
    6004:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6006:	f3bf 8f5b 	dmb	ish
    600a:	e853 2f00 	ldrex	r2, [r3]
    600e:	f042 0101 	orr.w	r1, r2, #1
    6012:	e843 1000 	strex	r0, r1, [r3]
    6016:	2800      	cmp	r0, #0
    6018:	d1f7      	bne.n	600a <bt_hci_ecc_send+0x76>
    601a:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    601e:	07d1      	lsls	r1, r2, #31
    6020:	d4e9      	bmi.n	5ff6 <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    6022:	481e      	ldr	r0, [pc, #120]	; (609c <bt_hci_ecc_send+0x108>)
    6024:	f01b fd38 	bl	21a98 <z_impl_k_sem_give>
}
    6028:	e7e6      	b.n	5ff8 <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
    602a:	2103      	movs	r1, #3
    602c:	3008      	adds	r0, #8
    602e:	f018 fab3 	bl	1e598 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6032:	f3bf 8f5b 	dmb	ish
    6036:	4b18      	ldr	r3, [pc, #96]	; (6098 <bt_hci_ecc_send+0x104>)
    6038:	681a      	ldr	r2, [r3, #0]
    603a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    603e:	07d2      	lsls	r2, r2, #31
    6040:	d507      	bpl.n	6052 <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    6042:	250c      	movs	r5, #12
	net_buf_unref(buf);
    6044:	4620      	mov	r0, r4
    6046:	f018 fa23 	bl	1e490 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    604a:	4629      	mov	r1, r5
    604c:	f242 0026 	movw	r0, #8230	; 0x2026
    6050:	e7d5      	b.n	5ffe <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    6052:	89a2      	ldrh	r2, [r4, #12]
    6054:	2a3f      	cmp	r2, #63	; 0x3f
    6056:	d91b      	bls.n	6090 <bt_hci_ecc_send+0xfc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6058:	f3bf 8f5b 	dmb	ish
    605c:	e853 2f00 	ldrex	r2, [r3]
    6060:	f042 0102 	orr.w	r1, r2, #2
    6064:	e843 1000 	strex	r0, r1, [r3]
    6068:	2800      	cmp	r0, #0
    606a:	d1f7      	bne.n	605c <bt_hci_ecc_send+0xc8>
    606c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    6070:	0793      	lsls	r3, r2, #30
    6072:	d4e6      	bmi.n	6042 <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    6074:	68a6      	ldr	r6, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
    6076:	480a      	ldr	r0, [pc, #40]	; (60a0 <bt_hci_ecc_send+0x10c>)
    6078:	4631      	mov	r1, r6
    607a:	f7ff fe6b 	bl	5d54 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
    607e:	4809      	ldr	r0, [pc, #36]	; (60a4 <bt_hci_ecc_send+0x110>)
    6080:	f106 0120 	add.w	r1, r6, #32
    6084:	f7ff fe66 	bl	5d54 <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
    6088:	4804      	ldr	r0, [pc, #16]	; (609c <bt_hci_ecc_send+0x108>)
    608a:	f01b fd05 	bl	21a98 <z_impl_k_sem_give>
}
    608e:	e7d9      	b.n	6044 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    6090:	2512      	movs	r5, #18
    6092:	e7d7      	b.n	6044 <bt_hci_ecc_send+0xb0>
    6094:	200067d0 	.word	0x200067d0
    6098:	200004d4 	.word	0x200004d4
    609c:	200074b4 	.word	0x200074b4
    60a0:	20002281 	.word	0x20002281
    60a4:	200022a1 	.word	0x200022a1

000060a8 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    60a8:	b510      	push	{r4, lr}
    60aa:	b086      	sub	sp, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    60ac:	4c0b      	ldr	r4, [pc, #44]	; (60dc <bt_hci_ecc_init+0x34>)
    60ae:	490c      	ldr	r1, [pc, #48]	; (60e0 <bt_hci_ecc_init+0x38>)
    60b0:	2300      	movs	r3, #0
    60b2:	220a      	movs	r2, #10
    60b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
    60b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
    60bc:	e9cd 3300 	strd	r3, r3, [sp]
    60c0:	f240 424c 	movw	r2, #1100	; 0x44c
    60c4:	4b07      	ldr	r3, [pc, #28]	; (60e4 <bt_hci_ecc_init+0x3c>)
    60c6:	4620      	mov	r0, r4
    60c8:	f01b fe00 	bl	21ccc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    60cc:	4906      	ldr	r1, [pc, #24]	; (60e8 <bt_hci_ecc_init+0x40>)
    60ce:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_THREAD_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    60d0:	b006      	add	sp, #24
    60d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    60d6:	f01b bdbf 	b.w	21c58 <z_impl_k_thread_name_set>
    60da:	bf00      	nop
    60dc:	20000440 	.word	0x20000440
    60e0:	20002e80 	.word	0x20002e80
    60e4:	00005db1 	.word	0x00005db1
    60e8:	0002a8f0 	.word	0x0002a8f0

000060ec <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    60ec:	b510      	push	{r4, lr}
    60ee:	4b0d      	ldr	r3, [pc, #52]	; (6124 <save_id+0x38>)
    60f0:	4c0d      	ldr	r4, [pc, #52]	; (6128 <save_id+0x3c>)
	int err;
	BT_INFO("Saving ID");
    60f2:	480e      	ldr	r0, [pc, #56]	; (612c <save_id+0x40>)
    60f4:	1ae4      	subs	r4, r4, r3
    60f6:	08e4      	lsrs	r4, r4, #3
    60f8:	01a4      	lsls	r4, r4, #6
    60fa:	f044 0103 	orr.w	r1, r4, #3
    60fe:	f01d f955 	bl	233ac <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    6102:	490b      	ldr	r1, [pc, #44]	; (6130 <save_id+0x44>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    6104:	480b      	ldr	r0, [pc, #44]	; (6134 <save_id+0x48>)
    6106:	79ca      	ldrb	r2, [r1, #7]
    6108:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    610c:	f7fd fab6 	bl	367c <settings_save_one>
	if (err) {
    6110:	4601      	mov	r1, r0
    6112:	b130      	cbz	r0, 6122 <save_id+0x36>
		BT_ERR("Failed to save ID (err %d)", err);
    6114:	f044 0201 	orr.w	r2, r4, #1
    6118:	4807      	ldr	r0, [pc, #28]	; (6138 <save_id+0x4c>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    611a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    611e:	f01d b952 	b.w	233c6 <log_1>
}
    6122:	bd10      	pop	{r4, pc}
    6124:	00028868 	.word	0x00028868
    6128:	000289c8 	.word	0x000289c8
    612c:	0002a902 	.word	0x0002a902
    6130:	200067d0 	.word	0x200067d0
    6134:	0002a90c 	.word	0x0002a90c
    6138:	0002a912 	.word	0x0002a912

0000613c <set>:
{
    613c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6140:	4605      	mov	r5, r0
    6142:	4616      	mov	r6, r2
    6144:	461f      	mov	r7, r3
	if (!name) {
    6146:	b960      	cbnz	r0, 6162 <set+0x26>
    6148:	4934      	ldr	r1, [pc, #208]	; (621c <set+0xe0>)
    614a:	4b35      	ldr	r3, [pc, #212]	; (6220 <set+0xe4>)
		BT_ERR("Insufficient number of arguments");
    614c:	4835      	ldr	r0, [pc, #212]	; (6224 <set+0xe8>)
    614e:	1ac9      	subs	r1, r1, r3
    6150:	08c9      	lsrs	r1, r1, #3
    6152:	0189      	lsls	r1, r1, #6
    6154:	f041 0101 	orr.w	r1, r1, #1
    6158:	f01d f928 	bl	233ac <log_0>
	return -ENOENT;
    615c:	f06f 0401 	mvn.w	r4, #1
    6160:	e01c      	b.n	619c <set+0x60>
	len = settings_name_next(name, &next);
    6162:	a901      	add	r1, sp, #4
    6164:	f01d fcff 	bl	23b66 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    6168:	492f      	ldr	r1, [pc, #188]	; (6228 <set+0xec>)
    616a:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
    616c:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
    616e:	4628      	mov	r0, r5
    6170:	f01e ff6f 	bl	25052 <strncmp>
    6174:	4604      	mov	r4, r0
    6176:	bb90      	cbnz	r0, 61de <set+0xa2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6178:	f3bf 8f5b 	dmb	ish
    617c:	4d2b      	ldr	r5, [pc, #172]	; (622c <set+0xf0>)
    617e:	682b      	ldr	r3, [r5, #0]
    6180:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    6184:	075b      	lsls	r3, r3, #29
    6186:	d50d      	bpl.n	61a4 <set+0x68>
    6188:	4924      	ldr	r1, [pc, #144]	; (621c <set+0xe0>)
    618a:	4b25      	ldr	r3, [pc, #148]	; (6220 <set+0xe4>)
			BT_WARN("Ignoring identities stored in flash");
    618c:	4828      	ldr	r0, [pc, #160]	; (6230 <set+0xf4>)
    618e:	1ac9      	subs	r1, r1, r3
    6190:	08c9      	lsrs	r1, r1, #3
    6192:	0189      	lsls	r1, r1, #6
    6194:	f041 0102 	orr.w	r1, r1, #2
    6198:	f01d f908 	bl	233ac <log_0>
}
    619c:	4620      	mov	r0, r4
    619e:	b002      	add	sp, #8
    61a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    61a4:	3d8c      	subs	r5, #140	; 0x8c
    61a6:	2207      	movs	r2, #7
    61a8:	4629      	mov	r1, r5
    61aa:	4638      	mov	r0, r7
    61ac:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    61ae:	2806      	cmp	r0, #6
    61b0:	d810      	bhi.n	61d4 <set+0x98>
    61b2:	4b1b      	ldr	r3, [pc, #108]	; (6220 <set+0xe4>)
    61b4:	4919      	ldr	r1, [pc, #100]	; (621c <set+0xe0>)
				BT_ERR("Invalid length ID address in storage");
    61b6:	481f      	ldr	r0, [pc, #124]	; (6234 <set+0xf8>)
    61b8:	1ac9      	subs	r1, r1, r3
    61ba:	08c9      	lsrs	r1, r1, #3
    61bc:	0189      	lsls	r1, r1, #6
    61be:	f041 0101 	orr.w	r1, r1, #1
    61c2:	f01d f8f3 	bl	233ac <log_0>
			(void)memset(bt_dev.id_addr, 0,
    61c6:	2207      	movs	r2, #7
    61c8:	4621      	mov	r1, r4
    61ca:	4628      	mov	r0, r5
    61cc:	f01e ff8b 	bl	250e6 <memset>
			bt_dev.id_count = 0U;
    61d0:	71ec      	strb	r4, [r5, #7]
    61d2:	e7e3      	b.n	619c <set+0x60>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    61d4:	2307      	movs	r3, #7
    61d6:	fbb0 f0f3 	udiv	r0, r0, r3
    61da:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    61dc:	e7de      	b.n	619c <set+0x60>
	if (!strncmp(name, "name", len)) {
    61de:	4916      	ldr	r1, [pc, #88]	; (6238 <set+0xfc>)
    61e0:	4642      	mov	r2, r8
    61e2:	4628      	mov	r0, r5
    61e4:	f01e ff35 	bl	25052 <strncmp>
    61e8:	4604      	mov	r4, r0
    61ea:	2800      	cmp	r0, #0
    61ec:	d1b6      	bne.n	615c <set+0x20>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
    61ee:	4913      	ldr	r1, [pc, #76]	; (623c <set+0x100>)
    61f0:	221c      	movs	r2, #28
    61f2:	4638      	mov	r0, r7
    61f4:	47b0      	blx	r6
		if (len < 0) {
    61f6:	1e01      	subs	r1, r0, #0
    61f8:	da0a      	bge.n	6210 <set+0xd4>
    61fa:	4b09      	ldr	r3, [pc, #36]	; (6220 <set+0xe4>)
    61fc:	4a07      	ldr	r2, [pc, #28]	; (621c <set+0xe0>)
			BT_ERR("Failed to read device name from storage"
    61fe:	4810      	ldr	r0, [pc, #64]	; (6240 <set+0x104>)
    6200:	1ad2      	subs	r2, r2, r3
    6202:	08d2      	lsrs	r2, r2, #3
    6204:	0192      	lsls	r2, r2, #6
    6206:	f042 0201 	orr.w	r2, r2, #1
    620a:	f01d f8dc 	bl	233c6 <log_1>
    620e:	e7c5      	b.n	619c <set+0x60>
			bt_dev.name[len] = '\0';
    6210:	480c      	ldr	r0, [pc, #48]	; (6244 <set+0x108>)
    6212:	4401      	add	r1, r0
    6214:	f881 40f4 	strb.w	r4, [r1, #244]	; 0xf4
			BT_DBG("Name set to %s", log_strdup(bt_dev.name));
    6218:	e7c0      	b.n	619c <set+0x60>
    621a:	bf00      	nop
    621c:	000289c8 	.word	0x000289c8
    6220:	00028868 	.word	0x00028868
    6224:	0002a92d 	.word	0x0002a92d
    6228:	0002a76a 	.word	0x0002a76a
    622c:	2000685c 	.word	0x2000685c
    6230:	0002a94e 	.word	0x0002a94e
    6234:	0002a972 	.word	0x0002a972
    6238:	0002b0a4 	.word	0x0002b0a4
    623c:	200068c4 	.word	0x200068c4
    6240:	0002a997 	.word	0x0002a997
    6244:	200067d0 	.word	0x200067d0

00006248 <bt_settings_encode_key>:
{
    6248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    624c:	b088      	sub	sp, #32
    624e:	799c      	ldrb	r4, [r3, #6]
    6250:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    6254:	795d      	ldrb	r5, [r3, #5]
    6256:	791e      	ldrb	r6, [r3, #4]
    6258:	78df      	ldrb	r7, [r3, #3]
    625a:	f893 c002 	ldrb.w	ip, [r3, #2]
    625e:	f893 e001 	ldrb.w	lr, [r3, #1]
    6262:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    6264:	f1b8 0f00 	cmp.w	r8, #0
    6268:	d00e      	beq.n	6288 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    626a:	e9cd 3806 	strd	r3, r8, [sp, #24]
    626e:	e9cd ce04 	strd	ip, lr, [sp, #16]
    6272:	4613      	mov	r3, r2
    6274:	e9cd 6702 	strd	r6, r7, [sp, #8]
    6278:	e9cd 4500 	strd	r4, r5, [sp]
    627c:	4a08      	ldr	r2, [pc, #32]	; (62a0 <bt_settings_encode_key+0x58>)
    627e:	f01d f831 	bl	232e4 <snprintk>
}
    6282:	b008      	add	sp, #32
    6284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    6288:	e9cd e305 	strd	lr, r3, [sp, #20]
    628c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    6290:	4613      	mov	r3, r2
    6292:	e9cd 5601 	strd	r5, r6, [sp, #4]
    6296:	4a03      	ldr	r2, [pc, #12]	; (62a4 <bt_settings_encode_key+0x5c>)
    6298:	9400      	str	r4, [sp, #0]
    629a:	f01d f823 	bl	232e4 <snprintk>
}
    629e:	e7f0      	b.n	6282 <bt_settings_encode_key+0x3a>
    62a0:	0002a9c9 	.word	0x0002a9c9
    62a4:	0002a9ed 	.word	0x0002a9ed

000062a8 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    62a8:	4909      	ldr	r1, [pc, #36]	; (62d0 <bt_settings_save_id+0x28>)
    62aa:	f3bf 8f5b 	dmb	ish
    62ae:	e851 3f00 	ldrex	r3, [r1]
    62b2:	f043 0201 	orr.w	r2, r3, #1
    62b6:	e841 2000 	strex	r0, r2, [r1]
    62ba:	2800      	cmp	r0, #0
    62bc:	d1f7      	bne.n	62ae <bt_settings_save_id+0x6>
    62be:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    62c2:	07db      	lsls	r3, r3, #31
    62c4:	d403      	bmi.n	62ce <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    62c6:	4803      	ldr	r0, [pc, #12]	; (62d4 <bt_settings_save_id+0x2c>)
    62c8:	3908      	subs	r1, #8
    62ca:	f022 b809 	b.w	282e0 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    62ce:	4770      	bx	lr
    62d0:	20006a30 	.word	0x20006a30
    62d4:	20001c08 	.word	0x20001c08

000062d8 <commit>:

static int commit(void)
{
    62d8:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("");

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
    62da:	4c1d      	ldr	r4, [pc, #116]	; (6350 <commit+0x78>)
    62dc:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    62e0:	b913      	cbnz	r3, 62e8 <commit+0x10>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
    62e2:	481c      	ldr	r0, [pc, #112]	; (6354 <commit+0x7c>)
    62e4:	f001 fcda 	bl	7c9c <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
    62e8:	79e3      	ldrb	r3, [r4, #7]
    62ea:	b99b      	cbnz	r3, 6314 <commit+0x3c>
		bt_setup_public_id_addr();
    62ec:	f001 fd6e 	bl	7dcc <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    62f0:	79e3      	ldrb	r3, [r4, #7]
    62f2:	b97b      	cbnz	r3, 6314 <commit+0x3c>
		int err;

		err = bt_setup_random_id_addr();
    62f4:	f001 fe14 	bl	7f20 <bt_setup_random_id_addr>
		if (err) {
    62f8:	4604      	mov	r4, r0
    62fa:	b158      	cbz	r0, 6314 <commit+0x3c>
    62fc:	4916      	ldr	r1, [pc, #88]	; (6358 <commit+0x80>)
    62fe:	4b17      	ldr	r3, [pc, #92]	; (635c <commit+0x84>)
			BT_ERR("Unable to setup an identity address");
    6300:	4817      	ldr	r0, [pc, #92]	; (6360 <commit+0x88>)
    6302:	1ac9      	subs	r1, r1, r3
    6304:	08c9      	lsrs	r1, r1, #3
    6306:	0189      	lsls	r1, r1, #6
    6308:	f041 0101 	orr.w	r1, r1, #1
    630c:	f01d f84e 	bl	233ac <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    6310:	4620      	mov	r0, r4
    6312:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6314:	4d13      	ldr	r5, [pc, #76]	; (6364 <commit+0x8c>)
    6316:	f3bf 8f5b 	dmb	ish
    631a:	682b      	ldr	r3, [r5, #0]
    631c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6320:	079b      	lsls	r3, r3, #30
    6322:	d401      	bmi.n	6328 <commit+0x50>
		bt_finalize_init();
    6324:	f001 f99e 	bl	7664 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6328:	f3bf 8f5b 	dmb	ish
    632c:	e855 4f00 	ldrex	r4, [r5]
    6330:	f424 1380 	bic.w	r3, r4, #1048576	; 0x100000
    6334:	e845 3200 	strex	r2, r3, [r5]
    6338:	2a00      	cmp	r2, #0
    633a:	d1f7      	bne.n	632c <commit+0x54>
    633c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    6340:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    6344:	d0e4      	beq.n	6310 <commit+0x38>
		bt_settings_save_id();
    6346:	f7ff ffaf 	bl	62a8 <bt_settings_save_id>
	return 0;
    634a:	2400      	movs	r4, #0
    634c:	e7e0      	b.n	6310 <commit+0x38>
    634e:	bf00      	nop
    6350:	200067d0 	.word	0x200067d0
    6354:	0002aa0e 	.word	0x0002aa0e
    6358:	000289c8 	.word	0x000289c8
    635c:	00028868 	.word	0x00028868
    6360:	0002aa15 	.word	0x0002aa15
    6364:	2000685c 	.word	0x2000685c

00006368 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    6368:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    636a:	f7fd fb23 	bl	39b4 <settings_subsys_init>
	if (err) {
    636e:	4604      	mov	r4, r0
    6370:	b150      	cbz	r0, 6388 <bt_settings_init+0x20>
    6372:	4a06      	ldr	r2, [pc, #24]	; (638c <bt_settings_init+0x24>)
    6374:	4b06      	ldr	r3, [pc, #24]	; (6390 <bt_settings_init+0x28>)
    6376:	1ad2      	subs	r2, r2, r3
    6378:	08d2      	lsrs	r2, r2, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
    637a:	0192      	lsls	r2, r2, #6
    637c:	4601      	mov	r1, r0
    637e:	f042 0201 	orr.w	r2, r2, #1
    6382:	4804      	ldr	r0, [pc, #16]	; (6394 <bt_settings_init+0x2c>)
    6384:	f01d f81f 	bl	233c6 <log_1>
		return err;
	}

	return 0;
}
    6388:	4620      	mov	r0, r4
    638a:	bd10      	pop	{r4, pc}
    638c:	000289c8 	.word	0x000289c8
    6390:	00028868 	.word	0x00028868
    6394:	0002aa39 	.word	0x0002aa39

00006398 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    6398:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    639a:	7802      	ldrb	r2, [r0, #0]
    639c:	2a01      	cmp	r2, #1
{
    639e:	4604      	mov	r4, r0
    63a0:	460b      	mov	r3, r1
	switch (src->type) {
    63a2:	d016      	beq.n	63d2 <uuid_to_uuid128+0x3a>
    63a4:	2a02      	cmp	r2, #2
    63a6:	d02c      	beq.n	6402 <uuid_to_uuid128+0x6a>
    63a8:	b98a      	cbnz	r2, 63ce <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    63aa:	4a19      	ldr	r2, [pc, #100]	; (6410 <uuid_to_uuid128+0x78>)
    63ac:	460d      	mov	r5, r1
    63ae:	f102 0710 	add.w	r7, r2, #16
    63b2:	6810      	ldr	r0, [r2, #0]
    63b4:	6851      	ldr	r1, [r2, #4]
    63b6:	462e      	mov	r6, r5
    63b8:	c603      	stmia	r6!, {r0, r1}
    63ba:	3208      	adds	r2, #8
    63bc:	42ba      	cmp	r2, r7
    63be:	4635      	mov	r5, r6
    63c0:	d1f7      	bne.n	63b2 <uuid_to_uuid128+0x1a>
    63c2:	7812      	ldrb	r2, [r2, #0]
    63c4:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    63c6:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    63c8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    63ca:	0a12      	lsrs	r2, r2, #8
    63cc:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    63ce:	bcf0      	pop	{r4, r5, r6, r7}
    63d0:	4770      	bx	lr
		*dst = uuid128_base;
    63d2:	4a0f      	ldr	r2, [pc, #60]	; (6410 <uuid_to_uuid128+0x78>)
    63d4:	460d      	mov	r5, r1
    63d6:	f102 0710 	add.w	r7, r2, #16
    63da:	6810      	ldr	r0, [r2, #0]
    63dc:	6851      	ldr	r1, [r2, #4]
    63de:	462e      	mov	r6, r5
    63e0:	c603      	stmia	r6!, {r0, r1}
    63e2:	3208      	adds	r2, #8
    63e4:	42ba      	cmp	r2, r7
    63e6:	4635      	mov	r5, r6
    63e8:	d1f7      	bne.n	63da <uuid_to_uuid128+0x42>
    63ea:	7812      	ldrb	r2, [r2, #0]
    63ec:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    63ee:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    63f0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    63f2:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    63f6:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    63f8:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    63fa:	0a12      	lsrs	r2, r2, #8
    63fc:	7399      	strb	r1, [r3, #14]
    63fe:	741a      	strb	r2, [r3, #16]
}
    6400:	e7e5      	b.n	63ce <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    6402:	4601      	mov	r1, r0
}
    6404:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    6406:	2211      	movs	r2, #17
    6408:	4618      	mov	r0, r3
    640a:	f01e be41 	b.w	25090 <memcpy>
    640e:	bf00      	nop
    6410:	0002aa95 	.word	0x0002aa95

00006414 <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
    6414:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t tmp1, tmp5;
	u16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
    6416:	7805      	ldrb	r5, [r0, #0]
    6418:	2d01      	cmp	r5, #1
{
    641a:	b08b      	sub	sp, #44	; 0x2c
    641c:	4604      	mov	r4, r0
    641e:	460e      	mov	r6, r1
    6420:	4617      	mov	r7, r2
	switch (uuid->type) {
    6422:	d00b      	beq.n	643c <bt_uuid_to_str+0x28>
    6424:	2d02      	cmp	r5, #2
    6426:	d00c      	beq.n	6442 <bt_uuid_to_str+0x2e>
    6428:	2d00      	cmp	r5, #0
    642a:	d142      	bne.n	64b2 <bt_uuid_to_str+0x9e>
	case BT_UUID_TYPE_16:
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
    642c:	8843      	ldrh	r3, [r0, #2]
    642e:	4a23      	ldr	r2, [pc, #140]	; (64bc <bt_uuid_to_str+0xa8>)
		break;
	case BT_UUID_TYPE_32:
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
    6430:	4639      	mov	r1, r7
    6432:	4630      	mov	r0, r6
    6434:	f01c ff56 	bl	232e4 <snprintk>
		break;
	default:
		(void)memset(str, 0, len);
		return;
	}
}
    6438:	b00b      	add	sp, #44	; 0x2c
    643a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
    643c:	6843      	ldr	r3, [r0, #4]
    643e:	4a20      	ldr	r2, [pc, #128]	; (64c0 <bt_uuid_to_str+0xac>)
    6440:	e7f6      	b.n	6430 <bt_uuid_to_str+0x1c>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
    6442:	462a      	mov	r2, r5
    6444:	1c41      	adds	r1, r0, #1
    6446:	a806      	add	r0, sp, #24
    6448:	f01e fe22 	bl	25090 <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
    644c:	1ce1      	adds	r1, r4, #3
    644e:	2204      	movs	r2, #4
    6450:	a808      	add	r0, sp, #32
    6452:	f01e fe1d 	bl	25090 <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
    6456:	462a      	mov	r2, r5
    6458:	1de1      	adds	r1, r4, #7
    645a:	f10d 001a 	add.w	r0, sp, #26
    645e:	f01e fe17 	bl	25090 <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
    6462:	462a      	mov	r2, r5
    6464:	f104 0109 	add.w	r1, r4, #9
    6468:	a807      	add	r0, sp, #28
    646a:	f01e fe11 	bl	25090 <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
    646e:	462a      	mov	r2, r5
    6470:	f104 010b 	add.w	r1, r4, #11
    6474:	f10d 001e 	add.w	r0, sp, #30
    6478:	f01e fe0a 	bl	25090 <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
    647c:	f104 010d 	add.w	r1, r4, #13
    6480:	2204      	movs	r2, #4
    6482:	a809      	add	r0, sp, #36	; 0x24
    6484:	f01e fe04 	bl	25090 <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
    6488:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    648c:	9304      	str	r3, [sp, #16]
    648e:	9b08      	ldr	r3, [sp, #32]
    6490:	9303      	str	r3, [sp, #12]
    6492:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    6496:	9302      	str	r3, [sp, #8]
    6498:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    649c:	9301      	str	r3, [sp, #4]
    649e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    64a2:	9300      	str	r3, [sp, #0]
    64a4:	4a07      	ldr	r2, [pc, #28]	; (64c4 <bt_uuid_to_str+0xb0>)
    64a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    64a8:	4639      	mov	r1, r7
    64aa:	4630      	mov	r0, r6
    64ac:	f01c ff1a 	bl	232e4 <snprintk>
		break;
    64b0:	e7c2      	b.n	6438 <bt_uuid_to_str+0x24>
		(void)memset(str, 0, len);
    64b2:	2100      	movs	r1, #0
    64b4:	4630      	mov	r0, r6
    64b6:	f01e fe16 	bl	250e6 <memset>
		return;
    64ba:	e7bd      	b.n	6438 <bt_uuid_to_str+0x24>
    64bc:	0002bbdf 	.word	0x0002bbdf
    64c0:	0002a0de 	.word	0x0002a0de
    64c4:	0002aa78 	.word	0x0002aa78

000064c8 <le_dhkey_complete>:

	pub_key_cb = NULL;
}

static void le_dhkey_complete(struct net_buf *buf)
{
    64c8:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    64ca:	4c06      	ldr	r4, [pc, #24]	; (64e4 <le_dhkey_complete+0x1c>)
    64cc:	6822      	ldr	r2, [r4, #0]
    64ce:	b132      	cbz	r2, 64de <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    64d0:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    64d2:	7803      	ldrb	r3, [r0, #0]
    64d4:	b923      	cbnz	r3, 64e0 <le_dhkey_complete+0x18>
    64d6:	3001      	adds	r0, #1
    64d8:	4790      	blx	r2
		dh_key_cb = NULL;
    64da:	2300      	movs	r3, #0
    64dc:	6023      	str	r3, [r4, #0]
	}
}
    64de:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    64e0:	2000      	movs	r0, #0
    64e2:	e7f9      	b.n	64d8 <le_dhkey_complete+0x10>
    64e4:	200004f0 	.word	0x200004f0

000064e8 <ver_str>:
	return 1U;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    64e8:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    64ea:	4d0b      	ldr	r5, [pc, #44]	; (6518 <ver_str+0x30>)
{
    64ec:	4606      	mov	r6, r0
	const char * const str[] = {
    64ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    64f0:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    64f2:	466c      	mov	r4, sp
    64f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    64f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    64f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    64fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    64fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2"
	};

	if (ver < ARRAY_SIZE(str)) {
    6502:	2e0b      	cmp	r6, #11
		return str[ver];
    6504:	bf9b      	ittet	ls
    6506:	ab0c      	addls	r3, sp, #48	; 0x30
    6508:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    650c:	4803      	ldrhi	r0, [pc, #12]	; (651c <ver_str+0x34>)
		return str[ver];
    650e:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    6512:	b00c      	add	sp, #48	; 0x30
    6514:	bd70      	pop	{r4, r5, r6, pc}
    6516:	bf00      	nop
    6518:	00028a6c 	.word	0x00028a6c
    651c:	0002ab91 	.word	0x0002ab91

00006520 <hci_data_buf_overflow>:
    6520:	4905      	ldr	r1, [pc, #20]	; (6538 <hci_data_buf_overflow+0x18>)
    6522:	4a06      	ldr	r2, [pc, #24]	; (653c <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    6524:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    6526:	4806      	ldr	r0, [pc, #24]	; (6540 <hci_data_buf_overflow+0x20>)
    6528:	1a52      	subs	r2, r2, r1
    652a:	08d2      	lsrs	r2, r2, #3
    652c:	0192      	lsls	r2, r2, #6
    652e:	7819      	ldrb	r1, [r3, #0]
    6530:	f042 0202 	orr.w	r2, r2, #2
    6534:	f01c bf47 	b.w	233c6 <log_1>
    6538:	00028868 	.word	0x00028868
    653c:	00028928 	.word	0x00028928
    6540:	0002ab99 	.word	0x0002ab99

00006544 <le_pkey_complete>:
{
    6544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    6546:	6886      	ldr	r6, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6548:	480f      	ldr	r0, [pc, #60]	; (6588 <le_pkey_complete+0x44>)
    654a:	f06f 0110 	mvn.w	r1, #16
    654e:	f01f f8e4 	bl	2571a <atomic_and>
	if (!evt->status) {
    6552:	7833      	ldrb	r3, [r6, #0]
    6554:	b943      	cbnz	r3, 6568 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    6556:	1c71      	adds	r1, r6, #1
    6558:	480c      	ldr	r0, [pc, #48]	; (658c <le_pkey_complete+0x48>)
    655a:	2240      	movs	r2, #64	; 0x40
    655c:	f01e fd98 	bl	25090 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6560:	4809      	ldr	r0, [pc, #36]	; (6588 <le_pkey_complete+0x44>)
    6562:	2108      	movs	r1, #8
    6564:	f01f f8bf 	bl	256e6 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6568:	4d09      	ldr	r5, [pc, #36]	; (6590 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    656a:	4f08      	ldr	r7, [pc, #32]	; (658c <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    656c:	682c      	ldr	r4, [r5, #0]
    656e:	b90c      	cbnz	r4, 6574 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    6570:	602c      	str	r4, [r5, #0]
}
    6572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    6574:	7832      	ldrb	r2, [r6, #0]
    6576:	6823      	ldr	r3, [r4, #0]
    6578:	2a00      	cmp	r2, #0
    657a:	bf0c      	ite	eq
    657c:	4638      	moveq	r0, r7
    657e:	2000      	movne	r0, #0
    6580:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6582:	6864      	ldr	r4, [r4, #4]
    6584:	e7f3      	b.n	656e <le_pkey_complete+0x2a>
    6586:	bf00      	nop
    6588:	2000685c 	.word	0x2000685c
    658c:	200022c1 	.word	0x200022c1
    6590:	200004f4 	.word	0x200004f4

00006594 <le_conn_update_complete>:
{
    6594:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    6596:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    6598:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    659c:	4630      	mov	r0, r6
    659e:	f002 fd6d 	bl	907c <bt_conn_lookup_handle>
	if (!conn) {
    65a2:	4604      	mov	r4, r0
    65a4:	b960      	cbnz	r0, 65c0 <le_conn_update_complete+0x2c>
    65a6:	4a1e      	ldr	r2, [pc, #120]	; (6620 <le_conn_update_complete+0x8c>)
    65a8:	4b1e      	ldr	r3, [pc, #120]	; (6624 <le_conn_update_complete+0x90>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    65aa:	481f      	ldr	r0, [pc, #124]	; (6628 <le_conn_update_complete+0x94>)
    65ac:	1ad2      	subs	r2, r2, r3
    65ae:	08d2      	lsrs	r2, r2, #3
    65b0:	0192      	lsls	r2, r2, #6
    65b2:	f042 0201 	orr.w	r2, r2, #1
    65b6:	4631      	mov	r1, r6
    65b8:	f01c ff05 	bl	233c6 <log_1>
}
    65bc:	b002      	add	sp, #8
    65be:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    65c0:	782b      	ldrb	r3, [r5, #0]
    65c2:	b9bb      	cbnz	r3, 65f4 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    65c4:	792a      	ldrb	r2, [r5, #4]
    65c6:	78eb      	ldrb	r3, [r5, #3]
    65c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    65cc:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    65d0:	79aa      	ldrb	r2, [r5, #6]
    65d2:	796b      	ldrb	r3, [r5, #5]
    65d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    65d8:	f8a0 3090 	strh.w	r3, [r0, #144]	; 0x90
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    65dc:	79eb      	ldrb	r3, [r5, #7]
    65de:	7a2a      	ldrb	r2, [r5, #8]
    65e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    65e4:	f8a0 3092 	strh.w	r3, [r0, #146]	; 0x92
		notify_le_param_updated(conn);
    65e8:	f002 faa4 	bl	8b34 <notify_le_param_updated>
	bt_conn_unref(conn);
    65ec:	4620      	mov	r0, r4
    65ee:	f01f f9d6 	bl	2599e <bt_conn_unref>
    65f2:	e7e3      	b.n	65bc <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    65f4:	2b1a      	cmp	r3, #26
    65f6:	d1f9      	bne.n	65ec <le_conn_update_complete+0x58>
    65f8:	78c3      	ldrb	r3, [r0, #3]
    65fa:	2b01      	cmp	r3, #1
    65fc:	d1f6      	bne.n	65ec <le_conn_update_complete+0x58>
		   !atomic_test_and_set_bit(conn->flags,
    65fe:	210a      	movs	r1, #10
    6600:	3004      	adds	r0, #4
    6602:	f01f f87f 	bl	25704 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    6606:	2800      	cmp	r0, #0
    6608:	d1f0      	bne.n	65ec <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    660a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    660e:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    6610:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    6612:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6616:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    6618:	4620      	mov	r0, r4
    661a:	f003 f8c9 	bl	97b0 <bt_l2cap_update_conn_param>
    661e:	e7e5      	b.n	65ec <le_conn_update_complete+0x58>
    6620:	00028928 	.word	0x00028928
    6624:	00028868 	.word	0x00028868
    6628:	0002abc1 	.word	0x0002abc1

0000662c <hci_vendor_event>:
{
    662c:	b510      	push	{r4, lr}
    662e:	4a0a      	ldr	r2, [pc, #40]	; (6658 <hci_vendor_event+0x2c>)
    6630:	4c0a      	ldr	r4, [pc, #40]	; (665c <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    6632:	8981      	ldrh	r1, [r0, #12]
    6634:	6880      	ldr	r0, [r0, #8]
    6636:	1aa4      	subs	r4, r4, r2
    6638:	f7ff fb22 	bl	5c80 <bt_hex_real>
    663c:	f7fb fe80 	bl	2340 <log_strdup>
    6640:	08e4      	lsrs	r4, r4, #3
    6642:	01a4      	lsls	r4, r4, #6
    6644:	f044 0402 	orr.w	r4, r4, #2
    6648:	4601      	mov	r1, r0
    664a:	4622      	mov	r2, r4
    664c:	4804      	ldr	r0, [pc, #16]	; (6660 <hci_vendor_event+0x34>)
}
    664e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    6652:	f01c beb8 	b.w	233c6 <log_1>
    6656:	bf00      	nop
    6658:	00028868 	.word	0x00028868
    665c:	00028928 	.word	0x00028928
    6660:	0002abe5 	.word	0x0002abe5

00006664 <handle_event>:
{
    6664:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6666:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    666a:	4605      	mov	r5, r0
    666c:	4608      	mov	r0, r1
		if (handler->event != event) {
    666e:	7811      	ldrb	r1, [r2, #0]
    6670:	42a9      	cmp	r1, r5
    6672:	d01a      	beq.n	66aa <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    6674:	3208      	adds	r2, #8
    6676:	429a      	cmp	r2, r3
    6678:	d1f9      	bne.n	666e <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    667a:	8986      	ldrh	r6, [r0, #12]
    667c:	4b16      	ldr	r3, [pc, #88]	; (66d8 <handle_event+0x74>)
    667e:	4c17      	ldr	r4, [pc, #92]	; (66dc <handle_event+0x78>)
    6680:	6880      	ldr	r0, [r0, #8]
    6682:	4631      	mov	r1, r6
    6684:	1ae4      	subs	r4, r4, r3
    6686:	f7ff fafb 	bl	5c80 <bt_hex_real>
    668a:	f7fb fe59 	bl	2340 <log_strdup>
    668e:	08e4      	lsrs	r4, r4, #3
    6690:	01a4      	lsls	r4, r4, #6
    6692:	f044 0402 	orr.w	r4, r4, #2
    6696:	4603      	mov	r3, r0
    6698:	f8ad 4000 	strh.w	r4, [sp]
    669c:	4810      	ldr	r0, [pc, #64]	; (66e0 <handle_event+0x7c>)
    669e:	4632      	mov	r2, r6
    66a0:	4629      	mov	r1, r5
    66a2:	f01c febd 	bl	23420 <log_3>
}
    66a6:	b002      	add	sp, #8
    66a8:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    66aa:	8981      	ldrh	r1, [r0, #12]
    66ac:	7853      	ldrb	r3, [r2, #1]
    66ae:	428b      	cmp	r3, r1
    66b0:	d90d      	bls.n	66ce <handle_event+0x6a>
    66b2:	4a09      	ldr	r2, [pc, #36]	; (66d8 <handle_event+0x74>)
    66b4:	4b09      	ldr	r3, [pc, #36]	; (66dc <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    66b6:	480b      	ldr	r0, [pc, #44]	; (66e4 <handle_event+0x80>)
    66b8:	1a9b      	subs	r3, r3, r2
    66ba:	08db      	lsrs	r3, r3, #3
    66bc:	019b      	lsls	r3, r3, #6
    66be:	f043 0301 	orr.w	r3, r3, #1
    66c2:	462a      	mov	r2, r5
}
    66c4:	b002      	add	sp, #8
    66c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    66ca:	f01c be90 	b.w	233ee <log_2>
		handler->handler(buf);
    66ce:	6853      	ldr	r3, [r2, #4]
}
    66d0:	b002      	add	sp, #8
    66d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    66d6:	4718      	bx	r3
    66d8:	00028868 	.word	0x00028868
    66dc:	00028928 	.word	0x00028928
    66e0:	0002ac2b 	.word	0x0002ac2b
    66e4:	0002ac09 	.word	0x0002ac09

000066e8 <hci_le_meta_event>:
{
    66e8:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    66ea:	2101      	movs	r1, #1
{
    66ec:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    66ee:	3008      	adds	r0, #8
    66f0:	f017 ff72 	bl	1e5d8 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    66f4:	4621      	mov	r1, r4
    66f6:	4a03      	ldr	r2, [pc, #12]	; (6704 <hci_le_meta_event+0x1c>)
    66f8:	7800      	ldrb	r0, [r0, #0]
}
    66fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    66fe:	2308      	movs	r3, #8
    6700:	f7ff bfb0 	b.w	6664 <handle_event>
    6704:	00028df0 	.word	0x00028df0

00006708 <hci_cmd_done>:
{
    6708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    670c:	4607      	mov	r7, r0
    670e:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6710:	7990      	ldrb	r0, [r2, #6]
    6712:	4e34      	ldr	r6, [pc, #208]	; (67e4 <hci_cmd_done+0xdc>)
{
    6714:	4688      	mov	r8, r1
    6716:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6718:	f017 fc88 	bl	1e02c <net_buf_pool_get>
    671c:	4286      	cmp	r6, r0
    671e:	d016      	beq.n	674e <hci_cmd_done+0x46>
    6720:	4b31      	ldr	r3, [pc, #196]	; (67e8 <hci_cmd_done+0xe0>)
    6722:	4d32      	ldr	r5, [pc, #200]	; (67ec <hci_cmd_done+0xe4>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    6724:	79a0      	ldrb	r0, [r4, #6]
    6726:	9700      	str	r7, [sp, #0]
    6728:	1aed      	subs	r5, r5, r3
    672a:	08ed      	lsrs	r5, r5, #3
    672c:	9001      	str	r0, [sp, #4]
    672e:	f017 fc7d 	bl	1e02c <net_buf_pool_get>
    6732:	01ad      	lsls	r5, r5, #6
    6734:	f045 0502 	orr.w	r5, r5, #2
    6738:	e9cd 0602 	strd	r0, r6, [sp, #8]
    673c:	462b      	mov	r3, r5
    673e:	482c      	ldr	r0, [pc, #176]	; (67f0 <hci_cmd_done+0xe8>)
    6740:	2204      	movs	r2, #4
    6742:	4669      	mov	r1, sp
    6744:	f01c fe88 	bl	23458 <log_n>
}
    6748:	b005      	add	sp, #20
    674a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    674e:	4620      	mov	r0, r4
    6750:	f017 fc74 	bl	1e03c <net_buf_id>
    6754:	4d27      	ldr	r5, [pc, #156]	; (67f4 <hci_cmd_done+0xec>)
    6756:	f04f 090c 	mov.w	r9, #12
    675a:	fb09 5300 	mla	r3, r9, r0, r5
    675e:	885b      	ldrh	r3, [r3, #2]
    6760:	42bb      	cmp	r3, r7
    6762:	d011      	beq.n	6788 <hci_cmd_done+0x80>
    6764:	4b20      	ldr	r3, [pc, #128]	; (67e8 <hci_cmd_done+0xe0>)
    6766:	4e21      	ldr	r6, [pc, #132]	; (67ec <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    6768:	4620      	mov	r0, r4
    676a:	1af6      	subs	r6, r6, r3
    676c:	f017 fc66 	bl	1e03c <net_buf_id>
    6770:	08f6      	lsrs	r6, r6, #3
    6772:	fb09 5000 	mla	r0, r9, r0, r5
    6776:	01b6      	lsls	r6, r6, #6
    6778:	f046 0602 	orr.w	r6, r6, #2
    677c:	8842      	ldrh	r2, [r0, #2]
    677e:	481e      	ldr	r0, [pc, #120]	; (67f8 <hci_cmd_done+0xf0>)
    6780:	4633      	mov	r3, r6
    6782:	4639      	mov	r1, r7
    6784:	f01c fe33 	bl	233ee <log_2>
	if (cmd(buf)->state && !status) {
    6788:	4620      	mov	r0, r4
    678a:	f017 fc57 	bl	1e03c <net_buf_id>
    678e:	260c      	movs	r6, #12
    6790:	fb06 5000 	mla	r0, r6, r0, r5
    6794:	6843      	ldr	r3, [r0, #4]
    6796:	b16b      	cbz	r3, 67b4 <hci_cmd_done+0xac>
    6798:	f1b8 0f00 	cmp.w	r8, #0
    679c:	d10a      	bne.n	67b4 <hci_cmd_done+0xac>
		struct cmd_state_set *update = cmd(buf)->state;
    679e:	4620      	mov	r0, r4
    67a0:	f017 fc4c 	bl	1e03c <net_buf_id>
    67a4:	fb06 5000 	mla	r0, r6, r0, r5
    67a8:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    67aa:	e9d3 0100 	ldrd	r0, r1, [r3]
    67ae:	7a1a      	ldrb	r2, [r3, #8]
    67b0:	f01e ffc2 	bl	25738 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    67b4:	4620      	mov	r0, r4
    67b6:	f017 fc41 	bl	1e03c <net_buf_id>
    67ba:	260c      	movs	r6, #12
    67bc:	fb06 5000 	mla	r0, r6, r0, r5
    67c0:	6883      	ldr	r3, [r0, #8]
    67c2:	2b00      	cmp	r3, #0
    67c4:	d0c0      	beq.n	6748 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    67c6:	4620      	mov	r0, r4
    67c8:	f017 fc38 	bl	1e03c <net_buf_id>
    67cc:	4370      	muls	r0, r6
    67ce:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    67d2:	4620      	mov	r0, r4
    67d4:	f017 fc32 	bl	1e03c <net_buf_id>
    67d8:	fb06 5500 	mla	r5, r6, r0, r5
    67dc:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    67de:	f01b f95b 	bl	21a98 <z_impl_k_sem_give>
}
    67e2:	e7b1      	b.n	6748 <hci_cmd_done+0x40>
    67e4:	20007610 	.word	0x20007610
    67e8:	00028868 	.word	0x00028868
    67ec:	00028928 	.word	0x00028928
    67f0:	0002ac4d 	.word	0x0002ac4d
    67f4:	200004d8 	.word	0x200004d8
    67f8:	0002ac82 	.word	0x0002ac82

000067fc <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(u8_t role, bt_addr_le_t *peer_addr)
    67fc:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(adv->id, peer_addr,
    67fe:	4c0b      	ldr	r4, [pc, #44]	; (682c <find_pending_connect.part.0+0x30>)
static struct bt_conn *find_pending_connect(u8_t role, bt_addr_le_t *peer_addr)
    6800:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(adv->id, peer_addr,
    6802:	2204      	movs	r2, #4
    6804:	7d20      	ldrb	r0, [r4, #20]
    6806:	f002 fc6f 	bl	90e8 <bt_conn_lookup_state_le>
		if (!conn) {
    680a:	b968      	cbnz	r0, 6828 <find_pending_connect.part.0+0x2c>
						       BT_ADDR_LE_NONE,
    680c:	4b08      	ldr	r3, [pc, #32]	; (6830 <find_pending_connect.part.0+0x34>)
    680e:	6818      	ldr	r0, [r3, #0]
    6810:	889a      	ldrh	r2, [r3, #4]
    6812:	9000      	str	r0, [sp, #0]
    6814:	799b      	ldrb	r3, [r3, #6]
    6816:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(adv->id,
    681a:	7d20      	ldrb	r0, [r4, #20]
						       BT_ADDR_LE_NONE,
    681c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(adv->id,
    6820:	2203      	movs	r2, #3
    6822:	4669      	mov	r1, sp
    6824:	f002 fc60 	bl	90e8 <bt_conn_lookup_state_le>
}
    6828:	b002      	add	sp, #8
    682a:	bd10      	pop	{r4, pc}
    682c:	200067d0 	.word	0x200067d0
    6830:	00028a9c 	.word	0x00028a9c

00006834 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    6834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    6836:	4f0b      	ldr	r7, [pc, #44]	; (6864 <id_find+0x30>)
{
    6838:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    683a:	2500      	movs	r5, #0
    683c:	79fb      	ldrb	r3, [r7, #7]
    683e:	b2ec      	uxtb	r4, r5
    6840:	42a3      	cmp	r3, r4
    6842:	d802      	bhi.n	684a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    6844:	f06f 0401 	mvn.w	r4, #1
    6848:	e009      	b.n	685e <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    684a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    684e:	2207      	movs	r2, #7
    6850:	4439      	add	r1, r7
    6852:	4630      	mov	r0, r6
    6854:	f01e fc0c 	bl	25070 <memcmp>
    6858:	3501      	adds	r5, #1
    685a:	2800      	cmp	r0, #0
    685c:	d1ee      	bne.n	683c <id_find+0x8>
}
    685e:	4620      	mov	r0, r4
    6860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6862:	bf00      	nop
    6864:	200067d0 	.word	0x200067d0

00006868 <hci_tx_thread>:
{
    6868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    686c:	4c4e      	ldr	r4, [pc, #312]	; (69a8 <hci_tx_thread+0x140>)
    686e:	4b4f      	ldr	r3, [pc, #316]	; (69ac <hci_tx_thread+0x144>)
		events[0].state = K_POLL_STATE_NOT_READY;
    6870:	f8df 9140 	ldr.w	r9, [pc, #320]	; 69b4 <hci_tx_thread+0x14c>
		BT_ASSERT(err == 0);
    6874:	f8df a168 	ldr.w	sl, [pc, #360]	; 69e0 <hci_tx_thread+0x178>
    6878:	1ae4      	subs	r4, r4, r3
    687a:	08e4      	lsrs	r4, r4, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    687c:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6880:	484b      	ldr	r0, [pc, #300]	; (69b0 <hci_tx_thread+0x148>)
		events[0].state = K_POLL_STATE_NOT_READY;
    6882:	f36f 3310 	bfc	r3, #12, #5
    6886:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    688a:	f002 fab3 	bl	8df4 <bt_conn_prepare_events>
    688e:	1c47      	adds	r7, r0, #1
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    6890:	4848      	ldr	r0, [pc, #288]	; (69b4 <hci_tx_thread+0x14c>)
    6892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6896:	4639      	mov	r1, r7
    6898:	f01c f9f4 	bl	22c84 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    689c:	b160      	cbz	r0, 68b8 <hci_tx_thread+0x50>
    689e:	4946      	ldr	r1, [pc, #280]	; (69b8 <hci_tx_thread+0x150>)
    68a0:	4846      	ldr	r0, [pc, #280]	; (69bc <hci_tx_thread+0x154>)
    68a2:	f241 4319 	movw	r3, #5145	; 0x1419
    68a6:	4652      	mov	r2, sl
    68a8:	f01c fd0f 	bl	232ca <printk>
    68ac:	4040      	eors	r0, r0
    68ae:	f380 8811 	msr	BASEPRI, r0
    68b2:	f04f 0003 	mov.w	r0, #3
    68b6:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    68b8:	4d41      	ldr	r5, [pc, #260]	; (69c0 <hci_tx_thread+0x158>)
{
    68ba:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 69b4 <hci_tx_thread+0x14c>
    68be:	f105 0bc0 	add.w	fp, r5, #192	; 0xc0
	for (; count; ev++, count--) {
    68c2:	b917      	cbnz	r7, 68ca <hci_tx_thread+0x62>
	z_impl_k_yield();
    68c4:	f01a ff62 	bl	2178c <z_impl_k_yield>
}
    68c8:	e7d8      	b.n	687c <hci_tx_thread+0x14>
		switch (ev->state) {
    68ca:	f8d8 100c 	ldr.w	r1, [r8, #12]
    68ce:	f3c1 3104 	ubfx	r1, r1, #12, #5
    68d2:	2901      	cmp	r1, #1
    68d4:	d955      	bls.n	6982 <hci_tx_thread+0x11a>
    68d6:	2904      	cmp	r1, #4
    68d8:	d15f      	bne.n	699a <hci_tx_thread+0x132>
			if (ev->tag == BT_EVENT_CMD_TX) {
    68da:	f898 100c 	ldrb.w	r1, [r8, #12]
    68de:	2900      	cmp	r1, #0
    68e0:	d153      	bne.n	698a <hci_tx_thread+0x122>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    68e2:	4838      	ldr	r0, [pc, #224]	; (69c4 <hci_tx_thread+0x15c>)
    68e4:	f017 fc9c 	bl	1e220 <net_buf_get>
	BT_ASSERT(buf);
    68e8:	4606      	mov	r6, r0
    68ea:	b960      	cbnz	r0, 6906 <hci_tx_thread+0x9e>
    68ec:	4936      	ldr	r1, [pc, #216]	; (69c8 <hci_tx_thread+0x160>)
    68ee:	4833      	ldr	r0, [pc, #204]	; (69bc <hci_tx_thread+0x154>)
    68f0:	f241 33ba 	movw	r3, #5050	; 0x13ba
    68f4:	4652      	mov	r2, sl
    68f6:	f01c fce8 	bl	232ca <printk>
    68fa:	4040      	eors	r0, r0
    68fc:	f380 8811 	msr	BASEPRI, r0
    6900:	f04f 0003 	mov.w	r0, #3
    6904:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    6906:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    690a:	4658      	mov	r0, fp
    690c:	f01b f908 	bl	21b20 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    6910:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
    6914:	b163      	cbz	r3, 6930 <hci_tx_thread+0xc8>
		BT_ERR("Uncleared pending sent_cmd");
    6916:	01a1      	lsls	r1, r4, #6
    6918:	482c      	ldr	r0, [pc, #176]	; (69cc <hci_tx_thread+0x164>)
    691a:	f041 0101 	orr.w	r1, r1, #1
    691e:	f01c fd45 	bl	233ac <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    6922:	f8d5 00d8 	ldr.w	r0, [r5, #216]	; 0xd8
    6926:	f017 fdb3 	bl	1e490 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    692a:	2300      	movs	r3, #0
    692c:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
	bt_dev.sent_cmd = net_buf_ref(buf);
    6930:	4630      	mov	r0, r6
    6932:	f017 fdf5 	bl	1e520 <net_buf_ref>
    6936:	f8c5 00d8 	str.w	r0, [r5, #216]	; 0xd8
		return bt_hci_ecc_send(buf);
    693a:	4630      	mov	r0, r6
    693c:	f7ff fb2a 	bl	5f94 <bt_hci_ecc_send>
	if (err) {
    6940:	4601      	mov	r1, r0
    6942:	b1f0      	cbz	r0, 6982 <hci_tx_thread+0x11a>
		BT_ERR("Unable to send to driver (err %d)", err);
    6944:	01a2      	lsls	r2, r4, #6
    6946:	4822      	ldr	r0, [pc, #136]	; (69d0 <hci_tx_thread+0x168>)
    6948:	f042 0201 	orr.w	r2, r2, #1
    694c:	f01c fd3b 	bl	233c6 <log_1>
	z_impl_k_sem_give(sem);
    6950:	4820      	ldr	r0, [pc, #128]	; (69d4 <hci_tx_thread+0x16c>)
    6952:	f01b f8a1 	bl	21a98 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    6956:	4630      	mov	r0, r6
    6958:	f017 fb70 	bl	1e03c <net_buf_id>
    695c:	4b1e      	ldr	r3, [pc, #120]	; (69d8 <hci_tx_thread+0x170>)
    695e:	220c      	movs	r2, #12
    6960:	fb02 3000 	mla	r0, r2, r0, r3
    6964:	211f      	movs	r1, #31
    6966:	8840      	ldrh	r0, [r0, #2]
    6968:	2200      	movs	r2, #0
    696a:	f7ff fecd 	bl	6708 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    696e:	f8d5 00d8 	ldr.w	r0, [r5, #216]	; 0xd8
    6972:	f017 fd8d 	bl	1e490 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6976:	2300      	movs	r3, #0
		net_buf_unref(buf);
    6978:	4630      	mov	r0, r6
		bt_dev.sent_cmd = NULL;
    697a:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
		net_buf_unref(buf);
    697e:	f017 fd87 	bl	1e490 <net_buf_unref>
	for (; count; ev++, count--) {
    6982:	f108 0814 	add.w	r8, r8, #20
    6986:	3f01      	subs	r7, #1
    6988:	e79b      	b.n	68c2 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    698a:	2901      	cmp	r1, #1
    698c:	d1f9      	bne.n	6982 <hci_tx_thread+0x11a>
					conn = CONTAINER_OF(ev->fifo,
    698e:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    6992:	3834      	subs	r0, #52	; 0x34
    6994:	f002 fcd0 	bl	9338 <bt_conn_process_tx>
    6998:	e7f3      	b.n	6982 <hci_tx_thread+0x11a>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    699a:	01a2      	lsls	r2, r4, #6
    699c:	480f      	ldr	r0, [pc, #60]	; (69dc <hci_tx_thread+0x174>)
    699e:	f042 0202 	orr.w	r2, r2, #2
    69a2:	f01c fd10 	bl	233c6 <log_1>
    69a6:	e7ec      	b.n	6982 <hci_tx_thread+0x11a>
    69a8:	00028928 	.word	0x00028928
    69ac:	00028868 	.word	0x00028868
    69b0:	20006a48 	.word	0x20006a48
    69b4:	20006a34 	.word	0x20006a34
    69b8:	0002ace9 	.word	0x0002ace9
    69bc:	000297e6 	.word	0x000297e6
    69c0:	200067d0 	.word	0x200067d0
    69c4:	200068ac 	.word	0x200068ac
    69c8:	0002f7ee 	.word	0x0002f7ee
    69cc:	0002acf2 	.word	0x0002acf2
    69d0:	0002ad0d 	.word	0x0002ad0d
    69d4:	20006890 	.word	0x20006890
    69d8:	200004d8 	.word	0x200004d8
    69dc:	0002ad2f 	.word	0x0002ad2f
    69e0:	0002acb5 	.word	0x0002acb5

000069e4 <hci_num_completed_packets>:
{
    69e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69e8:	4b46      	ldr	r3, [pc, #280]	; (6b04 <hci_num_completed_packets+0x120>)
    69ea:	4d47      	ldr	r5, [pc, #284]	; (6b08 <hci_num_completed_packets+0x124>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    69ec:	f8d0 8008 	ldr.w	r8, [r0, #8]
    69f0:	f8df a120 	ldr.w	sl, [pc, #288]	; 6b14 <hci_num_completed_packets+0x130>
    69f4:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    69f6:	2600      	movs	r6, #0
    69f8:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    69fa:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    69fc:	f898 3000 	ldrb.w	r3, [r8]
    6a00:	429e      	cmp	r6, r3
    6a02:	db02      	blt.n	6a0a <hci_num_completed_packets+0x26>
}
    6a04:	b003      	add	sp, #12
    6a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    6a0a:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    6a0e:	f8b3 1001 	ldrh.w	r1, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    6a12:	f8b3 7003 	ldrh.w	r7, [r3, #3]
	__asm__ volatile(
    6a16:	f04f 0320 	mov.w	r3, #32
    6a1a:	f3ef 8b11 	mrs	fp, BASEPRI
    6a1e:	f383 8811 	msr	BASEPRI, r3
    6a22:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    6a26:	4608      	mov	r0, r1
    6a28:	9101      	str	r1, [sp, #4]
    6a2a:	f002 fb27 	bl	907c <bt_conn_lookup_handle>
		if (!conn) {
    6a2e:	9901      	ldr	r1, [sp, #4]
    6a30:	4604      	mov	r4, r0
    6a32:	b958      	cbnz	r0, 6a4c <hci_num_completed_packets+0x68>
	__asm__ volatile(
    6a34:	f38b 8811 	msr	BASEPRI, fp
    6a38:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
    6a3c:	01aa      	lsls	r2, r5, #6
    6a3e:	4833      	ldr	r0, [pc, #204]	; (6b0c <hci_num_completed_packets+0x128>)
    6a40:	f042 0201 	orr.w	r2, r2, #1
    6a44:	f01c fcbf 	bl	233c6 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    6a48:	3601      	adds	r6, #1
    6a4a:	e7d7      	b.n	69fc <hci_num_completed_packets+0x18>
    6a4c:	f38b 8811 	msr	BASEPRI, fp
    6a50:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6a54:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    6a58:	b357      	cbz	r7, 6ab0 <hci_num_completed_packets+0xcc>
	__asm__ volatile(
    6a5a:	f04f 0320 	mov.w	r3, #32
    6a5e:	f3ef 8211 	mrs	r2, BASEPRI
    6a62:	f383 8811 	msr	BASEPRI, r3
    6a66:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    6a6a:	69e3      	ldr	r3, [r4, #28]
    6a6c:	b16b      	cbz	r3, 6a8a <hci_num_completed_packets+0xa6>
				conn->pending_no_cb--;
    6a6e:	3b01      	subs	r3, #1
    6a70:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    6a72:	f382 8811 	msr	BASEPRI, r2
    6a76:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    6a7a:	4620      	mov	r0, r4
    6a7c:	f002 f856 	bl	8b2c <bt_conn_get_pkts>
    6a80:	3f01      	subs	r7, #1
    6a82:	f01b f809 	bl	21a98 <z_impl_k_sem_give>
    6a86:	b2bf      	uxth	r7, r7
    6a88:	e7e6      	b.n	6a58 <hci_num_completed_packets+0x74>
Z_GENLIST_IS_EMPTY(slist)
    6a8a:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
    6a8c:	b12b      	cbz	r3, 6a9a <hci_num_completed_packets+0xb6>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6a8e:	69a1      	ldr	r1, [r4, #24]
    6a90:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    6a92:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6a94:	428b      	cmp	r3, r1
	list->tail = node;
    6a96:	bf08      	it	eq
    6a98:	61a0      	streq	r0, [r4, #24]
    6a9a:	f382 8811 	msr	BASEPRI, r2
    6a9e:	f3bf 8f6f 	isb	sy
			if (!node) {
    6aa2:	b94b      	cbnz	r3, 6ab8 <hci_num_completed_packets+0xd4>
				BT_ERR("packets count mismatch");
    6aa4:	01a9      	lsls	r1, r5, #6
    6aa6:	481a      	ldr	r0, [pc, #104]	; (6b10 <hci_num_completed_packets+0x12c>)
    6aa8:	f041 0101 	orr.w	r1, r1, #1
    6aac:	f01c fc7e 	bl	233ac <log_0>
		bt_conn_unref(conn);
    6ab0:	4620      	mov	r0, r4
    6ab2:	f01e ff74 	bl	2599e <bt_conn_unref>
    6ab6:	e7c7      	b.n	6a48 <hci_num_completed_packets+0x64>
	__asm__ volatile(
    6ab8:	f04f 0220 	mov.w	r2, #32
    6abc:	f3ef 8111 	mrs	r1, BASEPRI
    6ac0:	f382 8811 	msr	BASEPRI, r2
    6ac4:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    6ac8:	68da      	ldr	r2, [r3, #12]
    6aca:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    6acc:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    6ad0:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    6ad2:	f8c3 900c 	str.w	r9, [r3, #12]
    6ad6:	b98a      	cbnz	r2, 6afc <hci_num_completed_packets+0x118>
	list->head = node;
    6ad8:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    6adc:	f381 8811 	msr	BASEPRI, r1
    6ae0:	f3bf 8f6f 	isb	sy
    6ae4:	2100      	movs	r1, #0
    6ae6:	f104 0030 	add.w	r0, r4, #48	; 0x30
    6aea:	f01e fe0b 	bl	25704 <atomic_test_and_set_bit>
    6aee:	2800      	cmp	r0, #0
    6af0:	d1c3      	bne.n	6a7a <hci_num_completed_packets+0x96>
		k_queue_append(&work_q->queue, work);
    6af2:	4659      	mov	r1, fp
    6af4:	4650      	mov	r0, sl
    6af6:	f021 fbf3 	bl	282e0 <k_queue_append>
    6afa:	e7be      	b.n	6a7a <hci_num_completed_packets+0x96>
	parent->next = child;
    6afc:	6013      	str	r3, [r2, #0]
	list->tail = node;
    6afe:	6263      	str	r3, [r4, #36]	; 0x24
}
    6b00:	e7ec      	b.n	6adc <hci_num_completed_packets+0xf8>
    6b02:	bf00      	nop
    6b04:	00028868 	.word	0x00028868
    6b08:	00028928 	.word	0x00028928
    6b0c:	0002ad50 	.word	0x0002ad50
    6b10:	0002ad6c 	.word	0x0002ad6c
    6b14:	20001c08 	.word	0x20001c08

00006b18 <le_adv_report>:
{
    6b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t num_reports = net_buf_pull_u8(buf);
    6b1c:	f100 0708 	add.w	r7, r0, #8
{
    6b20:	b08b      	sub	sp, #44	; 0x2c
    6b22:	4604      	mov	r4, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    6b24:	4638      	mov	r0, r7
    6b26:	f021 f9b1 	bl	27e8c <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    6b2a:	f8df a154 	ldr.w	sl, [pc, #340]	; 6c80 <le_adv_report+0x168>
	u8_t num_reports = net_buf_pull_u8(buf);
    6b2e:	9000      	str	r0, [sp, #0]
	while (num_reports--) {
    6b30:	9b00      	ldr	r3, [sp, #0]
    6b32:	b163      	cbz	r3, 6b4e <le_adv_report+0x36>
		if (buf->len < sizeof(*evt)) {
    6b34:	89a3      	ldrh	r3, [r4, #12]
    6b36:	2b08      	cmp	r3, #8
    6b38:	d80c      	bhi.n	6b54 <le_adv_report+0x3c>
    6b3a:	494b      	ldr	r1, [pc, #300]	; (6c68 <le_adv_report+0x150>)
    6b3c:	4b4b      	ldr	r3, [pc, #300]	; (6c6c <le_adv_report+0x154>)
			BT_ERR("Unexpected end of buffer");
    6b3e:	484c      	ldr	r0, [pc, #304]	; (6c70 <le_adv_report+0x158>)
    6b40:	1ac9      	subs	r1, r1, r3
    6b42:	08c9      	lsrs	r1, r1, #3
    6b44:	0189      	lsls	r1, r1, #6
    6b46:	f041 0101 	orr.w	r1, r1, #1
    6b4a:	f01c fc2f 	bl	233ac <log_0>
}
    6b4e:	b00b      	add	sp, #44	; 0x2c
    6b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    6b54:	2109      	movs	r1, #9
    6b56:	4638      	mov	r0, r7
    6b58:	f017 fd3e 	bl	1e5d8 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    6b5c:	f890 9008 	ldrb.w	r9, [r0, #8]
    6b60:	eb00 0309 	add.w	r3, r0, r9
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    6b64:	1c41      	adds	r1, r0, #1
		adv_info.rssi = evt->data[evt->length];
    6b66:	7a5b      	ldrb	r3, [r3, #9]
    6b68:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    6b6c:	2301      	movs	r3, #1
    6b6e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    6b72:	237f      	movs	r3, #127	; 0x7f
    6b74:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		adv_info.sid = BT_GAP_SID_INVALID;
    6b78:	23ff      	movs	r3, #255	; 0xff
    6b7a:	f88d 3020 	strb.w	r3, [sp, #32]
		adv_info.adv_type = evt->evt_type;
    6b7e:	7803      	ldrb	r3, [r0, #0]
    6b80:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    6b84:	2b04      	cmp	r3, #4
    6b86:	bf96      	itet	ls
    6b88:	4a3a      	ldrls	r2, [pc, #232]	; (6c74 <le_adv_report+0x15c>)
    6b8a:	2300      	movhi	r3, #0
    6b8c:	5cd3      	ldrbls	r3, [r2, r3]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    6b8e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    6b92:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6b94:	4838      	ldr	r0, [pc, #224]	; (6c78 <le_adv_report+0x160>)
    6b96:	f01e fd9d 	bl	256d4 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    6b9a:	0502      	lsls	r2, r0, #20
    6b9c:	d50d      	bpl.n	6bba <le_adv_report+0xa2>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    6b9e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    6ba2:	075b      	lsls	r3, r3, #29
    6ba4:	d509      	bpl.n	6bba <le_adv_report+0xa2>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    6ba6:	7a31      	ldrb	r1, [r6, #8]
    6ba8:	4638      	mov	r0, r7
    6baa:	3101      	adds	r1, #1
    6bac:	f017 fcf4 	bl	1e598 <net_buf_simple_pull>
    6bb0:	9b00      	ldr	r3, [sp, #0]
    6bb2:	1e58      	subs	r0, r3, #1
    6bb4:	b2c3      	uxtb	r3, r0
    6bb6:	9300      	str	r3, [sp, #0]
    6bb8:	e7ba      	b.n	6b30 <le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    6bba:	7873      	ldrb	r3, [r6, #1]
    6bbc:	1e9a      	subs	r2, r3, #2
    6bbe:	2a01      	cmp	r2, #1
    6bc0:	f10d 0b0c 	add.w	fp, sp, #12
    6bc4:	d843      	bhi.n	6c4e <le_adv_report+0x136>
		bt_addr_le_copy(&id_addr, addr);
    6bc6:	4658      	mov	r0, fp
    6bc8:	f01e fd8a 	bl	256e0 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    6bcc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6bd0:	3b02      	subs	r3, #2
    6bd2:	f88d 300c 	strb.w	r3, [sp, #12]
	if (scan_dev_found_cb) {
    6bd6:	f8da 3000 	ldr.w	r3, [sl]
	info->addr = &id_addr;
    6bda:	f8cd b01c 	str.w	fp, [sp, #28]
	if (scan_dev_found_cb) {
    6bde:	b1b3      	cbz	r3, 6c0e <le_adv_report+0xf6>
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    6be0:	4638      	mov	r0, r7
    6be2:	f021 f977 	bl	27ed4 <net_buf_simple_headroom>
	state->len = buf->len;
    6be6:	89a3      	ldrh	r3, [r4, #12]
    6be8:	9301      	str	r3, [sp, #4]
	state->offset = net_buf_simple_headroom(buf);
    6bea:	4680      	mov	r8, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    6bec:	463b      	mov	r3, r7
    6bee:	4658      	mov	r0, fp
    6bf0:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    6bf4:	f99d 1021 	ldrsb.w	r1, [sp, #33]	; 0x21
    6bf8:	f8da 5000 	ldr.w	r5, [sl]
		buf->len = len;
    6bfc:	f8a4 900c 	strh.w	r9, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    6c00:	47a8      	blx	r5
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    6c02:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6c04:	9b01      	ldr	r3, [sp, #4]
    6c06:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6c08:	fa10 f088 	uxtah	r0, r0, r8
    6c0c:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    6c0e:	4b1b      	ldr	r3, [pc, #108]	; (6c7c <le_adv_report+0x164>)
    6c10:	681d      	ldr	r5, [r3, #0]
    6c12:	2d00      	cmp	r5, #0
    6c14:	d0c7      	beq.n	6ba6 <le_adv_report+0x8e>
    6c16:	3d08      	subs	r5, #8
    6c18:	2d00      	cmp	r5, #0
    6c1a:	d0c4      	beq.n	6ba6 <le_adv_report+0x8e>
	state->offset = net_buf_simple_headroom(buf);
    6c1c:	4638      	mov	r0, r7
    6c1e:	f021 f959 	bl	27ed4 <net_buf_simple_headroom>
		listener->recv(info, &buf->b);
    6c22:	46ab      	mov	fp, r5
	state->len = buf->len;
    6c24:	89a3      	ldrh	r3, [r4, #12]
    6c26:	f85b 2b08 	ldr.w	r2, [fp], #8
		buf->len = len;
    6c2a:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    6c2e:	4680      	mov	r8, r0
		listener->recv(info, &buf->b);
    6c30:	4639      	mov	r1, r7
    6c32:	a807      	add	r0, sp, #28
	state->len = buf->len;
    6c34:	9301      	str	r3, [sp, #4]
    6c36:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    6c38:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6c3a:	9b01      	ldr	r3, [sp, #4]
    6c3c:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6c3e:	fa10 f088 	uxtah	r0, r0, r8
    6c42:	60a0      	str	r0, [r4, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
    6c44:	f1bb 0f00 	cmp.w	fp, #0
    6c48:	d0ad      	beq.n	6ba6 <le_adv_report+0x8e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6c4a:	68ad      	ldr	r5, [r5, #8]
    6c4c:	e7e1      	b.n	6c12 <le_adv_report+0xfa>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    6c4e:	2bff      	cmp	r3, #255	; 0xff
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    6c50:	bf04      	itt	eq
    6c52:	2300      	moveq	r3, #0
    6c54:	a905      	addeq	r1, sp, #20
		bt_addr_le_copy(&id_addr,
    6c56:	4658      	mov	r0, fp
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    6c58:	bf04      	itt	eq
    6c5a:	9305      	streq	r3, [sp, #20]
    6c5c:	f8cd 3017 	streq.w	r3, [sp, #23]
		bt_addr_le_copy(&id_addr,
    6c60:	f01e fd3e 	bl	256e0 <bt_addr_le_copy>
    6c64:	e7b7      	b.n	6bd6 <le_adv_report+0xbe>
    6c66:	bf00      	nop
    6c68:	00028928 	.word	0x00028928
    6c6c:	00028868 	.word	0x00028868
    6c70:	0002ad83 	.word	0x0002ad83
    6c74:	0002b2d8 	.word	0x0002b2d8
    6c78:	2000685c 	.word	0x2000685c
    6c7c:	200004fc 	.word	0x200004fc
    6c80:	20000504 	.word	0x20000504

00006c84 <hci_cmd_status>:
{
    6c84:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6c86:	2104      	movs	r1, #4
{
    6c88:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6c8a:	3008      	adds	r0, #8
    6c8c:	f017 fca4 	bl	1e5d8 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    6c90:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    6c92:	7801      	ldrb	r1, [r0, #0]
    6c94:	8840      	ldrh	r0, [r0, #2]
    6c96:	4622      	mov	r2, r4
    6c98:	f7ff fd36 	bl	6708 <hci_cmd_done>
	if (ncmd) {
    6c9c:	b125      	cbz	r5, 6ca8 <hci_cmd_status+0x24>
    6c9e:	4803      	ldr	r0, [pc, #12]	; (6cac <hci_cmd_status+0x28>)
}
    6ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6ca4:	f01a bef8 	b.w	21a98 <z_impl_k_sem_give>
    6ca8:	bd38      	pop	{r3, r4, r5, pc}
    6caa:	bf00      	nop
    6cac:	20006890 	.word	0x20006890

00006cb0 <valid_adv_param>:
		return false;
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param, bool dir_adv)
{
    6cb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (param->id >= bt_dev.id_count ||
    6cb2:	4d19      	ldr	r5, [pc, #100]	; (6d18 <valid_adv_param+0x68>)
    6cb4:	7803      	ldrb	r3, [r0, #0]
    6cb6:	79ea      	ldrb	r2, [r5, #7]
    6cb8:	429a      	cmp	r2, r3
{
    6cba:	4606      	mov	r6, r0
    6cbc:	460c      	mov	r4, r1
	if (param->id >= bt_dev.id_count ||
    6cbe:	d801      	bhi.n	6cc4 <valid_adv_param+0x14>

	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) || !dir_adv) {
		if (param->interval_min > param->interval_max ||
		    param->interval_min < 0x0020 ||
		    param->interval_max > 0x4000) {
			return false;
    6cc0:	2400      	movs	r4, #0
    6cc2:	e025      	b.n	6d10 <valid_adv_param+0x60>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    6cc4:	2200      	movs	r2, #0
    6cc6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    6cca:	9200      	str	r2, [sp, #0]
    6ccc:	4669      	mov	r1, sp
    6cce:	f8cd 2003 	str.w	r2, [sp, #3]
    6cd2:	18e8      	adds	r0, r5, r3
    6cd4:	2207      	movs	r2, #7
    6cd6:	f01e f9cb 	bl	25070 <memcmp>
	if (param->id >= bt_dev.id_count ||
    6cda:	2800      	cmp	r0, #0
    6cdc:	d0f0      	beq.n	6cc0 <valid_adv_param+0x10>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6cde:	6873      	ldr	r3, [r6, #4]
    6ce0:	f013 0201 	ands.w	r2, r3, #1
    6ce4:	d106      	bne.n	6cf4 <valid_adv_param+0x44>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    6ce6:	f895 102b 	ldrb.w	r1, [r5, #43]	; 0x2b
    6cea:	2908      	cmp	r1, #8
    6cec:	d802      	bhi.n	6cf4 <valid_adv_param+0x44>
    6cee:	68b1      	ldr	r1, [r6, #8]
    6cf0:	299f      	cmp	r1, #159	; 0x9f
    6cf2:	d9e5      	bls.n	6cc0 <valid_adv_param+0x10>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) || !dir_adv) {
    6cf4:	06db      	lsls	r3, r3, #27
    6cf6:	d400      	bmi.n	6cfa <valid_adv_param+0x4a>
    6cf8:	b954      	cbnz	r4, 6d10 <valid_adv_param+0x60>
		if (param->interval_min > param->interval_max ||
    6cfa:	e9d6 3402 	ldrd	r3, r4, [r6, #8]
    6cfe:	42a3      	cmp	r3, r4
    6d00:	d8de      	bhi.n	6cc0 <valid_adv_param+0x10>
    6d02:	2b1f      	cmp	r3, #31
    6d04:	d9dc      	bls.n	6cc0 <valid_adv_param+0x10>
		    param->interval_min < 0x0020 ||
    6d06:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
    6d0a:	bf8c      	ite	hi
    6d0c:	2400      	movhi	r4, #0
    6d0e:	2401      	movls	r4, #1
		}
	}

	return true;
}
    6d10:	4620      	mov	r0, r4
    6d12:	b002      	add	sp, #8
    6d14:	bd70      	pop	{r4, r5, r6, pc}
    6d16:	bf00      	nop
    6d18:	200067d0 	.word	0x200067d0

00006d1c <hci_cmd_complete>:
{
    6d1c:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6d1e:	2103      	movs	r1, #3
{
    6d20:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6d22:	3008      	adds	r0, #8
    6d24:	f017 fc58 	bl	1e5d8 <net_buf_simple_pull_mem>
	status = buf->data[0];
    6d28:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    6d2a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    6d2c:	7819      	ldrb	r1, [r3, #0]
    6d2e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    6d32:	4622      	mov	r2, r4
    6d34:	f7ff fce8 	bl	6708 <hci_cmd_done>
	if (ncmd) {
    6d38:	b125      	cbz	r5, 6d44 <hci_cmd_complete+0x28>
    6d3a:	4803      	ldr	r0, [pc, #12]	; (6d48 <hci_cmd_complete+0x2c>)
}
    6d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6d40:	f01a beaa 	b.w	21a98 <z_impl_k_sem_give>
    6d44:	bd38      	pop	{r3, r4, r5, pc}
    6d46:	bf00      	nop
    6d48:	20006890 	.word	0x20006890

00006d4c <bt_hci_cmd_create>:
{
    6d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d50:	4605      	mov	r5, r0
    6d52:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    6d54:	481c      	ldr	r0, [pc, #112]	; (6dc8 <bt_hci_cmd_create+0x7c>)
    6d56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6d5a:	f021 f86f 	bl	27e3c <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    6d5e:	4604      	mov	r4, r0
    6d60:	b958      	cbnz	r0, 6d7a <bt_hci_cmd_create+0x2e>
    6d62:	491a      	ldr	r1, [pc, #104]	; (6dcc <bt_hci_cmd_create+0x80>)
    6d64:	481a      	ldr	r0, [pc, #104]	; (6dd0 <bt_hci_cmd_create+0x84>)
    6d66:	4a1b      	ldr	r2, [pc, #108]	; (6dd4 <bt_hci_cmd_create+0x88>)
    6d68:	f240 1325 	movw	r3, #293	; 0x125
    6d6c:	f01c faad 	bl	232ca <printk>
    6d70:	4818      	ldr	r0, [pc, #96]	; (6dd4 <bt_hci_cmd_create+0x88>)
    6d72:	f240 1125 	movw	r1, #293	; 0x125
    6d76:	f01c faeb 	bl	23350 <assert_post_action>
	net_buf_reserve(buf, BT_BUF_RESERVE);
    6d7a:	f104 0b08 	add.w	fp, r4, #8
    6d7e:	2100      	movs	r1, #0
	*(u8_t *)net_buf_user_data(buf) = type;
    6d80:	2700      	movs	r7, #0
    6d82:	4658      	mov	r0, fp
    6d84:	f017 fa80 	bl	1e288 <net_buf_simple_reserve>
    6d88:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    6d8a:	4620      	mov	r0, r4
    6d8c:	f017 f956 	bl	1e03c <net_buf_id>
    6d90:	f8df 8044 	ldr.w	r8, [pc, #68]	; 6dd8 <bt_hci_cmd_create+0x8c>
    6d94:	f04f 0a0c 	mov.w	sl, #12
    6d98:	fb0a 8000 	mla	r0, sl, r0, r8
    6d9c:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    6d9e:	4620      	mov	r0, r4
    6da0:	f017 f94c 	bl	1e03c <net_buf_id>
    6da4:	fb0a 8000 	mla	r0, sl, r0, r8
    6da8:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    6daa:	4620      	mov	r0, r4
    6dac:	f017 f946 	bl	1e03c <net_buf_id>
    6db0:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
    6db4:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    6db6:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    6db8:	4658      	mov	r0, fp
    6dba:	f017 fc2f 	bl	1e61c <net_buf_simple_add>
	hdr->param_len = param_len;
    6dbe:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    6dc0:	8005      	strh	r5, [r0, #0]
}
    6dc2:	4620      	mov	r0, r4
    6dc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6dc8:	20007610 	.word	0x20007610
    6dcc:	0002f7ee 	.word	0x0002f7ee
    6dd0:	000297e6 	.word	0x000297e6
    6dd4:	0002acb5 	.word	0x0002acb5
    6dd8:	200004d8 	.word	0x200004d8

00006ddc <bt_hci_cmd_send>:
{
    6ddc:	b538      	push	{r3, r4, r5, lr}
    6dde:	4605      	mov	r5, r0
	if (!buf) {
    6de0:	460c      	mov	r4, r1
    6de2:	b919      	cbnz	r1, 6dec <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    6de4:	f7ff ffb2 	bl	6d4c <bt_hci_cmd_create>
		if (!buf) {
    6de8:	4604      	mov	r4, r0
    6dea:	b1f0      	cbz	r0, 6e2a <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    6dec:	f640 4335 	movw	r3, #3125	; 0xc35
    6df0:	429d      	cmp	r5, r3
    6df2:	d114      	bne.n	6e1e <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    6df4:	4620      	mov	r0, r4
    6df6:	f7ff f8cd 	bl	5f94 <bt_hci_ecc_send>
		if (err) {
    6dfa:	4605      	mov	r5, r0
    6dfc:	b168      	cbz	r0, 6e1a <bt_hci_cmd_send+0x3e>
    6dfe:	4b0c      	ldr	r3, [pc, #48]	; (6e30 <bt_hci_cmd_send+0x54>)
    6e00:	4a0c      	ldr	r2, [pc, #48]	; (6e34 <bt_hci_cmd_send+0x58>)
    6e02:	1ad2      	subs	r2, r2, r3
    6e04:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    6e06:	0192      	lsls	r2, r2, #6
    6e08:	4601      	mov	r1, r0
    6e0a:	f042 0201 	orr.w	r2, r2, #1
    6e0e:	480a      	ldr	r0, [pc, #40]	; (6e38 <bt_hci_cmd_send+0x5c>)
    6e10:	f01c fad9 	bl	233c6 <log_1>
			net_buf_unref(buf);
    6e14:	4620      	mov	r0, r4
    6e16:	f017 fb3b 	bl	1e490 <net_buf_unref>
}
    6e1a:	4628      	mov	r0, r5
    6e1c:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    6e1e:	4807      	ldr	r0, [pc, #28]	; (6e3c <bt_hci_cmd_send+0x60>)
    6e20:	4621      	mov	r1, r4
    6e22:	f017 fb01 	bl	1e428 <net_buf_put>
	return 0;
    6e26:	2500      	movs	r5, #0
    6e28:	e7f7      	b.n	6e1a <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    6e2a:	f06f 0536 	mvn.w	r5, #54	; 0x36
    6e2e:	e7f4      	b.n	6e1a <bt_hci_cmd_send+0x3e>
    6e30:	00028868 	.word	0x00028868
    6e34:	00028928 	.word	0x00028928
    6e38:	0002ad0d 	.word	0x0002ad0d
    6e3c:	200068ac 	.word	0x200068ac

00006e40 <le_conn_param_neg_reply>:
{
    6e40:	b570      	push	{r4, r5, r6, lr}
    6e42:	4606      	mov	r6, r0
    6e44:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    6e46:	f242 0021 	movw	r0, #8225	; 0x2021
    6e4a:	2103      	movs	r1, #3
    6e4c:	f7ff ff7e 	bl	6d4c <bt_hci_cmd_create>
	if (!buf) {
    6e50:	4604      	mov	r4, r0
    6e52:	b958      	cbnz	r0, 6e6c <le_conn_param_neg_reply+0x2c>
    6e54:	490c      	ldr	r1, [pc, #48]	; (6e88 <le_conn_param_neg_reply+0x48>)
    6e56:	4b0d      	ldr	r3, [pc, #52]	; (6e8c <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    6e58:	480d      	ldr	r0, [pc, #52]	; (6e90 <le_conn_param_neg_reply+0x50>)
    6e5a:	1ac9      	subs	r1, r1, r3
    6e5c:	08c9      	lsrs	r1, r1, #3
    6e5e:	0189      	lsls	r1, r1, #6
}
    6e60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    6e64:	f041 0101 	orr.w	r1, r1, #1
    6e68:	f01c baa0 	b.w	233ac <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    6e6c:	2103      	movs	r1, #3
    6e6e:	3008      	adds	r0, #8
    6e70:	f017 fbd4 	bl	1e61c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    6e74:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    6e76:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    6e78:	4621      	mov	r1, r4
    6e7a:	f242 0021 	movw	r0, #8225	; 0x2021
}
    6e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    6e82:	f7ff bfab 	b.w	6ddc <bt_hci_cmd_send>
    6e86:	bf00      	nop
    6e88:	00028928 	.word	0x00028928
    6e8c:	00028868 	.word	0x00028868
    6e90:	0002ad9c 	.word	0x0002ad9c

00006e94 <le_conn_param_req>:
{
    6e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    6e96:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    6e98:	78d9      	ldrb	r1, [r3, #3]
    6e9a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    6e9c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    6e9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6ea2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    6ea6:	7959      	ldrb	r1, [r3, #5]
    6ea8:	791a      	ldrb	r2, [r3, #4]
    6eaa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6eae:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    6eb2:	799a      	ldrb	r2, [r3, #6]
    6eb4:	79d9      	ldrb	r1, [r3, #7]
    6eb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6eba:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6ebe:	7a1a      	ldrb	r2, [r3, #8]
    6ec0:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    6ec2:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6ec4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    6ec8:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6eca:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    6ece:	f002 f8d5 	bl	907c <bt_conn_lookup_handle>
	if (!conn) {
    6ed2:	4606      	mov	r6, r0
    6ed4:	b980      	cbnz	r0, 6ef8 <le_conn_param_req+0x64>
    6ed6:	4b20      	ldr	r3, [pc, #128]	; (6f58 <le_conn_param_req+0xc4>)
    6ed8:	4a20      	ldr	r2, [pc, #128]	; (6f5c <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6eda:	4821      	ldr	r0, [pc, #132]	; (6f60 <le_conn_param_req+0xcc>)
    6edc:	1ad2      	subs	r2, r2, r3
    6ede:	08d2      	lsrs	r2, r2, #3
    6ee0:	0192      	lsls	r2, r2, #6
    6ee2:	4621      	mov	r1, r4
    6ee4:	f042 0201 	orr.w	r2, r2, #1
    6ee8:	f01c fa6d 	bl	233c6 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    6eec:	2102      	movs	r1, #2
    6eee:	4620      	mov	r0, r4
    6ef0:	f7ff ffa6 	bl	6e40 <le_conn_param_neg_reply>
}
    6ef4:	b003      	add	sp, #12
    6ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    6ef8:	4669      	mov	r1, sp
    6efa:	f001 fe4f 	bl	8b9c <le_param_req>
    6efe:	b938      	cbnz	r0, 6f10 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    6f00:	211e      	movs	r1, #30
    6f02:	4620      	mov	r0, r4
    6f04:	f7ff ff9c 	bl	6e40 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    6f08:	4630      	mov	r0, r6
    6f0a:	f01e fd48 	bl	2599e <bt_conn_unref>
    6f0e:	e7f1      	b.n	6ef4 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    6f10:	210e      	movs	r1, #14
    6f12:	f242 0020 	movw	r0, #8224	; 0x2020
    6f16:	f7ff ff19 	bl	6d4c <bt_hci_cmd_create>
	if (!buf) {
    6f1a:	4605      	mov	r5, r0
    6f1c:	2800      	cmp	r0, #0
    6f1e:	d0f3      	beq.n	6f08 <le_conn_param_req+0x74>
	cp = net_buf_add(buf, sizeof(*cp));
    6f20:	210e      	movs	r1, #14
    6f22:	3008      	adds	r0, #8
    6f24:	f017 fb7a 	bl	1e61c <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    6f28:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    6f2a:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    6f2c:	2100      	movs	r1, #0
    6f2e:	f01e f8da 	bl	250e6 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    6f32:	f8bd 3000 	ldrh.w	r3, [sp]
    6f36:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    6f38:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    6f3c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    6f3e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6f42:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    6f44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    6f48:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    6f4a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    6f4c:	4629      	mov	r1, r5
    6f4e:	f242 0020 	movw	r0, #8224	; 0x2020
    6f52:	f7ff ff43 	bl	6ddc <bt_hci_cmd_send>
    6f56:	e7d7      	b.n	6f08 <le_conn_param_req+0x74>
    6f58:	00028868 	.word	0x00028868
    6f5c:	00028928 	.word	0x00028928
    6f60:	0002abc1 	.word	0x0002abc1

00006f64 <conn_auto_initiate>:
{
    6f64:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    6f66:	7a83      	ldrb	r3, [r0, #10]
    6f68:	2b06      	cmp	r3, #6
{
    6f6a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    6f6c:	d131      	bne.n	6fd2 <conn_auto_initiate+0x6e>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    6f6e:	1d06      	adds	r6, r0, #4
    6f70:	4630      	mov	r0, r6
    6f72:	f01e fbaf 	bl	256d4 <atomic_get>
    6f76:	0481      	lsls	r1, r0, #18
    6f78:	d41a      	bmi.n	6fb0 <conn_auto_initiate+0x4c>
    6f7a:	78e3      	ldrb	r3, [r4, #3]
    6f7c:	b123      	cbz	r3, 6f88 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    6f7e:	4b15      	ldr	r3, [pc, #84]	; (6fd4 <conn_auto_initiate+0x70>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    6f80:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
    6f84:	071a      	lsls	r2, r3, #28
    6f86:	d513      	bpl.n	6fb0 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    6f88:	2102      	movs	r1, #2
    6f8a:	f242 0016 	movw	r0, #8214	; 0x2016
    6f8e:	f7ff fedd 	bl	6d4c <bt_hci_cmd_create>
	if (!buf) {
    6f92:	4605      	mov	r5, r0
    6f94:	b160      	cbz	r0, 6fb0 <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
    6f96:	2102      	movs	r1, #2
    6f98:	3008      	adds	r0, #8
    6f9a:	f017 fb3f 	bl	1e61c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    6f9e:	8823      	ldrh	r3, [r4, #0]
    6fa0:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    6fa2:	4629      	mov	r1, r5
    6fa4:	f242 0016 	movw	r0, #8214	; 0x2016
}
    6fa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    6fac:	f7ff bf16 	b.w	6ddc <bt_hci_cmd_send>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6fb0:	78e3      	ldrb	r3, [r4, #3]
    6fb2:	2b01      	cmp	r3, #1
    6fb4:	d10d      	bne.n	6fd2 <conn_auto_initiate+0x6e>
    6fb6:	4630      	mov	r0, r6
    6fb8:	f01e fb8c 	bl	256d4 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    6fbc:	05c3      	lsls	r3, r0, #23
    6fbe:	d408      	bmi.n	6fd2 <conn_auto_initiate+0x6e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    6fc0:	f104 0154 	add.w	r1, r4, #84	; 0x54
    6fc4:	4804      	ldr	r0, [pc, #16]	; (6fd8 <conn_auto_initiate+0x74>)
}
    6fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6fca:	f241 3288 	movw	r2, #5000	; 0x1388
    6fce:	f01a bfbb 	b.w	21f48 <k_delayed_work_submit_to_queue>
    6fd2:	bd70      	pop	{r4, r5, r6, pc}
    6fd4:	200067d0 	.word	0x200067d0
    6fd8:	20001c08 	.word	0x20001c08

00006fdc <le_remote_feat_complete>:
{
    6fdc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    6fde:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    6fe0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    6fe4:	4630      	mov	r0, r6
    6fe6:	f002 f849 	bl	907c <bt_conn_lookup_handle>
	if (!conn) {
    6fea:	4604      	mov	r4, r0
    6fec:	b960      	cbnz	r0, 7008 <le_remote_feat_complete+0x2c>
    6fee:	4a10      	ldr	r2, [pc, #64]	; (7030 <le_remote_feat_complete+0x54>)
    6ff0:	4b10      	ldr	r3, [pc, #64]	; (7034 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6ff2:	4811      	ldr	r0, [pc, #68]	; (7038 <le_remote_feat_complete+0x5c>)
    6ff4:	1ad2      	subs	r2, r2, r3
    6ff6:	08d2      	lsrs	r2, r2, #3
    6ff8:	0192      	lsls	r2, r2, #6
    6ffa:	4631      	mov	r1, r6
    6ffc:	f042 0201 	orr.w	r2, r2, #1
}
    7000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7004:	f01c b9df 	b.w	233c6 <log_1>
	if (!evt->status) {
    7008:	782b      	ldrb	r3, [r5, #0]
    700a:	b923      	cbnz	r3, 7016 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    700c:	2208      	movs	r2, #8
    700e:	1ce9      	adds	r1, r5, #3
    7010:	3098      	adds	r0, #152	; 0x98
    7012:	f01e f83d 	bl	25090 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7016:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    701a:	1d20      	adds	r0, r4, #4
    701c:	f01e fb63 	bl	256e6 <atomic_or>
	conn_auto_initiate(conn);
    7020:	4620      	mov	r0, r4
    7022:	f7ff ff9f 	bl	6f64 <conn_auto_initiate>
	bt_conn_unref(conn);
    7026:	4620      	mov	r0, r4
}
    7028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    702c:	f01e bcb7 	b.w	2599e <bt_conn_unref>
    7030:	00028928 	.word	0x00028928
    7034:	00028868 	.word	0x00028868
    7038:	0002abc1 	.word	0x0002abc1

0000703c <bt_hci_cmd_send_sync>:
{
    703c:	b5f0      	push	{r4, r5, r6, r7, lr}
    703e:	4615      	mov	r5, r2
    7040:	b087      	sub	sp, #28
	if (!buf) {
    7042:	460c      	mov	r4, r1
    7044:	b921      	cbnz	r1, 7050 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    7046:	f7ff fe81 	bl	6d4c <bt_hci_cmd_create>
		if (!buf) {
    704a:	4604      	mov	r4, r0
    704c:	2800      	cmp	r0, #0
    704e:	d048      	beq.n	70e2 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
    7050:	2201      	movs	r2, #1
    7052:	2100      	movs	r1, #0
    7054:	4668      	mov	r0, sp
    7056:	f021 f986 	bl	28366 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    705a:	4620      	mov	r0, r4
    705c:	f016 ffee 	bl	1e03c <net_buf_id>
    7060:	4e21      	ldr	r6, [pc, #132]	; (70e8 <bt_hci_cmd_send_sync+0xac>)
    7062:	230c      	movs	r3, #12
    7064:	fb03 6000 	mla	r0, r3, r0, r6
    7068:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    706c:	4620      	mov	r0, r4
    706e:	f017 fa57 	bl	1e520 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    7072:	481e      	ldr	r0, [pc, #120]	; (70ec <bt_hci_cmd_send_sync+0xb0>)
    7074:	4621      	mov	r1, r4
    7076:	f017 f9d7 	bl	1e428 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    707a:	f242 7110 	movw	r1, #10000	; 0x2710
    707e:	4668      	mov	r0, sp
    7080:	f01a fd4e 	bl	21b20 <z_impl_k_sem_take>
	__ASSERT(err == 0, "k_sem_take failed with err %d", err);
    7084:	4607      	mov	r7, r0
    7086:	b178      	cbz	r0, 70a8 <bt_hci_cmd_send_sync+0x6c>
    7088:	4a19      	ldr	r2, [pc, #100]	; (70f0 <bt_hci_cmd_send_sync+0xb4>)
    708a:	491a      	ldr	r1, [pc, #104]	; (70f4 <bt_hci_cmd_send_sync+0xb8>)
    708c:	481a      	ldr	r0, [pc, #104]	; (70f8 <bt_hci_cmd_send_sync+0xbc>)
    708e:	f240 136f 	movw	r3, #367	; 0x16f
    7092:	f01c f91a 	bl	232ca <printk>
    7096:	4819      	ldr	r0, [pc, #100]	; (70fc <bt_hci_cmd_send_sync+0xc0>)
    7098:	4639      	mov	r1, r7
    709a:	f01c f916 	bl	232ca <printk>
    709e:	4814      	ldr	r0, [pc, #80]	; (70f0 <bt_hci_cmd_send_sync+0xb4>)
    70a0:	f240 116f 	movw	r1, #367	; 0x16f
    70a4:	f01c f954 	bl	23350 <assert_post_action>
	if (cmd(buf)->status) {
    70a8:	4620      	mov	r0, r4
    70aa:	f016 ffc7 	bl	1e03c <net_buf_id>
    70ae:	270c      	movs	r7, #12
    70b0:	4378      	muls	r0, r7
    70b2:	5c32      	ldrb	r2, [r6, r0]
    70b4:	b172      	cbz	r2, 70d4 <bt_hci_cmd_send_sync+0x98>
		switch (cmd(buf)->status) {
    70b6:	4620      	mov	r0, r4
    70b8:	f016 ffc0 	bl	1e03c <net_buf_id>
    70bc:	4347      	muls	r7, r0
    70be:	5df3      	ldrb	r3, [r6, r7]
			err = -EIO;
    70c0:	2b09      	cmp	r3, #9
    70c2:	bf0c      	ite	eq
    70c4:	f06f 053c 	mvneq.w	r5, #60	; 0x3c
    70c8:	f06f 0504 	mvnne.w	r5, #4
			net_buf_unref(buf);
    70cc:	4620      	mov	r0, r4
    70ce:	f017 f9df 	bl	1e490 <net_buf_unref>
    70d2:	e003      	b.n	70dc <bt_hci_cmd_send_sync+0xa0>
		if (rsp) {
    70d4:	2d00      	cmp	r5, #0
    70d6:	d0f9      	beq.n	70cc <bt_hci_cmd_send_sync+0x90>
			*rsp = buf;
    70d8:	602c      	str	r4, [r5, #0]
		err = 0;
    70da:	4615      	mov	r5, r2
}
    70dc:	4628      	mov	r0, r5
    70de:	b007      	add	sp, #28
    70e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOBUFS;
    70e2:	f06f 0536 	mvn.w	r5, #54	; 0x36
    70e6:	e7f9      	b.n	70dc <bt_hci_cmd_send_sync+0xa0>
    70e8:	200004d8 	.word	0x200004d8
    70ec:	200068ac 	.word	0x200068ac
    70f0:	0002acb5 	.word	0x0002acb5
    70f4:	0002ace9 	.word	0x0002ace9
    70f8:	000297e6 	.word	0x000297e6
    70fc:	0002adb6 	.word	0x0002adb6

00007100 <set_le_scan_enable_legacy>:
{
    7100:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    7102:	2102      	movs	r1, #2
{
    7104:	b085      	sub	sp, #20
    7106:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    7108:	f242 000c 	movw	r0, #8204	; 0x200c
    710c:	f7ff fe1e 	bl	6d4c <bt_hci_cmd_create>
	if (!buf) {
    7110:	4605      	mov	r5, r0
    7112:	b348      	cbz	r0, 7168 <set_le_scan_enable_legacy+0x68>
	cp = net_buf_add(buf, sizeof(*cp));
    7114:	2102      	movs	r1, #2
    7116:	3008      	adds	r0, #8
    7118:	f017 fa80 	bl	1e61c <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    711c:	2c01      	cmp	r4, #1
	cp = net_buf_add(buf, sizeof(*cp));
    711e:	4603      	mov	r3, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    7120:	d11f      	bne.n	7162 <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7122:	4813      	ldr	r0, [pc, #76]	; (7170 <set_le_scan_enable_legacy+0x70>)
    7124:	f01e fad6 	bl	256d4 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7128:	f3c0 3040 	ubfx	r0, r0, #13, #1
    712c:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    712e:	701c      	strb	r4, [r3, #0]
	state->target = target;
    7130:	4b0f      	ldr	r3, [pc, #60]	; (7170 <set_le_scan_enable_legacy+0x70>)
    7132:	9301      	str	r3, [sp, #4]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    7134:	f004 0401 	and.w	r4, r4, #1
	state->bit = bit;
    7138:	230a      	movs	r3, #10
	cmd(buf)->state = &state;
    713a:	4628      	mov	r0, r5
	state->bit = bit;
    713c:	9302      	str	r3, [sp, #8]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    713e:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    7142:	f016 ff7b 	bl	1e03c <net_buf_id>
    7146:	4b0b      	ldr	r3, [pc, #44]	; (7174 <set_le_scan_enable_legacy+0x74>)
    7148:	220c      	movs	r2, #12
    714a:	fb02 3000 	mla	r0, r2, r0, r3
    714e:	ab01      	add	r3, sp, #4
    7150:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    7152:	2200      	movs	r2, #0
    7154:	4629      	mov	r1, r5
    7156:	f242 000c 	movw	r0, #8204	; 0x200c
    715a:	f7ff ff6f 	bl	703c <bt_hci_cmd_send_sync>
}
    715e:	b005      	add	sp, #20
    7160:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    7162:	2200      	movs	r2, #0
    7164:	7042      	strb	r2, [r0, #1]
    7166:	e7e2      	b.n	712e <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    7168:	f06f 0036 	mvn.w	r0, #54	; 0x36
    716c:	e7f7      	b.n	715e <set_le_scan_enable_legacy+0x5e>
    716e:	bf00      	nop
    7170:	2000685c 	.word	0x2000685c
    7174:	200004d8 	.word	0x200004d8

00007178 <hci_set_ad>:
{
    7178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    717c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    717e:	2120      	movs	r1, #32
{
    7180:	4682      	mov	sl, r0
    7182:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    7184:	f7ff fde2 	bl	6d4c <bt_hci_cmd_create>
	if (!buf) {
    7188:	4606      	mov	r6, r0
    718a:	2800      	cmp	r0, #0
    718c:	d05b      	beq.n	7246 <hci_set_ad+0xce>
	set_data = net_buf_add(buf, sizeof(*set_data));
    718e:	2120      	movs	r1, #32
    7190:	3008      	adds	r0, #8
    7192:	f017 fa43 	bl	1e61c <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    7196:	2220      	movs	r2, #32
    7198:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    719a:	4681      	mov	r9, r0
	(void)memset(set_data, 0, sizeof(*set_data));
    719c:	f01d ffa3 	bl	250e6 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    71a0:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    71a4:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    71a8:	9300      	str	r3, [sp, #0]
	u8_t set_data_len = 0;
    71aa:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    71ac:	f8d4 8000 	ldr.w	r8, [r4]
    71b0:	2300      	movs	r3, #0
    71b2:	6862      	ldr	r2, [r4, #4]
    71b4:	4293      	cmp	r3, r2
    71b6:	d30d      	bcc.n	71d4 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    71b8:	9b00      	ldr	r3, [sp, #0]
    71ba:	3408      	adds	r4, #8
    71bc:	429c      	cmp	r4, r3
    71be:	d1f5      	bne.n	71ac <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    71c0:	2200      	movs	r2, #0
    71c2:	4631      	mov	r1, r6
    71c4:	4650      	mov	r0, sl
	*data_len = set_data_len;
    71c6:	f889 5000 	strb.w	r5, [r9]
}
    71ca:	b003      	add	sp, #12
    71cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    71d0:	f7ff bf34 	b.w	703c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    71d4:	f898 2001 	ldrb.w	r2, [r8, #1]
			u8_t type = data[j].type;
    71d8:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    71dc:	1ca8      	adds	r0, r5, #2
    71de:	1881      	adds	r1, r0, r2
    71e0:	291f      	cmp	r1, #31
    71e2:	d919      	bls.n	7218 <hci_set_ad+0xa0>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    71e4:	f1bc 0f09 	cmp.w	ip, #9
				len = set_data_len_max - (set_data_len + 2);
    71e8:	f1c5 021d 	rsb	r2, r5, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    71ec:	d100      	bne.n	71f0 <hci_set_ad+0x78>
    71ee:	b98a      	cbnz	r2, 7214 <hci_set_ad+0x9c>
    71f0:	4b16      	ldr	r3, [pc, #88]	; (724c <hci_set_ad+0xd4>)
    71f2:	4917      	ldr	r1, [pc, #92]	; (7250 <hci_set_ad+0xd8>)
					BT_ERR("Too big advertising data");
    71f4:	4817      	ldr	r0, [pc, #92]	; (7254 <hci_set_ad+0xdc>)
    71f6:	1ac9      	subs	r1, r1, r3
    71f8:	08c9      	lsrs	r1, r1, #3
    71fa:	0189      	lsls	r1, r1, #6
    71fc:	f041 0101 	orr.w	r1, r1, #1
    7200:	f01c f8d4 	bl	233ac <log_0>
		net_buf_unref(buf);
    7204:	4630      	mov	r0, r6
    7206:	f017 f943 	bl	1e490 <net_buf_unref>
					return -EINVAL;
    720a:	f06f 0015 	mvn.w	r0, #21
}
    720e:	b003      	add	sp, #12
    7210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    7214:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    7218:	b2d7      	uxtb	r7, r2
    721a:	1c79      	adds	r1, r7, #1
    721c:	f80b 1005 	strb.w	r1, [fp, r5]
    7220:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    7222:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    7224:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    7228:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    722c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    7230:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    7232:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    7234:	f01d ff2c 	bl	25090 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    7238:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    723a:	443d      	add	r5, r7
    723c:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    723e:	3301      	adds	r3, #1
    7240:	f108 0808 	add.w	r8, r8, #8
    7244:	e7b5      	b.n	71b2 <hci_set_ad+0x3a>
		return -ENOBUFS;
    7246:	f06f 0036 	mvn.w	r0, #54	; 0x36
    724a:	e7e0      	b.n	720e <hci_set_ad+0x96>
    724c:	00028868 	.word	0x00028868
    7250:	00028928 	.word	0x00028928
    7254:	0002add6 	.word	0x0002add6

00007258 <le_adv_update.isra.0>:
	}

	return false;
}

static int le_adv_update(struct bt_le_ext_adv *adv,
    7258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    725c:	b086      	sub	sp, #24
	struct bt_ad d[2] = {};
	struct bt_data data;
	int err;

	d[0].data = ad;
	d[0].len = ad_len;
    725e:	e9cd 0102 	strd	r0, r1, [sp, #8]
static int le_adv_update(struct bt_le_ext_adv *adv,
    7262:	4615      	mov	r5, r2
    7264:	461e      	mov	r6, r3
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    7266:	2201      	movs	r2, #1
	struct bt_ad d[2] = {};
    7268:	2300      	movs	r3, #0
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    726a:	a902      	add	r1, sp, #8
    726c:	f242 0008 	movw	r0, #8200	; 0x2008
	struct bt_ad d[2] = {};
    7270:	e9cd 3304 	strd	r3, r3, [sp, #16]
static int le_adv_update(struct bt_le_ext_adv *adv,
    7274:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    7278:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    727c:	f7ff ff7c 	bl	7178 <hci_set_ad>

	err = set_ad(adv, d, 1);
	if (err) {
    7280:	4604      	mov	r4, r0
    7282:	bb10      	cbnz	r0, 72ca <le_adv_update.isra.0+0x72>
		return err;
	}

	d[0].data = sd;
	d[0].len = sd_len;
    7284:	e9cd 5602 	strd	r5, r6, [sp, #8]

	if (use_name) {
    7288:	f1b8 0f00 	cmp.w	r8, #0
    728c:	d011      	beq.n	72b2 <le_adv_update.isra.0+0x5a>
		const char *name;

		if (sd) {
    728e:	b115      	cbz	r5, 7296 <le_adv_update.isra.0+0x3e>
	for (i = 0; i < ad_len; i++) {
    7290:	4602      	mov	r2, r0
    7292:	4296      	cmp	r6, r2
    7294:	d11d      	bne.n	72d2 <le_adv_update.isra.0+0x7a>
				return -EINVAL;
			}
		}

		name = bt_get_name();
		data = (struct bt_data)BT_DATA(
    7296:	4d14      	ldr	r5, [pc, #80]	; (72e8 <le_adv_update.isra.0+0x90>)
    7298:	4628      	mov	r0, r5
    729a:	f01d fec7 	bl	2502c <strlen>
    729e:	2309      	movs	r3, #9
    72a0:	f88d 3000 	strb.w	r3, [sp]
			BT_DATA_NAME_COMPLETE,
			name, strlen(name));

		d[1].data = &data;
		d[1].len = 1;
    72a4:	2301      	movs	r3, #1
		data = (struct bt_data)BT_DATA(
    72a6:	f88d 0001 	strb.w	r0, [sp, #1]
    72aa:	9501      	str	r5, [sp, #4]
		d[1].data = &data;
    72ac:	f8cd d010 	str.w	sp, [sp, #16]
		d[1].len = 1;
    72b0:	9305      	str	r3, [sp, #20]
	 * by previous calls.
	 * Clearing sd is done by calling set_sd() with NULL data and
	 * zero len.
	 * So following condition check is unusual but correct.
	 */
	if (d[0].data || d[1].data || connectable) {
    72b2:	9b02      	ldr	r3, [sp, #8]
    72b4:	b913      	cbnz	r3, 72bc <le_adv_update.isra.0+0x64>
    72b6:	9b04      	ldr	r3, [sp, #16]
    72b8:	b903      	cbnz	r3, 72bc <le_adv_update.isra.0+0x64>
    72ba:	b137      	cbz	r7, 72ca <le_adv_update.isra.0+0x72>
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    72bc:	2202      	movs	r2, #2
    72be:	a902      	add	r1, sp, #8
    72c0:	f242 0009 	movw	r0, #8201	; 0x2009
    72c4:	f7ff ff58 	bl	7178 <hci_set_ad>
    72c8:	4604      	mov	r4, r0
			return err;
		}
	}

	return 0;
}
    72ca:	4620      	mov	r0, r4
    72cc:	b006      	add	sp, #24
    72ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    72d2:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
    72d6:	3b08      	subs	r3, #8
    72d8:	2b01      	cmp	r3, #1
    72da:	d901      	bls.n	72e0 <le_adv_update.isra.0+0x88>
	for (i = 0; i < ad_len; i++) {
    72dc:	3201      	adds	r2, #1
    72de:	e7d8      	b.n	7292 <le_adv_update.isra.0+0x3a>
				return -EINVAL;
    72e0:	f06f 0415 	mvn.w	r4, #21
    72e4:	e7f1      	b.n	72ca <le_adv_update.isra.0+0x72>
    72e6:	bf00      	nop
    72e8:	200068c4 	.word	0x200068c4

000072ec <set_random_address>:
{
    72ec:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    72ee:	4e15      	ldr	r6, [pc, #84]	; (7344 <set_random_address+0x58>)
    72f0:	2206      	movs	r2, #6
    72f2:	f106 0125 	add.w	r1, r6, #37	; 0x25
    72f6:	4605      	mov	r5, r0
    72f8:	f01d feba 	bl	25070 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    72fc:	4604      	mov	r4, r0
    72fe:	b1e0      	cbz	r0, 733a <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    7300:	2106      	movs	r1, #6
    7302:	f242 0005 	movw	r0, #8197	; 0x2005
    7306:	f7ff fd21 	bl	6d4c <bt_hci_cmd_create>
	if (!buf) {
    730a:	4604      	mov	r4, r0
    730c:	b1b8      	cbz	r0, 733e <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    730e:	2206      	movs	r2, #6
    7310:	4629      	mov	r1, r5
    7312:	3008      	adds	r0, #8
    7314:	f020 fdea 	bl	27eec <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    7318:	4621      	mov	r1, r4
    731a:	2200      	movs	r2, #0
    731c:	f242 0005 	movw	r0, #8197	; 0x2005
    7320:	f7ff fe8c 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    7324:	4604      	mov	r4, r0
    7326:	b940      	cbnz	r0, 733a <set_random_address+0x4e>
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    7328:	2206      	movs	r2, #6
    732a:	4629      	mov	r1, r5
    732c:	f106 0025 	add.w	r0, r6, #37	; 0x25
    7330:	f01d feae 	bl	25090 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    7334:	2301      	movs	r3, #1
    7336:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
}
    733a:	4620      	mov	r0, r4
    733c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    733e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    7342:	e7fa      	b.n	733a <set_random_address+0x4e>
    7344:	200067d0 	.word	0x200067d0

00007348 <set_le_adv_enable_legacy>:
{
    7348:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    734a:	2101      	movs	r1, #1
{
    734c:	b085      	sub	sp, #20
    734e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    7350:	f242 000a 	movw	r0, #8202	; 0x200a
    7354:	f7ff fcfa 	bl	6d4c <bt_hci_cmd_create>
	if (!buf) {
    7358:	4604      	mov	r4, r0
    735a:	b1e8      	cbz	r0, 7398 <set_le_adv_enable_legacy+0x50>
	if (enable) {
    735c:	3008      	adds	r0, #8
    735e:	b1cd      	cbz	r5, 7394 <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    7360:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    7362:	f020 fdcf 	bl	27f04 <net_buf_simple_add_u8>
	state->target = target;
    7366:	4b0e      	ldr	r3, [pc, #56]	; (73a0 <set_le_adv_enable_legacy+0x58>)
    7368:	9301      	str	r3, [sp, #4]
	cmd(buf)->state = &state;
    736a:	4620      	mov	r0, r4
	state->bit = bit;
    736c:	2305      	movs	r3, #5
    736e:	9302      	str	r3, [sp, #8]
	state->val = val;
    7370:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    7374:	f016 fe62 	bl	1e03c <net_buf_id>
    7378:	4b0a      	ldr	r3, [pc, #40]	; (73a4 <set_le_adv_enable_legacy+0x5c>)
    737a:	220c      	movs	r2, #12
    737c:	fb02 3000 	mla	r0, r2, r0, r3
    7380:	ab01      	add	r3, sp, #4
    7382:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    7384:	2200      	movs	r2, #0
    7386:	4621      	mov	r1, r4
    7388:	f242 000a 	movw	r0, #8202	; 0x200a
    738c:	f7ff fe56 	bl	703c <bt_hci_cmd_send_sync>
}
    7390:	b005      	add	sp, #20
    7392:	bd30      	pop	{r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    7394:	4629      	mov	r1, r5
    7396:	e7e4      	b.n	7362 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    7398:	f06f 0036 	mvn.w	r0, #54	; 0x36
    739c:	e7f8      	b.n	7390 <set_le_adv_enable_legacy+0x48>
    739e:	bf00      	nop
    73a0:	2000685c 	.word	0x2000685c
    73a4:	200004d8 	.word	0x200004d8

000073a8 <bt_le_scan_update>:
{
    73a8:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    73aa:	4809      	ldr	r0, [pc, #36]	; (73d0 <bt_le_scan_update+0x28>)
    73ac:	f01e f992 	bl	256d4 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    73b0:	0501      	lsls	r1, r0, #20
    73b2:	f3c0 23c0 	ubfx	r3, r0, #11, #1
    73b6:	d409      	bmi.n	73cc <bt_le_scan_update+0x24>
    73b8:	4805      	ldr	r0, [pc, #20]	; (73d0 <bt_le_scan_update+0x28>)
    73ba:	f01e f98b 	bl	256d4 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    73be:	0542      	lsls	r2, r0, #21
    73c0:	d504      	bpl.n	73cc <bt_le_scan_update+0x24>
	return set_le_scan_enable_legacy(enable);
    73c2:	4618      	mov	r0, r3
}
    73c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return set_le_scan_enable_legacy(enable);
    73c8:	f7ff be9a 	b.w	7100 <set_le_scan_enable_legacy>
}
    73cc:	2000      	movs	r0, #0
    73ce:	bd08      	pop	{r3, pc}
    73d0:	2000685c 	.word	0x2000685c

000073d4 <id_create.isra.0>:
static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    73d4:	b530      	push	{r4, r5, lr}
    73d6:	4d17      	ldr	r5, [pc, #92]	; (7434 <id_create.isra.0+0x60>)
    73d8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    73dc:	b085      	sub	sp, #20
    73de:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    73e0:	460c      	mov	r4, r1
    73e2:	b1b1      	cbz	r1, 7412 <id_create.isra.0+0x3e>
    73e4:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    73e6:	2207      	movs	r2, #7
    73e8:	a902      	add	r1, sp, #8
    73ea:	4620      	mov	r0, r4
    73ec:	9302      	str	r3, [sp, #8]
    73ee:	f8cd 300b 	str.w	r3, [sp, #11]
    73f2:	f01d fe3d 	bl	25070 <memcmp>
    73f6:	b160      	cbz	r0, 7412 <id_create.isra.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    73f8:	4621      	mov	r1, r4
    73fa:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    73fc:	f01e f970 	bl	256e0 <bt_addr_le_copy>
    7400:	480d      	ldr	r0, [pc, #52]	; (7438 <id_create.isra.0+0x64>)
    7402:	f01e f967 	bl	256d4 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    7406:	0783      	lsls	r3, r0, #30
    7408:	d501      	bpl.n	740e <id_create.isra.0+0x3a>
		bt_settings_save_id();
    740a:	f7fe ff4d 	bl	62a8 <bt_settings_save_id>
}
    740e:	b005      	add	sp, #20
    7410:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    7412:	4668      	mov	r0, sp
    7414:	f01e f9ed 	bl	257f2 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    7418:	4668      	mov	r0, sp
    741a:	f7ff fa0b 	bl	6834 <id_find>
    741e:	2800      	cmp	r0, #0
    7420:	daf7      	bge.n	7412 <id_create.isra.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    7422:	4669      	mov	r1, sp
    7424:	4628      	mov	r0, r5
    7426:	f01e f95b 	bl	256e0 <bt_addr_le_copy>
		if (addr) {
    742a:	2c00      	cmp	r4, #0
    742c:	d0e8      	beq.n	7400 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    742e:	4629      	mov	r1, r5
    7430:	4620      	mov	r0, r4
    7432:	e7e3      	b.n	73fc <id_create.isra.0+0x28>
    7434:	200067d0 	.word	0x200067d0
    7438:	2000685c 	.word	0x2000685c

0000743c <bt_recv>:
{
    743c:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    743e:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    7440:	2901      	cmp	r1, #1
{
    7442:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    7444:	d04b      	beq.n	74de <bt_recv+0xa2>
    7446:	2903      	cmp	r1, #3
    7448:	d17b      	bne.n	7542 <bt_recv+0x106>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    744a:	8983      	ldrh	r3, [r0, #12]
    744c:	2b03      	cmp	r3, #3
    744e:	d80c      	bhi.n	746a <bt_recv+0x2e>
    7450:	4a44      	ldr	r2, [pc, #272]	; (7564 <bt_recv+0x128>)
    7452:	4945      	ldr	r1, [pc, #276]	; (7568 <bt_recv+0x12c>)
    7454:	4845      	ldr	r0, [pc, #276]	; (756c <bt_recv+0x130>)
    7456:	f240 4377 	movw	r3, #1143	; 0x477
    745a:	f01b ff36 	bl	232ca <printk>
    745e:	4040      	eors	r0, r0
    7460:	f380 8811 	msr	BASEPRI, r0
    7464:	f04f 0003 	mov.w	r0, #3
    7468:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    746a:	2104      	movs	r1, #4
    746c:	f104 0008 	add.w	r0, r4, #8
    7470:	f017 f8b2 	bl	1e5d8 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    7474:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    7476:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    7478:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    747a:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    747c:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    7480:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    7482:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    7484:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    7486:	d00d      	beq.n	74a4 <bt_recv+0x68>
    7488:	4839      	ldr	r0, [pc, #228]	; (7570 <bt_recv+0x134>)
    748a:	4b3a      	ldr	r3, [pc, #232]	; (7574 <bt_recv+0x138>)
    748c:	1a1b      	subs	r3, r3, r0
    748e:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    7490:	019b      	lsls	r3, r3, #6
    7492:	4839      	ldr	r0, [pc, #228]	; (7578 <bt_recv+0x13c>)
    7494:	f043 0301 	orr.w	r3, r3, #1
    7498:	f01b ffa9 	bl	233ee <log_2>
	net_buf_unref(buf);
    749c:	4620      	mov	r0, r4
    749e:	f016 fff7 	bl	1e490 <net_buf_unref>
    74a2:	e01a      	b.n	74da <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    74a4:	f001 fdea 	bl	907c <bt_conn_lookup_handle>
	if (!conn) {
    74a8:	4605      	mov	r5, r0
    74aa:	b958      	cbnz	r0, 74c4 <bt_recv+0x88>
    74ac:	4b30      	ldr	r3, [pc, #192]	; (7570 <bt_recv+0x134>)
    74ae:	4a31      	ldr	r2, [pc, #196]	; (7574 <bt_recv+0x138>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    74b0:	8ae1      	ldrh	r1, [r4, #22]
    74b2:	4832      	ldr	r0, [pc, #200]	; (757c <bt_recv+0x140>)
    74b4:	1ad2      	subs	r2, r2, r3
    74b6:	08d2      	lsrs	r2, r2, #3
    74b8:	0192      	lsls	r2, r2, #6
    74ba:	f042 0201 	orr.w	r2, r2, #1
    74be:	f01b ff82 	bl	233c6 <log_1>
		net_buf_unref(buf);
    74c2:	e7eb      	b.n	749c <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    74c4:	f001 ffa0 	bl	9408 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    74c8:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    74ca:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    74cc:	4621      	mov	r1, r4
    74ce:	4628      	mov	r0, r5
    74d0:	f001 fb8c 	bl	8bec <bt_conn_recv>
	bt_conn_unref(conn);
    74d4:	4628      	mov	r0, r5
    74d6:	f01e fa62 	bl	2599e <bt_conn_unref>
		return 0;
    74da:	2000      	movs	r0, #0
}
    74dc:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    74de:	8983      	ldrh	r3, [r0, #12]
    74e0:	2b01      	cmp	r3, #1
    74e2:	d80c      	bhi.n	74fe <bt_recv+0xc2>
    74e4:	4a1f      	ldr	r2, [pc, #124]	; (7564 <bt_recv+0x128>)
    74e6:	4920      	ldr	r1, [pc, #128]	; (7568 <bt_recv+0x12c>)
    74e8:	4820      	ldr	r0, [pc, #128]	; (756c <bt_recv+0x130>)
    74ea:	f241 33a7 	movw	r3, #5031	; 0x13a7
    74ee:	f01b feec 	bl	232ca <printk>
    74f2:	4040      	eors	r0, r0
    74f4:	f380 8811 	msr	BASEPRI, r0
    74f8:	f04f 0003 	mov.w	r0, #3
    74fc:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    74fe:	2102      	movs	r1, #2
    7500:	f104 0008 	add.w	r0, r4, #8
    7504:	f017 f868 	bl	1e5d8 <net_buf_simple_pull_mem>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    7508:	7802      	ldrb	r2, [r0, #0]
    750a:	2a1a      	cmp	r2, #26
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    750c:	4605      	mov	r5, r0
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    750e:	d811      	bhi.n	7534 <bt_recv+0xf8>
    7510:	2301      	movs	r3, #1
    7512:	4093      	lsls	r3, r2
    7514:	4a1a      	ldr	r2, [pc, #104]	; (7580 <bt_recv+0x144>)
    7516:	4213      	tst	r3, r2
    7518:	d00c      	beq.n	7534 <bt_recv+0xf8>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    751a:	4a12      	ldr	r2, [pc, #72]	; (7564 <bt_recv+0x128>)
    751c:	4919      	ldr	r1, [pc, #100]	; (7584 <bt_recv+0x148>)
    751e:	4813      	ldr	r0, [pc, #76]	; (756c <bt_recv+0x130>)
    7520:	f241 33ab 	movw	r3, #5035	; 0x13ab
    7524:	f01b fed1 	bl	232ca <printk>
    7528:	4040      	eors	r0, r0
    752a:	f380 8811 	msr	BASEPRI, r0
    752e:	f04f 0003 	mov.w	r0, #3
    7532:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    7534:	4a14      	ldr	r2, [pc, #80]	; (7588 <bt_recv+0x14c>)
    7536:	7828      	ldrb	r0, [r5, #0]
    7538:	2303      	movs	r3, #3
    753a:	4621      	mov	r1, r4
    753c:	f7ff f892 	bl	6664 <handle_event>
    7540:	e7ac      	b.n	749c <bt_recv+0x60>
    7542:	4b0b      	ldr	r3, [pc, #44]	; (7570 <bt_recv+0x134>)
    7544:	4a0b      	ldr	r2, [pc, #44]	; (7574 <bt_recv+0x138>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    7546:	4811      	ldr	r0, [pc, #68]	; (758c <bt_recv+0x150>)
    7548:	1ad2      	subs	r2, r2, r3
    754a:	08d2      	lsrs	r2, r2, #3
    754c:	0192      	lsls	r2, r2, #6
    754e:	f042 0201 	orr.w	r2, r2, #1
    7552:	f01b ff38 	bl	233c6 <log_1>
		net_buf_unref(buf);
    7556:	4620      	mov	r0, r4
    7558:	f016 ff9a 	bl	1e490 <net_buf_unref>
		return -EINVAL;
    755c:	f06f 0015 	mvn.w	r0, #21
    7560:	e7bc      	b.n	74dc <bt_recv+0xa0>
    7562:	bf00      	nop
    7564:	0002acb5 	.word	0x0002acb5
    7568:	0002adef 	.word	0x0002adef
    756c:	000297e6 	.word	0x000297e6
    7570:	00028868 	.word	0x00028868
    7574:	00028928 	.word	0x00028928
    7578:	0002ae08 	.word	0x0002ae08
    757c:	0002ae2c 	.word	0x0002ae2c
    7580:	0408c000 	.word	0x0408c000
    7584:	0002ae4e 	.word	0x0002ae4e
    7588:	00028e80 	.word	0x00028e80
    758c:	0002ae6c 	.word	0x0002ae6c

00007590 <bt_recv_prio>:
{
    7590:	b538      	push	{r3, r4, r5, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    7592:	7d03      	ldrb	r3, [r0, #20]
    7594:	2b01      	cmp	r3, #1
{
    7596:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    7598:	d00c      	beq.n	75b4 <bt_recv_prio+0x24>
    759a:	4a21      	ldr	r2, [pc, #132]	; (7620 <bt_recv_prio+0x90>)
    759c:	4921      	ldr	r1, [pc, #132]	; (7624 <bt_recv_prio+0x94>)
    759e:	4822      	ldr	r0, [pc, #136]	; (7628 <bt_recv_prio+0x98>)
    75a0:	f641 032b 	movw	r3, #6187	; 0x182b
    75a4:	f01b fe91 	bl	232ca <printk>
    75a8:	4040      	eors	r0, r0
    75aa:	f380 8811 	msr	BASEPRI, r0
    75ae:	f04f 0003 	mov.w	r0, #3
    75b2:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    75b4:	89a3      	ldrh	r3, [r4, #12]
    75b6:	2b01      	cmp	r3, #1
    75b8:	d80c      	bhi.n	75d4 <bt_recv_prio+0x44>
    75ba:	4a19      	ldr	r2, [pc, #100]	; (7620 <bt_recv_prio+0x90>)
    75bc:	491b      	ldr	r1, [pc, #108]	; (762c <bt_recv_prio+0x9c>)
    75be:	481a      	ldr	r0, [pc, #104]	; (7628 <bt_recv_prio+0x98>)
    75c0:	f641 032c 	movw	r3, #6188	; 0x182c
    75c4:	f01b fe81 	bl	232ca <printk>
    75c8:	4040      	eors	r0, r0
    75ca:	f380 8811 	msr	BASEPRI, r0
    75ce:	f04f 0003 	mov.w	r0, #3
    75d2:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    75d4:	2102      	movs	r1, #2
    75d6:	f104 0008 	add.w	r0, r4, #8
    75da:	f016 fffd 	bl	1e5d8 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    75de:	7802      	ldrb	r2, [r0, #0]
    75e0:	2a1a      	cmp	r2, #26
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    75e2:	4605      	mov	r5, r0
    75e4:	d804      	bhi.n	75f0 <bt_recv_prio+0x60>
    75e6:	2301      	movs	r3, #1
    75e8:	4093      	lsls	r3, r2
    75ea:	4a11      	ldr	r2, [pc, #68]	; (7630 <bt_recv_prio+0xa0>)
    75ec:	4213      	tst	r3, r2
    75ee:	d10c      	bne.n	760a <bt_recv_prio+0x7a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    75f0:	4a0b      	ldr	r2, [pc, #44]	; (7620 <bt_recv_prio+0x90>)
    75f2:	4910      	ldr	r1, [pc, #64]	; (7634 <bt_recv_prio+0xa4>)
    75f4:	480c      	ldr	r0, [pc, #48]	; (7628 <bt_recv_prio+0x98>)
    75f6:	f641 032f 	movw	r3, #6191	; 0x182f
    75fa:	f01b fe66 	bl	232ca <printk>
    75fe:	4040      	eors	r0, r0
    7600:	f380 8811 	msr	BASEPRI, r0
    7604:	f04f 0003 	mov.w	r0, #3
    7608:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    760a:	4a0b      	ldr	r2, [pc, #44]	; (7638 <bt_recv_prio+0xa8>)
    760c:	7828      	ldrb	r0, [r5, #0]
    760e:	2304      	movs	r3, #4
    7610:	4621      	mov	r1, r4
    7612:	f7ff f827 	bl	6664 <handle_event>
	net_buf_unref(buf);
    7616:	4620      	mov	r0, r4
    7618:	f016 ff3a 	bl	1e490 <net_buf_unref>
}
    761c:	2000      	movs	r0, #0
    761e:	bd38      	pop	{r3, r4, r5, pc}
    7620:	0002acb5 	.word	0x0002acb5
    7624:	0002ae80 	.word	0x0002ae80
    7628:	000297e6 	.word	0x000297e6
    762c:	0002adef 	.word	0x0002adef
    7630:	0408c000 	.word	0x0408c000
    7634:	0002ae4f 	.word	0x0002ae4f
    7638:	00028ea8 	.word	0x00028ea8

0000763c <bt_hci_driver_register>:
	if (bt_dev.drv) {
    763c:	4a08      	ldr	r2, [pc, #32]	; (7660 <bt_hci_driver_register+0x24>)
{
    763e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    7640:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
    7644:	b930      	cbnz	r0, 7654 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    7646:	68d9      	ldr	r1, [r3, #12]
    7648:	b139      	cbz	r1, 765a <bt_hci_driver_register+0x1e>
    764a:	6919      	ldr	r1, [r3, #16]
    764c:	b129      	cbz	r1, 765a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    764e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	return 0;
    7652:	4770      	bx	lr
		return -EALREADY;
    7654:	f06f 0044 	mvn.w	r0, #68	; 0x44
    7658:	4770      	bx	lr
		return -EINVAL;
    765a:	f06f 0015 	mvn.w	r0, #21
}
    765e:	4770      	bx	lr
    7660:	200067d0 	.word	0x200067d0

00007664 <bt_finalize_init>:
{
    7664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7668:	4c2d      	ldr	r4, [pc, #180]	; (7720 <bt_finalize_init+0xbc>)
    766a:	4d2e      	ldr	r5, [pc, #184]	; (7724 <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    766c:	4e2e      	ldr	r6, [pc, #184]	; (7728 <bt_finalize_init+0xc4>)
		BT_INFO("Identity[%d]: %s",
    766e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 7740 <bt_finalize_init+0xdc>
{
    7672:	b087      	sub	sp, #28
    7674:	2102      	movs	r1, #2
    7676:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    767a:	f01e f834 	bl	256e6 <atomic_or>
		bt_le_scan_update(false);
    767e:	2000      	movs	r0, #0
    7680:	f7ff fe92 	bl	73a8 <bt_le_scan_update>
    7684:	4b29      	ldr	r3, [pc, #164]	; (772c <bt_finalize_init+0xc8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    7686:	492a      	ldr	r1, [pc, #168]	; (7730 <bt_finalize_init+0xcc>)
    7688:	1aed      	subs	r5, r5, r3
    768a:	79e3      	ldrb	r3, [r4, #7]
    768c:	4620      	mov	r0, r4
    768e:	2b01      	cmp	r3, #1
    7690:	bf88      	it	hi
    7692:	460e      	movhi	r6, r1
    7694:	f7fe fb16 	bl	5cc4 <bt_addr_le_str_real>
    7698:	f7fa fe52 	bl	2340 <log_strdup>
    769c:	08ed      	lsrs	r5, r5, #3
    769e:	01ad      	lsls	r5, r5, #6
    76a0:	f045 0703 	orr.w	r7, r5, #3
    76a4:	4602      	mov	r2, r0
    76a6:	4631      	mov	r1, r6
    76a8:	4822      	ldr	r0, [pc, #136]	; (7734 <bt_finalize_init+0xd0>)
    76aa:	463b      	mov	r3, r7
    76ac:	f01b fe9f 	bl	233ee <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    76b0:	46a0      	mov	r8, r4
    76b2:	2601      	movs	r6, #1
    76b4:	79e3      	ldrb	r3, [r4, #7]
    76b6:	429e      	cmp	r6, r3
    76b8:	f108 0807 	add.w	r8, r8, #7
    76bc:	db22      	blt.n	7704 <bt_finalize_init+0xa0>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    76be:	f894 602b 	ldrb.w	r6, [r4, #43]	; 0x2b
    76c2:	4630      	mov	r0, r6
    76c4:	f7fe ff10 	bl	64e8 <ver_str>
    76c8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    76ca:	9304      	str	r3, [sp, #16]
    76cc:	f045 0503 	orr.w	r5, r5, #3
    76d0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    76d2:	9305      	str	r3, [sp, #20]
    76d4:	e9cd 0602 	strd	r0, r6, [sp, #8]
    76d8:	462b      	mov	r3, r5
    76da:	a902      	add	r1, sp, #8
    76dc:	2204      	movs	r2, #4
    76de:	4816      	ldr	r0, [pc, #88]	; (7738 <bt_finalize_init+0xd4>)
    76e0:	f01b feba 	bl	23458 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    76e4:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    76e8:	4630      	mov	r0, r6
    76ea:	f7fe fefd 	bl	64e8 <ver_str>
    76ee:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    76f0:	f8ad 5000 	strh.w	r5, [sp]
    76f4:	4601      	mov	r1, r0
    76f6:	4632      	mov	r2, r6
    76f8:	4810      	ldr	r0, [pc, #64]	; (773c <bt_finalize_init+0xd8>)
    76fa:	f01b fe91 	bl	23420 <log_3>
}
    76fe:	b007      	add	sp, #28
    7700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    7704:	4640      	mov	r0, r8
    7706:	f7fe fadd 	bl	5cc4 <bt_addr_le_str_real>
    770a:	f7fa fe19 	bl	2340 <log_strdup>
    770e:	4631      	mov	r1, r6
    7710:	4602      	mov	r2, r0
    7712:	463b      	mov	r3, r7
    7714:	4648      	mov	r0, r9
    7716:	f01b fe6a 	bl	233ee <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    771a:	3601      	adds	r6, #1
    771c:	e7ca      	b.n	76b4 <bt_finalize_init+0x50>
    771e:	bf00      	nop
    7720:	200067d0 	.word	0x200067d0
    7724:	00028928 	.word	0x00028928
    7728:	0002c6a7 	.word	0x0002c6a7
    772c:	00028868 	.word	0x00028868
    7730:	0002aea3 	.word	0x0002aea3
    7734:	0002aea7 	.word	0x0002aea7
    7738:	0002aec7 	.word	0x0002aec7
    773c:	0002af05 	.word	0x0002af05
    7740:	0002aeb6 	.word	0x0002aeb6

00007744 <bt_init>:
{
    7744:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    7746:	4db8      	ldr	r5, [pc, #736]	; (7a28 <bt_init+0x2e4>)
    7748:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
    774c:	6899      	ldr	r1, [r3, #8]
    774e:	f011 0101 	ands.w	r1, r1, #1
{
    7752:	b086      	sub	sp, #24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    7754:	d121      	bne.n	779a <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    7756:	aa01      	add	r2, sp, #4
    7758:	f640 4003 	movw	r0, #3075	; 0xc03
    775c:	f7ff fc6e 	bl	703c <bt_hci_cmd_send_sync>
		if (err) {
    7760:	4604      	mov	r4, r0
    7762:	2800      	cmp	r0, #0
    7764:	d176      	bne.n	7854 <bt_init+0x110>
		hci_reset_complete(rsp);
    7766:	9b01      	ldr	r3, [sp, #4]
	u8_t status = buf->data[0];
    7768:	689b      	ldr	r3, [r3, #8]
	if (status) {
    776a:	781b      	ldrb	r3, [r3, #0]
    776c:	b993      	cbnz	r3, 7794 <bt_init+0x50>
	scan_dev_found_cb = NULL;
    776e:	4aaf      	ldr	r2, [pc, #700]	; (7a2c <bt_init+0x2e8>)
    7770:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    7772:	f105 038c 	add.w	r3, r5, #140	; 0x8c
    7776:	4618      	mov	r0, r3
    7778:	f01d ffac 	bl	256d4 <atomic_get>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    777c:	f3bf 8f5b 	dmb	ish
    7780:	f000 0005 	and.w	r0, r0, #5
    7784:	e853 2f00 	ldrex	r2, [r3]
    7788:	e843 0100 	strex	r1, r0, [r3]
    778c:	2900      	cmp	r1, #0
    778e:	d1f9      	bne.n	7784 <bt_init+0x40>
    7790:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    7794:	9801      	ldr	r0, [sp, #4]
    7796:	f016 fe7b 	bl	1e490 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    779a:	aa01      	add	r2, sp, #4
    779c:	2100      	movs	r1, #0
    779e:	f241 0003 	movw	r0, #4099	; 0x1003
    77a2:	f7ff fc4b 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    77a6:	4604      	mov	r4, r0
    77a8:	2800      	cmp	r0, #0
    77aa:	d153      	bne.n	7854 <bt_init+0x110>
	read_local_features_complete(rsp);
    77ac:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    77ae:	48a0      	ldr	r0, [pc, #640]	; (7a30 <bt_init+0x2ec>)
    77b0:	6899      	ldr	r1, [r3, #8]
    77b2:	2208      	movs	r2, #8
    77b4:	3101      	adds	r1, #1
    77b6:	f01d fc6b 	bl	25090 <memcpy>
	net_buf_unref(rsp);
    77ba:	9801      	ldr	r0, [sp, #4]
    77bc:	f016 fe68 	bl	1e490 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    77c0:	4621      	mov	r1, r4
    77c2:	aa01      	add	r2, sp, #4
    77c4:	f241 0001 	movw	r0, #4097	; 0x1001
    77c8:	f7ff fc38 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    77cc:	4604      	mov	r4, r0
    77ce:	2800      	cmp	r0, #0
    77d0:	d140      	bne.n	7854 <bt_init+0x110>
	read_local_ver_complete(rsp);
    77d2:	9801      	ldr	r0, [sp, #4]
    77d4:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    77d6:	785a      	ldrb	r2, [r3, #1]
    77d8:	f885 202b 	strb.w	r2, [r5, #43]	; 0x2b
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    77dc:	78d9      	ldrb	r1, [r3, #3]
    77de:	789a      	ldrb	r2, [r3, #2]
    77e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    77e4:	85ea      	strh	r2, [r5, #46]	; 0x2e
	bt_dev.lmp_version = rp->lmp_version;
    77e6:	791a      	ldrb	r2, [r3, #4]
    77e8:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    77ec:	7a19      	ldrb	r1, [r3, #8]
    77ee:	79da      	ldrb	r2, [r3, #7]
    77f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    77f4:	862a      	strh	r2, [r5, #48]	; 0x30
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    77f6:	795a      	ldrb	r2, [r3, #5]
    77f8:	799b      	ldrb	r3, [r3, #6]
    77fa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    77fe:	866b      	strh	r3, [r5, #50]	; 0x32
	net_buf_unref(rsp);
    7800:	f016 fe46 	bl	1e490 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    7804:	4621      	mov	r1, r4
    7806:	aa01      	add	r2, sp, #4
    7808:	f241 0002 	movw	r0, #4098	; 0x1002
    780c:	f7ff fc16 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    7810:	4604      	mov	r4, r0
    7812:	b9f8      	cbnz	r0, 7854 <bt_init+0x110>
	read_supported_commands_complete(rsp);
    7814:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    7816:	4887      	ldr	r0, [pc, #540]	; (7a34 <bt_init+0x2f0>)
    7818:	6899      	ldr	r1, [r3, #8]
    781a:	2240      	movs	r2, #64	; 0x40
    781c:	3101      	adds	r1, #1
    781e:	f01d fc37 	bl	25090 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
    7822:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
	net_buf_unref(rsp);
    7826:	9801      	ldr	r0, [sp, #4]
		bt_dev.supported_commands[34] |= 0x04;
    7828:	f043 0306 	orr.w	r3, r3, #6
    782c:	f885 305e 	strb.w	r3, [r5, #94]	; 0x5e
	net_buf_unref(rsp);
    7830:	f016 fe2e 	bl	1e490 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    7834:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    7838:	0658      	lsls	r0, r3, #25
    783a:	d40e      	bmi.n	785a <bt_init+0x116>
    783c:	4b7e      	ldr	r3, [pc, #504]	; (7a38 <bt_init+0x2f4>)
    783e:	497f      	ldr	r1, [pc, #508]	; (7a3c <bt_init+0x2f8>)
		BT_ERR("Non-LE capable controller detected!");
    7840:	487f      	ldr	r0, [pc, #508]	; (7a40 <bt_init+0x2fc>)
    7842:	1ac9      	subs	r1, r1, r3
    7844:	08c9      	lsrs	r1, r1, #3
    7846:	0189      	lsls	r1, r1, #6
    7848:	f041 0101 	orr.w	r1, r1, #1
    784c:	f01b fdae 	bl	233ac <log_0>
		return -ENODEV;
    7850:	f06f 0412 	mvn.w	r4, #18
}
    7854:	4620      	mov	r0, r4
    7856:	b006      	add	sp, #24
    7858:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    785a:	4621      	mov	r1, r4
    785c:	aa01      	add	r2, sp, #4
    785e:	f242 0003 	movw	r0, #8195	; 0x2003
    7862:	f7ff fbeb 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    7866:	4604      	mov	r4, r0
    7868:	2800      	cmp	r0, #0
    786a:	d1f3      	bne.n	7854 <bt_init+0x110>
	read_le_features_complete(rsp);
    786c:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    786e:	4875      	ldr	r0, [pc, #468]	; (7a44 <bt_init+0x300>)
    7870:	6899      	ldr	r1, [r3, #8]
    7872:	2208      	movs	r2, #8
    7874:	3101      	adds	r1, #1
    7876:	f01d fc0b 	bl	25090 <memcpy>
	net_buf_unref(rsp);
    787a:	9801      	ldr	r0, [sp, #4]
    787c:	f016 fe08 	bl	1e490 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    7880:	4621      	mov	r1, r4
    7882:	aa01      	add	r2, sp, #4
    7884:	f242 0002 	movw	r0, #8194	; 0x2002
    7888:	f7ff fbd8 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    788c:	4604      	mov	r4, r0
    788e:	2800      	cmp	r0, #0
    7890:	d1e0      	bne.n	7854 <bt_init+0x110>
	le_read_buffer_size_complete(rsp);
    7892:	9b01      	ldr	r3, [sp, #4]
    7894:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    7896:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    789a:	f8a5 20a0 	strh.w	r2, [r5, #160]	; 0xa0
    789e:	b291      	uxth	r1, r2
	if (!bt_dev.le.mtu) {
    78a0:	b121      	cbz	r1, 78ac <bt_init+0x168>
	k_sem_init(&bt_dev.le.pkts, rp->le_max_num, rp->le_max_num);
    78a2:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    78a4:	4868      	ldr	r0, [pc, #416]	; (7a48 <bt_init+0x304>)
    78a6:	4611      	mov	r1, r2
    78a8:	f020 fd5d 	bl	28366 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    78ac:	9801      	ldr	r0, [sp, #4]
    78ae:	f016 fdef 	bl	1e490 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    78b2:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
    78b6:	f016 0620 	ands.w	r6, r6, #32
    78ba:	f000 8099 	beq.w	79f0 <bt_init+0x2ac>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    78be:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
    78c2:	0719      	lsls	r1, r3, #28
    78c4:	f100 80c6 	bmi.w	7a54 <bt_init+0x310>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    78c8:	2108      	movs	r1, #8
    78ca:	f242 0001 	movw	r0, #8193	; 0x2001
    78ce:	f7ff fa3d 	bl	6d4c <bt_hci_cmd_create>
	if (!buf) {
    78d2:	4604      	mov	r4, r0
    78d4:	2800      	cmp	r0, #0
    78d6:	f000 8092 	beq.w	79fe <bt_init+0x2ba>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    78da:	2108      	movs	r1, #8
    78dc:	4408      	add	r0, r1
    78de:	f016 fe9d 	bl	1e61c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    78e2:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    78e6:	f895 205e 	ldrb.w	r2, [r5, #94]	; 0x5e
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    78ea:	f013 0f02 	tst.w	r3, #2
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    78ee:	f002 0206 	and.w	r2, r2, #6
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    78f2:	bf0c      	ite	eq
    78f4:	230f      	moveq	r3, #15
    78f6:	232f      	movne	r3, #47	; 0x2f
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    78f8:	2a06      	cmp	r2, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    78fa:	bf08      	it	eq
    78fc:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	dst[0] = val;
    7900:	2200      	movs	r2, #0
    7902:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    7904:	0a1b      	lsrs	r3, r3, #8
    7906:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    7908:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    790a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    790c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    790e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    7910:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    7912:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    7914:	4621      	mov	r1, r4
    7916:	f242 0001 	movw	r0, #8193	; 0x2001
    791a:	f7ff fb8f 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    791e:	4604      	mov	r4, r0
    7920:	2800      	cmp	r0, #0
    7922:	d197      	bne.n	7854 <bt_init+0x110>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    7924:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    7928:	069a      	lsls	r2, r3, #26
    792a:	d41d      	bmi.n	7968 <bt_init+0x224>
	if (bt_dev.le.mtu) {
    792c:	f8b5 10a0 	ldrh.w	r1, [r5, #160]	; 0xa0
    7930:	b9d1      	cbnz	r1, 7968 <bt_init+0x224>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    7932:	aa01      	add	r2, sp, #4
    7934:	f241 0005 	movw	r0, #4101	; 0x1005
    7938:	f7ff fb80 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    793c:	4604      	mov	r4, r0
    793e:	2800      	cmp	r0, #0
    7940:	d188      	bne.n	7854 <bt_init+0x110>
	if (bt_dev.le.mtu) {
    7942:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    7946:	b963      	cbnz	r3, 7962 <bt_init+0x21e>
	read_buffer_size_complete(rsp);
    7948:	9b01      	ldr	r3, [sp, #4]
    794a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    794c:	785a      	ldrb	r2, [r3, #1]
    794e:	7899      	ldrb	r1, [r3, #2]
    7950:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    7954:	f8a5 20a0 	strh.w	r2, [r5, #160]	; 0xa0
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    7958:	889a      	ldrh	r2, [r3, #4]
    795a:	483b      	ldr	r0, [pc, #236]	; (7a48 <bt_init+0x304>)
    795c:	4611      	mov	r1, r2
    795e:	f020 fd02 	bl	28366 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    7962:	9801      	ldr	r0, [sp, #4]
    7964:	f016 fd94 	bl	1e490 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    7968:	2108      	movs	r1, #8
    796a:	f640 4001 	movw	r0, #3073	; 0xc01
    796e:	f7ff f9ed 	bl	6d4c <bt_hci_cmd_create>
	if (!buf) {
    7972:	4604      	mov	r4, r0
    7974:	2800      	cmp	r0, #0
    7976:	d042      	beq.n	79fe <bt_init+0x2ba>
	ev = net_buf_add(buf, sizeof(*ev));
    7978:	2108      	movs	r1, #8
    797a:	4408      	add	r0, r1
    797c:	f016 fe4e 	bl	1e61c <net_buf_simple_add>
	dst[0] = val;
    7980:	2310      	movs	r3, #16
    7982:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    7984:	2388      	movs	r3, #136	; 0x88
    7986:	7043      	strb	r3, [r0, #1]
    7988:	2302      	movs	r3, #2
	dst[0] = val;
    798a:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    798c:	70c3      	strb	r3, [r0, #3]
    798e:	2320      	movs	r3, #32
	dst[0] = val;
    7990:	7082      	strb	r2, [r0, #2]
    7992:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    7994:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    7996:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    7998:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    799a:	4621      	mov	r1, r4
    799c:	f640 4001 	movw	r0, #3073	; 0xc01
    79a0:	f7ff fb4c 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    79a4:	4604      	mov	r4, r0
    79a6:	2800      	cmp	r0, #0
    79a8:	f47f af54 	bne.w	7854 <bt_init+0x110>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    79ac:	4601      	mov	r1, r0
    79ae:	466a      	mov	r2, sp
    79b0:	f64f 4001 	movw	r0, #64513	; 0xfc01
    79b4:	f7ff fb42 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    79b8:	4e20      	ldr	r6, [pc, #128]	; (7a3c <bt_init+0x2f8>)
    79ba:	4b1f      	ldr	r3, [pc, #124]	; (7a38 <bt_init+0x2f4>)
    79bc:	1af6      	subs	r6, r6, r3
    79be:	08f6      	lsrs	r6, r6, #3
    79c0:	01b6      	lsls	r6, r6, #6
    79c2:	2800      	cmp	r0, #0
    79c4:	d05a      	beq.n	7a7c <bt_init+0x338>
		BT_WARN("Vendor HCI extensions not available");
    79c6:	4821      	ldr	r0, [pc, #132]	; (7a4c <bt_init+0x308>)
    79c8:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
    79cc:	f01b fcee 	bl	233ac <log_0>
		err = bt_conn_init();
    79d0:	f001 fd40 	bl	9454 <bt_conn_init>
		if (err) {
    79d4:	4604      	mov	r4, r0
    79d6:	2800      	cmp	r0, #0
    79d8:	f47f af3c 	bne.w	7854 <bt_init+0x110>
		if (!bt_dev.id_count) {
    79dc:	79eb      	ldrb	r3, [r5, #7]
    79de:	2b00      	cmp	r3, #0
    79e0:	f040 80b9 	bne.w	7b56 <bt_init+0x412>
			BT_INFO("No ID address. App must call settings_load()");
    79e4:	481a      	ldr	r0, [pc, #104]	; (7a50 <bt_init+0x30c>)
    79e6:	f046 0103 	orr.w	r1, r6, #3
    79ea:	f01b fcdf 	bl	233ac <log_0>
			return 0;
    79ee:	e731      	b.n	7854 <bt_init+0x110>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    79f0:	2102      	movs	r1, #2
    79f2:	f640 406d 	movw	r0, #3181	; 0xc6d
    79f6:	f7ff f9a9 	bl	6d4c <bt_hci_cmd_create>
		if (!buf) {
    79fa:	4604      	mov	r4, r0
    79fc:	b910      	cbnz	r0, 7a04 <bt_init+0x2c0>
		return -ENOBUFS;
    79fe:	f06f 0436 	mvn.w	r4, #54	; 0x36
    7a02:	e727      	b.n	7854 <bt_init+0x110>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    7a04:	2102      	movs	r1, #2
    7a06:	3008      	adds	r0, #8
    7a08:	f016 fe08 	bl	1e61c <net_buf_simple_add>
		cp_le->le = 0x01;
    7a0c:	2301      	movs	r3, #1
    7a0e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    7a10:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    7a12:	4621      	mov	r1, r4
    7a14:	4632      	mov	r2, r6
    7a16:	f640 406d 	movw	r0, #3181	; 0xc6d
    7a1a:	f7ff fb0f 	bl	703c <bt_hci_cmd_send_sync>
		if (err) {
    7a1e:	4604      	mov	r4, r0
    7a20:	2800      	cmp	r0, #0
    7a22:	f43f af4c 	beq.w	78be <bt_init+0x17a>
    7a26:	e715      	b.n	7854 <bt_init+0x110>
    7a28:	200067d0 	.word	0x200067d0
    7a2c:	20000504 	.word	0x20000504
    7a30:	20006804 	.word	0x20006804
    7a34:	2000680c 	.word	0x2000680c
    7a38:	00028868 	.word	0x00028868
    7a3c:	00028928 	.word	0x00028928
    7a40:	0002af2c 	.word	0x0002af2c
    7a44:	20006860 	.word	0x20006860
    7a48:	20006874 	.word	0x20006874
    7a4c:	0002af50 	.word	0x0002af50
    7a50:	0002b024 	.word	0x0002b024
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    7a54:	aa01      	add	r2, sp, #4
    7a56:	2100      	movs	r1, #0
    7a58:	f242 001c 	movw	r0, #8220	; 0x201c
    7a5c:	f7ff faee 	bl	703c <bt_hci_cmd_send_sync>
		if (err) {
    7a60:	4604      	mov	r4, r0
    7a62:	2800      	cmp	r0, #0
    7a64:	f47f aef6 	bne.w	7854 <bt_init+0x110>
		le_read_supp_states_complete(rsp);
    7a68:	9801      	ldr	r0, [sp, #4]
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    7a6a:	6883      	ldr	r3, [r0, #8]
    7a6c:	f853 2f01 	ldr.w	r2, [r3, #1]!
    7a70:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    7a72:	e9c5 2326 	strd	r2, r3, [r5, #152]	; 0x98
		net_buf_unref(rsp);
    7a76:	f016 fd0b 	bl	1e490 <net_buf_unref>
    7a7a:	e725      	b.n	78c8 <bt_init+0x184>
	rp.info = (void *)rsp->data;
    7a7c:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
    7a7e:	4839      	ldr	r0, [pc, #228]	; (7b64 <bt_init+0x420>)
	rp.info = (void *)rsp->data;
    7a80:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    7a82:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    7a86:	2a03      	cmp	r2, #3
		return plat_str[platform];
    7a88:	bf96      	itet	ls
    7a8a:	4937      	ldrls	r1, [pc, #220]	; (7b68 <bt_init+0x424>)
	return "unknown";
    7a8c:	4937      	ldrhi	r1, [pc, #220]	; (7b6c <bt_init+0x428>)
		return plat_str[platform];
    7a8e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    7a92:	f046 0303 	orr.w	r3, r6, #3
    7a96:	f01b fcaa 	bl	233ee <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    7a9a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    7a9e:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    7aa2:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    7aa4:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    7aa8:	d12e      	bne.n	7b08 <bt_init+0x3c4>
	if (variant < ARRAY_SIZE(nordic_str)) {
    7aaa:	2a03      	cmp	r2, #3
    7aac:	d82c      	bhi.n	7b08 <bt_init+0x3c4>
		return nordic_str[variant];
    7aae:	4930      	ldr	r1, [pc, #192]	; (7b70 <bt_init+0x42c>)
    7ab0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    7ab4:	482f      	ldr	r0, [pc, #188]	; (7b74 <bt_init+0x430>)
    7ab6:	f01b fc9a 	bl	233ee <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    7aba:	7962      	ldrb	r2, [r4, #5]
    7abc:	482e      	ldr	r0, [pc, #184]	; (7b78 <bt_init+0x434>)
	if (variant < ARRAY_SIZE(var_str)) {
    7abe:	2a03      	cmp	r2, #3
		return var_str[variant];
    7ac0:	bf96      	itet	ls
    7ac2:	492e      	ldrls	r1, [pc, #184]	; (7b7c <bt_init+0x438>)
	return "unknown";
    7ac4:	4929      	ldrhi	r1, [pc, #164]	; (7b6c <bt_init+0x428>)
		return var_str[variant];
    7ac6:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    7aca:	e9cd 1201 	strd	r1, r2, [sp, #4]
    7ace:	79a2      	ldrb	r2, [r4, #6]
    7ad0:	9203      	str	r2, [sp, #12]
    7ad2:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    7ad6:	9204      	str	r2, [sp, #16]
    7ad8:	f8d4 2009 	ldr.w	r2, [r4, #9]
    7adc:	9205      	str	r2, [sp, #20]
    7ade:	f046 0303 	orr.w	r3, r6, #3
    7ae2:	2205      	movs	r2, #5
    7ae4:	a901      	add	r1, sp, #4
    7ae6:	f01b fcb7 	bl	23458 <log_n>
	net_buf_unref(rsp);
    7aea:	9800      	ldr	r0, [sp, #0]
    7aec:	f016 fcd0 	bl	1e490 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    7af0:	466a      	mov	r2, sp
    7af2:	2100      	movs	r1, #0
    7af4:	f64f 4002 	movw	r0, #64514	; 0xfc02
    7af8:	f7ff faa0 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    7afc:	4604      	mov	r4, r0
    7afe:	b128      	cbz	r0, 7b0c <bt_init+0x3c8>
		BT_WARN("Failed to read supported vendor commands");
    7b00:	481f      	ldr	r0, [pc, #124]	; (7b80 <bt_init+0x43c>)
    7b02:	f046 0102 	orr.w	r1, r6, #2
    7b06:	e761      	b.n	79cc <bt_init+0x288>
		return "unknown";
    7b08:	4918      	ldr	r1, [pc, #96]	; (7b6c <bt_init+0x428>)
    7b0a:	e7d3      	b.n	7ab4 <bt_init+0x370>
	rp.cmds = (void *)rsp->data;
    7b0c:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    7b0e:	481d      	ldr	r0, [pc, #116]	; (7b84 <bt_init+0x440>)
    7b10:	6899      	ldr	r1, [r3, #8]
    7b12:	2202      	movs	r2, #2
    7b14:	3101      	adds	r1, #1
    7b16:	f01d fabb 	bl	25090 <memcpy>
	net_buf_unref(rsp);
    7b1a:	9800      	ldr	r0, [sp, #0]
    7b1c:	f016 fcb8 	bl	1e490 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    7b20:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    7b24:	075b      	lsls	r3, r3, #29
    7b26:	f57f af53 	bpl.w	79d0 <bt_init+0x28c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    7b2a:	466a      	mov	r2, sp
    7b2c:	4621      	mov	r1, r4
    7b2e:	f64f 4003 	movw	r0, #64515	; 0xfc03
    7b32:	f7ff fa83 	bl	703c <bt_hci_cmd_send_sync>
		if (err) {
    7b36:	b118      	cbz	r0, 7b40 <bt_init+0x3fc>
			BT_WARN("Failed to read supported vendor features");
    7b38:	4813      	ldr	r0, [pc, #76]	; (7b88 <bt_init+0x444>)
    7b3a:	f046 0102 	orr.w	r1, r6, #2
    7b3e:	e745      	b.n	79cc <bt_init+0x288>
		rp.feat = (void *)rsp->data;
    7b40:	9b00      	ldr	r3, [sp, #0]
		memcpy(bt_dev.vs_features, rp.feat->features,
    7b42:	4812      	ldr	r0, [pc, #72]	; (7b8c <bt_init+0x448>)
    7b44:	6899      	ldr	r1, [r3, #8]
    7b46:	2201      	movs	r2, #1
    7b48:	4411      	add	r1, r2
    7b4a:	f01d faa1 	bl	25090 <memcpy>
		net_buf_unref(rsp);
    7b4e:	9800      	ldr	r0, [sp, #0]
    7b50:	f016 fc9e 	bl	1e490 <net_buf_unref>
    7b54:	e73c      	b.n	79d0 <bt_init+0x28c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7b56:	2104      	movs	r1, #4
    7b58:	480d      	ldr	r0, [pc, #52]	; (7b90 <bt_init+0x44c>)
    7b5a:	f01d fdc4 	bl	256e6 <atomic_or>
	bt_finalize_init();
    7b5e:	f7ff fd81 	bl	7664 <bt_finalize_init>
	return 0;
    7b62:	e677      	b.n	7854 <bt_init+0x110>
    7b64:	0002af74 	.word	0x0002af74
    7b68:	00028e98 	.word	0x00028e98
    7b6c:	0002ab91 	.word	0x0002ab91
    7b70:	00028e70 	.word	0x00028e70
    7b74:	0002af8d 	.word	0x0002af8d
    7b78:	0002afa5 	.word	0x0002afa5
    7b7c:	00028ec8 	.word	0x00028ec8
    7b80:	0002afd2 	.word	0x0002afd2
    7b84:	2000684d 	.word	0x2000684d
    7b88:	0002affb 	.word	0x0002affb
    7b8c:	2000684c 	.word	0x2000684c
    7b90:	2000685c 	.word	0x2000685c

00007b94 <init_work>:
{
    7b94:	b510      	push	{r4, lr}
	err = bt_init();
    7b96:	f7ff fdd5 	bl	7744 <bt_init>
	if (ready_cb) {
    7b9a:	4b03      	ldr	r3, [pc, #12]	; (7ba8 <init_work+0x14>)
    7b9c:	681b      	ldr	r3, [r3, #0]
    7b9e:	b113      	cbz	r3, 7ba6 <init_work+0x12>
}
    7ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    7ba4:	4718      	bx	r3
}
    7ba6:	bd10      	pop	{r4, pc}
    7ba8:	200004f8 	.word	0x200004f8

00007bac <bt_enable>:
{
    7bac:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    7bae:	4d30      	ldr	r5, [pc, #192]	; (7c70 <bt_enable+0xc4>)
    7bb0:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
{
    7bb4:	b086      	sub	sp, #24
    7bb6:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    7bb8:	b973      	cbnz	r3, 7bd8 <bt_enable+0x2c>
    7bba:	4b2e      	ldr	r3, [pc, #184]	; (7c74 <bt_enable+0xc8>)
    7bbc:	492e      	ldr	r1, [pc, #184]	; (7c78 <bt_enable+0xcc>)
		BT_ERR("No HCI driver registered");
    7bbe:	482f      	ldr	r0, [pc, #188]	; (7c7c <bt_enable+0xd0>)
    7bc0:	1ac9      	subs	r1, r1, r3
    7bc2:	08c9      	lsrs	r1, r1, #3
    7bc4:	0189      	lsls	r1, r1, #6
    7bc6:	f041 0101 	orr.w	r1, r1, #1
    7bca:	f01b fbef 	bl	233ac <log_0>
		return -ENODEV;
    7bce:	f06f 0412 	mvn.w	r4, #18
}
    7bd2:	4620      	mov	r0, r4
    7bd4:	b006      	add	sp, #24
    7bd6:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    7bd8:	2100      	movs	r1, #0
    7bda:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    7bde:	f01d fd91 	bl	25704 <atomic_test_and_set_bit>
    7be2:	2800      	cmp	r0, #0
    7be4:	d140      	bne.n	7c68 <bt_enable+0xbc>
		err = bt_settings_init();
    7be6:	f7fe fbbf 	bl	6368 <bt_settings_init>
		if (err) {
    7bea:	4604      	mov	r4, r0
    7bec:	2800      	cmp	r0, #0
    7bee:	d1f0      	bne.n	7bd2 <bt_enable+0x26>
	ready_cb = cb;
    7bf0:	4b23      	ldr	r3, [pc, #140]	; (7c80 <bt_enable+0xd4>)
    7bf2:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7bf4:	f06f 0308 	mvn.w	r3, #8
    7bf8:	e9cd 0302 	strd	r0, r3, [sp, #8]
    7bfc:	e9cd 0004 	strd	r0, r0, [sp, #16]
    7c00:	e9cd 0000 	strd	r0, r0, [sp]
    7c04:	4b1f      	ldr	r3, [pc, #124]	; (7c84 <bt_enable+0xd8>)
    7c06:	4920      	ldr	r1, [pc, #128]	; (7c88 <bt_enable+0xdc>)
    7c08:	4820      	ldr	r0, [pc, #128]	; (7c8c <bt_enable+0xe0>)
    7c0a:	f44f 7220 	mov.w	r2, #640	; 0x280
    7c0e:	f01a f85d 	bl	21ccc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    7c12:	491f      	ldr	r1, [pc, #124]	; (7c90 <bt_enable+0xe4>)
    7c14:	481d      	ldr	r0, [pc, #116]	; (7c8c <bt_enable+0xe0>)
    7c16:	f01a f81f 	bl	21c58 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    7c1a:	f7fe fa45 	bl	60a8 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    7c1e:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
    7c22:	68db      	ldr	r3, [r3, #12]
    7c24:	4798      	blx	r3
	if (err) {
    7c26:	4604      	mov	r4, r0
    7c28:	b158      	cbz	r0, 7c42 <bt_enable+0x96>
    7c2a:	4b12      	ldr	r3, [pc, #72]	; (7c74 <bt_enable+0xc8>)
    7c2c:	4a12      	ldr	r2, [pc, #72]	; (7c78 <bt_enable+0xcc>)
    7c2e:	1ad2      	subs	r2, r2, r3
    7c30:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    7c32:	0192      	lsls	r2, r2, #6
    7c34:	4601      	mov	r1, r0
    7c36:	f042 0201 	orr.w	r2, r2, #1
    7c3a:	4816      	ldr	r0, [pc, #88]	; (7c94 <bt_enable+0xe8>)
    7c3c:	f01b fbc3 	bl	233c6 <log_1>
		return err;
    7c40:	e7c7      	b.n	7bd2 <bt_enable+0x26>
	if (!cb) {
    7c42:	b926      	cbnz	r6, 7c4e <bt_enable+0xa2>
}
    7c44:	b006      	add	sp, #24
    7c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    7c4a:	f7ff bd7b 	b.w	7744 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7c4e:	4601      	mov	r1, r0
    7c50:	f105 0088 	add.w	r0, r5, #136	; 0x88
    7c54:	f01d fd56 	bl	25704 <atomic_test_and_set_bit>
    7c58:	2800      	cmp	r0, #0
    7c5a:	d1ba      	bne.n	7bd2 <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    7c5c:	480e      	ldr	r0, [pc, #56]	; (7c98 <bt_enable+0xec>)
    7c5e:	f105 0180 	add.w	r1, r5, #128	; 0x80
    7c62:	f020 fb3d 	bl	282e0 <k_queue_append>
    7c66:	e7b4      	b.n	7bd2 <bt_enable+0x26>
		return -EALREADY;
    7c68:	f06f 0444 	mvn.w	r4, #68	; 0x44
    7c6c:	e7b1      	b.n	7bd2 <bt_enable+0x26>
    7c6e:	bf00      	nop
    7c70:	200067d0 	.word	0x200067d0
    7c74:	00028868 	.word	0x00028868
    7c78:	00028928 	.word	0x00028928
    7c7c:	0002b051 	.word	0x0002b051
    7c80:	200004f8 	.word	0x200004f8
    7c84:	00006869 	.word	0x00006869
    7c88:	20003300 	.word	0x20003300
    7c8c:	20000508 	.word	0x20000508
    7c90:	0002b06a 	.word	0x0002b06a
    7c94:	0002b070 	.word	0x0002b070
    7c98:	20001c08 	.word	0x20001c08

00007c9c <bt_set_name>:
{
    7c9c:	b530      	push	{r4, r5, lr}
    7c9e:	b085      	sub	sp, #20
    7ca0:	4604      	mov	r4, r0
	size_t len = strlen(name);
    7ca2:	f01d f9c3 	bl	2502c <strlen>
	if (len >= sizeof(bt_dev.name)) {
    7ca6:	281c      	cmp	r0, #28
	size_t len = strlen(name);
    7ca8:	4605      	mov	r5, r0
	if (len >= sizeof(bt_dev.name)) {
    7caa:	d835      	bhi.n	7d18 <bt_set_name+0x7c>
	if (!strcmp(bt_dev.name, name)) {
    7cac:	481c      	ldr	r0, [pc, #112]	; (7d20 <bt_set_name+0x84>)
    7cae:	4621      	mov	r1, r4
    7cb0:	f01d f9c3 	bl	2503a <strcmp>
    7cb4:	b910      	cbnz	r0, 7cbc <bt_set_name+0x20>
	return 0;
    7cb6:	2000      	movs	r0, #0
}
    7cb8:	b005      	add	sp, #20
    7cba:	bd30      	pop	{r4, r5, pc}
	strncpy(bt_dev.name, name, sizeof(bt_dev.name));
    7cbc:	221d      	movs	r2, #29
    7cbe:	4621      	mov	r1, r4
    7cc0:	4817      	ldr	r0, [pc, #92]	; (7d20 <bt_set_name+0x84>)
    7cc2:	f01d f992 	bl	24fea <strncpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7cc6:	4817      	ldr	r0, [pc, #92]	; (7d24 <bt_set_name+0x88>)
    7cc8:	f01d fd04 	bl	256d4 <atomic_get>
	if (adv && atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING_NAME)) {
    7ccc:	0643      	lsls	r3, r0, #25
    7cce:	d511      	bpl.n	7cf4 <bt_set_name+0x58>
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    7cd0:	2309      	movs	r3, #9
    7cd2:	4620      	mov	r0, r4
    7cd4:	f88d 3000 	strb.w	r3, [sp]
    7cd8:	f01d f9a8 	bl	2502c <strlen>
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    7cdc:	2201      	movs	r2, #1
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    7cde:	f88d 0001 	strb.w	r0, [sp, #1]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    7ce2:	a902      	add	r1, sp, #8
    7ce4:	f242 0009 	movw	r0, #8201	; 0x2009
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    7ce8:	9401      	str	r4, [sp, #4]
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    7cea:	f8cd d008 	str.w	sp, [sp, #8]
    7cee:	9203      	str	r2, [sp, #12]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    7cf0:	f7ff fa42 	bl	7178 <hci_set_ad>
		err = settings_save_one("bt/name", bt_dev.name, len);
    7cf4:	490a      	ldr	r1, [pc, #40]	; (7d20 <bt_set_name+0x84>)
    7cf6:	480c      	ldr	r0, [pc, #48]	; (7d28 <bt_set_name+0x8c>)
    7cf8:	462a      	mov	r2, r5
    7cfa:	f7fb fcbf 	bl	367c <settings_save_one>
		if (err) {
    7cfe:	2800      	cmp	r0, #0
    7d00:	d0d9      	beq.n	7cb6 <bt_set_name+0x1a>
    7d02:	4b0a      	ldr	r3, [pc, #40]	; (7d2c <bt_set_name+0x90>)
    7d04:	490a      	ldr	r1, [pc, #40]	; (7d30 <bt_set_name+0x94>)
			BT_WARN("Unable to store name");
    7d06:	480b      	ldr	r0, [pc, #44]	; (7d34 <bt_set_name+0x98>)
    7d08:	1ac9      	subs	r1, r1, r3
    7d0a:	08c9      	lsrs	r1, r1, #3
    7d0c:	0189      	lsls	r1, r1, #6
    7d0e:	f041 0102 	orr.w	r1, r1, #2
    7d12:	f01b fb4b 	bl	233ac <log_0>
    7d16:	e7ce      	b.n	7cb6 <bt_set_name+0x1a>
		return -ENOMEM;
    7d18:	f06f 000b 	mvn.w	r0, #11
    7d1c:	e7cc      	b.n	7cb8 <bt_set_name+0x1c>
    7d1e:	bf00      	nop
    7d20:	200068c4 	.word	0x200068c4
    7d24:	2000685c 	.word	0x2000685c
    7d28:	0002b08c 	.word	0x0002b08c
    7d2c:	00028868 	.word	0x00028868
    7d30:	00028928 	.word	0x00028928
    7d34:	0002b094 	.word	0x0002b094

00007d38 <bt_get_name>:
}
    7d38:	4800      	ldr	r0, [pc, #0]	; (7d3c <bt_get_name+0x4>)
    7d3a:	4770      	bx	lr
    7d3c:	200068c4 	.word	0x200068c4

00007d40 <bt_id_create>:
{
    7d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7d42:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7d44:	4605      	mov	r5, r0
    7d46:	b918      	cbnz	r0, 7d50 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    7d48:	b34c      	cbz	r4, 7d9e <bt_id_create+0x5e>
		return -EINVAL;
    7d4a:	f06f 0415 	mvn.w	r4, #21
    7d4e:	e023      	b.n	7d98 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7d50:	2300      	movs	r3, #0
    7d52:	2207      	movs	r2, #7
    7d54:	4669      	mov	r1, sp
    7d56:	9300      	str	r3, [sp, #0]
    7d58:	f8cd 3003 	str.w	r3, [sp, #3]
    7d5c:	f01d f988 	bl	25070 <memcmp>
    7d60:	2800      	cmp	r0, #0
    7d62:	d0f1      	beq.n	7d48 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    7d64:	782b      	ldrb	r3, [r5, #0]
    7d66:	2b01      	cmp	r3, #1
    7d68:	d104      	bne.n	7d74 <bt_id_create+0x34>
    7d6a:	79ab      	ldrb	r3, [r5, #6]
    7d6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7d70:	2bc0      	cmp	r3, #192	; 0xc0
    7d72:	d00a      	beq.n	7d8a <bt_id_create+0x4a>
    7d74:	4b11      	ldr	r3, [pc, #68]	; (7dbc <bt_id_create+0x7c>)
    7d76:	4912      	ldr	r1, [pc, #72]	; (7dc0 <bt_id_create+0x80>)
			BT_ERR("Only static random identity address supported");
    7d78:	4812      	ldr	r0, [pc, #72]	; (7dc4 <bt_id_create+0x84>)
    7d7a:	1ac9      	subs	r1, r1, r3
    7d7c:	08c9      	lsrs	r1, r1, #3
    7d7e:	0189      	lsls	r1, r1, #6
    7d80:	f041 0101 	orr.w	r1, r1, #1
    7d84:	f01b fb12 	bl	233ac <log_0>
			return -EINVAL;
    7d88:	e7df      	b.n	7d4a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    7d8a:	4628      	mov	r0, r5
    7d8c:	f7fe fd52 	bl	6834 <id_find>
    7d90:	2800      	cmp	r0, #0
    7d92:	dbd9      	blt.n	7d48 <bt_id_create+0x8>
			return -EALREADY;
    7d94:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    7d98:	4620      	mov	r0, r4
    7d9a:	b003      	add	sp, #12
    7d9c:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    7d9e:	4b0a      	ldr	r3, [pc, #40]	; (7dc8 <bt_id_create+0x88>)
    7da0:	79dc      	ldrb	r4, [r3, #7]
    7da2:	2c01      	cmp	r4, #1
    7da4:	d006      	beq.n	7db4 <bt_id_create+0x74>
	new_id = bt_dev.id_count++;
    7da6:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    7da8:	4629      	mov	r1, r5
    7daa:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    7dac:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    7dae:	f7ff fb11 	bl	73d4 <id_create.isra.0>
	return new_id;
    7db2:	e7f1      	b.n	7d98 <bt_id_create+0x58>
		return -ENOMEM;
    7db4:	f06f 040b 	mvn.w	r4, #11
    7db8:	e7ee      	b.n	7d98 <bt_id_create+0x58>
    7dba:	bf00      	nop
    7dbc:	00028868 	.word	0x00028868
    7dc0:	00028928 	.word	0x00028928
    7dc4:	0002b0a9 	.word	0x0002b0a9
    7dc8:	200067d0 	.word	0x200067d0

00007dcc <bt_setup_public_id_addr>:
{
    7dcc:	b570      	push	{r4, r5, r6, lr}
    7dce:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    7dd0:	aa01      	add	r2, sp, #4
    7dd2:	2100      	movs	r1, #0
    7dd4:	f241 0009 	movw	r0, #4105	; 0x1009
    7dd8:	f7ff f930 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    7ddc:	4e1f      	ldr	r6, [pc, #124]	; (7e5c <bt_setup_public_id_addr+0x90>)
    7dde:	4604      	mov	r4, r0
    7de0:	b168      	cbz	r0, 7dfe <bt_setup_public_id_addr+0x32>
    7de2:	491f      	ldr	r1, [pc, #124]	; (7e60 <bt_setup_public_id_addr+0x94>)
    7de4:	4b1f      	ldr	r3, [pc, #124]	; (7e64 <bt_setup_public_id_addr+0x98>)
		BT_WARN("Failed to read public address");
    7de6:	4820      	ldr	r0, [pc, #128]	; (7e68 <bt_setup_public_id_addr+0x9c>)
    7de8:	1ac9      	subs	r1, r1, r3
    7dea:	08c9      	lsrs	r1, r1, #3
    7dec:	0189      	lsls	r1, r1, #6
    7dee:	f041 0102 	orr.w	r1, r1, #2
    7df2:	f01b fadb 	bl	233ac <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    7df6:	2300      	movs	r3, #0
    7df8:	71f3      	strb	r3, [r6, #7]
}
    7dfa:	b006      	add	sp, #24
    7dfc:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    7dfe:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    7e00:	689d      	ldr	r5, [r3, #8]
    7e02:	9004      	str	r0, [sp, #16]
    7e04:	3501      	adds	r5, #1
    7e06:	f8ad 0014 	strh.w	r0, [sp, #20]
	return memcmp(a, b, sizeof(*a));
    7e0a:	2206      	movs	r2, #6
    7e0c:	a904      	add	r1, sp, #16
    7e0e:	4628      	mov	r0, r5
    7e10:	f01d f92e 	bl	25070 <memcmp>
    7e14:	b918      	cbnz	r0, 7e1e <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    7e16:	9801      	ldr	r0, [sp, #4]
    7e18:	f016 fb3a 	bl	1e490 <net_buf_unref>
    7e1c:	e7eb      	b.n	7df6 <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    7e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e22:	2206      	movs	r2, #6
    7e24:	a902      	add	r1, sp, #8
    7e26:	4628      	mov	r0, r5
    7e28:	9302      	str	r3, [sp, #8]
    7e2a:	f8ad 300c 	strh.w	r3, [sp, #12]
    7e2e:	f01d f91f 	bl	25070 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    7e32:	2800      	cmp	r0, #0
    7e34:	d0ef      	beq.n	7e16 <bt_setup_public_id_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
    7e36:	4629      	mov	r1, r5
    7e38:	2206      	movs	r2, #6
    7e3a:	f10d 0011 	add.w	r0, sp, #17
    7e3e:	f01d f927 	bl	25090 <memcpy>
	net_buf_unref(rsp);
    7e42:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    7e44:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    7e48:	f016 fb22 	bl	1e490 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    7e4c:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    7e4e:	a904      	add	r1, sp, #16
    7e50:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    7e52:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    7e54:	f7ff fabe 	bl	73d4 <id_create.isra.0>
    7e58:	e7cf      	b.n	7dfa <bt_setup_public_id_addr+0x2e>
    7e5a:	bf00      	nop
    7e5c:	200067d0 	.word	0x200067d0
    7e60:	00028928 	.word	0x00028928
    7e64:	00028868 	.word	0x00028868
    7e68:	0002b0d7 	.word	0x0002b0d7

00007e6c <bt_read_static_addr>:
{
    7e6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    7e70:	4b25      	ldr	r3, [pc, #148]	; (7f08 <bt_read_static_addr+0x9c>)
    7e72:	f893 407e 	ldrb.w	r4, [r3, #126]	; 0x7e
    7e76:	f014 0401 	ands.w	r4, r4, #1
{
    7e7a:	4607      	mov	r7, r0
    7e7c:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    7e7e:	d10a      	bne.n	7e96 <bt_read_static_addr+0x2a>
    7e80:	4922      	ldr	r1, [pc, #136]	; (7f0c <bt_read_static_addr+0xa0>)
    7e82:	4b23      	ldr	r3, [pc, #140]	; (7f10 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    7e84:	4823      	ldr	r0, [pc, #140]	; (7f14 <bt_read_static_addr+0xa8>)
    7e86:	1ac9      	subs	r1, r1, r3
    7e88:	08c9      	lsrs	r1, r1, #3
    7e8a:	0189      	lsls	r1, r1, #6
    7e8c:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
    7e90:	f01b fa8c 	bl	233ac <log_0>
    7e94:	e012      	b.n	7ebc <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    7e96:	aa01      	add	r2, sp, #4
    7e98:	2100      	movs	r1, #0
    7e9a:	f64f 4009 	movw	r0, #64521	; 0xfc09
    7e9e:	f7ff f8cd 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    7ea2:	4605      	mov	r5, r0
    7ea4:	b170      	cbz	r0, 7ec4 <bt_read_static_addr+0x58>
    7ea6:	4b1a      	ldr	r3, [pc, #104]	; (7f10 <bt_read_static_addr+0xa4>)
    7ea8:	4918      	ldr	r1, [pc, #96]	; (7f0c <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    7eaa:	481b      	ldr	r0, [pc, #108]	; (7f18 <bt_read_static_addr+0xac>)
    7eac:	1ac9      	subs	r1, r1, r3
    7eae:	08c9      	lsrs	r1, r1, #3
    7eb0:	0189      	lsls	r1, r1, #6
    7eb2:	f041 0102 	orr.w	r1, r1, #2
    7eb6:	f01b fa79 	bl	233ac <log_0>
		return 0;
    7eba:	2400      	movs	r4, #0
}
    7ebc:	4620      	mov	r0, r4
    7ebe:	b002      	add	sp, #8
    7ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    7ec4:	9b01      	ldr	r3, [sp, #4]
    7ec6:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    7ec8:	785c      	ldrb	r4, [r3, #1]
    7eca:	42b4      	cmp	r4, r6
    7ecc:	bf28      	it	cs
    7ece:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    7ed0:	f04f 0816 	mov.w	r8, #22
    7ed4:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    7ed6:	42a5      	cmp	r5, r4
    7ed8:	db0d      	blt.n	7ef6 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    7eda:	9801      	ldr	r0, [sp, #4]
    7edc:	f016 fad8 	bl	1e490 <net_buf_unref>
	if (!cnt) {
    7ee0:	2c00      	cmp	r4, #0
    7ee2:	d1eb      	bne.n	7ebc <bt_read_static_addr+0x50>
    7ee4:	4909      	ldr	r1, [pc, #36]	; (7f0c <bt_read_static_addr+0xa0>)
    7ee6:	4b0a      	ldr	r3, [pc, #40]	; (7f10 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    7ee8:	480c      	ldr	r0, [pc, #48]	; (7f1c <bt_read_static_addr+0xb0>)
    7eea:	1ac9      	subs	r1, r1, r3
    7eec:	08c9      	lsrs	r1, r1, #3
    7eee:	0189      	lsls	r1, r1, #6
    7ef0:	f041 0102 	orr.w	r1, r1, #2
    7ef4:	e7cc      	b.n	7e90 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    7ef6:	fb08 7005 	mla	r0, r8, r5, r7
    7efa:	2216      	movs	r2, #22
    7efc:	4631      	mov	r1, r6
    7efe:	f01d f8c7 	bl	25090 <memcpy>
	for (i = 0; i < cnt; i++) {
    7f02:	3501      	adds	r5, #1
    7f04:	e7e7      	b.n	7ed6 <bt_read_static_addr+0x6a>
    7f06:	bf00      	nop
    7f08:	200067d0 	.word	0x200067d0
    7f0c:	00028928 	.word	0x00028928
    7f10:	00028868 	.word	0x00028868
    7f14:	0002b0f5 	.word	0x0002b0f5
    7f18:	0002b121 	.word	0x0002b121
    7f1c:	0002b141 	.word	0x0002b141

00007f20 <bt_setup_random_id_addr>:
{
    7f20:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
    7f22:	4d14      	ldr	r5, [pc, #80]	; (7f74 <bt_setup_random_id_addr+0x54>)
    7f24:	79ec      	ldrb	r4, [r5, #7]
{
    7f26:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    7f28:	b9f4      	cbnz	r4, 7f68 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    7f2a:	2101      	movs	r1, #1
    7f2c:	a802      	add	r0, sp, #8
    7f2e:	f7ff ff9d 	bl	7e6c <bt_read_static_addr>
    7f32:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    7f34:	b1c0      	cbz	r0, 7f68 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    7f36:	2716      	movs	r7, #22
    7f38:	e00f      	b.n	7f5a <bt_setup_random_id_addr+0x3a>
    7f3a:	ab02      	add	r3, sp, #8
    7f3c:	fb07 3106 	mla	r1, r7, r6, r3
    7f40:	2206      	movs	r2, #6
    7f42:	f10d 0001 	add.w	r0, sp, #1
    7f46:	f01d f8a3 	bl	25090 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    7f4a:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    7f4c:	4669      	mov	r1, sp
    7f4e:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    7f50:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    7f54:	f7ff fa3e 	bl	73d4 <id_create.isra.0>
			for (u8_t i = 0; i < bt_dev.id_count; i++) {
    7f58:	3401      	adds	r4, #1
    7f5a:	79eb      	ldrb	r3, [r5, #7]
    7f5c:	b2e6      	uxtb	r6, r4
    7f5e:	42b3      	cmp	r3, r6
    7f60:	d8eb      	bhi.n	7f3a <bt_setup_random_id_addr+0x1a>
			return 0;
    7f62:	2000      	movs	r0, #0
}
    7f64:	b009      	add	sp, #36	; 0x24
    7f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    7f68:	2100      	movs	r1, #0
    7f6a:	4608      	mov	r0, r1
    7f6c:	f7ff fee8 	bl	7d40 <bt_id_create>
    7f70:	e7f8      	b.n	7f64 <bt_setup_random_id_addr+0x44>
    7f72:	bf00      	nop
    7f74:	200067d0 	.word	0x200067d0

00007f78 <le_adv_set_random_addr>:
	}
}

int le_adv_set_random_addr(struct bt_le_ext_adv *adv, u32_t options,
			   bool dir_adv, u8_t *own_addr_type)
{
    7f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    7f7c:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    7f80:	7805      	ldrb	r5, [r0, #0]
{
    7f82:	461e      	mov	r6, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    7f84:	d019      	beq.n	7fba <le_adv_set_random_addr+0x42>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    7f86:	4f26      	ldr	r7, [pc, #152]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    7f88:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    7f8c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
    7f90:	5cfb      	ldrb	r3, [r7, r3]
    7f92:	2b01      	cmp	r3, #1
    7f94:	d007      	beq.n	7fa6 <le_adv_set_random_addr+0x2e>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    7f96:	eba8 0505 	sub.w	r5, r8, r5
		if (err) {
			return err;
		}
	}

	return 0;
    7f9a:	2400      	movs	r4, #0
			*own_addr_type = id_addr->type;
    7f9c:	5d7b      	ldrb	r3, [r7, r5]
    7f9e:	7033      	strb	r3, [r6, #0]
}
    7fa0:	4620      	mov	r0, r4
    7fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = set_adv_random_address(adv, &id_addr->a);
    7fa6:	2007      	movs	r0, #7
    7fa8:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    7fac:	4438      	add	r0, r7
    7fae:	f7ff f99d 	bl	72ec <set_random_address>
				if (err) {
    7fb2:	4604      	mov	r4, r0
    7fb4:	2800      	cmp	r0, #0
    7fb6:	d0ee      	beq.n	7f96 <le_adv_set_random_addr+0x1e>
    7fb8:	e7f2      	b.n	7fa0 <le_adv_set_random_addr+0x28>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    7fba:	f011 0104 	ands.w	r1, r1, #4
    7fbe:	d013      	beq.n	7fe8 <le_adv_set_random_addr+0x70>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    7fc0:	4f17      	ldr	r7, [pc, #92]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    7fc2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    7fc6:	ea4f 08c5 	mov.w	r8, r5, lsl #3
    7fca:	5cfb      	ldrb	r3, [r7, r3]
    7fcc:	2b01      	cmp	r3, #1
    7fce:	d106      	bne.n	7fde <le_adv_set_random_addr+0x66>
				err = set_adv_random_address(adv, &id_addr->a);
    7fd0:	2007      	movs	r0, #7
    7fd2:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    7fd6:	4438      	add	r0, r7
    7fd8:	f7ff f988 	bl	72ec <set_random_address>
    7fdc:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    7fde:	eba8 0505 	sub.w	r5, r8, r5
    7fe2:	5d7b      	ldrb	r3, [r7, r5]
    7fe4:	7033      	strb	r3, [r6, #0]
    7fe6:	e7db      	b.n	7fa0 <le_adv_set_random_addr+0x28>
    7fe8:	480e      	ldr	r0, [pc, #56]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    7fea:	f01d fb73 	bl	256d4 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    7fee:	0542      	lsls	r2, r0, #21
    7ff0:	d40a      	bmi.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
			bool scan_enabled = false;
    7ff2:	2500      	movs	r5, #0
			err = le_adv_set_private_addr(adv);
    7ff4:	f01d fbb1 	bl	2575a <le_adv_set_private_addr.isra.0>
    7ff8:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    7ffa:	2001      	movs	r0, #1
    7ffc:	7030      	strb	r0, [r6, #0]
			if (scan_enabled) {
    7ffe:	2d00      	cmp	r5, #0
    8000:	d0ce      	beq.n	7fa0 <le_adv_set_random_addr+0x28>
	return set_le_scan_enable_legacy(enable);
    8002:	f7ff f87d 	bl	7100 <set_le_scan_enable_legacy>
		if (err) {
    8006:	e7cb      	b.n	7fa0 <le_adv_set_random_addr+0x28>
    8008:	4806      	ldr	r0, [pc, #24]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    800a:	f01d fb63 	bl	256d4 <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    800e:	04c3      	lsls	r3, r0, #19
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8010:	f3c0 3500 	ubfx	r5, r0, #12, #1
    8014:	d5ed      	bpl.n	7ff2 <le_adv_set_random_addr+0x7a>
	return set_le_scan_enable_legacy(enable);
    8016:	4608      	mov	r0, r1
    8018:	f7ff f872 	bl	7100 <set_le_scan_enable_legacy>
    801c:	e7ea      	b.n	7ff4 <le_adv_set_random_addr+0x7c>
    801e:	bf00      	nop
    8020:	200067d0 	.word	0x200067d0
    8024:	2000685c 	.word	0x2000685c

00008028 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len,
			   const bt_addr_le_t *peer)
{
    8028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    802c:	b088      	sub	sp, #32
    802e:	4605      	mov	r5, r0
    8030:	9e11      	ldr	r6, [sp, #68]	; 0x44
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8032:	487a      	ldr	r0, [pc, #488]	; (821c <bt_le_adv_start_legacy+0x1f4>)
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (peer != NULL);
    8034:	f1b6 0a00 	subs.w	sl, r6, #0
{
    8038:	461f      	mov	r7, r3
	bool dir_adv = (peer != NULL);
    803a:	bf18      	it	ne
    803c:	f04f 0a01 	movne.w	sl, #1
{
    8040:	4688      	mov	r8, r1
    8042:	4691      	mov	r9, r2
    8044:	f01d fb46 	bl	256d4 <atomic_get>
	int err;
	struct bt_le_ext_adv *adv;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8048:	0783      	lsls	r3, r0, #30
    804a:	f140 80db 	bpl.w	8204 <bt_le_adv_start_legacy+0x1dc>
		return -EAGAIN;
	}

	if (!valid_adv_param(param, dir_adv)) {
    804e:	4651      	mov	r1, sl
    8050:	4628      	mov	r0, r5
    8052:	f7fe fe2d 	bl	6cb0 <valid_adv_param>
    8056:	2800      	cmp	r0, #0
    8058:	f000 80d7 	beq.w	820a <bt_le_adv_start_legacy+0x1e2>
    805c:	486f      	ldr	r0, [pc, #444]	; (821c <bt_le_adv_start_legacy+0x1f4>)
    805e:	f01d fb39 	bl	256d4 <atomic_get>
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    8062:	0684      	lsls	r4, r0, #26
    8064:	f100 80d4 	bmi.w	8210 <bt_le_adv_start_legacy+0x1e8>
    8068:	486c      	ldr	r0, [pc, #432]	; (821c <bt_le_adv_start_legacy+0x1f4>)
    806a:	f01d fb33 	bl	256d4 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
    806e:	03c0      	lsls	r0, r0, #15
    8070:	d402      	bmi.n	8078 <bt_le_adv_start_legacy+0x50>
    8072:	486a      	ldr	r0, [pc, #424]	; (821c <bt_le_adv_start_legacy+0x1f4>)
    8074:	f01d fb2e 	bl	256d4 <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    8078:	220f      	movs	r2, #15
    807a:	2100      	movs	r1, #0
    807c:	a804      	add	r0, sp, #16
    807e:	f01d f832 	bl	250e6 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    8082:	68ab      	ldr	r3, [r5, #8]
    8084:	f8ad 3010 	strh.w	r3, [sp, #16]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    8088:	68eb      	ldr	r3, [r5, #12]
	if (!adv) {
		BT_ERR("Legacy advertiser has no adv context");
		return -ENOMEM;
	}

	if (adv->id != param->id) {
    808a:	4c65      	ldr	r4, [pc, #404]	; (8220 <bt_le_adv_start_legacy+0x1f8>)
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    808c:	f8ad 3012 	strh.w	r3, [sp, #18]
	set_param.channel_map  = 0x07;
    8090:	2307      	movs	r3, #7
    8092:	f88d 301d 	strb.w	r3, [sp, #29]
	set_param.filter_policy = get_filter_policy(param->options);
    8096:	2300      	movs	r3, #0
	if (adv->id != param->id) {
    8098:	7d22      	ldrb	r2, [r4, #20]
	set_param.filter_policy = get_filter_policy(param->options);
    809a:	f88d 301e 	strb.w	r3, [sp, #30]
	if (adv->id != param->id) {
    809e:	782b      	ldrb	r3, [r5, #0]
    80a0:	429a      	cmp	r2, r3
    80a2:	d005      	beq.n	80b0 <bt_le_adv_start_legacy+0x88>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    80a4:	f46f 3100 	mvn.w	r1, #131072	; 0x20000
    80a8:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    80ac:	f01d fb35 	bl	2571a <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
    80b0:	782b      	ldrb	r3, [r5, #0]
    80b2:	7523      	strb	r3, [r4, #20]
	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    80b4:	6869      	ldr	r1, [r5, #4]
    80b6:	485b      	ldr	r0, [pc, #364]	; (8224 <bt_le_adv_start_legacy+0x1fc>)
    80b8:	f10d 0315 	add.w	r3, sp, #21
    80bc:	4652      	mov	r2, sl
    80be:	f7ff ff5b 	bl	7f78 <le_adv_set_random_addr>
				     &set_param.own_addr_type);
	if (err) {
    80c2:	4604      	mov	r4, r0
    80c4:	2800      	cmp	r0, #0
    80c6:	d172      	bne.n	81ae <bt_le_adv_start_legacy+0x186>
		return err;
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    80c8:	686b      	ldr	r3, [r5, #4]
    80ca:	07d9      	lsls	r1, r3, #31
    80cc:	d543      	bpl.n	8156 <bt_le_adv_start_legacy+0x12e>
		if (dir_adv) {
    80ce:	2e00      	cmp	r6, #0
    80d0:	d03e      	beq.n	8150 <bt_le_adv_start_legacy+0x128>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    80d2:	f013 0f10 	tst.w	r3, #16
    80d6:	bf14      	ite	ne
    80d8:	2304      	movne	r3, #4
    80da:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, peer);
    80dc:	4631      	mov	r1, r6
    80de:	f10d 0016 	add.w	r0, sp, #22
    80e2:	f88d 3014 	strb.w	r3, [sp, #20]
    80e6:	f01d fafb 	bl	256e0 <bt_addr_le_copy>
		} else {
			set_param.type = BT_HCI_ADV_NONCONN_IND;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    80ea:	210f      	movs	r1, #15
    80ec:	f242 0006 	movw	r0, #8198	; 0x2006
    80f0:	f7fe fe2c 	bl	6d4c <bt_hci_cmd_create>
	if (!buf) {
    80f4:	4604      	mov	r4, r0
    80f6:	2800      	cmp	r0, #0
    80f8:	f000 808d 	beq.w	8216 <bt_le_adv_start_legacy+0x1ee>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    80fc:	220f      	movs	r2, #15
    80fe:	a904      	add	r1, sp, #16
    8100:	3008      	adds	r0, #8
    8102:	f01f fef3 	bl	27eec <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    8106:	4621      	mov	r1, r4
    8108:	2200      	movs	r2, #0
    810a:	f242 0006 	movw	r0, #8198	; 0x2006
    810e:	f7fe ff95 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    8112:	4604      	mov	r4, r0
    8114:	2800      	cmp	r0, #0
    8116:	d14a      	bne.n	81ae <bt_le_adv_start_legacy+0x186>
		return err;
	}

	if (!dir_adv) {
    8118:	b336      	cbz	r6, 8168 <bt_le_adv_start_legacy+0x140>
	struct bt_conn *conn = NULL;
    811a:	2600      	movs	r6, #0
	return set_le_adv_enable_legacy(enable);
    811c:	2001      	movs	r0, #1
    811e:	f7ff f913 	bl	7348 <set_le_adv_enable_legacy>
			bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    8122:	4604      	mov	r4, r0
    8124:	2800      	cmp	r0, #0
    8126:	d04a      	beq.n	81be <bt_le_adv_start_legacy+0x196>
    8128:	493f      	ldr	r1, [pc, #252]	; (8228 <bt_le_adv_start_legacy+0x200>)
    812a:	4b40      	ldr	r3, [pc, #256]	; (822c <bt_le_adv_start_legacy+0x204>)
		BT_ERR("Failed to start advertiser");
    812c:	4840      	ldr	r0, [pc, #256]	; (8230 <bt_le_adv_start_legacy+0x208>)
    812e:	1ac9      	subs	r1, r1, r3
    8130:	08c9      	lsrs	r1, r1, #3
    8132:	0189      	lsls	r1, r1, #6
    8134:	f041 0101 	orr.w	r1, r1, #1
    8138:	f01b f938 	bl	233ac <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    813c:	2e00      	cmp	r6, #0
    813e:	d036      	beq.n	81ae <bt_le_adv_start_legacy+0x186>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8140:	4630      	mov	r0, r6
    8142:	2100      	movs	r1, #0
    8144:	f000 fed0 	bl	8ee8 <bt_conn_set_state>
			bt_conn_unref(conn);
    8148:	4630      	mov	r0, r6
    814a:	f01d fc28 	bl	2599e <bt_conn_unref>
    814e:	e02e      	b.n	81ae <bt_le_adv_start_legacy+0x186>
			set_param.type = BT_HCI_ADV_IND;
    8150:	f88d 6014 	strb.w	r6, [sp, #20]
    8154:	e7c9      	b.n	80ea <bt_le_adv_start_legacy+0xc2>
		if (sd || (param->options & BT_LE_ADV_OPT_USE_NAME)) {
    8156:	b90f      	cbnz	r7, 815c <bt_le_adv_start_legacy+0x134>
    8158:	071a      	lsls	r2, r3, #28
    815a:	d503      	bpl.n	8164 <bt_le_adv_start_legacy+0x13c>
			set_param.type = BT_HCI_ADV_SCAN_IND;
    815c:	2302      	movs	r3, #2
			set_param.type = BT_HCI_ADV_NONCONN_IND;
    815e:	f88d 3014 	strb.w	r3, [sp, #20]
    8162:	e7c2      	b.n	80ea <bt_le_adv_start_legacy+0xc2>
    8164:	2303      	movs	r3, #3
    8166:	e7fa      	b.n	815e <bt_le_adv_start_legacy+0x136>
				    param->options & BT_LE_ADV_OPT_CONNECTABLE,
    8168:	686b      	ldr	r3, [r5, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len,
    816a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    816e:	f003 0301 	and.w	r3, r3, #1
    8172:	9201      	str	r2, [sp, #4]
    8174:	9300      	str	r3, [sp, #0]
    8176:	463a      	mov	r2, r7
    8178:	9b10      	ldr	r3, [sp, #64]	; 0x40
    817a:	4649      	mov	r1, r9
    817c:	4640      	mov	r0, r8
    817e:	f7ff f86b 	bl	7258 <le_adv_update.isra.0>
		if (err) {
    8182:	4604      	mov	r4, r0
    8184:	b998      	cbnz	r0, 81ae <bt_le_adv_start_legacy+0x186>
		    param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    8186:	686b      	ldr	r3, [r5, #4]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8188:	07db      	lsls	r3, r3, #31
    818a:	d5c6      	bpl.n	811a <bt_le_adv_start_legacy+0xf2>
			conn = bt_conn_add_le(param->id, BT_ADDR_LE_NONE);
    818c:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    8190:	9302      	str	r3, [sp, #8]
    8192:	7828      	ldrb	r0, [r5, #0]
    8194:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8198:	a902      	add	r1, sp, #8
    819a:	f8ad 300c 	strh.w	r3, [sp, #12]
    819e:	f88d 300e 	strb.w	r3, [sp, #14]
    81a2:	f000 fe63 	bl	8e6c <bt_conn_add_le>
			if (!conn) {
    81a6:	4606      	mov	r6, r0
    81a8:	b928      	cbnz	r0, 81b6 <bt_le_adv_start_legacy+0x18e>
				return -ENOMEM;
    81aa:	f06f 040b 	mvn.w	r4, #11

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    81ae:	4620      	mov	r0, r4
    81b0:	b008      	add	sp, #32
    81b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    81b6:	2103      	movs	r1, #3
    81b8:	f000 fe96 	bl	8ee8 <bt_conn_set_state>
    81bc:	e7ae      	b.n	811c <bt_le_adv_start_legacy+0xf4>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    81be:	b116      	cbz	r6, 81c6 <bt_le_adv_start_legacy+0x19e>
		bt_conn_unref(conn);
    81c0:	4630      	mov	r0, r6
    81c2:	f01d fbec 	bl	2599e <bt_conn_unref>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_KEEP_ADVERTISING,
    81c6:	686a      	ldr	r2, [r5, #4]
    81c8:	4814      	ldr	r0, [pc, #80]	; (821c <bt_le_adv_start_legacy+0x1f4>)
    81ca:	f082 0202 	eor.w	r2, r2, #2
    81ce:	f3c2 0240 	ubfx	r2, r2, #1, #1
    81d2:	2109      	movs	r1, #9
    81d4:	f01d fab0 	bl	25738 <atomic_set_bit_to>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_NAME,
    81d8:	686a      	ldr	r2, [r5, #4]
    81da:	4810      	ldr	r0, [pc, #64]	; (821c <bt_le_adv_start_legacy+0x1f4>)
    81dc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    81e0:	2106      	movs	r1, #6
    81e2:	f01d faa9 	bl	25738 <atomic_set_bit_to>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_CONNECTABLE,
    81e6:	686a      	ldr	r2, [r5, #4]
    81e8:	480c      	ldr	r0, [pc, #48]	; (821c <bt_le_adv_start_legacy+0x1f4>)
    81ea:	f002 0201 	and.w	r2, r2, #1
    81ee:	2107      	movs	r1, #7
    81f0:	f01d faa2 	bl	25738 <atomic_set_bit_to>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_IDENTITY,
    81f4:	686a      	ldr	r2, [r5, #4]
    81f6:	4809      	ldr	r0, [pc, #36]	; (821c <bt_le_adv_start_legacy+0x1f4>)
    81f8:	f3c2 0280 	ubfx	r2, r2, #2, #1
    81fc:	2108      	movs	r1, #8
    81fe:	f01d fa9b 	bl	25738 <atomic_set_bit_to>
	return 0;
    8202:	e7d4      	b.n	81ae <bt_le_adv_start_legacy+0x186>
		return -EAGAIN;
    8204:	f06f 040a 	mvn.w	r4, #10
    8208:	e7d1      	b.n	81ae <bt_le_adv_start_legacy+0x186>
		return -EINVAL;
    820a:	f06f 0415 	mvn.w	r4, #21
    820e:	e7ce      	b.n	81ae <bt_le_adv_start_legacy+0x186>
		return -EALREADY;
    8210:	f06f 0444 	mvn.w	r4, #68	; 0x44
    8214:	e7cb      	b.n	81ae <bt_le_adv_start_legacy+0x186>
		return -ENOBUFS;
    8216:	f06f 0436 	mvn.w	r4, #54	; 0x36
    821a:	e7c8      	b.n	81ae <bt_le_adv_start_legacy+0x186>
    821c:	2000685c 	.word	0x2000685c
    8220:	200067d0 	.word	0x200067d0
    8224:	200067e4 	.word	0x200067e4
    8228:	00028928 	.word	0x00028928
    822c:	00028868 	.word	0x00028868
    8230:	0002b16a 	.word	0x0002b16a

00008234 <bt_le_adv_stop>:

	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
}

int bt_le_adv_stop(void)
{
    8234:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8236:	4c24      	ldr	r4, [pc, #144]	; (82c8 <bt_le_adv_stop+0x94>)
    8238:	f46f 7100 	mvn.w	r1, #512	; 0x200
    823c:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    8240:	f01d fa6b 	bl	2571a <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8244:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    8248:	f01d fa44 	bl	256d4 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    824c:	0682      	lsls	r2, r0, #26
    824e:	d403      	bmi.n	8258 <bt_le_adv_stop+0x24>
		adv_delete_legacy();
		return 0;
    8250:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    8252:	4620      	mov	r0, r4
    8254:	b003      	add	sp, #12
    8256:	bd30      	pop	{r4, r5, pc}
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    8258:	4b1c      	ldr	r3, [pc, #112]	; (82cc <bt_le_adv_stop+0x98>)
    825a:	6818      	ldr	r0, [r3, #0]
    825c:	889a      	ldrh	r2, [r3, #4]
    825e:	9000      	str	r0, [sp, #0]
    8260:	799b      	ldrb	r3, [r3, #6]
    8262:	f8ad 2004 	strh.w	r2, [sp, #4]
    8266:	7d20      	ldrb	r0, [r4, #20]
    8268:	f88d 3006 	strb.w	r3, [sp, #6]
    826c:	2203      	movs	r2, #3
    826e:	4669      	mov	r1, sp
    8270:	f000 ff3a 	bl	90e8 <bt_conn_lookup_state_le>
		if (conn) {
    8274:	4605      	mov	r5, r0
    8276:	b128      	cbz	r0, 8284 <bt_le_adv_stop+0x50>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8278:	2100      	movs	r1, #0
    827a:	f000 fe35 	bl	8ee8 <bt_conn_set_state>
			bt_conn_unref(conn);
    827e:	4628      	mov	r0, r5
    8280:	f01d fb8d 	bl	2599e <bt_conn_unref>
		conn = bt_conn_lookup_state_le(adv->id, NULL,
    8284:	7d20      	ldrb	r0, [r4, #20]
    8286:	2204      	movs	r2, #4
    8288:	2100      	movs	r1, #0
    828a:	f000 ff2d 	bl	90e8 <bt_conn_lookup_state_le>
		if (conn) {
    828e:	4604      	mov	r4, r0
    8290:	b128      	cbz	r0, 829e <bt_le_adv_stop+0x6a>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8292:	2100      	movs	r1, #0
    8294:	f000 fe28 	bl	8ee8 <bt_conn_set_state>
			bt_conn_unref(conn);
    8298:	4620      	mov	r0, r4
    829a:	f01d fb80 	bl	2599e <bt_conn_unref>
		err = set_le_adv_enable_legacy(false);
    829e:	2000      	movs	r0, #0
    82a0:	f7ff f852 	bl	7348 <set_le_adv_enable_legacy>
		if (err) {
    82a4:	4604      	mov	r4, r0
    82a6:	2800      	cmp	r0, #0
    82a8:	d1d3      	bne.n	8252 <bt_le_adv_stop+0x1e>
    82aa:	4809      	ldr	r0, [pc, #36]	; (82d0 <bt_le_adv_stop+0x9c>)
    82ac:	f01d fa12 	bl	256d4 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    82b0:	0543      	lsls	r3, r0, #21
    82b2:	d5cd      	bpl.n	8250 <bt_le_adv_stop+0x1c>
	return set_le_scan_enable_legacy(enable);
    82b4:	4620      	mov	r0, r4
    82b6:	f7fe ff23 	bl	7100 <set_le_scan_enable_legacy>
			le_set_private_addr(BT_ID_DEFAULT);
    82ba:	f01d fa4e 	bl	2575a <le_adv_set_private_addr.isra.0>
	return set_le_scan_enable_legacy(enable);
    82be:	2001      	movs	r0, #1
    82c0:	f7fe ff1e 	bl	7100 <set_le_scan_enable_legacy>
    82c4:	e7c5      	b.n	8252 <bt_le_adv_stop+0x1e>
    82c6:	bf00      	nop
    82c8:	200067d0 	.word	0x200067d0
    82cc:	00028a9c 	.word	0x00028a9c
    82d0:	2000685c 	.word	0x2000685c

000082d4 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    82d4:	b513      	push	{r0, r1, r4, lr}
    82d6:	4819      	ldr	r0, [pc, #100]	; (833c <bt_le_adv_resume+0x68>)
    82d8:	f01d f9fc 	bl	256d4 <atomic_get>
	if (!adv) {
		BT_WARN("Not legacy advertiser");
		return;
	}

	BT_ASSERT(atomic_test_bit(bt_dev.flags,
    82dc:	0603      	lsls	r3, r0, #24
    82de:	d40c      	bmi.n	82fa <bt_le_adv_resume+0x26>
    82e0:	4a17      	ldr	r2, [pc, #92]	; (8340 <bt_le_adv_resume+0x6c>)
    82e2:	4918      	ldr	r1, [pc, #96]	; (8344 <bt_le_adv_resume+0x70>)
    82e4:	4818      	ldr	r0, [pc, #96]	; (8348 <bt_le_adv_resume+0x74>)
    82e6:	f641 53bf 	movw	r3, #7615	; 0x1dbf
    82ea:	f01a ffee 	bl	232ca <printk>
    82ee:	4040      	eors	r0, r0
    82f0:	f380 8811 	msr	BASEPRI, r0
    82f4:	f04f 0003 	mov.w	r0, #3
    82f8:	df02      	svc	2
				  BT_DEV_ADVERTISING_CONNECTABLE));

	adv_conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    82fa:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    82fe:	9300      	str	r3, [sp, #0]
    8300:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8304:	f8ad 3004 	strh.w	r3, [sp, #4]
    8308:	f88d 3006 	strb.w	r3, [sp, #6]
    830c:	4b0f      	ldr	r3, [pc, #60]	; (834c <bt_le_adv_resume+0x78>)
    830e:	4669      	mov	r1, sp
    8310:	7d18      	ldrb	r0, [r3, #20]
    8312:	f000 fdab 	bl	8e6c <bt_conn_add_le>
	if (!adv_conn) {
    8316:	4604      	mov	r4, r0
    8318:	b168      	cbz	r0, 8336 <bt_le_adv_resume+0x62>
		return;
	}

	bt_conn_set_state(adv_conn, BT_CONN_CONNECT_ADV);
    831a:	2103      	movs	r1, #3
    831c:	f000 fde4 	bl	8ee8 <bt_conn_set_state>
	return set_le_adv_enable_legacy(enable);
    8320:	2001      	movs	r0, #1
    8322:	f7ff f811 	bl	7348 <set_le_adv_enable_legacy>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    8326:	b118      	cbz	r0, 8330 <bt_le_adv_resume+0x5c>
		bt_conn_set_state(adv_conn, BT_CONN_DISCONNECTED);
    8328:	2100      	movs	r1, #0
    832a:	4620      	mov	r0, r4
    832c:	f000 fddc 	bl	8ee8 <bt_conn_set_state>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(adv_conn);
    8330:	4620      	mov	r0, r4
    8332:	f01d fb34 	bl	2599e <bt_conn_unref>
}
    8336:	b002      	add	sp, #8
    8338:	bd10      	pop	{r4, pc}
    833a:	bf00      	nop
    833c:	2000685c 	.word	0x2000685c
    8340:	0002acb5 	.word	0x0002acb5
    8344:	0002b185 	.word	0x0002b185
    8348:	000297e6 	.word	0x000297e6
    834c:	200067d0 	.word	0x200067d0

00008350 <hci_disconn_complete>:
{
    8350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8352:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    8354:	7835      	ldrb	r5, [r6, #0]
    8356:	bb85      	cbnz	r5, 83ba <hci_disconn_complete+0x6a>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    8358:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    835c:	4638      	mov	r0, r7
    835e:	f000 fe8d 	bl	907c <bt_conn_lookup_handle>
	if (!conn) {
    8362:	4604      	mov	r4, r0
    8364:	b9c0      	cbnz	r0, 8398 <hci_disconn_complete+0x48>
    8366:	4a15      	ldr	r2, [pc, #84]	; (83bc <hci_disconn_complete+0x6c>)
    8368:	4b15      	ldr	r3, [pc, #84]	; (83c0 <hci_disconn_complete+0x70>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    836a:	4816      	ldr	r0, [pc, #88]	; (83c4 <hci_disconn_complete+0x74>)
    836c:	1ad2      	subs	r2, r2, r3
    836e:	08d2      	lsrs	r2, r2, #3
    8370:	0192      	lsls	r2, r2, #6
    8372:	f042 0201 	orr.w	r2, r2, #1
    8376:	4639      	mov	r1, r7
    8378:	f01b f825 	bl	233c6 <log_1>
    837c:	4812      	ldr	r0, [pc, #72]	; (83c8 <hci_disconn_complete+0x78>)
    837e:	f01d f9a9 	bl	256d4 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8382:	0582      	lsls	r2, r0, #22
    8384:	d519      	bpl.n	83ba <hci_disconn_complete+0x6a>
    8386:	4810      	ldr	r0, [pc, #64]	; (83c8 <hci_disconn_complete+0x78>)
    8388:	f01d f9a4 	bl	256d4 <atomic_get>
	    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    838c:	0683      	lsls	r3, r0, #26
    838e:	d414      	bmi.n	83ba <hci_disconn_complete+0x6a>
}
    8390:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_le_adv_resume();
    8394:	f7ff bf9e 	b.w	82d4 <bt_le_adv_resume>
	conn->err = evt->reason;
    8398:	78f3      	ldrb	r3, [r6, #3]
    839a:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    839c:	4629      	mov	r1, r5
    839e:	f000 fda3 	bl	8ee8 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    83a2:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    83a4:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    83a6:	2b01      	cmp	r3, #1
		bt_conn_unref(conn);
    83a8:	4620      	mov	r0, r4
	if (conn->type != BT_CONN_TYPE_LE) {
    83aa:	d003      	beq.n	83b4 <hci_disconn_complete+0x64>
}
    83ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    83b0:	f01d baf5 	b.w	2599e <bt_conn_unref>
	bt_conn_unref(conn);
    83b4:	f01d faf3 	bl	2599e <bt_conn_unref>
    83b8:	e7e0      	b.n	837c <hci_disconn_complete+0x2c>
}
    83ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83bc:	00028928 	.word	0x00028928
    83c0:	00028868 	.word	0x00028868
    83c4:	0002b1c3 	.word	0x0002b1c3
    83c8:	2000685c 	.word	0x2000685c

000083cc <enh_conn_complete>:
{
    83cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    83ce:	7801      	ldrb	r1, [r0, #0]
{
    83d0:	b085      	sub	sp, #20
    83d2:	4605      	mov	r5, r0
	if (evt->status) {
    83d4:	b359      	cbz	r1, 842e <enh_conn_complete+0x62>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    83d6:	293c      	cmp	r1, #60	; 0x3c
    83d8:	d11e      	bne.n	8418 <enh_conn_complete+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    83da:	f06f 0120 	mvn.w	r1, #32
    83de:	4856      	ldr	r0, [pc, #344]	; (8538 <enh_conn_complete+0x16c>)
    83e0:	f01d f99b 	bl	2571a <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    83e4:	2000      	movs	r0, #0
    83e6:	f7fe fa09 	bl	67fc <find_pending_connect.part.0>
			if (!conn) {
    83ea:	4604      	mov	r4, r0
    83ec:	b958      	cbnz	r0, 8406 <enh_conn_complete+0x3a>
    83ee:	4953      	ldr	r1, [pc, #332]	; (853c <enh_conn_complete+0x170>)
    83f0:	4b53      	ldr	r3, [pc, #332]	; (8540 <enh_conn_complete+0x174>)
				BT_ERR("No pending slave connection");
    83f2:	4854      	ldr	r0, [pc, #336]	; (8544 <enh_conn_complete+0x178>)
    83f4:	1ac9      	subs	r1, r1, r3
    83f6:	08c9      	lsrs	r1, r1, #3
    83f8:	0189      	lsls	r1, r1, #6
    83fa:	f041 0101 	orr.w	r1, r1, #1
    83fe:	f01a ffd5 	bl	233ac <log_0>
}
    8402:	b005      	add	sp, #20
    8404:	bdf0      	pop	{r4, r5, r6, r7, pc}
			conn->err = evt->status;
    8406:	782b      	ldrb	r3, [r5, #0]
    8408:	7243      	strb	r3, [r0, #9]
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    840a:	2100      	movs	r1, #0
    840c:	f000 fd6c 	bl	8ee8 <bt_conn_set_state>
	bt_conn_unref(conn);
    8410:	4620      	mov	r0, r4
    8412:	f01d fac4 	bl	2599e <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
    8416:	e7f4      	b.n	8402 <enh_conn_complete+0x36>
    8418:	4b49      	ldr	r3, [pc, #292]	; (8540 <enh_conn_complete+0x174>)
    841a:	4a48      	ldr	r2, [pc, #288]	; (853c <enh_conn_complete+0x170>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    841c:	484a      	ldr	r0, [pc, #296]	; (8548 <enh_conn_complete+0x17c>)
    841e:	1ad2      	subs	r2, r2, r3
    8420:	08d2      	lsrs	r2, r2, #3
    8422:	0192      	lsls	r2, r2, #6
    8424:	f042 0202 	orr.w	r2, r2, #2
    8428:	f01a ffcd 	bl	233c6 <log_1>
		return;
    842c:	e7e9      	b.n	8402 <enh_conn_complete+0x36>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    842e:	7903      	ldrb	r3, [r0, #4]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    8430:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    8434:	3b02      	subs	r3, #2
    8436:	1d04      	adds	r4, r0, #4
    8438:	2b01      	cmp	r3, #1
	u16_t handle = sys_le16_to_cpu(evt->handle);
    843a:	b2be      	uxth	r6, r7
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    843c:	4621      	mov	r1, r4
    843e:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    8440:	d830      	bhi.n	84a4 <enh_conn_complete+0xd8>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    8442:	f01d f94d 	bl	256e0 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8446:	f89d 3008 	ldrb.w	r3, [sp, #8]
    844a:	2206      	movs	r2, #6
    844c:	3b02      	subs	r3, #2
    844e:	f105 0111 	add.w	r1, r5, #17
    8452:	f10d 0001 	add.w	r0, sp, #1
    8456:	f88d 3008 	strb.w	r3, [sp, #8]
    845a:	f01c fe19 	bl	25090 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    845e:	2301      	movs	r3, #1
    8460:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    8464:	78eb      	ldrb	r3, [r5, #3]
    8466:	2b01      	cmp	r3, #1
    8468:	d10c      	bne.n	8484 <enh_conn_complete+0xb8>
    846a:	a802      	add	r0, sp, #8
    846c:	f7fe f9c6 	bl	67fc <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8470:	78eb      	ldrb	r3, [r5, #3]
    8472:	2b01      	cmp	r3, #1
    8474:	4604      	mov	r4, r0
    8476:	d104      	bne.n	8482 <enh_conn_complete+0xb6>
    8478:	482f      	ldr	r0, [pc, #188]	; (8538 <enh_conn_complete+0x16c>)
    847a:	f06f 0120 	mvn.w	r1, #32
    847e:	f01d f94c 	bl	2571a <atomic_and>
	if (!conn) {
    8482:	b9b4      	cbnz	r4, 84b2 <enh_conn_complete+0xe6>
    8484:	4b2e      	ldr	r3, [pc, #184]	; (8540 <enh_conn_complete+0x174>)
    8486:	4a2d      	ldr	r2, [pc, #180]	; (853c <enh_conn_complete+0x170>)
		BT_ERR("Unable to add new conn for handle %u", handle);
    8488:	4830      	ldr	r0, [pc, #192]	; (854c <enh_conn_complete+0x180>)
    848a:	1ad2      	subs	r2, r2, r3
    848c:	08d2      	lsrs	r2, r2, #3
    848e:	0192      	lsls	r2, r2, #6
    8490:	4631      	mov	r1, r6
    8492:	f042 0201 	orr.w	r2, r2, #1
    8496:	f01a ff96 	bl	233c6 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_MEM_CAPACITY_EXCEEDED);
    849a:	2107      	movs	r1, #7
    849c:	4630      	mov	r0, r6
    849e:	f01d f96e 	bl	2577e <bt_hci_disconnect>
		return;
    84a2:	e7ae      	b.n	8402 <enh_conn_complete+0x36>
		bt_addr_le_copy(&id_addr,
    84a4:	f01d f91c 	bl	256e0 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    84a8:	4621      	mov	r1, r4
    84aa:	4668      	mov	r0, sp
    84ac:	f01d f918 	bl	256e0 <bt_addr_le_copy>
    84b0:	e7d8      	b.n	8464 <enh_conn_complete+0x98>
	conn->handle = handle;
    84b2:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    84b4:	a902      	add	r1, sp, #8
	conn->handle = handle;
    84b6:	f820 7b74 	strh.w	r7, [r0], #116
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    84ba:	f01d f911 	bl	256e0 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    84be:	7e2a      	ldrb	r2, [r5, #24]
    84c0:	7deb      	ldrb	r3, [r5, #23]
    84c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    84c6:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    84ca:	7eaa      	ldrb	r2, [r5, #26]
    84cc:	7e6b      	ldrb	r3, [r5, #25]
    84ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    84d2:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    84d6:	7eeb      	ldrb	r3, [r5, #27]
    84d8:	7f2a      	ldrb	r2, [r5, #28]
    84da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    84de:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
	conn->role = evt->role;
    84e2:	78eb      	ldrb	r3, [r5, #3]
    84e4:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    84e6:	2600      	movs	r6, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    84e8:	2b01      	cmp	r3, #1
	conn->err = 0U;
    84ea:	7266      	strb	r6, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    84ec:	d11c      	bne.n	8528 <enh_conn_complete+0x15c>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    84ee:	4669      	mov	r1, sp
    84f0:	f104 007b 	add.w	r0, r4, #123	; 0x7b
    84f4:	f01d f8f4 	bl	256e0 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    84f8:	7a21      	ldrb	r1, [r4, #8]
    84fa:	4d15      	ldr	r5, [pc, #84]	; (8550 <enh_conn_complete+0x184>)
    84fc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.resp_addr,
    8500:	4429      	add	r1, r5
    8502:	f104 0082 	add.w	r0, r4, #130	; 0x82
    8506:	f01d f8eb 	bl	256e0 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    850a:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    850e:	f01d f8e1 	bl	256d4 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    8512:	0583      	lsls	r3, r0, #22
    8514:	d508      	bpl.n	8528 <enh_conn_complete+0x15c>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    8516:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
    851a:	4632      	mov	r2, r6
    851c:	f001 0340 	and.w	r3, r1, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    8520:	4313      	orrs	r3, r2
    8522:	d001      	beq.n	8528 <enh_conn_complete+0x15c>
			bt_le_adv_resume();
    8524:	f7ff fed6 	bl	82d4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    8528:	4620      	mov	r0, r4
    852a:	2106      	movs	r1, #6
    852c:	f000 fcdc 	bl	8ee8 <bt_conn_set_state>
	conn_auto_initiate(conn);
    8530:	4620      	mov	r0, r4
    8532:	f7fe fd17 	bl	6f64 <conn_auto_initiate>
    8536:	e76b      	b.n	8410 <enh_conn_complete+0x44>
    8538:	2000685c 	.word	0x2000685c
    853c:	00028928 	.word	0x00028928
    8540:	00028868 	.word	0x00028868
    8544:	0002b1e9 	.word	0x0002b1e9
    8548:	0002b205 	.word	0x0002b205
    854c:	0002b21e 	.word	0x0002b21e
    8550:	200067d0 	.word	0x200067d0

00008554 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    8554:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8558:	4605      	mov	r5, r0
    855a:	4852      	ldr	r0, [pc, #328]	; (86a4 <bt_le_scan_start+0x150>)
    855c:	460e      	mov	r6, r1
    855e:	f01d f8b9 	bl	256d4 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8562:	0780      	lsls	r0, r0, #30
    8564:	f140 8091 	bpl.w	868a <bt_le_scan_start+0x136>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    8568:	782a      	ldrb	r2, [r5, #0]
    856a:	2a01      	cmp	r2, #1
    856c:	f200 8090 	bhi.w	8690 <bt_le_scan_start+0x13c>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    8570:	686b      	ldr	r3, [r5, #4]
    8572:	f033 030f 	bics.w	r3, r3, #15
    8576:	f040 808b 	bne.w	8690 <bt_le_scan_start+0x13c>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    857a:	8928      	ldrh	r0, [r5, #8]
    857c:	1f03      	subs	r3, r0, #4
    857e:	b29b      	uxth	r3, r3
    8580:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    8584:	42a3      	cmp	r3, r4
    8586:	f200 8083 	bhi.w	8690 <bt_le_scan_start+0x13c>
	if (param->window < 0x0004 || param->window > 0x4000) {
    858a:	8969      	ldrh	r1, [r5, #10]
    858c:	1f0b      	subs	r3, r1, #4
    858e:	b29b      	uxth	r3, r3
    8590:	42a3      	cmp	r3, r4
    8592:	d87d      	bhi.n	8690 <bt_le_scan_start+0x13c>
	if (param->window > param->interval) {
    8594:	4288      	cmp	r0, r1
    8596:	d37b      	bcc.n	8690 <bt_le_scan_start+0x13c>
	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
	}

	if (param->type && !bt_le_scan_random_addr_check()) {
    8598:	b112      	cbz	r2, 85a0 <bt_le_scan_start+0x4c>
    859a:	4842      	ldr	r0, [pc, #264]	; (86a4 <bt_le_scan_start+0x150>)
    859c:	f01d f89a 	bl	256d4 <atomic_get>
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    85a0:	4840      	ldr	r0, [pc, #256]	; (86a4 <bt_le_scan_start+0x150>)
    85a2:	210b      	movs	r1, #11
    85a4:	f01d f8ae 	bl	25704 <atomic_test_and_set_bit>
    85a8:	4603      	mov	r3, r0
    85aa:	2800      	cmp	r0, #0
    85ac:	d173      	bne.n	8696 <bt_le_scan_start+0x142>
    85ae:	483d      	ldr	r0, [pc, #244]	; (86a4 <bt_le_scan_start+0x150>)
    85b0:	f01d f890 	bl	256d4 <atomic_get>
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    85b4:	0541      	lsls	r1, r0, #21
    85b6:	d50a      	bpl.n	85ce <bt_le_scan_start+0x7a>
	return set_le_scan_enable_legacy(enable);
    85b8:	4618      	mov	r0, r3
    85ba:	f7fe fda1 	bl	7100 <set_le_scan_enable_legacy>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
		if (err) {
    85be:	4604      	mov	r4, r0
    85c0:	b128      	cbz	r0, 85ce <bt_le_scan_start+0x7a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    85c2:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    85c6:	4837      	ldr	r0, [pc, #220]	; (86a4 <bt_le_scan_start+0x150>)
    85c8:	f01d f8a7 	bl	2571a <atomic_and>
					   param->window);
	}

	if (err) {
		atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
		return err;
    85cc:	e056      	b.n	867c <bt_le_scan_start+0x128>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    85ce:	686a      	ldr	r2, [r5, #4]
    85d0:	4f35      	ldr	r7, [pc, #212]	; (86a8 <bt_le_scan_start+0x154>)
    85d2:	f002 0201 	and.w	r2, r2, #1
    85d6:	210d      	movs	r1, #13
    85d8:	f107 008c 	add.w	r0, r7, #140	; 0x8c
    85dc:	f01d f8ac 	bl	25738 <atomic_set_bit_to>
		if (param->timeout) {
    85e0:	89ac      	ldrh	r4, [r5, #12]
    85e2:	2c00      	cmp	r4, #0
    85e4:	d15a      	bne.n	869c <bt_le_scan_start+0x148>
		err = start_le_scan_legacy(param->type, param->interval,
    85e6:	f895 8000 	ldrb.w	r8, [r5]
    85ea:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    85ee:	896d      	ldrh	r5, [r5, #10]
	(void)memset(&set_param, 0, sizeof(set_param));
    85f0:	2207      	movs	r2, #7
    85f2:	4621      	mov	r1, r4
    85f4:	4668      	mov	r0, sp
    85f6:	f01c fd76 	bl	250e6 <memset>
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
    85fa:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
		*own_addr_type = bt_dev.id_addr[0].type;
    85fe:	4638      	mov	r0, r7
	set_param.scan_type = scan_type;
    8600:	f88d 8000 	strb.w	r8, [sp]
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
    8604:	f1d3 0800 	rsbs	r8, r3, #0
    8608:	eb48 0803 	adc.w	r8, r8, r3
		*own_addr_type = bt_dev.id_addr[0].type;
    860c:	f810 3b8c 	ldrb.w	r3, [r0], #140
	set_param.interval = sys_cpu_to_le16(interval);
    8610:	f8ad 9001 	strh.w	r9, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    8614:	f8ad 5003 	strh.w	r5, [sp, #3]
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    8618:	f88d 4006 	strb.w	r4, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    861c:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8620:	f01d f858 	bl	256d4 <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    8624:	0682      	lsls	r2, r0, #26
    8626:	d407      	bmi.n	8638 <bt_le_scan_start+0xe4>
			err = le_set_private_addr(BT_ID_DEFAULT);
    8628:	f01d f897 	bl	2575a <le_adv_set_private_addr.isra.0>
			if (err) {
    862c:	4604      	mov	r4, r0
    862e:	2800      	cmp	r0, #0
    8630:	d1c7      	bne.n	85c2 <bt_le_scan_start+0x6e>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    8632:	2301      	movs	r3, #1
    8634:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    8638:	2107      	movs	r1, #7
    863a:	f242 000b 	movw	r0, #8203	; 0x200b
    863e:	f7fe fb85 	bl	6d4c <bt_hci_cmd_create>
	if (!buf) {
    8642:	4604      	mov	r4, r0
    8644:	b1f0      	cbz	r0, 8684 <bt_le_scan_start+0x130>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    8646:	2207      	movs	r2, #7
    8648:	4669      	mov	r1, sp
    864a:	3008      	adds	r0, #8
    864c:	f01f fc4e 	bl	27eec <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    8650:	4621      	mov	r1, r4
    8652:	2200      	movs	r2, #0
    8654:	f242 000b 	movw	r0, #8203	; 0x200b
    8658:	f7fe fcf0 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    865c:	4604      	mov	r4, r0
    865e:	2800      	cmp	r0, #0
    8660:	d1af      	bne.n	85c2 <bt_le_scan_start+0x6e>
	return set_le_scan_enable_legacy(enable);
    8662:	2001      	movs	r0, #1
    8664:	f7fe fd4c 	bl	7100 <set_le_scan_enable_legacy>
	if (err) {
    8668:	4604      	mov	r4, r0
    866a:	2800      	cmp	r0, #0
    866c:	d1a9      	bne.n	85c2 <bt_le_scan_start+0x6e>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    866e:	480d      	ldr	r0, [pc, #52]	; (86a4 <bt_le_scan_start+0x150>)
    8670:	4642      	mov	r2, r8
    8672:	210c      	movs	r1, #12
    8674:	f01d f860 	bl	25738 <atomic_set_bit_to>
	}

	scan_dev_found_cb = cb;
    8678:	4b0c      	ldr	r3, [pc, #48]	; (86ac <bt_le_scan_start+0x158>)
    867a:	601e      	str	r6, [r3, #0]

	return 0;
}
    867c:	4620      	mov	r0, r4
    867e:	b003      	add	sp, #12
    8680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
    8684:	f06f 0436 	mvn.w	r4, #54	; 0x36
    8688:	e79b      	b.n	85c2 <bt_le_scan_start+0x6e>
		return -EAGAIN;
    868a:	f06f 040a 	mvn.w	r4, #10
    868e:	e7f5      	b.n	867c <bt_le_scan_start+0x128>
		return -EINVAL;
    8690:	f06f 0415 	mvn.w	r4, #21
    8694:	e7f2      	b.n	867c <bt_le_scan_start+0x128>
		return -EALREADY;
    8696:	f06f 0444 	mvn.w	r4, #68	; 0x44
    869a:	e7ef      	b.n	867c <bt_le_scan_start+0x128>
			return -ENOTSUP;
    869c:	f06f 0422 	mvn.w	r4, #34	; 0x22
    86a0:	e7ec      	b.n	867c <bt_le_scan_start+0x128>
    86a2:	bf00      	nop
    86a4:	2000685c 	.word	0x2000685c
    86a8:	200067d0 	.word	0x200067d0
    86ac:	20000504 	.word	0x20000504

000086b0 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    86b0:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    86b2:	4808      	ldr	r0, [pc, #32]	; (86d4 <bt_le_scan_stop+0x24>)
    86b4:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    86b8:	f01d f82f 	bl	2571a <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    86bc:	0503      	lsls	r3, r0, #20
    86be:	d506      	bpl.n	86ce <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    86c0:	4b05      	ldr	r3, [pc, #20]	; (86d8 <bt_le_scan_stop+0x28>)
    86c2:	2000      	movs	r0, #0
    86c4:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    86c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    86ca:	f7fe be6d 	b.w	73a8 <bt_le_scan_update>
}
    86ce:	f06f 0044 	mvn.w	r0, #68	; 0x44
    86d2:	bd08      	pop	{r3, pc}
    86d4:	2000685c 	.word	0x2000685c
    86d8:	20000504 	.word	0x20000504

000086dc <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    86dc:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
    86de:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    86e2:	2b01      	cmp	r3, #1
{
    86e4:	4605      	mov	r5, r0
    86e6:	460c      	mov	r4, r1
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
    86e8:	d00e      	beq.n	8708 <bt_buf_get_rx+0x2c>
    86ea:	490e      	ldr	r1, [pc, #56]	; (8724 <bt_buf_get_rx+0x48>)
    86ec:	4a0e      	ldr	r2, [pc, #56]	; (8728 <bt_buf_get_rx+0x4c>)
    86ee:	480f      	ldr	r0, [pc, #60]	; (872c <bt_buf_get_rx+0x50>)
    86f0:	f641 739c 	movw	r3, #8092	; 0x1f9c
    86f4:	f01a fde9 	bl	232ca <printk>
    86f8:	480d      	ldr	r0, [pc, #52]	; (8730 <bt_buf_get_rx+0x54>)
    86fa:	f01a fde6 	bl	232ca <printk>
    86fe:	480a      	ldr	r0, [pc, #40]	; (8728 <bt_buf_get_rx+0x4c>)
    8700:	f641 719c 	movw	r1, #8092	; 0x1f9c
    8704:	f01a fe24 	bl	23350 <assert_post_action>
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    8708:	4621      	mov	r1, r4
    870a:	480a      	ldr	r0, [pc, #40]	; (8734 <bt_buf_get_rx+0x58>)
    870c:	f01f fb96 	bl	27e3c <net_buf_alloc_fixed>
#endif

	if (buf) {
    8710:	4604      	mov	r4, r0
    8712:	b120      	cbz	r0, 871e <bt_buf_get_rx+0x42>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    8714:	2100      	movs	r1, #0
    8716:	3008      	adds	r0, #8
    8718:	f015 fdb6 	bl	1e288 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    871c:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    871e:	4620      	mov	r0, r4
    8720:	bd38      	pop	{r3, r4, r5, pc}
    8722:	bf00      	nop
    8724:	0002b243 	.word	0x0002b243
    8728:	0002acb5 	.word	0x0002acb5
    872c:	000297e6 	.word	0x000297e6
    8730:	0002b26f 	.word	0x0002b26f
    8734:	20007634 	.word	0x20007634

00008738 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    8738:	b510      	push	{r4, lr}
	__asm__ volatile(
    873a:	f04f 0320 	mov.w	r3, #32
    873e:	f3ef 8211 	mrs	r2, BASEPRI
    8742:	f383 8811 	msr	BASEPRI, r3
    8746:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    874a:	4b0d      	ldr	r3, [pc, #52]	; (8780 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    874c:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    874e:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
	bt_dev.sent_cmd = NULL;
    8752:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
	__asm__ volatile(
    8756:	f382 8811 	msr	BASEPRI, r2
    875a:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    875e:	b92c      	cbnz	r4, 876c <bt_buf_get_cmd_complete+0x34>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8760:	4601      	mov	r1, r0
}
    8762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8766:	2001      	movs	r0, #1
    8768:	f7ff bfb8 	b.w	86dc <bt_buf_get_rx>
    876c:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    876e:	f104 0008 	add.w	r0, r4, #8
    8772:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    8774:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    8776:	f015 fd87 	bl	1e288 <net_buf_simple_reserve>
}
    877a:	4620      	mov	r0, r4
    877c:	bd10      	pop	{r4, pc}
    877e:	bf00      	nop
    8780:	200067d0 	.word	0x200067d0

00008784 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(u8_t evt, bool discardable, s32_t timeout)
{
	switch (evt) {
    8784:	280f      	cmp	r0, #15
{
    8786:	460b      	mov	r3, r1
    8788:	b510      	push	{r4, lr}
    878a:	4611      	mov	r1, r2
	switch (evt) {
    878c:	d806      	bhi.n	879c <bt_buf_get_evt+0x18>
    878e:	280d      	cmp	r0, #13
    8790:	d913      	bls.n	87ba <bt_buf_get_evt+0x36>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    8792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return bt_buf_get_cmd_complete(timeout);
    8796:	4610      	mov	r0, r2
    8798:	f7ff bfce 	b.w	8738 <bt_buf_get_cmd_complete>
	switch (evt) {
    879c:	2813      	cmp	r0, #19
    879e:	d10c      	bne.n	87ba <bt_buf_get_evt+0x36>
			buf = net_buf_alloc(&num_complete_pool, timeout);
    87a0:	480a      	ldr	r0, [pc, #40]	; (87cc <bt_buf_get_evt+0x48>)
			buf = net_buf_alloc(&discardable_pool, timeout);
    87a2:	f01f fb4b 	bl	27e3c <net_buf_alloc_fixed>
			if (buf) {
    87a6:	4604      	mov	r4, r0
    87a8:	b128      	cbz	r0, 87b6 <bt_buf_get_evt+0x32>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    87aa:	2100      	movs	r1, #0
    87ac:	3008      	adds	r0, #8
    87ae:	f015 fd6b 	bl	1e288 <net_buf_simple_reserve>
    87b2:	2301      	movs	r3, #1
    87b4:	7523      	strb	r3, [r4, #20]
}
    87b6:	4620      	mov	r0, r4
    87b8:	bd10      	pop	{r4, pc}
		if (discardable) {
    87ba:	b10b      	cbz	r3, 87c0 <bt_buf_get_evt+0x3c>
			buf = net_buf_alloc(&discardable_pool, timeout);
    87bc:	4804      	ldr	r0, [pc, #16]	; (87d0 <bt_buf_get_evt+0x4c>)
    87be:	e7f0      	b.n	87a2 <bt_buf_get_evt+0x1e>
}
    87c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    87c4:	2001      	movs	r0, #1
    87c6:	f7ff bf89 	b.w	86dc <bt_buf_get_rx>
    87ca:	bf00      	nop
    87cc:	20007658 	.word	0x20007658
    87d0:	200075c8 	.word	0x200075c8

000087d4 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    87d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    87d6:	4d21      	ldr	r5, [pc, #132]	; (885c <bt_pub_key_gen+0x88>)
    87d8:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
    87dc:	f003 0306 	and.w	r3, r3, #6
    87e0:	2b06      	cmp	r3, #6
    87e2:	d00d      	beq.n	8800 <bt_pub_key_gen+0x2c>
    87e4:	4b1e      	ldr	r3, [pc, #120]	; (8860 <bt_pub_key_gen+0x8c>)
    87e6:	491f      	ldr	r1, [pc, #124]	; (8864 <bt_pub_key_gen+0x90>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    87e8:	481f      	ldr	r0, [pc, #124]	; (8868 <bt_pub_key_gen+0x94>)
    87ea:	1ac9      	subs	r1, r1, r3
    87ec:	08c9      	lsrs	r1, r1, #3
    87ee:	0189      	lsls	r1, r1, #6
    87f0:	f041 0102 	orr.w	r1, r1, #2
    87f4:	f01a fdda 	bl	233ac <log_0>
		return -ENOTSUP;
    87f8:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    87fc:	4620      	mov	r0, r4
    87fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    8800:	4e1a      	ldr	r6, [pc, #104]	; (886c <bt_pub_key_gen+0x98>)
    8802:	6833      	ldr	r3, [r6, #0]
    8804:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    8806:	6030      	str	r0, [r6, #0]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8808:	2104      	movs	r1, #4
    880a:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    880e:	f01c ff79 	bl	25704 <atomic_test_and_set_bit>
    8812:	4607      	mov	r7, r0
    8814:	bb00      	cbnz	r0, 8858 <bt_pub_key_gen+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8816:	f06f 0108 	mvn.w	r1, #8
    881a:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    881e:	f01c ff7c 	bl	2571a <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    8822:	463a      	mov	r2, r7
    8824:	4639      	mov	r1, r7
    8826:	f242 0025 	movw	r0, #8229	; 0x2025
    882a:	f7fe fc07 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    882e:	4604      	mov	r4, r0
    8830:	2800      	cmp	r0, #0
    8832:	d0e3      	beq.n	87fc <bt_pub_key_gen+0x28>
    8834:	4b0a      	ldr	r3, [pc, #40]	; (8860 <bt_pub_key_gen+0x8c>)
    8836:	490b      	ldr	r1, [pc, #44]	; (8864 <bt_pub_key_gen+0x90>)
		BT_ERR("Sending LE P256 Public Key command failed");
    8838:	480d      	ldr	r0, [pc, #52]	; (8870 <bt_pub_key_gen+0x9c>)
    883a:	1ac9      	subs	r1, r1, r3
    883c:	08c9      	lsrs	r1, r1, #3
    883e:	0189      	lsls	r1, r1, #6
    8840:	f041 0101 	orr.w	r1, r1, #1
    8844:	f01a fdb2 	bl	233ac <log_0>
    8848:	f06f 0110 	mvn.w	r1, #16
    884c:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    8850:	f01c ff63 	bl	2571a <atomic_and>
		pub_key_cb = NULL;
    8854:	6037      	str	r7, [r6, #0]
		return err;
    8856:	e7d1      	b.n	87fc <bt_pub_key_gen+0x28>
		return 0;
    8858:	2400      	movs	r4, #0
    885a:	e7cf      	b.n	87fc <bt_pub_key_gen+0x28>
    885c:	200067d0 	.word	0x200067d0
    8860:	00028868 	.word	0x00028868
    8864:	00028928 	.word	0x00028928
    8868:	0002b28f 	.word	0x0002b28f
    886c:	200004f4 	.word	0x200004f4
    8870:	0002b2ae 	.word	0x0002b2ae

00008874 <bt_pub_key_get>:

const u8_t *bt_pub_key_get(void)
{
    8874:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8876:	4804      	ldr	r0, [pc, #16]	; (8888 <bt_pub_key_get+0x14>)
    8878:	f01c ff2c 	bl	256d4 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    887c:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
    8880:	4802      	ldr	r0, [pc, #8]	; (888c <bt_pub_key_get+0x18>)
    8882:	bf08      	it	eq
    8884:	2000      	moveq	r0, #0
    8886:	bd08      	pop	{r3, pc}
    8888:	2000685c 	.word	0x2000685c
    888c:	200022c1 	.word	0x200022c1

00008890 <bt_dh_key_gen>:

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    8890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8892:	4d1a      	ldr	r5, [pc, #104]	; (88fc <bt_dh_key_gen+0x6c>)
    8894:	682b      	ldr	r3, [r5, #0]
{
    8896:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8898:	b113      	cbz	r3, 88a0 <bt_dh_key_gen+0x10>
		return -EBUSY;
    889a:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    889e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88a0:	4817      	ldr	r0, [pc, #92]	; (8900 <bt_dh_key_gen+0x70>)
    88a2:	f01c ff17 	bl	256d4 <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    88a6:	06c2      	lsls	r2, r0, #27
    88a8:	f3c0 1700 	ubfx	r7, r0, #4, #1
    88ac:	d4f5      	bmi.n	889a <bt_dh_key_gen+0xa>
    88ae:	4814      	ldr	r0, [pc, #80]	; (8900 <bt_dh_key_gen+0x70>)
    88b0:	f01c ff10 	bl	256d4 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    88b4:	0703      	lsls	r3, r0, #28
    88b6:	d51d      	bpl.n	88f4 <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
    88b8:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    88ba:	f242 0026 	movw	r0, #8230	; 0x2026
    88be:	2140      	movs	r1, #64	; 0x40
    88c0:	f7fe fa44 	bl	6d4c <bt_hci_cmd_create>
	if (!buf) {
    88c4:	4604      	mov	r4, r0
    88c6:	b918      	cbnz	r0, 88d0 <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
    88c8:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    88ca:	f06f 0036 	mvn.w	r0, #54	; 0x36
    88ce:	e7e6      	b.n	889e <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
    88d0:	2140      	movs	r1, #64	; 0x40
    88d2:	3008      	adds	r0, #8
    88d4:	f015 fea2 	bl	1e61c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    88d8:	2240      	movs	r2, #64	; 0x40
    88da:	4631      	mov	r1, r6
    88dc:	f01c fbd8 	bl	25090 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    88e0:	463a      	mov	r2, r7
    88e2:	4621      	mov	r1, r4
    88e4:	f242 0026 	movw	r0, #8230	; 0x2026
    88e8:	f7fe fba8 	bl	703c <bt_hci_cmd_send_sync>
	if (err) {
    88ec:	2800      	cmp	r0, #0
    88ee:	d0d6      	beq.n	889e <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
    88f0:	602f      	str	r7, [r5, #0]
		return err;
    88f2:	e7d4      	b.n	889e <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
    88f4:	f06f 0030 	mvn.w	r0, #48	; 0x30
    88f8:	e7d1      	b.n	889e <bt_dh_key_gen+0xe>
    88fa:	bf00      	nop
    88fc:	200004f0 	.word	0x200004f0
    8900:	2000685c 	.word	0x2000685c

00008904 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    8904:	2300      	movs	r3, #0
	tx->user_data = NULL;
    8906:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    890a:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    890c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    890e:	4801      	ldr	r0, [pc, #4]	; (8914 <tx_free+0x10>)
    8910:	f01f bce6 	b.w	282e0 <k_queue_append>
    8914:	20007520 	.word	0x20007520

00008918 <notify_connected>:
{
    8918:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    891a:	4b09      	ldr	r3, [pc, #36]	; (8940 <notify_connected+0x28>)
    891c:	681d      	ldr	r5, [r3, #0]
{
    891e:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    8920:	7a61      	ldrb	r1, [r4, #9]
    8922:	b92d      	cbnz	r5, 8930 <notify_connected+0x18>
	if (!conn->err) {
    8924:	b951      	cbnz	r1, 893c <notify_connected+0x24>
		bt_gatt_connected(conn);
    8926:	4620      	mov	r0, r4
}
    8928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    892c:	f003 b812 	b.w	b954 <bt_gatt_connected>
		if (cb->connected) {
    8930:	682b      	ldr	r3, [r5, #0]
    8932:	b10b      	cbz	r3, 8938 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    8934:	4620      	mov	r0, r4
    8936:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8938:	692d      	ldr	r5, [r5, #16]
    893a:	e7f1      	b.n	8920 <notify_connected+0x8>
}
    893c:	bd38      	pop	{r3, r4, r5, pc}
    893e:	bf00      	nop
    8940:	2000059c 	.word	0x2000059c

00008944 <send_frag>:
	return 0;
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    8944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    8948:	694d      	ldr	r5, [r1, #20]
{
    894a:	4604      	mov	r4, r0
    894c:	460e      	mov	r6, r1
    894e:	4691      	mov	r9, r2
    8950:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    8952:	484b      	ldr	r0, [pc, #300]	; (8a80 <send_frag+0x13c>)
    8954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8958:	f019 f8e2 	bl	21b20 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    895c:	7aa3      	ldrb	r3, [r4, #10]
    895e:	2b06      	cmp	r3, #6
    8960:	d14e      	bne.n	8a00 <send_frag+0xbc>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    8962:	2104      	movs	r1, #4
    8964:	f106 0008 	add.w	r0, r6, #8
    8968:	f015 fdf4 	bl	1e554 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    896c:	8822      	ldrh	r2, [r4, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    896e:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    8970:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    8974:	3b04      	subs	r3, #4
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    8976:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    8978:	8043      	strh	r3, [r0, #2]
	__asm__ volatile(
    897a:	f04f 0320 	mov.w	r3, #32
    897e:	f3ef 8211 	mrs	r2, BASEPRI
    8982:	f383 8811 	msr	BASEPRI, r3
    8986:	f3bf 8f6f 	isb	sy

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    898a:	2d00      	cmp	r5, #0
    898c:	d04a      	beq.n	8a24 <send_frag+0xe0>
	parent->next = child;
    898e:	2300      	movs	r3, #0
    8990:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    8992:	69a3      	ldr	r3, [r4, #24]
    8994:	2b00      	cmp	r3, #0
    8996:	d142      	bne.n	8a1e <send_frag+0xda>
	list->head = node;
    8998:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    899c:	f382 8811 	msr	BASEPRI, r2
    89a0:	f3bf 8f6f 	isb	sy
    89a4:	2302      	movs	r3, #2
    89a6:	7533      	strb	r3, [r6, #20]
	}
	irq_unlock(key);

	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	err = bt_send(buf);
    89a8:	4630      	mov	r0, r6
    89aa:	f01c ff30 	bl	2580e <bt_send>
	if (err) {
    89ae:	4601      	mov	r1, r0
    89b0:	2800      	cmp	r0, #0
    89b2:	d062      	beq.n	8a7a <send_frag+0x136>
    89b4:	4b33      	ldr	r3, [pc, #204]	; (8a84 <send_frag+0x140>)
    89b6:	4a34      	ldr	r2, [pc, #208]	; (8a88 <send_frag+0x144>)
		BT_ERR("Unable to send to driver (err %d)", err);
    89b8:	4834      	ldr	r0, [pc, #208]	; (8a8c <send_frag+0x148>)
    89ba:	1ad2      	subs	r2, r2, r3
    89bc:	08d2      	lsrs	r2, r2, #3
    89be:	0192      	lsls	r2, r2, #6
    89c0:	f042 0201 	orr.w	r2, r2, #1
    89c4:	f01a fcff 	bl	233c6 <log_1>
	__asm__ volatile(
    89c8:	f04f 0320 	mov.w	r3, #32
    89cc:	f3ef 8911 	mrs	r9, BASEPRI
    89d0:	f383 8811 	msr	BASEPRI, r3
    89d4:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    89d8:	2d00      	cmp	r5, #0
    89da:	d039      	beq.n	8a50 <send_frag+0x10c>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    89dc:	6963      	ldr	r3, [r4, #20]
    89de:	2200      	movs	r2, #0
    89e0:	b153      	cbz	r3, 89f8 <send_frag+0xb4>
    89e2:	429d      	cmp	r5, r3
    89e4:	d131      	bne.n	8a4a <send_frag+0x106>
Z_GENLIST_REMOVE(slist, snode)
    89e6:	682b      	ldr	r3, [r5, #0]
    89e8:	bb4a      	cbnz	r2, 8a3e <send_frag+0xfa>
    89ea:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    89ec:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    89ee:	4295      	cmp	r5, r2
    89f0:	d100      	bne.n	89f4 <send_frag+0xb0>
	list->tail = node;
    89f2:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    89f4:	2300      	movs	r3, #0
    89f6:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    89f8:	f389 8811 	msr	BASEPRI, r9
    89fc:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    8a00:	481f      	ldr	r0, [pc, #124]	; (8a80 <send_frag+0x13c>)
    8a02:	f019 f849 	bl	21a98 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    8a06:	b115      	cbz	r5, 8a0e <send_frag+0xca>
		tx_free(tx);
    8a08:	4628      	mov	r0, r5
    8a0a:	f7ff ff7b 	bl	8904 <tx_free>
	}

	if (always_consume) {
    8a0e:	b11f      	cbz	r7, 8a18 <send_frag+0xd4>
		net_buf_unref(buf);
    8a10:	4630      	mov	r0, r6
    8a12:	f015 fd3d 	bl	1e490 <net_buf_unref>
	}
	return false;
    8a16:	2700      	movs	r7, #0
}
    8a18:	4638      	mov	r0, r7
    8a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8a1e:	601d      	str	r5, [r3, #0]
	list->tail = node;
    8a20:	61a5      	str	r5, [r4, #24]
}
    8a22:	e7bb      	b.n	899c <send_frag+0x58>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    8a24:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    8a26:	b133      	cbz	r3, 8a36 <send_frag+0xf2>
			pending_no_cb = &tail_tx->pending_no_cb;
    8a28:	f103 080c 	add.w	r8, r3, #12
    8a2c:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    8a2e:	3301      	adds	r3, #1
    8a30:	f8c8 3000 	str.w	r3, [r8]
    8a34:	e7b2      	b.n	899c <send_frag+0x58>
			pending_no_cb = &conn->pending_no_cb;
    8a36:	69e3      	ldr	r3, [r4, #28]
    8a38:	f104 081c 	add.w	r8, r4, #28
    8a3c:	e7f7      	b.n	8a2e <send_frag+0xea>
	parent->next = child;
    8a3e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    8a40:	69a3      	ldr	r3, [r4, #24]
    8a42:	429d      	cmp	r5, r3
	list->tail = node;
    8a44:	bf08      	it	eq
    8a46:	61a2      	streq	r2, [r4, #24]
}
    8a48:	e7d4      	b.n	89f4 <send_frag+0xb0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8a4a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8a4c:	681b      	ldr	r3, [r3, #0]
    8a4e:	e7c7      	b.n	89e0 <send_frag+0x9c>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
    8a50:	f8d8 3000 	ldr.w	r3, [r8]
    8a54:	b95b      	cbnz	r3, 8a6e <send_frag+0x12a>
    8a56:	490e      	ldr	r1, [pc, #56]	; (8a90 <send_frag+0x14c>)
    8a58:	480e      	ldr	r0, [pc, #56]	; (8a94 <send_frag+0x150>)
    8a5a:	4a0f      	ldr	r2, [pc, #60]	; (8a98 <send_frag+0x154>)
    8a5c:	f240 536f 	movw	r3, #1391	; 0x56f
    8a60:	f01a fc33 	bl	232ca <printk>
    8a64:	480c      	ldr	r0, [pc, #48]	; (8a98 <send_frag+0x154>)
    8a66:	f240 516f 	movw	r1, #1391	; 0x56f
    8a6a:	f01a fc71 	bl	23350 <assert_post_action>
			(*pending_no_cb)--;
    8a6e:	f8d8 3000 	ldr.w	r3, [r8]
    8a72:	3b01      	subs	r3, #1
    8a74:	f8c8 3000 	str.w	r3, [r8]
    8a78:	e7be      	b.n	89f8 <send_frag+0xb4>
	return true;
    8a7a:	2701      	movs	r7, #1
    8a7c:	e7cc      	b.n	8a18 <send_frag+0xd4>
    8a7e:	bf00      	nop
    8a80:	20006874 	.word	0x20006874
    8a84:	00028868 	.word	0x00028868
    8a88:	00028878 	.word	0x00028878
    8a8c:	0002ad0d 	.word	0x0002ad0d
    8a90:	0002b30d 	.word	0x0002b30d
    8a94:	000297e6 	.word	0x000297e6
    8a98:	0002b2dd 	.word	0x0002b2dd

00008a9c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    8a9c:	b570      	push	{r4, r5, r6, lr}
    8a9e:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    8aa0:	f100 0634 	add.w	r6, r0, #52	; 0x34
    8aa4:	2100      	movs	r1, #0
    8aa6:	4630      	mov	r0, r6
    8aa8:	f015 fbba 	bl	1e220 <net_buf_get>
    8aac:	4605      	mov	r5, r0
    8aae:	bb48      	cbnz	r0, 8b04 <conn_cleanup+0x68>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
    8ab0:	6963      	ldr	r3, [r4, #20]
    8ab2:	b173      	cbz	r3, 8ad2 <conn_cleanup+0x36>
    8ab4:	4917      	ldr	r1, [pc, #92]	; (8b14 <conn_cleanup+0x78>)
    8ab6:	4a18      	ldr	r2, [pc, #96]	; (8b18 <conn_cleanup+0x7c>)
    8ab8:	4818      	ldr	r0, [pc, #96]	; (8b1c <conn_cleanup+0x80>)
    8aba:	f240 53dd 	movw	r3, #1501	; 0x5dd
    8abe:	f01a fc04 	bl	232ca <printk>
    8ac2:	4817      	ldr	r0, [pc, #92]	; (8b20 <conn_cleanup+0x84>)
    8ac4:	f01a fc01 	bl	232ca <printk>
    8ac8:	4813      	ldr	r0, [pc, #76]	; (8b18 <conn_cleanup+0x7c>)
    8aca:	f240 51dd 	movw	r1, #1501	; 0x5dd
    8ace:	f01a fc3f 	bl	23350 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
    8ad2:	69e3      	ldr	r3, [r4, #28]
    8ad4:	b15b      	cbz	r3, 8aee <conn_cleanup+0x52>
    8ad6:	4913      	ldr	r1, [pc, #76]	; (8b24 <conn_cleanup+0x88>)
    8ad8:	4810      	ldr	r0, [pc, #64]	; (8b1c <conn_cleanup+0x80>)
    8ada:	4a0f      	ldr	r2, [pc, #60]	; (8b18 <conn_cleanup+0x7c>)
    8adc:	f240 53de 	movw	r3, #1502	; 0x5de
    8ae0:	f01a fbf3 	bl	232ca <printk>
    8ae4:	480c      	ldr	r0, [pc, #48]	; (8b18 <conn_cleanup+0x7c>)
    8ae6:	f240 51de 	movw	r1, #1502	; 0x5de
    8aea:	f01a fc31 	bl	23350 <assert_post_action>

	bt_conn_reset_rx_state(conn);
    8aee:	4620      	mov	r0, r4
    8af0:	f01c fee1 	bl	258b6 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8af4:	f104 0154 	add.w	r1, r4, #84	; 0x54
    8af8:	480b      	ldr	r0, [pc, #44]	; (8b28 <conn_cleanup+0x8c>)

	k_delayed_work_submit(&conn->update_work, K_NO_WAIT);
}
    8afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8afe:	2200      	movs	r2, #0
    8b00:	f019 ba22 	b.w	21f48 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    8b04:	6968      	ldr	r0, [r5, #20]
    8b06:	b108      	cbz	r0, 8b0c <conn_cleanup+0x70>
			tx_free(tx_data(buf)->tx);
    8b08:	f7ff fefc 	bl	8904 <tx_free>
		net_buf_unref(buf);
    8b0c:	4628      	mov	r0, r5
    8b0e:	f015 fcbf 	bl	1e490 <net_buf_unref>
    8b12:	e7c7      	b.n	8aa4 <conn_cleanup+0x8>
    8b14:	0002b320 	.word	0x0002b320
    8b18:	0002b2dd 	.word	0x0002b2dd
    8b1c:	000297e6 	.word	0x000297e6
    8b20:	0002b346 	.word	0x0002b346
    8b24:	0002b35b 	.word	0x0002b35b
    8b28:	20001c08 	.word	0x20001c08

00008b2c <bt_conn_get_pkts>:
}
    8b2c:	4800      	ldr	r0, [pc, #0]	; (8b30 <bt_conn_get_pkts+0x4>)
    8b2e:	4770      	bx	lr
    8b30:	20006874 	.word	0x20006874

00008b34 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    8b34:	1d03      	adds	r3, r0, #4
{
    8b36:	b570      	push	{r4, r5, r6, lr}
    8b38:	4604      	mov	r4, r0
    8b3a:	4618      	mov	r0, r3
    8b3c:	f01c feb5 	bl	258aa <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    8b40:	0582      	lsls	r2, r0, #22
    8b42:	d519      	bpl.n	8b78 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    8b44:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    8b48:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    8b4c:	4291      	cmp	r1, r2
    8b4e:	d813      	bhi.n	8b78 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    8b50:	f8b4 108e 	ldrh.w	r1, [r4, #142]	; 0x8e
    8b54:	4291      	cmp	r1, r2
    8b56:	d30f      	bcc.n	8b78 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    8b58:	e9d4 1224 	ldrd	r1, r2, [r4, #144]	; 0x90
    8b5c:	4291      	cmp	r1, r2
    8b5e:	d10b      	bne.n	8b78 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8b60:	f3bf 8f5b 	dmb	ish
    8b64:	e853 2f00 	ldrex	r2, [r3]
    8b68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    8b6c:	e843 2100 	strex	r1, r2, [r3]
    8b70:	2900      	cmp	r1, #0
    8b72:	d1f7      	bne.n	8b64 <notify_le_param_updated+0x30>
    8b74:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    8b78:	4b07      	ldr	r3, [pc, #28]	; (8b98 <notify_le_param_updated+0x64>)
    8b7a:	681d      	ldr	r5, [r3, #0]
    8b7c:	b905      	cbnz	r5, 8b80 <notify_le_param_updated+0x4c>
}
    8b7e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    8b80:	68ee      	ldr	r6, [r5, #12]
    8b82:	b13e      	cbz	r6, 8b94 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    8b84:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    8b88:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
    8b8c:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
    8b90:	4620      	mov	r0, r4
    8b92:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    8b94:	692d      	ldr	r5, [r5, #16]
    8b96:	e7f1      	b.n	8b7c <notify_le_param_updated+0x48>
    8b98:	2000059c 	.word	0x2000059c

00008b9c <le_param_req>:
{
    8b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b9e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    8ba0:	4608      	mov	r0, r1
{
    8ba2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    8ba4:	f01c fe05 	bl	257b2 <bt_le_conn_params_valid>
    8ba8:	4604      	mov	r4, r0
    8baa:	b910      	cbnz	r0, 8bb2 <le_param_req+0x16>
		return false;
    8bac:	2400      	movs	r4, #0
}
    8bae:	4620      	mov	r0, r4
    8bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    8bb2:	4b09      	ldr	r3, [pc, #36]	; (8bd8 <le_param_req+0x3c>)
    8bb4:	681e      	ldr	r6, [r3, #0]
    8bb6:	2e00      	cmp	r6, #0
    8bb8:	d0f9      	beq.n	8bae <le_param_req+0x12>
		if (!cb->le_param_req) {
    8bba:	68b3      	ldr	r3, [r6, #8]
    8bbc:	b90b      	cbnz	r3, 8bc2 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    8bbe:	6936      	ldr	r6, [r6, #16]
    8bc0:	e7f9      	b.n	8bb6 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    8bc2:	4629      	mov	r1, r5
    8bc4:	4638      	mov	r0, r7
    8bc6:	4798      	blx	r3
    8bc8:	2800      	cmp	r0, #0
    8bca:	d0ef      	beq.n	8bac <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    8bcc:	4628      	mov	r0, r5
    8bce:	f01c fdf0 	bl	257b2 <bt_le_conn_params_valid>
    8bd2:	2800      	cmp	r0, #0
    8bd4:	d1f3      	bne.n	8bbe <le_param_req+0x22>
    8bd6:	e7e9      	b.n	8bac <le_param_req+0x10>
    8bd8:	2000059c 	.word	0x2000059c

00008bdc <bt_conn_cb_register>:
	cb->_next = callback_list;
    8bdc:	4b02      	ldr	r3, [pc, #8]	; (8be8 <bt_conn_cb_register+0xc>)
    8bde:	681a      	ldr	r2, [r3, #0]
    8be0:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    8be2:	6018      	str	r0, [r3, #0]
}
    8be4:	4770      	bx	lr
    8be6:	bf00      	nop
    8be8:	2000059c 	.word	0x2000059c

00008bec <bt_conn_recv>:
{
    8bec:	b570      	push	{r4, r5, r6, lr}
    8bee:	4616      	mov	r6, r2
    8bf0:	4604      	mov	r4, r0
    8bf2:	460d      	mov	r5, r1
	tx_notify(conn);
    8bf4:	f01c fe84 	bl	25900 <tx_notify>
	switch (flags) {
    8bf8:	2e01      	cmp	r6, #1
    8bfa:	d01b      	beq.n	8c34 <bt_conn_recv+0x48>
    8bfc:	2e02      	cmp	r6, #2
    8bfe:	d16c      	bne.n	8cda <bt_conn_recv+0xee>
		len = sys_le16_to_cpu(hdr->len);
    8c00:	68ab      	ldr	r3, [r5, #8]
    8c02:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    8c04:	89a3      	ldrh	r3, [r4, #12]
    8c06:	b163      	cbz	r3, 8c22 <bt_conn_recv+0x36>
    8c08:	4b3d      	ldr	r3, [pc, #244]	; (8d00 <bt_conn_recv+0x114>)
    8c0a:	493e      	ldr	r1, [pc, #248]	; (8d04 <bt_conn_recv+0x118>)
			BT_ERR("Unexpected first L2CAP frame");
    8c0c:	483e      	ldr	r0, [pc, #248]	; (8d08 <bt_conn_recv+0x11c>)
    8c0e:	1ac9      	subs	r1, r1, r3
    8c10:	08c9      	lsrs	r1, r1, #3
    8c12:	0189      	lsls	r1, r1, #6
    8c14:	f041 0101 	orr.w	r1, r1, #1
    8c18:	f01a fbc8 	bl	233ac <log_0>
			bt_conn_reset_rx_state(conn);
    8c1c:	4620      	mov	r0, r4
    8c1e:	f01c fe4a 	bl	258b6 <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    8c22:	89ab      	ldrh	r3, [r5, #12]
    8c24:	1af3      	subs	r3, r6, r3
    8c26:	3304      	adds	r3, #4
    8c28:	b29b      	uxth	r3, r3
    8c2a:	81a3      	strh	r3, [r4, #12]
		if (conn->rx_len) {
    8c2c:	2b00      	cmp	r3, #0
    8c2e:	d043      	beq.n	8cb8 <bt_conn_recv+0xcc>
			conn->rx = buf;
    8c30:	6125      	str	r5, [r4, #16]
}
    8c32:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    8c34:	89a3      	ldrh	r3, [r4, #12]
    8c36:	b98b      	cbnz	r3, 8c5c <bt_conn_recv+0x70>
    8c38:	4932      	ldr	r1, [pc, #200]	; (8d04 <bt_conn_recv+0x118>)
    8c3a:	4b31      	ldr	r3, [pc, #196]	; (8d00 <bt_conn_recv+0x114>)
			BT_ERR("Unexpected L2CAP continuation");
    8c3c:	4833      	ldr	r0, [pc, #204]	; (8d0c <bt_conn_recv+0x120>)
    8c3e:	1ac9      	subs	r1, r1, r3
    8c40:	08c9      	lsrs	r1, r1, #3
    8c42:	0189      	lsls	r1, r1, #6
    8c44:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("L2CAP data overflow");
    8c48:	f01a fbb0 	bl	233ac <log_0>
			bt_conn_reset_rx_state(conn);
    8c4c:	4620      	mov	r0, r4
    8c4e:	f01c fe32 	bl	258b6 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    8c52:	4628      	mov	r0, r5
}
    8c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    8c58:	f015 bc1a 	b.w	1e490 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    8c5c:	89ae      	ldrh	r6, [r5, #12]
    8c5e:	42b3      	cmp	r3, r6
    8c60:	d208      	bcs.n	8c74 <bt_conn_recv+0x88>
    8c62:	4928      	ldr	r1, [pc, #160]	; (8d04 <bt_conn_recv+0x118>)
    8c64:	4b26      	ldr	r3, [pc, #152]	; (8d00 <bt_conn_recv+0x114>)
			BT_ERR("L2CAP data overflow");
    8c66:	482a      	ldr	r0, [pc, #168]	; (8d10 <bt_conn_recv+0x124>)
    8c68:	1ac9      	subs	r1, r1, r3
    8c6a:	08c9      	lsrs	r1, r1, #3
    8c6c:	0189      	lsls	r1, r1, #6
    8c6e:	f041 0101 	orr.w	r1, r1, #1
    8c72:	e7e9      	b.n	8c48 <bt_conn_recv+0x5c>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    8c74:	6920      	ldr	r0, [r4, #16]
    8c76:	3008      	adds	r0, #8
    8c78:	f01f f930 	bl	27edc <net_buf_simple_tailroom>
    8c7c:	4286      	cmp	r6, r0
    8c7e:	d908      	bls.n	8c92 <bt_conn_recv+0xa6>
    8c80:	4920      	ldr	r1, [pc, #128]	; (8d04 <bt_conn_recv+0x118>)
    8c82:	4b1f      	ldr	r3, [pc, #124]	; (8d00 <bt_conn_recv+0x114>)
			BT_ERR("Not enough buffer space for L2CAP data");
    8c84:	4823      	ldr	r0, [pc, #140]	; (8d14 <bt_conn_recv+0x128>)
    8c86:	1ac9      	subs	r1, r1, r3
    8c88:	08c9      	lsrs	r1, r1, #3
    8c8a:	0189      	lsls	r1, r1, #6
    8c8c:	f041 0101 	orr.w	r1, r1, #1
    8c90:	e7da      	b.n	8c48 <bt_conn_recv+0x5c>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    8c92:	6920      	ldr	r0, [r4, #16]
    8c94:	89aa      	ldrh	r2, [r5, #12]
    8c96:	68a9      	ldr	r1, [r5, #8]
    8c98:	3008      	adds	r0, #8
    8c9a:	f01f f927 	bl	27eec <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    8c9e:	89a3      	ldrh	r3, [r4, #12]
    8ca0:	89aa      	ldrh	r2, [r5, #12]
    8ca2:	1a9b      	subs	r3, r3, r2
    8ca4:	81a3      	strh	r3, [r4, #12]
		net_buf_unref(buf);
    8ca6:	4628      	mov	r0, r5
    8ca8:	f015 fbf2 	bl	1e490 <net_buf_unref>
		if (conn->rx_len) {
    8cac:	89a3      	ldrh	r3, [r4, #12]
    8cae:	2b00      	cmp	r3, #0
    8cb0:	d1bf      	bne.n	8c32 <bt_conn_recv+0x46>
		buf = conn->rx;
    8cb2:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    8cb4:	81a3      	strh	r3, [r4, #12]
		conn->rx = NULL;
    8cb6:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    8cb8:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    8cba:	89aa      	ldrh	r2, [r5, #12]
    8cbc:	8819      	ldrh	r1, [r3, #0]
    8cbe:	1d0b      	adds	r3, r1, #4
    8cc0:	4293      	cmp	r3, r2
    8cc2:	d016      	beq.n	8cf2 <bt_conn_recv+0x106>
    8cc4:	480e      	ldr	r0, [pc, #56]	; (8d00 <bt_conn_recv+0x114>)
    8cc6:	4b0f      	ldr	r3, [pc, #60]	; (8d04 <bt_conn_recv+0x118>)
    8cc8:	1a1b      	subs	r3, r3, r0
    8cca:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    8ccc:	019b      	lsls	r3, r3, #6
    8cce:	4812      	ldr	r0, [pc, #72]	; (8d18 <bt_conn_recv+0x12c>)
    8cd0:	f043 0301 	orr.w	r3, r3, #1
    8cd4:	f01a fb8b 	bl	233ee <log_2>
		net_buf_unref(buf);
    8cd8:	e7bb      	b.n	8c52 <bt_conn_recv+0x66>
    8cda:	4a09      	ldr	r2, [pc, #36]	; (8d00 <bt_conn_recv+0x114>)
    8cdc:	4b09      	ldr	r3, [pc, #36]	; (8d04 <bt_conn_recv+0x118>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    8cde:	480f      	ldr	r0, [pc, #60]	; (8d1c <bt_conn_recv+0x130>)
    8ce0:	1a9b      	subs	r3, r3, r2
    8ce2:	08db      	lsrs	r3, r3, #3
    8ce4:	019b      	lsls	r3, r3, #6
    8ce6:	f043 0201 	orr.w	r2, r3, #1
    8cea:	4631      	mov	r1, r6
    8cec:	f01a fb6b 	bl	233c6 <log_1>
		bt_conn_reset_rx_state(conn);
    8cf0:	e7ac      	b.n	8c4c <bt_conn_recv+0x60>
	bt_l2cap_recv(conn, buf);
    8cf2:	4629      	mov	r1, r5
    8cf4:	4620      	mov	r0, r4
}
    8cf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    8cfa:	f000 bd21 	b.w	9740 <bt_l2cap_recv>
    8cfe:	bf00      	nop
    8d00:	00028868 	.word	0x00028868
    8d04:	00028878 	.word	0x00028878
    8d08:	0002b374 	.word	0x0002b374
    8d0c:	0002b391 	.word	0x0002b391
    8d10:	0002b3af 	.word	0x0002b3af
    8d14:	0002b3c3 	.word	0x0002b3c3
    8d18:	0002b408 	.word	0x0002b408
    8d1c:	0002b3ea 	.word	0x0002b3ea

00008d20 <bt_conn_send_cb>:
{
    8d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d24:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    8d26:	7a83      	ldrb	r3, [r0, #10]
    8d28:	2b06      	cmp	r3, #6
{
    8d2a:	4606      	mov	r6, r0
    8d2c:	460d      	mov	r5, r1
    8d2e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    8d30:	d00f      	beq.n	8d52 <bt_conn_send_cb+0x32>
    8d32:	4b29      	ldr	r3, [pc, #164]	; (8dd8 <bt_conn_send_cb+0xb8>)
    8d34:	4929      	ldr	r1, [pc, #164]	; (8ddc <bt_conn_send_cb+0xbc>)
		BT_ERR("not connected!");
    8d36:	482a      	ldr	r0, [pc, #168]	; (8de0 <bt_conn_send_cb+0xc0>)
    8d38:	1ac9      	subs	r1, r1, r3
    8d3a:	08c9      	lsrs	r1, r1, #3
    8d3c:	0189      	lsls	r1, r1, #6
    8d3e:	f041 0101 	orr.w	r1, r1, #1
    8d42:	f01a fb33 	bl	233ac <log_0>
		net_buf_unref(buf);
    8d46:	4628      	mov	r0, r5
    8d48:	f015 fba2 	bl	1e490 <net_buf_unref>
			return -ENOTCONN;
    8d4c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    8d50:	e01d      	b.n	8d8e <bt_conn_send_cb+0x6e>
	if (cb) {
    8d52:	2a00      	cmp	r2, #0
    8d54:	d03d      	beq.n	8dd2 <bt_conn_send_cb+0xb2>
	return z_impl_k_current_get();
    8d56:	f018 fe99 	bl	21a8c <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    8d5a:	4b22      	ldr	r3, [pc, #136]	; (8de4 <bt_conn_send_cb+0xc4>)
    8d5c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    8d5e:	4822      	ldr	r0, [pc, #136]	; (8de8 <bt_conn_send_cb+0xc8>)
    8d60:	bf0c      	ite	eq
    8d62:	2100      	moveq	r1, #0
    8d64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    8d68:	f017 fb3a 	bl	203e0 <z_impl_k_queue_get>
    8d6c:	4604      	mov	r4, r0
		if (!tx) {
    8d6e:	b980      	cbnz	r0, 8d92 <bt_conn_send_cb+0x72>
    8d70:	4b19      	ldr	r3, [pc, #100]	; (8dd8 <bt_conn_send_cb+0xb8>)
    8d72:	491a      	ldr	r1, [pc, #104]	; (8ddc <bt_conn_send_cb+0xbc>)
			BT_ERR("Unable to allocate TX context");
    8d74:	481d      	ldr	r0, [pc, #116]	; (8dec <bt_conn_send_cb+0xcc>)
    8d76:	1ac9      	subs	r1, r1, r3
    8d78:	08c9      	lsrs	r1, r1, #3
    8d7a:	0189      	lsls	r1, r1, #6
    8d7c:	f041 0101 	orr.w	r1, r1, #1
    8d80:	f01a fb14 	bl	233ac <log_0>
			net_buf_unref(buf);
    8d84:	4628      	mov	r0, r5
    8d86:	f015 fb83 	bl	1e490 <net_buf_unref>
			return -ENOBUFS;
    8d8a:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    8d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    8d92:	7ab3      	ldrb	r3, [r6, #10]
    8d94:	2b06      	cmp	r3, #6
    8d96:	d010      	beq.n	8dba <bt_conn_send_cb+0x9a>
    8d98:	4b0f      	ldr	r3, [pc, #60]	; (8dd8 <bt_conn_send_cb+0xb8>)
    8d9a:	4910      	ldr	r1, [pc, #64]	; (8ddc <bt_conn_send_cb+0xbc>)
			BT_WARN("Disconnected while allocating context");
    8d9c:	4814      	ldr	r0, [pc, #80]	; (8df0 <bt_conn_send_cb+0xd0>)
    8d9e:	1ac9      	subs	r1, r1, r3
    8da0:	08c9      	lsrs	r1, r1, #3
    8da2:	0189      	lsls	r1, r1, #6
    8da4:	f041 0102 	orr.w	r1, r1, #2
    8da8:	f01a fb00 	bl	233ac <log_0>
			net_buf_unref(buf);
    8dac:	4628      	mov	r0, r5
    8dae:	f015 fb6f 	bl	1e490 <net_buf_unref>
			tx_free(tx);
    8db2:	4620      	mov	r0, r4
    8db4:	f7ff fda6 	bl	8904 <tx_free>
    8db8:	e7c8      	b.n	8d4c <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    8dba:	2300      	movs	r3, #0
		tx->user_data = user_data;
    8dbc:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    8dc0:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    8dc2:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    8dc4:	f106 0034 	add.w	r0, r6, #52	; 0x34
    8dc8:	4629      	mov	r1, r5
    8dca:	f015 fb2d 	bl	1e428 <net_buf_put>
	return 0;
    8dce:	2000      	movs	r0, #0
    8dd0:	e7dd      	b.n	8d8e <bt_conn_send_cb+0x6e>
		tx_data(buf)->tx = NULL;
    8dd2:	614a      	str	r2, [r1, #20]
    8dd4:	e7f6      	b.n	8dc4 <bt_conn_send_cb+0xa4>
    8dd6:	bf00      	nop
    8dd8:	00028868 	.word	0x00028868
    8ddc:	00028878 	.word	0x00028878
    8de0:	0002b424 	.word	0x0002b424
    8de4:	20001c1c 	.word	0x20001c1c
    8de8:	20007520 	.word	0x20007520
    8dec:	0002b433 	.word	0x0002b433
    8df0:	0002b451 	.word	0x0002b451

00008df4 <bt_conn_prepare_events>:
{
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0U;
    8df4:	4b1a      	ldr	r3, [pc, #104]	; (8e60 <bt_conn_prepare_events+0x6c>)
{
    8df6:	b510      	push	{r4, lr}
	conn_change.signaled = 0U;
    8df8:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    8dfa:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    8dfc:	609a      	str	r2, [r3, #8]
{
    8dfe:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    8e00:	f019 fef2 	bl	22be8 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    8e04:	4b17      	ldr	r3, [pc, #92]	; (8e64 <bt_conn_prepare_events+0x70>)
    8e06:	f103 0050 	add.w	r0, r3, #80	; 0x50
    8e0a:	f01c fd4e 	bl	258aa <atomic_get>
    8e0e:	4619      	mov	r1, r3
    8e10:	b908      	cbnz	r0, 8e16 <bt_conn_prepare_events+0x22>
		}

		if (conn->state == BT_CONN_DISCONNECTED &&
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
			conn_cleanup(conn);
			continue;
    8e12:	2001      	movs	r0, #1
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
	}

	return ev_count;
}
    8e14:	bd10      	pop	{r4, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    8e16:	7a9a      	ldrb	r2, [r3, #10]
    8e18:	b99a      	cbnz	r2, 8e42 <bt_conn_prepare_events+0x4e>
    8e1a:	f3bf 8f5b 	dmb	ish
    8e1e:	1d1a      	adds	r2, r3, #4
    8e20:	e852 0f00 	ldrex	r0, [r2]
    8e24:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
    8e28:	e842 ce00 	strex	lr, ip, [r2]
    8e2c:	f1be 0f00 	cmp.w	lr, #0
    8e30:	d1f6      	bne.n	8e20 <bt_conn_prepare_events+0x2c>
    8e32:	f3bf 8f5b 	dmb	ish
    8e36:	0642      	lsls	r2, r0, #25
    8e38:	d503      	bpl.n	8e42 <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    8e3a:	4618      	mov	r0, r3
    8e3c:	f7ff fe2e 	bl	8a9c <conn_cleanup>
    8e40:	e7e7      	b.n	8e12 <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    8e42:	7a8b      	ldrb	r3, [r1, #10]
    8e44:	2b06      	cmp	r3, #6
    8e46:	d1e4      	bne.n	8e12 <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    8e48:	4b07      	ldr	r3, [pc, #28]	; (8e68 <bt_conn_prepare_events+0x74>)
    8e4a:	f104 0014 	add.w	r0, r4, #20
    8e4e:	2200      	movs	r2, #0
    8e50:	2104      	movs	r1, #4
    8e52:	f019 fec9 	bl	22be8 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    8e56:	2301      	movs	r3, #1
    8e58:	f884 3020 	strb.w	r3, [r4, #32]
    8e5c:	2002      	movs	r0, #2
	return ev_count;
    8e5e:	e7d9      	b.n	8e14 <bt_conn_prepare_events+0x20>
    8e60:	20006a70 	.word	0x20006a70
    8e64:	200005e0 	.word	0x200005e0
    8e68:	20000614 	.word	0x20000614

00008e6c <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(u8_t id, const bt_addr_le_t *peer)
{
    8e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    8e70:	4c19      	ldr	r4, [pc, #100]	; (8ed8 <bt_conn_add_le+0x6c>)
    8e72:	f104 0850 	add.w	r8, r4, #80	; 0x50
{
    8e76:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    8e78:	4640      	mov	r0, r8
{
    8e7a:	460e      	mov	r6, r1
		if (!atomic_get(&conns[i].ref)) {
    8e7c:	f01c fd15 	bl	258aa <atomic_get>
    8e80:	4605      	mov	r5, r0
    8e82:	b110      	cbz	r0, 8e8a <bt_conn_add_le+0x1e>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    8e84:	2000      	movs	r0, #0
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    8e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(conn, 0, sizeof(*conn));
    8e8a:	4601      	mov	r1, r0
    8e8c:	22a4      	movs	r2, #164	; 0xa4
    8e8e:	4620      	mov	r0, r4
    8e90:	f01c f929 	bl	250e6 <memset>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
    8e94:	4911      	ldr	r1, [pc, #68]	; (8edc <bt_conn_add_le+0x70>)
    8e96:	f104 0054 	add.w	r0, r4, #84	; 0x54
    8e9a:	f01f faf5 	bl	28488 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    8e9e:	4b10      	ldr	r3, [pc, #64]	; (8ee0 <bt_conn_add_le+0x74>)
    8ea0:	62a5      	str	r5, [r4, #40]	; 0x28
    8ea2:	e9c4 350b 	strd	r3, r5, [r4, #44]	; 0x2c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8ea6:	2501      	movs	r5, #1
    8ea8:	f3bf 8f5b 	dmb	ish
    8eac:	e858 3f00 	ldrex	r3, [r8]
    8eb0:	e848 5200 	strex	r2, r5, [r8]
    8eb4:	2a00      	cmp	r2, #0
    8eb6:	d1f9      	bne.n	8eac <bt_conn_add_le+0x40>
    8eb8:	f3bf 8f5b 	dmb	ish
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    8ebc:	2207      	movs	r2, #7
    8ebe:	4631      	mov	r1, r6
    8ec0:	f104 0074 	add.w	r0, r4, #116	; 0x74
	conn->id = id;
    8ec4:	7227      	strb	r7, [r4, #8]
    8ec6:	f01c f8e3 	bl	25090 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    8eca:	4b06      	ldr	r3, [pc, #24]	; (8ee4 <bt_conn_add_le+0x78>)
	conn->type = BT_CONN_TYPE_LE;
    8ecc:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    8ece:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
			conn = &conns[i];
    8ed2:	4620      	mov	r0, r4
	return conn;
    8ed4:	e7d7      	b.n	8e86 <bt_conn_add_le+0x1a>
    8ed6:	bf00      	nop
    8ed8:	200005e0 	.word	0x200005e0
    8edc:	00009191 	.word	0x00009191
    8ee0:	00025947 	.word	0x00025947
    8ee4:	00280018 	.word	0x00280018

00008ee8 <bt_conn_set_state>:
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    8ee8:	b570      	push	{r4, r5, r6, lr}
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    8eea:	7a85      	ldrb	r5, [r0, #10]
    8eec:	428d      	cmp	r5, r1
{
    8eee:	4604      	mov	r4, r0
    8ef0:	460e      	mov	r6, r1
	if (conn->state == state) {
    8ef2:	d10b      	bne.n	8f0c <bt_conn_set_state+0x24>
    8ef4:	495b      	ldr	r1, [pc, #364]	; (9064 <bt_conn_set_state+0x17c>)
    8ef6:	4b5c      	ldr	r3, [pc, #368]	; (9068 <bt_conn_set_state+0x180>)
		BT_WARN("no transition");
    8ef8:	485c      	ldr	r0, [pc, #368]	; (906c <bt_conn_set_state+0x184>)
    8efa:	1ac9      	subs	r1, r1, r3
    8efc:	08c9      	lsrs	r1, r1, #3
    8efe:	0189      	lsls	r1, r1, #6
	default:
		BT_WARN("no valid (%u) state was set", state);

		break;
	}
}
    8f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no transition");
    8f04:	f041 0102 	orr.w	r1, r1, #2
    8f08:	f01a ba50 	b.w	233ac <log_0>
	conn->state = state;
    8f0c:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    8f0e:	b915      	cbnz	r5, 8f16 <bt_conn_set_state+0x2e>
#endif /* defined(CONFIG_BT_BREDR) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_inc(&conn->ref);
    8f10:	3050      	adds	r0, #80	; 0x50
    8f12:	f01c fce8 	bl	258e6 <atomic_inc>
	switch (conn->state) {
    8f16:	7aa3      	ldrb	r3, [r4, #10]
    8f18:	2b07      	cmp	r3, #7
    8f1a:	f200 8094 	bhi.w	9046 <bt_conn_set_state+0x15e>
    8f1e:	e8df f003 	tbb	[pc, r3]
    8f22:	9f1b      	.short	0x9f1b
    8f24:	9f9f9f9f 	.word	0x9f9f9f9f
    8f28:	9f04      	.short	0x9f04
		if (conn->type == BT_CONN_TYPE_SCO) {
    8f2a:	78a3      	ldrb	r3, [r4, #2]
    8f2c:	2b04      	cmp	r3, #4
    8f2e:	f000 8097 	beq.w	9060 <bt_conn_set_state+0x178>
	z_impl_k_queue_init(queue);
    8f32:	f104 0034 	add.w	r0, r4, #52	; 0x34
    8f36:	f01f f9ca 	bl	282ce <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    8f3a:	2100      	movs	r1, #0
    8f3c:	484c      	ldr	r0, [pc, #304]	; (9070 <bt_conn_set_state+0x188>)
    8f3e:	f019 ffa9 	bl	22e94 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    8f42:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    8f44:	4620      	mov	r0, r4
	list->tail = NULL;
    8f46:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    8f4a:	f000 fb13 	bl	9574 <bt_l2cap_connected>
		notify_connected(conn);
    8f4e:	4620      	mov	r0, r4
}
    8f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify_connected(conn);
    8f54:	f7ff bce0 	b.w	8918 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    8f58:	78a3      	ldrb	r3, [r4, #2]
    8f5a:	2b04      	cmp	r3, #4
    8f5c:	d105      	bne.n	8f6a <bt_conn_set_state+0x82>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_dec(&conn->ref);
    8f5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
}
    8f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    8f66:	f01c bcb1 	b.w	258cc <atomic_dec>
		switch (old_state) {
    8f6a:	3d01      	subs	r5, #1
    8f6c:	2d06      	cmp	r5, #6
    8f6e:	d877      	bhi.n	9060 <bt_conn_set_state+0x178>
    8f70:	a301      	add	r3, pc, #4	; (adr r3, 8f78 <bt_conn_set_state+0x90>)
    8f72:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    8f76:	bf00      	nop
    8f78:	00009039 	.word	0x00009039
    8f7c:	00008f5f 	.word	0x00008f5f
    8f80:	00008f5f 	.word	0x00008f5f
    8f84:	00009039 	.word	0x00009039
    8f88:	00009039 	.word	0x00009039
    8f8c:	00008f95 	.word	0x00008f95
    8f90:	00008f95 	.word	0x00008f95
	z_impl_k_sem_give(sem);
    8f94:	4d37      	ldr	r5, [pc, #220]	; (9074 <bt_conn_set_state+0x18c>)
		tx->pending_no_cb = 0U;
    8f96:	2600      	movs	r6, #0
	__asm__ volatile(
    8f98:	f04f 0320 	mov.w	r3, #32
    8f9c:	f3ef 8211 	mrs	r2, BASEPRI
    8fa0:	f383 8811 	msr	BASEPRI, r3
    8fa4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    8fa8:	69e3      	ldr	r3, [r4, #28]
    8faa:	b14b      	cbz	r3, 8fc0 <bt_conn_set_state+0xd8>
			conn->pending_no_cb--;
    8fac:	3b01      	subs	r3, #1
    8fae:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    8fb0:	f382 8811 	msr	BASEPRI, r2
    8fb4:	f3bf 8f6f 	isb	sy
    8fb8:	4628      	mov	r0, r5
    8fba:	f018 fd6d 	bl	21a98 <z_impl_k_sem_give>
}
    8fbe:	e7eb      	b.n	8f98 <bt_conn_set_state+0xb0>
Z_GENLIST_IS_EMPTY(slist)
    8fc0:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    8fc2:	b128      	cbz	r0, 8fd0 <bt_conn_set_state+0xe8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8fc4:	69a1      	ldr	r1, [r4, #24]
    8fc6:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    8fc8:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8fca:	4288      	cmp	r0, r1
	list->tail = node;
    8fcc:	bf08      	it	eq
    8fce:	61a3      	streq	r3, [r4, #24]
    8fd0:	f382 8811 	msr	BASEPRI, r2
    8fd4:	f3bf 8f6f 	isb	sy
		if (!node) {
    8fd8:	b188      	cbz	r0, 8ffe <bt_conn_set_state+0x116>
	__asm__ volatile(
    8fda:	f04f 0220 	mov.w	r2, #32
    8fde:	f3ef 8311 	mrs	r3, BASEPRI
    8fe2:	f382 8811 	msr	BASEPRI, r2
    8fe6:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    8fea:	68c2      	ldr	r2, [r0, #12]
    8fec:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    8fee:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    8ff0:	f383 8811 	msr	BASEPRI, r3
    8ff4:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    8ff8:	f7ff fc84 	bl	8904 <tx_free>
    8ffc:	e7dc      	b.n	8fb8 <bt_conn_set_state+0xd0>
			tx_notify(conn);
    8ffe:	4620      	mov	r0, r4
    9000:	f01c fc7e 	bl	25900 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    9004:	78a3      	ldrb	r3, [r4, #2]
    9006:	2b01      	cmp	r3, #1
    9008:	d103      	bne.n	9012 <bt_conn_set_state+0x12a>
				k_delayed_work_cancel(&conn->update_work);
    900a:	f104 0054 	add.w	r0, r4, #84	; 0x54
    900e:	f019 f82b 	bl	22068 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9012:	f3bf 8f5b 	dmb	ish
    9016:	3404      	adds	r4, #4
    9018:	e854 3f00 	ldrex	r3, [r4]
    901c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9020:	e844 3200 	strex	r2, r3, [r4]
    9024:	2a00      	cmp	r2, #0
    9026:	d1f7      	bne.n	9018 <bt_conn_set_state+0x130>
    9028:	f3bf 8f5b 	dmb	ish
	return z_impl_k_poll_signal_raise(signal, result);
    902c:	4810      	ldr	r0, [pc, #64]	; (9070 <bt_conn_set_state+0x188>)
}
    902e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9032:	2100      	movs	r1, #0
    9034:	f019 bf2e 	b.w	22e94 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    9038:	7a63      	ldrb	r3, [r4, #9]
    903a:	2b00      	cmp	r3, #0
    903c:	d08f      	beq.n	8f5e <bt_conn_set_state+0x76>
				notify_connected(conn);
    903e:	4620      	mov	r0, r4
    9040:	f7ff fc6a 	bl	8918 <notify_connected>
    9044:	e78b      	b.n	8f5e <bt_conn_set_state+0x76>
    9046:	4a07      	ldr	r2, [pc, #28]	; (9064 <bt_conn_set_state+0x17c>)
    9048:	4b07      	ldr	r3, [pc, #28]	; (9068 <bt_conn_set_state+0x180>)
		BT_WARN("no valid (%u) state was set", state);
    904a:	480b      	ldr	r0, [pc, #44]	; (9078 <bt_conn_set_state+0x190>)
    904c:	1ad2      	subs	r2, r2, r3
    904e:	08d2      	lsrs	r2, r2, #3
    9050:	0192      	lsls	r2, r2, #6
    9052:	4631      	mov	r1, r6
    9054:	f042 0202 	orr.w	r2, r2, #2
}
    9058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    905c:	f01a b9b3 	b.w	233c6 <log_1>
}
    9060:	bd70      	pop	{r4, r5, r6, pc}
    9062:	bf00      	nop
    9064:	00028878 	.word	0x00028878
    9068:	00028868 	.word	0x00028868
    906c:	0002b477 	.word	0x0002b477
    9070:	20006a70 	.word	0x20006a70
    9074:	20006874 	.word	0x20006874
    9078:	0002b485 	.word	0x0002b485

0000907c <bt_conn_lookup_handle>:
{
    907c:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    907e:	4c0b      	ldr	r4, [pc, #44]	; (90ac <bt_conn_lookup_handle+0x30>)
{
    9080:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    9082:	f104 0050 	add.w	r0, r4, #80	; 0x50
    9086:	f01c fc10 	bl	258aa <atomic_get>
    908a:	b158      	cbz	r0, 90a4 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    908c:	7aa2      	ldrb	r2, [r4, #10]
    908e:	3a06      	subs	r2, #6
    9090:	2a01      	cmp	r2, #1
    9092:	d808      	bhi.n	90a6 <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    9094:	8822      	ldrh	r2, [r4, #0]
    9096:	429a      	cmp	r2, r3
    9098:	d105      	bne.n	90a6 <bt_conn_lookup_handle+0x2a>
	atomic_val_t old = atomic_inc(&conn->ref);
    909a:	f104 0050 	add.w	r0, r4, #80	; 0x50
    909e:	f01c fc22 	bl	258e6 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    90a2:	4620      	mov	r0, r4
}
    90a4:	bd10      	pop	{r4, pc}
	return NULL;
    90a6:	2000      	movs	r0, #0
    90a8:	e7fc      	b.n	90a4 <bt_conn_lookup_handle+0x28>
    90aa:	bf00      	nop
    90ac:	200005e0 	.word	0x200005e0

000090b0 <bt_conn_lookup_addr_le>:
{
    90b0:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    90b2:	4c0c      	ldr	r4, [pc, #48]	; (90e4 <bt_conn_lookup_addr_le+0x34>)
{
    90b4:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    90b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
{
    90ba:	460a      	mov	r2, r1
		if (!atomic_get(&conns[i].ref)) {
    90bc:	f01c fbf5 	bl	258aa <atomic_get>
    90c0:	b908      	cbnz	r0, 90c6 <bt_conn_lookup_addr_le+0x16>
	return NULL;
    90c2:	2000      	movs	r0, #0
}
    90c4:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    90c6:	78a1      	ldrb	r1, [r4, #2]
    90c8:	2901      	cmp	r1, #1
    90ca:	d1fa      	bne.n	90c2 <bt_conn_lookup_addr_le+0x12>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    90cc:	4619      	mov	r1, r3
    90ce:	4620      	mov	r0, r4
    90d0:	f01c fc3e 	bl	25950 <bt_conn_is_peer_addr_le>
    90d4:	2800      	cmp	r0, #0
    90d6:	d0f4      	beq.n	90c2 <bt_conn_lookup_addr_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
    90d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
    90dc:	f01c fc03 	bl	258e6 <atomic_inc>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    90e0:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    90e2:	e7ef      	b.n	90c4 <bt_conn_lookup_addr_le+0x14>
    90e4:	200005e0 	.word	0x200005e0

000090e8 <bt_conn_lookup_state_le>:
{
    90e8:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&conns[i].ref)) {
    90ea:	4c10      	ldr	r4, [pc, #64]	; (912c <bt_conn_lookup_state_le+0x44>)
{
    90ec:	4605      	mov	r5, r0
		if (!atomic_get(&conns[i].ref)) {
    90ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
{
    90f2:	4616      	mov	r6, r2
		if (!atomic_get(&conns[i].ref)) {
    90f4:	f01c fbd9 	bl	258aa <atomic_get>
    90f8:	b908      	cbnz	r0, 90fe <bt_conn_lookup_state_le+0x16>
	return NULL;
    90fa:	2000      	movs	r0, #0
}
    90fc:	bd70      	pop	{r4, r5, r6, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    90fe:	78a3      	ldrb	r3, [r4, #2]
    9100:	2b01      	cmp	r3, #1
    9102:	d1fa      	bne.n	90fa <bt_conn_lookup_state_le+0x12>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    9104:	b951      	cbnz	r1, 911c <bt_conn_lookup_state_le+0x34>
		if (conns[i].state == state && conns[i].id == id) {
    9106:	7aa3      	ldrb	r3, [r4, #10]
    9108:	42b3      	cmp	r3, r6
    910a:	d1f6      	bne.n	90fa <bt_conn_lookup_state_le+0x12>
    910c:	7a23      	ldrb	r3, [r4, #8]
    910e:	42ab      	cmp	r3, r5
    9110:	d1f3      	bne.n	90fa <bt_conn_lookup_state_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
    9112:	4807      	ldr	r0, [pc, #28]	; (9130 <bt_conn_lookup_state_le+0x48>)
    9114:	f01c fbe7 	bl	258e6 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    9118:	4804      	ldr	r0, [pc, #16]	; (912c <bt_conn_lookup_state_le+0x44>)
    911a:	e7ef      	b.n	90fc <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    911c:	460a      	mov	r2, r1
    911e:	4620      	mov	r0, r4
    9120:	4629      	mov	r1, r5
    9122:	f01c fc15 	bl	25950 <bt_conn_is_peer_addr_le>
    9126:	2800      	cmp	r0, #0
    9128:	d1ed      	bne.n	9106 <bt_conn_lookup_state_le+0x1e>
    912a:	e7e6      	b.n	90fa <bt_conn_lookup_state_le+0x12>
    912c:	200005e0 	.word	0x200005e0
    9130:	20000630 	.word	0x20000630

00009134 <send_conn_le_param_update>:
{
    9134:	b538      	push	{r3, r4, r5, lr}
    9136:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    9138:	4608      	mov	r0, r1
{
    913a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    913c:	f01c fb39 	bl	257b2 <bt_le_conn_params_valid>
    9140:	b308      	cbz	r0, 9186 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    9142:	4b12      	ldr	r3, [pc, #72]	; (918c <send_conn_le_param_update+0x58>)
    9144:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
    9148:	0799      	lsls	r1, r3, #30
    914a:	d407      	bmi.n	915c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    914c:	78e3      	ldrb	r3, [r4, #3]
    914e:	b173      	cbz	r3, 916e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    9150:	4629      	mov	r1, r5
    9152:	4620      	mov	r0, r4
}
    9154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    9158:	f000 bb2a 	b.w	97b0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    915c:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    9160:	079a      	lsls	r2, r3, #30
    9162:	d5f3      	bpl.n	914c <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9164:	1d20      	adds	r0, r4, #4
    9166:	f01c fba0 	bl	258aa <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    916a:	0543      	lsls	r3, r0, #21
    916c:	d4ee      	bmi.n	914c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    916e:	4629      	mov	r1, r5
    9170:	4620      	mov	r0, r4
    9172:	f01c fc40 	bl	259f6 <bt_conn_le_conn_update>
		if (rc == 0) {
    9176:	b928      	cbnz	r0, 9184 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
    9178:	88ab      	ldrh	r3, [r5, #4]
    917a:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
			conn->le.pending_timeout = param->timeout;
    917e:	88eb      	ldrh	r3, [r5, #6]
    9180:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
}
    9184:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9186:	f06f 0015 	mvn.w	r0, #21
    918a:	e7fb      	b.n	9184 <send_conn_le_param_update+0x50>
    918c:	200067d0 	.word	0x200067d0

00009190 <conn_update_timeout>:
{
    9190:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    9192:	f810 3c4a 	ldrb.w	r3, [r0, #-74]
{
    9196:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, update_work);
    9198:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	if (conn->state == BT_CONN_DISCONNECTED) {
    919c:	b9f3      	cbnz	r3, 91dc <conn_update_timeout+0x4c>
		bt_l2cap_disconnected(conn);
    919e:	4630      	mov	r0, r6
    91a0:	f01c fc86 	bl	25ab0 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    91a4:	4b25      	ldr	r3, [pc, #148]	; (923c <conn_update_timeout+0xac>)
    91a6:	681d      	ldr	r5, [r3, #0]
    91a8:	b985      	cbnz	r5, 91cc <conn_update_timeout+0x3c>
	atomic_val_t old = atomic_dec(&conn->ref);
    91aa:	1f20      	subs	r0, r4, #4
    91ac:	f01c fb8e 	bl	258cc <atomic_dec>
    91b0:	4823      	ldr	r0, [pc, #140]	; (9240 <conn_update_timeout+0xb0>)
    91b2:	f01c fb7a 	bl	258aa <atomic_get>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    91b6:	0581      	lsls	r1, r0, #22
    91b8:	d506      	bpl.n	91c8 <conn_update_timeout+0x38>
    91ba:	4821      	ldr	r0, [pc, #132]	; (9240 <conn_update_timeout+0xb0>)
    91bc:	f01c fb75 	bl	258aa <atomic_get>
		    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    91c0:	0682      	lsls	r2, r0, #26
    91c2:	d401      	bmi.n	91c8 <conn_update_timeout+0x38>
			bt_le_adv_resume();
    91c4:	f7ff f886 	bl	82d4 <bt_le_adv_resume>
}
    91c8:	b002      	add	sp, #8
    91ca:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    91cc:	686b      	ldr	r3, [r5, #4]
    91ce:	b11b      	cbz	r3, 91d8 <conn_update_timeout+0x48>
			cb->disconnected(conn, conn->err);
    91d0:	f814 1c4b 	ldrb.w	r1, [r4, #-75]
    91d4:	4630      	mov	r0, r6
    91d6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    91d8:	692d      	ldr	r5, [r5, #16]
    91da:	e7e5      	b.n	91a8 <conn_update_timeout+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    91dc:	f810 3c52 	ldrb.w	r3, [r0, #-82]
    91e0:	2b01      	cmp	r3, #1
    91e2:	d1f1      	bne.n	91c8 <conn_update_timeout+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    91e4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    91e8:	f1a0 0550 	sub.w	r5, r0, #80	; 0x50
    91ec:	e855 3f00 	ldrex	r3, [r5]
    91f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    91f4:	e845 2100 	strex	r1, r2, [r5]
    91f8:	2900      	cmp	r1, #0
    91fa:	d1f7      	bne.n	91ec <conn_update_timeout+0x5c>
    91fc:	f3bf 8f5b 	dmb	ish
    9200:	059b      	lsls	r3, r3, #22
    9202:	d514      	bpl.n	922e <conn_update_timeout+0x9e>
			param = BT_LE_CONN_PARAM(conn->le.interval_min,
    9204:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9206:	9300      	str	r3, [sp, #0]
    9208:	6c23      	ldr	r3, [r4, #64]	; 0x40
    920a:	9301      	str	r3, [sp, #4]
			send_conn_le_param_update(conn, param);
    920c:	4669      	mov	r1, sp
    920e:	4630      	mov	r0, r6
    9210:	f7ff ff90 	bl	9134 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9214:	f3bf 8f5b 	dmb	ish
    9218:	e855 3f00 	ldrex	r3, [r5]
    921c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9220:	e845 3200 	strex	r2, r3, [r5]
    9224:	2a00      	cmp	r2, #0
    9226:	d1f7      	bne.n	9218 <conn_update_timeout+0x88>
    9228:	f3bf 8f5b 	dmb	ish
    922c:	e7cc      	b.n	91c8 <conn_update_timeout+0x38>
			param = BT_LE_CONN_PARAM(
    922e:	4a05      	ldr	r2, [pc, #20]	; (9244 <conn_update_timeout+0xb4>)
    9230:	6810      	ldr	r0, [r2, #0]
    9232:	6851      	ldr	r1, [r2, #4]
    9234:	466b      	mov	r3, sp
    9236:	c303      	stmia	r3!, {r0, r1}
    9238:	e7e8      	b.n	920c <conn_update_timeout+0x7c>
    923a:	bf00      	nop
    923c:	2000059c 	.word	0x2000059c
    9240:	2000685c 	.word	0x2000685c
    9244:	00028ac4 	.word	0x00028ac4

00009248 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, s32_t timeout)
#endif
{
    9248:	b570      	push	{r4, r5, r6, lr}
    924a:	4604      	mov	r4, r0
    924c:	460e      	mov	r6, r1
    924e:	4615      	mov	r5, r2

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
    9250:	f01f f899 	bl	28386 <k_is_in_isr>
    9254:	b158      	cbz	r0, 926e <bt_conn_create_pdu_timeout+0x26>
    9256:	4913      	ldr	r1, [pc, #76]	; (92a4 <bt_conn_create_pdu_timeout+0x5c>)
    9258:	4813      	ldr	r0, [pc, #76]	; (92a8 <bt_conn_create_pdu_timeout+0x60>)
    925a:	4a14      	ldr	r2, [pc, #80]	; (92ac <bt_conn_create_pdu_timeout+0x64>)
    925c:	f640 13b1 	movw	r3, #2481	; 0x9b1
    9260:	f01a f833 	bl	232ca <printk>
    9264:	4811      	ldr	r0, [pc, #68]	; (92ac <bt_conn_create_pdu_timeout+0x64>)
    9266:	f640 11b1 	movw	r1, #2481	; 0x9b1
    926a:	f01a f871 	bl	23350 <assert_post_action>
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    926e:	4810      	ldr	r0, [pc, #64]	; (92b0 <bt_conn_create_pdu_timeout+0x68>)
    9270:	4629      	mov	r1, r5
    9272:	2c00      	cmp	r4, #0
    9274:	bf18      	it	ne
    9276:	4620      	movne	r0, r4
    9278:	f01e fde0 	bl	27e3c <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    927c:	4604      	mov	r4, r0
    927e:	b960      	cbnz	r0, 929a <bt_conn_create_pdu_timeout+0x52>
    9280:	4a0c      	ldr	r2, [pc, #48]	; (92b4 <bt_conn_create_pdu_timeout+0x6c>)
    9282:	4b0d      	ldr	r3, [pc, #52]	; (92b8 <bt_conn_create_pdu_timeout+0x70>)
		BT_WARN("Unable to allocate buffer: timeout %d", timeout);
    9284:	480d      	ldr	r0, [pc, #52]	; (92bc <bt_conn_create_pdu_timeout+0x74>)
    9286:	1a9b      	subs	r3, r3, r2
    9288:	08db      	lsrs	r3, r3, #3
    928a:	019b      	lsls	r3, r3, #6
    928c:	f043 0202 	orr.w	r2, r3, #2
    9290:	4629      	mov	r1, r5
    9292:	f01a f898 	bl	233c6 <log_1>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    9296:	4620      	mov	r0, r4
    9298:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_reserve(buf, reserve);
    929a:	1d31      	adds	r1, r6, #4
    929c:	3008      	adds	r0, #8
    929e:	f014 fff3 	bl	1e288 <net_buf_simple_reserve>
	return buf;
    92a2:	e7f8      	b.n	9296 <bt_conn_create_pdu_timeout+0x4e>
    92a4:	0002b4a1 	.word	0x0002b4a1
    92a8:	000297e6 	.word	0x000297e6
    92ac:	0002b2dd 	.word	0x0002b2dd
    92b0:	2000755c 	.word	0x2000755c
    92b4:	00028868 	.word	0x00028868
    92b8:	00028878 	.word	0x00028878
    92bc:	0002b4b0 	.word	0x0002b4b0

000092c0 <bt_conn_create_frag_timeout>:
{
    92c0:	460a      	mov	r2, r1
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    92c2:	4601      	mov	r1, r0
    92c4:	4801      	ldr	r0, [pc, #4]	; (92cc <bt_conn_create_frag_timeout+0xc>)
    92c6:	f7ff bfbf 	b.w	9248 <bt_conn_create_pdu_timeout>
    92ca:	bf00      	nop
    92cc:	200075ec 	.word	0x200075ec

000092d0 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    92d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92d4:	4606      	mov	r6, r0
    92d6:	460c      	mov	r4, r1
	frag = bt_conn_create_frag(0);
    92d8:	2000      	movs	r0, #0
    92da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    92de:	f7ff ffef 	bl	92c0 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    92e2:	7833      	ldrb	r3, [r6, #0]
    92e4:	2b06      	cmp	r3, #6
	frag = bt_conn_create_frag(0);
    92e6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    92e8:	f04f 0600 	mov.w	r6, #0
    92ec:	d005      	beq.n	92fa <create_frag.isra.0+0x2a>
		net_buf_unref(frag);
    92ee:	f015 f8cf 	bl	1e490 <net_buf_unref>
		return NULL;
    92f2:	4635      	mov	r5, r6
}
    92f4:	4628      	mov	r0, r5
    92f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    92fa:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    92fc:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    9300:	4e0c      	ldr	r6, [pc, #48]	; (9334 <create_frag.isra.0+0x64>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    9302:	4638      	mov	r0, r7
    9304:	f8b6 80a0 	ldrh.w	r8, [r6, #160]	; 0xa0
    9308:	f01e fde8 	bl	27edc <net_buf_simple_tailroom>
    930c:	4580      	cmp	r8, r0
    930e:	d20c      	bcs.n	932a <create_frag.isra.0+0x5a>
	return bt_dev.le.mtu;
    9310:	f8b6 60a0 	ldrh.w	r6, [r6, #160]	; 0xa0
	net_buf_add_mem(frag, buf->data, frag_len);
    9314:	f854 1f08 	ldr.w	r1, [r4, #8]!
    9318:	4632      	mov	r2, r6
    931a:	4638      	mov	r0, r7
    931c:	f01e fde6 	bl	27eec <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    9320:	4631      	mov	r1, r6
    9322:	4620      	mov	r0, r4
    9324:	f015 f938 	bl	1e598 <net_buf_simple_pull>
	return frag;
    9328:	e7e4      	b.n	92f4 <create_frag.isra.0+0x24>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    932a:	4638      	mov	r0, r7
    932c:	f01e fdd6 	bl	27edc <net_buf_simple_tailroom>
    9330:	b286      	uxth	r6, r0
    9332:	e7ef      	b.n	9314 <create_frag.isra.0+0x44>
    9334:	200067d0 	.word	0x200067d0

00009338 <bt_conn_process_tx>:
{
    9338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    933a:	7a83      	ldrb	r3, [r0, #10]
{
    933c:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    933e:	b993      	cbnz	r3, 9366 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9340:	f3bf 8f5b 	dmb	ish
    9344:	1d03      	adds	r3, r0, #4
    9346:	e853 2f00 	ldrex	r2, [r3]
    934a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    934e:	e843 1400 	strex	r4, r1, [r3]
    9352:	2c00      	cmp	r4, #0
    9354:	d1f7      	bne.n	9346 <bt_conn_process_tx+0xe>
    9356:	f3bf 8f5b 	dmb	ish
    935a:	0653      	lsls	r3, r2, #25
    935c:	d503      	bpl.n	9366 <bt_conn_process_tx+0x2e>
}
    935e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    9362:	f7ff bb9b 	b.w	8a9c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    9366:	2100      	movs	r1, #0
    9368:	f105 0034 	add.w	r0, r5, #52	; 0x34
    936c:	f014 ff58 	bl	1e220 <net_buf_get>
	BT_ASSERT(buf);
    9370:	4604      	mov	r4, r0
    9372:	b960      	cbnz	r0, 938e <bt_conn_process_tx+0x56>
    9374:	4a20      	ldr	r2, [pc, #128]	; (93f8 <bt_conn_process_tx+0xc0>)
    9376:	4921      	ldr	r1, [pc, #132]	; (93fc <bt_conn_process_tx+0xc4>)
    9378:	4821      	ldr	r0, [pc, #132]	; (9400 <bt_conn_process_tx+0xc8>)
    937a:	f240 631b 	movw	r3, #1563	; 0x61b
    937e:	f019 ffa4 	bl	232ca <printk>
    9382:	4040      	eors	r0, r0
    9384:	f380 8811 	msr	BASEPRI, r0
    9388:	f04f 0003 	mov.w	r0, #3
    938c:	df02      	svc	2
	return bt_dev.le.mtu;
    938e:	4f1d      	ldr	r7, [pc, #116]	; (9404 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    9390:	89a1      	ldrh	r1, [r4, #12]
    9392:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
    9396:	4291      	cmp	r1, r2
    9398:	d807      	bhi.n	93aa <bt_conn_process_tx+0x72>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    939a:	2300      	movs	r3, #0
    939c:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    939e:	4621      	mov	r1, r4
    93a0:	4628      	mov	r0, r5
    93a2:	f7ff facf 	bl	8944 <send_frag>
	if (!send_buf(conn, buf)) {
    93a6:	b140      	cbz	r0, 93ba <bt_conn_process_tx+0x82>
}
    93a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    93aa:	f105 060a 	add.w	r6, r5, #10
    93ae:	4621      	mov	r1, r4
    93b0:	4630      	mov	r0, r6
    93b2:	f7ff ff8d 	bl	92d0 <create_frag.isra.0>
	if (!frag) {
    93b6:	4601      	mov	r1, r0
    93b8:	b920      	cbnz	r0, 93c4 <bt_conn_process_tx+0x8c>
		net_buf_unref(buf);
    93ba:	4620      	mov	r0, r4
}
    93bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    93c0:	f015 b866 	b.w	1e490 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    93c4:	2301      	movs	r3, #1
    93c6:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    93c8:	4628      	mov	r0, r5
    93ca:	f7ff fabb 	bl	8944 <send_frag>
    93ce:	2800      	cmp	r0, #0
    93d0:	d0f3      	beq.n	93ba <bt_conn_process_tx+0x82>
	while (buf->len > conn_mtu(conn)) {
    93d2:	89a2      	ldrh	r2, [r4, #12]
    93d4:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
    93d8:	429a      	cmp	r2, r3
    93da:	d802      	bhi.n	93e2 <bt_conn_process_tx+0xaa>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    93dc:	2300      	movs	r3, #0
    93de:	2201      	movs	r2, #1
    93e0:	e7dd      	b.n	939e <bt_conn_process_tx+0x66>
		frag = create_frag(conn, buf);
    93e2:	4621      	mov	r1, r4
    93e4:	4630      	mov	r0, r6
    93e6:	f7ff ff73 	bl	92d0 <create_frag.isra.0>
		if (!frag) {
    93ea:	4601      	mov	r1, r0
    93ec:	2800      	cmp	r0, #0
    93ee:	d0e4      	beq.n	93ba <bt_conn_process_tx+0x82>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    93f0:	2301      	movs	r3, #1
    93f2:	461a      	mov	r2, r3
    93f4:	e7e8      	b.n	93c8 <bt_conn_process_tx+0x90>
    93f6:	bf00      	nop
    93f8:	0002b2dd 	.word	0x0002b2dd
    93fc:	0002f7ee 	.word	0x0002f7ee
    9400:	000297e6 	.word	0x000297e6
    9404:	200067d0 	.word	0x200067d0

00009408 <bt_conn_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_index(struct bt_conn *conn)
{
	u8_t index = conn - conns;
    9408:	4b0c      	ldr	r3, [pc, #48]	; (943c <bt_conn_index+0x34>)
    940a:	1ac0      	subs	r0, r0, r3
    940c:	1083      	asrs	r3, r0, #2
    940e:	480c      	ldr	r0, [pc, #48]	; (9440 <bt_conn_index+0x38>)
    9410:	4358      	muls	r0, r3
{
    9412:	b510      	push	{r4, lr}

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
    9414:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    9418:	d00e      	beq.n	9438 <bt_conn_index+0x30>
    941a:	490a      	ldr	r1, [pc, #40]	; (9444 <bt_conn_index+0x3c>)
    941c:	4a0a      	ldr	r2, [pc, #40]	; (9448 <bt_conn_index+0x40>)
    941e:	480b      	ldr	r0, [pc, #44]	; (944c <bt_conn_index+0x44>)
    9420:	f640 2368 	movw	r3, #2664	; 0xa68
    9424:	f019 ff51 	bl	232ca <printk>
    9428:	4809      	ldr	r0, [pc, #36]	; (9450 <bt_conn_index+0x48>)
    942a:	f019 ff4e 	bl	232ca <printk>
    942e:	4806      	ldr	r0, [pc, #24]	; (9448 <bt_conn_index+0x40>)
    9430:	f640 2168 	movw	r1, #2664	; 0xa68
    9434:	f019 ff8c 	bl	23350 <assert_post_action>
	return index;
}
    9438:	4620      	mov	r0, r4
    943a:	bd10      	pop	{r4, pc}
    943c:	200005e0 	.word	0x200005e0
    9440:	c18f9c19 	.word	0xc18f9c19
    9444:	0002b4d6 	.word	0x0002b4d6
    9448:	0002b2dd 	.word	0x0002b2dd
    944c:	000297e6 	.word	0x000297e6
    9450:	0002b4e0 	.word	0x0002b4e0

00009454 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    9454:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    9456:	490d      	ldr	r1, [pc, #52]	; (948c <bt_conn_init+0x38>)
    9458:	480d      	ldr	r0, [pc, #52]	; (9490 <bt_conn_init+0x3c>)
    945a:	f01e ff41 	bl	282e0 <k_queue_append>
    945e:	490d      	ldr	r1, [pc, #52]	; (9494 <bt_conn_init+0x40>)
    9460:	480b      	ldr	r0, [pc, #44]	; (9490 <bt_conn_init+0x3c>)
    9462:	f01e ff3d 	bl	282e0 <k_queue_append>
    9466:	490c      	ldr	r1, [pc, #48]	; (9498 <bt_conn_init+0x44>)
    9468:	4809      	ldr	r0, [pc, #36]	; (9490 <bt_conn_init+0x3c>)
    946a:	f01e ff39 	bl	282e0 <k_queue_append>
    946e:	490b      	ldr	r1, [pc, #44]	; (949c <bt_conn_init+0x48>)
    9470:	4807      	ldr	r0, [pc, #28]	; (9490 <bt_conn_init+0x3c>)
    9472:	f01e ff35 	bl	282e0 <k_queue_append>
	}

	bt_att_init();
    9476:	f01c fd96 	bl	25fa6 <bt_att_init>

	err = bt_smp_init();
    947a:	f01c ff9d 	bl	263b8 <bt_smp_init>
	if (err) {
    947e:	4604      	mov	r4, r0
    9480:	b908      	cbnz	r0, 9486 <bt_conn_init+0x32>
		return err;
	}

	bt_l2cap_init();
    9482:	f01c fb66 	bl	25b52 <bt_l2cap_init>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
    9486:	4620      	mov	r0, r4
    9488:	bd10      	pop	{r4, pc}
    948a:	bf00      	nop
    948c:	200005a0 	.word	0x200005a0
    9490:	20007520 	.word	0x20007520
    9494:	200005b0 	.word	0x200005b0
    9498:	200005c0 	.word	0x200005c0
    949c:	200005d0 	.word	0x200005d0

000094a0 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    94a0:	4a0b      	ldr	r2, [pc, #44]	; (94d0 <l2cap_accept+0x30>)
{
    94a2:	b508      	push	{r3, lr}
    94a4:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    94a6:	6810      	ldr	r0, [r2, #0]
    94a8:	b918      	cbnz	r0, 94b2 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    94aa:	4b0a      	ldr	r3, [pc, #40]	; (94d4 <l2cap_accept+0x34>)
    94ac:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    94ae:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    94b0:	bd08      	pop	{r3, pc}
    94b2:	4909      	ldr	r1, [pc, #36]	; (94d8 <l2cap_accept+0x38>)
    94b4:	4a09      	ldr	r2, [pc, #36]	; (94dc <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    94b6:	480a      	ldr	r0, [pc, #40]	; (94e0 <l2cap_accept+0x40>)
    94b8:	1a52      	subs	r2, r2, r1
    94ba:	08d2      	lsrs	r2, r2, #3
    94bc:	0192      	lsls	r2, r2, #6
    94be:	f042 0201 	orr.w	r2, r2, #1
    94c2:	4619      	mov	r1, r3
    94c4:	f019 ff7f 	bl	233c6 <log_1>
	return -ENOMEM;
    94c8:	f06f 000b 	mvn.w	r0, #11
    94cc:	e7f0      	b.n	94b0 <l2cap_accept+0x10>
    94ce:	bf00      	nop
    94d0:	20000684 	.word	0x20000684
    94d4:	00028f08 	.word	0x00028f08
    94d8:	00028868 	.word	0x00028868
    94dc:	00028938 	.word	0x00028938
    94e0:	0002b543 	.word	0x0002b543

000094e4 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    94e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94e6:	4605      	mov	r5, r0
    94e8:	460f      	mov	r7, r1
    94ea:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    94ec:	2104      	movs	r1, #4
    94ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    94f2:	2000      	movs	r0, #0
    94f4:	f7ff fea8 	bl	9248 <bt_conn_create_pdu_timeout>
	if (!buf) {
    94f8:	4604      	mov	r4, r0
    94fa:	b960      	cbnz	r0, 9516 <l2cap_create_le_sig_pdu.isra.0+0x32>
    94fc:	4a0a      	ldr	r2, [pc, #40]	; (9528 <l2cap_create_le_sig_pdu.isra.0+0x44>)
    94fe:	4b0b      	ldr	r3, [pc, #44]	; (952c <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    9500:	480b      	ldr	r0, [pc, #44]	; (9530 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
    9502:	1ad2      	subs	r2, r2, r3
    9504:	08d2      	lsrs	r2, r2, #3
    9506:	0192      	lsls	r2, r2, #6
    9508:	f042 0201 	orr.w	r2, r2, #1
    950c:	4629      	mov	r1, r5
    950e:	f019 ff5a 	bl	233c6 <log_1>
}
    9512:	4620      	mov	r0, r4
    9514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    9516:	2104      	movs	r1, #4
    9518:	3008      	adds	r0, #8
    951a:	f015 f87f 	bl	1e61c <net_buf_simple_add>
	hdr->code = code;
    951e:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    9520:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    9522:	8046      	strh	r6, [r0, #2]
	return buf;
    9524:	e7f5      	b.n	9512 <l2cap_create_le_sig_pdu.isra.0+0x2e>
    9526:	bf00      	nop
    9528:	00028938 	.word	0x00028938
    952c:	00028868 	.word	0x00028868
    9530:	0002b56a 	.word	0x0002b56a

00009534 <l2cap_rtx_timeout>:
{
    9534:	b538      	push	{r3, r4, r5, lr}
    9536:	4a0c      	ldr	r2, [pc, #48]	; (9568 <l2cap_rtx_timeout+0x34>)
    9538:	4b0c      	ldr	r3, [pc, #48]	; (956c <l2cap_rtx_timeout+0x38>)
    953a:	1ad2      	subs	r2, r2, r3
    953c:	08d2      	lsrs	r2, r2, #3
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    953e:	f1a0 0510 	sub.w	r5, r0, #16
{
    9542:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
    9544:	0192      	lsls	r2, r2, #6
    9546:	4629      	mov	r1, r5
    9548:	4809      	ldr	r0, [pc, #36]	; (9570 <l2cap_rtx_timeout+0x3c>)
    954a:	f042 0201 	orr.w	r2, r2, #1
    954e:	f019 ff3a 	bl	233c6 <log_1>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    9552:	f854 0c10 	ldr.w	r0, [r4, #-16]
    9556:	4629      	mov	r1, r5
    9558:	f01c fa77 	bl	25a4a <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    955c:	4628      	mov	r0, r5
}
    955e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    9562:	f01c ba94 	b.w	25a8e <bt_l2cap_chan_del>
    9566:	bf00      	nop
    9568:	00028938 	.word	0x00028938
    956c:	00028868 	.word	0x00028868
    9570:	0002b592 	.word	0x0002b592

00009574 <bt_l2cap_connected>:
{
    9574:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    9578:	4f31      	ldr	r7, [pc, #196]	; (9640 <bt_l2cap_connected+0xcc>)
    957a:	4e32      	ldr	r6, [pc, #200]	; (9644 <bt_l2cap_connected+0xd0>)
    957c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 9658 <bt_l2cap_connected+0xe4>
{
    9580:	4604      	mov	r4, r0
    9582:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    9584:	42be      	cmp	r6, r7
    9586:	d90e      	bls.n	95a6 <bt_l2cap_connected+0x32>
    9588:	492f      	ldr	r1, [pc, #188]	; (9648 <bt_l2cap_connected+0xd4>)
    958a:	4830      	ldr	r0, [pc, #192]	; (964c <bt_l2cap_connected+0xd8>)
    958c:	f44f 73ab 	mov.w	r3, #342	; 0x156
    9590:	4642      	mov	r2, r8
    9592:	f019 fe9a 	bl	232ca <printk>
    9596:	482e      	ldr	r0, [pc, #184]	; (9650 <bt_l2cap_connected+0xdc>)
    9598:	f019 fe97 	bl	232ca <printk>
    959c:	f44f 71ab 	mov.w	r1, #342	; 0x156
    95a0:	4640      	mov	r0, r8
    95a2:	f019 fed5 	bl	23350 <assert_post_action>
    95a6:	454e      	cmp	r6, r9
    95a8:	d302      	bcc.n	95b0 <bt_l2cap_connected+0x3c>
}
    95aa:	b002      	add	sp, #8
    95ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
    95b0:	6873      	ldr	r3, [r6, #4]
    95b2:	a901      	add	r1, sp, #4
    95b4:	4620      	mov	r0, r4
    95b6:	4798      	blx	r3
    95b8:	2800      	cmp	r0, #0
    95ba:	db3c      	blt.n	9636 <bt_l2cap_connected+0xc2>
		ch = BT_L2CAP_LE_CHAN(chan);
    95bc:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    95be:	8833      	ldrh	r3, [r6, #0]
    95c0:	86ab      	strh	r3, [r5, #52]	; 0x34
		ch->tx.cid = fchan->cid;
    95c2:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    95c6:	4923      	ldr	r1, [pc, #140]	; (9654 <bt_l2cap_connected+0xe0>)
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    95c8:	f8d6 a008 	ldr.w	sl, [r6, #8]
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    95cc:	f105 0010 	add.w	r0, r5, #16
    95d0:	f01e ff5a 	bl	28488 <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    95d4:	f3bf 8f5b 	dmb	ish
    95d8:	f105 0330 	add.w	r3, r5, #48	; 0x30
    95dc:	2200      	movs	r2, #0
    95de:	e853 1f00 	ldrex	r1, [r3]
    95e2:	e843 2000 	strex	r0, r2, [r3]
    95e6:	2800      	cmp	r0, #0
    95e8:	d1f9      	bne.n	95de <bt_l2cap_connected+0x6a>
    95ea:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    95ee:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    95f0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	sys_slist_append(&conn->channels, &chan->node);
    95f2:	f105 0308 	add.w	r3, r5, #8
    95f6:	bb02      	cbnz	r2, 963a <bt_l2cap_connected+0xc6>
	list->head = node;
    95f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
		if (chan->ops->connected) {
    95fc:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    95fe:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    9600:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    9602:	f8c5 a00c 	str.w	sl, [r5, #12]
		if (chan->ops->connected) {
    9606:	681b      	ldr	r3, [r3, #0]
    9608:	b103      	cbz	r3, 960c <bt_l2cap_connected+0x98>
			chan->ops->connected(chan);
    960a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    960c:	9b01      	ldr	r3, [sp, #4]
    960e:	f3bf 8f5b 	dmb	ish
    9612:	3330      	adds	r3, #48	; 0x30
    9614:	e853 2f00 	ldrex	r2, [r3]
    9618:	f042 0201 	orr.w	r2, r2, #1
    961c:	e843 2100 	strex	r1, r2, [r3]
    9620:	2900      	cmp	r1, #0
    9622:	d1f7      	bne.n	9614 <bt_l2cap_connected+0xa0>
    9624:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    9628:	9801      	ldr	r0, [sp, #4]
    962a:	6843      	ldr	r3, [r0, #4]
    962c:	699b      	ldr	r3, [r3, #24]
    962e:	b113      	cbz	r3, 9636 <bt_l2cap_connected+0xc2>
			chan->ops->status(chan, chan->status);
    9630:	f100 0130 	add.w	r1, r0, #48	; 0x30
    9634:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    9636:	360c      	adds	r6, #12
    9638:	e7a4      	b.n	9584 <bt_l2cap_connected+0x10>
	parent->next = child;
    963a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    963c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
    963e:	e7dd      	b.n	95fc <bt_l2cap_connected+0x88>
    9640:	0002881c 	.word	0x0002881c
    9644:	000287f8 	.word	0x000287f8
    9648:	0002b5d3 	.word	0x0002b5d3
    964c:	000297e6 	.word	0x000297e6
    9650:	00029c4a 	.word	0x00029c4a
    9654:	00009535 	.word	0x00009535
    9658:	0002b5a2 	.word	0x0002b5a2

0000965c <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    965c:	898b      	ldrh	r3, [r1, #12]
    965e:	2b03      	cmp	r3, #3
{
    9660:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9662:	4606      	mov	r6, r0
    9664:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    9666:	d80a      	bhi.n	967e <l2cap_recv+0x22>
    9668:	492e      	ldr	r1, [pc, #184]	; (9724 <l2cap_recv+0xc8>)
    966a:	4b2f      	ldr	r3, [pc, #188]	; (9728 <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
    966c:	482f      	ldr	r0, [pc, #188]	; (972c <l2cap_recv+0xd0>)
    966e:	1ac9      	subs	r1, r1, r3
    9670:	08c9      	lsrs	r1, r1, #3
    9672:	0189      	lsls	r1, r1, #6
    9674:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    9678:	f019 fe98 	bl	233ac <log_0>
		return 0;
    967c:	e013      	b.n	96a6 <l2cap_recv+0x4a>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    967e:	2104      	movs	r1, #4
    9680:	f105 0008 	add.w	r0, r5, #8
    9684:	f014 ffa8 	bl	1e5d8 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    9688:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    968a:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    968c:	428a      	cmp	r2, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    968e:	4604      	mov	r4, r0
	if (buf->len != len) {
    9690:	d00c      	beq.n	96ac <l2cap_recv+0x50>
    9692:	4825      	ldr	r0, [pc, #148]	; (9728 <l2cap_recv+0xcc>)
    9694:	4b23      	ldr	r3, [pc, #140]	; (9724 <l2cap_recv+0xc8>)
    9696:	1a1b      	subs	r3, r3, r0
    9698:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    969a:	019b      	lsls	r3, r3, #6
    969c:	4824      	ldr	r0, [pc, #144]	; (9730 <l2cap_recv+0xd4>)
    969e:	f043 0301 	orr.w	r3, r3, #1
    96a2:	f019 fea4 	bl	233ee <log_2>
}
    96a6:	2000      	movs	r0, #0
    96a8:	b002      	add	sp, #8
    96aa:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    96ac:	7843      	ldrb	r3, [r0, #1]
    96ae:	b943      	cbnz	r3, 96c2 <l2cap_recv+0x66>
    96b0:	491c      	ldr	r1, [pc, #112]	; (9724 <l2cap_recv+0xc8>)
    96b2:	4b1d      	ldr	r3, [pc, #116]	; (9728 <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    96b4:	481f      	ldr	r0, [pc, #124]	; (9734 <l2cap_recv+0xd8>)
    96b6:	1ac9      	subs	r1, r1, r3
    96b8:	08c9      	lsrs	r1, r1, #3
    96ba:	0189      	lsls	r1, r1, #6
    96bc:	f041 0101 	orr.w	r1, r1, #1
    96c0:	e7da      	b.n	9678 <l2cap_recv+0x1c>
	switch (hdr->code) {
    96c2:	7801      	ldrb	r1, [r0, #0]
    96c4:	2901      	cmp	r1, #1
    96c6:	d0ee      	beq.n	96a6 <l2cap_recv+0x4a>
    96c8:	2913      	cmp	r1, #19
    96ca:	d10a      	bne.n	96e2 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    96cc:	2a01      	cmp	r2, #1
    96ce:	d8ea      	bhi.n	96a6 <l2cap_recv+0x4a>
    96d0:	4914      	ldr	r1, [pc, #80]	; (9724 <l2cap_recv+0xc8>)
    96d2:	4b15      	ldr	r3, [pc, #84]	; (9728 <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
    96d4:	4818      	ldr	r0, [pc, #96]	; (9738 <l2cap_recv+0xdc>)
    96d6:	1ac9      	subs	r1, r1, r3
    96d8:	08c9      	lsrs	r1, r1, #3
    96da:	0189      	lsls	r1, r1, #6
    96dc:	f041 0101 	orr.w	r1, r1, #1
    96e0:	e7ca      	b.n	9678 <l2cap_recv+0x1c>
    96e2:	4b11      	ldr	r3, [pc, #68]	; (9728 <l2cap_recv+0xcc>)
    96e4:	4a0f      	ldr	r2, [pc, #60]	; (9724 <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    96e6:	4815      	ldr	r0, [pc, #84]	; (973c <l2cap_recv+0xe0>)
    96e8:	1ad2      	subs	r2, r2, r3
    96ea:	08d2      	lsrs	r2, r2, #3
    96ec:	0192      	lsls	r2, r2, #6
    96ee:	f042 0202 	orr.w	r2, r2, #2
    96f2:	f019 fe68 	bl	233c6 <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    96f6:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    96f8:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    96fa:	2202      	movs	r2, #2
    96fc:	2001      	movs	r0, #1
    96fe:	f7ff fef1 	bl	94e4 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    9702:	4604      	mov	r4, r0
    9704:	2800      	cmp	r0, #0
    9706:	d0ce      	beq.n	96a6 <l2cap_recv+0x4a>
	rej = net_buf_add(buf, sizeof(*rej));
    9708:	2102      	movs	r1, #2
    970a:	3008      	adds	r0, #8
    970c:	f014 ff86 	bl	1e61c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    9710:	2300      	movs	r3, #0
    9712:	7003      	strb	r3, [r0, #0]
    9714:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    9716:	4622      	mov	r2, r4
    9718:	9300      	str	r3, [sp, #0]
    971a:	2105      	movs	r1, #5
    971c:	4628      	mov	r0, r5
    971e:	f01c f9e0 	bl	25ae2 <bt_l2cap_send_cb>
}
    9722:	e7c0      	b.n	96a6 <l2cap_recv+0x4a>
    9724:	00028938 	.word	0x00028938
    9728:	00028868 	.word	0x00028868
    972c:	0002b5fa 	.word	0x0002b5fa
    9730:	0002b618 	.word	0x0002b618
    9734:	0002b639 	.word	0x0002b639
    9738:	0002b65a 	.word	0x0002b65a
    973c:	0002b676 	.word	0x0002b676

00009740 <bt_l2cap_recv>:
{
    9740:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    9742:	898b      	ldrh	r3, [r1, #12]
    9744:	2b03      	cmp	r3, #3
{
    9746:	4605      	mov	r5, r0
    9748:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    974a:	d80e      	bhi.n	976a <bt_l2cap_recv+0x2a>
    974c:	4914      	ldr	r1, [pc, #80]	; (97a0 <bt_l2cap_recv+0x60>)
    974e:	4b15      	ldr	r3, [pc, #84]	; (97a4 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    9750:	4815      	ldr	r0, [pc, #84]	; (97a8 <bt_l2cap_recv+0x68>)
    9752:	1ac9      	subs	r1, r1, r3
    9754:	08c9      	lsrs	r1, r1, #3
    9756:	0189      	lsls	r1, r1, #6
    9758:	f041 0101 	orr.w	r1, r1, #1
    975c:	f019 fe26 	bl	233ac <log_0>
	net_buf_unref(buf);
    9760:	4620      	mov	r0, r4
}
    9762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    9766:	f014 be93 	b.w	1e490 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    976a:	2104      	movs	r1, #4
    976c:	f104 0008 	add.w	r0, r4, #8
    9770:	f014 ff32 	bl	1e5d8 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    9774:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    9776:	4628      	mov	r0, r5
    9778:	f01c f9dc 	bl	25b34 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    977c:	b950      	cbnz	r0, 9794 <bt_l2cap_recv+0x54>
    977e:	4b09      	ldr	r3, [pc, #36]	; (97a4 <bt_l2cap_recv+0x64>)
    9780:	4a07      	ldr	r2, [pc, #28]	; (97a0 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    9782:	480a      	ldr	r0, [pc, #40]	; (97ac <bt_l2cap_recv+0x6c>)
    9784:	1ad2      	subs	r2, r2, r3
    9786:	08d2      	lsrs	r2, r2, #3
    9788:	0192      	lsls	r2, r2, #6
    978a:	f042 0202 	orr.w	r2, r2, #2
    978e:	f019 fe1a 	bl	233c6 <log_1>
		net_buf_unref(buf);
    9792:	e7e5      	b.n	9760 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    9794:	6843      	ldr	r3, [r0, #4]
    9796:	4621      	mov	r1, r4
    9798:	691b      	ldr	r3, [r3, #16]
    979a:	4798      	blx	r3
    979c:	e7e0      	b.n	9760 <bt_l2cap_recv+0x20>
    979e:	bf00      	nop
    97a0:	00028938 	.word	0x00028938
    97a4:	00028868 	.word	0x00028868
    97a8:	0002b694 	.word	0x0002b694
    97ac:	0002b6b1 	.word	0x0002b6b1

000097b0 <bt_l2cap_update_conn_param>:
{
    97b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    97b2:	4b15      	ldr	r3, [pc, #84]	; (9808 <bt_l2cap_update_conn_param+0x58>)
    97b4:	781a      	ldrb	r2, [r3, #0]
    97b6:	3201      	adds	r2, #1
	if (!ident) {
    97b8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    97bc:	bf08      	it	eq
    97be:	2201      	moveq	r2, #1
    97c0:	701a      	strb	r2, [r3, #0]
{
    97c2:	4605      	mov	r5, r0
    97c4:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    97c6:	2208      	movs	r2, #8
    97c8:	7819      	ldrb	r1, [r3, #0]
    97ca:	2012      	movs	r0, #18
    97cc:	f7ff fe8a 	bl	94e4 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    97d0:	4606      	mov	r6, r0
    97d2:	b1b0      	cbz	r0, 9802 <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
    97d4:	2108      	movs	r1, #8
    97d6:	4408      	add	r0, r1
    97d8:	f014 ff20 	bl	1e61c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    97dc:	8822      	ldrh	r2, [r4, #0]
    97de:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    97e0:	8862      	ldrh	r2, [r4, #2]
    97e2:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    97e4:	88a2      	ldrh	r2, [r4, #4]
    97e6:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    97e8:	88e2      	ldrh	r2, [r4, #6]
    97ea:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    97ec:	2400      	movs	r4, #0
    97ee:	9400      	str	r4, [sp, #0]
    97f0:	4623      	mov	r3, r4
    97f2:	4632      	mov	r2, r6
    97f4:	2105      	movs	r1, #5
    97f6:	4628      	mov	r0, r5
    97f8:	f01c f973 	bl	25ae2 <bt_l2cap_send_cb>
	return 0;
    97fc:	4620      	mov	r0, r4
}
    97fe:	b002      	add	sp, #8
    9800:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    9802:	f06f 000b 	mvn.w	r0, #11
    9806:	e7fa      	b.n	97fe <bt_l2cap_update_conn_param+0x4e>
    9808:	20002301 	.word	0x20002301

0000980c <bt_att_destroy>:

	return 0;
}

void bt_att_destroy(struct bt_l2cap_chan *chan)
{
    980c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att *att = ATT_CHAN(chan);
    980e:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&att_slab, (void **)&att);
    9810:	a901      	add	r1, sp, #4
    9812:	4803      	ldr	r0, [pc, #12]	; (9820 <bt_att_destroy+0x14>)
    9814:	f016 f9d6 	bl	1fbc4 <k_mem_slab_free>
}
    9818:	b003      	add	sp, #12
    981a:	f85d fb04 	ldr.w	pc, [sp], #4
    981e:	bf00      	nop
    9820:	20007448 	.word	0x20007448

00009824 <find_type_cb>:
{
    9824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    9828:	680e      	ldr	r6, [r1, #0]
{
    982a:	b090      	sub	sp, #64	; 0x40
    982c:	4605      	mov	r5, r0
    982e:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    9830:	f04f 0800 	mov.w	r8, #0
    9834:	f642 0301 	movw	r3, #10241	; 0x2801
    9838:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    983a:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    983c:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
    9840:	a90b      	add	r1, sp, #44	; 0x2c
    9842:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    9846:	f01b fef3 	bl	25630 <bt_uuid_cmp>
    984a:	2800      	cmp	r0, #0
    984c:	d039      	beq.n	98c2 <find_type_cb+0x9e>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    984e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9852:	6828      	ldr	r0, [r5, #0]
    9854:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
    9858:	a90b      	add	r1, sp, #44	; 0x2c
    985a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    985e:	f01b fee7 	bl	25630 <bt_uuid_cmp>
    9862:	b150      	cbz	r0, 987a <find_type_cb+0x56>
		if (data->group &&
    9864:	68a3      	ldr	r3, [r4, #8]
    9866:	b123      	cbz	r3, 9872 <find_type_cb+0x4e>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    9868:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
    986a:	8859      	ldrh	r1, [r3, #2]
    986c:	4291      	cmp	r1, r2
    986e:	d200      	bcs.n	9872 <find_type_cb+0x4e>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    9870:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    9872:	2001      	movs	r0, #1
}
    9874:	b010      	add	sp, #64	; 0x40
    9876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    987a:	6862      	ldr	r2, [r4, #4]
    987c:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
    9880:	8992      	ldrh	r2, [r2, #12]
    9882:	1a9b      	subs	r3, r3, r2
    9884:	2b03      	cmp	r3, #3
    9886:	d9f5      	bls.n	9874 <find_type_cb+0x50>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    9888:	686e      	ldr	r6, [r5, #4]
    988a:	9000      	str	r0, [sp, #0]
    988c:	2310      	movs	r3, #16
    988e:	aa02      	add	r2, sp, #8
    9890:	4629      	mov	r1, r5
    9892:	4638      	mov	r0, r7
    9894:	47b0      	blx	r6
	if (read < 0) {
    9896:	1e06      	subs	r6, r0, #0
    9898:	db13      	blt.n	98c2 <find_type_cb+0x9e>
	if (read != data->value_len) {
    989a:	7c22      	ldrb	r2, [r4, #16]
    989c:	68e0      	ldr	r0, [r4, #12]
    989e:	4296      	cmp	r6, r2
    98a0:	d034      	beq.n	990c <find_type_cb+0xe8>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    98a2:	4601      	mov	r1, r0
    98a4:	a80b      	add	r0, sp, #44	; 0x2c
    98a6:	f01b feed 	bl	25684 <bt_uuid_create>
    98aa:	b968      	cbnz	r0, 98c8 <find_type_cb+0xa4>
    98ac:	4a1a      	ldr	r2, [pc, #104]	; (9918 <find_type_cb+0xf4>)
    98ae:	4b1b      	ldr	r3, [pc, #108]	; (991c <find_type_cb+0xf8>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    98b0:	7c21      	ldrb	r1, [r4, #16]
    98b2:	481b      	ldr	r0, [pc, #108]	; (9920 <find_type_cb+0xfc>)
    98b4:	1ad2      	subs	r2, r2, r3
    98b6:	08d2      	lsrs	r2, r2, #3
    98b8:	0192      	lsls	r2, r2, #6
    98ba:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    98be:	f019 fd82 	bl	233c6 <log_1>
	data->group = NULL;
    98c2:	2300      	movs	r3, #0
    98c4:	60a3      	str	r3, [r4, #8]
    98c6:	e7d4      	b.n	9872 <find_type_cb+0x4e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    98c8:	b2f2      	uxtb	r2, r6
    98ca:	a902      	add	r1, sp, #8
    98cc:	a806      	add	r0, sp, #24
    98ce:	f01b fed9 	bl	25684 <bt_uuid_create>
    98d2:	b948      	cbnz	r0, 98e8 <find_type_cb+0xc4>
    98d4:	4a10      	ldr	r2, [pc, #64]	; (9918 <find_type_cb+0xf4>)
    98d6:	4b11      	ldr	r3, [pc, #68]	; (991c <find_type_cb+0xf8>)
			BT_WARN("Unable to create UUID: size %d", read);
    98d8:	4812      	ldr	r0, [pc, #72]	; (9924 <find_type_cb+0x100>)
    98da:	1ad2      	subs	r2, r2, r3
    98dc:	08d2      	lsrs	r2, r2, #3
    98de:	0192      	lsls	r2, r2, #6
    98e0:	f042 0202 	orr.w	r2, r2, #2
    98e4:	4631      	mov	r1, r6
    98e6:	e7ea      	b.n	98be <find_type_cb+0x9a>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    98e8:	a906      	add	r1, sp, #24
    98ea:	a80b      	add	r0, sp, #44	; 0x2c
    98ec:	f01b fea0 	bl	25630 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    98f0:	2800      	cmp	r0, #0
    98f2:	d1e6      	bne.n	98c2 <find_type_cb+0x9e>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    98f4:	6860      	ldr	r0, [r4, #4]
	data->err = 0x00;
    98f6:	2300      	movs	r3, #0
    98f8:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    98fa:	2104      	movs	r1, #4
    98fc:	3008      	adds	r0, #8
    98fe:	f014 fe8d 	bl	1e61c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    9902:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    9904:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    9906:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    9908:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    990a:	e7b2      	b.n	9872 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
    990c:	4632      	mov	r2, r6
    990e:	a902      	add	r1, sp, #8
    9910:	f01b fbae 	bl	25070 <memcmp>
    9914:	e7ec      	b.n	98f0 <find_type_cb+0xcc>
    9916:	bf00      	nop
    9918:	00028870 	.word	0x00028870
    991c:	00028868 	.word	0x00028868
    9920:	0002b6e6 	.word	0x0002b6e6
    9924:	0002b705 	.word	0x0002b705

00009928 <bt_att_connected>:
{
    9928:	b510      	push	{r4, lr}
    992a:	4604      	mov	r4, r0
	z_impl_k_queue_init(queue);
    992c:	30e0      	adds	r0, #224	; 0xe0
    992e:	f01e fcce 	bl	282ce <z_impl_k_queue_init>
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9932:	2317      	movs	r3, #23
    9934:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9938:	86e3      	strh	r3, [r4, #54]	; 0x36
	k_delayed_work_init(&att->timeout_work, att_timeout);
    993a:	4904      	ldr	r1, [pc, #16]	; (994c <bt_att_connected+0x24>)
    993c:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    9940:	f01e fda2 	bl	28488 <k_delayed_work_init>
	list->head = NULL;
    9944:	2300      	movs	r3, #0
	list->tail = NULL;
    9946:	e9c4 3328 	strd	r3, r3, [r4, #160]	; 0xa0
}
    994a:	bd10      	pop	{r4, pc}
    994c:	0000a515 	.word	0x0000a515

00009950 <att_send>:
{
    9950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9954:	4698      	mov	r8, r3
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9956:	688b      	ldr	r3, [r1, #8]
    9958:	781b      	ldrb	r3, [r3, #0]
    995a:	2bd2      	cmp	r3, #210	; 0xd2
{
    995c:	4607      	mov	r7, r0
    995e:	460d      	mov	r5, r1
    9960:	4616      	mov	r6, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9962:	d114      	bne.n	998e <att_send+0x3e>
		err = bt_smp_sign(conn, buf);
    9964:	f01c fd25 	bl	263b2 <bt_smp_sign>
		if (err) {
    9968:	4604      	mov	r4, r0
    996a:	b180      	cbz	r0, 998e <att_send+0x3e>
    996c:	4913      	ldr	r1, [pc, #76]	; (99bc <att_send+0x6c>)
    996e:	4b14      	ldr	r3, [pc, #80]	; (99c0 <att_send+0x70>)
			BT_ERR("Error signing data");
    9970:	4814      	ldr	r0, [pc, #80]	; (99c4 <att_send+0x74>)
    9972:	1a5b      	subs	r3, r3, r1
    9974:	08db      	lsrs	r3, r3, #3
    9976:	019b      	lsls	r3, r3, #6
    9978:	f043 0101 	orr.w	r1, r3, #1
    997c:	f019 fd16 	bl	233ac <log_0>
			net_buf_unref(buf);
    9980:	4628      	mov	r0, r5
    9982:	f014 fd85 	bl	1e490 <net_buf_unref>
}
    9986:	4620      	mov	r0, r4
    9988:	b002      	add	sp, #8
    998a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    998e:	b95e      	cbnz	r6, 99a8 <att_send+0x58>
	switch (att_op_get_type(buf->data[0])) {
    9990:	68ab      	ldr	r3, [r5, #8]
    9992:	7818      	ldrb	r0, [r3, #0]
    9994:	f01c f8e0 	bl	25b58 <att_op_get_type>
    9998:	1e42      	subs	r2, r0, #1
    999a:	b2d2      	uxtb	r2, r2
    999c:	2a04      	cmp	r2, #4
    999e:	bf96      	itet	ls
    99a0:	4b09      	ldrls	r3, [pc, #36]	; (99c8 <att_send+0x78>)
    99a2:	4e0a      	ldrhi	r6, [pc, #40]	; (99cc <att_send+0x7c>)
    99a4:	f853 6022 	ldrls.w	r6, [r3, r2, lsl #2]
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    99a8:	f8cd 8000 	str.w	r8, [sp]
    99ac:	4633      	mov	r3, r6
    99ae:	462a      	mov	r2, r5
    99b0:	2104      	movs	r1, #4
    99b2:	4638      	mov	r0, r7
    99b4:	f01c f895 	bl	25ae2 <bt_l2cap_send_cb>
    99b8:	4604      	mov	r4, r0
    99ba:	e7e4      	b.n	9986 <att_send+0x36>
    99bc:	00028868 	.word	0x00028868
    99c0:	00028870 	.word	0x00028870
    99c4:	0002b724 	.word	0x0002b724
    99c8:	00028f24 	.word	0x00028f24
    99cc:	00025deb 	.word	0x00025deb

000099d0 <att_get>:
{
    99d0:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    99d2:	2104      	movs	r1, #4
    99d4:	f01c f89e 	bl	25b14 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
    99d8:	4604      	mov	r4, r0
    99da:	b960      	cbnz	r0, 99f6 <att_get+0x26>
    99dc:	4907      	ldr	r1, [pc, #28]	; (99fc <att_get+0x2c>)
    99de:	4a08      	ldr	r2, [pc, #32]	; (9a00 <att_get+0x30>)
    99e0:	4808      	ldr	r0, [pc, #32]	; (9a04 <att_get+0x34>)
    99e2:	2371      	movs	r3, #113	; 0x71
    99e4:	f019 fc71 	bl	232ca <printk>
    99e8:	4807      	ldr	r0, [pc, #28]	; (9a08 <att_get+0x38>)
    99ea:	f019 fc6e 	bl	232ca <printk>
    99ee:	4804      	ldr	r0, [pc, #16]	; (9a00 <att_get+0x30>)
    99f0:	2171      	movs	r1, #113	; 0x71
    99f2:	f019 fcad 	bl	23350 <assert_post_action>
}
    99f6:	4620      	mov	r0, r4
    99f8:	bd10      	pop	{r4, pc}
    99fa:	bf00      	nop
    99fc:	0002eef4 	.word	0x0002eef4
    9a00:	0002b737 	.word	0x0002b737
    9a04:	000297e6 	.word	0x000297e6
    9a08:	0002b766 	.word	0x0002b766

00009a0c <bt_att_accept>:
{
    9a0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    9a0e:	2200      	movs	r2, #0
{
    9a10:	4606      	mov	r6, r0
    9a12:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    9a14:	4812      	ldr	r0, [pc, #72]	; (9a60 <bt_att_accept+0x54>)
    9a16:	a901      	add	r1, sp, #4
    9a18:	f016 f870 	bl	1fafc <k_mem_slab_alloc>
    9a1c:	4604      	mov	r4, r0
    9a1e:	b178      	cbz	r0, 9a40 <bt_att_accept+0x34>
    9a20:	4b10      	ldr	r3, [pc, #64]	; (9a64 <bt_att_accept+0x58>)
    9a22:	4a11      	ldr	r2, [pc, #68]	; (9a68 <bt_att_accept+0x5c>)
		BT_ERR("No available ATT context for conn %p", conn);
    9a24:	4811      	ldr	r0, [pc, #68]	; (9a6c <bt_att_accept+0x60>)
    9a26:	1ad2      	subs	r2, r2, r3
    9a28:	08d2      	lsrs	r2, r2, #3
    9a2a:	0192      	lsls	r2, r2, #6
    9a2c:	f042 0201 	orr.w	r2, r2, #1
    9a30:	4631      	mov	r1, r6
    9a32:	f019 fcc8 	bl	233c6 <log_1>
		return -ENOMEM;
    9a36:	f06f 040b 	mvn.w	r4, #11
}
    9a3a:	4620      	mov	r0, r4
    9a3c:	b002      	add	sp, #8
    9a3e:	bd70      	pop	{r4, r5, r6, pc}
	(void)memset(att, 0, sizeof(*att));
    9a40:	4601      	mov	r1, r0
    9a42:	22f4      	movs	r2, #244	; 0xf4
    9a44:	9801      	ldr	r0, [sp, #4]
    9a46:	f01b fb4e 	bl	250e6 <memset>
	att->chan.chan.ops = &ops;
    9a4a:	9801      	ldr	r0, [sp, #4]
    9a4c:	4b08      	ldr	r3, [pc, #32]	; (9a70 <bt_att_accept+0x64>)
    9a4e:	6043      	str	r3, [r0, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
    9a50:	2204      	movs	r2, #4
    9a52:	4611      	mov	r1, r2
    9a54:	30c8      	adds	r0, #200	; 0xc8
    9a56:	f01e fc86 	bl	28366 <z_impl_k_sem_init>
	*chan = &att->chan.chan;
    9a5a:	9b01      	ldr	r3, [sp, #4]
    9a5c:	602b      	str	r3, [r5, #0]
	return 0;
    9a5e:	e7ec      	b.n	9a3a <bt_att_accept+0x2e>
    9a60:	20007448 	.word	0x20007448
    9a64:	00028868 	.word	0x00028868
    9a68:	00028870 	.word	0x00028870
    9a6c:	0002b77d 	.word	0x0002b77d
    9a70:	00028fa0 	.word	0x00028fa0

00009a74 <att_chan_get>:
{
    9a74:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    9a76:	7a83      	ldrb	r3, [r0, #10]
    9a78:	2b06      	cmp	r3, #6
    9a7a:	d00b      	beq.n	9a94 <att_chan_get+0x20>
    9a7c:	4916      	ldr	r1, [pc, #88]	; (9ad8 <att_chan_get+0x64>)
    9a7e:	4b17      	ldr	r3, [pc, #92]	; (9adc <att_chan_get+0x68>)
		BT_WARN("Not connected");
    9a80:	4817      	ldr	r0, [pc, #92]	; (9ae0 <att_chan_get+0x6c>)
    9a82:	1ac9      	subs	r1, r1, r3
    9a84:	08c9      	lsrs	r1, r1, #3
    9a86:	0189      	lsls	r1, r1, #6
    9a88:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT context flagged as disconnected");
    9a8c:	f019 fc8e 	bl	233ac <log_0>
		return NULL;
    9a90:	2400      	movs	r4, #0
    9a92:	e00e      	b.n	9ab2 <att_chan_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    9a94:	2104      	movs	r1, #4
    9a96:	f01c f84d 	bl	25b34 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    9a9a:	4604      	mov	r4, r0
    9a9c:	b958      	cbnz	r0, 9ab6 <att_chan_get+0x42>
    9a9e:	490e      	ldr	r1, [pc, #56]	; (9ad8 <att_chan_get+0x64>)
    9aa0:	4b0e      	ldr	r3, [pc, #56]	; (9adc <att_chan_get+0x68>)
		BT_ERR("Unable to find ATT channel");
    9aa2:	4810      	ldr	r0, [pc, #64]	; (9ae4 <att_chan_get+0x70>)
    9aa4:	1ac9      	subs	r1, r1, r3
    9aa6:	08c9      	lsrs	r1, r1, #3
    9aa8:	0189      	lsls	r1, r1, #6
    9aaa:	f041 0101 	orr.w	r1, r1, #1
    9aae:	f019 fc7d 	bl	233ac <log_0>
}
    9ab2:	4620      	mov	r0, r4
    9ab4:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9ab6:	f3bf 8f5b 	dmb	ish
    9aba:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    9abe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    9ac2:	075b      	lsls	r3, r3, #29
    9ac4:	d5f5      	bpl.n	9ab2 <att_chan_get+0x3e>
    9ac6:	4904      	ldr	r1, [pc, #16]	; (9ad8 <att_chan_get+0x64>)
    9ac8:	4b04      	ldr	r3, [pc, #16]	; (9adc <att_chan_get+0x68>)
		BT_WARN("ATT context flagged as disconnected");
    9aca:	4807      	ldr	r0, [pc, #28]	; (9ae8 <att_chan_get+0x74>)
    9acc:	1ac9      	subs	r1, r1, r3
    9ace:	08c9      	lsrs	r1, r1, #3
    9ad0:	0189      	lsls	r1, r1, #6
    9ad2:	f041 0102 	orr.w	r1, r1, #2
    9ad6:	e7d9      	b.n	9a8c <att_chan_get+0x18>
    9ad8:	00028870 	.word	0x00028870
    9adc:	00028868 	.word	0x00028868
    9ae0:	0002b7a2 	.word	0x0002b7a2
    9ae4:	0002b7b0 	.word	0x0002b7b0
    9ae8:	0002b7cb 	.word	0x0002b7cb

00009aec <att_req_sent>:
{
    9aec:	b538      	push	{r3, r4, r5, lr}
    9aee:	4604      	mov	r4, r0
    9af0:	460d      	mov	r5, r1
	struct bt_att *att = att_get(conn);
    9af2:	f7ff ff6d 	bl	99d0 <att_get>
	if (att->req) {
    9af6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    9afa:	b133      	cbz	r3, 9b0a <att_req_sent+0x1e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9afc:	f100 01a8 	add.w	r1, r0, #168	; 0xa8
    9b00:	f247 5230 	movw	r2, #30000	; 0x7530
    9b04:	4804      	ldr	r0, [pc, #16]	; (9b18 <att_req_sent+0x2c>)
    9b06:	f018 fa1f 	bl	21f48 <k_delayed_work_submit_to_queue>
	att_pdu_sent(conn, user_data);
    9b0a:	4629      	mov	r1, r5
    9b0c:	4620      	mov	r0, r4
}
    9b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
    9b12:	f01c b96a 	b.w	25dea <att_pdu_sent>
    9b16:	bf00      	nop
    9b18:	20001c08 	.word	0x20001c08

00009b1c <att_send_req>:
{
    9b1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9b1e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(req);
    9b20:	460c      	mov	r4, r1
    9b22:	b959      	cbnz	r1, 9b3c <att_send_req+0x20>
    9b24:	4931      	ldr	r1, [pc, #196]	; (9bec <att_send_req+0xd0>)
    9b26:	4832      	ldr	r0, [pc, #200]	; (9bf0 <att_send_req+0xd4>)
    9b28:	4a32      	ldr	r2, [pc, #200]	; (9bf4 <att_send_req+0xd8>)
    9b2a:	f44f 7397 	mov.w	r3, #302	; 0x12e
    9b2e:	f019 fbcc 	bl	232ca <printk>
    9b32:	4830      	ldr	r0, [pc, #192]	; (9bf4 <att_send_req+0xd8>)
    9b34:	f44f 7197 	mov.w	r1, #302	; 0x12e
    9b38:	f019 fc0a 	bl	23350 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
    9b3c:	6863      	ldr	r3, [r4, #4]
    9b3e:	b95b      	cbnz	r3, 9b58 <att_send_req+0x3c>
    9b40:	492d      	ldr	r1, [pc, #180]	; (9bf8 <att_send_req+0xdc>)
    9b42:	482b      	ldr	r0, [pc, #172]	; (9bf0 <att_send_req+0xd4>)
    9b44:	4a2b      	ldr	r2, [pc, #172]	; (9bf4 <att_send_req+0xd8>)
    9b46:	f240 132f 	movw	r3, #303	; 0x12f
    9b4a:	f019 fbbe 	bl	232ca <printk>
    9b4e:	4829      	ldr	r0, [pc, #164]	; (9bf4 <att_send_req+0xd8>)
    9b50:	f240 112f 	movw	r1, #303	; 0x12f
    9b54:	f019 fbfc 	bl	23350 <assert_post_action>
	__ASSERT_NO_MSG(!att->req);
    9b58:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    9b5c:	b15b      	cbz	r3, 9b76 <att_send_req+0x5a>
    9b5e:	4927      	ldr	r1, [pc, #156]	; (9bfc <att_send_req+0xe0>)
    9b60:	4823      	ldr	r0, [pc, #140]	; (9bf0 <att_send_req+0xd4>)
    9b62:	4a24      	ldr	r2, [pc, #144]	; (9bf4 <att_send_req+0xd8>)
    9b64:	f44f 7398 	mov.w	r3, #304	; 0x130
    9b68:	f019 fbaf 	bl	232ca <printk>
    9b6c:	4821      	ldr	r0, [pc, #132]	; (9bf4 <att_send_req+0xd8>)
    9b6e:	f44f 7198 	mov.w	r1, #304	; 0x130
    9b72:	f019 fbed 	bl	23350 <assert_post_action>
	att->req = req;
    9b76:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
	return z_impl_k_sem_take(sem, timeout);
    9b7a:	2100      	movs	r1, #0
    9b7c:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
    9b80:	f017 ffce 	bl	21b20 <z_impl_k_sem_take>
	if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
    9b84:	2800      	cmp	r0, #0
    9b86:	da08      	bge.n	9b9a <att_send_req+0x7e>
		k_fifo_put(&att->tx_queue, req->buf);
    9b88:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    9b8c:	6921      	ldr	r1, [r4, #16]
    9b8e:	f01e fba7 	bl	282e0 <k_queue_append>
		return 0;
    9b92:	2500      	movs	r5, #0
}
    9b94:	4628      	mov	r0, r5
    9b96:	b002      	add	sp, #8
    9b98:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    9b9a:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    9b9c:	f106 0008 	add.w	r0, r6, #8
    9ba0:	f01e f998 	bl	27ed4 <net_buf_simple_headroom>
	state->len = buf->len;
    9ba4:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    9ba6:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    9ba8:	81e3      	strh	r3, [r4, #14]
	err = bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    9baa:	6920      	ldr	r0, [r4, #16]
    9bac:	682d      	ldr	r5, [r5, #0]
    9bae:	f014 fcb7 	bl	1e520 <net_buf_ref>
    9bb2:	6923      	ldr	r3, [r4, #16]
	switch (att_op_get_type(buf->data[0])) {
    9bb4:	689b      	ldr	r3, [r3, #8]
	err = bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    9bb6:	4601      	mov	r1, r0
	switch (att_op_get_type(buf->data[0])) {
    9bb8:	7818      	ldrb	r0, [r3, #0]
    9bba:	f01b ffcd 	bl	25b58 <att_op_get_type>
    9bbe:	1e43      	subs	r3, r0, #1
    9bc0:	b2db      	uxtb	r3, r3
    9bc2:	2b04      	cmp	r3, #4
    9bc4:	bf96      	itet	ls
    9bc6:	4a0e      	ldrls	r2, [pc, #56]	; (9c00 <att_send_req+0xe4>)
    9bc8:	4b0e      	ldrhi	r3, [pc, #56]	; (9c04 <att_send_req+0xe8>)
    9bca:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    9bce:	2600      	movs	r6, #0
    9bd0:	460a      	mov	r2, r1
    9bd2:	4628      	mov	r0, r5
    9bd4:	9600      	str	r6, [sp, #0]
    9bd6:	2104      	movs	r1, #4
    9bd8:	f01b ff83 	bl	25ae2 <bt_l2cap_send_cb>
	if (err) {
    9bdc:	4605      	mov	r5, r0
    9bde:	2800      	cmp	r0, #0
    9be0:	d0d8      	beq.n	9b94 <att_send_req+0x78>
		net_buf_unref(req->buf);
    9be2:	6920      	ldr	r0, [r4, #16]
    9be4:	f014 fc54 	bl	1e490 <net_buf_unref>
		req->buf = NULL;
    9be8:	6126      	str	r6, [r4, #16]
		return err;
    9bea:	e7d3      	b.n	9b94 <att_send_req+0x78>
    9bec:	0002b7ff 	.word	0x0002b7ff
    9bf0:	000297e6 	.word	0x000297e6
    9bf4:	0002b737 	.word	0x0002b737
    9bf8:	0002b7ef 	.word	0x0002b7ef
    9bfc:	0002b7f9 	.word	0x0002b7f9
    9c00:	00028f24 	.word	0x00028f24
    9c04:	00025deb 	.word	0x00025deb

00009c08 <att_write_cmd>:
{
    9c08:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9c0a:	6806      	ldr	r6, [r0, #0]
{
    9c0c:	b089      	sub	sp, #36	; 0x24
	handle = net_buf_pull_le16(buf);
    9c0e:	f101 0008 	add.w	r0, r1, #8
{
    9c12:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    9c14:	f01e f942 	bl	27e9c <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    9c18:	2100      	movs	r1, #0
	handle = net_buf_pull_le16(buf);
    9c1a:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    9c1c:	4630      	mov	r0, r6
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    9c1e:	68a7      	ldr	r7, [r4, #8]
    9c20:	89a4      	ldrh	r4, [r4, #12]
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    9c22:	f01c fba3 	bl	2636c <bt_gatt_change_aware>
    9c26:	b328      	cbz	r0, 9c74 <att_write_cmd+0x6c>
	if (!handle) {
    9c28:	b335      	cbz	r5, 9c78 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
    9c2a:	2218      	movs	r2, #24
    9c2c:	2100      	movs	r1, #0
    9c2e:	a802      	add	r0, sp, #8
    9c30:	f01b fa59 	bl	250e6 <memset>
	data.req = req;
    9c34:	2300      	movs	r3, #0
    9c36:	f88d 3010 	strb.w	r3, [sp, #16]
	data.offset = offset;
    9c3a:	f8ad 301a 	strh.w	r3, [sp, #26]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9c3e:	2301      	movs	r3, #1
    9c40:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9c44:	4a0d      	ldr	r2, [pc, #52]	; (9c7c <att_write_cmd+0x74>)
	data.conn = conn;
    9c46:	9602      	str	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9c48:	ab02      	add	r3, sp, #8
    9c4a:	4629      	mov	r1, r5
    9c4c:	4628      	mov	r0, r5
	data.value = value;
    9c4e:	9705      	str	r7, [sp, #20]
	data.len = len;
    9c50:	f8ad 4018 	strh.w	r4, [sp, #24]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9c54:	f01b ffad 	bl	25bb2 <bt_gatt_foreach_attr>
	if (data.err) {
    9c58:	f89d 301c 	ldrb.w	r3, [sp, #28]
    9c5c:	b93b      	cbnz	r3, 9c6e <att_write_cmd+0x66>
	if (data.buf) {
    9c5e:	9a03      	ldr	r2, [sp, #12]
    9c60:	b12a      	cbz	r2, 9c6e <att_write_cmd+0x66>
		(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    9c62:	9300      	str	r3, [sp, #0]
    9c64:	2104      	movs	r1, #4
    9c66:	4b06      	ldr	r3, [pc, #24]	; (9c80 <att_write_cmd+0x78>)
    9c68:	4630      	mov	r0, r6
    9c6a:	f01b ff3a 	bl	25ae2 <bt_l2cap_send_cb>
    9c6e:	2000      	movs	r0, #0
}
    9c70:	b009      	add	sp, #36	; 0x24
    9c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9c74:	2012      	movs	r0, #18
    9c76:	e7fb      	b.n	9c70 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
    9c78:	2001      	movs	r0, #1
    9c7a:	e7f9      	b.n	9c70 <att_write_cmd+0x68>
    9c7c:	00025ea5 	.word	0x00025ea5
    9c80:	00025e73 	.word	0x00025e73

00009c84 <bt_att_create_pdu>:
{
    9c84:	b570      	push	{r4, r5, r6, lr}
    9c86:	460e      	mov	r6, r1
    9c88:	4615      	mov	r5, r2
	att = att_chan_get(conn);
    9c8a:	f7ff fef3 	bl	9a74 <att_chan_get>
	if (!att) {
    9c8e:	4604      	mov	r4, r0
    9c90:	b178      	cbz	r0, 9cb2 <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    9c92:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
    9c96:	1c6a      	adds	r2, r5, #1
    9c98:	428a      	cmp	r2, r1
    9c9a:	d90c      	bls.n	9cb6 <bt_att_create_pdu+0x32>
    9c9c:	4818      	ldr	r0, [pc, #96]	; (9d00 <bt_att_create_pdu+0x7c>)
    9c9e:	4b19      	ldr	r3, [pc, #100]	; (9d04 <bt_att_create_pdu+0x80>)
    9ca0:	1a1b      	subs	r3, r3, r0
    9ca2:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    9ca4:	019b      	lsls	r3, r3, #6
    9ca6:	4818      	ldr	r0, [pc, #96]	; (9d08 <bt_att_create_pdu+0x84>)
    9ca8:	f043 0302 	orr.w	r3, r3, #2
    9cac:	f019 fb9f 	bl	233ee <log_2>
		return NULL;
    9cb0:	2400      	movs	r4, #0
}
    9cb2:	4620      	mov	r0, r4
    9cb4:	bd70      	pop	{r4, r5, r6, pc}
	switch (att_op_get_type(op)) {
    9cb6:	4630      	mov	r0, r6
    9cb8:	f01b ff4e 	bl	25b58 <att_op_get_type>
    9cbc:	2802      	cmp	r0, #2
    9cbe:	d001      	beq.n	9cc4 <bt_att_create_pdu+0x40>
    9cc0:	2804      	cmp	r0, #4
    9cc2:	d113      	bne.n	9cec <bt_att_create_pdu+0x68>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    9cc4:	f247 5230 	movw	r2, #30000	; 0x7530
		buf = bt_l2cap_create_pdu(NULL, 0);
    9cc8:	2100      	movs	r1, #0
    9cca:	4608      	mov	r0, r1
    9ccc:	f01b ff06 	bl	25adc <bt_l2cap_create_pdu_timeout>
    9cd0:	4604      	mov	r4, r0
	if (!buf) {
    9cd2:	b970      	cbnz	r0, 9cf2 <bt_att_create_pdu+0x6e>
    9cd4:	4b0a      	ldr	r3, [pc, #40]	; (9d00 <bt_att_create_pdu+0x7c>)
    9cd6:	4a0b      	ldr	r2, [pc, #44]	; (9d04 <bt_att_create_pdu+0x80>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    9cd8:	480c      	ldr	r0, [pc, #48]	; (9d0c <bt_att_create_pdu+0x88>)
    9cda:	1ad2      	subs	r2, r2, r3
    9cdc:	08d2      	lsrs	r2, r2, #3
    9cde:	0192      	lsls	r2, r2, #6
    9ce0:	f042 0201 	orr.w	r2, r2, #1
    9ce4:	4631      	mov	r1, r6
    9ce6:	f019 fb6e 	bl	233c6 <log_1>
		return NULL;
    9cea:	e7e2      	b.n	9cb2 <bt_att_create_pdu+0x2e>
		buf = bt_l2cap_create_pdu(NULL, 0);
    9cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9cf0:	e7ea      	b.n	9cc8 <bt_att_create_pdu+0x44>
	hdr = net_buf_add(buf, sizeof(*hdr));
    9cf2:	2101      	movs	r1, #1
    9cf4:	3008      	adds	r0, #8
    9cf6:	f014 fc91 	bl	1e61c <net_buf_simple_add>
	hdr->code = op;
    9cfa:	7006      	strb	r6, [r0, #0]
	return buf;
    9cfc:	e7d9      	b.n	9cb2 <bt_att_create_pdu+0x2e>
    9cfe:	bf00      	nop
    9d00:	00028868 	.word	0x00028868
    9d04:	00028870 	.word	0x00028870
    9d08:	0002b803 	.word	0x0002b803
    9d0c:	0002b56a 	.word	0x0002b56a

00009d10 <att_mtu_req>:
	mtu_client = sys_le16_to_cpu(req->mtu);
    9d10:	688b      	ldr	r3, [r1, #8]
{
    9d12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    9d16:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    9d18:	2e16      	cmp	r6, #22
{
    9d1a:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    9d1c:	d921      	bls.n	9d62 <att_mtu_req+0x52>
	struct bt_conn *conn = att->chan.chan.conn;
    9d1e:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    9d22:	2202      	movs	r2, #2
    9d24:	2103      	movs	r1, #3
    9d26:	4640      	mov	r0, r8
    9d28:	f7ff ffac 	bl	9c84 <bt_att_create_pdu>
	if (!pdu) {
    9d2c:	4607      	mov	r7, r0
    9d2e:	b1d0      	cbz	r0, 9d66 <att_mtu_req+0x56>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    9d30:	2102      	movs	r1, #2
    9d32:	3008      	adds	r0, #8
    9d34:	f014 fc72 	bl	1e61c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    9d38:	2400      	movs	r4, #0
    9d3a:	2345      	movs	r3, #69	; 0x45
    9d3c:	7003      	strb	r3, [r0, #0]
    9d3e:	7044      	strb	r4, [r0, #1]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent, NULL);
    9d40:	4b0a      	ldr	r3, [pc, #40]	; (9d6c <att_mtu_req+0x5c>)
    9d42:	9400      	str	r4, [sp, #0]
    9d44:	463a      	mov	r2, r7
    9d46:	2104      	movs	r1, #4
    9d48:	4640      	mov	r0, r8
    9d4a:	f01b feca 	bl	25ae2 <bt_l2cap_send_cb>
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    9d4e:	2e45      	cmp	r6, #69	; 0x45
    9d50:	bf28      	it	cs
    9d52:	2645      	movcs	r6, #69	; 0x45
    9d54:	86ee      	strh	r6, [r5, #54]	; 0x36
	att->chan.tx.mtu = att->chan.rx.mtu;
    9d56:	f8a5 6042 	strh.w	r6, [r5, #66]	; 0x42
	return 0;
    9d5a:	4620      	mov	r0, r4
}
    9d5c:	b002      	add	sp, #8
    9d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    9d62:	2004      	movs	r0, #4
    9d64:	e7fa      	b.n	9d5c <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
    9d66:	200e      	movs	r0, #14
    9d68:	e7f8      	b.n	9d5c <att_mtu_req+0x4c>
    9d6a:	bf00      	nop
    9d6c:	00025e73 	.word	0x00025e73

00009d70 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    9d70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9d74:	4688      	mov	r8, r1
    9d76:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    9d78:	2101      	movs	r1, #1
    9d7a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    9d7c:	4605      	mov	r5, r0
    9d7e:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    9d80:	f7ff ff80 	bl	9c84 <bt_att_create_pdu>
	if (!buf) {
    9d84:	4604      	mov	r4, r0
    9d86:	b180      	cbz	r0, 9daa <send_err_rsp.part.0+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    9d88:	2104      	movs	r1, #4
    9d8a:	3008      	adds	r0, #8
    9d8c:	f014 fc46 	bl	1e61c <net_buf_simple_add>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    9d90:	2300      	movs	r3, #0
	rsp->request = req;
    9d92:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
    9d96:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
    9d9a:	70c6      	strb	r6, [r0, #3]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    9d9c:	4622      	mov	r2, r4
    9d9e:	9300      	str	r3, [sp, #0]
    9da0:	2104      	movs	r1, #4
    9da2:	4b03      	ldr	r3, [pc, #12]	; (9db0 <send_err_rsp.part.0+0x40>)
    9da4:	4628      	mov	r0, r5
    9da6:	f01b fe9c 	bl	25ae2 <bt_l2cap_send_cb>
}
    9daa:	b002      	add	sp, #8
    9dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9db0:	00025e73 	.word	0x00025e73

00009db4 <bt_att_recv>:
{
    9db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    9db6:	898b      	ldrh	r3, [r1, #12]
{
    9db8:	4604      	mov	r4, r0
    9dba:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    9dbc:	b95b      	cbnz	r3, 9dd6 <bt_att_recv+0x22>
    9dbe:	494b      	ldr	r1, [pc, #300]	; (9eec <bt_att_recv+0x138>)
    9dc0:	4b4b      	ldr	r3, [pc, #300]	; (9ef0 <bt_att_recv+0x13c>)
		BT_ERR("Too small ATT PDU received");
    9dc2:	484c      	ldr	r0, [pc, #304]	; (9ef4 <bt_att_recv+0x140>)
    9dc4:	1ac9      	subs	r1, r1, r3
    9dc6:	08c9      	lsrs	r1, r1, #3
    9dc8:	0189      	lsls	r1, r1, #6
    9dca:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    9dce:	f019 faed 	bl	233ac <log_0>
}
    9dd2:	2000      	movs	r0, #0
    9dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9dd6:	2101      	movs	r1, #1
    9dd8:	f106 0008 	add.w	r0, r6, #8
    9ddc:	f014 fbfc 	bl	1e5d8 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    9de0:	4a45      	ldr	r2, [pc, #276]	; (9ef8 <bt_att_recv+0x144>)
    9de2:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9de4:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9de6:	2300      	movs	r3, #0
    9de8:	4610      	mov	r0, r2
		if (hdr->code == handlers[i].op) {
    9dea:	f812 7033 	ldrb.w	r7, [r2, r3, lsl #3]
    9dee:	428f      	cmp	r7, r1
    9df0:	d120      	bne.n	9e34 <bt_att_recv+0x80>
		if (handler->type == ATT_REQUEST &&
    9df2:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    9df6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9dfa:	789f      	ldrb	r7, [r3, #2]
    9dfc:	2f01      	cmp	r7, #1
    9dfe:	d134      	bne.n	9e6a <bt_att_recv+0xb6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9e00:	f3bf 8f5b 	dmb	ish
    9e04:	f104 0298 	add.w	r2, r4, #152	; 0x98
    9e08:	e852 3f00 	ldrex	r3, [r2]
    9e0c:	f043 0101 	orr.w	r1, r3, #1
    9e10:	e842 1e00 	strex	lr, r1, [r2]
    9e14:	f1be 0f00 	cmp.w	lr, #0
    9e18:	d1f6      	bne.n	9e08 <bt_att_recv+0x54>
    9e1a:	f3bf 8f5b 	dmb	ish
    9e1e:	07da      	lsls	r2, r3, #31
    9e20:	d53f      	bpl.n	9ea2 <bt_att_recv+0xee>
    9e22:	4932      	ldr	r1, [pc, #200]	; (9eec <bt_att_recv+0x138>)
    9e24:	4b32      	ldr	r3, [pc, #200]	; (9ef0 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected request");
    9e26:	4835      	ldr	r0, [pc, #212]	; (9efc <bt_att_recv+0x148>)
    9e28:	1ac9      	subs	r1, r1, r3
    9e2a:	08c9      	lsrs	r1, r1, #3
    9e2c:	0189      	lsls	r1, r1, #6
    9e2e:	f041 0102 	orr.w	r1, r1, #2
    9e32:	e7cc      	b.n	9dce <bt_att_recv+0x1a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9e34:	3301      	adds	r3, #1
    9e36:	2b0d      	cmp	r3, #13
    9e38:	d1d7      	bne.n	9dea <bt_att_recv+0x36>
    9e3a:	4b2d      	ldr	r3, [pc, #180]	; (9ef0 <bt_att_recv+0x13c>)
    9e3c:	4a2b      	ldr	r2, [pc, #172]	; (9eec <bt_att_recv+0x138>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    9e3e:	4830      	ldr	r0, [pc, #192]	; (9f00 <bt_att_recv+0x14c>)
    9e40:	1ad2      	subs	r2, r2, r3
    9e42:	08d2      	lsrs	r2, r2, #3
    9e44:	0192      	lsls	r2, r2, #6
    9e46:	f042 0202 	orr.w	r2, r2, #2
    9e4a:	f019 fabc 	bl	233c6 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    9e4e:	7829      	ldrb	r1, [r5, #0]
    9e50:	4608      	mov	r0, r1
    9e52:	f01b fe81 	bl	25b58 <att_op_get_type>
    9e56:	2800      	cmp	r0, #0
    9e58:	d0bb      	beq.n	9dd2 <bt_att_recv+0x1e>
	if (!req) {
    9e5a:	2900      	cmp	r1, #0
    9e5c:	d0b9      	beq.n	9dd2 <bt_att_recv+0x1e>
    9e5e:	2306      	movs	r3, #6
    9e60:	6820      	ldr	r0, [r4, #0]
    9e62:	2200      	movs	r2, #0
    9e64:	f7ff ff84 	bl	9d70 <send_err_rsp.part.0>
    9e68:	e7b3      	b.n	9dd2 <bt_att_recv+0x1e>
		} else if (handler->type == ATT_INDICATION &&
    9e6a:	2f05      	cmp	r7, #5
    9e6c:	d119      	bne.n	9ea2 <bt_att_recv+0xee>
    9e6e:	f3bf 8f5b 	dmb	ish
    9e72:	f104 0298 	add.w	r2, r4, #152	; 0x98
    9e76:	e852 3f00 	ldrex	r3, [r2]
    9e7a:	f043 0102 	orr.w	r1, r3, #2
    9e7e:	e842 1e00 	strex	lr, r1, [r2]
    9e82:	f1be 0f00 	cmp.w	lr, #0
    9e86:	d1f6      	bne.n	9e76 <bt_att_recv+0xc2>
    9e88:	f3bf 8f5b 	dmb	ish
    9e8c:	079b      	lsls	r3, r3, #30
    9e8e:	d508      	bpl.n	9ea2 <bt_att_recv+0xee>
    9e90:	4916      	ldr	r1, [pc, #88]	; (9eec <bt_att_recv+0x138>)
    9e92:	4b17      	ldr	r3, [pc, #92]	; (9ef0 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected indication");
    9e94:	481b      	ldr	r0, [pc, #108]	; (9f04 <bt_att_recv+0x150>)
    9e96:	1ac9      	subs	r1, r1, r3
    9e98:	08c9      	lsrs	r1, r1, #3
    9e9a:	0189      	lsls	r1, r1, #6
    9e9c:	f041 0102 	orr.w	r1, r1, #2
    9ea0:	e795      	b.n	9dce <bt_att_recv+0x1a>
	if (buf->len < handler->expect_len) {
    9ea2:	eb00 030c 	add.w	r3, r0, ip
    9ea6:	89b1      	ldrh	r1, [r6, #12]
    9ea8:	785a      	ldrb	r2, [r3, #1]
    9eaa:	428a      	cmp	r2, r1
    9eac:	d90e      	bls.n	9ecc <bt_att_recv+0x118>
    9eae:	4a10      	ldr	r2, [pc, #64]	; (9ef0 <bt_att_recv+0x13c>)
    9eb0:	4b0e      	ldr	r3, [pc, #56]	; (9eec <bt_att_recv+0x138>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    9eb2:	4815      	ldr	r0, [pc, #84]	; (9f08 <bt_att_recv+0x154>)
    9eb4:	1a9b      	subs	r3, r3, r2
    9eb6:	08db      	lsrs	r3, r3, #3
    9eb8:	019b      	lsls	r3, r3, #6
    9eba:	782a      	ldrb	r2, [r5, #0]
    9ebc:	f043 0301 	orr.w	r3, r3, #1
    9ec0:	f019 fa95 	bl	233ee <log_2>
	if (handler->type == ATT_REQUEST && err) {
    9ec4:	2f01      	cmp	r7, #1
    9ec6:	d184      	bne.n	9dd2 <bt_att_recv+0x1e>
		err = BT_ATT_ERR_INVALID_PDU;
    9ec8:	2304      	movs	r3, #4
    9eca:	e00a      	b.n	9ee2 <bt_att_recv+0x12e>
		err = handler->func(att, buf);
    9ecc:	685b      	ldr	r3, [r3, #4]
    9ece:	4631      	mov	r1, r6
    9ed0:	4620      	mov	r0, r4
    9ed2:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    9ed4:	2f01      	cmp	r7, #1
		err = handler->func(att, buf);
    9ed6:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    9ed8:	f47f af7b 	bne.w	9dd2 <bt_att_recv+0x1e>
    9edc:	2800      	cmp	r0, #0
    9ede:	f43f af78 	beq.w	9dd2 <bt_att_recv+0x1e>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    9ee2:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    9ee4:	2900      	cmp	r1, #0
    9ee6:	f43f af74 	beq.w	9dd2 <bt_att_recv+0x1e>
    9eea:	e7b9      	b.n	9e60 <bt_att_recv+0xac>
    9eec:	00028870 	.word	0x00028870
    9ef0:	00028868 	.word	0x00028868
    9ef4:	0002b828 	.word	0x0002b828
    9ef8:	00028f38 	.word	0x00028f38
    9efc:	0002b843 	.word	0x0002b843
    9f00:	0002b89d 	.word	0x0002b89d
    9f04:	0002b85f 	.word	0x0002b85f
    9f08:	0002b87e 	.word	0x0002b87e

00009f0c <att_read_group_req>:
{
    9f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    9f10:	7b0c      	ldrb	r4, [r1, #12]
    9f12:	3c04      	subs	r4, #4
    9f14:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    9f16:	2c02      	cmp	r4, #2
{
    9f18:	4606      	mov	r6, r0
    9f1a:	b08f      	sub	sp, #60	; 0x3c
    9f1c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    9f1e:	d001      	beq.n	9f24 <att_read_group_req+0x18>
    9f20:	2c10      	cmp	r4, #16
    9f22:	d16f      	bne.n	a004 <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
    9f24:	2104      	movs	r1, #4
    9f26:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    9f28:	f8d6 9000 	ldr.w	r9, [r6]
	req = net_buf_pull_mem(buf, sizeof(*req));
    9f2c:	f014 fb54 	bl	1e5d8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9f30:	f10d 0810 	add.w	r8, sp, #16
	start_handle = sys_le16_to_cpu(req->start_handle);
    9f34:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9f36:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9f38:	1d01      	adds	r1, r0, #4
    9f3a:	4622      	mov	r2, r4
    9f3c:	4640      	mov	r0, r8
    9f3e:	f01b fba1 	bl	25684 <bt_uuid_create>
    9f42:	2800      	cmp	r0, #0
    9f44:	d060      	beq.n	a008 <att_read_group_req+0xfc>
	if (!start || !end) {
    9f46:	2d00      	cmp	r5, #0
    9f48:	d036      	beq.n	9fb8 <att_read_group_req+0xac>
    9f4a:	2400      	movs	r4, #0
    9f4c:	b39f      	cbz	r7, 9fb6 <att_read_group_req+0xaa>
	if (start > end) {
    9f4e:	42bd      	cmp	r5, r7
    9f50:	d832      	bhi.n	9fb8 <att_read_group_req+0xac>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9f52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9f56:	a903      	add	r1, sp, #12
    9f58:	4640      	mov	r0, r8
    9f5a:	f88d 400c 	strb.w	r4, [sp, #12]
    9f5e:	f8ad 300e 	strh.w	r3, [sp, #14]
    9f62:	f01b fb65 	bl	25630 <bt_uuid_cmp>
    9f66:	bb90      	cbnz	r0, 9fce <att_read_group_req+0xc2>
	struct bt_conn *conn = att->chan.chan.conn;
    9f68:	f8d6 9000 	ldr.w	r9, [r6]
	(void)memset(&data, 0, sizeof(data));
    9f6c:	2214      	movs	r2, #20
    9f6e:	2100      	movs	r1, #0
    9f70:	a809      	add	r0, sp, #36	; 0x24
    9f72:	f01b f8b8 	bl	250e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    9f76:	2201      	movs	r2, #1
    9f78:	2111      	movs	r1, #17
    9f7a:	4648      	mov	r0, r9
    9f7c:	f7ff fe82 	bl	9c84 <bt_att_create_pdu>
    9f80:	900b      	str	r0, [sp, #44]	; 0x2c
	if (!data.buf) {
    9f82:	2800      	cmp	r0, #0
    9f84:	d040      	beq.n	a008 <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9f86:	2101      	movs	r1, #1
    9f88:	3008      	adds	r0, #8
	data.uuid = uuid;
    9f8a:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9f8e:	f014 fb45 	bl	1e61c <net_buf_simple_add>
	data.rsp->len = 0U;
    9f92:	2600      	movs	r6, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9f94:	900c      	str	r0, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9f96:	ab09      	add	r3, sp, #36	; 0x24
	data.rsp->len = 0U;
    9f98:	7006      	strb	r6, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9f9a:	4a1c      	ldr	r2, [pc, #112]	; (a00c <att_read_group_req+0x100>)
	data.group = NULL;
    9f9c:	960d      	str	r6, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9f9e:	4639      	mov	r1, r7
    9fa0:	4628      	mov	r0, r5
    9fa2:	f01b fe06 	bl	25bb2 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    9fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9fa8:	781c      	ldrb	r4, [r3, #0]
    9faa:	bb1c      	cbnz	r4, 9ff4 <att_read_group_req+0xe8>
		net_buf_unref(data.buf);
    9fac:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9fae:	f014 fa6f 	bl	1e490 <net_buf_unref>
	if (!req) {
    9fb2:	230a      	movs	r3, #10
    9fb4:	e018      	b.n	9fe8 <att_read_group_req+0xdc>
			*err = 0U;
    9fb6:	463d      	mov	r5, r7
	if (!req) {
    9fb8:	2301      	movs	r3, #1
    9fba:	462a      	mov	r2, r5
    9fbc:	2110      	movs	r1, #16
    9fbe:	4648      	mov	r0, r9
    9fc0:	f7ff fed6 	bl	9d70 <send_err_rsp.part.0>
		return 0;
    9fc4:	2400      	movs	r4, #0
}
    9fc6:	4620      	mov	r0, r4
    9fc8:	b00f      	add	sp, #60	; 0x3c
    9fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    9fce:	f642 0301 	movw	r3, #10241	; 0x2801
    9fd2:	a909      	add	r1, sp, #36	; 0x24
    9fd4:	4640      	mov	r0, r8
    9fd6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
    9fda:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    9fde:	f01b fb27 	bl	25630 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9fe2:	2800      	cmp	r0, #0
    9fe4:	d0c0      	beq.n	9f68 <att_read_group_req+0x5c>
	if (!req) {
    9fe6:	2310      	movs	r3, #16
    9fe8:	462a      	mov	r2, r5
    9fea:	2110      	movs	r1, #16
    9fec:	4648      	mov	r0, r9
    9fee:	f7ff febf 	bl	9d70 <send_err_rsp.part.0>
		return 0;
    9ff2:	e7e8      	b.n	9fc6 <att_read_group_req+0xba>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    9ff4:	4b06      	ldr	r3, [pc, #24]	; (a010 <att_read_group_req+0x104>)
    9ff6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9ff8:	9600      	str	r6, [sp, #0]
    9ffa:	2104      	movs	r1, #4
    9ffc:	4648      	mov	r0, r9
    9ffe:	f01b fd70 	bl	25ae2 <bt_l2cap_send_cb>
	return 0;
    a002:	e7df      	b.n	9fc4 <att_read_group_req+0xb8>
		return BT_ATT_ERR_INVALID_PDU;
    a004:	2404      	movs	r4, #4
    a006:	e7de      	b.n	9fc6 <att_read_group_req+0xba>
		return BT_ATT_ERR_UNLIKELY;
    a008:	240e      	movs	r4, #14
    a00a:	e7dc      	b.n	9fc6 <att_read_group_req+0xba>
    a00c:	00025bc9 	.word	0x00025bc9
    a010:	00025e73 	.word	0x00025e73

0000a014 <att_read_mult_req>:
{
    a014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    a018:	6806      	ldr	r6, [r0, #0]
{
    a01a:	b089      	sub	sp, #36	; 0x24
	(void)memset(&data, 0, sizeof(data));
    a01c:	2214      	movs	r2, #20
{
    a01e:	4605      	mov	r5, r0
    a020:	460c      	mov	r4, r1
	(void)memset(&data, 0, sizeof(data));
    a022:	a803      	add	r0, sp, #12
    a024:	2100      	movs	r1, #0
    a026:	f01b f85e 	bl	250e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    a02a:	2200      	movs	r2, #0
    a02c:	210f      	movs	r1, #15
    a02e:	4630      	mov	r0, r6
    a030:	f7ff fe28 	bl	9c84 <bt_att_create_pdu>
    a034:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    a036:	b378      	cbz	r0, a098 <att_read_mult_req+0x84>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a038:	f8df 9064 	ldr.w	r9, [pc, #100]	; a0a0 <att_read_mult_req+0x8c>
	data.att = att;
    a03c:	9503      	str	r5, [sp, #12]
		handle = net_buf_pull_le16(buf);
    a03e:	f104 0708 	add.w	r7, r4, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    a042:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    a046:	89a3      	ldrh	r3, [r4, #12]
    a048:	2b01      	cmp	r3, #1
    a04a:	d808      	bhi.n	a05e <att_read_mult_req+0x4a>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    a04c:	2400      	movs	r4, #0
    a04e:	4b13      	ldr	r3, [pc, #76]	; (a09c <att_read_mult_req+0x88>)
    a050:	9a05      	ldr	r2, [sp, #20]
    a052:	9400      	str	r4, [sp, #0]
    a054:	2104      	movs	r1, #4
    a056:	4630      	mov	r0, r6
    a058:	f01b fd43 	bl	25ae2 <bt_l2cap_send_cb>
	return 0;
    a05c:	e018      	b.n	a090 <att_read_mult_req+0x7c>
		handle = net_buf_pull_le16(buf);
    a05e:	4638      	mov	r0, r7
    a060:	f01d ff1c 	bl	27e9c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a064:	ab03      	add	r3, sp, #12
    a066:	464a      	mov	r2, r9
    a068:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    a06a:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    a06c:	f88d 801c 	strb.w	r8, [sp, #28]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a070:	f01b fd9f 	bl	25bb2 <bt_gatt_foreach_attr>
		if (data.err) {
    a074:	f89d 301c 	ldrb.w	r3, [sp, #28]
    a078:	2b00      	cmp	r3, #0
    a07a:	d0e4      	beq.n	a046 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    a07c:	9805      	ldr	r0, [sp, #20]
    a07e:	f014 fa07 	bl	1e490 <net_buf_unref>
	if (!req) {
    a082:	f89d 301c 	ldrb.w	r3, [sp, #28]
    a086:	462a      	mov	r2, r5
    a088:	210e      	movs	r1, #14
    a08a:	4630      	mov	r0, r6
    a08c:	f7ff fe70 	bl	9d70 <send_err_rsp.part.0>
			return 0;
    a090:	2000      	movs	r0, #0
}
    a092:	b009      	add	sp, #36	; 0x24
    a094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    a098:	200e      	movs	r0, #14
    a09a:	e7fa      	b.n	a092 <att_read_mult_req+0x7e>
    a09c:	00025e73 	.word	0x00025e73
    a0a0:	00025f01 	.word	0x00025f01

0000a0a4 <att_read_rsp>:
{
    a0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    a0a8:	6806      	ldr	r6, [r0, #0]
{
    a0aa:	b088      	sub	sp, #32
    a0ac:	4604      	mov	r4, r0
    a0ae:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    a0b0:	4630      	mov	r0, r6
    a0b2:	2101      	movs	r1, #1
{
    a0b4:	4690      	mov	r8, r2
    a0b6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
    a0b8:	f01c f958 	bl	2636c <bt_gatt_change_aware>
    a0bc:	b3a0      	cbz	r0, a128 <att_read_rsp+0x84>
	if (!handle) {
    a0be:	b3ad      	cbz	r5, a12c <att_read_rsp+0x88>
	(void)memset(&data, 0, sizeof(data));
    a0c0:	2214      	movs	r2, #20
    a0c2:	2100      	movs	r1, #0
    a0c4:	a803      	add	r0, sp, #12
    a0c6:	f01b f80e 	bl	250e6 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    a0ca:	2200      	movs	r2, #0
    a0cc:	4641      	mov	r1, r8
    a0ce:	4630      	mov	r0, r6
    a0d0:	f7ff fdd8 	bl	9c84 <bt_att_create_pdu>
    a0d4:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    a0d6:	b358      	cbz	r0, a130 <att_read_rsp+0x8c>
	data.offset = offset;
    a0d8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    a0dc:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    a0e0:	2301      	movs	r3, #1
    a0e2:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a0e6:	4a13      	ldr	r2, [pc, #76]	; (a134 <att_read_rsp+0x90>)
	data.att = att;
    a0e8:	9403      	str	r4, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a0ea:	ab03      	add	r3, sp, #12
    a0ec:	4629      	mov	r1, r5
    a0ee:	4628      	mov	r0, r5
    a0f0:	f01b fd5f 	bl	25bb2 <bt_gatt_foreach_attr>
	if (data.err) {
    a0f4:	f89d 401c 	ldrb.w	r4, [sp, #28]
    a0f8:	b174      	cbz	r4, a118 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    a0fa:	9805      	ldr	r0, [sp, #20]
    a0fc:	f014 f9c8 	bl	1e490 <net_buf_unref>
	if (!req) {
    a100:	f89d 301c 	ldrb.w	r3, [sp, #28]
    a104:	462a      	mov	r2, r5
    a106:	4639      	mov	r1, r7
    a108:	4630      	mov	r0, r6
    a10a:	f7ff fe31 	bl	9d70 <send_err_rsp.part.0>
		return 0;
    a10e:	2400      	movs	r4, #0
}
    a110:	4620      	mov	r0, r4
    a112:	b008      	add	sp, #32
    a114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    a118:	4b07      	ldr	r3, [pc, #28]	; (a138 <att_read_rsp+0x94>)
    a11a:	9a05      	ldr	r2, [sp, #20]
    a11c:	9400      	str	r4, [sp, #0]
    a11e:	2104      	movs	r1, #4
    a120:	4630      	mov	r0, r6
    a122:	f01b fcde 	bl	25ae2 <bt_l2cap_send_cb>
	return 0;
    a126:	e7f3      	b.n	a110 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    a128:	2412      	movs	r4, #18
    a12a:	e7f1      	b.n	a110 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    a12c:	2401      	movs	r4, #1
    a12e:	e7ef      	b.n	a110 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    a130:	240e      	movs	r4, #14
    a132:	e7ed      	b.n	a110 <att_read_rsp+0x6c>
    a134:	00025f01 	.word	0x00025f01
    a138:	00025e73 	.word	0x00025e73

0000a13c <att_read_type_req>:
{
    a13c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    a140:	7b0c      	ldrb	r4, [r1, #12]
    a142:	3c04      	subs	r4, #4
    a144:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    a146:	2c02      	cmp	r4, #2
{
    a148:	4606      	mov	r6, r0
    a14a:	b08f      	sub	sp, #60	; 0x3c
    a14c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    a14e:	d001      	beq.n	a154 <att_read_type_req+0x18>
    a150:	2c10      	cmp	r4, #16
    a152:	d152      	bne.n	a1fa <att_read_type_req+0xbe>
	req = net_buf_pull_mem(buf, sizeof(*req));
    a154:	2104      	movs	r1, #4
    a156:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    a158:	f8d6 9000 	ldr.w	r9, [r6]
	req = net_buf_pull_mem(buf, sizeof(*req));
    a15c:	f014 fa3c 	bl	1e5d8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    a160:	f10d 080c 	add.w	r8, sp, #12
	start_handle = sys_le16_to_cpu(req->start_handle);
    a164:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    a166:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    a168:	1d01      	adds	r1, r0, #4
    a16a:	4622      	mov	r2, r4
    a16c:	4640      	mov	r0, r8
    a16e:	f01b fa89 	bl	25684 <bt_uuid_create>
    a172:	b188      	cbz	r0, a198 <att_read_type_req+0x5c>
	if (!start || !end) {
    a174:	b19d      	cbz	r5, a19e <att_read_type_req+0x62>
    a176:	b18f      	cbz	r7, a19c <att_read_type_req+0x60>
	if (start > end) {
    a178:	42bd      	cmp	r5, r7
    a17a:	d810      	bhi.n	a19e <att_read_type_req+0x62>
	struct bt_conn *conn = att->chan.chan.conn;
    a17c:	f8d6 9000 	ldr.w	r9, [r6]
	(void)memset(&data, 0, sizeof(data));
    a180:	2218      	movs	r2, #24
    a182:	2100      	movs	r1, #0
    a184:	a808      	add	r0, sp, #32
    a186:	f01a ffae 	bl	250e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    a18a:	2201      	movs	r2, #1
    a18c:	2109      	movs	r1, #9
    a18e:	4648      	mov	r0, r9
    a190:	f7ff fd78 	bl	9c84 <bt_att_create_pdu>
    a194:	900a      	str	r0, [sp, #40]	; 0x28
	if (!data.buf) {
    a196:	b968      	cbnz	r0, a1b4 <att_read_type_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
    a198:	240e      	movs	r4, #14
    a19a:	e007      	b.n	a1ac <att_read_type_req+0x70>
			*err = 0U;
    a19c:	463d      	mov	r5, r7
	if (!req) {
    a19e:	2301      	movs	r3, #1
    a1a0:	462a      	mov	r2, r5
    a1a2:	2108      	movs	r1, #8
    a1a4:	4648      	mov	r0, r9
    a1a6:	f7ff fde3 	bl	9d70 <send_err_rsp.part.0>
		return 0;
    a1aa:	2400      	movs	r4, #0
}
    a1ac:	4620      	mov	r0, r4
    a1ae:	b00f      	add	sp, #60	; 0x3c
    a1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a1b4:	2101      	movs	r1, #1
    a1b6:	3008      	adds	r0, #8
	data.uuid = uuid;
    a1b8:	e9cd 6808 	strd	r6, r8, [sp, #32]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a1bc:	f014 fa2e 	bl	1e61c <net_buf_simple_add>
	data.rsp->len = 0U;
    a1c0:	2600      	movs	r6, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a1c2:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a1c4:	900b      	str	r0, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a1c6:	4a0e      	ldr	r2, [pc, #56]	; (a200 <att_read_type_req+0xc4>)
	data.rsp->len = 0U;
    a1c8:	7006      	strb	r6, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a1ca:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a1cc:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a1d0:	4628      	mov	r0, r5
    a1d2:	ab08      	add	r3, sp, #32
    a1d4:	f01b fced 	bl	25bb2 <bt_gatt_foreach_attr>
	if (data.err) {
    a1d8:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    a1dc:	b12c      	cbz	r4, a1ea <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    a1de:	980a      	ldr	r0, [sp, #40]	; 0x28
    a1e0:	f014 f956 	bl	1e490 <net_buf_unref>
	if (!req) {
    a1e4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    a1e8:	e7da      	b.n	a1a0 <att_read_type_req+0x64>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    a1ea:	4b06      	ldr	r3, [pc, #24]	; (a204 <att_read_type_req+0xc8>)
    a1ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a1ee:	9400      	str	r4, [sp, #0]
    a1f0:	2104      	movs	r1, #4
    a1f2:	4648      	mov	r0, r9
    a1f4:	f01b fc75 	bl	25ae2 <bt_l2cap_send_cb>
	return 0;
    a1f8:	e7d8      	b.n	a1ac <att_read_type_req+0x70>
		return BT_ATT_ERR_INVALID_PDU;
    a1fa:	2404      	movs	r4, #4
    a1fc:	e7d6      	b.n	a1ac <att_read_type_req+0x70>
    a1fe:	bf00      	nop
    a200:	00025c95 	.word	0x00025c95
    a204:	00025e73 	.word	0x00025e73

0000a208 <att_find_type_req>:
{
    a208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a20c:	4688      	mov	r8, r1
	struct bt_conn *conn = att->chan.chan.conn;
    a20e:	f8d0 9000 	ldr.w	r9, [r0]
{
    a212:	b089      	sub	sp, #36	; 0x24
    a214:	4607      	mov	r7, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    a216:	2106      	movs	r1, #6
    a218:	f108 0008 	add.w	r0, r8, #8
    a21c:	f014 f9dc 	bl	1e5d8 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    a220:	8806      	ldrh	r6, [r0, #0]
	if (!start || !end) {
    a222:	b316      	cbz	r6, a26a <att_find_type_req+0x62>
	end_handle = sys_le16_to_cpu(req->end_handle);
    a224:	f8b0 a002 	ldrh.w	sl, [r0, #2]
	if (!start || !end) {
    a228:	f1ba 0f00 	cmp.w	sl, #0
    a22c:	d01c      	beq.n	a268 <att_find_type_req+0x60>
	if (start > end) {
    a22e:	45b2      	cmp	sl, r6
    a230:	d31b      	bcc.n	a26a <att_find_type_req+0x62>
	type = sys_le16_to_cpu(req->type);
    a232:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    a234:	f8ad 300a 	strh.w	r3, [sp, #10]
    a238:	2400      	movs	r4, #0
    a23a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a23e:	a903      	add	r1, sp, #12
    a240:	a802      	add	r0, sp, #8
	value = buf->data;
    a242:	f8d8 b008 	ldr.w	fp, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    a246:	f88d 4008 	strb.w	r4, [sp, #8]
    a24a:	f88d 400c 	strb.w	r4, [sp, #12]
    a24e:	f8ad 300e 	strh.w	r3, [sp, #14]
    a252:	f01b f9ed 	bl	25630 <bt_uuid_cmp>
    a256:	4605      	mov	r5, r0
    a258:	b190      	cbz	r0, a280 <att_find_type_req+0x78>
	if (!req) {
    a25a:	230a      	movs	r3, #10
    a25c:	4632      	mov	r2, r6
    a25e:	2106      	movs	r1, #6
    a260:	4648      	mov	r0, r9
    a262:	f7ff fd85 	bl	9d70 <send_err_rsp.part.0>
		return 0;
    a266:	e007      	b.n	a278 <att_find_type_req+0x70>
			*err = 0U;
    a268:	4656      	mov	r6, sl
	if (!req) {
    a26a:	2301      	movs	r3, #1
    a26c:	4632      	mov	r2, r6
    a26e:	2106      	movs	r1, #6
    a270:	4648      	mov	r0, r9
    a272:	f7ff fd7d 	bl	9d70 <send_err_rsp.part.0>
		return 0;
    a276:	2400      	movs	r4, #0
}
    a278:	4620      	mov	r0, r4
    a27a:	b009      	add	sp, #36	; 0x24
    a27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return att_find_type_rsp(att, start_handle, end_handle, value,
    a280:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    a284:	f8d7 8000 	ldr.w	r8, [r7]
	(void)memset(&data, 0, sizeof(data));
    a288:	4601      	mov	r1, r0
    a28a:	2214      	movs	r2, #20
    a28c:	a803      	add	r0, sp, #12
    a28e:	f01a ff2a 	bl	250e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    a292:	462a      	mov	r2, r5
    a294:	2107      	movs	r1, #7
    a296:	4640      	mov	r0, r8
    a298:	f7ff fcf4 	bl	9c84 <bt_att_create_pdu>
    a29c:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    a29e:	b308      	cbz	r0, a2e4 <att_find_type_req+0xdc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a2a0:	230a      	movs	r3, #10
    a2a2:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a2a6:	4a10      	ldr	r2, [pc, #64]	; (a2e8 <att_find_type_req+0xe0>)
	data.value_len = value_len;
    a2a8:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a2ac:	ab03      	add	r3, sp, #12
    a2ae:	4651      	mov	r1, sl
    a2b0:	4630      	mov	r0, r6
	data.value = value;
    a2b2:	e9cd 5b05 	strd	r5, fp, [sp, #20]
	data.att = att;
    a2b6:	9703      	str	r7, [sp, #12]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a2b8:	f01b fc7b 	bl	25bb2 <bt_gatt_foreach_attr>
	if (data.err) {
    a2bc:	f89d 401d 	ldrb.w	r4, [sp, #29]
    a2c0:	b144      	cbz	r4, a2d4 <att_find_type_req+0xcc>
		net_buf_unref(data.buf);
    a2c2:	9804      	ldr	r0, [sp, #16]
    a2c4:	f014 f8e4 	bl	1e490 <net_buf_unref>
	if (!req) {
    a2c8:	f89d 301d 	ldrb.w	r3, [sp, #29]
    a2cc:	4632      	mov	r2, r6
    a2ce:	2106      	movs	r1, #6
    a2d0:	4640      	mov	r0, r8
    a2d2:	e7ce      	b.n	a272 <att_find_type_req+0x6a>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    a2d4:	4b05      	ldr	r3, [pc, #20]	; (a2ec <att_find_type_req+0xe4>)
    a2d6:	9a04      	ldr	r2, [sp, #16]
    a2d8:	9400      	str	r4, [sp, #0]
    a2da:	2104      	movs	r1, #4
    a2dc:	4640      	mov	r0, r8
    a2de:	f01b fc00 	bl	25ae2 <bt_l2cap_send_cb>
	return 0;
    a2e2:	e7c9      	b.n	a278 <att_find_type_req+0x70>
		return BT_ATT_ERR_UNLIKELY;
    a2e4:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    a2e6:	e7c7      	b.n	a278 <att_find_type_req+0x70>
    a2e8:	00009825 	.word	0x00009825
    a2ec:	00025e73 	.word	0x00025e73

0000a2f0 <att_find_info_req>:
{
    a2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    a2f2:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    a2f4:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    a2f6:	881d      	ldrh	r5, [r3, #0]
{
    a2f8:	b087      	sub	sp, #28
    a2fa:	4607      	mov	r7, r0
	if (!start || !end) {
    a2fc:	b195      	cbz	r5, a324 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    a2fe:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    a300:	b17c      	cbz	r4, a322 <att_find_info_req+0x32>
	if (start > end) {
    a302:	42ac      	cmp	r4, r5
    a304:	d30e      	bcc.n	a324 <att_find_info_req+0x34>
	(void)memset(&data, 0, sizeof(data));
    a306:	2210      	movs	r2, #16
    a308:	2100      	movs	r1, #0
    a30a:	a802      	add	r0, sp, #8
    a30c:	f01a feeb 	bl	250e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    a310:	2200      	movs	r2, #0
    a312:	2105      	movs	r1, #5
    a314:	4630      	mov	r0, r6
    a316:	f7ff fcb5 	bl	9c84 <bt_att_create_pdu>
    a31a:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    a31c:	b958      	cbnz	r0, a336 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    a31e:	200e      	movs	r0, #14
	return att_find_info_rsp(att, start_handle, end_handle);
    a320:	e007      	b.n	a332 <att_find_info_req+0x42>
			*err = 0U;
    a322:	4625      	mov	r5, r4
	if (!req) {
    a324:	2301      	movs	r3, #1
    a326:	462a      	mov	r2, r5
    a328:	2104      	movs	r1, #4
    a32a:	4630      	mov	r0, r6
    a32c:	f7ff fd20 	bl	9d70 <send_err_rsp.part.0>
		return 0;
    a330:	2000      	movs	r0, #0
}
    a332:	b007      	add	sp, #28
    a334:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    a336:	4621      	mov	r1, r4
    a338:	4a0a      	ldr	r2, [pc, #40]	; (a364 <att_find_info_req+0x74>)
	data.att = att;
    a33a:	9702      	str	r7, [sp, #8]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    a33c:	ab02      	add	r3, sp, #8
    a33e:	4628      	mov	r0, r5
    a340:	f01b fc37 	bl	25bb2 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    a344:	9c04      	ldr	r4, [sp, #16]
    a346:	b924      	cbnz	r4, a352 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    a348:	9803      	ldr	r0, [sp, #12]
    a34a:	f014 f8a1 	bl	1e490 <net_buf_unref>
	if (!req) {
    a34e:	230a      	movs	r3, #10
    a350:	e7e9      	b.n	a326 <att_find_info_req+0x36>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    a352:	2400      	movs	r4, #0
    a354:	4b04      	ldr	r3, [pc, #16]	; (a368 <att_find_info_req+0x78>)
    a356:	9a03      	ldr	r2, [sp, #12]
    a358:	9400      	str	r4, [sp, #0]
    a35a:	2104      	movs	r1, #4
    a35c:	4630      	mov	r0, r6
    a35e:	f01b fbc0 	bl	25ae2 <bt_l2cap_send_cb>
	return 0;
    a362:	e7e5      	b.n	a330 <att_find_info_req+0x40>
    a364:	00025d4d 	.word	0x00025d4d
    a368:	00025e73 	.word	0x00025e73

0000a36c <att_write_req>:
{
    a36c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    a370:	6806      	ldr	r6, [r0, #0]
{
    a372:	b089      	sub	sp, #36	; 0x24
	handle = net_buf_pull_le16(buf);
    a374:	f101 0008 	add.w	r0, r1, #8
{
    a378:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    a37a:	f01d fd8f 	bl	27e9c <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    a37e:	2101      	movs	r1, #1
	handle = net_buf_pull_le16(buf);
    a380:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    a382:	4630      	mov	r0, r6
			     handle, 0, buf->data, buf->len);
    a384:	f8d4 9008 	ldr.w	r9, [r4, #8]
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    a388:	89a4      	ldrh	r4, [r4, #12]
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    a38a:	f01b ffef 	bl	2636c <bt_gatt_change_aware>
    a38e:	2800      	cmp	r0, #0
    a390:	d040      	beq.n	a414 <att_write_req+0xa8>
	if (!handle) {
    a392:	2d00      	cmp	r5, #0
    a394:	d040      	beq.n	a418 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
    a396:	2218      	movs	r2, #24
    a398:	2100      	movs	r1, #0
    a39a:	a802      	add	r0, sp, #8
    a39c:	f01a fea3 	bl	250e6 <memset>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    a3a0:	2200      	movs	r2, #0
    a3a2:	2113      	movs	r1, #19
    a3a4:	4630      	mov	r0, r6
    a3a6:	f7ff fc6d 	bl	9c84 <bt_att_create_pdu>
    a3aa:	9003      	str	r0, [sp, #12]
		if (!data.buf) {
    a3ac:	b380      	cbz	r0, a410 <att_write_req+0xa4>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    a3ae:	2301      	movs	r3, #1
    a3b0:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    a3b4:	4a19      	ldr	r2, [pc, #100]	; (a41c <att_write_req+0xb0>)
	data.len = len;
    a3b6:	f8ad 4018 	strh.w	r4, [sp, #24]
	data.req = req;
    a3ba:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    a3be:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    a3c0:	ab02      	add	r3, sp, #8
    a3c2:	4629      	mov	r1, r5
    a3c4:	4628      	mov	r0, r5
	data.conn = conn;
    a3c6:	9602      	str	r6, [sp, #8]
	data.req = req;
    a3c8:	f88d 8010 	strb.w	r8, [sp, #16]
	data.offset = offset;
    a3cc:	f8ad 701a 	strh.w	r7, [sp, #26]
	data.value = value;
    a3d0:	f8cd 9014 	str.w	r9, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    a3d4:	f01b fbed 	bl	25bb2 <bt_gatt_foreach_attr>
	if (data.err) {
    a3d8:	f89d 401c 	ldrb.w	r4, [sp, #28]
    a3dc:	b174      	cbz	r4, a3fc <att_write_req+0x90>
			net_buf_unref(data.buf);
    a3de:	9803      	ldr	r0, [sp, #12]
    a3e0:	f014 f856 	bl	1e490 <net_buf_unref>
	if (!req) {
    a3e4:	f89d 301c 	ldrb.w	r3, [sp, #28]
    a3e8:	462a      	mov	r2, r5
    a3ea:	4641      	mov	r1, r8
    a3ec:	4630      	mov	r0, r6
    a3ee:	f7ff fcbf 	bl	9d70 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    a3f2:	463c      	mov	r4, r7
}
    a3f4:	4620      	mov	r0, r4
    a3f6:	b009      	add	sp, #36	; 0x24
    a3f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    a3fc:	9a03      	ldr	r2, [sp, #12]
    a3fe:	2a00      	cmp	r2, #0
    a400:	d0f8      	beq.n	a3f4 <att_write_req+0x88>
		(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    a402:	4b07      	ldr	r3, [pc, #28]	; (a420 <att_write_req+0xb4>)
    a404:	9400      	str	r4, [sp, #0]
    a406:	2104      	movs	r1, #4
    a408:	4630      	mov	r0, r6
    a40a:	f01b fb6a 	bl	25ae2 <bt_l2cap_send_cb>
    a40e:	e7f1      	b.n	a3f4 <att_write_req+0x88>
			return BT_ATT_ERR_UNLIKELY;
    a410:	240e      	movs	r4, #14
    a412:	e7ef      	b.n	a3f4 <att_write_req+0x88>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    a414:	2412      	movs	r4, #18
    a416:	e7ed      	b.n	a3f4 <att_write_req+0x88>
		return BT_ATT_ERR_INVALID_HANDLE;
    a418:	2401      	movs	r4, #1
    a41a:	e7eb      	b.n	a3f4 <att_write_req+0x88>
    a41c:	00025ea5 	.word	0x00025ea5
    a420:	00025e73 	.word	0x00025e73

0000a424 <bt_att_req_alloc>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

struct bt_att_req *bt_att_req_alloc(s32_t timeout)
{
    a424:	b513      	push	{r0, r1, r4, lr}
    a426:	4602      	mov	r2, r0
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    a428:	a901      	add	r1, sp, #4
    a42a:	4808      	ldr	r0, [pc, #32]	; (a44c <bt_att_req_alloc+0x28>)
	struct bt_att_req *req = NULL;
    a42c:	2400      	movs	r4, #0
    a42e:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    a430:	f015 fb64 	bl	1fafc <k_mem_slab_alloc>
    a434:	4601      	mov	r1, r0
    a436:	b930      	cbnz	r0, a446 <bt_att_req_alloc+0x22>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    a438:	9801      	ldr	r0, [sp, #4]
    a43a:	2218      	movs	r2, #24
    a43c:	f01a fe53 	bl	250e6 <memset>

	return req;
    a440:	9801      	ldr	r0, [sp, #4]
}
    a442:	b002      	add	sp, #8
    a444:	bd10      	pop	{r4, pc}
		return NULL;
    a446:	4620      	mov	r0, r4
    a448:	e7fb      	b.n	a442 <bt_att_req_alloc+0x1e>
    a44a:	bf00      	nop
    a44c:	20007464 	.word	0x20007464

0000a450 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    a450:	b507      	push	{r0, r1, r2, lr}
    a452:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    a454:	a901      	add	r1, sp, #4
    a456:	4803      	ldr	r0, [pc, #12]	; (a464 <bt_att_req_free+0x14>)
    a458:	f015 fbb4 	bl	1fbc4 <k_mem_slab_free>
}
    a45c:	b003      	add	sp, #12
    a45e:	f85d fb04 	ldr.w	pc, [sp], #4
    a462:	bf00      	nop
    a464:	20007464 	.word	0x20007464

0000a468 <att_handle_rsp>:
{
    a468:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    a46c:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    a46e:	30a8      	adds	r0, #168	; 0xa8
{
    a470:	460e      	mov	r6, r1
    a472:	4617      	mov	r7, r2
    a474:	4698      	mov	r8, r3
	k_delayed_work_cancel(&att->timeout_work);
    a476:	f017 fdf7 	bl	22068 <k_delayed_work_cancel>
	if (!att->req) {
    a47a:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
    a47e:	bb25      	cbnz	r5, a4ca <att_handle_rsp+0x62>
    a480:	4920      	ldr	r1, [pc, #128]	; (a504 <att_handle_rsp+0x9c>)
    a482:	4821      	ldr	r0, [pc, #132]	; (a508 <att_handle_rsp+0xa0>)
    a484:	1a40      	subs	r0, r0, r1
    a486:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
    a488:	0180      	lsls	r0, r0, #6
    a48a:	f040 0102 	orr.w	r1, r0, #2
    a48e:	481f      	ldr	r0, [pc, #124]	; (a50c <att_handle_rsp+0xa4>)
    a490:	f018 ff8c 	bl	233ac <log_0>
Z_GENLIST_IS_EMPTY(slist)
    a494:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
Z_GENLIST_GET(slist, snode)
    a498:	b159      	cbz	r1, a4b2 <att_handle_rsp+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a49a:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
    a49e:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    a4a0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a4a4:	4291      	cmp	r1, r2
    a4a6:	d101      	bne.n	a4ac <att_handle_rsp+0x44>
	list->tail = node;
    a4a8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	att_send_req(att, ATT_REQ(node));
    a4ac:	4620      	mov	r0, r4
    a4ae:	f7ff fb35 	bl	9b1c <att_send_req>
	if (func) {
    a4b2:	b135      	cbz	r5, a4c2 <att_handle_rsp+0x5a>
		func(att->chan.chan.conn, err, pdu, len, params);
    a4b4:	6820      	ldr	r0, [r4, #0]
    a4b6:	f8cd 9000 	str.w	r9, [sp]
    a4ba:	463b      	mov	r3, r7
    a4bc:	4632      	mov	r2, r6
    a4be:	4641      	mov	r1, r8
    a4c0:	47a8      	blx	r5
}
    a4c2:	2000      	movs	r0, #0
    a4c4:	b002      	add	sp, #8
    a4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (att->req == &cancel) {
    a4ca:	4b11      	ldr	r3, [pc, #68]	; (a510 <att_handle_rsp+0xa8>)
    a4cc:	429d      	cmp	r5, r3
    a4ce:	d103      	bne.n	a4d8 <att_handle_rsp+0x70>
		att->req = NULL;
    a4d0:	2500      	movs	r5, #0
    a4d2:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
		goto process;
    a4d6:	e7dd      	b.n	a494 <att_handle_rsp+0x2c>
	if (att->req->buf) {
    a4d8:	6928      	ldr	r0, [r5, #16]
    a4da:	b128      	cbz	r0, a4e8 <att_handle_rsp+0x80>
		net_buf_unref(att->req->buf);
    a4dc:	f013 ffd8 	bl	1e490 <net_buf_unref>
		att->req->buf = NULL;
    a4e0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    a4e4:	2200      	movs	r2, #0
    a4e6:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    a4e8:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
	att->req->func = NULL;
    a4ec:	f04f 0a00 	mov.w	sl, #0
	func = att->req->func;
    a4f0:	6845      	ldr	r5, [r0, #4]
	att->req->func = NULL;
    a4f2:	f8c0 a004 	str.w	sl, [r0, #4]
	params = att->req->user_data;
    a4f6:	f8d0 9014 	ldr.w	r9, [r0, #20]
	att_req_destroy(att->req);
    a4fa:	f01b fd5d 	bl	25fb8 <att_req_destroy>
	att->req = NULL;
    a4fe:	f8c4 a09c 	str.w	sl, [r4, #156]	; 0x9c
    a502:	e7c7      	b.n	a494 <att_handle_rsp+0x2c>
    a504:	00028868 	.word	0x00028868
    a508:	00028870 	.word	0x00028870
    a50c:	0002b8b7 	.word	0x0002b8b7
    a510:	2000071c 	.word	0x2000071c

0000a514 <att_timeout>:
    a514:	4b0b      	ldr	r3, [pc, #44]	; (a544 <att_timeout+0x30>)
    a516:	490c      	ldr	r1, [pc, #48]	; (a548 <att_timeout+0x34>)
    a518:	1ac9      	subs	r1, r1, r3
    a51a:	08c9      	lsrs	r1, r1, #3
{
    a51c:	b510      	push	{r4, lr}
	BT_ERR("ATT Timeout");
    a51e:	0189      	lsls	r1, r1, #6
{
    a520:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    a522:	f041 0101 	orr.w	r1, r1, #1
    a526:	4809      	ldr	r0, [pc, #36]	; (a54c <att_timeout+0x38>)
    a528:	f018 ff40 	bl	233ac <log_0>
	att_reset(att);
    a52c:	f1a4 00a8 	sub.w	r0, r4, #168	; 0xa8
    a530:	f01b fd56 	bl	25fe0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    a534:	f854 0ca8 	ldr.w	r0, [r4, #-168]
    a538:	f001 fa82 	bl	ba40 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    a53c:	2300      	movs	r3, #0
    a53e:	f844 3ca8 	str.w	r3, [r4, #-168]
}
    a542:	bd10      	pop	{r4, pc}
    a544:	00028868 	.word	0x00028868
    a548:	00028870 	.word	0x00028870
    a54c:	0002b8ce 	.word	0x0002b8ce

0000a550 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
    a550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a554:	460d      	mov	r5, r1
    a556:	4614      	mov	r4, r2
    a558:	4698      	mov	r8, r3
	struct bt_att *att;
	int err;

	__ASSERT_NO_MSG(conn);
    a55a:	4607      	mov	r7, r0
    a55c:	b958      	cbnz	r0, a576 <bt_att_send+0x26>
    a55e:	4922      	ldr	r1, [pc, #136]	; (a5e8 <bt_att_send+0x98>)
    a560:	4822      	ldr	r0, [pc, #136]	; (a5ec <bt_att_send+0x9c>)
    a562:	4a23      	ldr	r2, [pc, #140]	; (a5f0 <bt_att_send+0xa0>)
    a564:	f640 03f8 	movw	r3, #2296	; 0x8f8
    a568:	f018 feaf 	bl	232ca <printk>
    a56c:	4820      	ldr	r0, [pc, #128]	; (a5f0 <bt_att_send+0xa0>)
    a56e:	f640 01f8 	movw	r1, #2296	; 0x8f8
    a572:	f018 feed 	bl	23350 <assert_post_action>
	__ASSERT_NO_MSG(buf);
    a576:	b95d      	cbnz	r5, a590 <bt_att_send+0x40>
    a578:	491e      	ldr	r1, [pc, #120]	; (a5f4 <bt_att_send+0xa4>)
    a57a:	481c      	ldr	r0, [pc, #112]	; (a5ec <bt_att_send+0x9c>)
    a57c:	4a1c      	ldr	r2, [pc, #112]	; (a5f0 <bt_att_send+0xa0>)
    a57e:	f640 03f9 	movw	r3, #2297	; 0x8f9
    a582:	f018 fea2 	bl	232ca <printk>
    a586:	481a      	ldr	r0, [pc, #104]	; (a5f0 <bt_att_send+0xa0>)
    a588:	f640 01f9 	movw	r1, #2297	; 0x8f9
    a58c:	f018 fee0 	bl	23350 <assert_post_action>

	att = att_chan_get(conn);
    a590:	4638      	mov	r0, r7
    a592:	f7ff fa6f 	bl	9a74 <att_chan_get>
	if (!att) {
    a596:	4606      	mov	r6, r0
    a598:	b938      	cbnz	r0, a5aa <bt_att_send+0x5a>
		net_buf_unref(buf);
    a59a:	4628      	mov	r0, r5
    a59c:	f013 ff78 	bl	1e490 <net_buf_unref>
		return -ENOTCONN;
    a5a0:	f06f 0538 	mvn.w	r5, #56	; 0x38
		}
		return err;
	}

	return 0;
}
    a5a4:	4628      	mov	r0, r5
    a5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cb) {
    a5aa:	b964      	cbnz	r4, a5c6 <bt_att_send+0x76>
    a5ac:	4621      	mov	r1, r4
    a5ae:	30c8      	adds	r0, #200	; 0xc8
    a5b0:	f017 fab6 	bl	21b20 <z_impl_k_sem_take>
		if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
    a5b4:	2800      	cmp	r0, #0
    a5b6:	da06      	bge.n	a5c6 <bt_att_send+0x76>
			k_fifo_put(&att->tx_queue, buf);
    a5b8:	4629      	mov	r1, r5
    a5ba:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    a5be:	f01d fe8f 	bl	282e0 <k_queue_append>
			return 0;
    a5c2:	4625      	mov	r5, r4
    a5c4:	e7ee      	b.n	a5a4 <bt_att_send+0x54>
	err = att_send(conn, buf, cb, user_data);
    a5c6:	4629      	mov	r1, r5
    a5c8:	4643      	mov	r3, r8
    a5ca:	4622      	mov	r2, r4
    a5cc:	4638      	mov	r0, r7
    a5ce:	f7ff f9bf 	bl	9950 <att_send>
	if (err) {
    a5d2:	4605      	mov	r5, r0
    a5d4:	2800      	cmp	r0, #0
    a5d6:	d0e5      	beq.n	a5a4 <bt_att_send+0x54>
		if (!cb) {
    a5d8:	2c00      	cmp	r4, #0
    a5da:	d1e3      	bne.n	a5a4 <bt_att_send+0x54>
	z_impl_k_sem_give(sem);
    a5dc:	f106 00c8 	add.w	r0, r6, #200	; 0xc8
    a5e0:	f017 fa5a 	bl	21a98 <z_impl_k_sem_give>
}
    a5e4:	e7de      	b.n	a5a4 <bt_att_send+0x54>
    a5e6:	bf00      	nop
    a5e8:	0002f157 	.word	0x0002f157
    a5ec:	000297e6 	.word	0x000297e6
    a5f0:	0002b737 	.word	0x0002b737
    a5f4:	0002f7ee 	.word	0x0002f7ee

0000a5f8 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    a5f8:	b538      	push	{r3, r4, r5, lr}
    a5fa:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
    a5fc:	4605      	mov	r5, r0
    a5fe:	b958      	cbnz	r0, a618 <bt_att_req_send+0x20>
    a600:	491c      	ldr	r1, [pc, #112]	; (a674 <bt_att_req_send+0x7c>)
    a602:	481d      	ldr	r0, [pc, #116]	; (a678 <bt_att_req_send+0x80>)
    a604:	4a1d      	ldr	r2, [pc, #116]	; (a67c <bt_att_req_send+0x84>)
    a606:	f640 131b 	movw	r3, #2331	; 0x91b
    a60a:	f018 fe5e 	bl	232ca <printk>
    a60e:	481b      	ldr	r0, [pc, #108]	; (a67c <bt_att_req_send+0x84>)
    a610:	f640 111b 	movw	r1, #2331	; 0x91b
    a614:	f018 fe9c 	bl	23350 <assert_post_action>
	__ASSERT_NO_MSG(req);
    a618:	b95c      	cbnz	r4, a632 <bt_att_req_send+0x3a>
    a61a:	4919      	ldr	r1, [pc, #100]	; (a680 <bt_att_req_send+0x88>)
    a61c:	4816      	ldr	r0, [pc, #88]	; (a678 <bt_att_req_send+0x80>)
    a61e:	4a17      	ldr	r2, [pc, #92]	; (a67c <bt_att_req_send+0x84>)
    a620:	f640 131c 	movw	r3, #2332	; 0x91c
    a624:	f018 fe51 	bl	232ca <printk>
    a628:	4814      	ldr	r0, [pc, #80]	; (a67c <bt_att_req_send+0x84>)
    a62a:	f640 111c 	movw	r1, #2332	; 0x91c
    a62e:	f018 fe8f 	bl	23350 <assert_post_action>

	att = att_chan_get(conn);
    a632:	4628      	mov	r0, r5
    a634:	f7ff fa1e 	bl	9a74 <att_chan_get>
	if (!att) {
    a638:	4605      	mov	r5, r0
    a63a:	b930      	cbnz	r0, a64a <bt_att_req_send+0x52>
		net_buf_unref(req->buf);
    a63c:	6920      	ldr	r0, [r4, #16]
    a63e:	f013 ff27 	bl	1e490 <net_buf_unref>
		req->buf = NULL;
    a642:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
    a644:	f06f 0038 	mvn.w	r0, #56	; 0x38
		sys_slist_append(&att->reqs, &req->node);
		return 0;
	}

	return att_send_req(att, req);
}
    a648:	bd38      	pop	{r3, r4, r5, pc}
	if (att->req) {
    a64a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    a64e:	b163      	cbz	r3, a66a <bt_att_req_send+0x72>
	parent->next = child;
    a650:	2000      	movs	r0, #0
    a652:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    a654:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
    a658:	b91b      	cbnz	r3, a662 <bt_att_req_send+0x6a>
	list->head = node;
    a65a:	e9c5 4428 	strd	r4, r4, [r5, #160]	; 0xa0
		return 0;
    a65e:	4618      	mov	r0, r3
}
    a660:	e7f2      	b.n	a648 <bt_att_req_send+0x50>
	parent->next = child;
    a662:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a664:	f8c5 40a4 	str.w	r4, [r5, #164]	; 0xa4
}
    a668:	e7ee      	b.n	a648 <bt_att_req_send+0x50>
	return att_send_req(att, req);
    a66a:	4621      	mov	r1, r4
}
    a66c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return att_send_req(att, req);
    a670:	f7ff ba54 	b.w	9b1c <att_send_req>
    a674:	0002f157 	.word	0x0002f157
    a678:	000297e6 	.word	0x000297e6
    a67c:	0002b737 	.word	0x0002b737
    a680:	0002b7ff 	.word	0x0002b7ff

0000a684 <sc_store>:

	return NULL;
}

static void sc_store(struct gatt_sc_cfg *cfg)
{
    a684:	b570      	push	{r4, r5, r6, lr}
	char key[BT_SETTINGS_KEY_MAX];
	int err;

	if (cfg->id) {
    a686:	4605      	mov	r5, r0
{
    a688:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    a68a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    a68e:	4604      	mov	r4, r0
	if (cfg->id) {
    a690:	b1fa      	cbz	r2, a6d2 <sc_store+0x4e>
		char id_str[4];

		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    a692:	ae02      	add	r6, sp, #8
    a694:	2104      	movs	r1, #4
    a696:	4630      	mov	r0, r6
    a698:	f018 fc5b 	bl	22f52 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    a69c:	9600      	str	r6, [sp, #0]
				       &cfg->peer, id_str);
	} else {
		bt_settings_encode_key(key, sizeof(key), "sc",
    a69e:	4a0e      	ldr	r2, [pc, #56]	; (a6d8 <sc_store+0x54>)
    a6a0:	462b      	mov	r3, r5
    a6a2:	2124      	movs	r1, #36	; 0x24
    a6a4:	a803      	add	r0, sp, #12
    a6a6:	f7fb fdcf 	bl	6248 <bt_settings_encode_key>
				       &cfg->peer, NULL);
	}

	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    a6aa:	f104 0108 	add.w	r1, r4, #8
    a6ae:	2204      	movs	r2, #4
    a6b0:	a803      	add	r0, sp, #12
    a6b2:	f7f8 ffe3 	bl	367c <settings_save_one>
	if (err) {
    a6b6:	4601      	mov	r1, r0
    a6b8:	b148      	cbz	r0, a6ce <sc_store+0x4a>
    a6ba:	4a08      	ldr	r2, [pc, #32]	; (a6dc <sc_store+0x58>)
    a6bc:	4b08      	ldr	r3, [pc, #32]	; (a6e0 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
    a6be:	4809      	ldr	r0, [pc, #36]	; (a6e4 <sc_store+0x60>)
    a6c0:	1ad2      	subs	r2, r2, r3
    a6c2:	08d2      	lsrs	r2, r2, #3
    a6c4:	0192      	lsls	r2, r2, #6
    a6c6:	f042 0201 	orr.w	r2, r2, #1
    a6ca:	f018 fe7c 	bl	233c6 <log_1>
	}

	BT_DBG("stored SC for %s (%s, 0x%04x-0x%04x)",
	       bt_addr_le_str(&cfg->peer), log_strdup(key), cfg->data.start,
	       cfg->data.end);
}
    a6ce:	b00c      	add	sp, #48	; 0x30
    a6d0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    a6d2:	9200      	str	r2, [sp, #0]
    a6d4:	e7e3      	b.n	a69e <sc_store+0x1a>
    a6d6:	bf00      	nop
    a6d8:	0002bb95 	.word	0x0002bb95
    a6dc:	00028920 	.word	0x00028920
    a6e0:	00028868 	.word	0x00028868
    a6e4:	0002b8e1 	.word	0x0002b8e1

0000a6e8 <sc_clear>:

static void sc_clear(struct gatt_sc_cfg *cfg)
{
    a6e8:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("peer %s", bt_addr_le_str(&cfg->peer));

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bool modified = false;

		if (cfg->data.start || cfg->data.end) {
    a6ea:	8903      	ldrh	r3, [r0, #8]
{
    a6ec:	b08c      	sub	sp, #48	; 0x30
    a6ee:	4604      	mov	r4, r0
		if (cfg->data.start || cfg->data.end) {
    a6f0:	b90b      	cbnz	r3, a6f6 <sc_clear+0xe>
    a6f2:	8943      	ldrh	r3, [r0, #10]
    a6f4:	b31b      	cbz	r3, a73e <sc_clear+0x56>
			modified = true;
		}

		if (modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    a6f6:	4625      	mov	r5, r4
    a6f8:	f815 0b01 	ldrb.w	r0, [r5], #1
    a6fc:	4629      	mov	r1, r5
    a6fe:	f01b f888 	bl	25812 <bt_addr_le_is_bonded>
    a702:	b1e0      	cbz	r0, a73e <sc_clear+0x56>
			char key[BT_SETTINGS_KEY_MAX];
			int err;

			if (cfg->id) {
    a704:	7822      	ldrb	r2, [r4, #0]
    a706:	b30a      	cbz	r2, a74c <sc_clear+0x64>
				char id_str[4];

				u8_to_dec(id_str, sizeof(id_str), cfg->id);
    a708:	ae02      	add	r6, sp, #8
    a70a:	2104      	movs	r1, #4
    a70c:	4630      	mov	r0, r6
    a70e:	f018 fc20 	bl	22f52 <u8_to_dec>
				bt_settings_encode_key(key, sizeof(key), "sc",
    a712:	9600      	str	r6, [sp, #0]
						       &cfg->peer, id_str);
			} else {
				bt_settings_encode_key(key, sizeof(key), "sc",
    a714:	2124      	movs	r1, #36	; 0x24
    a716:	4a0e      	ldr	r2, [pc, #56]	; (a750 <sc_clear+0x68>)
    a718:	462b      	mov	r3, r5
    a71a:	a803      	add	r0, sp, #12
    a71c:	f7fb fd94 	bl	6248 <bt_settings_encode_key>
						       &cfg->peer, NULL);
			}

			err = settings_delete(key);
    a720:	a803      	add	r0, sp, #12
    a722:	f019 f9f9 	bl	23b18 <settings_delete>
			if (err) {
    a726:	4601      	mov	r1, r0
    a728:	b148      	cbz	r0, a73e <sc_clear+0x56>
    a72a:	4a0a      	ldr	r2, [pc, #40]	; (a754 <sc_clear+0x6c>)
    a72c:	4b0a      	ldr	r3, [pc, #40]	; (a758 <sc_clear+0x70>)
				BT_ERR("failed to delete SC (err %d)", err);
    a72e:	480b      	ldr	r0, [pc, #44]	; (a75c <sc_clear+0x74>)
    a730:	1ad2      	subs	r2, r2, r3
    a732:	08d2      	lsrs	r2, r2, #3
    a734:	0192      	lsls	r2, r2, #6
    a736:	f042 0201 	orr.w	r2, r2, #1
    a73a:	f018 fe44 	bl	233c6 <log_1>
				       log_strdup(key));
			}
		}
	}

	memset(cfg, 0, sizeof(*cfg));
    a73e:	220c      	movs	r2, #12
    a740:	2100      	movs	r1, #0
    a742:	4620      	mov	r0, r4
    a744:	f01a fccf 	bl	250e6 <memset>
}
    a748:	b00c      	add	sp, #48	; 0x30
    a74a:	bd70      	pop	{r4, r5, r6, pc}
				bt_settings_encode_key(key, sizeof(key), "sc",
    a74c:	9200      	str	r2, [sp, #0]
    a74e:	e7e1      	b.n	a714 <sc_clear+0x2c>
    a750:	0002bb95 	.word	0x0002bb95
    a754:	00028920 	.word	0x00028920
    a758:	00028868 	.word	0x00028868
    a75c:	0002b8fd 	.word	0x0002b8fd

0000a760 <find_static_attr>:

	return BT_GATT_ITER_CONTINUE;
}

static u16_t find_static_attr(const struct bt_gatt_attr *attr)
{
    a760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u16_t handle = 1;

	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a764:	4f18      	ldr	r7, [pc, #96]	; (a7c8 <find_static_attr+0x68>)
    a766:	4c19      	ldr	r4, [pc, #100]	; (a7cc <find_static_attr+0x6c>)
    a768:	f8df 9070 	ldr.w	r9, [pc, #112]	; a7dc <find_static_attr+0x7c>
{
    a76c:	4605      	mov	r5, r0
	u16_t handle = 1;
    a76e:	2601      	movs	r6, #1
    a770:	46b8      	mov	r8, r7
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a772:	f1a4 0a08 	sub.w	sl, r4, #8
    a776:	45ba      	cmp	sl, r7
    a778:	d90e      	bls.n	a798 <find_static_attr+0x38>
    a77a:	4915      	ldr	r1, [pc, #84]	; (a7d0 <find_static_attr+0x70>)
    a77c:	4815      	ldr	r0, [pc, #84]	; (a7d4 <find_static_attr+0x74>)
    a77e:	f240 438c 	movw	r3, #1164	; 0x48c
    a782:	464a      	mov	r2, r9
    a784:	f018 fda1 	bl	232ca <printk>
    a788:	4813      	ldr	r0, [pc, #76]	; (a7d8 <find_static_attr+0x78>)
    a78a:	f018 fd9e 	bl	232ca <printk>
    a78e:	f240 418c 	movw	r1, #1164	; 0x48c
    a792:	4648      	mov	r0, r9
    a794:	f018 fddc 	bl	23350 <assert_post_action>
    a798:	45c2      	cmp	sl, r8
    a79a:	d212      	bcs.n	a7c2 <find_static_attr+0x62>
    a79c:	f854 cc04 	ldr.w	ip, [r4, #-4]
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    a7a0:	2100      	movs	r1, #0
			if (attr == &static_svc->attrs[i]) {
    a7a2:	2214      	movs	r2, #20
    a7a4:	e006      	b.n	a7b4 <find_static_attr+0x54>
    a7a6:	f854 3c08 	ldr.w	r3, [r4, #-8]
    a7aa:	fb02 3301 	mla	r3, r2, r1, r3
    a7ae:	429d      	cmp	r5, r3
    a7b0:	d008      	beq.n	a7c4 <find_static_attr+0x64>
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    a7b2:	3101      	adds	r1, #1
    a7b4:	1873      	adds	r3, r6, r1
    a7b6:	4561      	cmp	r1, ip
    a7b8:	b298      	uxth	r0, r3
    a7ba:	d1f4      	bne.n	a7a6 <find_static_attr+0x46>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a7bc:	3408      	adds	r4, #8
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    a7be:	4606      	mov	r6, r0
    a7c0:	e7d7      	b.n	a772 <find_static_attr+0x12>
				return handle;
			}
		}
	}

	return 0;
    a7c2:	2000      	movs	r0, #0
}
    a7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7c8:	0002882c 	.word	0x0002882c
    a7cc:	00028824 	.word	0x00028824
    a7d0:	0002b94a 	.word	0x0002b94a
    a7d4:	000297e6 	.word	0x000297e6
    a7d8:	00029c4a 	.word	0x00029c4a
    a7dc:	0002b91a 	.word	0x0002b91a

0000a7e0 <gatt_notify>:
	};
};

static int gatt_notify(struct bt_conn *conn, u16_t handle,
		       struct bt_gatt_notify_params *params)
{
    a7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a7e4:	4614      	mov	r4, r2
		return -EAGAIN;
	}
#endif

	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
				sizeof(*nfy) + params->len);
    a7e6:	8992      	ldrh	r2, [r2, #12]
{
    a7e8:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    a7ea:	3202      	adds	r2, #2
    a7ec:	211b      	movs	r1, #27
{
    a7ee:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    a7f0:	f7ff fa48 	bl	9c84 <bt_att_create_pdu>
	if (!buf) {
    a7f4:	4605      	mov	r5, r0
    a7f6:	b1c8      	cbz	r0, a82c <gatt_notify+0x4c>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
    a7f8:	f100 0908 	add.w	r9, r0, #8
    a7fc:	2102      	movs	r1, #2
    a7fe:	4648      	mov	r0, r9
    a800:	f013 ff0c 	bl	1e61c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    a804:	4606      	mov	r6, r0

	net_buf_add(buf, params->len);
    a806:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
    a808:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
    a80c:	4648      	mov	r0, r9
    a80e:	f013 ff05 	bl	1e61c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    a812:	89a2      	ldrh	r2, [r4, #12]
    a814:	68a1      	ldr	r1, [r4, #8]
    a816:	4630      	mov	r0, r6
    a818:	f01a fc3a 	bl	25090 <memcpy>

	return bt_att_send(conn, buf, params->func, params->user_data);
    a81c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    a820:	4629      	mov	r1, r5
    a822:	4638      	mov	r0, r7
}
    a824:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    a828:	f7ff be92 	b.w	a550 <bt_att_send>
    a82c:	4b06      	ldr	r3, [pc, #24]	; (a848 <gatt_notify+0x68>)
    a82e:	4907      	ldr	r1, [pc, #28]	; (a84c <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    a830:	4807      	ldr	r0, [pc, #28]	; (a850 <gatt_notify+0x70>)
    a832:	1ac9      	subs	r1, r1, r3
    a834:	08c9      	lsrs	r1, r1, #3
    a836:	0189      	lsls	r1, r1, #6
    a838:	f041 0102 	orr.w	r1, r1, #2
    a83c:	f018 fdb6 	bl	233ac <log_0>
}
    a840:	f06f 000b 	mvn.w	r0, #11
    a844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a848:	00028868 	.word	0x00028868
    a84c:	00028920 	.word	0x00028920
    a850:	0002b979 	.word	0x0002b979

0000a854 <gatt_send.constprop.0>:
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
}

static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    a854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a858:	4606      	mov	r6, r0
    a85a:	4688      	mov	r8, r1
    a85c:	4617      	mov	r7, r2
		     bt_att_func_t func, void *params,
		     bt_att_destroy_t destroy)
{
	int err;

	if (params) {
    a85e:	461c      	mov	r4, r3
    a860:	b323      	cbz	r3, a8ac <gatt_send.constprop.0+0x58>
		struct bt_att_req *req;

		/* Allocate new request */
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    a862:	f247 5030 	movw	r0, #30000	; 0x7530
    a866:	f7ff fddd 	bl	a424 <bt_att_req_alloc>
		if (!req) {
    a86a:	4605      	mov	r5, r0
    a86c:	b328      	cbz	r0, a8ba <gatt_send.constprop.0+0x66>
			return -ENOMEM;
		}

		req->buf = buf;
		req->func = func;
		req->destroy = destroy;
    a86e:	2300      	movs	r3, #0
		req->user_data = params;
    a870:	6144      	str	r4, [r0, #20]
		req->buf = buf;
    a872:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    a876:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    a878:	6083      	str	r3, [r0, #8]

		err = bt_att_req_send(conn, req);
    a87a:	4601      	mov	r1, r0
    a87c:	4630      	mov	r0, r6
    a87e:	f7ff febb 	bl	a5f8 <bt_att_req_send>
		if (err) {
    a882:	4604      	mov	r4, r0
    a884:	b918      	cbnz	r0, a88e <gatt_send.constprop.0+0x3a>
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    a886:	2400      	movs	r4, #0
	if (err) {
		BT_ERR("Error sending ATT PDU: %d", err);
	}

	return err;
}
    a888:	4620      	mov	r0, r4
    a88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_att_req_free(req);
    a88e:	4628      	mov	r0, r5
    a890:	f7ff fdde 	bl	a450 <bt_att_req_free>
    a894:	4b0a      	ldr	r3, [pc, #40]	; (a8c0 <gatt_send.constprop.0+0x6c>)
    a896:	4a0b      	ldr	r2, [pc, #44]	; (a8c4 <gatt_send.constprop.0+0x70>)
		BT_ERR("Error sending ATT PDU: %d", err);
    a898:	480b      	ldr	r0, [pc, #44]	; (a8c8 <gatt_send.constprop.0+0x74>)
    a89a:	1ad2      	subs	r2, r2, r3
    a89c:	08d2      	lsrs	r2, r2, #3
    a89e:	0192      	lsls	r2, r2, #6
    a8a0:	f042 0201 	orr.w	r2, r2, #1
    a8a4:	4621      	mov	r1, r4
    a8a6:	f018 fd8e 	bl	233c6 <log_1>
    a8aa:	e7ed      	b.n	a888 <gatt_send.constprop.0+0x34>
		err = bt_att_send(conn, buf, NULL, NULL);
    a8ac:	461a      	mov	r2, r3
    a8ae:	f7ff fe4f 	bl	a550 <bt_att_send>
	if (err) {
    a8b2:	4604      	mov	r4, r0
    a8b4:	2800      	cmp	r0, #0
    a8b6:	d0e6      	beq.n	a886 <gatt_send.constprop.0+0x32>
    a8b8:	e7ec      	b.n	a894 <gatt_send.constprop.0+0x40>
			return -ENOMEM;
    a8ba:	f06f 040b 	mvn.w	r4, #11
    a8be:	e7e3      	b.n	a888 <gatt_send.constprop.0+0x34>
    a8c0:	00028868 	.word	0x00028868
    a8c4:	00028920 	.word	0x00028920
    a8c8:	0002b9a2 	.word	0x0002b9a2

0000a8cc <gatt_indicate>:

static int gatt_indicate(struct bt_conn *conn, u16_t handle,
			 struct bt_gatt_indicate_params *params)
{
    a8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a8d0:	4614      	mov	r4, r2
		return -EAGAIN;
	}
#endif

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    a8d2:	8a12      	ldrh	r2, [r2, #16]
{
    a8d4:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    a8d6:	3202      	adds	r2, #2
    a8d8:	211d      	movs	r1, #29
{
    a8da:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    a8dc:	f7ff f9d2 	bl	9c84 <bt_att_create_pdu>
	if (!buf) {
    a8e0:	4605      	mov	r5, r0
    a8e2:	b1e8      	cbz	r0, a920 <gatt_indicate+0x54>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	ind = net_buf_add(buf, sizeof(*ind));
    a8e4:	f100 0808 	add.w	r8, r0, #8
    a8e8:	2102      	movs	r1, #2
    a8ea:	4640      	mov	r0, r8
    a8ec:	f013 fe96 	bl	1e61c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    a8f0:	4606      	mov	r6, r0

	net_buf_add(buf, params->len);
    a8f2:	8a21      	ldrh	r1, [r4, #16]
	ind->handle = sys_cpu_to_le16(handle);
    a8f4:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    a8f8:	4640      	mov	r0, r8
    a8fa:	f013 fe8f 	bl	1e61c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    a8fe:	8a22      	ldrh	r2, [r4, #16]
    a900:	68e1      	ldr	r1, [r4, #12]
    a902:	4630      	mov	r0, r6
    a904:	f01a fbc4 	bl	25090 <memcpy>

	if (!params->func) {
    a908:	68a3      	ldr	r3, [r4, #8]
    a90a:	b933      	cbnz	r3, a91a <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    a90c:	461a      	mov	r2, r3
	}

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    a90e:	4629      	mov	r1, r5
    a910:	4638      	mov	r0, r7
}
    a912:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    a916:	f7ff bf9d 	b.w	a854 <gatt_send.constprop.0>
    a91a:	4a08      	ldr	r2, [pc, #32]	; (a93c <gatt_indicate+0x70>)
    a91c:	4623      	mov	r3, r4
    a91e:	e7f6      	b.n	a90e <gatt_indicate+0x42>
    a920:	4b07      	ldr	r3, [pc, #28]	; (a940 <gatt_indicate+0x74>)
    a922:	4908      	ldr	r1, [pc, #32]	; (a944 <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
    a924:	4808      	ldr	r0, [pc, #32]	; (a948 <gatt_indicate+0x7c>)
    a926:	1ac9      	subs	r1, r1, r3
    a928:	08c9      	lsrs	r1, r1, #3
    a92a:	0189      	lsls	r1, r1, #6
    a92c:	f041 0102 	orr.w	r1, r1, #2
    a930:	f018 fd3c 	bl	233ac <log_0>
}
    a934:	f06f 000b 	mvn.w	r0, #11
    a938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a93c:	000260a7 	.word	0x000260a7
    a940:	00028868 	.word	0x00028868
    a944:	00028920 	.word	0x00028920
    a948:	0002b9bc 	.word	0x0002b9bc

0000a94c <ccc_save>:
	struct ccc_store store[CCC_STORE_MAX];
	size_t count;
};

static u8_t ccc_save(const struct bt_gatt_attr *attr, void *user_data)
{
    a94c:	b538      	push	{r3, r4, r5, lr}
	struct ccc_save *save = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a94e:	6882      	ldr	r2, [r0, #8]
    a950:	4b0b      	ldr	r3, [pc, #44]	; (a980 <ccc_save+0x34>)
    a952:	429a      	cmp	r2, r3
{
    a954:	4605      	mov	r5, r0
    a956:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    a958:	d110      	bne.n	a97c <ccc_save+0x30>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    a95a:	790a      	ldrb	r2, [r1, #4]
    a95c:	68c0      	ldr	r0, [r0, #12]
    a95e:	6809      	ldr	r1, [r1, #0]
    a960:	f01b fbcd 	bl	260fe <ccc_find_cfg>
	if (!cfg) {
    a964:	b150      	cbz	r0, a97c <ccc_save+0x30>
	}

	BT_DBG("Storing CCCs handle 0x%04x value 0x%04x", attr->handle,
	       cfg->value);

	save->store[save->count].handle = attr->handle;
    a966:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    a96a:	8a29      	ldrh	r1, [r5, #16]
    a96c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->store[save->count].value = cfg->value;
	save->count++;
    a970:	3301      	adds	r3, #1
	save->store[save->count].handle = attr->handle;
    a972:	8111      	strh	r1, [r2, #8]
	save->store[save->count].value = cfg->value;
    a974:	8901      	ldrh	r1, [r0, #8]
    a976:	8151      	strh	r1, [r2, #10]
	save->count++;
    a978:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

	return BT_GATT_ITER_CONTINUE;
}
    a97c:	2001      	movs	r0, #1
    a97e:	bd38      	pop	{r3, r4, r5, pc}
    a980:	0000ac85 	.word	0x0000ac85

0000a984 <find_sc_cfg>:
{
    a984:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    a986:	4c06      	ldr	r4, [pc, #24]	; (a9a0 <find_sc_cfg+0x1c>)
    a988:	7823      	ldrb	r3, [r4, #0]
    a98a:	4283      	cmp	r3, r0
    a98c:	d104      	bne.n	a998 <find_sc_cfg+0x14>
	return memcmp(a, b, sizeof(*a));
    a98e:	2207      	movs	r2, #7
    a990:	1c60      	adds	r0, r4, #1
    a992:	f01a fb6d 	bl	25070 <memcmp>
    a996:	b108      	cbz	r0, a99c <find_sc_cfg+0x18>
	return NULL;
    a998:	2000      	movs	r0, #0
}
    a99a:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    a99c:	4620      	mov	r0, r4
    a99e:	e7fc      	b.n	a99a <find_sc_cfg+0x16>
    a9a0:	20001cc2 	.word	0x20001cc2

0000a9a4 <ccc_load>:
{
    a9a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a9a6:	4a22      	ldr	r2, [pc, #136]	; (aa30 <ccc_load+0x8c>)
{
    a9a8:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    a9aa:	6881      	ldr	r1, [r0, #8]
    a9ac:	4291      	cmp	r1, r2
{
    a9ae:	4603      	mov	r3, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    a9b0:	d002      	beq.n	a9b8 <ccc_load+0x14>
		return BT_GATT_ITER_CONTINUE;
    a9b2:	2001      	movs	r0, #1
}
    a9b4:	b002      	add	sp, #8
    a9b6:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    a9b8:	68a2      	ldr	r2, [r4, #8]
	ccc = attr->user_data;
    a9ba:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
    a9bc:	b94a      	cbnz	r2, a9d2 <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, addr, id);
    a9be:	7922      	ldrb	r2, [r4, #4]
    a9c0:	6821      	ldr	r1, [r4, #0]
    a9c2:	4630      	mov	r0, r6
    a9c4:	f01b fb9b 	bl	260fe <ccc_find_cfg>
	if (!cfg) {
    a9c8:	2800      	cmp	r0, #0
    a9ca:	d0f2      	beq.n	a9b2 <ccc_load+0xe>
	clear_ccc_cfg(cfg);
    a9cc:	f01b fbcc 	bl	26168 <clear_ccc_cfg>
    a9d0:	e7ef      	b.n	a9b2 <ccc_load+0xe>
	} else if (!load->count) {
    a9d2:	68e0      	ldr	r0, [r4, #12]
    a9d4:	2800      	cmp	r0, #0
    a9d6:	d0ed      	beq.n	a9b4 <ccc_load+0x10>
	if (load->entry->handle != attr->handle) {
    a9d8:	8812      	ldrh	r2, [r2, #0]
    a9da:	8a1b      	ldrh	r3, [r3, #16]
    a9dc:	429a      	cmp	r2, r3
    a9de:	d00a      	beq.n	a9f6 <ccc_load+0x52>
		if (load->entry->handle < attr->handle) {
    a9e0:	d2e7      	bcs.n	a9b2 <ccc_load+0xe>
	load->count--;
    a9e2:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    a9e4:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    a9e6:	3801      	subs	r0, #1
	load->entry++;
    a9e8:	3304      	adds	r3, #4
	load->count--;
    a9ea:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    a9ec:	3800      	subs	r0, #0
	load->entry++;
    a9ee:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    a9f0:	bf18      	it	ne
    a9f2:	2001      	movne	r0, #1
    a9f4:	e7de      	b.n	a9b4 <ccc_load+0x10>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    a9f6:	7922      	ldrb	r2, [r4, #4]
    a9f8:	6821      	ldr	r1, [r4, #0]
    a9fa:	4630      	mov	r0, r6
    a9fc:	f01b fb7f 	bl	260fe <ccc_find_cfg>
	if (!cfg) {
    aa00:	4605      	mov	r5, r0
    aa02:	b988      	cbnz	r0, aa28 <ccc_load+0x84>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    aa04:	9000      	str	r0, [sp, #0]
    aa06:	4602      	mov	r2, r0
    aa08:	f8cd 0003 	str.w	r0, [sp, #3]
    aa0c:	4669      	mov	r1, sp
    aa0e:	4630      	mov	r0, r6
    aa10:	f01b fb75 	bl	260fe <ccc_find_cfg>
		if (!cfg) {
    aa14:	4605      	mov	r5, r0
    aa16:	2800      	cmp	r0, #0
    aa18:	d0e3      	beq.n	a9e2 <ccc_load+0x3e>
	memcpy(dst, src, sizeof(*dst));
    aa1a:	6821      	ldr	r1, [r4, #0]
    aa1c:	2207      	movs	r2, #7
    aa1e:	3001      	adds	r0, #1
    aa20:	f01a fb36 	bl	25090 <memcpy>
		cfg->id = load->addr_with_id.id;
    aa24:	7923      	ldrb	r3, [r4, #4]
    aa26:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    aa28:	68a3      	ldr	r3, [r4, #8]
    aa2a:	885b      	ldrh	r3, [r3, #2]
    aa2c:	812b      	strh	r3, [r5, #8]
    aa2e:	e7d8      	b.n	a9e2 <ccc_load+0x3e>
    aa30:	0000ac85 	.word	0x0000ac85

0000aa34 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    aa34:	490d      	ldr	r1, [pc, #52]	; (aa6c <sc_indicate_rsp+0x38>)
    aa36:	f3bf 8f5b 	dmb	ish
    aa3a:	f101 0338 	add.w	r3, r1, #56	; 0x38
    aa3e:	e853 2f00 	ldrex	r2, [r3]
    aa42:	f022 0202 	bic.w	r2, r2, #2
    aa46:	e843 2000 	strex	r0, r2, [r3]
    aa4a:	2800      	cmp	r0, #0
    aa4c:	d1f7      	bne.n	aa3e <sc_indicate_rsp+0xa>
    aa4e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    aa52:	f3bf 8f5b 	dmb	ish
    aa56:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    aa58:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    aa5c:	07db      	lsls	r3, r3, #31
    aa5e:	d504      	bpl.n	aa6a <sc_indicate_rsp+0x36>
    aa60:	4803      	ldr	r0, [pc, #12]	; (aa70 <sc_indicate_rsp+0x3c>)
    aa62:	2200      	movs	r2, #0
    aa64:	3118      	adds	r1, #24
    aa66:	f017 ba6f 	b.w	21f48 <k_delayed_work_submit_to_queue>
}
    aa6a:	4770      	bx	lr
    aa6c:	2000073c 	.word	0x2000073c
    aa70:	20001c08 	.word	0x20001c08

0000aa74 <read_ppcp>:
{
    aa74:	b513      	push	{r0, r1, r4, lr}
    aa76:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    aa7a:	4c0b      	ldr	r4, [pc, #44]	; (aaa8 <read_ppcp+0x34>)
{
    aa7c:	4610      	mov	r0, r2
	if (offset > value_len) {
    aa7e:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    aa80:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    aa84:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    aa88:	d80b      	bhi.n	aaa2 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    aa8a:	f1c1 0408 	rsb	r4, r1, #8
    aa8e:	429c      	cmp	r4, r3
    aa90:	bfa8      	it	ge
    aa92:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    aa94:	4622      	mov	r2, r4
    aa96:	4469      	add	r1, sp
    aa98:	f01a fafa 	bl	25090 <memcpy>
}
    aa9c:	4620      	mov	r0, r4
    aa9e:	b002      	add	sp, #8
    aaa0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    aaa2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    aaa6:	e7f9      	b.n	aa9c <read_ppcp+0x28>
    aaa8:	00280018 	.word	0x00280018

0000aaac <disconnected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    aaac:	6882      	ldr	r2, [r0, #8]
    aaae:	4b20      	ldr	r3, [pc, #128]	; (ab30 <disconnected_cb+0x84>)
    aab0:	429a      	cmp	r2, r3
{
    aab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aab6:	4606      	mov	r6, r0
    aab8:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    aaba:	d102      	bne.n	aac2 <disconnected_cb+0x16>
	ccc = attr->user_data;
    aabc:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    aabe:	8963      	ldrh	r3, [r4, #10]
    aac0:	b9cb      	cbnz	r3, aaf6 <disconnected_cb+0x4a>
}
    aac2:	2001      	movs	r0, #1
    aac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    aac8:	f105 0874 	add.w	r8, r5, #116	; 0x74
    aacc:	7a28      	ldrb	r0, [r5, #8]
    aace:	4641      	mov	r1, r8
    aad0:	f01a fe9f 	bl	25812 <bt_addr_le_is_bonded>
    aad4:	b948      	cbnz	r0, aaea <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    aad6:	4b17      	ldr	r3, [pc, #92]	; (ab34 <disconnected_cb+0x88>)
    aad8:	429c      	cmp	r4, r3
    aada:	d102      	bne.n	aae2 <disconnected_cb+0x36>
					sc_clear_by_conn(conn);
    aadc:	4628      	mov	r0, r5
    aade:	f01b fb1d 	bl	2611c <sc_clear_by_conn>
				clear_ccc_cfg(cfg);
    aae2:	4620      	mov	r0, r4
    aae4:	f01b fb40 	bl	26168 <clear_ccc_cfg>
	if (!value_used) {
    aae8:	e01a      	b.n	ab20 <disconnected_cb+0x74>
    aaea:	2207      	movs	r2, #7
    aaec:	4641      	mov	r1, r8
    aaee:	4638      	mov	r0, r7
    aaf0:	f01a face 	bl	25090 <memcpy>
    aaf4:	e014      	b.n	ab20 <disconnected_cb+0x74>
		if (!cfg->value) {
    aaf6:	8923      	ldrh	r3, [r4, #8]
    aaf8:	b193      	cbz	r3, ab20 <disconnected_cb+0x74>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    aafa:	4627      	mov	r7, r4
    aafc:	4628      	mov	r0, r5
    aafe:	f817 1b01 	ldrb.w	r1, [r7], #1
    ab02:	463a      	mov	r2, r7
    ab04:	f01a ff24 	bl	25950 <bt_conn_is_peer_addr_le>
    ab08:	2800      	cmp	r0, #0
    ab0a:	d1dd      	bne.n	aac8 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    ab0c:	7820      	ldrb	r0, [r4, #0]
    ab0e:	4639      	mov	r1, r7
    ab10:	f7fe face 	bl	90b0 <bt_conn_lookup_addr_le>
			if (tmp) {
    ab14:	b120      	cbz	r0, ab20 <disconnected_cb+0x74>
				if (tmp->state == BT_CONN_CONNECTED) {
    ab16:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    ab18:	f01a ff41 	bl	2599e <bt_conn_unref>
	if (!value_used) {
    ab1c:	2d06      	cmp	r5, #6
    ab1e:	d0d0      	beq.n	aac2 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    ab20:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    ab22:	2100      	movs	r1, #0
    ab24:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    ab26:	2b00      	cmp	r3, #0
    ab28:	d0cb      	beq.n	aac2 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    ab2a:	4630      	mov	r0, r6
    ab2c:	4798      	blx	r3
    ab2e:	e7c8      	b.n	aac2 <disconnected_cb+0x16>
    ab30:	0000ac85 	.word	0x0000ac85
    ab34:	20006aa0 	.word	0x20006aa0

0000ab38 <sc_save>:
{
    ab38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ab3c:	4680      	mov	r8, r0
    ab3e:	460f      	mov	r7, r1
    ab40:	4616      	mov	r6, r2
    ab42:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    ab44:	f7ff ff1e 	bl	a984 <find_sc_cfg>
	if (!cfg) {
    ab48:	4604      	mov	r4, r0
    ab4a:	b9d0      	cbnz	r0, ab82 <sc_save+0x4a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    ab4c:	4669      	mov	r1, sp
    ab4e:	9000      	str	r0, [sp, #0]
    ab50:	f8cd 0003 	str.w	r0, [sp, #3]
    ab54:	f7ff ff16 	bl	a984 <find_sc_cfg>
		if (!cfg) {
    ab58:	4604      	mov	r4, r0
    ab5a:	b960      	cbnz	r0, ab76 <sc_save+0x3e>
    ab5c:	4916      	ldr	r1, [pc, #88]	; (abb8 <sc_save+0x80>)
    ab5e:	4b17      	ldr	r3, [pc, #92]	; (abbc <sc_save+0x84>)
			BT_ERR("unable to save SC: no cfg left");
    ab60:	4817      	ldr	r0, [pc, #92]	; (abc0 <sc_save+0x88>)
    ab62:	1ac9      	subs	r1, r1, r3
    ab64:	08c9      	lsrs	r1, r1, #3
    ab66:	0189      	lsls	r1, r1, #6
    ab68:	f041 0101 	orr.w	r1, r1, #1
    ab6c:	f018 fc1e 	bl	233ac <log_0>
}
    ab70:	b002      	add	sp, #8
    ab72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    ab76:	f800 8b01 	strb.w	r8, [r0], #1
    ab7a:	2207      	movs	r2, #7
    ab7c:	4639      	mov	r1, r7
    ab7e:	f01a fa87 	bl	25090 <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
    ab82:	8922      	ldrh	r2, [r4, #8]
    ab84:	8963      	ldrh	r3, [r4, #10]
    ab86:	b96a      	cbnz	r2, aba4 <sc_save+0x6c>
    ab88:	b973      	cbnz	r3, aba8 <sc_save+0x70>
		cfg->data.start = start;
    ab8a:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    ab8c:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    ab8e:	4621      	mov	r1, r4
    ab90:	f811 0b01 	ldrb.w	r0, [r1], #1
    ab94:	f01a fe3d 	bl	25812 <bt_addr_le_is_bonded>
    ab98:	2800      	cmp	r0, #0
    ab9a:	d0e9      	beq.n	ab70 <sc_save+0x38>
		sc_store(cfg);
    ab9c:	4620      	mov	r0, r4
    ab9e:	f7ff fd71 	bl	a684 <sc_store>
    aba2:	e7e5      	b.n	ab70 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    aba4:	4296      	cmp	r6, r2
    aba6:	d302      	bcc.n	abae <sc_save+0x76>
    aba8:	429d      	cmp	r5, r3
    abaa:	d8ef      	bhi.n	ab8c <sc_save+0x54>
    abac:	e7e0      	b.n	ab70 <sc_save+0x38>
	if (*end < new_end) {
    abae:	429d      	cmp	r5, r3
		*start = new_start;
    abb0:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    abb2:	d9ec      	bls.n	ab8e <sc_save+0x56>
    abb4:	e7ea      	b.n	ab8c <sc_save+0x54>
    abb6:	bf00      	nop
    abb8:	00028920 	.word	0x00028920
    abbc:	00028868 	.word	0x00028868
    abc0:	0002b9e3 	.word	0x0002b9e3

0000abc4 <notify_cb>:
{
    abc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    abc6:	4b2c      	ldr	r3, [pc, #176]	; (ac78 <notify_cb+0xb4>)
    abc8:	6882      	ldr	r2, [r0, #8]
    abca:	429a      	cmp	r2, r3
{
    abcc:	4606      	mov	r6, r0
    abce:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    abd0:	d12e      	bne.n	ac30 <notify_cb+0x6c>
	ccc = attr->user_data;
    abd2:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    abd4:	4b29      	ldr	r3, [pc, #164]	; (ac7c <notify_cb+0xb8>)
    abd6:	429f      	cmp	r7, r3
    abd8:	d11a      	bne.n	ac10 <notify_cb+0x4c>
	return memcmp(a, b, sizeof(*a));
    abda:	4c29      	ldr	r4, [pc, #164]	; (ac80 <notify_cb+0xbc>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    abdc:	2300      	movs	r3, #0
    abde:	2207      	movs	r2, #7
    abe0:	4669      	mov	r1, sp
    abe2:	1c60      	adds	r0, r4, #1
    abe4:	9300      	str	r3, [sp, #0]
    abe6:	f8cd 3003 	str.w	r3, [sp, #3]
    abea:	f01a fa41 	bl	25070 <memcmp>
    abee:	b178      	cbz	r0, ac10 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    abf0:	4621      	mov	r1, r4
    abf2:	2206      	movs	r2, #6
    abf4:	f811 0b01 	ldrb.w	r0, [r1], #1
    abf8:	f7fe fa76 	bl	90e8 <bt_conn_lookup_state_le>
			if (!conn) {
    abfc:	b9d8      	cbnz	r0, ac36 <notify_cb+0x72>
				sc = (struct sc_data *)data->ind_params->data;
    abfe:	68ab      	ldr	r3, [r5, #8]
				sc_save(cfg->id, &cfg->peer,
    ac00:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
    ac02:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
    ac04:	f811 0b01 	ldrb.w	r0, [r1], #1
    ac08:	8853      	ldrh	r3, [r2, #2]
    ac0a:	8812      	ldrh	r2, [r2, #0]
    ac0c:	f7ff ff94 	bl	ab38 <sc_save>
		if (cfg->value != data->type) {
    ac10:	893a      	ldrh	r2, [r7, #8]
    ac12:	88ab      	ldrh	r3, [r5, #4]
    ac14:	429a      	cmp	r2, r3
    ac16:	d10b      	bne.n	ac30 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    ac18:	4639      	mov	r1, r7
    ac1a:	f811 0b01 	ldrb.w	r0, [r1], #1
    ac1e:	f7fe fa47 	bl	90b0 <bt_conn_lookup_addr_le>
		if (!conn) {
    ac22:	4604      	mov	r4, r0
    ac24:	b120      	cbz	r0, ac30 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
    ac26:	7a83      	ldrb	r3, [r0, #10]
    ac28:	2b06      	cmp	r3, #6
    ac2a:	d007      	beq.n	ac3c <notify_cb+0x78>
			bt_conn_unref(conn);
    ac2c:	f01a feb7 	bl	2599e <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    ac30:	2001      	movs	r0, #1
}
    ac32:	b003      	add	sp, #12
    ac34:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    ac36:	f01a feb2 	bl	2599e <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    ac3a:	e7e9      	b.n	ac10 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    ac3c:	697b      	ldr	r3, [r7, #20]
    ac3e:	b123      	cbz	r3, ac4a <notify_cb+0x86>
    ac40:	4631      	mov	r1, r6
    ac42:	4798      	blx	r3
    ac44:	b908      	cbnz	r0, ac4a <notify_cb+0x86>
			bt_conn_unref(conn);
    ac46:	4620      	mov	r0, r4
    ac48:	e7f0      	b.n	ac2c <notify_cb+0x68>
		if (data->type == BT_GATT_CCC_INDICATE) {
    ac4a:	8a31      	ldrh	r1, [r6, #16]
    ac4c:	88ab      	ldrh	r3, [r5, #4]
    ac4e:	68aa      	ldr	r2, [r5, #8]
    ac50:	3901      	subs	r1, #1
    ac52:	2b02      	cmp	r3, #2
    ac54:	b289      	uxth	r1, r1
			err = gatt_indicate(conn, attr->handle - 1,
    ac56:	4620      	mov	r0, r4
		if (data->type == BT_GATT_CCC_INDICATE) {
    ac58:	d10b      	bne.n	ac72 <notify_cb+0xae>
			err = gatt_indicate(conn, attr->handle - 1,
    ac5a:	f7ff fe37 	bl	a8cc <gatt_indicate>
			err = gatt_notify(conn, attr->handle - 1,
    ac5e:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    ac60:	4620      	mov	r0, r4
    ac62:	f01a fe9c 	bl	2599e <bt_conn_unref>
		if (err < 0) {
    ac66:	2e00      	cmp	r6, #0
    ac68:	f04f 0000 	mov.w	r0, #0
    ac6c:	dbe1      	blt.n	ac32 <notify_cb+0x6e>
		data->err = 0;
    ac6e:	6028      	str	r0, [r5, #0]
    ac70:	e7de      	b.n	ac30 <notify_cb+0x6c>
			err = gatt_notify(conn, attr->handle - 1,
    ac72:	f7ff fdb5 	bl	a7e0 <gatt_notify>
    ac76:	e7f2      	b.n	ac5e <notify_cb+0x9a>
    ac78:	0000ac85 	.word	0x0000ac85
    ac7c:	20006aa0 	.word	0x20006aa0
    ac80:	20001cc2 	.word	0x20001cc2

0000ac84 <bt_gatt_attr_write_ccc>:
{
    ac84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ac88:	461f      	mov	r7, r3
    ac8a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    ac8e:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    ac92:	4606      	mov	r6, r0
    ac94:	4688      	mov	r8, r1
	if (offset) {
    ac96:	2b00      	cmp	r3, #0
    ac98:	d14b      	bne.n	ad32 <bt_gatt_attr_write_ccc+0xae>
	if (!len || len > sizeof(u16_t)) {
    ac9a:	1e7b      	subs	r3, r7, #1
    ac9c:	2b01      	cmp	r3, #1
    ac9e:	d84b      	bhi.n	ad38 <bt_gatt_attr_write_ccc+0xb4>
	if (len < sizeof(u16_t)) {
    aca0:	2f01      	cmp	r7, #1
		value = *(u8_t *)buf;
    aca2:	7815      	ldrb	r5, [r2, #0]
	return ((u16_t)src[1] << 8) | src[0];
    aca4:	bf18      	it	ne
    aca6:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    aca8:	4649      	mov	r1, r9
		value = *(u8_t *)buf;
    acaa:	bf0c      	ite	eq
    acac:	b2ad      	uxtheq	r5, r5
    acae:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    acb2:	f01b fa3f 	bl	26134 <find_ccc_cfg>
	if (!cfg) {
    acb6:	4604      	mov	r4, r0
    acb8:	b9e8      	cbnz	r0, acf6 <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
    acba:	b915      	cbnz	r5, acc2 <bt_gatt_attr_write_ccc+0x3e>
			return len;
    acbc:	4638      	mov	r0, r7
}
    acbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    acc2:	4649      	mov	r1, r9
    acc4:	f01b fa36 	bl	26134 <find_ccc_cfg>
		if (!cfg) {
    acc8:	4604      	mov	r4, r0
    acca:	b960      	cbnz	r0, ace6 <bt_gatt_attr_write_ccc+0x62>
    accc:	4b1c      	ldr	r3, [pc, #112]	; (ad40 <bt_gatt_attr_write_ccc+0xbc>)
    acce:	491d      	ldr	r1, [pc, #116]	; (ad44 <bt_gatt_attr_write_ccc+0xc0>)
			BT_WARN("No space to store CCC cfg");
    acd0:	481d      	ldr	r0, [pc, #116]	; (ad48 <bt_gatt_attr_write_ccc+0xc4>)
    acd2:	1ac9      	subs	r1, r1, r3
    acd4:	08c9      	lsrs	r1, r1, #3
    acd6:	0189      	lsls	r1, r1, #6
    acd8:	f041 0102 	orr.w	r1, r1, #2
    acdc:	f018 fb66 	bl	233ac <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    ace0:	f06f 0010 	mvn.w	r0, #16
    ace4:	e7eb      	b.n	acbe <bt_gatt_attr_write_ccc+0x3a>
	memcpy(dst, src, sizeof(*dst));
    ace6:	2207      	movs	r2, #7
    ace8:	f106 0174 	add.w	r1, r6, #116	; 0x74
    acec:	3001      	adds	r0, #1
    acee:	f01a f9cf 	bl	25090 <memcpy>
		cfg->id = conn->id;
    acf2:	7a33      	ldrb	r3, [r6, #8]
    acf4:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    acf6:	f8d9 3010 	ldr.w	r3, [r9, #16]
    acfa:	b973      	cbnz	r3, ad1a <bt_gatt_attr_write_ccc+0x96>
	if (cfg->value != ccc->value) {
    acfc:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    ad00:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    ad02:	42ab      	cmp	r3, r5
    ad04:	d003      	beq.n	ad0e <bt_gatt_attr_write_ccc+0x8a>
		gatt_ccc_changed(attr, ccc);
    ad06:	4649      	mov	r1, r9
    ad08:	4640      	mov	r0, r8
    ad0a:	f01b f9c2 	bl	26092 <gatt_ccc_changed>
	if (!value) {
    ad0e:	2d00      	cmp	r5, #0
    ad10:	d1d4      	bne.n	acbc <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
    ad12:	4620      	mov	r0, r4
    ad14:	f01b fa28 	bl	26168 <clear_ccc_cfg>
    ad18:	e7d0      	b.n	acbc <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    ad1a:	462a      	mov	r2, r5
    ad1c:	4641      	mov	r1, r8
    ad1e:	4630      	mov	r0, r6
    ad20:	4798      	blx	r3
		if (write < 0) {
    ad22:	2800      	cmp	r0, #0
    ad24:	dbcb      	blt.n	acbe <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    ad26:	1e42      	subs	r2, r0, #1
    ad28:	2a01      	cmp	r2, #1
    ad2a:	d9e7      	bls.n	acfc <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    ad2c:	f06f 000d 	mvn.w	r0, #13
    ad30:	e7c5      	b.n	acbe <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    ad32:	f06f 0006 	mvn.w	r0, #6
    ad36:	e7c2      	b.n	acbe <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    ad38:	f06f 000c 	mvn.w	r0, #12
    ad3c:	e7bf      	b.n	acbe <bt_gatt_attr_write_ccc+0x3a>
    ad3e:	bf00      	nop
    ad40:	00028868 	.word	0x00028868
    ad44:	00028920 	.word	0x00028920
    ad48:	0002ba02 	.word	0x0002ba02

0000ad4c <sc_set>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static int sc_set(const char *name, size_t len_rd, settings_read_cb read_cb,
		  void *cb_arg)
{
    ad4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ad50:	460e      	mov	r6, r1
    ad52:	b087      	sub	sp, #28
    ad54:	4690      	mov	r8, r2
    ad56:	4699      	mov	r9, r3
	u8_t id;
	bt_addr_le_t addr;
	int len, err;
	const char *next;

	if (!name) {
    ad58:	4607      	mov	r7, r0
    ad5a:	b978      	cbnz	r0, ad7c <sc_set+0x30>
    ad5c:	4937      	ldr	r1, [pc, #220]	; (ae3c <sc_set+0xf0>)
    ad5e:	4b38      	ldr	r3, [pc, #224]	; (ae40 <sc_set+0xf4>)
		BT_ERR("Insufficient number of arguments");
    ad60:	4838      	ldr	r0, [pc, #224]	; (ae44 <sc_set+0xf8>)
    ad62:	1ac9      	subs	r1, r1, r3
    ad64:	08c9      	lsrs	r1, r1, #3
    ad66:	0189      	lsls	r1, r1, #6
    ad68:	f041 0101 	orr.w	r1, r1, #1
    ad6c:	f018 fb1e 	bl	233ac <log_0>
	}

	err = bt_settings_decode_key(name, &addr);
	if (err) {
		BT_ERR("Unable to decode address %s", log_strdup(name));
		return -EINVAL;
    ad70:	f06f 0515 	mvn.w	r5, #21

		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
	}

	return 0;
}
    ad74:	4628      	mov	r0, r5
    ad76:	b007      	add	sp, #28
    ad78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    ad7c:	a902      	add	r1, sp, #8
    ad7e:	f01a fa86 	bl	2528e <bt_settings_decode_key>
	if (err) {
    ad82:	4605      	mov	r5, r0
    ad84:	b178      	cbz	r0, ada6 <sc_set+0x5a>
    ad86:	4a2e      	ldr	r2, [pc, #184]	; (ae40 <sc_set+0xf4>)
    ad88:	4c2c      	ldr	r4, [pc, #176]	; (ae3c <sc_set+0xf0>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    ad8a:	4638      	mov	r0, r7
    ad8c:	1aa4      	subs	r4, r4, r2
    ad8e:	08e4      	lsrs	r4, r4, #3
    ad90:	f7f7 fad6 	bl	2340 <log_strdup>
    ad94:	01a4      	lsls	r4, r4, #6
    ad96:	f044 0401 	orr.w	r4, r4, #1
    ad9a:	4601      	mov	r1, r0
    ad9c:	4622      	mov	r2, r4
    ad9e:	482a      	ldr	r0, [pc, #168]	; (ae48 <sc_set+0xfc>)
    ada0:	f018 fb11 	bl	233c6 <log_1>
    ada4:	e7e4      	b.n	ad70 <sc_set+0x24>
	settings_name_next(name, &next);
    ada6:	a901      	add	r1, sp, #4
    ada8:	4638      	mov	r0, r7
    adaa:	f018 fedc 	bl	23b66 <settings_name_next>
	if (!next) {
    adae:	9801      	ldr	r0, [sp, #4]
    adb0:	b308      	cbz	r0, adf6 <sc_set+0xaa>
		id = strtol(next, NULL, 10);
    adb2:	220a      	movs	r2, #10
    adb4:	4629      	mov	r1, r5
    adb6:	f01a f898 	bl	24eea <strtol>
    adba:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    adbc:	a902      	add	r1, sp, #8
    adbe:	4638      	mov	r0, r7
    adc0:	f7ff fde0 	bl	a984 <find_sc_cfg>
	if (!cfg && len_rd) {
    adc4:	4604      	mov	r4, r0
    adc6:	bb90      	cbnz	r0, ae2e <sc_set+0xe2>
    adc8:	2e00      	cmp	r6, #0
    adca:	d0d3      	beq.n	ad74 <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    adcc:	a904      	add	r1, sp, #16
    adce:	9004      	str	r0, [sp, #16]
    add0:	f8cd 0013 	str.w	r0, [sp, #19]
    add4:	f7ff fdd6 	bl	a984 <find_sc_cfg>
		if (!cfg) {
    add8:	4604      	mov	r4, r0
    adda:	b970      	cbnz	r0, adfa <sc_set+0xae>
    addc:	4b18      	ldr	r3, [pc, #96]	; (ae40 <sc_set+0xf4>)
    adde:	4917      	ldr	r1, [pc, #92]	; (ae3c <sc_set+0xf0>)
			BT_ERR("Unable to restore SC: no cfg left");
    ade0:	481a      	ldr	r0, [pc, #104]	; (ae4c <sc_set+0x100>)
    ade2:	1ac9      	subs	r1, r1, r3
    ade4:	08c9      	lsrs	r1, r1, #3
    ade6:	0189      	lsls	r1, r1, #6
    ade8:	f041 0101 	orr.w	r1, r1, #1
    adec:	f018 fade 	bl	233ac <log_0>
			return -ENOMEM;
    adf0:	f06f 050b 	mvn.w	r5, #11
    adf4:	e7be      	b.n	ad74 <sc_set+0x28>
		id = BT_ID_DEFAULT;
    adf6:	462f      	mov	r7, r5
    adf8:	e7e0      	b.n	adbc <sc_set+0x70>
		cfg->id = id;
    adfa:	f800 7b01 	strb.w	r7, [r0], #1
    adfe:	2207      	movs	r2, #7
    ae00:	a902      	add	r1, sp, #8
    ae02:	f01a f945 	bl	25090 <memcpy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    ae06:	f104 0108 	add.w	r1, r4, #8
    ae0a:	2204      	movs	r2, #4
    ae0c:	4648      	mov	r0, r9
    ae0e:	47c0      	blx	r8
		if (len < 0) {
    ae10:	1e04      	subs	r4, r0, #0
    ae12:	daaf      	bge.n	ad74 <sc_set+0x28>
    ae14:	4b0a      	ldr	r3, [pc, #40]	; (ae40 <sc_set+0xf4>)
    ae16:	4a09      	ldr	r2, [pc, #36]	; (ae3c <sc_set+0xf0>)
			BT_ERR("Failed to decode value (err %d)", len);
    ae18:	480d      	ldr	r0, [pc, #52]	; (ae50 <sc_set+0x104>)
    ae1a:	1ad2      	subs	r2, r2, r3
    ae1c:	08d2      	lsrs	r2, r2, #3
    ae1e:	0192      	lsls	r2, r2, #6
    ae20:	f042 0201 	orr.w	r2, r2, #1
    ae24:	4621      	mov	r1, r4
    ae26:	f018 face 	bl	233c6 <log_1>
			return len;
    ae2a:	4625      	mov	r5, r4
    ae2c:	e7a2      	b.n	ad74 <sc_set+0x28>
	if (len_rd) {
    ae2e:	2e00      	cmp	r6, #0
    ae30:	d1e9      	bne.n	ae06 <sc_set+0xba>
		memset(cfg, 0, sizeof(*cfg));
    ae32:	220c      	movs	r2, #12
    ae34:	4631      	mov	r1, r6
    ae36:	f01a f956 	bl	250e6 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    ae3a:	e79b      	b.n	ad74 <sc_set+0x28>
    ae3c:	00028920 	.word	0x00028920
    ae40:	00028868 	.word	0x00028868
    ae44:	0002a92d 	.word	0x0002a92d
    ae48:	0002ba1c 	.word	0x0002ba1c
    ae4c:	0002ba38 	.word	0x0002ba38
    ae50:	0002ba5a 	.word	0x0002ba5a

0000ae54 <sc_commit>:

static int sc_commit(void)
{
    ae54:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ae56:	490e      	ldr	r1, [pc, #56]	; (ae90 <sc_commit+0x3c>)
    ae58:	f3bf 8f5b 	dmb	ish
    ae5c:	f101 0338 	add.w	r3, r1, #56	; 0x38
    ae60:	e853 2f00 	ldrex	r2, [r3]
    ae64:	f022 0202 	bic.w	r2, r2, #2
    ae68:	e843 2000 	strex	r0, r2, [r3]
    ae6c:	2800      	cmp	r0, #0
    ae6e:	d1f7      	bne.n	ae60 <sc_commit+0xc>
    ae70:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ae74:	f3bf 8f5b 	dmb	ish
    ae78:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    ae7a:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(gatt_sc.flags, SC_INDICATE_PENDING);

	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    ae7e:	07db      	lsls	r3, r3, #31
    ae80:	d504      	bpl.n	ae8c <sc_commit+0x38>
    ae82:	4804      	ldr	r0, [pc, #16]	; (ae94 <sc_commit+0x40>)
    ae84:	220a      	movs	r2, #10
    ae86:	3118      	adds	r1, #24
    ae88:	f017 f85e 	bl	21f48 <k_delayed_work_submit_to_queue>
		/* Schedule SC indication since the range has changed */
		k_delayed_work_submit(&gatt_sc.work, SC_TIMEOUT);
	}

	return 0;
}
    ae8c:	2000      	movs	r0, #0
    ae8e:	bd08      	pop	{r3, pc}
    ae90:	2000073c 	.word	0x2000073c
    ae94:	20001c08 	.word	0x20001c08

0000ae98 <sc_indicate>:
{
    ae98:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ae9a:	4b16      	ldr	r3, [pc, #88]	; (aef4 <sc_indicate+0x5c>)
    ae9c:	f3bf 8f5b 	dmb	ish
    aea0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    aea4:	e852 4f00 	ldrex	r4, [r2]
    aea8:	f044 0c01 	orr.w	ip, r4, #1
    aeac:	e842 ce00 	strex	lr, ip, [r2]
    aeb0:	f1be 0f00 	cmp.w	lr, #0
    aeb4:	d1f6      	bne.n	aea4 <sc_indicate+0xc>
    aeb6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    aeba:	07e2      	lsls	r2, r4, #31
    aebc:	d40f      	bmi.n	aede <sc_indicate+0x46>
		gatt_sc.start = start;
    aebe:	8298      	strh	r0, [r3, #20]
		*end = new_end;
    aec0:	82d9      	strh	r1, [r3, #22]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    aec2:	f3bf 8f5b 	dmb	ish
    aec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    aec8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    aecc:	079b      	lsls	r3, r3, #30
    aece:	d40c      	bmi.n	aeea <sc_indicate+0x52>
}
    aed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aed4:	4908      	ldr	r1, [pc, #32]	; (aef8 <sc_indicate+0x60>)
    aed6:	4809      	ldr	r0, [pc, #36]	; (aefc <sc_indicate+0x64>)
    aed8:	220a      	movs	r2, #10
    aeda:	f017 b835 	b.w	21f48 <k_delayed_work_submit_to_queue>
	if (new_start >= *start && new_end <= *end) {
    aede:	8a9c      	ldrh	r4, [r3, #20]
    aee0:	8ada      	ldrh	r2, [r3, #22]
    aee2:	4284      	cmp	r4, r0
    aee4:	d802      	bhi.n	aeec <sc_indicate+0x54>
    aee6:	4291      	cmp	r1, r2
    aee8:	d8ea      	bhi.n	aec0 <sc_indicate+0x28>
}
    aeea:	bd10      	pop	{r4, pc}
	if (*end < new_end) {
    aeec:	4291      	cmp	r1, r2
		*start = new_start;
    aeee:	8298      	strh	r0, [r3, #20]
	if (*end < new_end) {
    aef0:	d9e7      	bls.n	aec2 <sc_indicate+0x2a>
    aef2:	e7e5      	b.n	aec0 <sc_indicate+0x28>
    aef4:	2000073c 	.word	0x2000073c
    aef8:	20000754 	.word	0x20000754
    aefc:	20001c08 	.word	0x20001c08

0000af00 <bt_gatt_init>:
{
    af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    af02:	4b20      	ldr	r3, [pc, #128]	; (af84 <bt_gatt_init+0x84>)
    af04:	f3bf 8f5b 	dmb	ish
    af08:	2201      	movs	r2, #1
    af0a:	e853 1f00 	ldrex	r1, [r3]
    af0e:	2900      	cmp	r1, #0
    af10:	d103      	bne.n	af1a <bt_gatt_init+0x1a>
    af12:	e843 2000 	strex	r0, r2, [r3]
    af16:	2800      	cmp	r0, #0
    af18:	d1f7      	bne.n	af0a <bt_gatt_init+0xa>
    af1a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    af1e:	d02b      	beq.n	af78 <bt_gatt_init+0x78>
}
    af20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		last_static_handle += svc->attr_count;
    af22:	4a19      	ldr	r2, [pc, #100]	; (af88 <bt_gatt_init+0x88>)
    af24:	6863      	ldr	r3, [r4, #4]
    af26:	8811      	ldrh	r1, [r2, #0]
    af28:	440b      	add	r3, r1
    af2a:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    af2c:	3408      	adds	r4, #8
    af2e:	42ac      	cmp	r4, r5
    af30:	d90e      	bls.n	af50 <bt_gatt_init+0x50>
    af32:	4916      	ldr	r1, [pc, #88]	; (af8c <bt_gatt_init+0x8c>)
    af34:	4816      	ldr	r0, [pc, #88]	; (af90 <bt_gatt_init+0x90>)
    af36:	f240 33c7 	movw	r3, #967	; 0x3c7
    af3a:	4632      	mov	r2, r6
    af3c:	f018 f9c5 	bl	232ca <printk>
    af40:	4814      	ldr	r0, [pc, #80]	; (af94 <bt_gatt_init+0x94>)
    af42:	f018 f9c2 	bl	232ca <printk>
    af46:	f240 31c7 	movw	r1, #967	; 0x3c7
    af4a:	4630      	mov	r0, r6
    af4c:	f018 fa00 	bl	23350 <assert_post_action>
    af50:	42bc      	cmp	r4, r7
    af52:	d3e6      	bcc.n	af22 <bt_gatt_init+0x22>
		k_delayed_work_init(&gatt_sc.work, sc_process);
    af54:	4910      	ldr	r1, [pc, #64]	; (af98 <bt_gatt_init+0x98>)
    af56:	4811      	ldr	r0, [pc, #68]	; (af9c <bt_gatt_init+0x9c>)
    af58:	f01d fa96 	bl	28488 <k_delayed_work_init>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    af5c:	f3bf 8f5b 	dmb	ish
    af60:	4b0f      	ldr	r3, [pc, #60]	; (afa0 <bt_gatt_init+0xa0>)
    af62:	e853 2f00 	ldrex	r2, [r3]
    af66:	f042 0202 	orr.w	r2, r2, #2
    af6a:	e843 2100 	strex	r1, r2, [r3]
    af6e:	2900      	cmp	r1, #0
    af70:	d1f7      	bne.n	af62 <bt_gatt_init+0x62>
    af72:	f3bf 8f5b 	dmb	ish
    af76:	e7d3      	b.n	af20 <bt_gatt_init+0x20>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    af78:	4d0a      	ldr	r5, [pc, #40]	; (afa4 <bt_gatt_init+0xa4>)
    af7a:	4c0b      	ldr	r4, [pc, #44]	; (afa8 <bt_gatt_init+0xa8>)
    af7c:	4e0b      	ldr	r6, [pc, #44]	; (afac <bt_gatt_init+0xac>)
    af7e:	462f      	mov	r7, r5
    af80:	e7d5      	b.n	af2e <bt_gatt_init+0x2e>
    af82:	bf00      	nop
    af84:	20000778 	.word	0x20000778
    af88:	20001cc0 	.word	0x20001cc0
    af8c:	0002b951 	.word	0x0002b951
    af90:	000297e6 	.word	0x000297e6
    af94:	00029c4a 	.word	0x00029c4a
    af98:	0000b7a9 	.word	0x0000b7a9
    af9c:	20000754 	.word	0x20000754
    afa0:	20000774 	.word	0x20000774
    afa4:	0002882c 	.word	0x0002882c
    afa8:	0002881c 	.word	0x0002881c
    afac:	0002b91a 	.word	0x0002b91a

0000afb0 <bt_gatt_service_unregister>:
{
    afb0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(svc, "invalid parameters\n");
    afb2:	4604      	mov	r4, r0
    afb4:	b970      	cbnz	r0, afd4 <bt_gatt_service_unregister+0x24>
    afb6:	491c      	ldr	r1, [pc, #112]	; (b028 <bt_gatt_service_unregister+0x78>)
    afb8:	4a1c      	ldr	r2, [pc, #112]	; (b02c <bt_gatt_service_unregister+0x7c>)
    afba:	481d      	ldr	r0, [pc, #116]	; (b030 <bt_gatt_service_unregister+0x80>)
    afbc:	f240 433e 	movw	r3, #1086	; 0x43e
    afc0:	f018 f983 	bl	232ca <printk>
    afc4:	481b      	ldr	r0, [pc, #108]	; (b034 <bt_gatt_service_unregister+0x84>)
    afc6:	f018 f980 	bl	232ca <printk>
    afca:	4818      	ldr	r0, [pc, #96]	; (b02c <bt_gatt_service_unregister+0x7c>)
    afcc:	f240 413e 	movw	r1, #1086	; 0x43e
    afd0:	f018 f9be 	bl	23350 <assert_post_action>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    afd4:	4b18      	ldr	r3, [pc, #96]	; (b038 <bt_gatt_service_unregister+0x88>)
    afd6:	681a      	ldr	r2, [r3, #0]
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
    afd8:	f104 0008 	add.w	r0, r4, #8
    afdc:	2100      	movs	r1, #0
    afde:	b912      	cbnz	r2, afe6 <bt_gatt_service_unregister+0x36>
		return -ENOENT;
    afe0:	f06f 0001 	mvn.w	r0, #1
    afe4:	e015      	b.n	b012 <bt_gatt_service_unregister+0x62>
    afe6:	4290      	cmp	r0, r2
    afe8:	d11a      	bne.n	b020 <bt_gatt_service_unregister+0x70>
Z_GENLIST_REMOVE(slist, snode)
    afea:	68a2      	ldr	r2, [r4, #8]
    afec:	b991      	cbnz	r1, b014 <bt_gatt_service_unregister+0x64>
    afee:	6859      	ldr	r1, [r3, #4]
	list->head = node;
    aff0:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    aff2:	4288      	cmp	r0, r1
    aff4:	d100      	bne.n	aff8 <bt_gatt_service_unregister+0x48>
	list->tail = node;
    aff6:	605a      	str	r2, [r3, #4]
		    svc->attrs[svc->attr_count - 1].handle);
    aff8:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(svc->attrs[0].handle,
    affc:	2114      	movs	r1, #20
    affe:	fb01 2303 	mla	r3, r1, r3, r2
	parent->next = child;
    b002:	2500      	movs	r5, #0
    b004:	8a10      	ldrh	r0, [r2, #16]
    b006:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    b00a:	60a5      	str	r5, [r4, #8]
    b00c:	f7ff ff44 	bl	ae98 <sc_indicate>
	return 0;
    b010:	4628      	mov	r0, r5
}
    b012:	bd38      	pop	{r3, r4, r5, pc}
    b014:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    b016:	685a      	ldr	r2, [r3, #4]
    b018:	4290      	cmp	r0, r2
	list->tail = node;
    b01a:	bf08      	it	eq
    b01c:	6059      	streq	r1, [r3, #4]
}
    b01e:	e7eb      	b.n	aff8 <bt_gatt_service_unregister+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b020:	4611      	mov	r1, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b022:	6812      	ldr	r2, [r2, #0]
    b024:	e7db      	b.n	afde <bt_gatt_service_unregister+0x2e>
    b026:	bf00      	nop
    b028:	0002ba7a 	.word	0x0002ba7a
    b02c:	0002b91a 	.word	0x0002b91a
    b030:	000297e6 	.word	0x000297e6
    b034:	0002ba7e 	.word	0x0002ba7e
    b038:	20000734 	.word	0x20000734

0000b03c <bt_gatt_attr_value_handle>:
{
    b03c:	b508      	push	{r3, lr}
	if ((attr != NULL)
    b03e:	b180      	cbz	r0, b062 <bt_gatt_attr_value_handle+0x26>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    b040:	6841      	ldr	r1, [r0, #4]
    b042:	4b09      	ldr	r3, [pc, #36]	; (b068 <bt_gatt_attr_value_handle+0x2c>)
    b044:	4299      	cmp	r1, r3
    b046:	d10c      	bne.n	b062 <bt_gatt_attr_value_handle+0x26>
		handle = chrc->value_handle;
    b048:	68c3      	ldr	r3, [r0, #12]
    b04a:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    b04c:	b91b      	cbnz	r3, b056 <bt_gatt_attr_value_handle+0x1a>
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    b04e:	8a03      	ldrh	r3, [r0, #16]
    b050:	b11b      	cbz	r3, b05a <bt_gatt_attr_value_handle+0x1e>
    b052:	3301      	adds	r3, #1
    b054:	b29b      	uxth	r3, r3
}
    b056:	4618      	mov	r0, r3
    b058:	bd08      	pop	{r3, pc}
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    b05a:	f7ff fb81 	bl	a760 <find_static_attr>
    b05e:	1c43      	adds	r3, r0, #1
    b060:	e7f8      	b.n	b054 <bt_gatt_attr_value_handle+0x18>
	u16_t handle = 0;
    b062:	2300      	movs	r3, #0
    b064:	e7f7      	b.n	b056 <bt_gatt_attr_value_handle+0x1a>
    b066:	bf00      	nop
    b068:	000262ab 	.word	0x000262ab

0000b06c <bt_gatt_foreach_attr_type>:
{
    b06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b070:	b089      	sub	sp, #36	; 0x24
    b072:	4698      	mov	r8, r3
    b074:	f8bd 4048 	ldrh.w	r4, [sp, #72]	; 0x48
    b078:	9100      	str	r1, [sp, #0]
		num_matches = UINT16_MAX;
    b07a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b07e:	2c00      	cmp	r4, #0
    b080:	bf08      	it	eq
    b082:	461c      	moveq	r4, r3
	if (start_handle <= last_static_handle) {
    b084:	4b56      	ldr	r3, [pc, #344]	; (b1e0 <bt_gatt_foreach_attr_type+0x174>)
    b086:	881b      	ldrh	r3, [r3, #0]
    b088:	4283      	cmp	r3, r0
{
    b08a:	4606      	mov	r6, r0
    b08c:	4617      	mov	r7, r2
	if (start_handle <= last_static_handle) {
    b08e:	d31b      	bcc.n	b0c8 <bt_gatt_foreach_attr_type+0x5c>
    b090:	f8df 9164 	ldr.w	r9, [pc, #356]	; b1f8 <bt_gatt_foreach_attr_type+0x18c>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    b094:	f8df b164 	ldr.w	fp, [pc, #356]	; b1fc <bt_gatt_foreach_attr_type+0x190>
		u16_t handle = 1;
    b098:	2501      	movs	r5, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    b09a:	4b52      	ldr	r3, [pc, #328]	; (b1e4 <bt_gatt_foreach_attr_type+0x178>)
    b09c:	f1a9 0a08 	sub.w	sl, r9, #8
    b0a0:	459a      	cmp	sl, r3
    b0a2:	d90e      	bls.n	b0c2 <bt_gatt_foreach_attr_type+0x56>
    b0a4:	4950      	ldr	r1, [pc, #320]	; (b1e8 <bt_gatt_foreach_attr_type+0x17c>)
    b0a6:	4851      	ldr	r0, [pc, #324]	; (b1ec <bt_gatt_foreach_attr_type+0x180>)
    b0a8:	f240 5349 	movw	r3, #1353	; 0x549
    b0ac:	465a      	mov	r2, fp
    b0ae:	f018 f90c 	bl	232ca <printk>
    b0b2:	484f      	ldr	r0, [pc, #316]	; (b1f0 <bt_gatt_foreach_attr_type+0x184>)
    b0b4:	f018 f909 	bl	232ca <printk>
    b0b8:	f240 5149 	movw	r1, #1353	; 0x549
    b0bc:	4658      	mov	r0, fp
    b0be:	f018 f947 	bl	23350 <assert_post_action>
    b0c2:	4b48      	ldr	r3, [pc, #288]	; (b1e4 <bt_gatt_foreach_attr_type+0x178>)
    b0c4:	459a      	cmp	sl, r3
    b0c6:	d323      	bcc.n	b110 <bt_gatt_foreach_attr_type+0xa4>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    b0c8:	4b4a      	ldr	r3, [pc, #296]	; (b1f4 <bt_gatt_foreach_attr_type+0x188>)
    b0ca:	681d      	ldr	r5, [r3, #0]
    b0cc:	2d00      	cmp	r5, #0
    b0ce:	d052      	beq.n	b176 <bt_gatt_foreach_attr_type+0x10a>
    b0d0:	3d08      	subs	r5, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    b0d2:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    b0d6:	2d00      	cmp	r5, #0
    b0d8:	d04d      	beq.n	b176 <bt_gatt_foreach_attr_type+0x10a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b0da:	f115 0908 	adds.w	r9, r5, #8
    b0de:	d00a      	beq.n	b0f6 <bt_gatt_foreach_attr_type+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b0e0:	68ab      	ldr	r3, [r5, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
    b0e2:	2b00      	cmp	r3, #0
    b0e4:	d07a      	beq.n	b1dc <bt_gatt_foreach_attr_type+0x170>
		if (next) {
    b0e6:	f1b3 0b08 	subs.w	fp, r3, #8
    b0ea:	d006      	beq.n	b0fa <bt_gatt_foreach_attr_type+0x8e>
			if (next->attrs[0].handle <= start_handle) {
    b0ec:	f853 3c08 	ldr.w	r3, [r3, #-8]
    b0f0:	8a1b      	ldrh	r3, [r3, #16]
    b0f2:	42b3      	cmp	r3, r6
    b0f4:	d907      	bls.n	b106 <bt_gatt_foreach_attr_type+0x9a>
    b0f6:	f04f 0b00 	mov.w	fp, #0
		for (i = 0; i < svc->attr_count; i++) {
    b0fa:	686b      	ldr	r3, [r5, #4]
    b0fc:	455b      	cmp	r3, fp
    b0fe:	d844      	bhi.n	b18a <bt_gatt_foreach_attr_type+0x11e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b100:	f1b9 0f00 	cmp.w	r9, #0
    b104:	d037      	beq.n	b176 <bt_gatt_foreach_attr_type+0x10a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b106:	68ad      	ldr	r5, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    b108:	2d00      	cmp	r5, #0
    b10a:	d034      	beq.n	b176 <bt_gatt_foreach_attr_type+0x10a>
    b10c:	3d08      	subs	r5, #8
    b10e:	e7e2      	b.n	b0d6 <bt_gatt_foreach_attr_type+0x6a>
			if (handle + static_svc->attr_count < start_handle) {
    b110:	f859 3c04 	ldr.w	r3, [r9, #-4]
    b114:	442b      	add	r3, r5
    b116:	42b3      	cmp	r3, r6
    b118:	d234      	bcs.n	b184 <bt_gatt_foreach_attr_type+0x118>
				handle += static_svc->attr_count;
    b11a:	b29d      	uxth	r5, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    b11c:	f109 0908 	add.w	r9, r9, #8
    b120:	e7bb      	b.n	b09a <bt_gatt_foreach_attr_type+0x2e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    b122:	9903      	ldr	r1, [sp, #12]
    b124:	4638      	mov	r0, r7
    b126:	f01a fa83 	bl	25630 <bt_uuid_cmp>
    b12a:	b1c0      	cbz	r0, b15e <bt_gatt_foreach_attr_type+0xf2>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    b12c:	3501      	adds	r5, #1
    b12e:	f10a 0a01 	add.w	sl, sl, #1
    b132:	b2ad      	uxth	r5, r5
    b134:	f859 3c04 	ldr.w	r3, [r9, #-4]
    b138:	4553      	cmp	r3, sl
    b13a:	d9ef      	bls.n	b11c <bt_gatt_foreach_attr_type+0xb0>
				memcpy(&attr, &static_svc->attrs[i],
    b13c:	f859 1c08 	ldr.w	r1, [r9, #-8]
    b140:	2214      	movs	r2, #20
    b142:	fb02 110a 	mla	r1, r2, sl, r1
    b146:	a803      	add	r0, sp, #12
    b148:	f019 ffa2 	bl	25090 <memcpy>
	if (attr->handle > end_handle) {
    b14c:	9b00      	ldr	r3, [sp, #0]
				attr.handle = handle;
    b14e:	f8ad 501c 	strh.w	r5, [sp, #28]
	if (attr->handle > end_handle) {
    b152:	429d      	cmp	r5, r3
    b154:	d80f      	bhi.n	b176 <bt_gatt_foreach_attr_type+0x10a>
	if (attr->handle < start_handle) {
    b156:	42b5      	cmp	r5, r6
    b158:	d3e8      	bcc.n	b12c <bt_gatt_foreach_attr_type+0xc0>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    b15a:	2f00      	cmp	r7, #0
    b15c:	d1e1      	bne.n	b122 <bt_gatt_foreach_attr_type+0xb6>
	if (attr_data && attr_data != attr->user_data) {
    b15e:	f1b8 0f00 	cmp.w	r8, #0
    b162:	d10b      	bne.n	b17c <bt_gatt_foreach_attr_type+0x110>
	*num_matches -= 1;
    b164:	3c01      	subs	r4, #1
    b166:	b2a4      	uxth	r4, r4
	result = func(attr, user_data);
    b168:	9914      	ldr	r1, [sp, #80]	; 0x50
    b16a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b16c:	a803      	add	r0, sp, #12
    b16e:	4798      	blx	r3
	if (!*num_matches) {
    b170:	b10c      	cbz	r4, b176 <bt_gatt_foreach_attr_type+0x10a>
				if (gatt_foreach_iter(&attr, start_handle,
    b172:	2800      	cmp	r0, #0
    b174:	d1da      	bne.n	b12c <bt_gatt_foreach_attr_type+0xc0>
}
    b176:	b009      	add	sp, #36	; 0x24
    b178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    b17c:	9b06      	ldr	r3, [sp, #24]
    b17e:	4598      	cmp	r8, r3
    b180:	d1d4      	bne.n	b12c <bt_gatt_foreach_attr_type+0xc0>
    b182:	e7ef      	b.n	b164 <bt_gatt_foreach_attr_type+0xf8>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    b184:	f04f 0a00 	mov.w	sl, #0
    b188:	e7d4      	b.n	b134 <bt_gatt_foreach_attr_type+0xc8>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    b18a:	6829      	ldr	r1, [r5, #0]
	if (attr->handle > end_handle) {
    b18c:	9a00      	ldr	r2, [sp, #0]
			struct bt_gatt_attr *attr = &svc->attrs[i];
    b18e:	fb0a fc0b 	mul.w	ip, sl, fp
    b192:	eb01 030c 	add.w	r3, r1, ip
	if (attr->handle > end_handle) {
    b196:	8a18      	ldrh	r0, [r3, #16]
    b198:	4282      	cmp	r2, r0
    b19a:	d3ec      	bcc.n	b176 <bt_gatt_foreach_attr_type+0x10a>
	if (attr->handle < start_handle) {
    b19c:	4286      	cmp	r6, r0
    b19e:	d816      	bhi.n	b1ce <bt_gatt_foreach_attr_type+0x162>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    b1a0:	b967      	cbnz	r7, b1bc <bt_gatt_foreach_attr_type+0x150>
	if (attr_data && attr_data != attr->user_data) {
    b1a2:	f1b8 0f00 	cmp.w	r8, #0
    b1a6:	d115      	bne.n	b1d4 <bt_gatt_foreach_attr_type+0x168>
	*num_matches -= 1;
    b1a8:	3c01      	subs	r4, #1
    b1aa:	b2a4      	uxth	r4, r4
	result = func(attr, user_data);
    b1ac:	4618      	mov	r0, r3
    b1ae:	9914      	ldr	r1, [sp, #80]	; 0x50
    b1b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b1b2:	4798      	blx	r3
	if (!*num_matches) {
    b1b4:	2c00      	cmp	r4, #0
    b1b6:	d0de      	beq.n	b176 <bt_gatt_foreach_attr_type+0x10a>
			if (gatt_foreach_iter(attr,
    b1b8:	b948      	cbnz	r0, b1ce <bt_gatt_foreach_attr_type+0x162>
    b1ba:	e7dc      	b.n	b176 <bt_gatt_foreach_attr_type+0x10a>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    b1bc:	f851 100c 	ldr.w	r1, [r1, ip]
    b1c0:	9301      	str	r3, [sp, #4]
    b1c2:	4638      	mov	r0, r7
    b1c4:	f01a fa34 	bl	25630 <bt_uuid_cmp>
    b1c8:	9b01      	ldr	r3, [sp, #4]
    b1ca:	2800      	cmp	r0, #0
    b1cc:	d0e9      	beq.n	b1a2 <bt_gatt_foreach_attr_type+0x136>
		for (i = 0; i < svc->attr_count; i++) {
    b1ce:	f10b 0b01 	add.w	fp, fp, #1
    b1d2:	e792      	b.n	b0fa <bt_gatt_foreach_attr_type+0x8e>
	if (attr_data && attr_data != attr->user_data) {
    b1d4:	68da      	ldr	r2, [r3, #12]
    b1d6:	4590      	cmp	r8, r2
    b1d8:	d1f9      	bne.n	b1ce <bt_gatt_foreach_attr_type+0x162>
    b1da:	e7e5      	b.n	b1a8 <bt_gatt_foreach_attr_type+0x13c>
    b1dc:	469b      	mov	fp, r3
    b1de:	e78c      	b.n	b0fa <bt_gatt_foreach_attr_type+0x8e>
    b1e0:	20001cc0 	.word	0x20001cc0
    b1e4:	0002882c 	.word	0x0002882c
    b1e8:	0002b94a 	.word	0x0002b94a
    b1ec:	000297e6 	.word	0x000297e6
    b1f0:	00029c4a 	.word	0x00029c4a
    b1f4:	20000734 	.word	0x20000734
    b1f8:	00028824 	.word	0x00028824
    b1fc:	0002b91a 	.word	0x0002b91a

0000b200 <bt_gatt_service_register>:
{
    b200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(svc, "invalid parameters\n");
    b204:	4605      	mov	r5, r0
    b206:	b970      	cbnz	r0, b226 <bt_gatt_service_register+0x26>
    b208:	4970      	ldr	r1, [pc, #448]	; (b3cc <bt_gatt_service_register+0x1cc>)
    b20a:	4a71      	ldr	r2, [pc, #452]	; (b3d0 <bt_gatt_service_register+0x1d0>)
    b20c:	4871      	ldr	r0, [pc, #452]	; (b3d4 <bt_gatt_service_register+0x1d4>)
    b20e:	f240 4322 	movw	r3, #1058	; 0x422
    b212:	f018 f85a 	bl	232ca <printk>
    b216:	4870      	ldr	r0, [pc, #448]	; (b3d8 <bt_gatt_service_register+0x1d8>)
    b218:	f018 f857 	bl	232ca <printk>
    b21c:	486c      	ldr	r0, [pc, #432]	; (b3d0 <bt_gatt_service_register+0x1d0>)
    b21e:	f240 4122 	movw	r1, #1058	; 0x422
    b222:	f018 f895 	bl	23350 <assert_post_action>
	__ASSERT(svc->attrs, "invalid parameters\n");
    b226:	682b      	ldr	r3, [r5, #0]
    b228:	b973      	cbnz	r3, b248 <bt_gatt_service_register+0x48>
    b22a:	496c      	ldr	r1, [pc, #432]	; (b3dc <bt_gatt_service_register+0x1dc>)
    b22c:	4a68      	ldr	r2, [pc, #416]	; (b3d0 <bt_gatt_service_register+0x1d0>)
    b22e:	4869      	ldr	r0, [pc, #420]	; (b3d4 <bt_gatt_service_register+0x1d4>)
    b230:	f240 4323 	movw	r3, #1059	; 0x423
    b234:	f018 f849 	bl	232ca <printk>
    b238:	4867      	ldr	r0, [pc, #412]	; (b3d8 <bt_gatt_service_register+0x1d8>)
    b23a:	f018 f846 	bl	232ca <printk>
    b23e:	4864      	ldr	r0, [pc, #400]	; (b3d0 <bt_gatt_service_register+0x1d0>)
    b240:	f240 4123 	movw	r1, #1059	; 0x423
    b244:	f018 f884 	bl	23350 <assert_post_action>
	__ASSERT(svc->attr_count, "invalid parameters\n");
    b248:	686b      	ldr	r3, [r5, #4]
    b24a:	b973      	cbnz	r3, b26a <bt_gatt_service_register+0x6a>
    b24c:	4964      	ldr	r1, [pc, #400]	; (b3e0 <bt_gatt_service_register+0x1e0>)
    b24e:	4a60      	ldr	r2, [pc, #384]	; (b3d0 <bt_gatt_service_register+0x1d0>)
    b250:	4860      	ldr	r0, [pc, #384]	; (b3d4 <bt_gatt_service_register+0x1d4>)
    b252:	f240 4324 	movw	r3, #1060	; 0x424
    b256:	f018 f838 	bl	232ca <printk>
    b25a:	485f      	ldr	r0, [pc, #380]	; (b3d8 <bt_gatt_service_register+0x1d8>)
    b25c:	f018 f835 	bl	232ca <printk>
    b260:	485b      	ldr	r0, [pc, #364]	; (b3d0 <bt_gatt_service_register+0x1d0>)
    b262:	f240 4124 	movw	r1, #1060	; 0x424
    b266:	f018 f873 	bl	23350 <assert_post_action>
	bt_gatt_init();
    b26a:	f7ff fe49 	bl	af00 <bt_gatt_init>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    b26e:	682b      	ldr	r3, [r5, #0]
    b270:	2400      	movs	r4, #0
    b272:	6818      	ldr	r0, [r3, #0]
    b274:	f88d 4000 	strb.w	r4, [sp]
    b278:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    b27c:	4669      	mov	r1, sp
    b27e:	f8ad 3002 	strh.w	r3, [sp, #2]
    b282:	f01a f9d5 	bl	25630 <bt_uuid_cmp>
    b286:	b920      	cbnz	r0, b292 <bt_gatt_service_register+0x92>
		return -EALREADY;
    b288:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    b28c:	b003      	add	sp, #12
    b28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    b292:	682b      	ldr	r3, [r5, #0]
    b294:	a901      	add	r1, sp, #4
    b296:	6818      	ldr	r0, [r3, #0]
    b298:	f88d 4004 	strb.w	r4, [sp, #4]
    b29c:	f641 0301 	movw	r3, #6145	; 0x1801
    b2a0:	f8ad 3006 	strh.w	r3, [sp, #6]
    b2a4:	f01a f9c4 	bl	25630 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    b2a8:	2800      	cmp	r0, #0
    b2aa:	d0ed      	beq.n	b288 <bt_gatt_service_register+0x88>
Z_GENLIST_IS_EMPTY(slist)
    b2ac:	4c4d      	ldr	r4, [pc, #308]	; (b3e4 <bt_gatt_service_register+0x1e4>)
	struct bt_gatt_attr *attrs = svc->attrs;
    b2ae:	f8d5 8000 	ldr.w	r8, [r5]
	if (sys_slist_is_empty(&db)) {
    b2b2:	6826      	ldr	r6, [r4, #0]
	u16_t count = svc->attr_count;
    b2b4:	f8b5 9004 	ldrh.w	r9, [r5, #4]
	if (sys_slist_is_empty(&db)) {
    b2b8:	b936      	cbnz	r6, b2c8 <bt_gatt_service_register+0xc8>
		handle = last_static_handle;
    b2ba:	4b4b      	ldr	r3, [pc, #300]	; (b3e8 <bt_gatt_service_register+0x1e8>)
    b2bc:	881f      	ldrh	r7, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    b2be:	f8df b138 	ldr.w	fp, [pc, #312]	; b3f8 <bt_gatt_service_register+0x1f8>
	const struct bt_gatt_attr *attr = NULL;
    b2c2:	f04f 0a00 	mov.w	sl, #0
    b2c6:	e019      	b.n	b2fc <bt_gatt_service_register+0xfc>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    b2c8:	6863      	ldr	r3, [r4, #4]
    b2ca:	2b00      	cmp	r3, #0
    b2cc:	d07b      	beq.n	b3c6 <bt_gatt_service_register+0x1c6>
	handle = last->attrs[last->attr_count - 1].handle;
    b2ce:	e953 3202 	ldrd	r3, r2, [r3, #-8]
    b2d2:	2114      	movs	r1, #20
    b2d4:	fb01 3302 	mla	r3, r1, r2, r3
    b2d8:	f833 7c04 	ldrh.w	r7, [r3, #-4]
    b2dc:	463e      	mov	r6, r7
    b2de:	e7ee      	b.n	b2be <bt_gatt_service_register+0xbe>
		if (!attrs->handle) {
    b2e0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    b2e4:	bb41      	cbnz	r1, b338 <bt_gatt_service_register+0x138>
			attrs->handle = ++handle;
    b2e6:	1c79      	adds	r1, r7, #1
    b2e8:	b289      	uxth	r1, r1
    b2ea:	f8a8 1010 	strh.w	r1, [r8, #16]
	for (; attrs && count; attrs++, count--) {
    b2ee:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    b2f2:	f108 0814 	add.w	r8, r8, #20
    b2f6:	fa1f f989 	uxth.w	r9, r9
    b2fa:	460f      	mov	r7, r1
    b2fc:	f1b8 0f00 	cmp.w	r8, #0
    b300:	d002      	beq.n	b308 <bt_gatt_service_register+0x108>
    b302:	f1b9 0f00 	cmp.w	r9, #0
    b306:	d1eb      	bne.n	b2e0 <bt_gatt_service_register+0xe0>
	if (last_handle == 0 || svc->attrs[0].handle > last_handle) {
    b308:	682f      	ldr	r7, [r5, #0]
    b30a:	8a38      	ldrh	r0, [r7, #16]
    b30c:	b10e      	cbz	r6, b312 <bt_gatt_service_register+0x112>
    b30e:	42b0      	cmp	r0, r6
    b310:	d92e      	bls.n	b370 <bt_gatt_service_register+0x170>
	parent->next = child;
    b312:	2200      	movs	r2, #0
		sys_slist_append(&db, &svc->node);
    b314:	f105 0308 	add.w	r3, r5, #8
    b318:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    b31a:	6862      	ldr	r2, [r4, #4]
    b31c:	2a00      	cmp	r2, #0
    b31e:	d145      	bne.n	b3ac <bt_gatt_service_register+0x1ac>
	list->head = node;
    b320:	e9c4 3300 	strd	r3, r3, [r4]
		    svc->attrs[svc->attr_count - 1].handle);
    b324:	686b      	ldr	r3, [r5, #4]
	sc_indicate(svc->attrs[0].handle,
    b326:	2214      	movs	r2, #20
    b328:	fb02 7303 	mla	r3, r2, r3, r7
    b32c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    b330:	f7ff fdb2 	bl	ae98 <sc_indicate>
	return 0;
    b334:	2000      	movs	r0, #0
    b336:	e7a9      	b.n	b28c <bt_gatt_service_register+0x8c>
		} else if (attrs->handle > handle) {
    b338:	42b9      	cmp	r1, r7
    b33a:	d8d8      	bhi.n	b2ee <bt_gatt_service_register+0xee>
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    b33c:	ab01      	add	r3, sp, #4
    b33e:	465a      	mov	r2, fp
    b340:	4608      	mov	r0, r1
	const struct bt_gatt_attr *attr = NULL;
    b342:	f8cd a004 	str.w	sl, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    b346:	f01a ffe1 	bl	2630c <bt_gatt_foreach_attr>
	return attr;
    b34a:	9b01      	ldr	r3, [sp, #4]
		} else if (find_attr(attrs->handle)) {
    b34c:	b173      	cbz	r3, b36c <bt_gatt_service_register+0x16c>
    b34e:	4b27      	ldr	r3, [pc, #156]	; (b3ec <bt_gatt_service_register+0x1ec>)
    b350:	4a27      	ldr	r2, [pc, #156]	; (b3f0 <bt_gatt_service_register+0x1f0>)
			BT_ERR("Unable to register handle 0x%04x",
    b352:	4828      	ldr	r0, [pc, #160]	; (b3f4 <bt_gatt_service_register+0x1f4>)
    b354:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    b358:	1ad2      	subs	r2, r2, r3
    b35a:	08d2      	lsrs	r2, r2, #3
    b35c:	0192      	lsls	r2, r2, #6
    b35e:	f042 0201 	orr.w	r2, r2, #1
    b362:	f018 f830 	bl	233c6 <log_1>
			return -EINVAL;
    b366:	f06f 0015 	mvn.w	r0, #21
    b36a:	e78f      	b.n	b28c <bt_gatt_service_register+0x8c>
    b36c:	4639      	mov	r1, r7
    b36e:	e7be      	b.n	b2ee <bt_gatt_service_register+0xee>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    b370:	6821      	ldr	r1, [r4, #0]
    b372:	2900      	cmp	r1, #0
    b374:	d0d6      	beq.n	b324 <bt_gatt_service_register+0x124>
    b376:	f1a1 0308 	sub.w	r3, r1, #8
    b37a:	2200      	movs	r2, #0
    b37c:	2b00      	cmp	r3, #0
    b37e:	d0d1      	beq.n	b324 <bt_gatt_service_register+0x124>
		if (tmp->attrs[0].handle > svc->attrs[0].handle) {
    b380:	681e      	ldr	r6, [r3, #0]
    b382:	8a36      	ldrh	r6, [r6, #16]
    b384:	4286      	cmp	r6, r0
    b386:	d914      	bls.n	b3b2 <bt_gatt_service_register+0x1b2>
			if (prev) {
    b388:	f105 0308 	add.w	r3, r5, #8
    b38c:	b112      	cbz	r2, b394 <bt_gatt_service_register+0x194>
Z_GENLIST_INSERT(slist, snode)
    b38e:	f112 0f08 	cmn.w	r2, #8
    b392:	d105      	bne.n	b3a0 <bt_gatt_service_register+0x1a0>
Z_GENLIST_PREPEND(slist, snode)
    b394:	6862      	ldr	r2, [r4, #4]
	parent->next = child;
    b396:	60a9      	str	r1, [r5, #8]
	list->head = node;
    b398:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    b39a:	2a00      	cmp	r2, #0
    b39c:	d1c2      	bne.n	b324 <bt_gatt_service_register+0x124>
    b39e:	e006      	b.n	b3ae <bt_gatt_service_register+0x1ae>
Z_GENLIST_INSERT(slist, snode)
    b3a0:	6891      	ldr	r1, [r2, #8]
	parent->next = child;
    b3a2:	60a9      	str	r1, [r5, #8]
Z_GENLIST_INSERT(slist, snode)
    b3a4:	2900      	cmp	r1, #0
    b3a6:	d0b8      	beq.n	b31a <bt_gatt_service_register+0x11a>
	parent->next = child;
    b3a8:	6093      	str	r3, [r2, #8]
	if (err < 0) {
    b3aa:	e7bb      	b.n	b324 <bt_gatt_service_register+0x124>
    b3ac:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b3ae:	6063      	str	r3, [r4, #4]
    b3b0:	e7b8      	b.n	b324 <bt_gatt_service_register+0x124>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b3b2:	f113 0f08 	cmn.w	r3, #8
    b3b6:	d0b5      	beq.n	b324 <bt_gatt_service_register+0x124>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b3b8:	689e      	ldr	r6, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    b3ba:	2e00      	cmp	r6, #0
    b3bc:	d0b2      	beq.n	b324 <bt_gatt_service_register+0x124>
    b3be:	461a      	mov	r2, r3
    b3c0:	f1a6 0308 	sub.w	r3, r6, #8
    b3c4:	e7da      	b.n	b37c <bt_gatt_service_register+0x17c>
	handle = last->attrs[last->attr_count - 1].handle;
    b3c6:	681b      	ldr	r3, [r3, #0]
    b3c8:	deff      	udf	#255	; 0xff
    b3ca:	bf00      	nop
    b3cc:	0002ba7a 	.word	0x0002ba7a
    b3d0:	0002b91a 	.word	0x0002b91a
    b3d4:	000297e6 	.word	0x000297e6
    b3d8:	0002ba7e 	.word	0x0002ba7e
    b3dc:	0002ba94 	.word	0x0002ba94
    b3e0:	0002ba9f 	.word	0x0002ba9f
    b3e4:	20000734 	.word	0x20000734
    b3e8:	20001cc0 	.word	0x20001cc0
    b3ec:	00028868 	.word	0x00028868
    b3f0:	00028920 	.word	0x00028920
    b3f4:	0002baaf 	.word	0x0002baaf
    b3f8:	0002608d 	.word	0x0002608d

0000b3fc <ccc_set_direct>:
{
    b3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b400:	b0b9      	sub	sp, #228	; 0xe4
    b402:	4688      	mov	r8, r1
    b404:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    b406:	4939      	ldr	r1, [pc, #228]	; (b4ec <ccc_set_direct+0xf0>)
    b408:	9840      	ldr	r0, [sp, #256]	; 0x100
    b40a:	466a      	mov	r2, sp
{
    b40c:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    b40e:	f018 fb87 	bl	23b20 <settings_name_steq>
    b412:	b978      	cbnz	r0, b434 <ccc_set_direct+0x38>
    b414:	4b36      	ldr	r3, [pc, #216]	; (b4f0 <ccc_set_direct+0xf4>)
    b416:	4937      	ldr	r1, [pc, #220]	; (b4f4 <ccc_set_direct+0xf8>)
			BT_ERR("Invalid key");
    b418:	4837      	ldr	r0, [pc, #220]	; (b4f8 <ccc_set_direct+0xfc>)
    b41a:	1ac9      	subs	r1, r1, r3
    b41c:	08c9      	lsrs	r1, r1, #3
    b41e:	0189      	lsls	r1, r1, #6
    b420:	f041 0101 	orr.w	r1, r1, #1
    b424:	f017 ffc2 	bl	233ac <log_0>
			return -EINVAL;
    b428:	f06f 0515 	mvn.w	r5, #21
}
    b42c:	4628      	mov	r0, r5
    b42e:	b039      	add	sp, #228	; 0xe4
    b430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    b434:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
    b436:	a901      	add	r1, sp, #4
    b438:	4630      	mov	r0, r6
    b43a:	f018 fb94 	bl	23b66 <settings_name_next>
		if (!name) {
    b43e:	b96e      	cbnz	r6, b45c <ccc_set_direct+0x60>
    b440:	492c      	ldr	r1, [pc, #176]	; (b4f4 <ccc_set_direct+0xf8>)
    b442:	4b2b      	ldr	r3, [pc, #172]	; (b4f0 <ccc_set_direct+0xf4>)
			BT_ERR("Insufficient number of arguments");
    b444:	482d      	ldr	r0, [pc, #180]	; (b4fc <ccc_set_direct+0x100>)
    b446:	1ac9      	subs	r1, r1, r3
    b448:	08c9      	lsrs	r1, r1, #3
    b44a:	0189      	lsls	r1, r1, #6
    b44c:	f041 0101 	orr.w	r1, r1, #1
    b450:	f017 ffac 	bl	233ac <log_0>
			return -EINVAL;
    b454:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    b458:	4625      	mov	r5, r4
    b45a:	e7e7      	b.n	b42c <ccc_set_direct+0x30>
		} else if (!next) {
    b45c:	9801      	ldr	r0, [sp, #4]
    b45e:	b9c8      	cbnz	r0, b494 <ccc_set_direct+0x98>
		err = bt_settings_decode_key(name, &addr);
    b460:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    b464:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    b468:	4649      	mov	r1, r9
    b46a:	4630      	mov	r0, r6
    b46c:	f019 ff0f 	bl	2528e <bt_settings_decode_key>
		if (err) {
    b470:	4605      	mov	r5, r0
    b472:	b1a0      	cbz	r0, b49e <ccc_set_direct+0xa2>
    b474:	4a1e      	ldr	r2, [pc, #120]	; (b4f0 <ccc_set_direct+0xf4>)
    b476:	4c1f      	ldr	r4, [pc, #124]	; (b4f4 <ccc_set_direct+0xf8>)
			BT_ERR("Unable to decode address %s", log_strdup(name));
    b478:	4630      	mov	r0, r6
    b47a:	1aa4      	subs	r4, r4, r2
    b47c:	08e4      	lsrs	r4, r4, #3
    b47e:	f7f6 ff5f 	bl	2340 <log_strdup>
    b482:	01a4      	lsls	r4, r4, #6
    b484:	f044 0401 	orr.w	r4, r4, #1
    b488:	4601      	mov	r1, r0
    b48a:	4622      	mov	r2, r4
    b48c:	481c      	ldr	r0, [pc, #112]	; (b500 <ccc_set_direct+0x104>)
    b48e:	f017 ff9a 	bl	233c6 <log_1>
    b492:	e7df      	b.n	b454 <ccc_set_direct+0x58>
			load.addr_with_id.id = strtol(next, NULL, 10);
    b494:	220a      	movs	r2, #10
    b496:	2100      	movs	r1, #0
    b498:	f019 fd27 	bl	24eea <strtol>
    b49c:	e7e0      	b.n	b460 <ccc_set_direct+0x64>
		load.addr_with_id.addr = &addr;
    b49e:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    b4a2:	f1b8 0f00 	cmp.w	r8, #0
    b4a6:	d01d      	beq.n	b4e4 <ccc_set_direct+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    b4a8:	ae08      	add	r6, sp, #32
    b4aa:	22c0      	movs	r2, #192	; 0xc0
    b4ac:	4631      	mov	r1, r6
    b4ae:	4638      	mov	r0, r7
    b4b0:	47a0      	blx	r4
			if (len < 0) {
    b4b2:	1e04      	subs	r4, r0, #0
    b4b4:	da0b      	bge.n	b4ce <ccc_set_direct+0xd2>
    b4b6:	4b0e      	ldr	r3, [pc, #56]	; (b4f0 <ccc_set_direct+0xf4>)
    b4b8:	4a0e      	ldr	r2, [pc, #56]	; (b4f4 <ccc_set_direct+0xf8>)
				BT_ERR("Failed to decode value (err %d)", len);
    b4ba:	4812      	ldr	r0, [pc, #72]	; (b504 <ccc_set_direct+0x108>)
    b4bc:	1ad2      	subs	r2, r2, r3
    b4be:	08d2      	lsrs	r2, r2, #3
    b4c0:	0192      	lsls	r2, r2, #6
    b4c2:	f042 0201 	orr.w	r2, r2, #1
    b4c6:	4621      	mov	r1, r4
    b4c8:	f017 ff7d 	bl	233c6 <log_1>
				return len;
    b4cc:	e7c4      	b.n	b458 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
    b4ce:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    b4d0:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    b4d2:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    b4d4:	4a0c      	ldr	r2, [pc, #48]	; (b508 <ccc_set_direct+0x10c>)
    b4d6:	ab04      	add	r3, sp, #16
    b4d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b4dc:	2001      	movs	r0, #1
    b4de:	f01a ff15 	bl	2630c <bt_gatt_foreach_attr>
	return 0;
    b4e2:	e7a3      	b.n	b42c <ccc_set_direct+0x30>
			load.count = 0;
    b4e4:	e9cd 0006 	strd	r0, r0, [sp, #24]
    b4e8:	e7f4      	b.n	b4d4 <ccc_set_direct+0xd8>
    b4ea:	bf00      	nop
    b4ec:	0002bad0 	.word	0x0002bad0
    b4f0:	00028868 	.word	0x00028868
    b4f4:	00028920 	.word	0x00028920
    b4f8:	0002bad7 	.word	0x0002bad7
    b4fc:	0002a92d 	.word	0x0002a92d
    b500:	0002ba1c 	.word	0x0002ba1c
    b504:	0002ba5a 	.word	0x0002ba5a
    b508:	0000a9a5 	.word	0x0000a9a5

0000b50c <bt_gatt_notify_cb>:
{
    b50c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b50e:	4605      	mov	r5, r0
    b510:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
    b512:	460e      	mov	r6, r1
    b514:	b971      	cbnz	r1, b534 <bt_gatt_notify_cb+0x28>
    b516:	4948      	ldr	r1, [pc, #288]	; (b638 <bt_gatt_notify_cb+0x12c>)
    b518:	4a48      	ldr	r2, [pc, #288]	; (b63c <bt_gatt_notify_cb+0x130>)
    b51a:	4849      	ldr	r0, [pc, #292]	; (b640 <bt_gatt_notify_cb+0x134>)
    b51c:	f240 731c 	movw	r3, #1820	; 0x71c
    b520:	f017 fed3 	bl	232ca <printk>
    b524:	4847      	ldr	r0, [pc, #284]	; (b644 <bt_gatt_notify_cb+0x138>)
    b526:	f017 fed0 	bl	232ca <printk>
    b52a:	4844      	ldr	r0, [pc, #272]	; (b63c <bt_gatt_notify_cb+0x130>)
    b52c:	f240 711c 	movw	r1, #1820	; 0x71c
    b530:	f017 ff0e 	bl	23350 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
    b534:	6873      	ldr	r3, [r6, #4]
    b536:	b973      	cbnz	r3, b556 <bt_gatt_notify_cb+0x4a>
    b538:	4943      	ldr	r1, [pc, #268]	; (b648 <bt_gatt_notify_cb+0x13c>)
    b53a:	4a40      	ldr	r2, [pc, #256]	; (b63c <bt_gatt_notify_cb+0x130>)
    b53c:	4840      	ldr	r0, [pc, #256]	; (b640 <bt_gatt_notify_cb+0x134>)
    b53e:	f240 731d 	movw	r3, #1821	; 0x71d
    b542:	f017 fec2 	bl	232ca <printk>
    b546:	483f      	ldr	r0, [pc, #252]	; (b644 <bt_gatt_notify_cb+0x138>)
    b548:	f017 febf 	bl	232ca <printk>
    b54c:	483b      	ldr	r0, [pc, #236]	; (b63c <bt_gatt_notify_cb+0x130>)
    b54e:	f240 711d 	movw	r1, #1821	; 0x71d
    b552:	f017 fefd 	bl	23350 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b556:	f3bf 8f5b 	dmb	ish
    b55a:	4b3c      	ldr	r3, [pc, #240]	; (b64c <bt_gatt_notify_cb+0x140>)
    b55c:	681b      	ldr	r3, [r3, #0]
    b55e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    b562:	079a      	lsls	r2, r3, #30
    b564:	d562      	bpl.n	b62c <bt_gatt_notify_cb+0x120>
	attr = params->attr;
    b566:	6870      	ldr	r0, [r6, #4]
    b568:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    b56a:	b115      	cbz	r5, b572 <bt_gatt_notify_cb+0x66>
    b56c:	7aab      	ldrb	r3, [r5, #10]
    b56e:	2b06      	cmp	r3, #6
    b570:	d15f      	bne.n	b632 <bt_gatt_notify_cb+0x126>
	handle = attr->handle ? : find_static_attr(attr);
    b572:	8a04      	ldrh	r4, [r0, #16]
    b574:	b93c      	cbnz	r4, b586 <bt_gatt_notify_cb+0x7a>
    b576:	f7ff f8f3 	bl	a760 <find_static_attr>
	if (!handle) {
    b57a:	4604      	mov	r4, r0
    b57c:	b918      	cbnz	r0, b586 <bt_gatt_notify_cb+0x7a>
		return -ENOENT;
    b57e:	f06f 0001 	mvn.w	r0, #1
}
    b582:	b00b      	add	sp, #44	; 0x2c
    b584:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid) {
    b586:	6832      	ldr	r2, [r6, #0]
    b588:	b1b2      	cbz	r2, b5b8 <bt_gatt_notify_cb+0xac>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    b58a:	a905      	add	r1, sp, #20
    b58c:	9102      	str	r1, [sp, #8]
    b58e:	4930      	ldr	r1, [pc, #192]	; (b650 <bt_gatt_notify_cb+0x144>)
    b590:	9101      	str	r1, [sp, #4]
    b592:	2101      	movs	r1, #1
		attr = NULL;
    b594:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    b596:	9100      	str	r1, [sp, #0]
    b598:	4620      	mov	r0, r4
    b59a:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    b59e:	9305      	str	r3, [sp, #20]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    b5a0:	f7ff fd64 	bl	b06c <bt_gatt_foreach_attr_type>
		if (!attr) {
    b5a4:	9805      	ldr	r0, [sp, #20]
    b5a6:	2800      	cmp	r0, #0
    b5a8:	d0e9      	beq.n	b57e <bt_gatt_notify_cb+0x72>
		handle = attr->handle ? : find_static_attr(attr);
    b5aa:	8a04      	ldrh	r4, [r0, #16]
    b5ac:	b924      	cbnz	r4, b5b8 <bt_gatt_notify_cb+0xac>
    b5ae:	f7ff f8d7 	bl	a760 <find_static_attr>
		if (!handle) {
    b5b2:	4604      	mov	r4, r0
    b5b4:	2800      	cmp	r0, #0
    b5b6:	d0e2      	beq.n	b57e <bt_gatt_notify_cb+0x72>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    b5b8:	9b05      	ldr	r3, [sp, #20]
    b5ba:	af07      	add	r7, sp, #28
    b5bc:	6818      	ldr	r0, [r3, #0]
    b5be:	2300      	movs	r3, #0
    b5c0:	f88d 301c 	strb.w	r3, [sp, #28]
    b5c4:	4639      	mov	r1, r7
    b5c6:	f642 0303 	movw	r3, #10243	; 0x2803
    b5ca:	f8ad 301e 	strh.w	r3, [sp, #30]
    b5ce:	f01a f82f 	bl	25630 <bt_uuid_cmp>
    b5d2:	b950      	cbnz	r0, b5ea <bt_gatt_notify_cb+0xde>
		struct bt_gatt_chrc *chrc = attr->user_data;
    b5d4:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    b5d6:	68c3      	ldr	r3, [r0, #12]
    b5d8:	799b      	ldrb	r3, [r3, #6]
    b5da:	06db      	lsls	r3, r3, #27
    b5dc:	d402      	bmi.n	b5e4 <bt_gatt_notify_cb+0xd8>
			return -EINVAL;
    b5de:	f06f 0015 	mvn.w	r0, #21
    b5e2:	e7ce      	b.n	b582 <bt_gatt_notify_cb+0x76>
		handle = bt_gatt_attr_value_handle(attr);
    b5e4:	f7ff fd2a 	bl	b03c <bt_gatt_attr_value_handle>
    b5e8:	4604      	mov	r4, r0
	if (conn) {
    b5ea:	b12d      	cbz	r5, b5f8 <bt_gatt_notify_cb+0xec>
		return gatt_notify(conn, handle, params);
    b5ec:	4632      	mov	r2, r6
    b5ee:	4621      	mov	r1, r4
    b5f0:	4628      	mov	r0, r5
    b5f2:	f7ff f8f5 	bl	a7e0 <gatt_notify>
    b5f6:	e7c4      	b.n	b582 <bt_gatt_notify_cb+0x76>
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    b5f8:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
    b5fc:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    b600:	f8ad 201a 	strh.w	r2, [sp, #26]
    b604:	4a13      	ldr	r2, [pc, #76]	; (b654 <bt_gatt_notify_cb+0x148>)
	data.err = -ENOTCONN;
    b606:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    b608:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    b60a:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    b60e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    b612:	4620      	mov	r0, r4
    b614:	9702      	str	r7, [sp, #8]
    b616:	462b      	mov	r3, r5
    b618:	aa06      	add	r2, sp, #24
    b61a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    b61e:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    b620:	f88d 5018 	strb.w	r5, [sp, #24]
    b624:	f7ff fd22 	bl	b06c <bt_gatt_foreach_attr_type>
	return data.err;
    b628:	9807      	ldr	r0, [sp, #28]
    b62a:	e7aa      	b.n	b582 <bt_gatt_notify_cb+0x76>
		return -EAGAIN;
    b62c:	f06f 000a 	mvn.w	r0, #10
    b630:	e7a7      	b.n	b582 <bt_gatt_notify_cb+0x76>
		return -ENOTCONN;
    b632:	f06f 0038 	mvn.w	r0, #56	; 0x38
    b636:	e7a4      	b.n	b582 <bt_gatt_notify_cb+0x76>
    b638:	0002bae3 	.word	0x0002bae3
    b63c:	0002b91a 	.word	0x0002b91a
    b640:	000297e6 	.word	0x000297e6
    b644:	0002ba7e 	.word	0x0002ba7e
    b648:	0002baea 	.word	0x0002baea
    b64c:	2000685c 	.word	0x2000685c
    b650:	000260f9 	.word	0x000260f9
    b654:	0000abc5 	.word	0x0000abc5

0000b658 <bt_gatt_indicate>:
{
    b658:	b5f0      	push	{r4, r5, r6, r7, lr}
    b65a:	4605      	mov	r5, r0
    b65c:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
    b65e:	460e      	mov	r6, r1
    b660:	b971      	cbnz	r1, b680 <bt_gatt_indicate+0x28>
    b662:	4949      	ldr	r1, [pc, #292]	; (b788 <bt_gatt_indicate+0x130>)
    b664:	4a49      	ldr	r2, [pc, #292]	; (b78c <bt_gatt_indicate+0x134>)
    b666:	484a      	ldr	r0, [pc, #296]	; (b790 <bt_gatt_indicate+0x138>)
    b668:	f240 735e 	movw	r3, #1886	; 0x75e
    b66c:	f017 fe2d 	bl	232ca <printk>
    b670:	4848      	ldr	r0, [pc, #288]	; (b794 <bt_gatt_indicate+0x13c>)
    b672:	f017 fe2a 	bl	232ca <printk>
    b676:	4845      	ldr	r0, [pc, #276]	; (b78c <bt_gatt_indicate+0x134>)
    b678:	f240 715e 	movw	r1, #1886	; 0x75e
    b67c:	f017 fe68 	bl	23350 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
    b680:	6873      	ldr	r3, [r6, #4]
    b682:	b973      	cbnz	r3, b6a2 <bt_gatt_indicate+0x4a>
    b684:	4944      	ldr	r1, [pc, #272]	; (b798 <bt_gatt_indicate+0x140>)
    b686:	4a41      	ldr	r2, [pc, #260]	; (b78c <bt_gatt_indicate+0x134>)
    b688:	4841      	ldr	r0, [pc, #260]	; (b790 <bt_gatt_indicate+0x138>)
    b68a:	f240 735f 	movw	r3, #1887	; 0x75f
    b68e:	f017 fe1c 	bl	232ca <printk>
    b692:	4840      	ldr	r0, [pc, #256]	; (b794 <bt_gatt_indicate+0x13c>)
    b694:	f017 fe19 	bl	232ca <printk>
    b698:	483c      	ldr	r0, [pc, #240]	; (b78c <bt_gatt_indicate+0x134>)
    b69a:	f240 715f 	movw	r1, #1887	; 0x75f
    b69e:	f017 fe57 	bl	23350 <assert_post_action>
    b6a2:	f3bf 8f5b 	dmb	ish
    b6a6:	4b3d      	ldr	r3, [pc, #244]	; (b79c <bt_gatt_indicate+0x144>)
    b6a8:	681b      	ldr	r3, [r3, #0]
    b6aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    b6ae:	079a      	lsls	r2, r3, #30
    b6b0:	d563      	bpl.n	b77a <bt_gatt_indicate+0x122>
	attr = params->attr;
    b6b2:	6870      	ldr	r0, [r6, #4]
    b6b4:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    b6b6:	b115      	cbz	r5, b6be <bt_gatt_indicate+0x66>
    b6b8:	7aab      	ldrb	r3, [r5, #10]
    b6ba:	2b06      	cmp	r3, #6
    b6bc:	d160      	bne.n	b780 <bt_gatt_indicate+0x128>
	handle = attr->handle ? : find_static_attr(attr);
    b6be:	8a04      	ldrh	r4, [r0, #16]
    b6c0:	b93c      	cbnz	r4, b6d2 <bt_gatt_indicate+0x7a>
    b6c2:	f7ff f84d 	bl	a760 <find_static_attr>
	if (!handle) {
    b6c6:	4604      	mov	r4, r0
    b6c8:	b918      	cbnz	r0, b6d2 <bt_gatt_indicate+0x7a>
		return -ENOENT;
    b6ca:	f06f 0001 	mvn.w	r0, #1
}
    b6ce:	b00b      	add	sp, #44	; 0x2c
    b6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid) {
    b6d2:	6832      	ldr	r2, [r6, #0]
    b6d4:	b1b2      	cbz	r2, b704 <bt_gatt_indicate+0xac>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    b6d6:	a905      	add	r1, sp, #20
    b6d8:	9102      	str	r1, [sp, #8]
    b6da:	4931      	ldr	r1, [pc, #196]	; (b7a0 <bt_gatt_indicate+0x148>)
    b6dc:	9101      	str	r1, [sp, #4]
    b6de:	2101      	movs	r1, #1
		attr = NULL;
    b6e0:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    b6e2:	9100      	str	r1, [sp, #0]
    b6e4:	4620      	mov	r0, r4
    b6e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    b6ea:	9305      	str	r3, [sp, #20]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    b6ec:	f7ff fcbe 	bl	b06c <bt_gatt_foreach_attr_type>
		if (!attr) {
    b6f0:	9805      	ldr	r0, [sp, #20]
    b6f2:	2800      	cmp	r0, #0
    b6f4:	d0e9      	beq.n	b6ca <bt_gatt_indicate+0x72>
		handle = attr->handle ? : find_static_attr(attr);
    b6f6:	8a04      	ldrh	r4, [r0, #16]
    b6f8:	b924      	cbnz	r4, b704 <bt_gatt_indicate+0xac>
    b6fa:	f7ff f831 	bl	a760 <find_static_attr>
		if (!handle) {
    b6fe:	4604      	mov	r4, r0
    b700:	2800      	cmp	r0, #0
    b702:	d0e2      	beq.n	b6ca <bt_gatt_indicate+0x72>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    b704:	9b05      	ldr	r3, [sp, #20]
    b706:	af07      	add	r7, sp, #28
    b708:	6818      	ldr	r0, [r3, #0]
    b70a:	2300      	movs	r3, #0
    b70c:	f88d 301c 	strb.w	r3, [sp, #28]
    b710:	4639      	mov	r1, r7
    b712:	f642 0303 	movw	r3, #10243	; 0x2803
    b716:	f8ad 301e 	strh.w	r3, [sp, #30]
    b71a:	f019 ff89 	bl	25630 <bt_uuid_cmp>
    b71e:	b950      	cbnz	r0, b736 <bt_gatt_indicate+0xde>
		struct bt_gatt_chrc *chrc = attr->user_data;
    b720:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    b722:	68c3      	ldr	r3, [r0, #12]
    b724:	799b      	ldrb	r3, [r3, #6]
    b726:	069b      	lsls	r3, r3, #26
    b728:	d402      	bmi.n	b730 <bt_gatt_indicate+0xd8>
			return -EINVAL;
    b72a:	f06f 0015 	mvn.w	r0, #21
    b72e:	e7ce      	b.n	b6ce <bt_gatt_indicate+0x76>
		handle = bt_gatt_attr_value_handle(attr);
    b730:	f7ff fc84 	bl	b03c <bt_gatt_attr_value_handle>
    b734:	4604      	mov	r4, r0
	if (conn) {
    b736:	b12d      	cbz	r5, b744 <bt_gatt_indicate+0xec>
		return gatt_indicate(conn, handle, params);
    b738:	4632      	mov	r2, r6
    b73a:	4621      	mov	r1, r4
    b73c:	4628      	mov	r0, r5
    b73e:	f7ff f8c5 	bl	a8cc <gatt_indicate>
    b742:	e7c4      	b.n	b6ce <bt_gatt_indicate+0x76>
	data.err = -ENOTCONN;
    b744:	f06f 0338 	mvn.w	r3, #56	; 0x38
    b748:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    b74a:	2302      	movs	r3, #2
    b74c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    b750:	f642 1302 	movw	r3, #10498	; 0x2902
    b754:	f8ad 301a 	strh.w	r3, [sp, #26]
    b758:	4b12      	ldr	r3, [pc, #72]	; (b7a4 <bt_gatt_indicate+0x14c>)
    b75a:	9301      	str	r3, [sp, #4]
    b75c:	2301      	movs	r3, #1
    b75e:	9300      	str	r3, [sp, #0]
    b760:	4620      	mov	r0, r4
    b762:	9702      	str	r7, [sp, #8]
    b764:	462b      	mov	r3, r5
    b766:	aa06      	add	r2, sp, #24
    b768:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    b76c:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    b76e:	f88d 5018 	strb.w	r5, [sp, #24]
    b772:	f7ff fc7b 	bl	b06c <bt_gatt_foreach_attr_type>
	return data.err;
    b776:	9807      	ldr	r0, [sp, #28]
    b778:	e7a9      	b.n	b6ce <bt_gatt_indicate+0x76>
		return -EAGAIN;
    b77a:	f06f 000a 	mvn.w	r0, #10
    b77e:	e7a6      	b.n	b6ce <bt_gatt_indicate+0x76>
		return -ENOTCONN;
    b780:	f06f 0038 	mvn.w	r0, #56	; 0x38
    b784:	e7a3      	b.n	b6ce <bt_gatt_indicate+0x76>
    b786:	bf00      	nop
    b788:	0002bae3 	.word	0x0002bae3
    b78c:	0002b91a 	.word	0x0002b91a
    b790:	000297e6 	.word	0x000297e6
    b794:	0002ba7e 	.word	0x0002ba7e
    b798:	0002baea 	.word	0x0002baea
    b79c:	2000685c 	.word	0x2000685c
    b7a0:	000260f9 	.word	0x000260f9
    b7a4:	0000abc5 	.word	0x0000abc5

0000b7a8 <sc_process>:
{
    b7a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b7aa:	f3bf 8f5b 	dmb	ish
    b7ae:	6a03      	ldr	r3, [r0, #32]
    b7b0:	f3bf 8f5b 	dmb	ish
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
    b7b4:	079b      	lsls	r3, r3, #30
{
    b7b6:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
    b7b8:	f100 0520 	add.w	r5, r0, #32
    b7bc:	d50e      	bpl.n	b7dc <sc_process+0x34>
    b7be:	4921      	ldr	r1, [pc, #132]	; (b844 <sc_process+0x9c>)
    b7c0:	4a21      	ldr	r2, [pc, #132]	; (b848 <sc_process+0xa0>)
    b7c2:	4822      	ldr	r0, [pc, #136]	; (b84c <sc_process+0xa4>)
    b7c4:	f240 3373 	movw	r3, #883	; 0x373
    b7c8:	f017 fd7f 	bl	232ca <printk>
    b7cc:	4820      	ldr	r0, [pc, #128]	; (b850 <sc_process+0xa8>)
    b7ce:	f017 fd7c 	bl	232ca <printk>
    b7d2:	481d      	ldr	r0, [pc, #116]	; (b848 <sc_process+0xa0>)
    b7d4:	f240 3173 	movw	r1, #883	; 0x373
    b7d8:	f017 fdba 	bl	23350 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
    b7dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b7e0:	9301      	str	r3, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b7e2:	f3bf 8f5b 	dmb	ish
    b7e6:	e855 3f00 	ldrex	r3, [r5]
    b7ea:	f023 0301 	bic.w	r3, r3, #1
    b7ee:	e845 3200 	strex	r2, r3, [r5]
    b7f2:	2a00      	cmp	r2, #0
    b7f4:	d1f7      	bne.n	b7e6 <sc_process+0x3e>
    b7f6:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    b7fa:	4b16      	ldr	r3, [pc, #88]	; (b854 <sc_process+0xac>)
    b7fc:	f844 3c14 	str.w	r3, [r4, #-20]
	sc->params.func = sc_indicate_rsp;
    b800:	4b15      	ldr	r3, [pc, #84]	; (b858 <sc_process+0xb0>)
    b802:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.data = &sc_range[0];
    b806:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    b808:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    b80a:	f844 3c0c 	str.w	r3, [r4, #-12]
	sc->params.len = sizeof(sc_range);
    b80e:	2304      	movs	r3, #4
	sc->start = 0U;
    b810:	f824 0c04 	strh.w	r0, [r4, #-4]
	sc->end = 0U;
    b814:	f824 0c02 	strh.w	r0, [r4, #-2]
	sc->params.len = sizeof(sc_range);
    b818:	f824 3c08 	strh.w	r3, [r4, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    b81c:	f1a4 0118 	sub.w	r1, r4, #24
    b820:	f7ff ff1a 	bl	b658 <bt_gatt_indicate>
    b824:	b958      	cbnz	r0, b83e <sc_process+0x96>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b826:	f3bf 8f5b 	dmb	ish
    b82a:	e855 3f00 	ldrex	r3, [r5]
    b82e:	f043 0302 	orr.w	r3, r3, #2
    b832:	e845 3200 	strex	r2, r3, [r5]
    b836:	2a00      	cmp	r2, #0
    b838:	d1f7      	bne.n	b82a <sc_process+0x82>
    b83a:	f3bf 8f5b 	dmb	ish
}
    b83e:	b003      	add	sp, #12
    b840:	bd30      	pop	{r4, r5, pc}
    b842:	bf00      	nop
    b844:	0002baf7 	.word	0x0002baf7
    b848:	0002b91a 	.word	0x0002b91a
    b84c:	000297e6 	.word	0x000297e6
    b850:	0002bb28 	.word	0x0002bb28
    b854:	00028fe4 	.word	0x00028fe4
    b858:	0000aa35 	.word	0x0000aa35

0000b85c <update_ccc>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    b85c:	6882      	ldr	r2, [r0, #8]
    b85e:	4b34      	ldr	r3, [pc, #208]	; (b930 <update_ccc+0xd4>)
    b860:	429a      	cmp	r2, r3
{
    b862:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_conn *conn = data->conn;
    b864:	680d      	ldr	r5, [r1, #0]
{
    b866:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    b868:	d11b      	bne.n	b8a2 <update_ccc+0x46>
	ccc = attr->user_data;
    b86a:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    b86c:	8933      	ldrh	r3, [r6, #8]
    b86e:	b1c3      	cbz	r3, b8a2 <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    b870:	4632      	mov	r2, r6
    b872:	4628      	mov	r0, r5
    b874:	f812 1b01 	ldrb.w	r1, [r2], #1
    b878:	f01a f86a 	bl	25950 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    b87c:	b188      	cbz	r0, b8a2 <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    b87e:	222a      	movs	r2, #42	; 0x2a
    b880:	4621      	mov	r1, r4
    b882:	4628      	mov	r0, r5
    b884:	f01a fd4f 	bl	26326 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    b888:	2803      	cmp	r0, #3
    b88a:	d10d      	bne.n	b8a8 <update_ccc+0x4c>
    b88c:	4a29      	ldr	r2, [pc, #164]	; (b934 <update_ccc+0xd8>)
    b88e:	4b2a      	ldr	r3, [pc, #168]	; (b938 <update_ccc+0xdc>)
				BT_WARN("CCC %p not writable", attr);
    b890:	482a      	ldr	r0, [pc, #168]	; (b93c <update_ccc+0xe0>)
    b892:	1ad2      	subs	r2, r2, r3
    b894:	08d2      	lsrs	r2, r2, #3
    b896:	0192      	lsls	r2, r2, #6
    b898:	f042 0202 	orr.w	r2, r2, #2
    b89c:	4621      	mov	r1, r4
    b89e:	f017 fd92 	bl	233c6 <log_1>
}
    b8a2:	2001      	movs	r0, #1
    b8a4:	b002      	add	sp, #8
    b8a6:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
    b8a8:	4631      	mov	r1, r6
    b8aa:	4620      	mov	r0, r4
    b8ac:	f01a fbf1 	bl	26092 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    b8b0:	4b23      	ldr	r3, [pc, #140]	; (b940 <update_ccc+0xe4>)
    b8b2:	429e      	cmp	r6, r3
    b8b4:	d1f5      	bne.n	b8a2 <update_ccc+0x46>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    b8b6:	7a28      	ldrb	r0, [r5, #8]
    b8b8:	f105 0174 	add.w	r1, r5, #116	; 0x74
    b8bc:	f7ff f862 	bl	a984 <find_sc_cfg>
	if (!cfg) {
    b8c0:	4604      	mov	r4, r0
    b8c2:	2800      	cmp	r0, #0
    b8c4:	d0ed      	beq.n	b8a2 <update_ccc+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
    b8c6:	8902      	ldrh	r2, [r0, #8]
    b8c8:	8943      	ldrh	r3, [r0, #10]
    b8ca:	ea53 0102 	orrs.w	r1, r3, r2
    b8ce:	d0e8      	beq.n	b8a2 <update_ccc+0x46>
	index = bt_conn_index(conn);
    b8d0:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    b8d2:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    b8d6:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    b8da:	f7fd fd95 	bl	9408 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    b8de:	4919      	ldr	r1, [pc, #100]	; (b944 <update_ccc+0xe8>)
    b8e0:	4a19      	ldr	r2, [pc, #100]	; (b948 <update_ccc+0xec>)
    b8e2:	2314      	movs	r3, #20
    b8e4:	fb03 1300 	mla	r3, r3, r0, r1
    b8e8:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    b8ea:	4a18      	ldr	r2, [pc, #96]	; (b94c <update_ccc+0xf0>)
    b8ec:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    b8ee:	aa01      	add	r2, sp, #4
    b8f0:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
    b8f2:	2204      	movs	r2, #4
    b8f4:	821a      	strh	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    b8f6:	b203      	sxth	r3, r0
    b8f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b8fc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    b900:	4628      	mov	r0, r5
    b902:	f7ff fea9 	bl	b658 <bt_gatt_indicate>
    b906:	b148      	cbz	r0, b91c <update_ccc+0xc0>
    b908:	490a      	ldr	r1, [pc, #40]	; (b934 <update_ccc+0xd8>)
    b90a:	4b0b      	ldr	r3, [pc, #44]	; (b938 <update_ccc+0xdc>)
		BT_ERR("SC restore indication failed");
    b90c:	4810      	ldr	r0, [pc, #64]	; (b950 <update_ccc+0xf4>)
    b90e:	1ac9      	subs	r1, r1, r3
    b910:	08c9      	lsrs	r1, r1, #3
    b912:	0189      	lsls	r1, r1, #6
    b914:	f041 0101 	orr.w	r1, r1, #1
    b918:	f017 fd48 	bl	233ac <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    b91c:	2204      	movs	r2, #4
    b91e:	2100      	movs	r1, #0
    b920:	f104 0008 	add.w	r0, r4, #8
    b924:	f019 fbdf 	bl	250e6 <memset>
		sc_store(cfg);
    b928:	4620      	mov	r0, r4
    b92a:	f7fe feab 	bl	a684 <sc_store>
    b92e:	e7b8      	b.n	b8a2 <update_ccc+0x46>
    b930:	0000ac85 	.word	0x0000ac85
    b934:	00028920 	.word	0x00028920
    b938:	00028868 	.word	0x00028868
    b93c:	0002bb43 	.word	0x0002bb43
    b940:	20006aa0 	.word	0x20006aa0
    b944:	2000077c 	.word	0x2000077c
    b948:	00028fe4 	.word	0x00028fe4
    b94c:	000260b7 	.word	0x000260b7
    b950:	0002bb57 	.word	0x0002bb57

0000b954 <bt_gatt_connected>:
{
    b954:	b530      	push	{r4, r5, lr}
    b956:	b08f      	sub	sp, #60	; 0x3c
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b958:	f100 0574 	add.w	r5, r0, #116	; 0x74
{
    b95c:	4604      	mov	r4, r0
	data.conn = conn;
    b95e:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    b960:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b962:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    b964:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b968:	4629      	mov	r1, r5
    b96a:	f019 ff52 	bl	25812 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    b96e:	b190      	cbz	r0, b996 <bt_gatt_connected+0x42>
		if (conn->id) {
    b970:	7a22      	ldrb	r2, [r4, #8]
    b972:	b1ca      	cbz	r2, b9a8 <bt_gatt_connected+0x54>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    b974:	ac02      	add	r4, sp, #8
    b976:	2104      	movs	r1, #4
    b978:	4620      	mov	r0, r4
    b97a:	f017 faea 	bl	22f52 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b97e:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b980:	4a0a      	ldr	r2, [pc, #40]	; (b9ac <bt_gatt_connected+0x58>)
    b982:	2124      	movs	r1, #36	; 0x24
    b984:	a805      	add	r0, sp, #20
    b986:	462b      	mov	r3, r5
    b988:	f7fa fc5e 	bl	6248 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    b98c:	aa05      	add	r2, sp, #20
    b98e:	4908      	ldr	r1, [pc, #32]	; (b9b0 <bt_gatt_connected+0x5c>)
    b990:	4610      	mov	r0, r2
    b992:	f7f7 fed3 	bl	373c <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b996:	4a07      	ldr	r2, [pc, #28]	; (b9b4 <bt_gatt_connected+0x60>)
    b998:	ab03      	add	r3, sp, #12
    b99a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b99e:	2001      	movs	r0, #1
    b9a0:	f01a fcb4 	bl	2630c <bt_gatt_foreach_attr>
}
    b9a4:	b00f      	add	sp, #60	; 0x3c
    b9a6:	bd30      	pop	{r4, r5, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b9a8:	9200      	str	r2, [sp, #0]
    b9aa:	e7e9      	b.n	b980 <bt_gatt_connected+0x2c>
    b9ac:	0002bad3 	.word	0x0002bad3
    b9b0:	0000b3fd 	.word	0x0000b3fd
    b9b4:	0000b85d 	.word	0x0000b85d

0000b9b8 <bt_gatt_store_ccc>:
{
    b9b8:	b570      	push	{r4, r5, r6, lr}
    b9ba:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    b9bc:	2300      	movs	r3, #0
{
    b9be:	4604      	mov	r4, r0
    b9c0:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    b9c2:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    b9c4:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    b9c8:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    b9ca:	4a18      	ldr	r2, [pc, #96]	; (ba2c <bt_gatt_store_ccc+0x74>)
    b9cc:	ab0d      	add	r3, sp, #52	; 0x34
    b9ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b9d2:	2001      	movs	r0, #1
    b9d4:	f01a fc9a 	bl	2630c <bt_gatt_foreach_attr>
	if (id) {
    b9d8:	b31c      	cbz	r4, ba22 <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
    b9da:	ae03      	add	r6, sp, #12
    b9dc:	4622      	mov	r2, r4
    b9de:	2104      	movs	r1, #4
    b9e0:	4630      	mov	r0, r6
    b9e2:	f017 fab6 	bl	22f52 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    b9e6:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    b9e8:	4a11      	ldr	r2, [pc, #68]	; (ba30 <bt_gatt_store_ccc+0x78>)
    b9ea:	462b      	mov	r3, r5
    b9ec:	2124      	movs	r1, #36	; 0x24
    b9ee:	a804      	add	r0, sp, #16
    b9f0:	f7fa fc2a 	bl	6248 <bt_settings_encode_key>
	if (save.count) {
    b9f4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    b9f6:	b1b2      	cbz	r2, ba26 <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
    b9f8:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    b9fa:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    b9fc:	a804      	add	r0, sp, #16
    b9fe:	f7f7 fe3d 	bl	367c <settings_save_one>
	if (err) {
    ba02:	4604      	mov	r4, r0
    ba04:	b150      	cbz	r0, ba1c <bt_gatt_store_ccc+0x64>
    ba06:	4a0b      	ldr	r2, [pc, #44]	; (ba34 <bt_gatt_store_ccc+0x7c>)
    ba08:	4b0b      	ldr	r3, [pc, #44]	; (ba38 <bt_gatt_store_ccc+0x80>)
    ba0a:	1ad2      	subs	r2, r2, r3
    ba0c:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
    ba0e:	0192      	lsls	r2, r2, #6
    ba10:	4601      	mov	r1, r0
    ba12:	f042 0201 	orr.w	r2, r2, #1
    ba16:	4809      	ldr	r0, [pc, #36]	; (ba3c <bt_gatt_store_ccc+0x84>)
    ba18:	f017 fcd5 	bl	233c6 <log_1>
}
    ba1c:	4620      	mov	r0, r4
    ba1e:	b040      	add	sp, #256	; 0x100
    ba20:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    ba22:	9400      	str	r4, [sp, #0]
    ba24:	e7e0      	b.n	b9e8 <bt_gatt_store_ccc+0x30>
		str = NULL;
    ba26:	4611      	mov	r1, r2
    ba28:	e7e8      	b.n	b9fc <bt_gatt_store_ccc+0x44>
    ba2a:	bf00      	nop
    ba2c:	0000a94d 	.word	0x0000a94d
    ba30:	0002bad3 	.word	0x0002bad3
    ba34:	00028920 	.word	0x00028920
    ba38:	00028868 	.word	0x00028868
    ba3c:	0002bb74 	.word	0x0002bb74

0000ba40 <bt_gatt_disconnected>:
{
    ba40:	b538      	push	{r3, r4, r5, lr}
    ba42:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    ba44:	4603      	mov	r3, r0
    ba46:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ba4a:	2001      	movs	r0, #1
    ba4c:	4a08      	ldr	r2, [pc, #32]	; (ba70 <bt_gatt_disconnected+0x30>)
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    ba4e:	f104 0574 	add.w	r5, r4, #116	; 0x74
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    ba52:	f01a fc5b 	bl	2630c <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    ba56:	7a20      	ldrb	r0, [r4, #8]
    ba58:	4629      	mov	r1, r5
    ba5a:	f019 feda 	bl	25812 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    ba5e:	b128      	cbz	r0, ba6c <bt_gatt_disconnected+0x2c>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    ba60:	7a20      	ldrb	r0, [r4, #8]
    ba62:	4629      	mov	r1, r5
}
    ba64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    ba68:	f7ff bfa6 	b.w	b9b8 <bt_gatt_store_ccc>
}
    ba6c:	bd38      	pop	{r3, r4, r5, pc}
    ba6e:	bf00      	nop
    ba70:	0000aaad 	.word	0x0000aaad

0000ba74 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    ba74:	4a0b      	ldr	r2, [pc, #44]	; (baa4 <bt_smp_accept+0x30>)
{
    ba76:	b508      	push	{r3, lr}
    ba78:	4603      	mov	r3, r0
		if (smp->chan.conn) {
    ba7a:	6810      	ldr	r0, [r2, #0]
    ba7c:	b918      	cbnz	r0, ba86 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
    ba7e:	4b0a      	ldr	r3, [pc, #40]	; (baa8 <bt_smp_accept+0x34>)
    ba80:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
    ba82:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    ba84:	bd08      	pop	{r3, pc}
    ba86:	4909      	ldr	r1, [pc, #36]	; (baac <bt_smp_accept+0x38>)
    ba88:	4a09      	ldr	r2, [pc, #36]	; (bab0 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    ba8a:	480a      	ldr	r0, [pc, #40]	; (bab4 <bt_smp_accept+0x40>)
    ba8c:	1a52      	subs	r2, r2, r1
    ba8e:	08d2      	lsrs	r2, r2, #3
    ba90:	0192      	lsls	r2, r2, #6
    ba92:	f042 0201 	orr.w	r2, r2, #1
    ba96:	4619      	mov	r1, r3
    ba98:	f017 fc95 	bl	233c6 <log_1>
	return -ENOMEM;
    ba9c:	f06f 000b 	mvn.w	r0, #11
    baa0:	e7f0      	b.n	ba84 <bt_smp_accept+0x10>
    baa2:	bf00      	nop
    baa4:	20000790 	.word	0x20000790
    baa8:	00029098 	.word	0x00029098
    baac:	00028868 	.word	0x00028868
    bab0:	000289d0 	.word	0x000289d0
    bab4:	0002bba0 	.word	0x0002bba0

0000bab8 <bt_mesh_reset>:

	return -ENOTSUP;
}

void bt_mesh_reset(void)
{
    bab8:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    baba:	4819      	ldr	r0, [pc, #100]	; (bb20 <bt_mesh_reset+0x68>)
    babc:	f3bf 8f5b 	dmb	ish
    bac0:	6803      	ldr	r3, [r0, #0]
    bac2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    bac6:	07db      	lsls	r3, r3, #31
    bac8:	d529      	bpl.n	bb1e <bt_mesh_reset+0x66>
		return;
	}

	bt_mesh.iv_index = 0U;
    baca:	2400      	movs	r4, #0
	bt_mesh.seq = 0U;

	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    bacc:	4621      	mov	r1, r4
    bace:	2204      	movs	r2, #4
	bt_mesh.iv_index = 0U;
    bad0:	f1a0 0508 	sub.w	r5, r0, #8
	bt_mesh.seq = 0U;
    bad4:	e940 4402 	strd	r4, r4, [r0, #-8]
	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    bad8:	f019 fb05 	bl	250e6 <memset>

	k_delayed_work_cancel(&bt_mesh.ivu_timer);
    badc:	f105 0074 	add.w	r0, r5, #116	; 0x74
    bae0:	f016 fac2 	bl	22068 <k_delayed_work_cancel>

	bt_mesh_cfg_reset();
    bae4:	f006 fdd2 	bl	1268c <bt_mesh_cfg_reset>

	bt_mesh_rx_reset();
    bae8:	f003 f9e0 	bl	eeac <bt_mesh_rx_reset>
	bt_mesh_tx_reset();
    baec:	f003 f9f0 	bl	eed0 <bt_mesh_tx_reset>

	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
		bt_mesh_lpn_disable(true);
    baf0:	2001      	movs	r0, #1
    baf2:	f008 fce7 	bl	144c4 <bt_mesh_lpn_disable>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_clear_net_idx(BT_MESH_KEY_ANY);
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		bt_mesh_proxy_gatt_disable();
    baf6:	f00b fa3d 	bl	16f74 <bt_mesh_proxy_gatt_disable>
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_clear_net();
    bafa:	f01b f9d4 	bl	26ea6 <bt_mesh_clear_net>
	}

	(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    bafe:	4621      	mov	r1, r4
    bb00:	2210      	movs	r2, #16
    bb02:	f105 0094 	add.w	r0, r5, #148	; 0x94
    bb06:	f019 faee 	bl	250e6 <memset>

	bt_mesh_scan_disable();
    bb0a:	f000 fa59 	bl	bfc0 <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
    bb0e:	f000 fd4d 	bl	c5ac <bt_mesh_beacon_disable>

	bt_mesh_comp_unprovision();
    bb12:	f003 fe65 	bl	f7e0 <bt_mesh_comp_unprovision>

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
    bb16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_prov_reset();
    bb1a:	f009 bf5f 	b.w	159dc <bt_mesh_prov_reset>
}
    bb1e:	bd38      	pop	{r3, r4, r5, pc}
    bb20:	20006ac0 	.word	0x20006ac0

0000bb24 <bt_mesh_is_provisioned>:
    bb24:	4b04      	ldr	r3, [pc, #16]	; (bb38 <bt_mesh_is_provisioned+0x14>)
    bb26:	f3bf 8f5b 	dmb	ish
    bb2a:	6818      	ldr	r0, [r3, #0]
    bb2c:	f3bf 8f5b 	dmb	ish

bool bt_mesh_is_provisioned(void)
{
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
}
    bb30:	f000 0001 	and.w	r0, r0, #1
    bb34:	4770      	bx	lr
    bb36:	bf00      	nop
    bb38:	20006ac0 	.word	0x20006ac0

0000bb3c <bt_mesh_start>:
		mod->cb->start(mod);
	}
}

int bt_mesh_start(void)
{
    bb3c:	b508      	push	{r3, lr}
	bt_mesh_net_start();
    bb3e:	f001 fec7 	bl	d8d0 <bt_mesh_net_start>
	bt_mesh_model_foreach(model_start, NULL);
    bb42:	4803      	ldr	r0, [pc, #12]	; (bb50 <bt_mesh_start+0x14>)
    bb44:	2100      	movs	r1, #0
    bb46:	f003 fd3f 	bl	f5c8 <bt_mesh_model_foreach>

	return 0;
}
    bb4a:	2000      	movs	r0, #0
    bb4c:	bd08      	pop	{r3, pc}
    bb4e:	bf00      	nop
    bb50:	000263bd 	.word	0x000263bd

0000bb54 <bt_mesh_provision>:
{
    bb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb58:	4698      	mov	r8, r3
    bb5a:	4c36      	ldr	r4, [pc, #216]	; (bc34 <bt_mesh_provision+0xe0>)
    bb5c:	4b36      	ldr	r3, [pc, #216]	; (bc38 <bt_mesh_provision+0xe4>)
	BT_DBG("net_idx 0x%04x flags 0x%02x iv_index 0x%04x",
    bb5e:	f8df a0ec 	ldr.w	sl, [pc, #236]	; bc4c <bt_mesh_provision+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bb62:	4d36      	ldr	r5, [pc, #216]	; (bc3c <bt_mesh_provision+0xe8>)
{
    bb64:	b087      	sub	sp, #28
    bb66:	1ae4      	subs	r4, r4, r3
    bb68:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
    bb6c:	08e4      	lsrs	r4, r4, #3
	BT_INFO("Primary Element: 0x%04x", addr);
    bb6e:	01a4      	lsls	r4, r4, #6
{
    bb70:	460e      	mov	r6, r1
    bb72:	4617      	mov	r7, r2
	BT_INFO("Primary Element: 0x%04x", addr);
    bb74:	4659      	mov	r1, fp
    bb76:	f044 0203 	orr.w	r2, r4, #3
{
    bb7a:	4681      	mov	r9, r0
	BT_DBG("net_idx 0x%04x flags 0x%02x iv_index 0x%04x",
    bb7c:	f044 0404 	orr.w	r4, r4, #4
	BT_INFO("Primary Element: 0x%04x", addr);
    bb80:	482f      	ldr	r0, [pc, #188]	; (bc40 <bt_mesh_provision+0xec>)
    bb82:	f017 fc20 	bl	233c6 <log_1>
	BT_DBG("net_idx 0x%04x flags 0x%02x iv_index 0x%04x",
    bb86:	482f      	ldr	r0, [pc, #188]	; (bc44 <bt_mesh_provision+0xf0>)
    bb88:	4623      	mov	r3, r4
    bb8a:	2204      	movs	r2, #4
    bb8c:	a902      	add	r1, sp, #8
    bb8e:	e9cd a602 	strd	sl, r6, [sp, #8]
    bb92:	e9cd 7804 	strd	r7, r8, [sp, #16]
    bb96:	f017 fc5f 	bl	23458 <log_n>
    bb9a:	f3bf 8f5b 	dmb	ish
    bb9e:	e855 0f00 	ldrex	r0, [r5]
    bba2:	f040 0301 	orr.w	r3, r0, #1
    bba6:	e845 3200 	strex	r2, r3, [r5]
    bbaa:	2a00      	cmp	r2, #0
    bbac:	d1f7      	bne.n	bb9e <bt_mesh_provision+0x4a>
    bbae:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_mesh.flags, BT_MESH_VALID)) {
    bbb2:	f010 0001 	ands.w	r0, r0, #1
    bbb6:	d13a      	bne.n	bc2e <bt_mesh_provision+0xda>
		if (bt_mesh_proxy_prov_disable(false) == 0) {
    bbb8:	f00b f982 	bl	16ec0 <bt_mesh_proxy_prov_disable>
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    bbbc:	4643      	mov	r3, r8
		if (bt_mesh_proxy_prov_disable(false) == 0) {
    bbbe:	9001      	str	r0, [sp, #4]
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    bbc0:	464a      	mov	r2, r9
    bbc2:	4630      	mov	r0, r6
    bbc4:	4639      	mov	r1, r7
    bbc6:	f000 ffc1 	bl	cb4c <bt_mesh_net_create>
	if (err) {
    bbca:	4606      	mov	r6, r0
    bbcc:	b198      	cbz	r0, bbf6 <bt_mesh_provision+0xa2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bbce:	f3bf 8f5b 	dmb	ish
    bbd2:	e855 3f00 	ldrex	r3, [r5]
    bbd6:	f023 0301 	bic.w	r3, r3, #1
    bbda:	e845 3200 	strex	r2, r3, [r5]
    bbde:	2a00      	cmp	r2, #0
    bbe0:	d1f7      	bne.n	bbd2 <bt_mesh_provision+0x7e>
    bbe2:	f3bf 8f5b 	dmb	ish
		if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) && pb_gatt_enabled) {
    bbe6:	9b01      	ldr	r3, [sp, #4]
    bbe8:	b90b      	cbnz	r3, bbee <bt_mesh_provision+0x9a>
			bt_mesh_proxy_prov_enable();
    bbea:	f00b f947 	bl	16e7c <bt_mesh_proxy_prov_enable>
}
    bbee:	4630      	mov	r0, r6
    bbf0:	b007      	add	sp, #28
    bbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_mesh.seq = 0U;
    bbf6:	f845 0c04 	str.w	r0, [r5, #-4]
	bt_mesh_comp_provision(addr);
    bbfa:	4658      	mov	r0, fp
    bbfc:	f003 fdda 	bl	f7b4 <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
    bc00:	9911      	ldr	r1, [sp, #68]	; 0x44
    bc02:	2210      	movs	r2, #16
    bc04:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    bc08:	f019 fa42 	bl	25090 <memcpy>
		BT_DBG("Storing network information persistently");
    bc0c:	4622      	mov	r2, r4
    bc0e:	4651      	mov	r1, sl
    bc10:	480d      	ldr	r0, [pc, #52]	; (bc48 <bt_mesh_provision+0xf4>)
    bc12:	f017 fbd8 	bl	233c6 <log_1>
		bt_mesh_store_net();
    bc16:	f01b f8e8 	bl	26dea <bt_mesh_store_net>
		bt_mesh_store_subnet(&bt_mesh.sub[0]);
    bc1a:	f105 00ec 	add.w	r0, r5, #236	; 0xec
    bc1e:	f01b f8f8 	bl	26e12 <bt_mesh_store_subnet>
		bt_mesh_store_iv(false);
    bc22:	4630      	mov	r0, r6
    bc24:	f01b f8e4 	bl	26df0 <bt_mesh_store_iv>
	bt_mesh_start();
    bc28:	f7ff ff88 	bl	bb3c <bt_mesh_start>
	return 0;
    bc2c:	e7df      	b.n	bbee <bt_mesh_provision+0x9a>
		return -EALREADY;
    bc2e:	f06f 0644 	mvn.w	r6, #68	; 0x44
    bc32:	e7dc      	b.n	bbee <bt_mesh_provision+0x9a>
    bc34:	00028988 	.word	0x00028988
    bc38:	00028868 	.word	0x00028868
    bc3c:	20006ac0 	.word	0x20006ac0
    bc40:	0002bbcc 	.word	0x0002bbcc
    bc44:	0002bbe4 	.word	0x0002bbe4
    bc48:	0002bc14 	.word	0x0002bc14
    bc4c:	0002bc4e 	.word	0x0002bc4e

0000bc50 <adv_alloc>:
static struct bt_mesh_adv adv_pool[CONFIG_BT_MESH_ADV_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id];
}
    bc50:	4b02      	ldr	r3, [pc, #8]	; (bc5c <adv_alloc+0xc>)
    bc52:	220c      	movs	r2, #12
    bc54:	fb02 3000 	mla	r0, r2, r0, r3
    bc58:	4770      	bx	lr
    bc5a:	bf00      	nop
    bc5c:	20000828 	.word	0x20000828

0000bc60 <adv_thread>:

	BT_DBG("Advertising stopped");
}

static void adv_thread(void *p1, void *p2, void *p3)
{
    bc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc64:	4b47      	ldr	r3, [pc, #284]	; (bd84 <adv_thread+0x124>)
    bc66:	4e48      	ldr	r6, [pc, #288]	; (bd88 <adv_thread+0x128>)

	while (1) {
		struct net_buf *buf;

		if (IS_ENABLED(CONFIG_BT_MESH_PROXY)) {
			buf = net_buf_get(&adv_queue, K_NO_WAIT);
    bc68:	f8df 812c 	ldr.w	r8, [pc, #300]	; bd98 <adv_thread+0x138>
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    bc6c:	f8df b12c 	ldr.w	fp, [pc, #300]	; bd9c <adv_thread+0x13c>
    bc70:	1af6      	subs	r6, r6, r3
{
    bc72:	b089      	sub	sp, #36	; 0x24
    bc74:	08f6      	lsrs	r6, r6, #3
			buf = net_buf_get(&adv_queue, K_NO_WAIT);
    bc76:	2100      	movs	r1, #0
    bc78:	4640      	mov	r0, r8
    bc7a:	f012 fad1 	bl	1e220 <net_buf_get>
    bc7e:	4604      	mov	r4, r0
			while (!buf) {
    bc80:	2c00      	cmp	r4, #0
    bc82:	d05d      	beq.n	bd40 <adv_thread+0xe0>
		if (!buf) {
			continue;
		}

		/* busy == 0 means this was canceled */
		if (BT_MESH_ADV(buf)->busy) {
    bc84:	6962      	ldr	r2, [r4, #20]
    bc86:	7a13      	ldrb	r3, [r2, #8]
    bc88:	0759      	lsls	r1, r3, #29
    bc8a:	d576      	bpl.n	bd7a <adv_thread+0x11a>
			BT_MESH_ADV(buf)->busy = 0U;
    bc8c:	f36f 0382 	bfc	r3, #2, #1
    bc90:	7213      	strb	r3, [r2, #8]
				   ADV_INT_FAST_MS : ADV_INT_DEFAULT_MS);
    bc92:	4b3e      	ldr	r3, [pc, #248]	; (bd8c <adv_thread+0x12c>)
    bc94:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    bc98:	2b08      	cmp	r3, #8
	const struct bt_mesh_send_cb *cb = BT_MESH_ADV(buf)->cb;
    bc9a:	6963      	ldr	r3, [r4, #20]
	void *cb_data = BT_MESH_ADV(buf)->cb_data;
    bc9c:	e9d3 7900 	ldrd	r7, r9, [r3]
	adv_int = MAX(adv_int_min,
    bca0:	7a5d      	ldrb	r5, [r3, #9]
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    bca2:	7a1b      	ldrb	r3, [r3, #8]
	adv_int = MAX(adv_int_min,
    bca4:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
    bca8:	f04f 000a 	mov.w	r0, #10
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    bcac:	f003 0303 	and.w	r3, r3, #3
				   ADV_INT_FAST_MS : ADV_INT_DEFAULT_MS);
    bcb0:	bf8c      	ite	hi
    bcb2:	2214      	movhi	r2, #20
    bcb4:	2264      	movls	r2, #100	; 0x64
	adv_int = MAX(adv_int_min,
    bcb6:	fb0c 0000 	mla	r0, ip, r0, r0
    bcba:	4290      	cmp	r0, r2
    bcbc:	f10c 0101 	add.w	r1, ip, #1
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    bcc0:	f81b 3003 	ldrb.w	r3, [fp, r3]
    bcc4:	f88d 3008 	strb.w	r3, [sp, #8]
	adv_int = MAX(adv_int_min,
    bcc8:	bfa8      	it	ge
    bcca:	eb01 0181 	addge.w	r1, r1, r1, lsl #2
	ad.data_len = buf->len;
    bcce:	89a3      	ldrh	r3, [r4, #12]
    bcd0:	f88d 3009 	strb.w	r3, [sp, #9]
	adv_int = MAX(adv_int_min,
    bcd4:	bfa8      	it	ge
    bcd6:	004a      	lslge	r2, r1, #1
	ad.data = buf->data;
    bcd8:	68a3      	ldr	r3, [r4, #8]
    bcda:	9303      	str	r3, [sp, #12]
	adv_int = MAX(adv_int_min,
    bcdc:	bfb8      	it	lt
    bcde:	b292      	uxthlt	r2, r2
		param.options = 0U;
    bce0:	2300      	movs	r3, #0
		    ((BT_MESH_TRANSMIT_COUNT(BT_MESH_ADV(buf)->xmit) + 1) *
    bce2:	f005 0107 	and.w	r1, r5, #7
		     (adv_int + 10)));
    bce6:	f102 050a 	add.w	r5, r2, #10
	duration = (MESH_SCAN_WINDOW_MS +
    bcea:	fb01 5505 	mla	r5, r1, r5, r5
	param.interval_min = ADV_SCAN_UNIT(adv_int);
    bcee:	00d2      	lsls	r2, r2, #3
    bcf0:	2105      	movs	r1, #5
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    bcf2:	9300      	str	r3, [sp, #0]
	param.interval_min = ADV_SCAN_UNIT(adv_int);
    bcf4:	fbb2 f2f1 	udiv	r2, r2, r1
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    bcf8:	a804      	add	r0, sp, #16
	param.interval_max = param.interval_min;
    bcfa:	e9cd 2206 	strd	r2, r2, [sp, #24]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    bcfe:	a902      	add	r1, sp, #8
    bd00:	2201      	movs	r2, #1
		param.options = 0U;
    bd02:	9305      	str	r3, [sp, #20]
	param.id = BT_ID_DEFAULT;
    bd04:	f88d 3010 	strb.w	r3, [sp, #16]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    bd08:	f019 fd85 	bl	25816 <bt_le_adv_start>
	duration = (MESH_SCAN_WINDOW_MS +
    bd0c:	351e      	adds	r5, #30
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    bd0e:	4682      	mov	sl, r0
	net_buf_unref(buf);
    bd10:	4620      	mov	r0, r4
	duration = (MESH_SCAN_WINDOW_MS +
    bd12:	b22d      	sxth	r5, r5
	net_buf_unref(buf);
    bd14:	f012 fbbc 	bl	1e490 <net_buf_unref>
	if (cb && cb->start) {
    bd18:	b12f      	cbz	r7, bd26 <adv_thread+0xc6>
    bd1a:	683b      	ldr	r3, [r7, #0]
    bd1c:	b11b      	cbz	r3, bd26 <adv_thread+0xc6>
		cb->start(duration, err, cb_data);
    bd1e:	b2a8      	uxth	r0, r5
    bd20:	464a      	mov	r2, r9
    bd22:	4651      	mov	r1, sl
    bd24:	4798      	blx	r3
	if (err) {
    bd26:	f1ba 0f00 	cmp.w	sl, #0
    bd2a:	d013      	beq.n	bd54 <adv_thread+0xf4>
		BT_ERR("Advertising failed: err %d", err);
    bd2c:	01b2      	lsls	r2, r6, #6
    bd2e:	4818      	ldr	r0, [pc, #96]	; (bd90 <adv_thread+0x130>)
    bd30:	f042 0201 	orr.w	r2, r2, #1
    bd34:	4651      	mov	r1, sl
		BT_ERR("Stopping advertising failed: err %d", err);
    bd36:	f017 fb46 	bl	233c6 <log_1>
	z_impl_k_yield();
    bd3a:	f015 fd27 	bl	2178c <z_impl_k_yield>
}
    bd3e:	e79a      	b.n	bc76 <adv_thread+0x16>
				timeout = bt_mesh_proxy_adv_start();
    bd40:	f00b f9a6 	bl	17090 <bt_mesh_proxy_adv_start>
    bd44:	4601      	mov	r1, r0
				buf = net_buf_get(&adv_queue, timeout);
    bd46:	4640      	mov	r0, r8
    bd48:	f012 fa6a 	bl	1e220 <net_buf_get>
    bd4c:	4604      	mov	r4, r0
				bt_mesh_proxy_adv_stop();
    bd4e:	f00b fb49 	bl	173e4 <bt_mesh_proxy_adv_stop>
    bd52:	e795      	b.n	bc80 <adv_thread+0x20>
	return z_impl_k_sleep(timeout);
    bd54:	4628      	mov	r0, r5
    bd56:	f015 fe5d 	bl	21a14 <z_impl_k_sleep>
	err = bt_le_adv_stop();
    bd5a:	f7fc fa6b 	bl	8234 <bt_le_adv_stop>
    bd5e:	4604      	mov	r4, r0
	if (cb && cb->end) {
    bd60:	b11f      	cbz	r7, bd6a <adv_thread+0x10a>
    bd62:	687b      	ldr	r3, [r7, #4]
    bd64:	b10b      	cbz	r3, bd6a <adv_thread+0x10a>
		cb->end(err, cb_data);
    bd66:	4649      	mov	r1, r9
    bd68:	4798      	blx	r3
	if (err) {
    bd6a:	2c00      	cmp	r4, #0
    bd6c:	d0e5      	beq.n	bd3a <adv_thread+0xda>
		BT_ERR("Stopping advertising failed: err %d", err);
    bd6e:	01b2      	lsls	r2, r6, #6
    bd70:	4808      	ldr	r0, [pc, #32]	; (bd94 <adv_thread+0x134>)
    bd72:	f042 0201 	orr.w	r2, r2, #1
    bd76:	4621      	mov	r1, r4
    bd78:	e7dd      	b.n	bd36 <adv_thread+0xd6>
			adv_send(buf);
		} else {
			net_buf_unref(buf);
    bd7a:	4620      	mov	r0, r4
    bd7c:	f012 fb88 	bl	1e490 <net_buf_unref>
    bd80:	e7db      	b.n	bd3a <adv_thread+0xda>
    bd82:	bf00      	nop
    bd84:	00028868 	.word	0x00028868
    bd88:	00028948 	.word	0x00028948
    bd8c:	200067d0 	.word	0x200067d0
    bd90:	0002bc60 	.word	0x0002bc60
    bd94:	0002bc7b 	.word	0x0002bc7b
    bd98:	20007534 	.word	0x20007534
    bd9c:	0002bd2c 	.word	0x0002bd2c

0000bda0 <bt_mesh_scan_cb>:
                bt_data_parse(buf, data_cb, &mesh_scan_data);
                net_buf_simple_restore(buf, &state);
        }
#endif

	if (adv_type != BT_HCI_ADV_NONCONN_IND) {
    bda0:	2a03      	cmp	r2, #3
{
    bda2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bda6:	460f      	mov	r7, r1
    bda8:	461c      	mov	r4, r3
	if (adv_type != BT_HCI_ADV_NONCONN_IND) {
    bdaa:	d025      	beq.n	bdf8 <bt_mesh_scan_cb+0x58>
		}

		net_buf_simple_restore(buf, &state);
		net_buf_simple_pull(buf, len);
	}
}
    bdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	state->offset = net_buf_simple_headroom(buf);
    bdb0:	4620      	mov	r0, r4
    bdb2:	f01c f88f 	bl	27ed4 <net_buf_simple_headroom>
    bdb6:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
    bdb8:	4620      	mov	r0, r4
	state->len = buf->len;
    bdba:	f8b4 8004 	ldrh.w	r8, [r4, #4]
    bdbe:	f01c f865 	bl	27e8c <net_buf_simple_pull_u8>
		buf->len = len - 1;
    bdc2:	1e6b      	subs	r3, r5, #1
		switch (type) {
    bdc4:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
    bdc6:	80a3      	strh	r3, [r4, #4]
		switch (type) {
    bdc8:	d007      	beq.n	bdda <bt_mesh_scan_cb+0x3a>
    bdca:	282b      	cmp	r0, #43	; 0x2b
    bdcc:	d02d      	beq.n	be2a <bt_mesh_scan_cb+0x8a>
    bdce:	2829      	cmp	r0, #41	; 0x29
    bdd0:	d108      	bne.n	bde4 <bt_mesh_scan_cb+0x44>
			bt_mesh_pb_adv_recv(buf);
    bdd2:	4620      	mov	r0, r4
    bdd4:	f00a fb2c 	bl	16430 <bt_mesh_pb_adv_recv>
			break;
    bdd8:	e004      	b.n	bde4 <bt_mesh_scan_cb+0x44>
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
    bdda:	2200      	movs	r2, #0
    bddc:	4639      	mov	r1, r7
    bdde:	4620      	mov	r0, r4
    bde0:	f001 fc0a 	bl	d5f8 <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
    bde4:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
    bde6:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
    bdea:	fa10 f686 	uxtah	r6, r0, r6
    bdee:	6026      	str	r6, [r4, #0]
		net_buf_simple_pull(buf, len);
    bdf0:	4629      	mov	r1, r5
    bdf2:	4620      	mov	r0, r4
    bdf4:	f012 fbd0 	bl	1e598 <net_buf_simple_pull>
	while (buf->len > 1) {
    bdf8:	88a3      	ldrh	r3, [r4, #4]
    bdfa:	2b01      	cmp	r3, #1
    bdfc:	d9d6      	bls.n	bdac <bt_mesh_scan_cb+0xc>
		len = net_buf_simple_pull_u8(buf);
    bdfe:	4620      	mov	r0, r4
    be00:	f01c f844 	bl	27e8c <net_buf_simple_pull_u8>
		if (len == 0U) {
    be04:	4605      	mov	r5, r0
    be06:	2800      	cmp	r0, #0
    be08:	d0d0      	beq.n	bdac <bt_mesh_scan_cb+0xc>
		if (len > buf->len) {
    be0a:	88a2      	ldrh	r2, [r4, #4]
    be0c:	b283      	uxth	r3, r0
    be0e:	429a      	cmp	r2, r3
    be10:	d2ce      	bcs.n	bdb0 <bt_mesh_scan_cb+0x10>
    be12:	4908      	ldr	r1, [pc, #32]	; (be34 <bt_mesh_scan_cb+0x94>)
    be14:	4b08      	ldr	r3, [pc, #32]	; (be38 <bt_mesh_scan_cb+0x98>)
			BT_WARN("AD malformed");
    be16:	4809      	ldr	r0, [pc, #36]	; (be3c <bt_mesh_scan_cb+0x9c>)
    be18:	1ac9      	subs	r1, r1, r3
    be1a:	08c9      	lsrs	r1, r1, #3
    be1c:	0189      	lsls	r1, r1, #6
}
    be1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("AD malformed");
    be22:	f041 0102 	orr.w	r1, r1, #2
    be26:	f017 bac1 	b.w	233ac <log_0>
			bt_mesh_beacon_recv(buf);
    be2a:	4620      	mov	r0, r4
    be2c:	f000 fa8c 	bl	c348 <bt_mesh_beacon_recv>
			break;
    be30:	e7d8      	b.n	bde4 <bt_mesh_scan_cb+0x44>
    be32:	bf00      	nop
    be34:	00028948 	.word	0x00028948
    be38:	00028868 	.word	0x00028868
    be3c:	0002bc9f 	.word	0x0002bc9f

0000be40 <bt_mesh_adv_update>:
	z_impl_k_queue_cancel_wait(queue);
    be40:	4801      	ldr	r0, [pc, #4]	; (be48 <bt_mesh_adv_update+0x8>)
    be42:	f014 ba4f 	b.w	202e4 <z_impl_k_queue_cancel_wait>
    be46:	bf00      	nop
    be48:	20007534 	.word	0x20007534

0000be4c <bt_mesh_adv_create_from_pool>:
{
    be4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be50:	461e      	mov	r6, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    be52:	4b17      	ldr	r3, [pc, #92]	; (beb0 <bt_mesh_adv_create_from_pool+0x64>)
    be54:	f3bf 8f5b 	dmb	ish
    be58:	681b      	ldr	r3, [r3, #0]
    be5a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    be5e:	f3c3 0840 	ubfx	r8, r3, #1, #1
    be62:	079b      	lsls	r3, r3, #30
{
    be64:	460d      	mov	r5, r1
    be66:	4617      	mov	r7, r2
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    be68:	d50d      	bpl.n	be86 <bt_mesh_adv_create_from_pool+0x3a>
    be6a:	4b12      	ldr	r3, [pc, #72]	; (beb4 <bt_mesh_adv_create_from_pool+0x68>)
    be6c:	4912      	ldr	r1, [pc, #72]	; (beb8 <bt_mesh_adv_create_from_pool+0x6c>)
		BT_WARN("Refusing to allocate buffer while suspended");
    be6e:	4813      	ldr	r0, [pc, #76]	; (bebc <bt_mesh_adv_create_from_pool+0x70>)
    be70:	1ac9      	subs	r1, r1, r3
    be72:	08c9      	lsrs	r1, r1, #3
    be74:	0189      	lsls	r1, r1, #6
    be76:	f041 0102 	orr.w	r1, r1, #2
    be7a:	f017 fa97 	bl	233ac <log_0>
		return NULL;
    be7e:	2400      	movs	r4, #0
}
    be80:	4620      	mov	r0, r4
    be82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	buf = net_buf_alloc(pool, timeout);
    be86:	9906      	ldr	r1, [sp, #24]
    be88:	f01b ffd8 	bl	27e3c <net_buf_alloc_fixed>
	if (!buf) {
    be8c:	4604      	mov	r4, r0
    be8e:	2800      	cmp	r0, #0
    be90:	d0f6      	beq.n	be80 <bt_mesh_adv_create_from_pool+0x34>
	adv = get_id(net_buf_id(buf));
    be92:	f012 f8d3 	bl	1e03c <net_buf_id>
    be96:	47a8      	blx	r5
    be98:	4605      	mov	r5, r0
	BT_MESH_ADV(buf) = adv;
    be9a:	6160      	str	r0, [r4, #20]
	(void)memset(adv, 0, sizeof(*adv));
    be9c:	220c      	movs	r2, #12
    be9e:	4641      	mov	r1, r8
    bea0:	f019 f921 	bl	250e6 <memset>
	adv->type         = type;
    bea4:	7a2b      	ldrb	r3, [r5, #8]
	adv->xmit         = xmit;
    bea6:	726e      	strb	r6, [r5, #9]
	adv->type         = type;
    bea8:	f367 0301 	bfi	r3, r7, #0, #2
    beac:	722b      	strb	r3, [r5, #8]
	return buf;
    beae:	e7e7      	b.n	be80 <bt_mesh_adv_create_from_pool+0x34>
    beb0:	20006ac0 	.word	0x20006ac0
    beb4:	00028868 	.word	0x00028868
    beb8:	00028948 	.word	0x00028948
    bebc:	0002bcac 	.word	0x0002bcac

0000bec0 <bt_mesh_adv_create>:
{
    bec0:	b507      	push	{r0, r1, r2, lr}
    bec2:	460b      	mov	r3, r1
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
    bec4:	9200      	str	r2, [sp, #0]
    bec6:	4904      	ldr	r1, [pc, #16]	; (bed8 <bt_mesh_adv_create+0x18>)
    bec8:	4602      	mov	r2, r0
    beca:	4804      	ldr	r0, [pc, #16]	; (bedc <bt_mesh_adv_create+0x1c>)
    becc:	f7ff ffbe 	bl	be4c <bt_mesh_adv_create_from_pool>
}
    bed0:	b003      	add	sp, #12
    bed2:	f85d fb04 	ldr.w	pc, [sp], #4
    bed6:	bf00      	nop
    bed8:	0000bc51 	.word	0x0000bc51
    bedc:	20007580 	.word	0x20007580

0000bee0 <bt_mesh_adv_send>:
{
    bee0:	b510      	push	{r4, lr}
	BT_MESH_ADV(buf)->cb = cb;
    bee2:	6944      	ldr	r4, [r0, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    bee4:	e9c4 1200 	strd	r1, r2, [r4]
	BT_MESH_ADV(buf)->busy = 1U;
    bee8:	6942      	ldr	r2, [r0, #20]
    beea:	7a13      	ldrb	r3, [r2, #8]
    beec:	f043 0304 	orr.w	r3, r3, #4
    bef0:	7213      	strb	r3, [r2, #8]
	net_buf_put(&adv_queue, net_buf_ref(buf));
    bef2:	f012 fb15 	bl	1e520 <net_buf_ref>
}
    bef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_buf_put(&adv_queue, net_buf_ref(buf));
    befa:	4601      	mov	r1, r0
    befc:	4801      	ldr	r0, [pc, #4]	; (bf04 <bt_mesh_adv_send+0x24>)
    befe:	f012 ba93 	b.w	1e428 <net_buf_put>
    bf02:	bf00      	nop
    bf04:	20007534 	.word	0x20007534

0000bf08 <bt_mesh_adv_init>:

void bt_mesh_adv_init(void)
{
    bf08:	b510      	push	{r4, lr}
    bf0a:	b086      	sub	sp, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    bf0c:	4c0b      	ldr	r4, [pc, #44]	; (bf3c <bt_mesh_adv_init+0x34>)
    bf0e:	490c      	ldr	r1, [pc, #48]	; (bf40 <bt_mesh_adv_init+0x38>)
    bf10:	2300      	movs	r3, #0
    bf12:	f06f 0208 	mvn.w	r2, #8
    bf16:	e9cd 3202 	strd	r3, r2, [sp, #8]
    bf1a:	e9cd 3304 	strd	r3, r3, [sp, #16]
    bf1e:	e9cd 3300 	strd	r3, r3, [sp]
    bf22:	f44f 7240 	mov.w	r2, #768	; 0x300
    bf26:	4b07      	ldr	r3, [pc, #28]	; (bf44 <bt_mesh_adv_init+0x3c>)
    bf28:	4620      	mov	r0, r4
    bf2a:	f015 fecf 	bl	21ccc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    bf2e:	4906      	ldr	r1, [pc, #24]	; (bf48 <bt_mesh_adv_init+0x40>)
    bf30:	4620      	mov	r0, r4
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_THREAD_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
	k_thread_name_set(&adv_thread_data, "BT Mesh adv");
}
    bf32:	b006      	add	sp, #24
    bf34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bf38:	f015 be8e 	b.w	21c58 <z_impl_k_thread_name_set>
    bf3c:	20000894 	.word	0x20000894
    bf40:	200035a0 	.word	0x200035a0
    bf44:	0000bc61 	.word	0x0000bc61
    bf48:	0002bcd8 	.word	0x0002bcd8

0000bf4c <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(void)
{
    bf4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_le_scan_param scan_param = {
    bf4e:	2214      	movs	r2, #20
    bf50:	2100      	movs	r1, #0
    bf52:	a801      	add	r0, sp, #4
    bf54:	f019 f8c7 	bl	250e6 <memset>
			.window     = MESH_SCAN_WINDOW };
	int err;

	BT_DBG("");

	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    bf58:	4913      	ldr	r1, [pc, #76]	; (bfa8 <bt_mesh_scan_enable+0x5c>)
	struct bt_le_scan_param scan_param = {
    bf5a:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    bf5e:	a801      	add	r0, sp, #4
	struct bt_le_scan_param scan_param = {
    bf60:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    bf62:	f7fc faf7 	bl	8554 <bt_le_scan_start>
	if (err && err != -EALREADY) {
    bf66:	4601      	mov	r1, r0
    bf68:	b1c8      	cbz	r0, bf9e <bt_mesh_scan_enable+0x52>
    bf6a:	f110 0f45 	cmn.w	r0, #69	; 0x45
    bf6e:	d016      	beq.n	bf9e <bt_mesh_scan_enable+0x52>
    bf70:	4b0e      	ldr	r3, [pc, #56]	; (bfac <bt_mesh_scan_enable+0x60>)
    bf72:	4a0f      	ldr	r2, [pc, #60]	; (bfb0 <bt_mesh_scan_enable+0x64>)
		BT_ERR("starting scan failed (err %d)", err);
    bf74:	480f      	ldr	r0, [pc, #60]	; (bfb4 <bt_mesh_scan_enable+0x68>)
    bf76:	1ad2      	subs	r2, r2, r3
    bf78:	08d2      	lsrs	r2, r2, #3
    bf7a:	0192      	lsls	r2, r2, #6
    bf7c:	f042 0201 	orr.w	r2, r2, #1
    bf80:	f017 fa21 	bl	233c6 <log_1>
  __ASM volatile ("dsb 0xF":::"memory");
    bf84:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    bf88:	490b      	ldr	r1, [pc, #44]	; (bfb8 <bt_mesh_scan_enable+0x6c>)
    bf8a:	4b0c      	ldr	r3, [pc, #48]	; (bfbc <bt_mesh_scan_enable+0x70>)
    bf8c:	68ca      	ldr	r2, [r1, #12]
    bf8e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    bf92:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    bf94:	60cb      	str	r3, [r1, #12]
    bf96:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    bf9a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    bf9c:	e7fd      	b.n	bf9a <bt_mesh_scan_enable+0x4e>
		NVIC_SystemReset();
		return err;
	}

	return 0;
}
    bf9e:	2000      	movs	r0, #0
    bfa0:	b007      	add	sp, #28
    bfa2:	f85d fb04 	ldr.w	pc, [sp], #4
    bfa6:	bf00      	nop
    bfa8:	0000bda1 	.word	0x0000bda1
    bfac:	00028868 	.word	0x00028868
    bfb0:	00028948 	.word	0x00028948
    bfb4:	0002bce4 	.word	0x0002bce4
    bfb8:	e000ed00 	.word	0xe000ed00
    bfbc:	05fa0004 	.word	0x05fa0004

0000bfc0 <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
    bfc0:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = bt_le_scan_stop();
    bfc2:	f7fc fb75 	bl	86b0 <bt_le_scan_stop>
	if (err && err != -EALREADY) {
    bfc6:	4604      	mov	r4, r0
    bfc8:	b168      	cbz	r0, bfe6 <bt_mesh_scan_disable+0x26>
    bfca:	f110 0f45 	cmn.w	r0, #69	; 0x45
    bfce:	d00c      	beq.n	bfea <bt_mesh_scan_disable+0x2a>
    bfd0:	4a07      	ldr	r2, [pc, #28]	; (bff0 <bt_mesh_scan_disable+0x30>)
    bfd2:	4b08      	ldr	r3, [pc, #32]	; (bff4 <bt_mesh_scan_disable+0x34>)
    bfd4:	1ad2      	subs	r2, r2, r3
    bfd6:	08d2      	lsrs	r2, r2, #3
		BT_ERR("stopping scan failed (err %d)", err);
    bfd8:	0192      	lsls	r2, r2, #6
    bfda:	4601      	mov	r1, r0
    bfdc:	f042 0201 	orr.w	r2, r2, #1
    bfe0:	4805      	ldr	r0, [pc, #20]	; (bff8 <bt_mesh_scan_disable+0x38>)
    bfe2:	f017 f9f0 	bl	233c6 <log_1>
		return err;
	}

	return 0;
}
    bfe6:	4620      	mov	r0, r4
    bfe8:	bd10      	pop	{r4, pc}
	return 0;
    bfea:	2400      	movs	r4, #0
    bfec:	e7fb      	b.n	bfe6 <bt_mesh_scan_disable+0x26>
    bfee:	bf00      	nop
    bff0:	00028948 	.word	0x00028948
    bff4:	00028868 	.word	0x00028868
    bff8:	0002bd02 	.word	0x0002bd02

0000bffc <k_work_submit_to_queue.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bffc:	4909      	ldr	r1, [pc, #36]	; (c024 <k_work_submit_to_queue.constprop.0+0x28>)
    bffe:	f3bf 8f5b 	dmb	ish
    c002:	e851 3f00 	ldrex	r3, [r1]
    c006:	f043 0201 	orr.w	r2, r3, #1
    c00a:	e841 2000 	strex	r0, r2, [r1]
    c00e:	2800      	cmp	r0, #0
    c010:	d1f7      	bne.n	c002 <k_work_submit_to_queue.constprop.0+0x6>
    c012:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    c016:	07db      	lsls	r3, r3, #31
    c018:	d403      	bmi.n	c022 <k_work_submit_to_queue.constprop.0+0x26>
		k_queue_append(&work_q->queue, work);
    c01a:	4803      	ldr	r0, [pc, #12]	; (c028 <k_work_submit_to_queue.constprop.0+0x2c>)
    c01c:	3908      	subs	r1, #8
    c01e:	f01c b95f 	b.w	282e0 <k_queue_append>
}
    c022:	4770      	bx	lr
    c024:	20000930 	.word	0x20000930
    c028:	20001c08 	.word	0x20001c08

0000c02c <bt_mesh_beacon_create>:
	sub->beacon_sent = k_uptime_get_32();
}

void bt_mesh_beacon_create(struct bt_mesh_subnet *sub,
			   struct net_buf_simple *buf)
{
    c02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c02e:	460c      	mov	r4, r1
    c030:	4605      	mov	r5, r0
	u8_t flags = bt_mesh_net_flags(sub);
    c032:	f01a f9fe 	bl	26432 <bt_mesh_net_flags>
	struct bt_mesh_subnet_keys *keys;

	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    c036:	2101      	movs	r1, #1
	u8_t flags = bt_mesh_net_flags(sub);
    c038:	4606      	mov	r6, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    c03a:	4620      	mov	r0, r4
    c03c:	f01b ff62 	bl	27f04 <net_buf_simple_add_u8>

	if (sub->kr_flag) {
    c040:	7fab      	ldrb	r3, [r5, #30]
    c042:	b1c3      	cbz	r3, c076 <bt_mesh_beacon_create+0x4a>
		keys = &sub->keys[1];
    c044:	f105 0789 	add.w	r7, r5, #137	; 0x89
	} else {
		keys = &sub->keys[0];
	}

	net_buf_simple_add_u8(buf, flags);
    c048:	4631      	mov	r1, r6
    c04a:	4620      	mov	r0, r4
    c04c:	f01b ff5a 	bl	27f04 <net_buf_simple_add_u8>

	/* Network ID */
	net_buf_simple_add_mem(buf, keys->net_id, 8);
    c050:	2208      	movs	r2, #8
    c052:	f107 0121 	add.w	r1, r7, #33	; 0x21
    c056:	4620      	mov	r0, r4
    c058:	f01b ff48 	bl	27eec <net_buf_simple_add_mem>

	/* IV Index */
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
    c05c:	4b07      	ldr	r3, [pc, #28]	; (c07c <bt_mesh_beacon_create+0x50>)
    c05e:	4620      	mov	r0, r4
    c060:	6819      	ldr	r1, [r3, #0]
    c062:	f01b ff74 	bl	27f4e <net_buf_simple_add_be32>

	net_buf_simple_add_mem(buf, sub->auth, 8);
    c066:	f105 0128 	add.w	r1, r5, #40	; 0x28
    c06a:	4620      	mov	r0, r4
    c06c:	2208      	movs	r2, #8

	BT_DBG("net_idx 0x%04x flags 0x%02x NetID %s", sub->net_idx,
	       flags, bt_hex(keys->net_id, 8));
	BT_DBG("IV Index 0x%08x Auth %s", bt_mesh.iv_index,
	       bt_hex(sub->auth, 8));
}
    c06e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
    c072:	f01b bf3b 	b.w	27eec <net_buf_simple_add_mem>
		keys = &sub->keys[0];
    c076:	f105 0730 	add.w	r7, r5, #48	; 0x30
    c07a:	e7e5      	b.n	c048 <bt_mesh_beacon_create+0x1c>
    c07c:	20006ab8 	.word	0x20006ab8

0000c080 <beacon_send>:
		sub->beacons_cur = 0U;
	}
}

static void beacon_send(struct k_work *work)
{
    c080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c084:	b08b      	sub	sp, #44	; 0x2c
	/* Don't send anything if we have an active provisioning link */
	if (IS_ENABLED(CONFIG_BT_MESH_PROV) && bt_prov_active()) {
    c086:	f01a ffd4 	bl	27032 <bt_prov_active>
    c08a:	b110      	cbz	r0, c092 <beacon_send+0x12>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c08c:	f241 3288 	movw	r2, #5000	; 0x1388
    c090:	e065      	b.n	c15e <beacon_send+0xde>
		return;
	}

	BT_DBG("");

	if (bt_mesh_is_provisioned()) {
    c092:	f7ff fd47 	bl	bb24 <bt_mesh_is_provisioned>
    c096:	4604      	mov	r4, r0
    c098:	2800      	cmp	r0, #0
    c09a:	f000 8085 	beq.w	c1a8 <beacon_send+0x128>
	first_half = !first_half;
    c09e:	4b85      	ldr	r3, [pc, #532]	; (c2b4 <beacon_send+0x234>)
    c0a0:	781a      	ldrb	r2, [r3, #0]
    c0a2:	f082 0201 	eor.w	r2, r2, #1
    c0a6:	701a      	strb	r2, [r3, #0]
	if (first_half) {
    c0a8:	4b83      	ldr	r3, [pc, #524]	; (c2b8 <beacon_send+0x238>)
    c0aa:	b9ca      	cbnz	r2, c0e0 <beacon_send+0x60>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c0ac:	f8b3 0110 	ldrh.w	r0, [r3, #272]	; 0x110
    c0b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c0b4:	4288      	cmp	r0, r1
		sub->beacons_last = sub->beacons_cur;
    c0b6:	bf1c      	itt	ne
    c0b8:	f893 10f9 	ldrbne.w	r1, [r3, #249]	; 0xf9
    c0bc:	f883 10f8 	strbne.w	r1, [r3, #248]	; 0xf8
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c0c0:	f8b3 11f4 	ldrh.w	r1, [r3, #500]	; 0x1f4
		sub->beacons_cur = 0U;
    c0c4:	bf18      	it	ne
    c0c6:	f883 20f9 	strbne.w	r2, [r3, #249]	; 0xf9
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c0ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c0ce:	4291      	cmp	r1, r2
		sub->beacons_last = sub->beacons_cur;
    c0d0:	bf1f      	itttt	ne
    c0d2:	f893 21dd 	ldrbne.w	r2, [r3, #477]	; 0x1dd
    c0d6:	f883 21dc 	strbne.w	r2, [r3, #476]	; 0x1dc
		sub->beacons_cur = 0U;
    c0da:	2200      	movne	r2, #0
    c0dc:	f883 21dd 	strbne.w	r2, [r3, #477]	; 0x1dd
	return z_impl_k_uptime_ticks();
    c0e0:	f01c f9de 	bl	284a0 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    c0e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    c0e8:	460a      	mov	r2, r1
    c0ea:	fba0 0103 	umull	r0, r1, r0, r3
    c0ee:	fb03 1102 	mla	r1, r3, r2, r1
    c0f2:	0bc4      	lsrs	r4, r0, #15
    c0f4:	f8df 91c0 	ldr.w	r9, [pc, #448]	; c2b8 <beacon_send+0x238>
		if (time_diff < K_SECONDS(600) &&
    c0f8:	4f70      	ldr	r7, [pc, #448]	; (c2bc <beacon_send+0x23c>)
		bt_mesh_adv_send(buf, &send_cb, sub);
    c0fa:	f8df 81e4 	ldr.w	r8, [pc, #484]	; c2e0 <beacon_send+0x260>
    c0fe:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    c102:	2500      	movs	r5, #0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c104:	f64f 76ff 	movw	r6, #65535	; 0xffff
    c108:	f8b9 3110 	ldrh.w	r3, [r9, #272]	; 0x110
    c10c:	42b3      	cmp	r3, r6
    c10e:	d03a      	beq.n	c186 <beacon_send+0x106>
		time_diff = now - sub->beacon_sent;
    c110:	f8d9 20f4 	ldr.w	r2, [r9, #244]	; 0xf4
    c114:	1aa2      	subs	r2, r4, r2
		if (time_diff < K_SECONDS(600) &&
    c116:	42ba      	cmp	r2, r7
    c118:	d80a      	bhi.n	c130 <beacon_send+0xb0>
		    time_diff < BEACON_THRESHOLD(sub)) {
    c11a:	f899 10f8 	ldrb.w	r1, [r9, #248]	; 0xf8
    c11e:	f242 7310 	movw	r3, #10000	; 0x2710
    c122:	fb01 3303 	mla	r3, r1, r3, r3
    c126:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
    c12a:	3b08      	subs	r3, #8
		if (time_diff < K_SECONDS(600) &&
    c12c:	429a      	cmp	r2, r3
    c12e:	d32a      	bcc.n	c186 <beacon_send+0x106>
		buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, PROV_XMIT,
    c130:	2200      	movs	r2, #0
    c132:	2108      	movs	r1, #8
    c134:	2002      	movs	r0, #2
    c136:	f7ff fec3 	bl	bec0 <bt_mesh_adv_create>
		if (!buf) {
    c13a:	4682      	mov	sl, r0
    c13c:	b9a0      	cbnz	r0, c168 <beacon_send+0xe8>
    c13e:	4960      	ldr	r1, [pc, #384]	; (c2c0 <beacon_send+0x240>)
    c140:	4b60      	ldr	r3, [pc, #384]	; (c2c4 <beacon_send+0x244>)
			BT_ERR("Unable to allocate beacon buffer");
    c142:	4861      	ldr	r0, [pc, #388]	; (c2c8 <beacon_send+0x248>)
    c144:	1ac9      	subs	r1, r1, r3
    c146:	08c9      	lsrs	r1, r1, #3
    c148:	0189      	lsls	r1, r1, #6
    c14a:	f041 0101 	orr.w	r1, r1, #1
    c14e:	f017 f92d 	bl	233ac <log_0>
		update_beacon_observation();
		secure_beacon_send();

		/* Only resubmit if beaconing is still enabled */
		if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED ||
    c152:	f006 f82f 	bl	121b4 <bt_mesh_beacon_get>
    c156:	2801      	cmp	r0, #1
    c158:	d11b      	bne.n	c192 <beacon_send+0x112>
    c15a:	f242 7210 	movw	r2, #10000	; 0x2710
    c15e:	495b      	ldr	r1, [pc, #364]	; (c2cc <beacon_send+0x24c>)
    c160:	485b      	ldr	r0, [pc, #364]	; (c2d0 <beacon_send+0x250>)
    c162:	f015 fef1 	bl	21f48 <k_delayed_work_submit_to_queue>
    c166:	e01c      	b.n	c1a2 <beacon_send+0x122>
    c168:	f109 0bf4 	add.w	fp, r9, #244	; 0xf4
		bt_mesh_beacon_create(sub, &buf->b);
    c16c:	f100 0108 	add.w	r1, r0, #8
    c170:	4658      	mov	r0, fp
    c172:	f7ff ff5b 	bl	c02c <bt_mesh_beacon_create>
		bt_mesh_adv_send(buf, &send_cb, sub);
    c176:	4650      	mov	r0, sl
    c178:	465a      	mov	r2, fp
    c17a:	4641      	mov	r1, r8
    c17c:	f7ff feb0 	bl	bee0 <bt_mesh_adv_send>
		net_buf_unref(buf);
    c180:	4650      	mov	r0, sl
    c182:	f012 f985 	bl	1e490 <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    c186:	f109 09e4 	add.w	r9, r9, #228	; 0xe4
    c18a:	2d00      	cmp	r5, #0
    c18c:	d1e1      	bne.n	c152 <beacon_send+0xd2>
    c18e:	2501      	movs	r5, #1
    c190:	e7ba      	b.n	c108 <beacon_send+0x88>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c192:	4b50      	ldr	r3, [pc, #320]	; (c2d4 <beacon_send+0x254>)
    c194:	f3bf 8f5b 	dmb	ish
    c198:	681b      	ldr	r3, [r3, #0]
    c19a:	f3bf 8f5b 	dmb	ish
		if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED ||
    c19e:	071b      	lsls	r3, r3, #28
    c1a0:	d4db      	bmi.n	c15a <beacon_send+0xda>
		}
	} else if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		unprovisioned_beacon_send();
		k_delayed_work_submit(&beacon_timer, UNPROVISIONED_INTERVAL);
	}
}
    c1a2:	b00b      	add	sp, #44	; 0x2c
    c1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t uri_hash[16] = { 0 };
    c1a8:	e9cd 0002 	strd	r0, r0, [sp, #8]
    c1ac:	e9cd 0004 	strd	r0, r0, [sp, #16]
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, UNPROV_XMIT, K_NO_WAIT);
    c1b0:	4602      	mov	r2, r0
    c1b2:	210a      	movs	r1, #10
    c1b4:	2002      	movs	r0, #2
    c1b6:	f7ff fe83 	bl	bec0 <bt_mesh_adv_create>
	if (!buf) {
    c1ba:	4606      	mov	r6, r0
    c1bc:	b950      	cbnz	r0, c1d4 <beacon_send+0x154>
    c1be:	4940      	ldr	r1, [pc, #256]	; (c2c0 <beacon_send+0x240>)
    c1c0:	4b40      	ldr	r3, [pc, #256]	; (c2c4 <beacon_send+0x244>)
		BT_ERR("Unable to allocate beacon buffer");
    c1c2:	4841      	ldr	r0, [pc, #260]	; (c2c8 <beacon_send+0x248>)
    c1c4:	1ac9      	subs	r1, r1, r3
    c1c6:	08c9      	lsrs	r1, r1, #3
    c1c8:	0189      	lsls	r1, r1, #6
    c1ca:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate URI buffer");
    c1ce:	f017 f8ed 	bl	233ac <log_0>
			return -ENOBUFS;
    c1d2:	e75b      	b.n	c08c <beacon_send+0xc>
	prov = bt_mesh_prov_get();
    c1d4:	f009 fb86 	bl	158e4 <bt_mesh_prov_get>
	net_buf_add_u8(buf, BEACON_TYPE_UNPROVISIONED);
    c1d8:	f106 0708 	add.w	r7, r6, #8
	prov = bt_mesh_prov_get();
    c1dc:	4605      	mov	r5, r0
	net_buf_add_u8(buf, BEACON_TYPE_UNPROVISIONED);
    c1de:	4621      	mov	r1, r4
    c1e0:	4638      	mov	r0, r7
    c1e2:	f01b fe8f 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, prov->uuid, 16);
    c1e6:	6829      	ldr	r1, [r5, #0]
    c1e8:	2210      	movs	r2, #16
    c1ea:	4638      	mov	r0, r7
    c1ec:	f01b fe7e 	bl	27eec <net_buf_simple_add_mem>
	if (prov->uri && bt_mesh_s1(prov->uri, uri_hash) == 0) {
    c1f0:	f8d5 8004 	ldr.w	r8, [r5, #4]
    c1f4:	f1b8 0f00 	cmp.w	r8, #0
    c1f8:	d036      	beq.n	c268 <beacon_send+0x1e8>

static inline bool bt_mesh_s1(const char *m, u8_t salt[16])
{
	const u8_t zero[16] = { 0 };

	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    c1fa:	4640      	mov	r0, r8
	const u8_t zero[16] = { 0 };
    c1fc:	e9cd 4406 	strd	r4, r4, [sp, #24]
    c200:	e9cd 4408 	strd	r4, r4, [sp, #32]
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    c204:	f018 ff12 	bl	2502c <strlen>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    c208:	ab02      	add	r3, sp, #8
	struct bt_mesh_sg sg = { m, len };
    c20a:	e9cd 8000 	strd	r8, r0, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    c20e:	2201      	movs	r2, #1
    c210:	4669      	mov	r1, sp
    c212:	a806      	add	r0, sp, #24
    c214:	f01a f9c4 	bl	265a0 <bt_mesh_aes_cmac>
    c218:	bb30      	cbnz	r0, c268 <beacon_send+0x1e8>
		oob_info = prov->oob_info | BT_MESH_PROV_OOB_URI;
    c21a:	8929      	ldrh	r1, [r5, #8]
    c21c:	f041 0102 	orr.w	r1, r1, #2
	net_buf_add_be16(buf, oob_info);
    c220:	4638      	mov	r0, r7
    c222:	f01b fe7f 	bl	27f24 <net_buf_simple_add_be16>
	net_buf_add_mem(buf, uri_hash, 4);
    c226:	2204      	movs	r2, #4
    c228:	a902      	add	r1, sp, #8
    c22a:	4638      	mov	r0, r7
    c22c:	f01b fe5e 	bl	27eec <net_buf_simple_add_mem>
	bt_mesh_adv_send(buf, NULL, NULL);
    c230:	2200      	movs	r2, #0
    c232:	4611      	mov	r1, r2
    c234:	4630      	mov	r0, r6
    c236:	f7ff fe53 	bl	bee0 <bt_mesh_adv_send>
	net_buf_unref(buf);
    c23a:	4630      	mov	r0, r6
    c23c:	f012 f928 	bl	1e490 <net_buf_unref>
	if (prov->uri) {
    c240:	686b      	ldr	r3, [r5, #4]
    c242:	2b00      	cmp	r3, #0
    c244:	f43f af22 	beq.w	c08c <beacon_send+0xc>
		buf = bt_mesh_adv_create(BT_MESH_ADV_URI, UNPROV_XMIT,
    c248:	2200      	movs	r2, #0
    c24a:	210a      	movs	r1, #10
    c24c:	2003      	movs	r0, #3
    c24e:	f7ff fe37 	bl	bec0 <bt_mesh_adv_create>
		if (!buf) {
    c252:	4604      	mov	r4, r0
    c254:	b950      	cbnz	r0, c26c <beacon_send+0x1ec>
    c256:	491a      	ldr	r1, [pc, #104]	; (c2c0 <beacon_send+0x240>)
    c258:	4b1a      	ldr	r3, [pc, #104]	; (c2c4 <beacon_send+0x244>)
			BT_ERR("Unable to allocate URI buffer");
    c25a:	481f      	ldr	r0, [pc, #124]	; (c2d8 <beacon_send+0x258>)
    c25c:	1ac9      	subs	r1, r1, r3
    c25e:	08c9      	lsrs	r1, r1, #3
    c260:	0189      	lsls	r1, r1, #6
    c262:	f041 0101 	orr.w	r1, r1, #1
    c266:	e7b2      	b.n	c1ce <beacon_send+0x14e>
		oob_info = prov->oob_info;
    c268:	8929      	ldrh	r1, [r5, #8]
    c26a:	e7d9      	b.n	c220 <beacon_send+0x1a0>
		len = strlen(prov->uri);
    c26c:	6868      	ldr	r0, [r5, #4]
    c26e:	f018 fedd 	bl	2502c <strlen>
		if (net_buf_tailroom(buf) < len) {
    c272:	f104 0708 	add.w	r7, r4, #8
		len = strlen(prov->uri);
    c276:	4606      	mov	r6, r0
		if (net_buf_tailroom(buf) < len) {
    c278:	4638      	mov	r0, r7
    c27a:	f01b fe2f 	bl	27edc <net_buf_simple_tailroom>
    c27e:	4286      	cmp	r6, r0
    c280:	d90d      	bls.n	c29e <beacon_send+0x21e>
    c282:	490f      	ldr	r1, [pc, #60]	; (c2c0 <beacon_send+0x240>)
    c284:	4b0f      	ldr	r3, [pc, #60]	; (c2c4 <beacon_send+0x244>)
			BT_WARN("Too long URI to fit advertising data");
    c286:	4815      	ldr	r0, [pc, #84]	; (c2dc <beacon_send+0x25c>)
    c288:	1ac9      	subs	r1, r1, r3
    c28a:	08c9      	lsrs	r1, r1, #3
    c28c:	0189      	lsls	r1, r1, #6
    c28e:	f041 0102 	orr.w	r1, r1, #2
    c292:	f017 f88b 	bl	233ac <log_0>
		net_buf_unref(buf);
    c296:	4620      	mov	r0, r4
    c298:	f012 f8fa 	bl	1e490 <net_buf_unref>
    c29c:	e6f6      	b.n	c08c <beacon_send+0xc>
			net_buf_add_mem(buf, prov->uri, len);
    c29e:	6869      	ldr	r1, [r5, #4]
    c2a0:	4632      	mov	r2, r6
    c2a2:	4638      	mov	r0, r7
    c2a4:	f01b fe22 	bl	27eec <net_buf_simple_add_mem>
			bt_mesh_adv_send(buf, NULL, NULL);
    c2a8:	2200      	movs	r2, #0
    c2aa:	4611      	mov	r1, r2
    c2ac:	4620      	mov	r0, r4
    c2ae:	f7ff fe17 	bl	bee0 <bt_mesh_adv_send>
    c2b2:	e7f0      	b.n	c296 <beacon_send+0x216>
    c2b4:	20002302 	.word	0x20002302
    c2b8:	20006ab8 	.word	0x20006ab8
    c2bc:	000927bf 	.word	0x000927bf
    c2c0:	00028950 	.word	0x00028950
    c2c4:	00028868 	.word	0x00028868
    c2c8:	0002bd30 	.word	0x0002bd30
    c2cc:	20000928 	.word	0x20000928
    c2d0:	20001c08 	.word	0x20001c08
    c2d4:	20006ac0 	.word	0x20006ac0
    c2d8:	0002bd51 	.word	0x0002bd51
    c2dc:	0002bd6f 	.word	0x0002bd6f
    c2e0:	000290c4 	.word	0x000290c4

0000c2e4 <bt_mesh_beacon_init>:
	}
}

void bt_mesh_beacon_init(void)
{
	k_delayed_work_init(&beacon_timer, beacon_send);
    c2e4:	4901      	ldr	r1, [pc, #4]	; (c2ec <bt_mesh_beacon_init+0x8>)
    c2e6:	4802      	ldr	r0, [pc, #8]	; (c2f0 <bt_mesh_beacon_init+0xc>)
    c2e8:	f01c b8ce 	b.w	28488 <k_delayed_work_init>
    c2ec:	0000c081 	.word	0x0000c081
    c2f0:	20000928 	.word	0x20000928

0000c2f4 <bt_mesh_beacon_ivu_initiator>:
}

void bt_mesh_beacon_ivu_initiator(bool enable)
{
    c2f4:	b508      	push	{r3, lr}
    c2f6:	4b12      	ldr	r3, [pc, #72]	; (c340 <bt_mesh_beacon_ivu_initiator+0x4c>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c2f8:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    c2fc:	b168      	cbz	r0, c31a <bt_mesh_beacon_ivu_initiator+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c2fe:	e853 2f00 	ldrex	r2, [r3]
    c302:	f042 0208 	orr.w	r2, r2, #8
    c306:	e843 2100 	strex	r1, r2, [r3]
    c30a:	2900      	cmp	r1, #0
    c30c:	d1f7      	bne.n	c2fe <bt_mesh_beacon_ivu_initiator+0xa>
    c30e:	f3bf 8f5b 	dmb	ish
	if (enable) {
		k_work_submit(&beacon_timer.work);
	} else if (bt_mesh_beacon_get() == BT_MESH_BEACON_DISABLED) {
		k_delayed_work_cancel(&beacon_timer);
	}
}
    c312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_submit_to_queue(&k_sys_work_q, work);
    c316:	f7ff be71 	b.w	bffc <k_work_submit_to_queue.constprop.0>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c31a:	e853 2f00 	ldrex	r2, [r3]
    c31e:	f022 0208 	bic.w	r2, r2, #8
    c322:	e843 2100 	strex	r1, r2, [r3]
    c326:	2900      	cmp	r1, #0
    c328:	d1f7      	bne.n	c31a <bt_mesh_beacon_ivu_initiator+0x26>
    c32a:	f3bf 8f5b 	dmb	ish
	} else if (bt_mesh_beacon_get() == BT_MESH_BEACON_DISABLED) {
    c32e:	f005 ff41 	bl	121b4 <bt_mesh_beacon_get>
    c332:	b920      	cbnz	r0, c33e <bt_mesh_beacon_ivu_initiator+0x4a>
}
    c334:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&beacon_timer);
    c338:	4802      	ldr	r0, [pc, #8]	; (c344 <bt_mesh_beacon_ivu_initiator+0x50>)
    c33a:	f015 be95 	b.w	22068 <k_delayed_work_cancel>
}
    c33e:	bd08      	pop	{r3, pc}
    c340:	20006ac0 	.word	0x20006ac0
    c344:	20000928 	.word	0x20000928

0000c348 <bt_mesh_beacon_recv>:
{
    c348:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (buf->len < 1) {
    c34c:	8883      	ldrh	r3, [r0, #4]
{
    c34e:	4605      	mov	r5, r0
	if (buf->len < 1) {
    c350:	b953      	cbnz	r3, c368 <bt_mesh_beacon_recv+0x20>
    c352:	4977      	ldr	r1, [pc, #476]	; (c530 <bt_mesh_beacon_recv+0x1e8>)
    c354:	4b77      	ldr	r3, [pc, #476]	; (c534 <bt_mesh_beacon_recv+0x1ec>)
		BT_ERR("Too short beacon");
    c356:	4878      	ldr	r0, [pc, #480]	; (c538 <bt_mesh_beacon_recv+0x1f0>)
    c358:	1ac9      	subs	r1, r1, r3
    c35a:	08c9      	lsrs	r1, r1, #3
    c35c:	0189      	lsls	r1, r1, #6
    c35e:	f041 0101 	orr.w	r1, r1, #1
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    c362:	f017 f823 	bl	233ac <log_0>
		return;
    c366:	e038      	b.n	c3da <bt_mesh_beacon_recv+0x92>
	type = net_buf_simple_pull_u8(buf);
    c368:	f01b fd90 	bl	27e8c <net_buf_simple_pull_u8>
	switch (type) {
    c36c:	4604      	mov	r4, r0
    c36e:	b158      	cbz	r0, c388 <bt_mesh_beacon_recv+0x40>
    c370:	2801      	cmp	r0, #1
    c372:	d035      	beq.n	c3e0 <bt_mesh_beacon_recv+0x98>
    c374:	4a6e      	ldr	r2, [pc, #440]	; (c530 <bt_mesh_beacon_recv+0x1e8>)
    c376:	4b6f      	ldr	r3, [pc, #444]	; (c534 <bt_mesh_beacon_recv+0x1ec>)
    c378:	1ad2      	subs	r2, r2, r3
    c37a:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Unknown beacon type 0x%02x", type);
    c37c:	0192      	lsls	r2, r2, #6
    c37e:	4601      	mov	r1, r0
    c380:	f042 0202 	orr.w	r2, r2, #2
    c384:	486d      	ldr	r0, [pc, #436]	; (c53c <bt_mesh_beacon_recv+0x1f4>)
    c386:	e00c      	b.n	c3a2 <bt_mesh_beacon_recv+0x5a>
	if (buf->len != 18 && buf->len != 22) {
    c388:	88a9      	ldrh	r1, [r5, #4]
    c38a:	f021 0304 	bic.w	r3, r1, #4
    c38e:	2b12      	cmp	r3, #18
    c390:	d00a      	beq.n	c3a8 <bt_mesh_beacon_recv+0x60>
    c392:	4a67      	ldr	r2, [pc, #412]	; (c530 <bt_mesh_beacon_recv+0x1e8>)
    c394:	4b67      	ldr	r3, [pc, #412]	; (c534 <bt_mesh_beacon_recv+0x1ec>)
		BT_ERR("Invalid unprovisioned beacon length (%u)", buf->len);
    c396:	486a      	ldr	r0, [pc, #424]	; (c540 <bt_mesh_beacon_recv+0x1f8>)
    c398:	1ad2      	subs	r2, r2, r3
    c39a:	08d2      	lsrs	r2, r2, #3
    c39c:	0192      	lsls	r2, r2, #6
    c39e:	f042 0201 	orr.w	r2, r2, #1
		BT_WARN("Unknown beacon type 0x%02x", type);
    c3a2:	f017 f810 	bl	233c6 <log_1>
    c3a6:	e018      	b.n	c3da <bt_mesh_beacon_recv+0x92>
	uuid = net_buf_simple_pull_mem(buf, 16);
    c3a8:	2110      	movs	r1, #16
    c3aa:	4628      	mov	r0, r5
    c3ac:	f012 f914 	bl	1e5d8 <net_buf_simple_pull_mem>
    c3b0:	4606      	mov	r6, r0
	oob_info = net_buf_simple_pull_be16(buf);
    c3b2:	4628      	mov	r0, r5
    c3b4:	f01b fd7a 	bl	27eac <net_buf_simple_pull_be16>
	if (buf->len == 4) {
    c3b8:	88ab      	ldrh	r3, [r5, #4]
    c3ba:	2b04      	cmp	r3, #4
	oob_info = net_buf_simple_pull_be16(buf);
    c3bc:	4607      	mov	r7, r0
	if (buf->len == 4) {
    c3be:	d104      	bne.n	c3ca <bt_mesh_beacon_recv+0x82>
		uri_hash_val = net_buf_simple_pull_be32(buf);
    c3c0:	4628      	mov	r0, r5
    c3c2:	f01b fd7e 	bl	27ec2 <net_buf_simple_pull_be32>
		uri_hash = &uri_hash_val;
    c3c6:	ac03      	add	r4, sp, #12
		uri_hash_val = net_buf_simple_pull_be32(buf);
    c3c8:	9003      	str	r0, [sp, #12]
	prov = bt_mesh_prov_get();
    c3ca:	f009 fa8b 	bl	158e4 <bt_mesh_prov_get>
	if (prov->unprovisioned_beacon) {
    c3ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
    c3d0:	b11b      	cbz	r3, c3da <bt_mesh_beacon_recv+0x92>
		prov->unprovisioned_beacon(uuid,
    c3d2:	4622      	mov	r2, r4
    c3d4:	4639      	mov	r1, r7
    c3d6:	4630      	mov	r0, r6
    c3d8:	4798      	blx	r3
}
    c3da:	b004      	add	sp, #16
    c3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buf->len < 21) {
    c3e0:	88a9      	ldrh	r1, [r5, #4]
    c3e2:	2914      	cmp	r1, #20
    c3e4:	d808      	bhi.n	c3f8 <bt_mesh_beacon_recv+0xb0>
    c3e6:	4a52      	ldr	r2, [pc, #328]	; (c530 <bt_mesh_beacon_recv+0x1e8>)
    c3e8:	4b52      	ldr	r3, [pc, #328]	; (c534 <bt_mesh_beacon_recv+0x1ec>)
		BT_ERR("Too short secure beacon (len %u)", buf->len);
    c3ea:	4856      	ldr	r0, [pc, #344]	; (c544 <bt_mesh_beacon_recv+0x1fc>)
    c3ec:	1ad2      	subs	r2, r2, r3
    c3ee:	08d2      	lsrs	r2, r2, #3
    c3f0:	0192      	lsls	r2, r2, #6
    c3f2:	f042 0201 	orr.w	r2, r2, #1
    c3f6:	e7d4      	b.n	c3a2 <bt_mesh_beacon_recv+0x5a>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c3f8:	4c53      	ldr	r4, [pc, #332]	; (c548 <bt_mesh_beacon_recv+0x200>)
	sub = cache_check(buf->data);
    c3fa:	682e      	ldr	r6, [r5, #0]
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c3fc:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
    c400:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c404:	429a      	cmp	r2, r3
    c406:	4627      	mov	r7, r4
    c408:	d12e      	bne.n	c468 <bt_mesh_beacon_recv+0x120>
    c40a:	f8b7 21f4 	ldrh.w	r2, [r7, #500]	; 0x1f4
    c40e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c412:	429a      	cmp	r2, r3
    c414:	d132      	bne.n	c47c <bt_mesh_beacon_recv+0x134>
	flags = net_buf_simple_pull_u8(buf);
    c416:	4628      	mov	r0, r5
	data = buf->data;
    c418:	f8d5 8000 	ldr.w	r8, [r5]
	flags = net_buf_simple_pull_u8(buf);
    c41c:	f01b fd36 	bl	27e8c <net_buf_simple_pull_u8>
	net_id = net_buf_simple_pull_mem(buf, 8);
    c420:	2108      	movs	r1, #8
	flags = net_buf_simple_pull_u8(buf);
    c422:	4606      	mov	r6, r0
	net_id = net_buf_simple_pull_mem(buf, 8);
    c424:	4628      	mov	r0, r5
    c426:	f012 f8d7 	bl	1e5d8 <net_buf_simple_pull_mem>
    c42a:	4604      	mov	r4, r0
	iv_index = net_buf_simple_pull_be32(buf);
    c42c:	4628      	mov	r0, r5
    c42e:	f01b fd48 	bl	27ec2 <net_buf_simple_pull_be32>
	sub = bt_mesh_subnet_find(net_id, flags, iv_index, auth, &new_key);
    c432:	ab03      	add	r3, sp, #12
    c434:	9300      	str	r3, [sp, #0]
    c436:	4602      	mov	r2, r0
    c438:	682b      	ldr	r3, [r5, #0]
	iv_index = net_buf_simple_pull_be32(buf);
    c43a:	4607      	mov	r7, r0
	sub = bt_mesh_subnet_find(net_id, flags, iv_index, auth, &new_key);
    c43c:	4631      	mov	r1, r6
    c43e:	4620      	mov	r0, r4
    c440:	f000 fee2 	bl	d208 <bt_mesh_subnet_find>
	if (!sub) {
    c444:	4604      	mov	r4, r0
    c446:	2800      	cmp	r0, #0
    c448:	d0c7      	beq.n	c3da <bt_mesh_beacon_recv+0x92>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !new_key) {
    c44a:	7fc3      	ldrb	r3, [r0, #31]
    c44c:	2b02      	cmp	r3, #2
    c44e:	d11e      	bne.n	c48e <bt_mesh_beacon_recv+0x146>
    c450:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c454:	b9db      	cbnz	r3, c48e <bt_mesh_beacon_recv+0x146>
    c456:	4936      	ldr	r1, [pc, #216]	; (c530 <bt_mesh_beacon_recv+0x1e8>)
    c458:	4b36      	ldr	r3, [pc, #216]	; (c534 <bt_mesh_beacon_recv+0x1ec>)
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    c45a:	483c      	ldr	r0, [pc, #240]	; (c54c <bt_mesh_beacon_recv+0x204>)
    c45c:	1ac9      	subs	r1, r1, r3
    c45e:	08c9      	lsrs	r1, r1, #3
    c460:	0189      	lsls	r1, r1, #6
    c462:	f041 0102 	orr.w	r1, r1, #2
    c466:	e77c      	b.n	c362 <bt_mesh_beacon_recv+0x1a>
		if (!memcmp(sub->beacon_cache, data, 21)) {
    c468:	2215      	movs	r2, #21
    c46a:	4631      	mov	r1, r6
    c46c:	f104 00fa 	add.w	r0, r4, #250	; 0xfa
    c470:	f018 fdfe 	bl	25070 <memcmp>
    c474:	2800      	cmp	r0, #0
    c476:	d1c8      	bne.n	c40a <bt_mesh_beacon_recv+0xc2>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    c478:	34f4      	adds	r4, #244	; 0xf4
    c47a:	e01d      	b.n	c4b8 <bt_mesh_beacon_recv+0x170>
		if (!memcmp(sub->beacon_cache, data, 21)) {
    c47c:	4834      	ldr	r0, [pc, #208]	; (c550 <bt_mesh_beacon_recv+0x208>)
    c47e:	2215      	movs	r2, #21
    c480:	4631      	mov	r1, r6
    c482:	f018 fdf5 	bl	25070 <memcmp>
    c486:	2800      	cmp	r0, #0
    c488:	d1c5      	bne.n	c416 <bt_mesh_beacon_recv+0xce>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    c48a:	4c32      	ldr	r4, [pc, #200]	; (c554 <bt_mesh_beacon_recv+0x20c>)
    c48c:	e014      	b.n	c4b8 <bt_mesh_beacon_recv+0x170>
	memcpy(sub->beacon_cache, data, 21);
    c48e:	2215      	movs	r2, #21
    c490:	4641      	mov	r1, r8
    c492:	1da0      	adds	r0, r4, #6
    c494:	f018 fdfc 	bl	25090 <memcpy>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
    c498:	2000      	movs	r0, #0
    c49a:	f000 f963 	bl	c764 <bt_mesh_subnet_get>
    c49e:	b1a8      	cbz	r0, c4cc <bt_mesh_beacon_recv+0x184>
    c4a0:	8ba3      	ldrh	r3, [r4, #28]
    c4a2:	b19b      	cbz	r3, c4cc <bt_mesh_beacon_recv+0x184>
    c4a4:	4922      	ldr	r1, [pc, #136]	; (c530 <bt_mesh_beacon_recv+0x1e8>)
    c4a6:	4b23      	ldr	r3, [pc, #140]	; (c534 <bt_mesh_beacon_recv+0x1ec>)
		BT_WARN("Ignoring secure beacon on non-primary subnet");
    c4a8:	482b      	ldr	r0, [pc, #172]	; (c558 <bt_mesh_beacon_recv+0x210>)
    c4aa:	1ac9      	subs	r1, r1, r3
    c4ac:	08c9      	lsrs	r1, r1, #3
    c4ae:	0189      	lsls	r1, r1, #6
    c4b0:	f041 0102 	orr.w	r1, r1, #2
    c4b4:	f016 ff7a 	bl	233ac <log_0>
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
    c4b8:	f005 fe7c 	bl	121b4 <bt_mesh_beacon_get>
    c4bc:	2801      	cmp	r0, #1
    c4be:	d18c      	bne.n	c3da <bt_mesh_beacon_recv+0x92>
	    sub->beacons_cur < 0xff) {
    c4c0:	7963      	ldrb	r3, [r4, #5]
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
    c4c2:	2bff      	cmp	r3, #255	; 0xff
    c4c4:	d089      	beq.n	c3da <bt_mesh_beacon_recv+0x92>
		sub->beacons_cur++;
    c4c6:	3301      	adds	r3, #1
    c4c8:	7163      	strb	r3, [r4, #5]
    c4ca:	e786      	b.n	c3da <bt_mesh_beacon_recv+0x92>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c4cc:	4b23      	ldr	r3, [pc, #140]	; (c55c <bt_mesh_beacon_recv+0x214>)
    c4ce:	f3bf 8f5b 	dmb	ish
    c4d2:	681a      	ldr	r2, [r3, #0]
    c4d4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    c4d8:	f012 0f08 	tst.w	r2, #8
    c4dc:	f3c6 0540 	ubfx	r5, r6, #1, #1
    c4e0:	d00b      	beq.n	c4fa <bt_mesh_beacon_recv+0x1b2>
    c4e2:	f3bf 8f5b 	dmb	ish
    c4e6:	681b      	ldr	r3, [r3, #0]
    c4e8:	f3bf 8f5b 	dmb	ish
    c4ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
    c4f0:	42ab      	cmp	r3, r5
    c4f2:	d102      	bne.n	c4fa <bt_mesh_beacon_recv+0x1b2>
		bt_mesh_beacon_ivu_initiator(false);
    c4f4:	2000      	movs	r0, #0
    c4f6:	f7ff fefd 	bl	c2f4 <bt_mesh_beacon_ivu_initiator>
	iv_change = bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
    c4fa:	4629      	mov	r1, r5
    c4fc:	4638      	mov	r0, r7
    c4fe:	f000 fc11 	bl	cd24 <bt_mesh_net_iv_update>
	kr_change = bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(flags), new_key);
    c502:	f89d 200c 	ldrb.w	r2, [sp, #12]
	iv_change = bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
    c506:	4605      	mov	r5, r0
	kr_change = bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(flags), new_key);
    c508:	f006 0101 	and.w	r1, r6, #1
    c50c:	4620      	mov	r0, r4
    c50e:	f000 fbb7 	bl	cc80 <bt_mesh_kr_update>
	if (kr_change) {
    c512:	b148      	cbz	r0, c528 <bt_mesh_beacon_recv+0x1e0>
		bt_mesh_net_beacon_update(sub);
    c514:	4620      	mov	r0, r4
    c516:	f000 faff 	bl	cb18 <bt_mesh_net_beacon_update>
	if (iv_change) {
    c51a:	b11d      	cbz	r5, c524 <bt_mesh_beacon_recv+0x1dc>
		bt_mesh_net_sec_update(NULL);
    c51c:	2000      	movs	r0, #0
		bt_mesh_net_sec_update(sub);
    c51e:	f019 ff94 	bl	2644a <bt_mesh_net_sec_update>
    c522:	e7c9      	b.n	c4b8 <bt_mesh_beacon_recv+0x170>
    c524:	4620      	mov	r0, r4
    c526:	e7fa      	b.n	c51e <bt_mesh_beacon_recv+0x1d6>
	if (iv_change) {
    c528:	2d00      	cmp	r5, #0
    c52a:	d0c5      	beq.n	c4b8 <bt_mesh_beacon_recv+0x170>
    c52c:	e7f6      	b.n	c51c <bt_mesh_beacon_recv+0x1d4>
    c52e:	bf00      	nop
    c530:	00028950 	.word	0x00028950
    c534:	00028868 	.word	0x00028868
    c538:	0002bd94 	.word	0x0002bd94
    c53c:	0002be4d 	.word	0x0002be4d
    c540:	0002bda5 	.word	0x0002bda5
    c544:	0002bdce 	.word	0x0002bdce
    c548:	20006ab8 	.word	0x20006ab8
    c54c:	0002bdef 	.word	0x0002bdef
    c550:	20006c96 	.word	0x20006c96
    c554:	20006c90 	.word	0x20006c90
    c558:	0002be20 	.word	0x0002be20
    c55c:	20006ac0 	.word	0x20006ac0

0000c560 <bt_mesh_beacon_enable>:

void bt_mesh_beacon_enable(void)
{
    c560:	b510      	push	{r4, lr}
	int i;

	if (!bt_mesh_is_provisioned()) {
    c562:	f7ff fadf 	bl	bb24 <bt_mesh_is_provisioned>
    c566:	b1c8      	cbz	r0, c59c <bt_mesh_beacon_enable+0x3c>
	}

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];

		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c568:	4c0e      	ldr	r4, [pc, #56]	; (c5a4 <bt_mesh_beacon_enable+0x44>)
    c56a:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
    c56e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c572:	429a      	cmp	r2, r3
    c574:	d006      	beq.n	c584 <bt_mesh_beacon_enable+0x24>
			continue;
		}

		sub->beacons_last = 0U;
    c576:	2300      	movs	r3, #0
		sub->beacons_cur = 0U;

		bt_mesh_net_beacon_update(sub);
    c578:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
		sub->beacons_last = 0U;
    c57c:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
		bt_mesh_net_beacon_update(sub);
    c580:	f000 faca 	bl	cb18 <bt_mesh_net_beacon_update>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c584:	f8b4 21f4 	ldrh.w	r2, [r4, #500]	; 0x1f4
    c588:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c58c:	429a      	cmp	r2, r3
    c58e:	d005      	beq.n	c59c <bt_mesh_beacon_enable+0x3c>
		sub->beacons_last = 0U;
    c590:	2300      	movs	r3, #0
		bt_mesh_net_beacon_update(sub);
    c592:	4805      	ldr	r0, [pc, #20]	; (c5a8 <bt_mesh_beacon_enable+0x48>)
		sub->beacons_last = 0U;
    c594:	f8a4 31dc 	strh.w	r3, [r4, #476]	; 0x1dc
		bt_mesh_net_beacon_update(sub);
    c598:	f000 fabe 	bl	cb18 <bt_mesh_net_beacon_update>
	}

	k_work_submit(&beacon_timer.work);
}
    c59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c5a0:	f7ff bd2c 	b.w	bffc <k_work_submit_to_queue.constprop.0>
    c5a4:	20006ab8 	.word	0x20006ab8
    c5a8:	20006c90 	.word	0x20006c90

0000c5ac <bt_mesh_beacon_disable>:
    c5ac:	4b05      	ldr	r3, [pc, #20]	; (c5c4 <bt_mesh_beacon_disable+0x18>)
    c5ae:	f3bf 8f5b 	dmb	ish
    c5b2:	681b      	ldr	r3, [r3, #0]
    c5b4:	f3bf 8f5b 	dmb	ish

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
    c5b8:	071b      	lsls	r3, r3, #28
    c5ba:	d402      	bmi.n	c5c2 <bt_mesh_beacon_disable+0x16>
		k_delayed_work_cancel(&beacon_timer);
    c5bc:	4802      	ldr	r0, [pc, #8]	; (c5c8 <bt_mesh_beacon_disable+0x1c>)
    c5be:	f015 bd53 	b.w	22068 <k_delayed_work_cancel>
	}
}
    c5c2:	4770      	bx	lr
    c5c4:	20006ac0 	.word	0x20006ac0
    c5c8:	20000928 	.word	0x20000928

0000c5cc <auth_match>:
}

static bool auth_match(struct bt_mesh_subnet_keys *keys,
		       const u8_t net_id[8], u8_t flags,
		       u32_t iv_index, const u8_t auth[8])
{
    c5cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    c5d0:	4604      	mov	r4, r0
	u8_t net_auth[8];

	if (memcmp(net_id, keys->net_id, 8)) {
    c5d2:	f104 0a21 	add.w	sl, r4, #33	; 0x21
{
    c5d6:	4608      	mov	r0, r1
    c5d8:	4690      	mov	r8, r2
	if (memcmp(net_id, keys->net_id, 8)) {
    c5da:	4651      	mov	r1, sl
    c5dc:	2208      	movs	r2, #8
{
    c5de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    c5e0:	4699      	mov	r9, r3
	if (memcmp(net_id, keys->net_id, 8)) {
    c5e2:	f018 fd45 	bl	25070 <memcmp>
    c5e6:	bb58      	cbnz	r0, c640 <auth_match+0x74>
		return false;
	}

	bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id, iv_index,
    c5e8:	ae02      	add	r6, sp, #8
    c5ea:	4652      	mov	r2, sl
    c5ec:	4641      	mov	r1, r8
    c5ee:	9600      	str	r6, [sp, #0]
    c5f0:	464b      	mov	r3, r9
    c5f2:	f104 0049 	add.w	r0, r4, #73	; 0x49
    c5f6:	f01a f987 	bl	26908 <bt_mesh_beacon_auth>
			    net_auth);

	if (memcmp(auth, net_auth, 8)) {
    c5fa:	2208      	movs	r2, #8
    c5fc:	4631      	mov	r1, r6
    c5fe:	4638      	mov	r0, r7
    c600:	f018 fd36 	bl	25070 <memcmp>
    c604:	b300      	cbz	r0, c648 <auth_match+0x7c>
    c606:	4b11      	ldr	r3, [pc, #68]	; (c64c <auth_match+0x80>)
    c608:	4c11      	ldr	r4, [pc, #68]	; (c650 <auth_match+0x84>)
		BT_WARN("Authentication Value %s", bt_hex(auth, 8));
    c60a:	2108      	movs	r1, #8
    c60c:	4638      	mov	r0, r7
    c60e:	1ae4      	subs	r4, r4, r3
    c610:	f7f9 fb36 	bl	5c80 <bt_hex_real>
    c614:	f7f5 fe94 	bl	2340 <log_strdup>
    c618:	08e4      	lsrs	r4, r4, #3
    c61a:	01a4      	lsls	r4, r4, #6
    c61c:	f044 0402 	orr.w	r4, r4, #2
    c620:	4622      	mov	r2, r4
    c622:	4601      	mov	r1, r0
    c624:	480b      	ldr	r0, [pc, #44]	; (c654 <auth_match+0x88>)
    c626:	f016 fece 	bl	233c6 <log_1>
		BT_WARN(" != %s", bt_hex(net_auth, 8));
    c62a:	2108      	movs	r1, #8
    c62c:	4630      	mov	r0, r6
    c62e:	f7f9 fb27 	bl	5c80 <bt_hex_real>
    c632:	f7f5 fe85 	bl	2340 <log_strdup>
    c636:	4622      	mov	r2, r4
    c638:	4601      	mov	r1, r0
    c63a:	4807      	ldr	r0, [pc, #28]	; (c658 <auth_match+0x8c>)
    c63c:	f016 fec3 	bl	233c6 <log_1>
		return false;
    c640:	2000      	movs	r0, #0
		return false;
	}

	return true;
}
    c642:	b004      	add	sp, #16
    c644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return true;
    c648:	2001      	movs	r0, #1
    c64a:	e7fa      	b.n	c642 <auth_match+0x76>
    c64c:	00028868 	.word	0x00028868
    c650:	00028990 	.word	0x00028990
    c654:	0002be77 	.word	0x0002be77
    c658:	0002be8f 	.word	0x0002be8f

0000c65c <atomic_get.constprop.0>:
    c65c:	4b03      	ldr	r3, [pc, #12]	; (c66c <atomic_get.constprop.0+0x10>)
    c65e:	f3bf 8f5b 	dmb	ish
    c662:	6898      	ldr	r0, [r3, #8]
    c664:	f3bf 8f5b 	dmb	ish
}
    c668:	4770      	bx	lr
    c66a:	bf00      	nop
    c66c:	20006ab8 	.word	0x20006ab8

0000c670 <net_decrypt.isra.0>:
	}

	return NULL;
}

static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    c670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		       struct net_buf_simple *buf)
{
	BT_DBG("NID 0x%02x net_idx 0x%04x", NID(data), sub->net_idx);
	BT_DBG("IVI %u net->iv_index 0x%08x", IVI(data), bt_mesh.iv_index);

	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
    c674:	4d39      	ldr	r5, [pc, #228]	; (c75c <net_decrypt.isra.0+0xec>)
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    c676:	e9dd 7408 	ldrd	r7, r4, [sp, #32]
    c67a:	4606      	mov	r6, r0
	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
    c67c:	6828      	ldr	r0, [r5, #0]
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    c67e:	469a      	mov	sl, r3
	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
    c680:	7813      	ldrb	r3, [r2, #0]
    c682:	f000 0001 	and.w	r0, r0, #1
    c686:	ea80 10d3 	eor.w	r0, r0, r3, lsr #7
    c68a:	7d3b      	ldrb	r3, [r7, #20]
    c68c:	f360 0300 	bfi	r3, r0, #0, #1
    c690:	753b      	strb	r3, [r7, #20]
	buf->len  = 0U;
    c692:	2300      	movs	r3, #0
    c694:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
    c696:	68a3      	ldr	r3, [r4, #8]
    c698:	6023      	str	r3, [r4, #0]
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    c69a:	4690      	mov	r8, r2
    c69c:	4689      	mov	r9, r1

	net_buf_simple_reset(buf);
	memcpy(net_buf_simple_add(buf, data_len), data, data_len);
    c69e:	4620      	mov	r0, r4
    c6a0:	4651      	mov	r1, sl
    c6a2:	f011 ffbb 	bl	1e61c <net_buf_simple_add>
    c6a6:	4652      	mov	r2, sl
    c6a8:	4641      	mov	r1, r8
    c6aa:	f018 fcf1 	bl	25090 <memcpy>

	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
    c6ae:	7d3b      	ldrb	r3, [r7, #20]
    c6b0:	6829      	ldr	r1, [r5, #0]
    c6b2:	6820      	ldr	r0, [r4, #0]
    c6b4:	f003 0301 	and.w	r3, r3, #1
    c6b8:	464a      	mov	r2, r9
    c6ba:	1ac9      	subs	r1, r1, r3
    c6bc:	f002 fe3a 	bl	f334 <bt_mesh_net_obfuscate>
    c6c0:	46ac      	mov	ip, r5
    c6c2:	2800      	cmp	r0, #0
    c6c4:	d140      	bne.n	c748 <net_decrypt.isra.0+0xd8>
		return -ENOENT;
	}

	rx->ctx.addr = SRC(buf->data);
    c6c6:	6821      	ldr	r1, [r4, #0]
	return ((u16_t)src[0] << 8) | src[1];
    c6c8:	794a      	ldrb	r2, [r1, #5]
    c6ca:	798b      	ldrb	r3, [r1, #6]
    c6cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c6d0:	b21b      	sxth	r3, r3
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    c6d2:	2b00      	cmp	r3, #0
	rx->ctx.addr = SRC(buf->data);
    c6d4:	813b      	strh	r3, [r7, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    c6d6:	dd3b      	ble.n	c750 <net_decrypt.isra.0+0xe0>
		BT_DBG("Ignoring non-unicast src addr 0x%04x", rx->ctx.addr);
		return -EINVAL;
	}

	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(rx, buf)) {
    c6d8:	7d3f      	ldrb	r7, [r7, #20]
    c6da:	f017 0330 	ands.w	r3, r7, #48	; 0x30
    c6de:	d125      	bne.n	c72c <net_decrypt.isra.0+0xbc>
    c6e0:	7948      	ldrb	r0, [r1, #5]
    c6e2:	798a      	ldrb	r2, [r1, #6]
		if (msg_cache[i].src == SRC(pdu->data) &&
    c6e4:	f8df e078 	ldr.w	lr, [pc, #120]	; c760 <net_decrypt.isra.0+0xf0>
    c6e8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    c6ec:	f83e 0023 	ldrh.w	r0, [lr, r3, lsl #2]
    c6f0:	f3c0 000e 	ubfx	r0, r0, #0, #15
    c6f4:	4290      	cmp	r0, r2
    c6f6:	d10f      	bne.n	c718 <net_decrypt.isra.0+0xa8>
    c6f8:	f891 8003 	ldrb.w	r8, [r1, #3]
    c6fc:	790d      	ldrb	r5, [r1, #4]
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    c6fe:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
	return ((u32_t)src[0] << 16) | sys_get_be16(&src[1]);
    c702:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
    c706:	f891 8002 	ldrb.w	r8, [r1, #2]
    c70a:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
    c70e:	f3c5 0510 	ubfx	r5, r5, #0, #17
		if (msg_cache[i].src == SRC(pdu->data) &&
    c712:	ebb5 3fd0 	cmp.w	r5, r0, lsr #15
    c716:	d01e      	beq.n	c756 <net_decrypt.isra.0+0xe6>
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    c718:	3301      	adds	r3, #1
    c71a:	2b0a      	cmp	r3, #10
    c71c:	d1e6      	bne.n	c6ec <net_decrypt.isra.0+0x7c>
	    rx->net_if == BT_MESH_NET_IF_PROXY_CFG) {
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
					   true);
	}

	return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx), false);
    c71e:	f8dc 2000 	ldr.w	r2, [ip]
    c722:	f007 0701 	and.w	r7, r7, #1
    c726:	2300      	movs	r3, #0
    c728:	1bd2      	subs	r2, r2, r7
    c72a:	e007      	b.n	c73c <net_decrypt.isra.0+0xcc>
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) &&
    c72c:	6829      	ldr	r1, [r5, #0]
    c72e:	f007 0201 	and.w	r2, r7, #1
    c732:	2b30      	cmp	r3, #48	; 0x30
    c734:	eba1 0202 	sub.w	r2, r1, r2
    c738:	d1f1      	bne.n	c71e <net_decrypt.isra.0+0xae>
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
    c73a:	2301      	movs	r3, #1
	return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx), false);
    c73c:	4621      	mov	r1, r4
    c73e:	4630      	mov	r0, r6
}
    c740:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx), false);
    c744:	f019 bfda 	b.w	266fc <bt_mesh_net_decrypt>
		return -ENOENT;
    c748:	f06f 0001 	mvn.w	r0, #1
}
    c74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    c750:	f06f 0015 	mvn.w	r0, #21
    c754:	e7fa      	b.n	c74c <net_decrypt.isra.0+0xdc>
		return -EALREADY;
    c756:	f06f 0044 	mvn.w	r0, #68	; 0x44
    c75a:	e7f7      	b.n	c74c <net_decrypt.isra.0+0xdc>
    c75c:	20006ab8 	.word	0x20006ab8
    c760:	2000095c 	.word	0x2000095c

0000c764 <bt_mesh_subnet_get>:
	if (net_idx == BT_MESH_KEY_ANY) {
    c764:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c768:	4298      	cmp	r0, r3
{
    c76a:	4602      	mov	r2, r0
	if (net_idx == BT_MESH_KEY_ANY) {
    c76c:	d011      	beq.n	c792 <bt_mesh_subnet_get+0x2e>
		if (bt_mesh.sub[i].net_idx == net_idx) {
    c76e:	480b      	ldr	r0, [pc, #44]	; (c79c <bt_mesh_subnet_get+0x38>)
    c770:	f8b0 3110 	ldrh.w	r3, [r0, #272]	; 0x110
    c774:	4293      	cmp	r3, r2
    c776:	4603      	mov	r3, r0
    c778:	d009      	beq.n	c78e <bt_mesh_subnet_get+0x2a>
    c77a:	f8b0 11f4 	ldrh.w	r1, [r0, #500]	; 0x1f4
    c77e:	4291      	cmp	r1, r2
    c780:	d109      	bne.n	c796 <bt_mesh_subnet_get+0x32>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    c782:	2001      	movs	r0, #1
			return &bt_mesh.sub[i];
    c784:	22e4      	movs	r2, #228	; 0xe4
    c786:	fb02 3000 	mla	r0, r2, r0, r3
    c78a:	30f4      	adds	r0, #244	; 0xf4
    c78c:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    c78e:	2000      	movs	r0, #0
    c790:	e7f8      	b.n	c784 <bt_mesh_subnet_get+0x20>
		return &bt_mesh.sub[0];
    c792:	4803      	ldr	r0, [pc, #12]	; (c7a0 <bt_mesh_subnet_get+0x3c>)
    c794:	4770      	bx	lr
	return NULL;
    c796:	2000      	movs	r0, #0
}
    c798:	4770      	bx	lr
    c79a:	bf00      	nop
    c79c:	20006ab8 	.word	0x20006ab8
    c7a0:	20006bac 	.word	0x20006bac

0000c7a4 <bt_mesh_net_keys_create>:
{
    c7a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	u8_t p[] = { 0 };
    c7a6:	2300      	movs	r3, #0
    c7a8:	f88d 300c 	strb.w	r3, [sp, #12]
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
    c7ac:	f100 0339 	add.w	r3, r0, #57	; 0x39
{
    c7b0:	460e      	mov	r6, r1
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
    c7b2:	9301      	str	r3, [sp, #4]
    c7b4:	f100 0311 	add.w	r3, r0, #17
    c7b8:	9300      	str	r3, [sp, #0]
{
    c7ba:	4605      	mov	r5, r0
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
    c7bc:	f10d 030f 	add.w	r3, sp, #15
    c7c0:	2201      	movs	r2, #1
    c7c2:	a903      	add	r1, sp, #12
    c7c4:	4630      	mov	r0, r6
    c7c6:	f002 fcf1 	bl	f1ac <bt_mesh_k2>
	if (err) {
    c7ca:	4604      	mov	r4, r0
    c7cc:	b160      	cbz	r0, c7e8 <bt_mesh_net_keys_create+0x44>
    c7ce:	4924      	ldr	r1, [pc, #144]	; (c860 <bt_mesh_net_keys_create+0xbc>)
    c7d0:	4b24      	ldr	r3, [pc, #144]	; (c864 <bt_mesh_net_keys_create+0xc0>)
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
    c7d2:	4825      	ldr	r0, [pc, #148]	; (c868 <bt_mesh_net_keys_create+0xc4>)
    c7d4:	1ac9      	subs	r1, r1, r3
    c7d6:	08c9      	lsrs	r1, r1, #3
    c7d8:	0189      	lsls	r1, r1, #6
    c7da:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to generate beacon key");
    c7de:	f016 fde5 	bl	233ac <log_0>
}
    c7e2:	4620      	mov	r0, r4
    c7e4:	b004      	add	sp, #16
    c7e6:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(keys->net, key, 16);
    c7e8:	2210      	movs	r2, #16
    c7ea:	4631      	mov	r1, r6
    c7ec:	4628      	mov	r0, r5
    c7ee:	f018 fc4f 	bl	25090 <memcpy>
	keys->nid = nid;
    c7f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c7f6:	742b      	strb	r3, [r5, #16]
	err = bt_mesh_k3(key, keys->net_id);
    c7f8:	f105 0121 	add.w	r1, r5, #33	; 0x21
    c7fc:	4630      	mov	r0, r6
    c7fe:	f002 fd2d 	bl	f25c <bt_mesh_k3>
	if (err) {
    c802:	4604      	mov	r4, r0
    c804:	b140      	cbz	r0, c818 <bt_mesh_net_keys_create+0x74>
    c806:	4916      	ldr	r1, [pc, #88]	; (c860 <bt_mesh_net_keys_create+0xbc>)
    c808:	4b16      	ldr	r3, [pc, #88]	; (c864 <bt_mesh_net_keys_create+0xc0>)
		BT_ERR("Unable to generate Net ID");
    c80a:	4818      	ldr	r0, [pc, #96]	; (c86c <bt_mesh_net_keys_create+0xc8>)
    c80c:	1ac9      	subs	r1, r1, r3
    c80e:	08c9      	lsrs	r1, r1, #3
    c810:	0189      	lsls	r1, r1, #6
    c812:	f041 0101 	orr.w	r1, r1, #1
    c816:	e7e2      	b.n	c7de <bt_mesh_net_keys_create+0x3a>
}

static inline int bt_mesh_identity_key(const u8_t net_key[16],
				       u8_t identity_key[16])
{
	return bt_mesh_id128(net_key, "nkik", identity_key);
    c818:	4915      	ldr	r1, [pc, #84]	; (c870 <bt_mesh_net_keys_create+0xcc>)
    c81a:	f105 0229 	add.w	r2, r5, #41	; 0x29
    c81e:	4630      	mov	r0, r6
    c820:	f002 fd72 	bl	f308 <bt_mesh_id128>
	if (err) {
    c824:	4604      	mov	r4, r0
    c826:	b140      	cbz	r0, c83a <bt_mesh_net_keys_create+0x96>
    c828:	490d      	ldr	r1, [pc, #52]	; (c860 <bt_mesh_net_keys_create+0xbc>)
    c82a:	4b0e      	ldr	r3, [pc, #56]	; (c864 <bt_mesh_net_keys_create+0xc0>)
		BT_ERR("Unable to generate IdentityKey");
    c82c:	4811      	ldr	r0, [pc, #68]	; (c874 <bt_mesh_net_keys_create+0xd0>)
    c82e:	1ac9      	subs	r1, r1, r3
    c830:	08c9      	lsrs	r1, r1, #3
    c832:	0189      	lsls	r1, r1, #6
    c834:	f041 0101 	orr.w	r1, r1, #1
    c838:	e7d1      	b.n	c7de <bt_mesh_net_keys_create+0x3a>
}

static inline int bt_mesh_beacon_key(const u8_t net_key[16],
				     u8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
    c83a:	490f      	ldr	r1, [pc, #60]	; (c878 <bt_mesh_net_keys_create+0xd4>)
    c83c:	f105 0249 	add.w	r2, r5, #73	; 0x49
    c840:	4630      	mov	r0, r6
    c842:	f002 fd61 	bl	f308 <bt_mesh_id128>
	if (err) {
    c846:	4604      	mov	r4, r0
    c848:	2800      	cmp	r0, #0
    c84a:	d0ca      	beq.n	c7e2 <bt_mesh_net_keys_create+0x3e>
    c84c:	4904      	ldr	r1, [pc, #16]	; (c860 <bt_mesh_net_keys_create+0xbc>)
    c84e:	4b05      	ldr	r3, [pc, #20]	; (c864 <bt_mesh_net_keys_create+0xc0>)
		BT_ERR("Unable to generate beacon key");
    c850:	480a      	ldr	r0, [pc, #40]	; (c87c <bt_mesh_net_keys_create+0xd8>)
    c852:	1ac9      	subs	r1, r1, r3
    c854:	08c9      	lsrs	r1, r1, #3
    c856:	0189      	lsls	r1, r1, #6
    c858:	f041 0101 	orr.w	r1, r1, #1
    c85c:	e7bf      	b.n	c7de <bt_mesh_net_keys_create+0x3a>
    c85e:	bf00      	nop
    c860:	00028990 	.word	0x00028990
    c864:	00028868 	.word	0x00028868
    c868:	0002be96 	.word	0x0002be96
    c86c:	0002bec2 	.word	0x0002bec2
    c870:	0002bedc 	.word	0x0002bedc
    c874:	0002bee1 	.word	0x0002bee1
    c878:	0002bf00 	.word	0x0002bf00
    c87c:	0002bf05 	.word	0x0002bf05

0000c880 <friend_cred_set>:
{
    c880:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cred->addr == bt_mesh.lpn.frnd) {
    c882:	4b24      	ldr	r3, [pc, #144]	; (c914 <friend_cred_set+0x94>)
    c884:	8846      	ldrh	r6, [r0, #2]
    c886:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    c888:	42b3      	cmp	r3, r6
{
    c88a:	b087      	sub	sp, #28
    c88c:	4605      	mov	r5, r0
    c88e:	460c      	mov	r4, r1
    c890:	4617      	mov	r7, r2
	if (cred->addr == bt_mesh.lpn.frnd) {
    c892:	d13c      	bne.n	c90e <friend_cred_set+0x8e>
		lpn_addr = bt_mesh_primary_addr();
    c894:	f002 ffae 	bl	f7f4 <bt_mesh_primary_addr>
    c898:	4606      	mov	r6, r0
		frnd_addr = cred->addr;
    c89a:	8868      	ldrh	r0, [r5, #2]
	dst[1] = val;
    c89c:	f88d 0010 	strb.w	r0, [sp, #16]
	p[0] = 0x01;
    c8a0:	2301      	movs	r3, #1
    c8a2:	f88d 300c 	strb.w	r3, [sp, #12]
	dst[0] = val >> 8;
    c8a6:	0a33      	lsrs	r3, r6, #8
    c8a8:	f88d 300d 	strb.w	r3, [sp, #13]
    c8ac:	0a03      	lsrs	r3, r0, #8
    c8ae:	f88d 300f 	strb.w	r3, [sp, #15]
	sys_put_be16(cred->lpn_counter, p + 5);
    c8b2:	88ab      	ldrh	r3, [r5, #4]
	dst[1] = val;
    c8b4:	f88d 3012 	strb.w	r3, [sp, #18]
	dst[0] = val >> 8;
    c8b8:	0a1a      	lsrs	r2, r3, #8
	sys_put_be16(cred->frnd_counter, p + 7);
    c8ba:	88eb      	ldrh	r3, [r5, #6]
    c8bc:	f88d 2011 	strb.w	r2, [sp, #17]
    c8c0:	eb04 1144 	add.w	r1, r4, r4, lsl #5
    c8c4:	0a1a      	lsrs	r2, r3, #8
    c8c6:	f88d 2013 	strb.w	r2, [sp, #19]
	dst[1] = val;
    c8ca:	f88d 3014 	strb.w	r3, [sp, #20]
			 cred->cred[idx].enc, cred->cred[idx].privacy);
    c8ce:	f101 0219 	add.w	r2, r1, #25
	err = bt_mesh_k2(net_key, p, sizeof(p), &cred->cred[idx].nid,
    c8d2:	f101 0308 	add.w	r3, r1, #8
			 cred->cred[idx].enc, cred->cred[idx].privacy);
    c8d6:	3109      	adds	r1, #9
    c8d8:	442a      	add	r2, r5
    c8da:	4429      	add	r1, r5
	err = bt_mesh_k2(net_key, p, sizeof(p), &cred->cred[idx].nid,
    c8dc:	9201      	str	r2, [sp, #4]
    c8de:	9100      	str	r1, [sp, #0]
    c8e0:	442b      	add	r3, r5
    c8e2:	2209      	movs	r2, #9
    c8e4:	a903      	add	r1, sp, #12
    c8e6:	4638      	mov	r0, r7
    c8e8:	f88d 600e 	strb.w	r6, [sp, #14]
    c8ec:	f002 fc5e 	bl	f1ac <bt_mesh_k2>
	if (err) {
    c8f0:	4604      	mov	r4, r0
    c8f2:	b148      	cbz	r0, c908 <friend_cred_set+0x88>
    c8f4:	4908      	ldr	r1, [pc, #32]	; (c918 <friend_cred_set+0x98>)
    c8f6:	4b09      	ldr	r3, [pc, #36]	; (c91c <friend_cred_set+0x9c>)
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
    c8f8:	4809      	ldr	r0, [pc, #36]	; (c920 <friend_cred_set+0xa0>)
    c8fa:	1ac9      	subs	r1, r1, r3
    c8fc:	08c9      	lsrs	r1, r1, #3
    c8fe:	0189      	lsls	r1, r1, #6
    c900:	f041 0101 	orr.w	r1, r1, #1
    c904:	f016 fd52 	bl	233ac <log_0>
}
    c908:	4620      	mov	r0, r4
    c90a:	b007      	add	sp, #28
    c90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		frnd_addr = bt_mesh_primary_addr();
    c90e:	f002 ff71 	bl	f7f4 <bt_mesh_primary_addr>
    c912:	e7c3      	b.n	c89c <friend_cred_set+0x1c>
    c914:	20006ab8 	.word	0x20006ab8
    c918:	00028990 	.word	0x00028990
    c91c:	00028868 	.word	0x00028868
    c920:	0002be96 	.word	0x0002be96

0000c924 <friend_cred_refresh>:
{
    c924:	b538      	push	{r3, r4, r5, lr}
		if (cred->addr != BT_MESH_ADDR_UNASSIGNED &&
    c926:	4c0f      	ldr	r4, [pc, #60]	; (c964 <friend_cred_refresh+0x40>)
    c928:	8863      	ldrh	r3, [r4, #2]
{
    c92a:	4605      	mov	r5, r0
		if (cred->addr != BT_MESH_ADDR_UNASSIGNED &&
    c92c:	b14b      	cbz	r3, c942 <friend_cred_refresh+0x1e>
    c92e:	8823      	ldrh	r3, [r4, #0]
    c930:	4283      	cmp	r3, r0
    c932:	d106      	bne.n	c942 <friend_cred_refresh+0x1e>
			memcpy(&cred->cred[0], &cred->cred[1],
    c934:	2221      	movs	r2, #33	; 0x21
    c936:	f104 0129 	add.w	r1, r4, #41	; 0x29
    c93a:	f104 0008 	add.w	r0, r4, #8
    c93e:	f018 fba7 	bl	25090 <memcpy>
		if (cred->addr != BT_MESH_ADDR_UNASSIGNED &&
    c942:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    c946:	b15b      	cbz	r3, c960 <friend_cred_refresh+0x3c>
    c948:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    c94c:	42ab      	cmp	r3, r5
    c94e:	d107      	bne.n	c960 <friend_cred_refresh+0x3c>
			memcpy(&cred->cred[0], &cred->cred[1],
    c950:	4905      	ldr	r1, [pc, #20]	; (c968 <friend_cred_refresh+0x44>)
}
    c952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(&cred->cred[0], &cred->cred[1],
    c956:	2221      	movs	r2, #33	; 0x21
    c958:	f1a1 0021 	sub.w	r0, r1, #33	; 0x21
    c95c:	f018 bb98 	b.w	25090 <memcpy>
}
    c960:	bd38      	pop	{r3, r4, r5, pc}
    c962:	bf00      	nop
    c964:	20001cce 	.word	0x20001cce
    c968:	20001d41 	.word	0x20001d41

0000c96c <friend_cred_update>:
{
    c96c:	b538      	push	{r3, r4, r5, lr}
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
    c96e:	4c11      	ldr	r4, [pc, #68]	; (c9b4 <friend_cred_update+0x48>)
    c970:	8863      	ldrh	r3, [r4, #2]
{
    c972:	4605      	mov	r5, r0
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
    c974:	b153      	cbz	r3, c98c <friend_cred_update+0x20>
    c976:	8822      	ldrh	r2, [r4, #0]
    c978:	8b83      	ldrh	r3, [r0, #28]
    c97a:	429a      	cmp	r2, r3
    c97c:	d106      	bne.n	c98c <friend_cred_update+0x20>
		err = friend_cred_set(cred, 1, sub->keys[1].net);
    c97e:	f100 0289 	add.w	r2, r0, #137	; 0x89
    c982:	2101      	movs	r1, #1
    c984:	4620      	mov	r0, r4
    c986:	f7ff ff7b 	bl	c880 <friend_cred_set>
		if (err) {
    c98a:	b918      	cbnz	r0, c994 <friend_cred_update+0x28>
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
    c98c:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    c990:	b90b      	cbnz	r3, c996 <friend_cred_update+0x2a>
	return 0;
    c992:	2000      	movs	r0, #0
}
    c994:	bd38      	pop	{r3, r4, r5, pc}
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
    c996:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
    c99a:	8bab      	ldrh	r3, [r5, #28]
    c99c:	429a      	cmp	r2, r3
    c99e:	d1f8      	bne.n	c992 <friend_cred_update+0x26>
		err = friend_cred_set(cred, 1, sub->keys[1].net);
    c9a0:	4805      	ldr	r0, [pc, #20]	; (c9b8 <friend_cred_update+0x4c>)
    c9a2:	f105 0289 	add.w	r2, r5, #137	; 0x89
    c9a6:	2101      	movs	r1, #1
    c9a8:	f7ff ff6a 	bl	c880 <friend_cred_set>
		if (err) {
    c9ac:	2800      	cmp	r0, #0
    c9ae:	d0f0      	beq.n	c992 <friend_cred_update+0x26>
    c9b0:	e7f0      	b.n	c994 <friend_cred_update+0x28>
    c9b2:	bf00      	nop
    c9b4:	20001cce 	.word	0x20001cce
    c9b8:	20001d18 	.word	0x20001d18

0000c9bc <friend_cred_create>:
{
    c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9be:	4605      	mov	r5, r0
		if ((friend_cred[i].addr == BT_MESH_ADDR_UNASSIGNED) ||
    c9c0:	4823      	ldr	r0, [pc, #140]	; (ca50 <friend_cred_create+0x94>)
    c9c2:	8844      	ldrh	r4, [r0, #2]
    c9c4:	b194      	cbz	r4, c9ec <friend_cred_create+0x30>
    c9c6:	42a1      	cmp	r1, r4
    c9c8:	d103      	bne.n	c9d2 <friend_cred_create+0x16>
		    (friend_cred[i].addr == addr &&
    c9ca:	8806      	ldrh	r6, [r0, #0]
    c9cc:	8bac      	ldrh	r4, [r5, #28]
    c9ce:	42a6      	cmp	r6, r4
    c9d0:	d00b      	beq.n	c9ea <friend_cred_create+0x2e>
		if ((friend_cred[i].addr == BT_MESH_ADDR_UNASSIGNED) ||
    c9d2:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
    c9d6:	b134      	cbz	r4, c9e6 <friend_cred_create+0x2a>
    c9d8:	42a1      	cmp	r1, r4
    c9da:	d11b      	bne.n	ca14 <friend_cred_create+0x58>
		    (friend_cred[i].addr == addr &&
    c9dc:	f8b0 604a 	ldrh.w	r6, [r0, #74]	; 0x4a
    c9e0:	8bac      	ldrh	r4, [r5, #28]
    c9e2:	42a6      	cmp	r6, r4
    c9e4:	d116      	bne.n	ca14 <friend_cred_create+0x58>
	for (cred = NULL, i = 0; i < ARRAY_SIZE(friend_cred); i++) {
    c9e6:	2401      	movs	r4, #1
    c9e8:	e000      	b.n	c9ec <friend_cred_create+0x30>
    c9ea:	2400      	movs	r4, #0
			cred = &friend_cred[i];
    c9ec:	264a      	movs	r6, #74	; 0x4a
    c9ee:	4366      	muls	r6, r4
    c9f0:	1984      	adds	r4, r0, r6
	cred->net_idx = sub->net_idx;
    c9f2:	8baf      	ldrh	r7, [r5, #28]
    c9f4:	5387      	strh	r7, [r0, r6]
	cred->addr = addr;
    c9f6:	8061      	strh	r1, [r4, #2]
	cred->lpn_counter = lpn_counter;
    c9f8:	80a2      	strh	r2, [r4, #4]
	cred->frnd_counter = frnd_counter;
    c9fa:	80e3      	strh	r3, [r4, #6]
	err = friend_cred_set(cred, 0, sub->keys[0].net);
    c9fc:	f105 0230 	add.w	r2, r5, #48	; 0x30
    ca00:	2100      	movs	r1, #0
    ca02:	4620      	mov	r0, r4
    ca04:	f7ff ff3c 	bl	c880 <friend_cred_set>
	if (err) {
    ca08:	4606      	mov	r6, r0
    ca0a:	b180      	cbz	r0, ca2e <friend_cred_create+0x72>
		friend_cred_clear(cred);
    ca0c:	4620      	mov	r0, r4
    ca0e:	f019 fd05 	bl	2641c <friend_cred_clear>
    ca12:	e009      	b.n	ca28 <friend_cred_create+0x6c>
    ca14:	490f      	ldr	r1, [pc, #60]	; (ca54 <friend_cred_create+0x98>)
    ca16:	4b10      	ldr	r3, [pc, #64]	; (ca58 <friend_cred_create+0x9c>)
		BT_WARN("No free friend credential slots");
    ca18:	4810      	ldr	r0, [pc, #64]	; (ca5c <friend_cred_create+0xa0>)
    ca1a:	1ac9      	subs	r1, r1, r3
    ca1c:	08c9      	lsrs	r1, r1, #3
    ca1e:	0189      	lsls	r1, r1, #6
    ca20:	f041 0102 	orr.w	r1, r1, #2
    ca24:	f016 fcc2 	bl	233ac <log_0>
		return NULL;
    ca28:	2400      	movs	r4, #0
}
    ca2a:	4620      	mov	r0, r4
    ca2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (sub->kr_flag) {
    ca2e:	7fab      	ldrb	r3, [r5, #30]
    ca30:	2b00      	cmp	r3, #0
    ca32:	d0fa      	beq.n	ca2a <friend_cred_create+0x6e>
		err = friend_cred_set(cred, 1, sub->keys[1].net);
    ca34:	f105 0289 	add.w	r2, r5, #137	; 0x89
    ca38:	2101      	movs	r1, #1
    ca3a:	4620      	mov	r0, r4
    ca3c:	f7ff ff20 	bl	c880 <friend_cred_set>
		if (err) {
    ca40:	2800      	cmp	r0, #0
    ca42:	d0f2      	beq.n	ca2a <friend_cred_create+0x6e>
			friend_cred_clear(cred);
    ca44:	4620      	mov	r0, r4
    ca46:	f019 fce9 	bl	2641c <friend_cred_clear>
			return NULL;
    ca4a:	4634      	mov	r4, r6
    ca4c:	e7ed      	b.n	ca2a <friend_cred_create+0x6e>
    ca4e:	bf00      	nop
    ca50:	20001cce 	.word	0x20001cce
    ca54:	00028990 	.word	0x00028990
    ca58:	00028868 	.word	0x00028868
    ca5c:	0002bf23 	.word	0x0002bf23

0000ca60 <friend_cred_del>:
{
    ca60:	4603      	mov	r3, r0
		if (cred->addr == addr && cred->net_idx == net_idx) {
    ca62:	480c      	ldr	r0, [pc, #48]	; (ca94 <friend_cred_del+0x34>)
    ca64:	8842      	ldrh	r2, [r0, #2]
    ca66:	428a      	cmp	r2, r1
{
    ca68:	b510      	push	{r4, lr}
    ca6a:	4602      	mov	r2, r0
		if (cred->addr == addr && cred->net_idx == net_idx) {
    ca6c:	d102      	bne.n	ca74 <friend_cred_del+0x14>
    ca6e:	8804      	ldrh	r4, [r0, #0]
    ca70:	429c      	cmp	r4, r3
    ca72:	d008      	beq.n	ca86 <friend_cred_del+0x26>
    ca74:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
    ca78:	4288      	cmp	r0, r1
    ca7a:	d108      	bne.n	ca8e <friend_cred_del+0x2e>
    ca7c:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
    ca80:	429a      	cmp	r2, r3
    ca82:	d104      	bne.n	ca8e <friend_cred_del+0x2e>
		struct friend_cred *cred = &friend_cred[i];
    ca84:	4804      	ldr	r0, [pc, #16]	; (ca98 <friend_cred_del+0x38>)
			friend_cred_clear(cred);
    ca86:	f019 fcc9 	bl	2641c <friend_cred_clear>
			return 0;
    ca8a:	2000      	movs	r0, #0
}
    ca8c:	bd10      	pop	{r4, pc}
	return -ENOENT;
    ca8e:	f06f 0001 	mvn.w	r0, #1
    ca92:	e7fb      	b.n	ca8c <friend_cred_del+0x2c>
    ca94:	20001cce 	.word	0x20001cce
    ca98:	20001d18 	.word	0x20001d18

0000ca9c <friend_cred_get>:
{
    ca9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca9e:	4605      	mov	r5, r0
		if (cred->net_idx != sub->net_idx) {
    caa0:	4c1c      	ldr	r4, [pc, #112]	; (cb14 <friend_cred_get+0x78>)
    caa2:	8bae      	ldrh	r6, [r5, #28]
    caa4:	8827      	ldrh	r7, [r4, #0]
{
    caa6:	9805      	ldr	r0, [sp, #20]
		if (cred->net_idx != sub->net_idx) {
    caa8:	42b7      	cmp	r7, r6
    caaa:	d103      	bne.n	cab4 <friend_cred_get+0x18>
		if (addr != BT_MESH_ADDR_UNASSIGNED && cred->addr != addr) {
    caac:	b171      	cbz	r1, cacc <friend_cred_get+0x30>
    caae:	8867      	ldrh	r7, [r4, #2]
    cab0:	428f      	cmp	r7, r1
    cab2:	d00a      	beq.n	caca <friend_cred_get+0x2e>
		if (cred->net_idx != sub->net_idx) {
    cab4:	f8b4 704a 	ldrh.w	r7, [r4, #74]	; 0x4a
    cab8:	42b7      	cmp	r7, r6
    caba:	d127      	bne.n	cb0c <friend_cred_get+0x70>
		if (addr != BT_MESH_ADDR_UNASSIGNED && cred->addr != addr) {
    cabc:	b119      	cbz	r1, cac6 <friend_cred_get+0x2a>
    cabe:	f8b4 604c 	ldrh.w	r6, [r4, #76]	; 0x4c
    cac2:	428e      	cmp	r6, r1
    cac4:	d122      	bne.n	cb0c <friend_cred_get+0x70>
	for (i = 0; i < ARRAY_SIZE(friend_cred); i++) {
    cac6:	2101      	movs	r1, #1
    cac8:	e000      	b.n	cacc <friend_cred_get+0x30>
    caca:	2100      	movs	r1, #0
		if (nid) {
    cacc:	b142      	cbz	r2, cae0 <friend_cred_get+0x44>
			*nid = cred->cred[sub->kr_flag].nid;
    cace:	7fae      	ldrb	r6, [r5, #30]
    cad0:	eb06 1746 	add.w	r7, r6, r6, lsl #5
    cad4:	264a      	movs	r6, #74	; 0x4a
    cad6:	fb06 7601 	mla	r6, r6, r1, r7
    cada:	4426      	add	r6, r4
    cadc:	7a36      	ldrb	r6, [r6, #8]
    cade:	7016      	strb	r6, [r2, #0]
		if (enc) {
    cae0:	b143      	cbz	r3, caf4 <friend_cred_get+0x58>
			*enc = cred->cred[sub->kr_flag].enc;
    cae2:	7faa      	ldrb	r2, [r5, #30]
    cae4:	eb02 1242 	add.w	r2, r2, r2, lsl #5
    cae8:	3209      	adds	r2, #9
    caea:	264a      	movs	r6, #74	; 0x4a
    caec:	fb06 2201 	mla	r2, r6, r1, r2
    caf0:	4422      	add	r2, r4
    caf2:	601a      	str	r2, [r3, #0]
		if (priv) {
    caf4:	b148      	cbz	r0, cb0a <friend_cred_get+0x6e>
			*priv = cred->cred[sub->kr_flag].privacy;
    caf6:	7fab      	ldrb	r3, [r5, #30]
    caf8:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    cafc:	3319      	adds	r3, #25
    cafe:	224a      	movs	r2, #74	; 0x4a
    cb00:	fb02 3101 	mla	r1, r2, r1, r3
    cb04:	4421      	add	r1, r4
    cb06:	6001      	str	r1, [r0, #0]
		return 0;
    cb08:	2000      	movs	r0, #0
}
    cb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return -ENOENT;
    cb0c:	f06f 0001 	mvn.w	r0, #1
    cb10:	e7fb      	b.n	cb0a <friend_cred_get+0x6e>
    cb12:	bf00      	nop
    cb14:	20001cce 	.word	0x20001cce

0000cb18 <bt_mesh_net_beacon_update>:
{
    cb18:	b513      	push	{r0, r1, r4, lr}
    cb1a:	4604      	mov	r4, r0
	u8_t flags = bt_mesh_net_flags(sub);
    cb1c:	f019 fc89 	bl	26432 <bt_mesh_net_flags>
	if (sub->kr_flag) {
    cb20:	7fa3      	ldrb	r3, [r4, #30]
	u8_t flags = bt_mesh_net_flags(sub);
    cb22:	4601      	mov	r1, r0
	if (sub->kr_flag) {
    cb24:	b163      	cbz	r3, cb40 <bt_mesh_net_beacon_update+0x28>
		keys = &sub->keys[1];
    cb26:	f104 0089 	add.w	r0, r4, #137	; 0x89
				   bt_mesh.iv_index, sub->auth);
    cb2a:	3428      	adds	r4, #40	; 0x28
	return bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    cb2c:	4b06      	ldr	r3, [pc, #24]	; (cb48 <bt_mesh_net_beacon_update+0x30>)
    cb2e:	9400      	str	r4, [sp, #0]
    cb30:	f100 0221 	add.w	r2, r0, #33	; 0x21
    cb34:	681b      	ldr	r3, [r3, #0]
    cb36:	3049      	adds	r0, #73	; 0x49
    cb38:	f019 fee6 	bl	26908 <bt_mesh_beacon_auth>
}
    cb3c:	b002      	add	sp, #8
    cb3e:	bd10      	pop	{r4, pc}
		keys = &sub->keys[0];
    cb40:	f104 0030 	add.w	r0, r4, #48	; 0x30
    cb44:	e7f1      	b.n	cb2a <bt_mesh_net_beacon_update+0x12>
    cb46:	bf00      	nop
    cb48:	20006ab8 	.word	0x20006ab8

0000cb4c <bt_mesh_net_create>:
{
    cb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb50:	460e      	mov	r6, r1
    cb52:	4615      	mov	r5, r2
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    cb54:	2100      	movs	r1, #0
    cb56:	2228      	movs	r2, #40	; 0x28
{
    cb58:	4680      	mov	r8, r0
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    cb5a:	4824      	ldr	r0, [pc, #144]	; (cbec <bt_mesh_net_create+0xa0>)
	sub->kr_flag = BT_MESH_KEY_REFRESH(flags);
    cb5c:	4c24      	ldr	r4, [pc, #144]	; (cbf0 <bt_mesh_net_create+0xa4>)
{
    cb5e:	461f      	mov	r7, r3
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    cb60:	f018 fac1 	bl	250e6 <memset>
	msg_cache_next = 0U;
    cb64:	4b23      	ldr	r3, [pc, #140]	; (cbf4 <bt_mesh_net_create+0xa8>)
    cb66:	2200      	movs	r2, #0
    cb68:	801a      	strh	r2, [r3, #0]
	sub->kr_flag = BT_MESH_KEY_REFRESH(flags);
    cb6a:	f006 0201 	and.w	r2, r6, #1
    cb6e:	f884 2112 	strb.w	r2, [r4, #274]	; 0x112
		err = bt_mesh_net_keys_create(&sub->keys[1], key);
    cb72:	4629      	mov	r1, r5
	if (sub->kr_flag) {
    cb74:	b34a      	cbz	r2, cbca <bt_mesh_net_create+0x7e>
		err = bt_mesh_net_keys_create(&sub->keys[1], key);
    cb76:	f204 107d 	addw	r0, r4, #381	; 0x17d
    cb7a:	f7ff fe13 	bl	c7a4 <bt_mesh_net_keys_create>
		if (err) {
    cb7e:	b118      	cbz	r0, cb88 <bt_mesh_net_create+0x3c>
			return -EIO;
    cb80:	f06f 0004 	mvn.w	r0, #4
}
    cb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sub->kr_phase = BT_MESH_KR_PHASE_2;
    cb88:	2302      	movs	r3, #2
    cb8a:	f884 3113 	strb.w	r3, [r4, #275]	; 0x113
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    cb8e:	2300      	movs	r3, #0
    cb90:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
	sub->net_idx = idx;
    cb94:	f8a4 8110 	strh.w	r8, [r4, #272]	; 0x110
	bt_mesh.iv_index = iv_index;
    cb98:	6027      	str	r7, [r4, #0]
	if (val) {
    cb9a:	f016 0f02 	tst.w	r6, #2
    cb9e:	4b16      	ldr	r3, [pc, #88]	; (cbf8 <bt_mesh_net_create+0xac>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cba0:	f3bf 8f5b 	dmb	ish
	if (val) {
    cba4:	d018      	beq.n	cbd8 <bt_mesh_net_create+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cba6:	e853 2f00 	ldrex	r2, [r3]
    cbaa:	f042 0204 	orr.w	r2, r2, #4
    cbae:	e843 2100 	strex	r1, r2, [r3]
    cbb2:	2900      	cmp	r1, #0
    cbb4:	d1f7      	bne.n	cba6 <bt_mesh_net_create+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cbb6:	f3bf 8f5b 	dmb	ish
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    cbba:	2360      	movs	r3, #96	; 0x60
	bt_mesh_net_beacon_update(sub);
    cbbc:	480f      	ldr	r0, [pc, #60]	; (cbfc <bt_mesh_net_create+0xb0>)
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    cbbe:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
	bt_mesh_net_beacon_update(sub);
    cbc2:	f7ff ffa9 	bl	cb18 <bt_mesh_net_beacon_update>
	return 0;
    cbc6:	2000      	movs	r0, #0
    cbc8:	e7dc      	b.n	cb84 <bt_mesh_net_create+0x38>
		err = bt_mesh_net_keys_create(&sub->keys[0], key);
    cbca:	f504 7092 	add.w	r0, r4, #292	; 0x124
    cbce:	f7ff fde9 	bl	c7a4 <bt_mesh_net_keys_create>
		if (err) {
    cbd2:	2800      	cmp	r0, #0
    cbd4:	d0db      	beq.n	cb8e <bt_mesh_net_create+0x42>
    cbd6:	e7d3      	b.n	cb80 <bt_mesh_net_create+0x34>
    cbd8:	e853 2f00 	ldrex	r2, [r3]
    cbdc:	f022 0204 	bic.w	r2, r2, #4
    cbe0:	e843 2100 	strex	r1, r2, [r3]
    cbe4:	2900      	cmp	r1, #0
    cbe6:	d0e6      	beq.n	cbb6 <bt_mesh_net_create+0x6a>
    cbe8:	e7f6      	b.n	cbd8 <bt_mesh_net_create+0x8c>
    cbea:	bf00      	nop
    cbec:	2000095c 	.word	0x2000095c
    cbf0:	20006ab8 	.word	0x20006ab8
    cbf4:	20001d62 	.word	0x20001d62
    cbf8:	20006ac0 	.word	0x20006ac0
    cbfc:	20006bac 	.word	0x20006bac

0000cc00 <bt_mesh_net_revoke_keys>:
{
    cc00:	b538      	push	{r3, r4, r5, lr}
	memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
    cc02:	2259      	movs	r2, #89	; 0x59
{
    cc04:	4605      	mov	r5, r0
	memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
    cc06:	f100 0189 	add.w	r1, r0, #137	; 0x89
		if (key->net_idx != sub->net_idx || !key->updated) {
    cc0a:	4c1a      	ldr	r4, [pc, #104]	; (cc74 <bt_mesh_net_revoke_keys+0x74>)
	memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
    cc0c:	3030      	adds	r0, #48	; 0x30
    cc0e:	f018 fa3f 	bl	25090 <memcpy>
		bt_mesh_store_subnet(sub);
    cc12:	4628      	mov	r0, r5
    cc14:	f01a f8fd 	bl	26e12 <bt_mesh_store_subnet>
		if (key->net_idx != sub->net_idx || !key->updated) {
    cc18:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    cc1c:	8bab      	ldrh	r3, [r5, #28]
    cc1e:	429a      	cmp	r2, r3
    cc20:	d110      	bne.n	cc44 <bt_mesh_net_revoke_keys+0x44>
    cc22:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    cc26:	b16b      	cbz	r3, cc44 <bt_mesh_net_revoke_keys+0x44>
		memcpy(&key->keys[0], &key->keys[1], sizeof(key->keys[0]));
    cc28:	2211      	movs	r2, #17
    cc2a:	f104 01ba 	add.w	r1, r4, #186	; 0xba
    cc2e:	f104 00a9 	add.w	r0, r4, #169	; 0xa9
    cc32:	f018 fa2d 	bl	25090 <memcpy>
		key->updated = false;
    cc36:	2300      	movs	r3, #0
			bt_mesh_store_app_key(key);
    cc38:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
		key->updated = false;
    cc3c:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			bt_mesh_store_app_key(key);
    cc40:	f01a f909 	bl	26e56 <bt_mesh_store_app_key>
		if (key->net_idx != sub->net_idx || !key->updated) {
    cc44:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
    cc48:	8bab      	ldrh	r3, [r5, #28]
    cc4a:	429a      	cmp	r2, r3
    cc4c:	d110      	bne.n	cc70 <bt_mesh_net_revoke_keys+0x70>
    cc4e:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
    cc52:	b16b      	cbz	r3, cc70 <bt_mesh_net_revoke_keys+0x70>
		memcpy(&key->keys[0], &key->keys[1], sizeof(key->keys[0]));
    cc54:	4908      	ldr	r1, [pc, #32]	; (cc78 <bt_mesh_net_revoke_keys+0x78>)
    cc56:	2211      	movs	r2, #17
    cc58:	f1a1 0011 	sub.w	r0, r1, #17
    cc5c:	f018 fa18 	bl	25090 <memcpy>
		key->updated = false;
    cc60:	2300      	movs	r3, #0
    cc62:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
			bt_mesh_store_app_key(key);
    cc66:	4805      	ldr	r0, [pc, #20]	; (cc7c <bt_mesh_net_revoke_keys+0x7c>)
}
    cc68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			bt_mesh_store_app_key(key);
    cc6c:	f01a b8f3 	b.w	26e56 <bt_mesh_store_app_key>
}
    cc70:	bd38      	pop	{r3, r4, r5, pc}
    cc72:	bf00      	nop
    cc74:	20006ab8 	.word	0x20006ab8
    cc78:	20006b9a 	.word	0x20006b9a
    cc7c:	20006b84 	.word	0x20006b84

0000cc80 <bt_mesh_kr_update>:
{
    cc80:	b538      	push	{r3, r4, r5, lr}
    cc82:	4604      	mov	r4, r0
    cc84:	4610      	mov	r0, r2
	if (new_kr != sub->kr_flag && sub->kr_phase == BT_MESH_KR_NORMAL) {
    cc86:	7fa3      	ldrb	r3, [r4, #30]
    cc88:	7fe5      	ldrb	r5, [r4, #31]
    cc8a:	428b      	cmp	r3, r1
    cc8c:	d00c      	beq.n	cca8 <bt_mesh_kr_update+0x28>
    cc8e:	b95d      	cbnz	r5, cca8 <bt_mesh_kr_update+0x28>
    cc90:	4913      	ldr	r1, [pc, #76]	; (cce0 <bt_mesh_kr_update+0x60>)
    cc92:	4b14      	ldr	r3, [pc, #80]	; (cce4 <bt_mesh_kr_update+0x64>)
		BT_WARN("KR change in normal operation. Are we blacklisted?");
    cc94:	4814      	ldr	r0, [pc, #80]	; (cce8 <bt_mesh_kr_update+0x68>)
    cc96:	1ac9      	subs	r1, r1, r3
    cc98:	08c9      	lsrs	r1, r1, #3
    cc9a:	0189      	lsls	r1, r1, #6
    cc9c:	f041 0102 	orr.w	r1, r1, #2
    cca0:	f016 fb84 	bl	233ac <log_0>
	return false;
    cca4:	2000      	movs	r0, #0
    cca6:	e019      	b.n	ccdc <bt_mesh_kr_update+0x5c>
	sub->kr_flag = new_kr;
    cca8:	2900      	cmp	r1, #0
    ccaa:	bf14      	ite	ne
    ccac:	2301      	movne	r3, #1
    ccae:	2300      	moveq	r3, #0
    ccb0:	77a3      	strb	r3, [r4, #30]
	if (sub->kr_flag) {
    ccb2:	d005      	beq.n	ccc0 <bt_mesh_kr_update+0x40>
		if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
    ccb4:	2d01      	cmp	r5, #1
    ccb6:	d1f5      	bne.n	cca4 <bt_mesh_kr_update+0x24>
			sub->kr_phase = BT_MESH_KR_PHASE_2;
    ccb8:	2302      	movs	r3, #2
			sub->kr_phase = BT_MESH_KR_NORMAL;
    ccba:	77e3      	strb	r3, [r4, #31]
			return true;
    ccbc:	2001      	movs	r0, #1
    ccbe:	e00d      	b.n	ccdc <bt_mesh_kr_update+0x5c>
		switch (sub->kr_phase) {
    ccc0:	2d01      	cmp	r5, #1
    ccc2:	d009      	beq.n	ccd8 <bt_mesh_kr_update+0x58>
    ccc4:	2d02      	cmp	r5, #2
    ccc6:	d1ed      	bne.n	cca4 <bt_mesh_kr_update+0x24>
			bt_mesh_net_revoke_keys(sub);
    ccc8:	4620      	mov	r0, r4
    ccca:	f7ff ff99 	bl	cc00 <bt_mesh_net_revoke_keys>
				friend_cred_refresh(sub->net_idx);
    ccce:	8ba0      	ldrh	r0, [r4, #28]
    ccd0:	f7ff fe28 	bl	c924 <friend_cred_refresh>
			sub->kr_phase = BT_MESH_KR_NORMAL;
    ccd4:	2300      	movs	r3, #0
    ccd6:	e7f0      	b.n	ccba <bt_mesh_kr_update+0x3a>
			if (!new_key) {
    ccd8:	2800      	cmp	r0, #0
    ccda:	d1f5      	bne.n	ccc8 <bt_mesh_kr_update+0x48>
}
    ccdc:	bd38      	pop	{r3, r4, r5, pc}
    ccde:	bf00      	nop
    cce0:	00028990 	.word	0x00028990
    cce4:	00028868 	.word	0x00028868
    cce8:	0002bf43 	.word	0x0002bf43

0000ccec <bt_mesh_rpl_reset>:
{
    ccec:	b570      	push	{r4, r5, r6, lr}
    ccee:	4c0c      	ldr	r4, [pc, #48]	; (cd20 <bt_mesh_rpl_reset+0x34>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    ccf0:	2500      	movs	r5, #0
				rpl->old_iv = true;
    ccf2:	2601      	movs	r6, #1
		if (rpl->src) {
    ccf4:	f8b4 32bc 	ldrh.w	r3, [r4, #700]	; 0x2bc
    ccf8:	b143      	cbz	r3, cd0c <bt_mesh_rpl_reset+0x20>
			if (rpl->old_iv) {
    ccfa:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
    ccfe:	b15b      	cbz	r3, cd18 <bt_mesh_rpl_reset+0x2c>
				(void)memset(rpl, 0, sizeof(*rpl));
    cd00:	2208      	movs	r2, #8
    cd02:	2100      	movs	r1, #0
    cd04:	f504 702f 	add.w	r0, r4, #700	; 0x2bc
    cd08:	f018 f9ed 	bl	250e6 <memset>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    cd0c:	3501      	adds	r5, #1
    cd0e:	2d0a      	cmp	r5, #10
    cd10:	f104 0408 	add.w	r4, r4, #8
    cd14:	d1ee      	bne.n	ccf4 <bt_mesh_rpl_reset+0x8>
}
    cd16:	bd70      	pop	{r4, r5, r6, pc}
				rpl->old_iv = true;
    cd18:	f884 62be 	strb.w	r6, [r4, #702]	; 0x2be
    cd1c:	e7f6      	b.n	cd0c <bt_mesh_rpl_reset+0x20>
    cd1e:	bf00      	nop
    cd20:	20006ab8 	.word	0x20006ab8

0000cd24 <bt_mesh_net_iv_update>:
{
    cd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd26:	4606      	mov	r6, r0
    cd28:	460c      	mov	r4, r1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    cd2a:	f7ff fc97 	bl	c65c <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    cd2e:	4d61      	ldr	r5, [pc, #388]	; (ceb4 <bt_mesh_net_iv_update+0x190>)
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    cd30:	f010 0f04 	tst.w	r0, #4
		if (iv_index != bt_mesh.iv_index) {
    cd34:	682a      	ldr	r2, [r5, #0]
    cd36:	f3c0 0780 	ubfx	r7, r0, #2, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    cd3a:	d012      	beq.n	cd62 <bt_mesh_net_iv_update+0x3e>
		if (iv_index != bt_mesh.iv_index) {
    cd3c:	42b2      	cmp	r2, r6
    cd3e:	d00b      	beq.n	cd58 <bt_mesh_net_iv_update+0x34>
    cd40:	495d      	ldr	r1, [pc, #372]	; (ceb8 <bt_mesh_net_iv_update+0x194>)
    cd42:	4b5e      	ldr	r3, [pc, #376]	; (cebc <bt_mesh_net_iv_update+0x198>)
			BT_WARN("IV Index mismatch: 0x%08x != 0x%08x",
    cd44:	485e      	ldr	r0, [pc, #376]	; (cec0 <bt_mesh_net_iv_update+0x19c>)
    cd46:	1a5b      	subs	r3, r3, r1
    cd48:	08db      	lsrs	r3, r3, #3
    cd4a:	019b      	lsls	r3, r3, #6
    cd4c:	f043 0302 	orr.w	r3, r3, #2
    cd50:	4631      	mov	r1, r6
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    cd52:	f016 fb4c 	bl	233ee <log_2>
    cd56:	e001      	b.n	cd5c <bt_mesh_net_iv_update+0x38>
		if (iv_update) {
    cd58:	2900      	cmp	r1, #0
    cd5a:	d06a      	beq.n	ce32 <bt_mesh_net_iv_update+0x10e>
			return false;
    cd5c:	2400      	movs	r4, #0
}
    cd5e:	4620      	mov	r0, r4
    cd60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iv_index == bt_mesh.iv_index) {
    cd62:	42b2      	cmp	r2, r6
    cd64:	d079      	beq.n	ce5a <bt_mesh_net_iv_update+0x136>
		if (iv_index < bt_mesh.iv_index ||
    cd66:	d803      	bhi.n	cd70 <bt_mesh_net_iv_update+0x4c>
		    iv_index > bt_mesh.iv_index + 42) {
    cd68:	f102 032a 	add.w	r3, r2, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
    cd6c:	42b3      	cmp	r3, r6
    cd6e:	d209      	bcs.n	cd84 <bt_mesh_net_iv_update+0x60>
    cd70:	4951      	ldr	r1, [pc, #324]	; (ceb8 <bt_mesh_net_iv_update+0x194>)
    cd72:	4b52      	ldr	r3, [pc, #328]	; (cebc <bt_mesh_net_iv_update+0x198>)
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    cd74:	4853      	ldr	r0, [pc, #332]	; (cec4 <bt_mesh_net_iv_update+0x1a0>)
    cd76:	1a5b      	subs	r3, r3, r1
    cd78:	08db      	lsrs	r3, r3, #3
    cd7a:	019b      	lsls	r3, r3, #6
    cd7c:	f043 0301 	orr.w	r3, r3, #1
    cd80:	4631      	mov	r1, r6
    cd82:	e7e6      	b.n	cd52 <bt_mesh_net_iv_update+0x2e>
		if (iv_index > bt_mesh.iv_index + 1) {
    cd84:	3201      	adds	r2, #1
    cd86:	42b2      	cmp	r2, r6
    cd88:	d244      	bcs.n	ce14 <bt_mesh_net_iv_update+0xf0>
    cd8a:	4b4b      	ldr	r3, [pc, #300]	; (ceb8 <bt_mesh_net_iv_update+0x194>)
    cd8c:	494b      	ldr	r1, [pc, #300]	; (cebc <bt_mesh_net_iv_update+0x198>)
			BT_WARN("Performing IV Index Recovery");
    cd8e:	484e      	ldr	r0, [pc, #312]	; (cec8 <bt_mesh_net_iv_update+0x1a4>)
    cd90:	1ac9      	subs	r1, r1, r3
    cd92:	08c9      	lsrs	r1, r1, #3
    cd94:	0189      	lsls	r1, r1, #6
    cd96:	f041 0102 	orr.w	r1, r1, #2
    cd9a:	f016 fb07 	bl	233ac <log_0>
			(void)memset(bt_mesh.rpl, 0, sizeof(bt_mesh.rpl));
    cd9e:	2250      	movs	r2, #80	; 0x50
    cda0:	4639      	mov	r1, r7
    cda2:	f505 702f 	add.w	r0, r5, #700	; 0x2bc
    cda6:	f018 f99e 	bl	250e6 <memset>
			bt_mesh.seq = 0U;
    cdaa:	e9c5 6700 	strd	r6, r7, [r5]
	if (val) {
    cdae:	2c00      	cmp	r4, #0
    cdb0:	d072      	beq.n	ce98 <bt_mesh_net_iv_update+0x174>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cdb2:	4b46      	ldr	r3, [pc, #280]	; (cecc <bt_mesh_net_iv_update+0x1a8>)
    cdb4:	f3bf 8f5b 	dmb	ish
    cdb8:	e853 2f00 	ldrex	r2, [r3]
    cdbc:	f042 0204 	orr.w	r2, r2, #4
    cdc0:	e843 2100 	strex	r1, r2, [r3]
    cdc4:	2900      	cmp	r1, #0
    cdc6:	d1f7      	bne.n	cdb8 <bt_mesh_net_iv_update+0x94>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cdc8:	f3bf 8f5b 	dmb	ish
	bt_mesh.ivu_duration = 0U;
    cdcc:	2300      	movs	r3, #0
    cdce:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
	if (iv_update) {
    cdd2:	2c00      	cmp	r4, #0
    cdd4:	d06c      	beq.n	ceb0 <bt_mesh_net_iv_update+0x18c>
		bt_mesh.iv_index = iv_index;
    cdd6:	602e      	str	r6, [r5, #0]
		bt_mesh_rpl_reset();
    cdd8:	f7ff ff88 	bl	ccec <bt_mesh_rpl_reset>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    cddc:	4a3c      	ldr	r2, [pc, #240]	; (ced0 <bt_mesh_net_iv_update+0x1ac>)
    cdde:	493d      	ldr	r1, [pc, #244]	; (ced4 <bt_mesh_net_iv_update+0x1b0>)
    cde0:	483d      	ldr	r0, [pc, #244]	; (ced8 <bt_mesh_net_iv_update+0x1b4>)
    cde2:	f015 f8b1 	bl	21f48 <k_delayed_work_submit_to_queue>
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
    cde6:	f8b5 2110 	ldrh.w	r2, [r5, #272]	; 0x110
    cdea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cdee:	429a      	cmp	r2, r3
    cdf0:	d002      	beq.n	cdf8 <bt_mesh_net_iv_update+0xd4>
			bt_mesh_net_beacon_update(&bt_mesh.sub[i]);
    cdf2:	483a      	ldr	r0, [pc, #232]	; (cedc <bt_mesh_net_iv_update+0x1b8>)
    cdf4:	f7ff fe90 	bl	cb18 <bt_mesh_net_beacon_update>
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
    cdf8:	f8b5 21f4 	ldrh.w	r2, [r5, #500]	; 0x1f4
    cdfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ce00:	429a      	cmp	r2, r3
    ce02:	d002      	beq.n	ce0a <bt_mesh_net_iv_update+0xe6>
			bt_mesh_net_beacon_update(&bt_mesh.sub[i]);
    ce04:	4836      	ldr	r0, [pc, #216]	; (cee0 <bt_mesh_net_iv_update+0x1bc>)
    ce06:	f7ff fe87 	bl	cb18 <bt_mesh_net_beacon_update>
		bt_mesh_store_iv(false);
    ce0a:	2000      	movs	r0, #0
    ce0c:	f019 fff0 	bl	26df0 <bt_mesh_store_iv>
	return true;
    ce10:	2401      	movs	r4, #1
    ce12:	e7a4      	b.n	cd5e <bt_mesh_net_iv_update+0x3a>
		if (iv_index == bt_mesh.iv_index + 1 && !iv_update) {
    ce14:	d10b      	bne.n	ce2e <bt_mesh_net_iv_update+0x10a>
    ce16:	b961      	cbnz	r1, ce32 <bt_mesh_net_iv_update+0x10e>
    ce18:	4b27      	ldr	r3, [pc, #156]	; (ceb8 <bt_mesh_net_iv_update+0x194>)
    ce1a:	4928      	ldr	r1, [pc, #160]	; (cebc <bt_mesh_net_iv_update+0x198>)
			BT_WARN("Ignoring new index in normal mode");
    ce1c:	4831      	ldr	r0, [pc, #196]	; (cee4 <bt_mesh_net_iv_update+0x1c0>)
    ce1e:	1ac9      	subs	r1, r1, r3
    ce20:	08c9      	lsrs	r1, r1, #3
    ce22:	0189      	lsls	r1, r1, #6
    ce24:	f041 0102 	orr.w	r1, r1, #2
    ce28:	f016 fac0 	bl	233ac <log_0>
			return false;
    ce2c:	e797      	b.n	cd5e <bt_mesh_net_iv_update+0x3a>
		if (!iv_update) {
    ce2e:	2900      	cmp	r1, #0
    ce30:	d095      	beq.n	cd5e <bt_mesh_net_iv_update+0x3a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ce32:	f7ff fc13 	bl	c65c <atomic_get.constprop.0>
	if (!(IS_ENABLED(CONFIG_BT_MESH_IV_UPDATE_TEST) &&
    ce36:	06c3      	lsls	r3, r0, #27
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    ce38:	f3c0 1700 	ubfx	r7, r0, #4, #1
    ce3c:	d40f      	bmi.n	ce5e <bt_mesh_net_iv_update+0x13a>
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    ce3e:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    ce42:	2b5f      	cmp	r3, #95	; 0x5f
    ce44:	d80b      	bhi.n	ce5e <bt_mesh_net_iv_update+0x13a>
    ce46:	491d      	ldr	r1, [pc, #116]	; (cebc <bt_mesh_net_iv_update+0x198>)
    ce48:	4b1b      	ldr	r3, [pc, #108]	; (ceb8 <bt_mesh_net_iv_update+0x194>)
			BT_WARN("IV Update before minimum duration");
    ce4a:	4827      	ldr	r0, [pc, #156]	; (cee8 <bt_mesh_net_iv_update+0x1c4>)
    ce4c:	1ac9      	subs	r1, r1, r3
    ce4e:	08c9      	lsrs	r1, r1, #3
    ce50:	0189      	lsls	r1, r1, #6
    ce52:	f041 0102 	orr.w	r1, r1, #2
    ce56:	f016 faa9 	bl	233ac <log_0>
			return false;
    ce5a:	463c      	mov	r4, r7
    ce5c:	e77f      	b.n	cd5e <bt_mesh_net_iv_update+0x3a>
	if (!iv_update && bt_mesh_tx_in_progress()) {
    ce5e:	2c00      	cmp	r4, #0
    ce60:	d1a7      	bne.n	cdb2 <bt_mesh_net_iv_update+0x8e>
    ce62:	f001 fae7 	bl	e434 <bt_mesh_tx_in_progress>
    ce66:	b1b8      	cbz	r0, ce98 <bt_mesh_net_iv_update+0x174>
    ce68:	4b13      	ldr	r3, [pc, #76]	; (ceb8 <bt_mesh_net_iv_update+0x194>)
    ce6a:	4914      	ldr	r1, [pc, #80]	; (cebc <bt_mesh_net_iv_update+0x198>)
		BT_WARN("IV Update deferred because of pending transfer");
    ce6c:	481f      	ldr	r0, [pc, #124]	; (ceec <bt_mesh_net_iv_update+0x1c8>)
    ce6e:	1ac9      	subs	r1, r1, r3
    ce70:	08c9      	lsrs	r1, r1, #3
    ce72:	0189      	lsls	r1, r1, #6
    ce74:	f041 0102 	orr.w	r1, r1, #2
    ce78:	f016 fa98 	bl	233ac <log_0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ce7c:	f3bf 8f5b 	dmb	ish
    ce80:	4b12      	ldr	r3, [pc, #72]	; (cecc <bt_mesh_net_iv_update+0x1a8>)
    ce82:	e853 2f00 	ldrex	r2, [r3]
    ce86:	f042 0220 	orr.w	r2, r2, #32
    ce8a:	e843 2100 	strex	r1, r2, [r3]
    ce8e:	2900      	cmp	r1, #0
    ce90:	d1f7      	bne.n	ce82 <bt_mesh_net_iv_update+0x15e>
    ce92:	f3bf 8f5b 	dmb	ish
    ce96:	e762      	b.n	cd5e <bt_mesh_net_iv_update+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ce98:	4b0c      	ldr	r3, [pc, #48]	; (cecc <bt_mesh_net_iv_update+0x1a8>)
    ce9a:	f3bf 8f5b 	dmb	ish
    ce9e:	e853 2f00 	ldrex	r2, [r3]
    cea2:	f022 0204 	bic.w	r2, r2, #4
    cea6:	e843 2100 	strex	r1, r2, [r3]
    ceaa:	2900      	cmp	r1, #0
    ceac:	d08c      	beq.n	cdc8 <bt_mesh_net_iv_update+0xa4>
    ceae:	e7f6      	b.n	ce9e <bt_mesh_net_iv_update+0x17a>
		bt_mesh.seq = 0U;
    ceb0:	606c      	str	r4, [r5, #4]
    ceb2:	e793      	b.n	cddc <bt_mesh_net_iv_update+0xb8>
    ceb4:	20006ab8 	.word	0x20006ab8
    ceb8:	00028868 	.word	0x00028868
    cebc:	00028990 	.word	0x00028990
    cec0:	0002bf76 	.word	0x0002bf76
    cec4:	0002bf9a 	.word	0x0002bf9a
    cec8:	0002bfc1 	.word	0x0002bfc1
    cecc:	20006ac0 	.word	0x20006ac0
    ced0:	05265c00 	.word	0x05265c00
    ced4:	20006b2c 	.word	0x20006b2c
    ced8:	20001c08 	.word	0x20001c08
    cedc:	20006bac 	.word	0x20006bac
    cee0:	20006c90 	.word	0x20006c90
    cee4:	0002bfde 	.word	0x0002bfde
    cee8:	0002c000 	.word	0x0002c000
    ceec:	0002c022 	.word	0x0002c022

0000cef0 <ivu_refresh>:
		bt_mesh_net_relay(&buf, &rx);
	}
}

static void ivu_refresh(struct k_work *work)
{
    cef0:	b510      	push	{r4, lr}
	bt_mesh.ivu_duration += BT_MESH_IVU_HOURS;
    cef2:	4c13      	ldr	r4, [pc, #76]	; (cf40 <ivu_refresh+0x50>)
    cef4:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    cef8:	3318      	adds	r3, #24
    cefa:	b2db      	uxtb	r3, r3
	BT_DBG("%s for %u hour%s",
	       atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) ?
	       "IVU in Progress" : "IVU Normal mode",
	       bt_mesh.ivu_duration, bt_mesh.ivu_duration == 1U ? "" : "s");

	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    cefc:	2b5f      	cmp	r3, #95	; 0x5f
	bt_mesh.ivu_duration += BT_MESH_IVU_HOURS;
    cefe:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    cf02:	d80a      	bhi.n	cf1a <ivu_refresh+0x2a>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			bt_mesh_store_iv(true);
    cf04:	2001      	movs	r0, #1
    cf06:	f019 ff73 	bl	26df0 <bt_mesh_store_iv>
    cf0a:	f104 0174 	add.w	r1, r4, #116	; 0x74
    cf0e:	4a0d      	ldr	r2, [pc, #52]	; (cf44 <ivu_refresh+0x54>)
    cf10:	480d      	ldr	r0, [pc, #52]	; (cf48 <ivu_refresh+0x58>)
		bt_mesh_beacon_ivu_initiator(true);
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_store_iv(true);
	}
}
    cf12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cf16:	f015 b817 	b.w	21f48 <k_delayed_work_submit_to_queue>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    cf1a:	f7ff fb9f 	bl	c65c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    cf1e:	f010 0f04 	tst.w	r0, #4
		bt_mesh_beacon_ivu_initiator(true);
    cf22:	f04f 0001 	mov.w	r0, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    cf26:	d007      	beq.n	cf38 <ivu_refresh+0x48>
		bt_mesh_beacon_ivu_initiator(true);
    cf28:	f7ff f9e4 	bl	c2f4 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    cf2c:	6820      	ldr	r0, [r4, #0]
    cf2e:	2100      	movs	r1, #0
}
    cf30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    cf34:	f7ff bef6 	b.w	cd24 <bt_mesh_net_iv_update>
}
    cf38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_store_iv(true);
    cf3c:	f019 bf58 	b.w	26df0 <bt_mesh_store_iv>
    cf40:	20006ab8 	.word	0x20006ab8
    cf44:	05265c00 	.word	0x05265c00
    cf48:	20001c08 	.word	0x20001c08

0000cf4c <bt_mesh_next_seq>:
{
    cf4c:	b538      	push	{r3, r4, r5, lr}
	u32_t seq = bt_mesh.seq++;
    cf4e:	4c10      	ldr	r4, [pc, #64]	; (cf90 <bt_mesh_next_seq+0x44>)
    cf50:	6865      	ldr	r5, [r4, #4]
    cf52:	1c6b      	adds	r3, r5, #1
    cf54:	6063      	str	r3, [r4, #4]
		bt_mesh_store_seq();
    cf56:	f006 fddd 	bl	13b14 <bt_mesh_store_seq>
    cf5a:	f7ff fb7f 	bl	c65c <atomic_get.constprop.0>
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
    cf5e:	0743      	lsls	r3, r0, #29
    cf60:	d414      	bmi.n	cf8c <bt_mesh_next_seq+0x40>
    cf62:	6862      	ldr	r2, [r4, #4]
    cf64:	4b0b      	ldr	r3, [pc, #44]	; (cf94 <bt_mesh_next_seq+0x48>)
    cf66:	429a      	cmp	r2, r3
    cf68:	d910      	bls.n	cf8c <bt_mesh_next_seq+0x40>
		if (bt_mesh.sub[i].net_idx == net_idx) {
    cf6a:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    cf6e:	b113      	cbz	r3, cf76 <bt_mesh_next_seq+0x2a>
    cf70:	f8b4 31f4 	ldrh.w	r3, [r4, #500]	; 0x1f4
    cf74:	b953      	cbnz	r3, cf8c <bt_mesh_next_seq+0x40>
		bt_mesh_beacon_ivu_initiator(true);
    cf76:	2001      	movs	r0, #1
    cf78:	f7ff f9bc 	bl	c2f4 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
    cf7c:	6820      	ldr	r0, [r4, #0]
    cf7e:	2101      	movs	r1, #1
    cf80:	4408      	add	r0, r1
    cf82:	f7ff fecf 	bl	cd24 <bt_mesh_net_iv_update>
		bt_mesh_net_sec_update(NULL);
    cf86:	2000      	movs	r0, #0
    cf88:	f019 fa5f 	bl	2644a <bt_mesh_net_sec_update>
}
    cf8c:	4628      	mov	r0, r5
    cf8e:	bd38      	pop	{r3, r4, r5, pc}
    cf90:	20006ab8 	.word	0x20006ab8
    cf94:	007a1200 	.word	0x007a1200

0000cf98 <bt_mesh_net_encode>:
{
    cf98:	b5f0      	push	{r4, r5, r6, r7, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    cf9a:	6843      	ldr	r3, [r0, #4]
    cf9c:	885f      	ldrh	r7, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    cf9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cfa2:	429f      	cmp	r7, r3
{
    cfa4:	b087      	sub	sp, #28
    cfa6:	4605      	mov	r5, r0
    cfa8:	460c      	mov	r4, r1
    cfaa:	4616      	mov	r6, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    cfac:	d112      	bne.n	cfd4 <bt_mesh_net_encode+0x3c>
    cfae:	4608      	mov	r0, r1
    cfb0:	f01a ff94 	bl	27edc <net_buf_simple_tailroom>
    cfb4:	2807      	cmp	r0, #7
    cfb6:	d80d      	bhi.n	cfd4 <bt_mesh_net_encode+0x3c>
    cfb8:	494e      	ldr	r1, [pc, #312]	; (d0f4 <bt_mesh_net_encode+0x15c>)
    cfba:	4b4f      	ldr	r3, [pc, #316]	; (d0f8 <bt_mesh_net_encode+0x160>)
		BT_ERR("Insufficient MIC space for CTL PDU");
    cfbc:	484f      	ldr	r0, [pc, #316]	; (d0fc <bt_mesh_net_encode+0x164>)
    cfbe:	1ac9      	subs	r1, r1, r3
    cfc0:	08c9      	lsrs	r1, r1, #3
    cfc2:	0189      	lsls	r1, r1, #6
    cfc4:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Insufficient MIC space for PDU");
    cfc8:	f016 f9f0 	bl	233ac <log_0>
		return -EINVAL;
    cfcc:	f06f 0015 	mvn.w	r0, #21
}
    cfd0:	b007      	add	sp, #28
    cfd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (net_buf_simple_tailroom(buf) < 4) {
    cfd4:	4620      	mov	r0, r4
    cfd6:	f01a ff81 	bl	27edc <net_buf_simple_tailroom>
    cfda:	2803      	cmp	r0, #3
    cfdc:	d808      	bhi.n	cff0 <bt_mesh_net_encode+0x58>
    cfde:	4945      	ldr	r1, [pc, #276]	; (d0f4 <bt_mesh_net_encode+0x15c>)
    cfe0:	4b45      	ldr	r3, [pc, #276]	; (d0f8 <bt_mesh_net_encode+0x160>)
		BT_ERR("Insufficient MIC space for PDU");
    cfe2:	4847      	ldr	r0, [pc, #284]	; (d100 <bt_mesh_net_encode+0x168>)
    cfe4:	1ac9      	subs	r1, r1, r3
    cfe6:	08c9      	lsrs	r1, r1, #3
    cfe8:	0189      	lsls	r1, r1, #6
    cfea:	f041 0101 	orr.w	r1, r1, #1
    cfee:	e7eb      	b.n	cfc8 <bt_mesh_net_encode+0x30>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    cff0:	686b      	ldr	r3, [r5, #4]
    cff2:	4620      	mov	r0, r4
    cff4:	8899      	ldrh	r1, [r3, #4]
    cff6:	f01a ff2d 	bl	27e54 <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
    cffa:	8929      	ldrh	r1, [r5, #8]
    cffc:	4620      	mov	r0, r4
    cffe:	f01a ff29 	bl	27e54 <net_buf_simple_push_be16>
	net_buf_simple_push_be24(buf, bt_mesh_next_seq());
    d002:	f7ff ffa3 	bl	cf4c <bt_mesh_next_seq>
    d006:	4601      	mov	r1, r0
    d008:	4620      	mov	r0, r4
    d00a:	f01a ff33 	bl	27e74 <net_buf_simple_push_be24>
	if (ctl) {
    d00e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d012:	429f      	cmp	r7, r3
    d014:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    d016:	7ad9      	ldrb	r1, [r3, #11]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    d018:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    d01a:	bf08      	it	eq
    d01c:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    d020:	f01a ff21 	bl	27e66 <net_buf_simple_push_u8>
	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && tx->friend_cred) {
    d024:	7aeb      	ldrb	r3, [r5, #11]
    d026:	6828      	ldr	r0, [r5, #0]
    d028:	f013 0201 	ands.w	r2, r3, #1
    d02c:	d04f      	beq.n	d0ce <bt_mesh_net_encode+0x136>
		if (friend_cred_get(tx->sub, BT_MESH_ADDR_UNASSIGNED,
    d02e:	ab05      	add	r3, sp, #20
    d030:	9300      	str	r3, [sp, #0]
    d032:	f10d 020f 	add.w	r2, sp, #15
    d036:	ab04      	add	r3, sp, #16
    d038:	2100      	movs	r1, #0
    d03a:	f7ff fd2f 	bl	ca9c <friend_cred_get>
    d03e:	b1e8      	cbz	r0, d07c <bt_mesh_net_encode+0xe4>
    d040:	4b2d      	ldr	r3, [pc, #180]	; (d0f8 <bt_mesh_net_encode+0x160>)
    d042:	492c      	ldr	r1, [pc, #176]	; (d0f4 <bt_mesh_net_encode+0x15c>)
			BT_WARN("Falling back to master credentials");
    d044:	482f      	ldr	r0, [pc, #188]	; (d104 <bt_mesh_net_encode+0x16c>)
    d046:	1ac9      	subs	r1, r1, r3
    d048:	08c9      	lsrs	r1, r1, #3
    d04a:	0189      	lsls	r1, r1, #6
    d04c:	f041 0102 	orr.w	r1, r1, #2
    d050:	f016 f9ac 	bl	233ac <log_0>
			nid = tx->sub->keys[tx->sub->kr_flag].nid;
    d054:	682a      	ldr	r2, [r5, #0]
			tx->friend_cred = 0U;
    d056:	7aeb      	ldrb	r3, [r5, #11]
			nid = tx->sub->keys[tx->sub->kr_flag].nid;
    d058:	7f91      	ldrb	r1, [r2, #30]
			tx->friend_cred = 0U;
    d05a:	f36f 0300 	bfc	r3, #0, #1
    d05e:	72eb      	strb	r3, [r5, #11]
			nid = tx->sub->keys[tx->sub->kr_flag].nid;
    d060:	2359      	movs	r3, #89	; 0x59
    d062:	434b      	muls	r3, r1
    d064:	18d1      	adds	r1, r2, r3
    d066:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    d06a:	f88d 100f 	strb.w	r1, [sp, #15]
			enc = tx->sub->keys[tx->sub->kr_flag].enc;
    d06e:	f103 0141 	add.w	r1, r3, #65	; 0x41
			priv = tx->sub->keys[tx->sub->kr_flag].privacy;
    d072:	3369      	adds	r3, #105	; 0x69
			enc = tx->sub->keys[tx->sub->kr_flag].enc;
    d074:	4411      	add	r1, r2
			priv = tx->sub->keys[tx->sub->kr_flag].privacy;
    d076:	4413      	add	r3, r2
			enc = tx->sub->keys[tx->sub->kr_flag].enc;
    d078:	9104      	str	r1, [sp, #16]
			priv = tx->sub->keys[tx->sub->kr_flag].privacy;
    d07a:	9305      	str	r3, [sp, #20]
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    d07c:	4d22      	ldr	r5, [pc, #136]	; (d108 <bt_mesh_net_encode+0x170>)
    d07e:	7829      	ldrb	r1, [r5, #0]
    d080:	f7ff faec 	bl	c65c <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    d084:	f3c0 0080 	ubfx	r0, r0, #2, #1
    d088:	1a08      	subs	r0, r1, r0
    d08a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d08e:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    d092:	b2c9      	uxtb	r1, r1
    d094:	4620      	mov	r0, r4
    d096:	f01a fee6 	bl	27e66 <net_buf_simple_push_u8>
	err = bt_mesh_net_encrypt(enc, buf, BT_MESH_NET_IVI_TX, proxy);
    d09a:	9f04      	ldr	r7, [sp, #16]
    d09c:	682a      	ldr	r2, [r5, #0]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d09e:	f7ff fadd 	bl	c65c <atomic_get.constprop.0>
    d0a2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    d0a6:	1a12      	subs	r2, r2, r0
    d0a8:	4633      	mov	r3, r6
    d0aa:	4621      	mov	r1, r4
    d0ac:	4638      	mov	r0, r7
    d0ae:	f019 fad1 	bl	26654 <bt_mesh_net_encrypt>
	if (err) {
    d0b2:	2800      	cmp	r0, #0
    d0b4:	d18c      	bne.n	cfd0 <bt_mesh_net_encode+0x38>
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    d0b6:	6824      	ldr	r4, [r4, #0]
    d0b8:	6829      	ldr	r1, [r5, #0]
    d0ba:	f7ff facf 	bl	c65c <atomic_get.constprop.0>
    d0be:	f3c0 0080 	ubfx	r0, r0, #2, #1
    d0c2:	1a09      	subs	r1, r1, r0
    d0c4:	9a05      	ldr	r2, [sp, #20]
    d0c6:	4620      	mov	r0, r4
    d0c8:	f002 f934 	bl	f334 <bt_mesh_net_obfuscate>
    d0cc:	e780      	b.n	cfd0 <bt_mesh_net_encode+0x38>
		tx->friend_cred = 0U;
    d0ce:	f362 0300 	bfi	r3, r2, #0, #1
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    d0d2:	7f82      	ldrb	r2, [r0, #30]
		tx->friend_cred = 0U;
    d0d4:	72eb      	strb	r3, [r5, #11]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    d0d6:	2359      	movs	r3, #89	; 0x59
    d0d8:	4353      	muls	r3, r2
    d0da:	18c2      	adds	r2, r0, r3
    d0dc:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
    d0e0:	f88d 200f 	strb.w	r2, [sp, #15]
		enc = tx->sub->keys[tx->sub->kr_flag].enc;
    d0e4:	f103 0241 	add.w	r2, r3, #65	; 0x41
		priv = tx->sub->keys[tx->sub->kr_flag].privacy;
    d0e8:	3369      	adds	r3, #105	; 0x69
		enc = tx->sub->keys[tx->sub->kr_flag].enc;
    d0ea:	4402      	add	r2, r0
		priv = tx->sub->keys[tx->sub->kr_flag].privacy;
    d0ec:	4418      	add	r0, r3
		enc = tx->sub->keys[tx->sub->kr_flag].enc;
    d0ee:	9204      	str	r2, [sp, #16]
		priv = tx->sub->keys[tx->sub->kr_flag].privacy;
    d0f0:	9005      	str	r0, [sp, #20]
    d0f2:	e7c3      	b.n	d07c <bt_mesh_net_encode+0xe4>
    d0f4:	00028990 	.word	0x00028990
    d0f8:	00028868 	.word	0x00028868
    d0fc:	0002c051 	.word	0x0002c051
    d100:	0002c074 	.word	0x0002c074
    d104:	0002c093 	.word	0x0002c093
    d108:	20006ab8 	.word	0x20006ab8

0000d10c <bt_mesh_net_send>:
{
    d10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    d110:	6846      	ldr	r6, [r0, #4]
{
    d112:	461f      	mov	r7, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    d114:	7af3      	ldrb	r3, [r6, #11]
    d116:	2bff      	cmp	r3, #255	; 0xff
{
    d118:	4605      	mov	r5, r0
    d11a:	4688      	mov	r8, r1
    d11c:	4614      	mov	r4, r2
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    d11e:	d102      	bne.n	d126 <bt_mesh_net_send+0x1a>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    d120:	f005 f954 	bl	123cc <bt_mesh_default_ttl_get>
    d124:	72f0      	strb	r0, [r6, #11]
	err = bt_mesh_net_encode(tx, &buf->b, false);
    d126:	f108 0908 	add.w	r9, r8, #8
    d12a:	2200      	movs	r2, #0
    d12c:	4649      	mov	r1, r9
    d12e:	4628      	mov	r0, r5
    d130:	f7ff ff32 	bl	cf98 <bt_mesh_net_encode>
	if (err) {
    d134:	4606      	mov	r6, r0
    d136:	b9c8      	cbnz	r0, d16c <bt_mesh_net_send+0x60>
	    tx->ctx->send_ttl != 1U) {
    d138:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    d13a:	7ada      	ldrb	r2, [r3, #11]
    d13c:	2a01      	cmp	r2, #1
    d13e:	d01b      	beq.n	d178 <bt_mesh_net_send+0x6c>
		if (bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    d140:	8899      	ldrh	r1, [r3, #4]
    d142:	4648      	mov	r0, r9
    d144:	f009 ff68 	bl	17018 <bt_mesh_proxy_relay>
    d148:	b1b0      	cbz	r0, d178 <bt_mesh_net_send+0x6c>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    d14a:	686b      	ldr	r3, [r5, #4]
		if (bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    d14c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    d150:	2b00      	cmp	r3, #0
    d152:	dd11      	ble.n	d178 <bt_mesh_net_send+0x6c>
int friend_cred_del(u16_t net_idx, u16_t addr);

static inline void send_cb_finalize(const struct bt_mesh_send_cb *cb,
				    void *cb_data)
{
	if (!cb) {
    d154:	b154      	cbz	r4, d16c <bt_mesh_net_send+0x60>
		return;
	}

	if (cb->start) {
    d156:	6823      	ldr	r3, [r4, #0]
    d158:	b11b      	cbz	r3, d162 <bt_mesh_net_send+0x56>
		cb->start(0, 0, cb_data);
    d15a:	463a      	mov	r2, r7
    d15c:	4631      	mov	r1, r6
    d15e:	4630      	mov	r0, r6
    d160:	4798      	blx	r3
	}

	if (cb->end) {
    d162:	6863      	ldr	r3, [r4, #4]
    d164:	b113      	cbz	r3, d16c <bt_mesh_net_send+0x60>
		cb->end(0, cb_data);
    d166:	4639      	mov	r1, r7
    d168:	2000      	movs	r0, #0
    d16a:	4798      	blx	r3
	net_buf_unref(buf);
    d16c:	4640      	mov	r0, r8
    d16e:	f011 f98f 	bl	1e490 <net_buf_unref>
}
    d172:	4630      	mov	r0, r6
    d174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    d178:	686b      	ldr	r3, [r5, #4]
    d17a:	8898      	ldrh	r0, [r3, #4]
    d17c:	f019 fc03 	bl	26986 <bt_mesh_fixed_group_match>
    d180:	b318      	cbz	r0, d1ca <bt_mesh_net_send+0xbe>
		if (cb && cb->start) {
    d182:	bb94      	cbnz	r4, d1ea <bt_mesh_net_send+0xde>
		net_buf_slist_put(&bt_mesh.local_queue, net_buf_ref(buf));
    d184:	4640      	mov	r0, r8
    d186:	f011 f9cb 	bl	1e520 <net_buf_ref>
    d18a:	4601      	mov	r1, r0
    d18c:	481b      	ldr	r0, [pc, #108]	; (d1fc <bt_mesh_net_send+0xf0>)
    d18e:	f011 f8a5 	bl	1e2dc <net_buf_slist_put>
		if (cb && cb->end) {
    d192:	b124      	cbz	r4, d19e <bt_mesh_net_send+0x92>
    d194:	6863      	ldr	r3, [r4, #4]
    d196:	b113      	cbz	r3, d19e <bt_mesh_net_send+0x92>
			cb->end(0, cb_data);
    d198:	4639      	mov	r1, r7
    d19a:	2000      	movs	r0, #0
    d19c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d19e:	f3bf 8f5b 	dmb	ish
    d1a2:	4917      	ldr	r1, [pc, #92]	; (d200 <bt_mesh_net_send+0xf4>)
    d1a4:	e851 3f00 	ldrex	r3, [r1]
    d1a8:	f043 0201 	orr.w	r2, r3, #1
    d1ac:	e841 2000 	strex	r0, r2, [r1]
    d1b0:	2800      	cmp	r0, #0
    d1b2:	d1f7      	bne.n	d1a4 <bt_mesh_net_send+0x98>
    d1b4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    d1b8:	f013 0401 	ands.w	r4, r3, #1
    d1bc:	d1d6      	bne.n	d16c <bt_mesh_net_send+0x60>
		k_queue_append(&work_q->queue, work);
    d1be:	4811      	ldr	r0, [pc, #68]	; (d204 <bt_mesh_net_send+0xf8>)
    d1c0:	3908      	subs	r1, #8
    d1c2:	f01b f88d 	bl	282e0 <k_queue_append>
	err = bt_mesh_net_encode(tx, &buf->b, false);
    d1c6:	4626      	mov	r6, r4
    d1c8:	e7d0      	b.n	d16c <bt_mesh_net_send+0x60>
	    bt_mesh_elem_find(tx->ctx->addr)) {
    d1ca:	686b      	ldr	r3, [r5, #4]
    d1cc:	8898      	ldrh	r0, [r3, #4]
    d1ce:	f002 fb17 	bl	f800 <bt_mesh_elem_find>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    d1d2:	2800      	cmp	r0, #0
    d1d4:	d1d5      	bne.n	d182 <bt_mesh_net_send+0x76>
	} else if (tx->ctx->send_ttl != 1U) {
    d1d6:	686b      	ldr	r3, [r5, #4]
    d1d8:	7adb      	ldrb	r3, [r3, #11]
    d1da:	2b01      	cmp	r3, #1
    d1dc:	d0c6      	beq.n	d16c <bt_mesh_net_send+0x60>
		bt_mesh_adv_send(buf, cb, cb_data);
    d1de:	463a      	mov	r2, r7
    d1e0:	4621      	mov	r1, r4
    d1e2:	4640      	mov	r0, r8
    d1e4:	f7fe fe7c 	bl	bee0 <bt_mesh_adv_send>
    d1e8:	e7c0      	b.n	d16c <bt_mesh_net_send+0x60>
		if (cb && cb->start) {
    d1ea:	6823      	ldr	r3, [r4, #0]
    d1ec:	2b00      	cmp	r3, #0
    d1ee:	d0c9      	beq.n	d184 <bt_mesh_net_send+0x78>
			cb->start(0, 0, cb_data);
    d1f0:	2100      	movs	r1, #0
    d1f2:	463a      	mov	r2, r7
    d1f4:	4608      	mov	r0, r1
    d1f6:	4798      	blx	r3
    d1f8:	e7c4      	b.n	d184 <bt_mesh_net_send+0x78>
    d1fa:	bf00      	nop
    d1fc:	20006ad0 	.word	0x20006ad0
    d200:	20006acc 	.word	0x20006acc
    d204:	20001c08 	.word	0x20001c08

0000d208 <bt_mesh_subnet_find>:
{
    d208:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    d20c:	4c28      	ldr	r4, [pc, #160]	; (d2b0 <bt_mesh_subnet_find+0xa8>)
{
    d20e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    d212:	4617      	mov	r7, r2
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    d214:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
{
    d218:	4698      	mov	r8, r3
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    d21a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d21e:	429a      	cmp	r2, r3
{
    d220:	4605      	mov	r5, r0
    d222:	460e      	mov	r6, r1
    d224:	46a2      	mov	sl, r4
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    d226:	d016      	beq.n	d256 <bt_mesh_subnet_find+0x4e>
		if (auth_match(&sub->keys[0], net_id, flags, iv_index, auth)) {
    d228:	460a      	mov	r2, r1
    d22a:	f8cd 8000 	str.w	r8, [sp]
    d22e:	4601      	mov	r1, r0
    d230:	463b      	mov	r3, r7
    d232:	f504 7092 	add.w	r0, r4, #292	; 0x124
    d236:	f7ff f9c9 	bl	c5cc <auth_match>
    d23a:	bb10      	cbnz	r0, d282 <bt_mesh_subnet_find+0x7a>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    d23c:	f894 3113 	ldrb.w	r3, [r4, #275]	; 0x113
    d240:	b14b      	cbz	r3, d256 <bt_mesh_subnet_find+0x4e>
		if (auth_match(&sub->keys[1], net_id, flags, iv_index, auth)) {
    d242:	f8cd 8000 	str.w	r8, [sp]
    d246:	463b      	mov	r3, r7
    d248:	4632      	mov	r2, r6
    d24a:	4629      	mov	r1, r5
    d24c:	f204 107d 	addw	r0, r4, #381	; 0x17d
    d250:	f7ff f9bc 	bl	c5cc <auth_match>
    d254:	bb38      	cbnz	r0, d2a6 <bt_mesh_subnet_find+0x9e>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    d256:	f8ba 21f4 	ldrh.w	r2, [sl, #500]	; 0x1f4
    d25a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d25e:	429a      	cmp	r2, r3
    d260:	d024      	beq.n	d2ac <bt_mesh_subnet_find+0xa4>
		if (auth_match(&sub->keys[0], net_id, flags, iv_index, auth)) {
    d262:	4814      	ldr	r0, [pc, #80]	; (d2b4 <bt_mesh_subnet_find+0xac>)
    d264:	f8cd 8000 	str.w	r8, [sp]
    d268:	463b      	mov	r3, r7
    d26a:	4632      	mov	r2, r6
    d26c:	4629      	mov	r1, r5
    d26e:	f7ff f9ad 	bl	c5cc <auth_match>
    d272:	b148      	cbz	r0, d288 <bt_mesh_subnet_find+0x80>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    d274:	4810      	ldr	r0, [pc, #64]	; (d2b8 <bt_mesh_subnet_find+0xb0>)
			*new_key = false;
    d276:	2300      	movs	r3, #0
			*new_key = true;
    d278:	f889 3000 	strb.w	r3, [r9]
}
    d27c:	b002      	add	sp, #8
    d27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    d282:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    d286:	e7f6      	b.n	d276 <bt_mesh_subnet_find+0x6e>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    d288:	f89a 31f7 	ldrb.w	r3, [sl, #503]	; 0x1f7
    d28c:	b173      	cbz	r3, d2ac <bt_mesh_subnet_find+0xa4>
		if (auth_match(&sub->keys[1], net_id, flags, iv_index, auth)) {
    d28e:	480b      	ldr	r0, [pc, #44]	; (d2bc <bt_mesh_subnet_find+0xb4>)
    d290:	f8cd 8000 	str.w	r8, [sp]
    d294:	463b      	mov	r3, r7
    d296:	4632      	mov	r2, r6
    d298:	4629      	mov	r1, r5
    d29a:	f7ff f997 	bl	c5cc <auth_match>
    d29e:	b128      	cbz	r0, d2ac <bt_mesh_subnet_find+0xa4>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    d2a0:	4805      	ldr	r0, [pc, #20]	; (d2b8 <bt_mesh_subnet_find+0xb0>)
			*new_key = true;
    d2a2:	2301      	movs	r3, #1
    d2a4:	e7e8      	b.n	d278 <bt_mesh_subnet_find+0x70>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    d2a6:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    d2aa:	e7fa      	b.n	d2a2 <bt_mesh_subnet_find+0x9a>
	return NULL;
    d2ac:	2000      	movs	r0, #0
    d2ae:	e7e5      	b.n	d27c <bt_mesh_subnet_find+0x74>
    d2b0:	20006ab8 	.word	0x20006ab8
    d2b4:	20006cc0 	.word	0x20006cc0
    d2b8:	20006c90 	.word	0x20006c90
    d2bc:	20006d19 	.word	0x20006d19

0000d2c0 <bt_mesh_net_decode>:
{
    d2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (data->len < BT_MESH_NET_MIN_PDU_LEN) {
    d2c4:	f8b0 b004 	ldrh.w	fp, [r0, #4]
    d2c8:	f1bb 0f11 	cmp.w	fp, #17
{
    d2cc:	b085      	sub	sp, #20
    d2ce:	4605      	mov	r5, r0
    d2d0:	460f      	mov	r7, r1
    d2d2:	4614      	mov	r4, r2
    d2d4:	461e      	mov	r6, r3
	if (data->len < BT_MESH_NET_MIN_PDU_LEN) {
    d2d6:	d819      	bhi.n	d30c <bt_mesh_net_decode+0x4c>
    d2d8:	4ab7      	ldr	r2, [pc, #732]	; (d5b8 <bt_mesh_net_decode+0x2f8>)
    d2da:	4cb8      	ldr	r4, [pc, #736]	; (d5bc <bt_mesh_net_decode+0x2fc>)
		BT_WARN("Dropping too short mesh packet (len %u)", data->len);
    d2dc:	48b8      	ldr	r0, [pc, #736]	; (d5c0 <bt_mesh_net_decode+0x300>)
    d2de:	1aa4      	subs	r4, r4, r2
    d2e0:	08e4      	lsrs	r4, r4, #3
    d2e2:	01a4      	lsls	r4, r4, #6
    d2e4:	f044 0402 	orr.w	r4, r4, #2
    d2e8:	4622      	mov	r2, r4
    d2ea:	4659      	mov	r1, fp
    d2ec:	f016 f86b 	bl	233c6 <log_1>
		BT_WARN("%s", bt_hex(data->data, data->len));
    d2f0:	88a9      	ldrh	r1, [r5, #4]
    d2f2:	6828      	ldr	r0, [r5, #0]
    d2f4:	f7f8 fcc4 	bl	5c80 <bt_hex_real>
    d2f8:	f7f5 f822 	bl	2340 <log_strdup>
    d2fc:	4622      	mov	r2, r4
    d2fe:	4601      	mov	r1, r0
    d300:	48b0      	ldr	r0, [pc, #704]	; (d5c4 <bt_mesh_net_decode+0x304>)
    d302:	f016 f860 	bl	233c6 <log_1>
		return -EINVAL;
    d306:	f06f 0015 	mvn.w	r0, #21
    d30a:	e125      	b.n	d558 <bt_mesh_net_decode+0x298>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(data)) {
    d30c:	f8d0 a000 	ldr.w	sl, [r0]
    d310:	bba9      	cbnz	r1, d37e <bt_mesh_net_decode+0xbe>
	return buf->data + buf->len;
    d312:	eb0a 010b 	add.w	r1, sl, fp
	return ((u16_t)src[0] << 8) | src[1];
    d316:	f811 0c07 	ldrb.w	r0, [r1, #-7]
    d31a:	f811 5c08 	ldrb.w	r5, [r1, #-8]
    d31e:	f811 cc06 	ldrb.w	ip, [r1, #-6]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    d322:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
    d326:	f811 0c05 	ldrb.w	r0, [r1, #-5]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    d32a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    d32e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
	return ((u16_t)src[0] << 8) | src[1];
    d332:	f811 cc04 	ldrb.w	ip, [r1, #-4]
    d336:	f811 5c03 	ldrb.w	r5, [r1, #-3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    d33a:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
    d33e:	f811 cc02 	ldrb.w	ip, [r1, #-2]
    d342:	f811 1c01 	ldrb.w	r1, [r1, #-1]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    d346:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
    d34a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    d34e:	4d9e      	ldr	r5, [pc, #632]	; (d5c8 <bt_mesh_net_decode+0x308>)
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
    d350:	4048      	eors	r0, r1
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    d352:	46ac      	mov	ip, r5
    d354:	4639      	mov	r1, r7
		if (dup_cache[i] == val) {
    d356:	f855 3b04 	ldr.w	r3, [r5], #4
    d35a:	4298      	cmp	r0, r3
    d35c:	d0d3      	beq.n	d306 <bt_mesh_net_decode+0x46>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    d35e:	3101      	adds	r1, #1
    d360:	2904      	cmp	r1, #4
    d362:	d1f8      	bne.n	d356 <bt_mesh_net_decode+0x96>
	dup_cache[dup_cache_next++] = val;
    d364:	4d99      	ldr	r5, [pc, #612]	; (d5cc <bt_mesh_net_decode+0x30c>)
    d366:	6829      	ldr	r1, [r5, #0]
    d368:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
    d36c:	3101      	adds	r1, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
    d36e:	4248      	negs	r0, r1
    d370:	f000 0003 	and.w	r0, r0, #3
    d374:	f001 0103 	and.w	r1, r1, #3
    d378:	bf58      	it	pl
    d37a:	4241      	negpl	r1, r0
    d37c:	6029      	str	r1, [r5, #0]
	rx->net_if = net_if;
    d37e:	7d21      	ldrb	r1, [r4, #20]
    d380:	4d93      	ldr	r5, [pc, #588]	; (d5d0 <bt_mesh_net_decode+0x310>)
		if (cred->net_idx != sub->net_idx) {
    d382:	f8df 8270 	ldr.w	r8, [pc, #624]	; d5f4 <bt_mesh_net_decode+0x334>
	rx->net_if = net_if;
    d386:	f367 1105 	bfi	r1, r7, #4, #2
    d38a:	7521      	strb	r1, [r4, #20]
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    d38c:	f04f 0900 	mov.w	r9, #0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    d390:	f8b5 1110 	ldrh.w	r1, [r5, #272]	; 0x110
    d394:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d398:	4281      	cmp	r1, r0
    d39a:	f000 80d7 	beq.w	d54c <bt_mesh_net_decode+0x28c>
		if (cred->net_idx != sub->net_idx) {
    d39e:	f8b8 0000 	ldrh.w	r0, [r8]
    d3a2:	f105 03f4 	add.w	r3, r5, #244	; 0xf4
    d3a6:	4288      	cmp	r0, r1
    d3a8:	9303      	str	r3, [sp, #12]
    d3aa:	d12a      	bne.n	d402 <bt_mesh_net_decode+0x142>
		if (NID(data) == cred->cred[0].nid &&
    d3ac:	f89a 1000 	ldrb.w	r1, [sl]
    d3b0:	f898 0008 	ldrb.w	r0, [r8, #8]
    d3b4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    d3b8:	4288      	cmp	r0, r1
    d3ba:	d10b      	bne.n	d3d4 <bt_mesh_net_decode+0x114>
		    !net_decrypt(sub, cred->cred[0].enc, cred->cred[0].privacy,
    d3bc:	4985      	ldr	r1, [pc, #532]	; (d5d4 <bt_mesh_net_decode+0x314>)
    d3be:	e9cd 4600 	strd	r4, r6, [sp]
    d3c2:	465b      	mov	r3, fp
    d3c4:	4652      	mov	r2, sl
    d3c6:	f1a1 0010 	sub.w	r0, r1, #16
    d3ca:	f7ff f951 	bl	c670 <net_decrypt.isra.0>
		if (NID(data) == cred->cred[0].nid &&
    d3ce:	2800      	cmp	r0, #0
    d3d0:	f000 8085 	beq.w	d4de <bt_mesh_net_decode+0x21e>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    d3d4:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
    d3d8:	b199      	cbz	r1, d402 <bt_mesh_net_decode+0x142>
		if (NID(data) == cred->cred[1].nid &&
    d3da:	f89a 1000 	ldrb.w	r1, [sl]
    d3de:	f898 0029 	ldrb.w	r0, [r8, #41]	; 0x29
    d3e2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    d3e6:	4288      	cmp	r0, r1
    d3e8:	d10b      	bne.n	d402 <bt_mesh_net_decode+0x142>
		    !net_decrypt(sub, cred->cred[1].enc, cred->cred[1].privacy,
    d3ea:	497b      	ldr	r1, [pc, #492]	; (d5d8 <bt_mesh_net_decode+0x318>)
    d3ec:	e9cd 4600 	strd	r4, r6, [sp]
    d3f0:	465b      	mov	r3, fp
    d3f2:	4652      	mov	r2, sl
    d3f4:	f1a1 0010 	sub.w	r0, r1, #16
    d3f8:	f7ff f93a 	bl	c670 <net_decrypt.isra.0>
		if (NID(data) == cred->cred[1].nid &&
    d3fc:	2800      	cmp	r0, #0
    d3fe:	f000 8086 	beq.w	d50e <bt_mesh_net_decode+0x24e>
		if (cred->net_idx != sub->net_idx) {
    d402:	f8b8 004a 	ldrh.w	r0, [r8, #74]	; 0x4a
    d406:	f8b5 1110 	ldrh.w	r1, [r5, #272]	; 0x110
    d40a:	4288      	cmp	r0, r1
    d40c:	d10b      	bne.n	d426 <bt_mesh_net_decode+0x166>
		if (NID(data) == cred->cred[0].nid &&
    d40e:	f89a 1000 	ldrb.w	r1, [sl]
    d412:	f898 0052 	ldrb.w	r0, [r8, #82]	; 0x52
    d416:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    d41a:	4288      	cmp	r0, r1
    d41c:	d054      	beq.n	d4c8 <bt_mesh_net_decode+0x208>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    d41e:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
    d422:	2900      	cmp	r1, #0
    d424:	d160      	bne.n	d4e8 <bt_mesh_net_decode+0x228>
		if (NID(data) == sub->keys[0].nid &&
    d426:	f89a 1000 	ldrb.w	r1, [sl]
    d42a:	f895 0134 	ldrb.w	r0, [r5, #308]	; 0x134
    d42e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    d432:	4288      	cmp	r0, r1
    d434:	d170      	bne.n	d518 <bt_mesh_net_decode+0x258>
		    !net_decrypt(sub, sub->keys[0].enc, sub->keys[0].privacy,
    d436:	e9cd 4600 	strd	r4, r6, [sp]
    d43a:	465b      	mov	r3, fp
    d43c:	4652      	mov	r2, sl
    d43e:	f205 115d 	addw	r1, r5, #349	; 0x15d
    d442:	f205 1035 	addw	r0, r5, #309	; 0x135
    d446:	f7ff f913 	bl	c670 <net_decrypt.isra.0>
		if (NID(data) == sub->keys[0].nid &&
    d44a:	2800      	cmp	r0, #0
    d44c:	d164      	bne.n	d518 <bt_mesh_net_decode+0x258>
			rx->ctx.net_idx = sub->net_idx;
    d44e:	4a60      	ldr	r2, [pc, #384]	; (d5d0 <bt_mesh_net_decode+0x310>)
	rx->ctl = CTL(buf->data);
    d450:	7d21      	ldrb	r1, [r4, #20]
			rx->ctx.net_idx = sub->net_idx;
    d452:	23e4      	movs	r3, #228	; 0xe4
    d454:	fb03 2909 	mla	r9, r3, r9, r2
	rx->ctx.recv_ttl = TTL(buf->data);
    d458:	6832      	ldr	r2, [r6, #0]
			rx->ctx.net_idx = sub->net_idx;
    d45a:	f8b9 3110 	ldrh.w	r3, [r9, #272]	; 0x110
    d45e:	80a3      	strh	r3, [r4, #4]
			rx->sub = sub;
    d460:	9b03      	ldr	r3, [sp, #12]
    d462:	6023      	str	r3, [r4, #0]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
    d464:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d468:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(buf->data);
    d46a:	7853      	ldrb	r3, [r2, #1]
    d46c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d470:	7363      	strb	r3, [r4, #13]
	if (rx->ctx.recv_ttl == 0U) {
    d472:	3b00      	subs	r3, #0
    d474:	bf18      	it	ne
    d476:	2301      	movne	r3, #1
    d478:	425b      	negs	r3, r3
    d47a:	73e3      	strb	r3, [r4, #15]
	rx->ctl = CTL(buf->data);
    d47c:	7853      	ldrb	r3, [r2, #1]
    d47e:	09db      	lsrs	r3, r3, #7
    d480:	f363 01c3 	bfi	r1, r3, #3, #1
    d484:	7521      	strb	r1, [r4, #20]
	return ((u16_t)src[0] << 8) | src[1];
    d486:	78d1      	ldrb	r1, [r2, #3]
    d488:	7913      	ldrb	r3, [r2, #4]
	return ((u32_t)src[0] << 16) | sys_get_be16(&src[1]);
    d48a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    d48e:	7891      	ldrb	r1, [r2, #2]
    d490:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	rx->seq = SEQ(buf->data);
    d494:	6123      	str	r3, [r4, #16]
	return ((u16_t)src[0] << 8) | src[1];
    d496:	79d1      	ldrb	r1, [r2, #7]
    d498:	7a13      	ldrb	r3, [r2, #8]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    d49a:	2f03      	cmp	r7, #3
    d49c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rx->ctx.recv_dst = DST(buf->data);
    d4a0:	8163      	strh	r3, [r4, #10]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    d4a2:	d05c      	beq.n	d55e <bt_mesh_net_decode+0x29e>
    d4a4:	2b00      	cmp	r3, #0
    d4a6:	d15a      	bne.n	d55e <bt_mesh_net_decode+0x29e>
    d4a8:	4944      	ldr	r1, [pc, #272]	; (d5bc <bt_mesh_net_decode+0x2fc>)
    d4aa:	4b43      	ldr	r3, [pc, #268]	; (d5b8 <bt_mesh_net_decode+0x2f8>)
		BT_ERR("Destination address is unassigned; dropping packet");
    d4ac:	484b      	ldr	r0, [pc, #300]	; (d5dc <bt_mesh_net_decode+0x31c>)
    d4ae:	1ac9      	subs	r1, r1, r3
    d4b0:	08c9      	lsrs	r1, r1, #3
    d4b2:	0189      	lsls	r1, r1, #6
    d4b4:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Destination address is RFU; dropping packet");
    d4b8:	f015 ff78 	bl	233ac <log_0>
		return -EBADMSG;
    d4bc:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    d4c0:	e04a      	b.n	d558 <bt_mesh_net_decode+0x298>
    d4c2:	f04f 0901 	mov.w	r9, #1
    d4c6:	e763      	b.n	d390 <bt_mesh_net_decode+0xd0>
		    !net_decrypt(sub, cred->cred[0].enc, cred->cred[0].privacy,
    d4c8:	4945      	ldr	r1, [pc, #276]	; (d5e0 <bt_mesh_net_decode+0x320>)
    d4ca:	e9cd 4600 	strd	r4, r6, [sp]
    d4ce:	465b      	mov	r3, fp
    d4d0:	4652      	mov	r2, sl
    d4d2:	f1a1 0010 	sub.w	r0, r1, #16
    d4d6:	f7ff f8cb 	bl	c670 <net_decrypt.isra.0>
		if (NID(data) == cred->cred[0].nid &&
    d4da:	2800      	cmp	r0, #0
    d4dc:	d19f      	bne.n	d41e <bt_mesh_net_decode+0x15e>
			rx->friend_cred = 1U;
    d4de:	7d23      	ldrb	r3, [r4, #20]
    d4e0:	f043 0304 	orr.w	r3, r3, #4
			rx->new_key = 1U;
    d4e4:	7523      	strb	r3, [r4, #20]
    d4e6:	e7b2      	b.n	d44e <bt_mesh_net_decode+0x18e>
		if (NID(data) == cred->cred[1].nid &&
    d4e8:	f89a 1000 	ldrb.w	r1, [sl]
    d4ec:	f898 0073 	ldrb.w	r0, [r8, #115]	; 0x73
    d4f0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    d4f4:	4288      	cmp	r0, r1
    d4f6:	d196      	bne.n	d426 <bt_mesh_net_decode+0x166>
		    !net_decrypt(sub, cred->cred[1].enc, cred->cred[1].privacy,
    d4f8:	493a      	ldr	r1, [pc, #232]	; (d5e4 <bt_mesh_net_decode+0x324>)
    d4fa:	e9cd 4600 	strd	r4, r6, [sp]
    d4fe:	465b      	mov	r3, fp
    d500:	4652      	mov	r2, sl
    d502:	f1a1 0010 	sub.w	r0, r1, #16
    d506:	f7ff f8b3 	bl	c670 <net_decrypt.isra.0>
		if (NID(data) == cred->cred[1].nid &&
    d50a:	2800      	cmp	r0, #0
    d50c:	d18b      	bne.n	d426 <bt_mesh_net_decode+0x166>
			rx->new_key = 1U;
    d50e:	7d23      	ldrb	r3, [r4, #20]
    d510:	f043 0302 	orr.w	r3, r3, #2
    d514:	7523      	strb	r3, [r4, #20]
			return 0;
    d516:	e7e2      	b.n	d4de <bt_mesh_net_decode+0x21e>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    d518:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
    d51c:	b1b1      	cbz	r1, d54c <bt_mesh_net_decode+0x28c>
		if (NID(data) == sub->keys[1].nid &&
    d51e:	f89a 1000 	ldrb.w	r1, [sl]
    d522:	f895 018d 	ldrb.w	r0, [r5, #397]	; 0x18d
    d526:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    d52a:	4288      	cmp	r0, r1
    d52c:	d10e      	bne.n	d54c <bt_mesh_net_decode+0x28c>
		    !net_decrypt(sub, sub->keys[1].enc, sub->keys[1].privacy,
    d52e:	e9cd 4600 	strd	r4, r6, [sp]
    d532:	465b      	mov	r3, fp
    d534:	4652      	mov	r2, sl
    d536:	f505 71db 	add.w	r1, r5, #438	; 0x1b6
    d53a:	f505 70c7 	add.w	r0, r5, #398	; 0x18e
    d53e:	f7ff f897 	bl	c670 <net_decrypt.isra.0>
		if (NID(data) == sub->keys[1].nid &&
    d542:	b918      	cbnz	r0, d54c <bt_mesh_net_decode+0x28c>
			rx->new_key = 1U;
    d544:	7d23      	ldrb	r3, [r4, #20]
    d546:	f043 0302 	orr.w	r3, r3, #2
    d54a:	e7cb      	b.n	d4e4 <bt_mesh_net_decode+0x224>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    d54c:	35e4      	adds	r5, #228	; 0xe4
    d54e:	f1b9 0f00 	cmp.w	r9, #0
    d552:	d0b6      	beq.n	d4c2 <bt_mesh_net_decode+0x202>
		return -ENOENT;
    d554:	f06f 0001 	mvn.w	r0, #1
}
    d558:	b005      	add	sp, #20
    d55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (BT_MESH_ADDR_IS_RFU(rx->ctx.recv_dst)) {
    d55e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    d562:	b29b      	uxth	r3, r3
    d564:	2bfb      	cmp	r3, #251	; 0xfb
    d566:	d808      	bhi.n	d57a <bt_mesh_net_decode+0x2ba>
    d568:	4914      	ldr	r1, [pc, #80]	; (d5bc <bt_mesh_net_decode+0x2fc>)
    d56a:	4b13      	ldr	r3, [pc, #76]	; (d5b8 <bt_mesh_net_decode+0x2f8>)
		BT_ERR("Destination address is RFU; dropping packet");
    d56c:	481e      	ldr	r0, [pc, #120]	; (d5e8 <bt_mesh_net_decode+0x328>)
    d56e:	1ac9      	subs	r1, r1, r3
    d570:	08c9      	lsrs	r1, r1, #3
    d572:	0189      	lsls	r1, r1, #6
    d574:	f041 0101 	orr.w	r1, r1, #1
    d578:	e79e      	b.n	d4b8 <bt_mesh_net_decode+0x1f8>
	if (net_if != BT_MESH_NET_IF_LOCAL && bt_mesh_elem_find(rx->ctx.addr)) {
    d57a:	2f01      	cmp	r7, #1
    d57c:	d115      	bne.n	d5aa <bt_mesh_net_decode+0x2ea>
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    d57e:	8922      	ldrh	r2, [r4, #8]
    d580:	6920      	ldr	r0, [r4, #16]
	rx->msg_cache_idx = msg_cache_next++;
    d582:	491a      	ldr	r1, [pc, #104]	; (d5ec <bt_mesh_net_decode+0x32c>)
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    d584:	f3c2 020e 	ubfx	r2, r2, #0, #15
	rx->msg_cache_idx = msg_cache_next++;
    d588:	880b      	ldrh	r3, [r1, #0]
    d58a:	82e3      	strh	r3, [r4, #22]
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    d58c:	ea42 32c0 	orr.w	r2, r2, r0, lsl #15
    d590:	4817      	ldr	r0, [pc, #92]	; (d5f0 <bt_mesh_net_decode+0x330>)
    d592:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	rx->msg_cache_idx = msg_cache_next++;
    d596:	3301      	adds	r3, #1
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    d598:	200a      	movs	r0, #10
    d59a:	b29b      	uxth	r3, r3
    d59c:	fbb3 f2f0 	udiv	r2, r3, r0
    d5a0:	fb00 3312 	mls	r3, r0, r2, r3
    d5a4:	800b      	strh	r3, [r1, #0]
	return 0;
    d5a6:	2000      	movs	r0, #0
}
    d5a8:	e7d6      	b.n	d558 <bt_mesh_net_decode+0x298>
	if (net_if != BT_MESH_NET_IF_LOCAL && bt_mesh_elem_find(rx->ctx.addr)) {
    d5aa:	8920      	ldrh	r0, [r4, #8]
    d5ac:	f002 f928 	bl	f800 <bt_mesh_elem_find>
    d5b0:	2800      	cmp	r0, #0
    d5b2:	d0e4      	beq.n	d57e <bt_mesh_net_decode+0x2be>
    d5b4:	e782      	b.n	d4bc <bt_mesh_net_decode+0x1fc>
    d5b6:	bf00      	nop
    d5b8:	00028868 	.word	0x00028868
    d5bc:	00028990 	.word	0x00028990
    d5c0:	0002c0b6 	.word	0x0002c0b6
    d5c4:	0002e3d1 	.word	0x0002e3d1
    d5c8:	20000948 	.word	0x20000948
    d5cc:	20000958 	.word	0x20000958
    d5d0:	20006ab8 	.word	0x20006ab8
    d5d4:	20001ce7 	.word	0x20001ce7
    d5d8:	20001d08 	.word	0x20001d08
    d5dc:	0002c0de 	.word	0x0002c0de
    d5e0:	20001d31 	.word	0x20001d31
    d5e4:	20001d52 	.word	0x20001d52
    d5e8:	0002c111 	.word	0x0002c111
    d5ec:	20001d62 	.word	0x20001d62
    d5f0:	2000095c 	.word	0x2000095c
    d5f4:	20001cce 	.word	0x20001cce

0000d5f8 <bt_mesh_net_recv>:
{
    d5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5fc:	b092      	sub	sp, #72	; 0x48
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    d5fe:	ab0a      	add	r3, sp, #40	; 0x28
{
    d600:	4617      	mov	r7, r2
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    d602:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
    d606:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
    d60a:	460c      	mov	r4, r1
    d60c:	4605      	mov	r5, r0
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    d60e:	2218      	movs	r2, #24
    d610:	2100      	movs	r1, #0
    d612:	a804      	add	r0, sp, #16
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    d614:	9301      	str	r3, [sp, #4]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    d616:	f017 fd66 	bl	250e6 <memset>
    d61a:	f88d 401c 	strb.w	r4, [sp, #28]
	if (!bt_mesh_is_provisioned()) {
    d61e:	f7fe fa81 	bl	bb24 <bt_mesh_is_provisioned>
    d622:	2800      	cmp	r0, #0
    d624:	d06f      	beq.n	d706 <bt_mesh_net_recv+0x10e>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
    d626:	ab01      	add	r3, sp, #4
    d628:	aa04      	add	r2, sp, #16
    d62a:	4639      	mov	r1, r7
    d62c:	4628      	mov	r0, r5
    d62e:	f7ff fe47 	bl	d2c0 <bt_mesh_net_decode>
    d632:	2800      	cmp	r0, #0
    d634:	d167      	bne.n	d706 <bt_mesh_net_recv+0x10e>
	state->offset = net_buf_simple_headroom(buf);
    d636:	a801      	add	r0, sp, #4
    d638:	f01a fc4c 	bl	27ed4 <net_buf_simple_headroom>
    d63c:	4604      	mov	r4, r0
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    d63e:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	state->len = buf->len;
    d642:	f8bd 6008 	ldrh.w	r6, [sp, #8]
    d646:	f019 f99e 	bl	26986 <bt_mesh_fixed_group_match>
    d64a:	bb40      	cbnz	r0, d69e <bt_mesh_net_recv+0xa6>
			  bt_mesh_elem_find(rx.ctx.recv_dst));
    d64c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    d650:	f002 f8d6 	bl	f800 <bt_mesh_elem_find>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    d654:	3800      	subs	r0, #0
    d656:	bf18      	it	ne
    d658:	2001      	movne	r0, #1
    d65a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    d65e:	2f02      	cmp	r7, #2
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    d660:	f360 1386 	bfi	r3, r0, #6, #1
    d664:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    d668:	d11b      	bne.n	d6a2 <bt_mesh_net_recv+0xaa>
		bt_mesh_proxy_addr_add(data, rx.ctx.addr);
    d66a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    d66e:	4628      	mov	r0, r5
    d670:	f019 fd64 	bl	2713c <bt_mesh_proxy_addr_add>
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    d674:	f004 fe32 	bl	122dc <bt_mesh_gatt_proxy_get>
		    !rx.local_match) {
    d678:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d67c:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    d680:	4318      	orrs	r0, r3
    d682:	f010 0fff 	tst.w	r0, #255	; 0xff
    d686:	d10c      	bne.n	d6a2 <bt_mesh_net_recv+0xaa>
    d688:	497d      	ldr	r1, [pc, #500]	; (d880 <bt_mesh_net_recv+0x288>)
    d68a:	4b7e      	ldr	r3, [pc, #504]	; (d884 <bt_mesh_net_recv+0x28c>)
			BT_INFO("Proxy is disabled; ignoring message");
    d68c:	487e      	ldr	r0, [pc, #504]	; (d888 <bt_mesh_net_recv+0x290>)
    d68e:	1ac9      	subs	r1, r1, r3
    d690:	08c9      	lsrs	r1, r1, #3
    d692:	0189      	lsls	r1, r1, #6
    d694:	f041 0103 	orr.w	r1, r1, #3
		BT_ERR("Out of relay buffers");
    d698:	f015 fe88 	bl	233ac <log_0>
		return;
    d69c:	e033      	b.n	d706 <bt_mesh_net_recv+0x10e>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    d69e:	2001      	movs	r0, #1
    d6a0:	e7db      	b.n	d65a <bt_mesh_net_recv+0x62>
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
    d6a2:	a904      	add	r1, sp, #16
    d6a4:	a801      	add	r0, sp, #4
    d6a6:	f000 ffa7 	bl	e5f8 <bt_mesh_trans_recv>
    d6aa:	300b      	adds	r0, #11
    d6ac:	d114      	bne.n	d6d8 <bt_mesh_net_recv+0xe0>
    d6ae:	4b75      	ldr	r3, [pc, #468]	; (d884 <bt_mesh_net_recv+0x28c>)
    d6b0:	4973      	ldr	r1, [pc, #460]	; (d880 <bt_mesh_net_recv+0x288>)
		BT_WARN("Removing rejected message from Network Message Cache");
    d6b2:	4876      	ldr	r0, [pc, #472]	; (d88c <bt_mesh_net_recv+0x294>)
    d6b4:	1ac9      	subs	r1, r1, r3
    d6b6:	08c9      	lsrs	r1, r1, #3
    d6b8:	0189      	lsls	r1, r1, #6
    d6ba:	f041 0102 	orr.w	r1, r1, #2
    d6be:	f015 fe75 	bl	233ac <log_0>
		msg_cache[rx.msg_cache_idx].src = BT_MESH_ADDR_UNASSIGNED;
    d6c2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    d6c6:	4a72      	ldr	r2, [pc, #456]	; (d890 <bt_mesh_net_recv+0x298>)
    d6c8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    d6cc:	f36f 010e 	bfc	r1, #0, #15
    d6d0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		msg_cache_next = rx.msg_cache_idx;
    d6d4:	4a6f      	ldr	r2, [pc, #444]	; (d894 <bt_mesh_net_recv+0x29c>)
    d6d6:	8013      	strh	r3, [r2, #0]
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    d6d8:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
    d6dc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d6e0:	2a00      	cmp	r2, #0
    d6e2:	dd02      	ble.n	d6ea <bt_mesh_net_recv+0xf2>
    d6e4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    d6e8:	d10d      	bne.n	d706 <bt_mesh_net_recv+0x10e>
	buf->data = buf->__buf + state->offset;
    d6ea:	9803      	ldr	r0, [sp, #12]
    d6ec:	f89d 201d 	ldrb.w	r2, [sp, #29]
	buf->len = state->len;
    d6f0:	f8ad 6008 	strh.w	r6, [sp, #8]
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    d6f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
	buf->data = buf->__buf + state->offset;
    d6f8:	fa10 f484 	uxtah	r4, r0, r4
    d6fc:	2b10      	cmp	r3, #16
    d6fe:	9401      	str	r4, [sp, #4]
    d700:	d104      	bne.n	d70c <bt_mesh_net_recv+0x114>
		if (rx->ctx.recv_ttl == 1U) {
    d702:	2a01      	cmp	r2, #1
    d704:	d10e      	bne.n	d724 <bt_mesh_net_recv+0x12c>
}
    d706:	b012      	add	sp, #72	; 0x48
    d708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rx->ctx.recv_ttl <= 1U) {
    d70c:	2a01      	cmp	r2, #1
    d70e:	d9fa      	bls.n	d706 <bt_mesh_net_recv+0x10e>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    d710:	b943      	cbnz	r3, d724 <bt_mesh_net_recv+0x12c>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    d712:	f004 fc93 	bl	1203c <bt_mesh_relay_get>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    d716:	2801      	cmp	r0, #1
    d718:	d107      	bne.n	d72a <bt_mesh_net_recv+0x132>
	if (rx->net_if == BT_MESH_NET_IF_ADV) {
    d71a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d71e:	f013 0f30 	tst.w	r3, #48	; 0x30
    d722:	d007      	beq.n	d734 <bt_mesh_net_recv+0x13c>
		transmit = bt_mesh_net_transmit_get();
    d724:	f004 fc0e 	bl	11f44 <bt_mesh_net_transmit_get>
    d728:	e006      	b.n	d738 <bt_mesh_net_recv+0x140>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
    d72a:	f004 fdd7 	bl	122dc <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    d72e:	2801      	cmp	r0, #1
    d730:	d1e9      	bne.n	d706 <bt_mesh_net_recv+0x10e>
    d732:	e7f2      	b.n	d71a <bt_mesh_net_recv+0x122>
		transmit = bt_mesh_relay_retransmit_get();
    d734:	f004 fc96 	bl	12064 <bt_mesh_relay_retransmit_get>
		transmit = bt_mesh_net_transmit_get();
    d738:	4601      	mov	r1, r0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, transmit, K_NO_WAIT);
    d73a:	2200      	movs	r2, #0
    d73c:	2001      	movs	r0, #1
    d73e:	f7fe fbbf 	bl	bec0 <bt_mesh_adv_create>
	if (!buf) {
    d742:	4604      	mov	r4, r0
    d744:	b940      	cbnz	r0, d758 <bt_mesh_net_recv+0x160>
    d746:	494e      	ldr	r1, [pc, #312]	; (d880 <bt_mesh_net_recv+0x288>)
    d748:	4b4e      	ldr	r3, [pc, #312]	; (d884 <bt_mesh_net_recv+0x28c>)
		BT_ERR("Out of relay buffers");
    d74a:	4853      	ldr	r0, [pc, #332]	; (d898 <bt_mesh_net_recv+0x2a0>)
    d74c:	1ac9      	subs	r1, r1, r3
    d74e:	08c9      	lsrs	r1, r1, #3
    d750:	0189      	lsls	r1, r1, #6
    d752:	f041 0101 	orr.w	r1, r1, #1
    d756:	e79f      	b.n	d698 <bt_mesh_net_recv+0xa0>
	if (rx->net_if != BT_MESH_NET_IF_LOCAL) {
    d758:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d75c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    d760:	2b10      	cmp	r3, #16
    d762:	d00b      	beq.n	d77c <bt_mesh_net_recv+0x184>
    d764:	9a01      	ldr	r2, [sp, #4]
		sbuf->data[1] &= 0x80;
    d766:	7853      	ldrb	r3, [r2, #1]
    d768:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    d76c:	7053      	strb	r3, [r2, #1]
		sbuf->data[1] |= rx->ctx.recv_ttl - 1U;
    d76e:	9a01      	ldr	r2, [sp, #4]
    d770:	f89d 301d 	ldrb.w	r3, [sp, #29]
    d774:	7851      	ldrb	r1, [r2, #1]
    d776:	3b01      	subs	r3, #1
    d778:	430b      	orrs	r3, r1
    d77a:	7053      	strb	r3, [r2, #1]
	net_buf_add_mem(buf, sbuf->data, sbuf->len);
    d77c:	f104 0708 	add.w	r7, r4, #8
    d780:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    d784:	9901      	ldr	r1, [sp, #4]
    d786:	4638      	mov	r0, r7
    d788:	f01a fbb0 	bl	27eec <net_buf_simple_add_mem>
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    d78c:	9e04      	ldr	r6, [sp, #16]
	if (rx->friend_cred) {
    d78e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    d792:	7fb2      	ldrb	r2, [r6, #30]
    d794:	2559      	movs	r5, #89	; 0x59
    d796:	4355      	muls	r5, r2
    d798:	f105 0041 	add.w	r0, r5, #65	; 0x41
	if (rx->friend_cred) {
    d79c:	075a      	lsls	r2, r3, #29
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    d79e:	4430      	add	r0, r6
	if (rx->friend_cred) {
    d7a0:	d50b      	bpl.n	d7ba <bt_mesh_net_recv+0x1c2>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    d7a2:	68a1      	ldr	r1, [r4, #8]
    d7a4:	780a      	ldrb	r2, [r1, #0]
	nid = rx->sub->keys[rx->sub->kr_flag].nid;
    d7a6:	1973      	adds	r3, r6, r5
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    d7a8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	nid = rx->sub->keys[rx->sub->kr_flag].nid;
    d7ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    d7b0:	700a      	strb	r2, [r1, #0]
		buf->data[0] |= nid;
    d7b2:	68a2      	ldr	r2, [r4, #8]
    d7b4:	7811      	ldrb	r1, [r2, #0]
    d7b6:	430b      	orrs	r3, r1
    d7b8:	7013      	strb	r3, [r2, #0]
	if (bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_RX(rx), false)) {
    d7ba:	f8df 80e8 	ldr.w	r8, [pc, #232]	; d8a4 <bt_mesh_net_recv+0x2ac>
    d7be:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    d7c2:	f8d8 1000 	ldr.w	r1, [r8]
    d7c6:	f002 0201 	and.w	r2, r2, #1
    d7ca:	1a8a      	subs	r2, r1, r2
    d7cc:	2300      	movs	r3, #0
    d7ce:	4639      	mov	r1, r7
    d7d0:	f018 ff40 	bl	26654 <bt_mesh_net_encrypt>
    d7d4:	b168      	cbz	r0, d7f2 <bt_mesh_net_recv+0x1fa>
    d7d6:	492a      	ldr	r1, [pc, #168]	; (d880 <bt_mesh_net_recv+0x288>)
    d7d8:	4b2a      	ldr	r3, [pc, #168]	; (d884 <bt_mesh_net_recv+0x28c>)
		BT_ERR("Re-encrypting failed");
    d7da:	4830      	ldr	r0, [pc, #192]	; (d89c <bt_mesh_net_recv+0x2a4>)
    d7dc:	1ac9      	subs	r1, r1, r3
    d7de:	08c9      	lsrs	r1, r1, #3
    d7e0:	0189      	lsls	r1, r1, #6
    d7e2:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Re-obfuscating failed");
    d7e6:	f015 fde1 	bl	233ac <log_0>
	net_buf_unref(buf);
    d7ea:	4620      	mov	r0, r4
    d7ec:	f010 fe50 	bl	1e490 <net_buf_unref>
    d7f0:	e789      	b.n	d706 <bt_mesh_net_recv+0x10e>
	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
    d7f2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d7f6:	f8d8 1000 	ldr.w	r1, [r8]
    d7fa:	68a0      	ldr	r0, [r4, #8]
	priv = rx->sub->keys[rx->sub->kr_flag].privacy;
    d7fc:	f105 0269 	add.w	r2, r5, #105	; 0x69
	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
    d800:	f003 0301 	and.w	r3, r3, #1
    d804:	4432      	add	r2, r6
    d806:	1ac9      	subs	r1, r1, r3
    d808:	f001 fd94 	bl	f334 <bt_mesh_net_obfuscate>
    d80c:	b140      	cbz	r0, d820 <bt_mesh_net_recv+0x228>
    d80e:	491c      	ldr	r1, [pc, #112]	; (d880 <bt_mesh_net_recv+0x288>)
    d810:	4b1c      	ldr	r3, [pc, #112]	; (d884 <bt_mesh_net_recv+0x28c>)
		BT_ERR("Re-obfuscating failed");
    d812:	4823      	ldr	r0, [pc, #140]	; (d8a0 <bt_mesh_net_recv+0x2a8>)
    d814:	1ac9      	subs	r1, r1, r3
    d816:	08c9      	lsrs	r1, r1, #3
    d818:	0189      	lsls	r1, r1, #6
    d81a:	f041 0101 	orr.w	r1, r1, #1
    d81e:	e7e2      	b.n	d7e6 <bt_mesh_net_recv+0x1ee>
	    (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED ||
    d820:	f004 fd5c 	bl	122dc <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    d824:	2801      	cmp	r0, #1
    d826:	d01c      	beq.n	d862 <bt_mesh_net_recv+0x26a>
	     rx->net_if == BT_MESH_NET_IF_LOCAL)) {
    d828:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    d82c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    d830:	2b10      	cmp	r3, #16
    d832:	d016      	beq.n	d862 <bt_mesh_net_recv+0x26a>
	if (relay_to_adv(rx->net_if)) {
    d834:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d838:	f3c3 1301 	ubfx	r3, r3, #4, #2
	switch (net_if) {
    d83c:	2b01      	cmp	r3, #1
    d83e:	d00a      	beq.n	d856 <bt_mesh_net_recv+0x25e>
    d840:	2b02      	cmp	r3, #2
    d842:	d01a      	beq.n	d87a <bt_mesh_net_recv+0x282>
    d844:	2b00      	cmp	r3, #0
    d846:	d1d0      	bne.n	d7ea <bt_mesh_net_recv+0x1f2>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    d848:	f004 fbf8 	bl	1203c <bt_mesh_relay_get>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    d84c:	1e43      	subs	r3, r0, #1
    d84e:	4258      	negs	r0, r3
    d850:	4158      	adcs	r0, r3
	if (relay_to_adv(rx->net_if)) {
    d852:	2800      	cmp	r0, #0
    d854:	d0c9      	beq.n	d7ea <bt_mesh_net_recv+0x1f2>
		bt_mesh_adv_send(buf, NULL, NULL);
    d856:	2200      	movs	r2, #0
    d858:	4611      	mov	r1, r2
    d85a:	4620      	mov	r0, r4
    d85c:	f7fe fb40 	bl	bee0 <bt_mesh_adv_send>
    d860:	e7c3      	b.n	d7ea <bt_mesh_net_recv+0x1f2>
		if (bt_mesh_proxy_relay(&buf->b, rx->ctx.recv_dst) &&
    d862:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    d866:	4638      	mov	r0, r7
    d868:	f009 fbd6 	bl	17018 <bt_mesh_proxy_relay>
    d86c:	2800      	cmp	r0, #0
    d86e:	d0e1      	beq.n	d834 <bt_mesh_net_recv+0x23c>
    d870:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
    d874:	2b00      	cmp	r3, #0
    d876:	dddd      	ble.n	d834 <bt_mesh_net_recv+0x23c>
    d878:	e7b7      	b.n	d7ea <bt_mesh_net_recv+0x1f2>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    d87a:	f004 fd2f 	bl	122dc <bt_mesh_gatt_proxy_get>
    d87e:	e7e5      	b.n	d84c <bt_mesh_net_recv+0x254>
    d880:	00028990 	.word	0x00028990
    d884:	00028868 	.word	0x00028868
    d888:	0002c13d 	.word	0x0002c13d
    d88c:	0002c161 	.word	0x0002c161
    d890:	2000095c 	.word	0x2000095c
    d894:	20001d62 	.word	0x20001d62
    d898:	0002c196 	.word	0x0002c196
    d89c:	0002c1ab 	.word	0x0002c1ab
    d8a0:	0002c1c0 	.word	0x0002c1c0
    d8a4:	20006ab8 	.word	0x20006ab8

0000d8a8 <bt_mesh_net_local>:
{
    d8a8:	b538      	push	{r3, r4, r5, lr}
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    d8aa:	4d08      	ldr	r5, [pc, #32]	; (d8cc <bt_mesh_net_local+0x24>)
    d8ac:	4628      	mov	r0, r5
    d8ae:	f010 fd57 	bl	1e360 <net_buf_slist_get>
    d8b2:	4604      	mov	r4, r0
    d8b4:	b900      	cbnz	r0, d8b8 <bt_mesh_net_local+0x10>
}
    d8b6:	bd38      	pop	{r3, r4, r5, pc}
		bt_mesh_net_recv(&buf->b, 0, BT_MESH_NET_IF_LOCAL);
    d8b8:	f104 0008 	add.w	r0, r4, #8
    d8bc:	2201      	movs	r2, #1
    d8be:	2100      	movs	r1, #0
    d8c0:	f7ff fe9a 	bl	d5f8 <bt_mesh_net_recv>
		net_buf_unref(buf);
    d8c4:	4620      	mov	r0, r4
    d8c6:	f010 fde3 	bl	1e490 <net_buf_unref>
    d8ca:	e7ef      	b.n	d8ac <bt_mesh_net_local+0x4>
    d8cc:	20006ad0 	.word	0x20006ad0

0000d8d0 <bt_mesh_net_start>:

void bt_mesh_net_start(void)
{
    d8d0:	b510      	push	{r4, lr}
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED) {
    d8d2:	f004 fc6f 	bl	121b4 <bt_mesh_beacon_get>
    d8d6:	2801      	cmp	r0, #1
    d8d8:	d116      	bne.n	d908 <bt_mesh_net_start+0x38>
		bt_mesh_beacon_enable();
    d8da:	f7fe fe41 	bl	c560 <bt_mesh_beacon_enable>
	} else {
		bt_mesh_beacon_disable();
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
    d8de:	f004 fcfd 	bl	122dc <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    d8e2:	2802      	cmp	r0, #2
    d8e4:	d003      	beq.n	d8ee <bt_mesh_net_start+0x1e>
		bt_mesh_proxy_gatt_enable();
    d8e6:	f009 fb17 	bl	16f18 <bt_mesh_proxy_gatt_enable>
		bt_mesh_adv_update();
    d8ea:	f7fe faa9 	bl	be40 <bt_mesh_adv_update>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
		bt_mesh_lpn_init();
    d8ee:	f007 f987 	bl	14c00 <bt_mesh_lpn_init>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_init();
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		u16_t net_idx = bt_mesh.sub[0].net_idx;
    d8f2:	4b07      	ldr	r3, [pc, #28]	; (d910 <bt_mesh_net_start+0x40>)
    d8f4:	f8b3 4110 	ldrh.w	r4, [r3, #272]	; 0x110
		u16_t addr = bt_mesh_primary_addr();
    d8f8:	f001 ff7c 	bl	f7f4 <bt_mesh_primary_addr>
    d8fc:	4601      	mov	r1, r0

		bt_mesh_prov_complete(net_idx, addr);
    d8fe:	4620      	mov	r0, r4
	}
}
    d900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov_complete(net_idx, addr);
    d904:	f008 b862 	b.w	159cc <bt_mesh_prov_complete>
		bt_mesh_beacon_disable();
    d908:	f7fe fe50 	bl	c5ac <bt_mesh_beacon_disable>
    d90c:	e7e7      	b.n	d8de <bt_mesh_net_start+0xe>
    d90e:	bf00      	nop
    d910:	20006ab8 	.word	0x20006ab8

0000d914 <bt_mesh_net_init>:

void bt_mesh_net_init(void)
{
    d914:	b510      	push	{r4, lr}
	k_delayed_work_init(&bt_mesh.ivu_timer, ivu_refresh);
    d916:	4c06      	ldr	r4, [pc, #24]	; (d930 <bt_mesh_net_init+0x1c>)
    d918:	4906      	ldr	r1, [pc, #24]	; (d934 <bt_mesh_net_init+0x20>)
    d91a:	f104 0074 	add.w	r0, r4, #116	; 0x74
    d91e:	f01a fdb3 	bl	28488 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    d922:	4a05      	ldr	r2, [pc, #20]	; (d938 <bt_mesh_net_init+0x24>)
    d924:	2300      	movs	r3, #0
    d926:	e9c4 2304 	strd	r2, r3, [r4, #16]
    d92a:	60e3      	str	r3, [r4, #12]

	k_work_init(&bt_mesh.local_work, bt_mesh_net_local);
}
    d92c:	bd10      	pop	{r4, pc}
    d92e:	bf00      	nop
    d930:	20006ab8 	.word	0x20006ab8
    d934:	0000cef1 	.word	0x0000cef1
    d938:	0000d8a9 	.word	0x0000d8a9

0000d93c <send_unseg>:
}

static int send_unseg(struct bt_mesh_net_tx *tx, struct net_buf_simple *sdu,
		      const struct bt_mesh_send_cb *cb, void *cb_data,
		      const u8_t *ctl_op)
{
    d93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d940:	4604      	mov	r4, r0
    d942:	460f      	mov	r7, r1
    d944:	4690      	mov	r8, r2
	struct net_buf *buf;

	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    d946:	7a81      	ldrb	r1, [r0, #10]
{
    d948:	f8dd a020 	ldr.w	sl, [sp, #32]
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    d94c:	2200      	movs	r2, #0
    d94e:	2001      	movs	r0, #1
{
    d950:	4699      	mov	r9, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    d952:	f7fe fab5 	bl	bec0 <bt_mesh_adv_create>
	if (!buf) {
    d956:	4605      	mov	r5, r0
    d958:	b340      	cbz	r0, d9ac <send_unseg+0x70>
		BT_ERR("Out of network buffers");
		return -ENOBUFS;
	}

	net_buf_reserve(buf, BT_MESH_NET_HDR_LEN);
    d95a:	f100 0608 	add.w	r6, r0, #8
    d95e:	2109      	movs	r1, #9
    d960:	4630      	mov	r0, r6
    d962:	f010 fc91 	bl	1e288 <net_buf_simple_reserve>

	if (ctl_op) {
    d966:	f1ba 0f00 	cmp.w	sl, #0
    d96a:	d013      	beq.n	d994 <send_unseg+0x58>
		net_buf_add_u8(buf, TRANS_CTL_HDR(*ctl_op, 0));
    d96c:	f89a 1000 	ldrb.w	r1, [sl]
    d970:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	} else if (BT_MESH_IS_DEV_KEY(tx->ctx->app_idx)) {
		net_buf_add_u8(buf, UNSEG_HDR(0, 0));
	} else {
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
    d974:	4630      	mov	r0, r6
    d976:	f01a fac5 	bl	27f04 <net_buf_simple_add_u8>
	}

	net_buf_add_mem(buf, sdu->data, sdu->len);
    d97a:	88ba      	ldrh	r2, [r7, #4]
    d97c:	6839      	ldr	r1, [r7, #0]
    d97e:	4630      	mov	r0, r6
    d980:	f01a fab4 	bl	27eec <net_buf_simple_add_mem>
			return 0;
		}
	}

send:
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    d984:	464b      	mov	r3, r9
    d986:	4642      	mov	r2, r8
    d988:	4629      	mov	r1, r5
    d98a:	4620      	mov	r0, r4
}
    d98c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    d990:	f7ff bbbc 	b.w	d10c <bt_mesh_net_send>
	} else if (BT_MESH_IS_DEV_KEY(tx->ctx->app_idx)) {
    d994:	6863      	ldr	r3, [r4, #4]
    d996:	8858      	ldrh	r0, [r3, #2]
    d998:	3003      	adds	r0, #3
    d99a:	b280      	uxth	r0, r0
    d99c:	2801      	cmp	r0, #1
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
    d99e:	bf85      	ittet	hi
    d9a0:	7ae1      	ldrbhi	r1, [r4, #11]
    d9a2:	0889      	lsrhi	r1, r1, #2
		net_buf_add_u8(buf, UNSEG_HDR(0, 0));
    d9a4:	4651      	movls	r1, sl
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
    d9a6:	f041 0140 	orrhi.w	r1, r1, #64	; 0x40
    d9aa:	e7e3      	b.n	d974 <send_unseg+0x38>
    d9ac:	4b06      	ldr	r3, [pc, #24]	; (d9c8 <send_unseg+0x8c>)
    d9ae:	4907      	ldr	r1, [pc, #28]	; (d9cc <send_unseg+0x90>)
		BT_ERR("Out of network buffers");
    d9b0:	4807      	ldr	r0, [pc, #28]	; (d9d0 <send_unseg+0x94>)
    d9b2:	1ac9      	subs	r1, r1, r3
    d9b4:	08c9      	lsrs	r1, r1, #3
    d9b6:	0189      	lsls	r1, r1, #6
    d9b8:	f041 0101 	orr.w	r1, r1, #1
    d9bc:	f015 fcf6 	bl	233ac <log_0>
}
    d9c0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    d9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d9c8:	00028868 	.word	0x00028868
    d9cc:	000289c0 	.word	0x000289c0
    d9d0:	0002c1e2 	.word	0x0002c1e2

0000d9d4 <seg_rx_reset>:
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
				NULL, NULL);
}

static void seg_rx_reset(struct seg_rx *rx, bool full_reset)
{
    d9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d9d8:	4604      	mov	r4, r0
	int i;

	BT_DBG("rx %p", rx);

	k_delayed_work_cancel(&rx->ack);
    d9da:	302c      	adds	r0, #44	; 0x2c
{
    d9dc:	460f      	mov	r7, r1
	k_delayed_work_cancel(&rx->ack);
    d9de:	f014 fb43 	bl	22068 <k_delayed_work_cancel>
		BT_WARN("Clearing incomplete buffers from Friend queue");
		bt_mesh_friend_clear_incomplete(rx->sub, rx->src, rx->dst,
						&rx->seq_auth);
	}

	for (i = 0; i <= rx->seg_n; i++) {
    d9e2:	2600      	movs	r6, #0
		k_mem_slab_free(&segs, &rx->seg[i]);
    d9e4:	f8df 9038 	ldr.w	r9, [pc, #56]	; da20 <seg_rx_reset+0x4c>
    d9e8:	f104 0804 	add.w	r8, r4, #4
		rx->seg[i] = NULL;
    d9ec:	4635      	mov	r5, r6
		k_mem_slab_free(&segs, &rx->seg[i]);
    d9ee:	4641      	mov	r1, r8
    d9f0:	4648      	mov	r0, r9
    d9f2:	f012 f8e7 	bl	1fbc4 <k_mem_slab_free>
		rx->seg[i] = NULL;
    d9f6:	f848 5b04 	str.w	r5, [r8], #4
	for (i = 0; i <= rx->seg_n; i++) {
    d9fa:	7fe3      	ldrb	r3, [r4, #31]
    d9fc:	3601      	adds	r6, #1
    d9fe:	f003 021f 	and.w	r2, r3, #31
    da02:	4296      	cmp	r6, r2
    da04:	ddf3      	ble.n	d9ee <seg_rx_reset+0x1a>
	}

	rx->in_use = 0U;
    da06:	f365 1386 	bfi	r3, r5, #6, #1
    da0a:	77e3      	strb	r3, [r4, #31]

	/* We don't always reset these values since we need to be able to
	 * send an ack if we receive a segment after we've already received
	 * the full SDU.
	 */
	if (full_reset) {
    da0c:	b12f      	cbz	r7, da1a <seg_rx_reset+0x46>
		rx->seq_auth = 0U;
    da0e:	2200      	movs	r2, #0
    da10:	2300      	movs	r3, #0
    da12:	e9c4 2304 	strd	r2, r3, [r4, #16]
		rx->sub = NULL;
    da16:	6025      	str	r5, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    da18:	61a5      	str	r5, [r4, #24]
		rx->dst = BT_MESH_ADDR_UNASSIGNED;
	}
}
    da1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    da1e:	bf00      	nop
    da20:	20007480 	.word	0x20007480

0000da24 <app_key_decrypt.constprop.0>:
static int app_key_decrypt(struct bt_mesh_net_rx *rx,
    da24:	b5f0      	push	{r4, r5, r6, r7, lr}
    da26:	460c      	mov	r4, r1
	if (key->net_idx != rx->sub->net_idx) {
    da28:	6801      	ldr	r1, [r0, #0]
    da2a:	8825      	ldrh	r5, [r4, #0]
    da2c:	8b89      	ldrh	r1, [r1, #28]
    da2e:	428d      	cmp	r5, r1
static int app_key_decrypt(struct bt_mesh_net_rx *rx,
    da30:	b087      	sub	sp, #28
	if (key->net_idx != rx->sub->net_idx) {
    da32:	d134      	bne.n	da9e <app_key_decrypt.constprop.0+0x7a>
	if (rx->new_key && key->updated) {
    da34:	7d01      	ldrb	r1, [r0, #20]
    da36:	078d      	lsls	r5, r1, #30
    da38:	d52f      	bpl.n	da9a <app_key_decrypt.constprop.0+0x76>
    da3a:	7925      	ldrb	r5, [r4, #4]
    da3c:	b36d      	cbz	r5, da9a <app_key_decrypt.constprop.0+0x76>
		keys = &key->keys[1];
    da3e:	f104 0516 	add.w	r5, r4, #22
	if (AID(&hdr) != keys->id) {
    da42:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    da46:	782f      	ldrb	r7, [r5, #0]
    da48:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    da4c:	42b7      	cmp	r7, r6
    da4e:	d126      	bne.n	da9e <app_key_decrypt.constprop.0+0x7a>
	err = bt_mesh_app_decrypt(keys->val, false, aszmic, buf, sdu, ad,
    da50:	4e14      	ldr	r6, [pc, #80]	; (daa4 <app_key_decrypt.constprop.0+0x80>)
    da52:	6836      	ldr	r6, [r6, #0]
				  BT_MESH_NET_IVI_RX(rx));
    da54:	f001 0101 	and.w	r1, r1, #1
	err = bt_mesh_app_decrypt(keys->val, false, aszmic, buf, sdu, ad,
    da58:	1a71      	subs	r1, r6, r1
    da5a:	e9cd 2104 	strd	r2, r1, [sp, #16]
    da5e:	8942      	ldrh	r2, [r0, #10]
    da60:	9203      	str	r2, [sp, #12]
    da62:	8902      	ldrh	r2, [r0, #8]
    da64:	e9cd 3201 	strd	r3, r2, [sp, #4]
    da68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    da6a:	9300      	str	r3, [sp, #0]
    da6c:	1c68      	adds	r0, r5, #1
    da6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    da70:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    da74:	2100      	movs	r1, #0
    da76:	f018 fed7 	bl	26828 <bt_mesh_app_decrypt>
	if (err) {
    da7a:	4605      	mov	r5, r0
    da7c:	b150      	cbz	r0, da94 <app_key_decrypt.constprop.0+0x70>
    da7e:	4a0a      	ldr	r2, [pc, #40]	; (daa8 <app_key_decrypt.constprop.0+0x84>)
    da80:	4b0a      	ldr	r3, [pc, #40]	; (daac <app_key_decrypt.constprop.0+0x88>)
		BT_WARN("Unable to decrypt with AppKey 0x%03x", key->app_idx);
    da82:	8861      	ldrh	r1, [r4, #2]
    da84:	480a      	ldr	r0, [pc, #40]	; (dab0 <app_key_decrypt.constprop.0+0x8c>)
    da86:	1ad2      	subs	r2, r2, r3
    da88:	08d2      	lsrs	r2, r2, #3
    da8a:	0192      	lsls	r2, r2, #6
    da8c:	f042 0202 	orr.w	r2, r2, #2
    da90:	f015 fc99 	bl	233c6 <log_1>
}
    da94:	4628      	mov	r0, r5
    da96:	b007      	add	sp, #28
    da98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		keys = &key->keys[0];
    da9a:	1d65      	adds	r5, r4, #5
    da9c:	e7d1      	b.n	da42 <app_key_decrypt.constprop.0+0x1e>
		return -EINVAL;
    da9e:	f06f 0515 	mvn.w	r5, #21
    daa2:	e7f7      	b.n	da94 <app_key_decrypt.constprop.0+0x70>
    daa4:	20006ab8 	.word	0x20006ab8
    daa8:	000289c0 	.word	0x000289c0
    daac:	00028868 	.word	0x00028868
    dab0:	0002c1f9 	.word	0x0002c1f9

0000dab4 <seg_tx_reset>:
{
    dab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dab8:	4604      	mov	r4, r0
	k_delayed_work_cancel(&tx->retransmit);
    daba:	3030      	adds	r0, #48	; 0x30
    dabc:	f014 fad4 	bl	22068 <k_delayed_work_cancel>
	tx->cb = NULL;
    dac0:	2500      	movs	r5, #0
	tx->blocked = false;
    dac2:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    dac6:	4f23      	ldr	r7, [pc, #140]	; (db54 <seg_tx_reset+0xa0>)
	tx->sub = NULL;
    dac8:	6025      	str	r5, [r4, #0]
	tx->seq_auth = 0U;
    daca:	2000      	movs	r0, #0
    dacc:	2100      	movs	r1, #0
	tx->cb_data = NULL;
    dace:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	tx->seq_auth = 0U;
    dad2:	e9c4 0104 	strd	r0, r1, [r4, #16]
	tx->blocked = false;
    dad6:	f365 12c7 	bfi	r2, r5, #7, #1
	tx->src = BT_MESH_ADDR_UNASSIGNED;
    dada:	61a5      	str	r5, [r4, #24]
	tx->blocked = false;
    dadc:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    dae0:	1d26      	adds	r6, r4, #4
	tx->seg[seg_idx] = NULL;
    dae2:	46a8      	mov	r8, r5
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    dae4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    dae8:	b1ab      	cbz	r3, db16 <seg_tx_reset+0x62>
		if (!tx->seg[i]) {
    daea:	6833      	ldr	r3, [r6, #0]
    daec:	b153      	cbz	r3, db04 <seg_tx_reset+0x50>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    daee:	4631      	mov	r1, r6
    daf0:	4638      	mov	r0, r7
    daf2:	f012 f867 	bl	1fbc4 <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
    daf6:	f8c6 8000 	str.w	r8, [r6]
	tx->nack_count--;
    dafa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    dafe:	3b01      	subs	r3, #1
    db00:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    db04:	f894 3020 	ldrb.w	r3, [r4, #32]
    db08:	3501      	adds	r5, #1
    db0a:	f003 031f 	and.w	r3, r3, #31
    db0e:	42ab      	cmp	r3, r5
    db10:	f106 0604 	add.w	r6, r6, #4
    db14:	dae6      	bge.n	dae4 <seg_tx_reset+0x30>
	tx->nack_count = 0;
    db16:	2500      	movs	r5, #0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    db18:	4b0f      	ldr	r3, [pc, #60]	; (db58 <seg_tx_reset+0xa4>)
    db1a:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    db1e:	f3bf 8f5b 	dmb	ish
    db22:	e853 2f00 	ldrex	r2, [r3]
    db26:	f022 0120 	bic.w	r1, r2, #32
    db2a:	e843 1000 	strex	r0, r1, [r3]
    db2e:	2800      	cmp	r0, #0
    db30:	d1f7      	bne.n	db22 <seg_tx_reset+0x6e>
    db32:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
    db36:	0692      	lsls	r2, r2, #26
    db38:	d50a      	bpl.n	db50 <seg_tx_reset+0x9c>
		if (bt_mesh_net_iv_update(bt_mesh.iv_index, false)) {
    db3a:	f853 0c08 	ldr.w	r0, [r3, #-8]
    db3e:	4629      	mov	r1, r5
    db40:	f7ff f8f0 	bl	cd24 <bt_mesh_net_iv_update>
    db44:	b120      	cbz	r0, db50 <seg_tx_reset+0x9c>
			bt_mesh_net_sec_update(NULL);
    db46:	4628      	mov	r0, r5
}
    db48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_mesh_net_sec_update(NULL);
    db4c:	f018 bc7d 	b.w	2644a <bt_mesh_net_sec_update>
}
    db50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db54:	20007480 	.word	0x20007480
    db58:	20006ac0 	.word	0x20006ac0

0000db5c <seg_tx_complete>:
		if (&seg_tx[i] != tx &&
    db5c:	4a2a      	ldr	r2, [pc, #168]	; (dc08 <seg_tx_complete+0xac>)
    db5e:	4290      	cmp	r0, r2
{
    db60:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
	void *cb_data = tx->cb_data;
    db64:	e9d0 560a 	ldrd	r5, r6, [r0, #40]	; 0x28
{
    db68:	4681      	mov	r9, r0
    db6a:	460c      	mov	r4, r1
		if (&seg_tx[i] != tx &&
    db6c:	d01e      	beq.n	dbac <seg_tx_complete+0x50>
		    seg_tx[i].blocked &&
    db6e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
		if (&seg_tx[i] != tx &&
    db72:	09db      	lsrs	r3, r3, #7
    db74:	d009      	beq.n	db8a <seg_tx_complete+0x2e>
	return (tx->src == src) && (tx->dst == dst);
    db76:	8b01      	ldrh	r1, [r0, #24]
    db78:	8b13      	ldrh	r3, [r2, #24]
    db7a:	4299      	cmp	r1, r3
    db7c:	d114      	bne.n	dba8 <seg_tx_complete+0x4c>
    db7e:	8b53      	ldrh	r3, [r2, #26]
    db80:	8b41      	ldrh	r1, [r0, #26]
	struct seg_tx *blocked = NULL;
    db82:	428b      	cmp	r3, r1
    db84:	bf0c      	ite	eq
    db86:	4613      	moveq	r3, r2
    db88:	2300      	movne	r3, #0
		if (&seg_tx[i] != tx &&
    db8a:	4920      	ldr	r1, [pc, #128]	; (dc0c <seg_tx_complete+0xb0>)
    db8c:	4589      	cmp	r9, r1
    db8e:	d10e      	bne.n	dbae <seg_tx_complete+0x52>
	if (blocked) {
    db90:	bb43      	cbnz	r3, dbe4 <seg_tx_complete+0x88>
	seg_tx_reset(tx);
    db92:	4648      	mov	r0, r9
    db94:	f7ff ff8e 	bl	dab4 <seg_tx_reset>
	if (cb && cb->end) {
    db98:	b39d      	cbz	r5, dc02 <seg_tx_complete+0xa6>
    db9a:	686b      	ldr	r3, [r5, #4]
    db9c:	b38b      	cbz	r3, dc02 <seg_tx_complete+0xa6>
		cb->end(err, cb_data);
    db9e:	4631      	mov	r1, r6
    dba0:	4620      	mov	r0, r4
}
    dba2:	e8bd 4ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
		cb->end(err, cb_data);
    dba6:	4718      	bx	r3
	struct seg_tx *blocked = NULL;
    dba8:	2300      	movs	r3, #0
    dbaa:	e7ee      	b.n	db8a <seg_tx_complete+0x2e>
    dbac:	2300      	movs	r3, #0
		    seg_tx[i].blocked &&
    dbae:	f892 1071 	ldrb.w	r1, [r2, #113]	; 0x71
		if (&seg_tx[i] != tx &&
    dbb2:	09c9      	lsrs	r1, r1, #7
    dbb4:	d0ec      	beq.n	db90 <seg_tx_complete+0x34>
	return (tx->src == src) && (tx->dst == dst);
    dbb6:	f8b2 0068 	ldrh.w	r0, [r2, #104]	; 0x68
    dbba:	f8b9 1018 	ldrh.w	r1, [r9, #24]
    dbbe:	4288      	cmp	r0, r1
    dbc0:	d1e6      	bne.n	db90 <seg_tx_complete+0x34>
    dbc2:	f8b2 006a 	ldrh.w	r0, [r2, #106]	; 0x6a
    dbc6:	f8b9 101a 	ldrh.w	r1, [r9, #26]
    dbca:	4288      	cmp	r0, r1
    dbcc:	d1e0      	bne.n	db90 <seg_tx_complete+0x34>
		    seg_tx_blocks(tx, seg_tx[i].src, seg_tx[i].dst) &&
    dbce:	b1b3      	cbz	r3, dbfe <seg_tx_complete+0xa2>
		    (!blocked || seg_tx[i].seq_auth < blocked->seq_auth)) {
    dbd0:	e9d2 ab18 	ldrd	sl, fp, [r2, #96]	; 0x60
    dbd4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
		if (&seg_tx[i] != tx &&
    dbd8:	4a0c      	ldr	r2, [pc, #48]	; (dc0c <seg_tx_complete+0xb0>)
    dbda:	458b      	cmp	fp, r1
    dbdc:	bf08      	it	eq
    dbde:	4582      	cmpeq	sl, r0
    dbe0:	bf38      	it	cc
    dbe2:	4613      	movcc	r3, r2
		blocked->blocked = false;
    dbe4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    dbe8:	4809      	ldr	r0, [pc, #36]	; (dc10 <seg_tx_complete+0xb4>)
    dbea:	f36f 12c7 	bfc	r2, #7, #1
    dbee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    dbf2:	f103 0130 	add.w	r1, r3, #48	; 0x30
    dbf6:	2200      	movs	r2, #0
    dbf8:	f014 f9a6 	bl	21f48 <k_delayed_work_submit_to_queue>
    dbfc:	e7c9      	b.n	db92 <seg_tx_complete+0x36>
		if (&seg_tx[i] != tx &&
    dbfe:	4b03      	ldr	r3, [pc, #12]	; (dc0c <seg_tx_complete+0xb0>)
    dc00:	e7f0      	b.n	dbe4 <seg_tx_complete+0x88>
}
    dc02:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
    dc06:	bf00      	nop
    dc08:	200000a0 	.word	0x200000a0
    dc0c:	200000f0 	.word	0x200000f0
    dc10:	20001c08 	.word	0x20001c08

0000dc14 <schedule_retransmit>:
{
    dc14:	b410      	push	{r4}
	if (!tx->nack_count) {
    dc16:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    dc1a:	2b00      	cmp	r3, #0
    dc1c:	d03c      	beq.n	dc98 <schedule_retransmit+0x84>
	if (--tx->seg_pending) {
    dc1e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    dc22:	f103 021f 	add.w	r2, r3, #31
    dc26:	f002 021f 	and.w	r2, r2, #31
    dc2a:	f362 0304 	bfi	r3, r2, #0, #5
    dc2e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    dc32:	bb8a      	cbnz	r2, dc98 <schedule_retransmit+0x84>
	if (!BT_MESH_ADDR_IS_UNICAST(tx->dst) &&
    dc34:	f9b0 401a 	ldrsh.w	r4, [r0, #26]
    dc38:	2c00      	cmp	r4, #0
    dc3a:	dc15      	bgt.n	dc68 <schedule_retransmit+0x54>
	    (!tx->attempts ||
    dc3c:	b2db      	uxtb	r3, r3
	if (!BT_MESH_ADDR_IS_UNICAST(tx->dst) &&
    dc3e:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    dc42:	d00d      	beq.n	dc60 <schedule_retransmit+0x4c>
	     (tx->sending && tx->attempts == 1 && tx->seg_n == tx->seg_o))) {
    dc44:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	    (!tx->attempts ||
    dc48:	0659      	lsls	r1, r3, #25
    dc4a:	d50d      	bpl.n	dc68 <schedule_retransmit+0x54>
	     (tx->sending && tx->attempts == 1 && tx->seg_n == tx->seg_o))) {
    dc4c:	2a20      	cmp	r2, #32
    dc4e:	d10b      	bne.n	dc68 <schedule_retransmit+0x54>
    dc50:	f890 2020 	ldrb.w	r2, [r0, #32]
    dc54:	f003 031f 	and.w	r3, r3, #31
    dc58:	f002 021f 	and.w	r2, r2, #31
    dc5c:	429a      	cmp	r2, r3
    dc5e:	d103      	bne.n	dc68 <schedule_retransmit+0x54>
}
    dc60:	bc10      	pop	{r4}
		seg_tx_complete(tx, 0);
    dc62:	2100      	movs	r1, #0
    dc64:	f7ff bf7a 	b.w	db5c <seg_tx_complete>
			      (tx->sending || !tx->seg_o) ?
    dc68:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	k_delayed_work_submit(&tx->retransmit,
    dc6c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
    dc70:	f100 0130 	add.w	r1, r0, #48	; 0x30
    dc74:	d101      	bne.n	dc7a <schedule_retransmit+0x66>
			      (tx->sending || !tx->seg_o) ?
    dc76:	06db      	lsls	r3, r3, #27
    dc78:	d10a      	bne.n	dc90 <schedule_retransmit+0x7c>
				      SEG_RETRANSMIT_TIMEOUT(tx) :
    dc7a:	2c00      	cmp	r4, #0
    dc7c:	bfc8      	it	gt
    dc7e:	f890 0023 	ldrbgt.w	r0, [r0, #35]	; 0x23
    dc82:	f04f 0232 	mov.w	r2, #50	; 0x32
    dc86:	bfc4      	itt	gt
    dc88:	f44f 73c8 	movgt.w	r3, #400	; 0x190
    dc8c:	fb12 3200 	smlabbgt	r2, r2, r0, r3
    dc90:	4802      	ldr	r0, [pc, #8]	; (dc9c <schedule_retransmit+0x88>)
}
    dc92:	bc10      	pop	{r4}
    dc94:	f014 b958 	b.w	21f48 <k_delayed_work_submit_to_queue>
    dc98:	bc10      	pop	{r4}
    dc9a:	4770      	bx	lr
    dc9c:	20001c08 	.word	0x20001c08

0000dca0 <seg_tx_send_unacked>:
{
    dca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		.net_idx = tx->sub->net_idx,
    dca4:	6802      	ldr	r2, [r0, #0]
{
    dca6:	b086      	sub	sp, #24
	struct bt_mesh_msg_ctx ctx = {
    dca8:	2300      	movs	r3, #0
    dcaa:	f8cd 3006 	str.w	r3, [sp, #6]
	struct bt_mesh_net_tx net_tx = {
    dcae:	9203      	str	r2, [sp, #12]
	struct bt_mesh_msg_ctx ctx = {
    dcb0:	8b93      	ldrh	r3, [r2, #28]
	struct bt_mesh_net_tx net_tx = {
    dcb2:	8b02      	ldrh	r2, [r0, #24]
	struct bt_mesh_msg_ctx ctx = {
    dcb4:	f8ad 3000 	strh.w	r3, [sp]
	struct bt_mesh_net_tx net_tx = {
    dcb8:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_msg_ctx ctx = {
    dcbc:	f890 3020 	ldrb.w	r3, [r0, #32]
	struct bt_mesh_net_tx net_tx = {
    dcc0:	7fc2      	ldrb	r2, [r0, #31]
    dcc2:	f88d 2016 	strb.w	r2, [sp, #22]
    dcc6:	7f82      	ldrb	r2, [r0, #30]
    dcc8:	f8cd d010 	str.w	sp, [sp, #16]
	struct bt_mesh_msg_ctx ctx = {
    dccc:	f343 1140 	sbfx	r1, r3, #5, #1
		.friend_cred = tx->friend_cred,
    dcd0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	struct bt_mesh_net_tx net_tx = {
    dcd4:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
	struct bt_mesh_msg_ctx ctx = {
    dcd8:	f8ad 1002 	strh.w	r1, [sp, #2]
	struct bt_mesh_net_tx net_tx = {
    dcdc:	f88d 3017 	strb.w	r3, [sp, #23]
	struct bt_mesh_msg_ctx ctx = {
    dce0:	8b41      	ldrh	r1, [r0, #26]
	if (!tx->attempts) {
    dce2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
    dce6:	f8ad 1004 	strh.w	r1, [sp, #4]
    dcea:	2101      	movs	r1, #1
    dcec:	f88d 100a 	strb.w	r1, [sp, #10]
	if (!tx->attempts) {
    dcf0:	f013 0fe0 	tst.w	r3, #224	; 0xe0
	struct bt_mesh_msg_ctx ctx = {
    dcf4:	f890 1023 	ldrb.w	r1, [r0, #35]	; 0x23
    dcf8:	f88d 100b 	strb.w	r1, [sp, #11]
{
    dcfc:	4604      	mov	r4, r0
	if (!tx->attempts) {
    dcfe:	d111      	bne.n	dd24 <seg_tx_send_unacked+0x84>
    dd00:	4b54      	ldr	r3, [pc, #336]	; (de54 <seg_tx_send_unacked+0x1b4>)
    dd02:	4955      	ldr	r1, [pc, #340]	; (de58 <seg_tx_send_unacked+0x1b8>)
		BT_ERR("Ran out of retransmit attempts");
    dd04:	4855      	ldr	r0, [pc, #340]	; (de5c <seg_tx_send_unacked+0x1bc>)
    dd06:	1ac9      	subs	r1, r1, r3
    dd08:	08c9      	lsrs	r1, r1, #3
    dd0a:	0189      	lsls	r1, r1, #6
    dd0c:	f041 0101 	orr.w	r1, r1, #1
    dd10:	f015 fb4c 	bl	233ac <log_0>
		seg_tx_complete(tx, -ETIMEDOUT);
    dd14:	f06f 013b 	mvn.w	r1, #59	; 0x3b
    dd18:	4620      	mov	r0, r4
    dd1a:	f7ff ff1f 	bl	db5c <seg_tx_complete>
}
    dd1e:	b006      	add	sp, #24
    dd20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	tx->sending = 1U;
    dd24:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    dd28:	4f4d      	ldr	r7, [pc, #308]	; (de60 <seg_tx_send_unacked+0x1c0>)
	tx->sending = 1U;
    dd2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dd2e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    dd32:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    dd36:	f894 1020 	ldrb.w	r1, [r4, #32]
    dd3a:	461a      	mov	r2, r3
    dd3c:	f001 011f 	and.w	r1, r1, #31
    dd40:	f003 031f 	and.w	r3, r3, #31
    dd44:	4299      	cmp	r1, r3
    dd46:	d209      	bcs.n	dd5c <seg_tx_send_unacked+0xbc>
	tx->seg_o = 0U;
    dd48:	f022 035f 	bic.w	r3, r2, #95	; 0x5f
    dd4c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	tx->attempts--;
    dd50:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    dd54:	33e0      	adds	r3, #224	; 0xe0
    dd56:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    dd5a:	e7e0      	b.n	dd1e <seg_tx_send_unacked+0x7e>
		if (!tx->seg[tx->seg_o]) {
    dd5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    dd60:	685b      	ldr	r3, [r3, #4]
    dd62:	2b00      	cmp	r3, #0
    dd64:	d06d      	beq.n	de42 <seg_tx_send_unacked+0x1a2>
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit,
    dd66:	7fe1      	ldrb	r1, [r4, #31]
    dd68:	2200      	movs	r2, #0
    dd6a:	2001      	movs	r0, #1
    dd6c:	f7fe f8a8 	bl	bec0 <bt_mesh_adv_create>
		if (!seg) {
    dd70:	4680      	mov	r8, r0
    dd72:	b930      	cbnz	r0, dd82 <seg_tx_send_unacked+0xe2>
			tx->sending = 0U;
    dd74:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    dd78:	f360 1386 	bfi	r3, r0, #6, #1
			tx->sending = 0U;
    dd7c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
			return;
    dd80:	e7cd      	b.n	dd1e <seg_tx_send_unacked+0x7e>
		net_buf_reserve(seg, BT_MESH_NET_HDR_LEN);
    dd82:	f100 0608 	add.w	r6, r0, #8
    dd86:	2109      	movs	r1, #9
    dd88:	4630      	mov	r0, r6
    dd8a:	f010 fa7d 	bl	1e288 <net_buf_simple_reserve>
	u8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    dd8e:	f894 3020 	ldrb.w	r3, [r4, #32]
		seg_tx_buf_build(tx, tx->seg_o, &seg->b);
    dd92:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
	u16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
    dd96:	f8b4 a010 	ldrh.w	sl, [r4, #16]
	net_buf_simple_add_u8(buf, tx->hdr);
    dd9a:	7fa1      	ldrb	r1, [r4, #30]
		return BT_MESH_APP_SEG_SDU_MAX;
    dd9c:	f013 0f20 	tst.w	r3, #32
	u8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    dda0:	8ba3      	ldrh	r3, [r4, #28]
		return BT_MESH_APP_SEG_SDU_MAX;
    dda2:	bf14      	ite	ne
    dda4:	f04f 0908 	movne.w	r9, #8
    dda8:	f04f 090c 	moveq.w	r9, #12
		seg_tx_buf_build(tx, tx->seg_o, &seg->b);
    ddac:	f005 051f 	and.w	r5, r5, #31
	u8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    ddb0:	fb09 3315 	mls	r3, r9, r5, r3
    ddb4:	4599      	cmp	r9, r3
	net_buf_simple_add_u8(buf, tx->hdr);
    ddb6:	4630      	mov	r0, r6
	u8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    ddb8:	bfa8      	it	ge
    ddba:	fa5f f983 	uxtbge.w	r9, r3
	net_buf_simple_add_u8(buf, tx->hdr);
    ddbe:	f01a f8a1 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
    ddc2:	f894 3020 	ldrb.w	r3, [r4, #32]
	u16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
    ddc6:	f3ca 0a0c 	ubfx	sl, sl, #0, #13
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
    ddca:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ddce:	ea4f 119a 	mov.w	r1, sl, lsr #6
    ddd2:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    ddd6:	4630      	mov	r0, r6
    ddd8:	f01a f894 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (((seq_zero & 0x3f) << 2) | (seg_o >> 3)));
    dddc:	08e9      	lsrs	r1, r5, #3
    ddde:	ea41 018a 	orr.w	r1, r1, sl, lsl #2
    dde2:	b2c9      	uxtb	r1, r1
    dde4:	4630      	mov	r0, r6
    dde6:	f01a f88d 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
    ddea:	f894 1020 	ldrb.w	r1, [r4, #32]
    ddee:	f3c1 0104 	ubfx	r1, r1, #0, #5
    ddf2:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
    ddf6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
    ddfa:	b2c9      	uxtb	r1, r1
    ddfc:	4630      	mov	r0, r6
    ddfe:	f01a f881 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
    de02:	6869      	ldr	r1, [r5, #4]
    de04:	464a      	mov	r2, r9
    de06:	4630      	mov	r0, r6
    de08:	f01a f870 	bl	27eec <net_buf_simple_add_mem>
		tx->seg_pending++;
    de0c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    de10:	1c5a      	adds	r2, r3, #1
    de12:	f362 0304 	bfi	r3, r2, #0, #5
    de16:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    de1a:	463a      	mov	r2, r7
    de1c:	4623      	mov	r3, r4
    de1e:	4641      	mov	r1, r8
    de20:	a803      	add	r0, sp, #12
    de22:	f7ff f973 	bl	d10c <bt_mesh_net_send>
		if (err) {
    de26:	b160      	cbz	r0, de42 <seg_tx_send_unacked+0x1a2>
			tx->seg_pending--;
    de28:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    de2c:	f103 021f 	add.w	r2, r3, #31
    de30:	f362 0304 	bfi	r3, r2, #0, #5
    de34:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			tx->sending = 0U;
    de38:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    de3c:	f36f 1386 	bfc	r3, #6, #1
    de40:	e79c      	b.n	dd7c <seg_tx_send_unacked+0xdc>
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    de42:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    de46:	1c5a      	adds	r2, r3, #1
    de48:	f362 0304 	bfi	r3, r2, #0, #5
    de4c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    de50:	e76f      	b.n	dd32 <seg_tx_send_unacked+0x92>
    de52:	bf00      	nop
    de54:	00028868 	.word	0x00028868
    de58:	000289c0 	.word	0x000289c0
    de5c:	0002c21e 	.word	0x0002c21e
    de60:	000290cc 	.word	0x000290cc

0000de64 <ctl_recv>:
{
    de64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (ctl_op) {
    de68:	f011 047f 	ands.w	r4, r1, #127	; 0x7f
{
    de6c:	b087      	sub	sp, #28
    de6e:	4606      	mov	r6, r0
    de70:	4615      	mov	r5, r2
    de72:	461f      	mov	r7, r3
	switch (ctl_op) {
    de74:	d00f      	beq.n	de96 <ctl_recv+0x32>
    de76:	2c0a      	cmp	r4, #10
    de78:	f000 80de 	beq.w	e038 <ctl_recv+0x1d4>
	if (!rx->local_match) {
    de7c:	7d03      	ldrb	r3, [r0, #20]
    de7e:	f013 0740 	ands.w	r7, r3, #64	; 0x40
    de82:	d017      	beq.n	deb4 <ctl_recv+0x50>
	if (ctl_op == TRANS_CTL_OP_FRIEND_OFFER) {
    de84:	2c04      	cmp	r4, #4
    de86:	f040 8106 	bne.w	e096 <ctl_recv+0x232>
		return bt_mesh_lpn_friend_offer(rx, buf);
    de8a:	4611      	mov	r1, r2
}
    de8c:	b007      	add	sp, #28
    de8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return bt_mesh_lpn_friend_offer(rx, buf);
    de92:	f006 bb61 	b.w	14558 <bt_mesh_lpn_friend_offer>
	if (buf->len < 6) {
    de96:	8893      	ldrh	r3, [r2, #4]
    de98:	2b05      	cmp	r3, #5
    de9a:	d80f      	bhi.n	debc <ctl_recv+0x58>
    de9c:	499d      	ldr	r1, [pc, #628]	; (e114 <ctl_recv+0x2b0>)
    de9e:	4b9e      	ldr	r3, [pc, #632]	; (e118 <ctl_recv+0x2b4>)
		BT_ERR("Too short ack message");
    dea0:	489e      	ldr	r0, [pc, #632]	; (e11c <ctl_recv+0x2b8>)
    dea2:	1ac9      	subs	r1, r1, r3
    dea4:	08c9      	lsrs	r1, r1, #3
    dea6:	0189      	lsls	r1, r1, #6
    dea8:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Received ack for group seg");
    deac:	f015 fa7e 	bl	233ac <log_0>
		return -EINVAL;
    deb0:	f06f 0715 	mvn.w	r7, #21
}
    deb4:	4638      	mov	r0, r7
    deb6:	b007      	add	sp, #28
    deb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
    debc:	4610      	mov	r0, r2
    debe:	f019 fff5 	bl	27eac <net_buf_simple_pull_be16>
	obo = seq_zero >> 15;
    dec2:	f3c0 33cf 	ubfx	r3, r0, #15, #16
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    dec6:	f3c0 098c 	ubfx	r9, r0, #2, #13
	ack = net_buf_simple_pull_be32(buf);
    deca:	4628      	mov	r0, r5
	obo = seq_zero >> 15;
    decc:	9303      	str	r3, [sp, #12]
	ack = net_buf_simple_pull_be32(buf);
    dece:	f019 fff8 	bl	27ec2 <net_buf_simple_pull_be32>
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    ded2:	2100      	movs	r1, #0
	ack = net_buf_simple_pull_be32(buf);
    ded4:	4605      	mov	r5, r0
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    ded6:	fa1f f089 	uxth.w	r0, r9
    deda:	4a91      	ldr	r2, [pc, #580]	; (e120 <ctl_recv+0x2bc>)
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
    dedc:	f8b6 c008 	ldrh.w	ip, [r6, #8]
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    dee0:	e9cd 0104 	strd	r0, r1, [sp, #16]
    dee4:	4616      	mov	r6, r2
    dee6:	46a0      	mov	r8, r4
		if (obo && tx->nack_count == tx->seg_n + 1) {
    dee8:	4691      	mov	r9, r2
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    deea:	e9d2 3e04 	ldrd	r3, lr, [r2, #16]
    deee:	f3c3 010c 	ubfx	r1, r3, #0, #13
    def2:	e9cd 1800 	strd	r1, r8, [sp]
    def6:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
    defa:	e9dd 0100 	ldrd	r0, r1, [sp]
    defe:	4559      	cmp	r1, fp
    df00:	bf08      	it	eq
    df02:	4550      	cmpeq	r0, sl
    df04:	d123      	bne.n	df4e <ctl_recv+0xea>
		if (tx->dst == addr) {
    df06:	8b51      	ldrh	r1, [r2, #26]
    df08:	4561      	cmp	r1, ip
    df0a:	d00f      	beq.n	df2c <ctl_recv+0xc8>
		if (obo && tx->nack_count == tx->seg_n + 1) {
    df0c:	9903      	ldr	r1, [sp, #12]
    df0e:	b1f1      	cbz	r1, df4e <ctl_recv+0xea>
    df10:	2150      	movs	r1, #80	; 0x50
    df12:	fb01 9004 	mla	r0, r1, r4, r9
    df16:	f892 b022 	ldrb.w	fp, [r2, #34]	; 0x22
    df1a:	f890 1020 	ldrb.w	r1, [r0, #32]
    df1e:	f001 011f 	and.w	r1, r1, #31
    df22:	3101      	adds	r1, #1
    df24:	458b      	cmp	fp, r1
    df26:	d112      	bne.n	df4e <ctl_recv+0xea>
			tx->dst = addr;
    df28:	f8a0 c01a 	strh.w	ip, [r0, #26]
	if (!BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    df2c:	2050      	movs	r0, #80	; 0x50
    df2e:	4360      	muls	r0, r4
    df30:	eb06 0900 	add.w	r9, r6, r0
    df34:	f9b9 201a 	ldrsh.w	r2, [r9, #26]
    df38:	2a00      	cmp	r2, #0
    df3a:	dc0e      	bgt.n	df5a <ctl_recv+0xf6>
    df3c:	4975      	ldr	r1, [pc, #468]	; (e114 <ctl_recv+0x2b0>)
    df3e:	4b76      	ldr	r3, [pc, #472]	; (e118 <ctl_recv+0x2b4>)
		BT_ERR("Received ack for group seg");
    df40:	4878      	ldr	r0, [pc, #480]	; (e124 <ctl_recv+0x2c0>)
    df42:	1ac9      	subs	r1, r1, r3
    df44:	08c9      	lsrs	r1, r1, #3
    df46:	0189      	lsls	r1, r1, #6
    df48:	f041 0101 	orr.w	r1, r1, #1
    df4c:	e7ae      	b.n	deac <ctl_recv+0x48>
	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
    df4e:	3250      	adds	r2, #80	; 0x50
    df50:	2c00      	cmp	r4, #0
    df52:	f040 80d6 	bne.w	e102 <ctl_recv+0x29e>
    df56:	2401      	movs	r4, #1
    df58:	e7c7      	b.n	deea <ctl_recv+0x86>
	*seq_auth = tx->seq_auth;
    df5a:	e9c7 3e00 	strd	r3, lr, [r7]
	if (!ack) {
    df5e:	b985      	cbnz	r5, df82 <ctl_recv+0x11e>
    df60:	4b6d      	ldr	r3, [pc, #436]	; (e118 <ctl_recv+0x2b4>)
    df62:	496c      	ldr	r1, [pc, #432]	; (e114 <ctl_recv+0x2b0>)
		BT_WARN("SDU canceled");
    df64:	4870      	ldr	r0, [pc, #448]	; (e128 <ctl_recv+0x2c4>)
    df66:	1ac9      	subs	r1, r1, r3
    df68:	08c9      	lsrs	r1, r1, #3
    df6a:	0189      	lsls	r1, r1, #6
    df6c:	f041 0102 	orr.w	r1, r1, #2
    df70:	f015 fa1c 	bl	233ac <log_0>
		seg_tx_complete(tx, -ECANCELED);
    df74:	f06f 0147 	mvn.w	r1, #71	; 0x47
    df78:	4648      	mov	r0, r9
    df7a:	f7ff fdef 	bl	db5c <seg_tx_complete>
	return 0;
    df7e:	2700      	movs	r7, #0
    df80:	e798      	b.n	deb4 <ctl_recv+0x50>
	if (find_msb_set(ack) - 1 > tx->seg_n) {
    df82:	f899 3020 	ldrb.w	r3, [r9, #32]
{
	if (op == 0) {
		return 0;
	}

	return 32 - __builtin_clz(op);
    df86:	fab5 f285 	clz	r2, r5
    df8a:	f1c2 021f 	rsb	r2, r2, #31
    df8e:	f003 031f 	and.w	r3, r3, #31
    df92:	429a      	cmp	r2, r3
    df94:	d908      	bls.n	dfa8 <ctl_recv+0x144>
    df96:	495f      	ldr	r1, [pc, #380]	; (e114 <ctl_recv+0x2b0>)
    df98:	4b5f      	ldr	r3, [pc, #380]	; (e118 <ctl_recv+0x2b4>)
		BT_ERR("Too large segment number in ack");
    df9a:	4864      	ldr	r0, [pc, #400]	; (e12c <ctl_recv+0x2c8>)
    df9c:	1ac9      	subs	r1, r1, r3
    df9e:	08c9      	lsrs	r1, r1, #3
    dfa0:	0189      	lsls	r1, r1, #6
    dfa2:	f041 0101 	orr.w	r1, r1, #1
    dfa6:	e781      	b.n	deac <ctl_recv+0x48>
	k_delayed_work_cancel(&tx->retransmit);
    dfa8:	3030      	adds	r0, #48	; 0x30
    dfaa:	4430      	add	r0, r6
    dfac:	f014 f85c 	bl	22068 <k_delayed_work_cancel>
	while ((bit = find_lsb_set(ack))) {
    dfb0:	f04f 0a14 	mov.w	sl, #20
    dfb4:	fb0a fa04 	mul.w	sl, sl, r4
	tx->nack_count--;
    dfb8:	46cb      	mov	fp, r9
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
    dfba:	2d00      	cmp	r5, #0
    dfbc:	fa95 f8a5 	rbit	r8, r5
    dfc0:	fab8 f888 	clz	r8, r8
    dfc4:	bf08      	it	eq
    dfc6:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
	while ((bit = find_lsb_set(ack))) {
    dfca:	f118 0701 	adds.w	r7, r8, #1
    dfce:	d109      	bne.n	dfe4 <ctl_recv+0x180>
	if (tx->nack_count) {
    dfd0:	2150      	movs	r1, #80	; 0x50
    dfd2:	fb01 6404 	mla	r4, r1, r4, r6
    dfd6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    dfda:	b343      	cbz	r3, e02e <ctl_recv+0x1ca>
		seg_tx_send_unacked(tx);
    dfdc:	4648      	mov	r0, r9
    dfde:	f7ff fe5f 	bl	dca0 <seg_tx_send_unacked>
    dfe2:	e767      	b.n	deb4 <ctl_recv+0x50>
		if (tx->seg[bit - 1]) {
    dfe4:	2714      	movs	r7, #20
    dfe6:	4367      	muls	r7, r4
    dfe8:	eb07 0308 	add.w	r3, r7, r8
    dfec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    dff0:	685b      	ldr	r3, [r3, #4]
    dff2:	b1b3      	cbz	r3, e022 <ctl_recv+0x1be>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    dff4:	f10a 0101 	add.w	r1, sl, #1
    dff8:	fa51 f188 	uxtab	r1, r1, r8
			seg_tx_done(tx, bit - 1);
    dffc:	fa5f f388 	uxtb.w	r3, r8
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    e000:	484b      	ldr	r0, [pc, #300]	; (e130 <ctl_recv+0x2cc>)
			seg_tx_done(tx, bit - 1);
    e002:	9300      	str	r3, [sp, #0]
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    e004:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    e008:	f011 fddc 	bl	1fbc4 <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
    e00c:	9b00      	ldr	r3, [sp, #0]
    e00e:	441f      	add	r7, r3
    e010:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    e014:	2300      	movs	r3, #0
    e016:	607b      	str	r3, [r7, #4]
	tx->nack_count--;
    e018:	f89b 3022 	ldrb.w	r3, [fp, #34]	; 0x22
    e01c:	3b01      	subs	r3, #1
    e01e:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
		ack &= ~BIT(bit - 1);
    e022:	2301      	movs	r3, #1
    e024:	fa03 f808 	lsl.w	r8, r3, r8
    e028:	ea25 0508 	bic.w	r5, r5, r8
    e02c:	e7c5      	b.n	dfba <ctl_recv+0x156>
		seg_tx_complete(tx, 0);
    e02e:	4639      	mov	r1, r7
    e030:	4648      	mov	r0, r9
    e032:	f7ff fd93 	bl	db5c <seg_tx_complete>
    e036:	e73d      	b.n	deb4 <ctl_recv+0x50>
	if (buf->len < 3) {
    e038:	8893      	ldrh	r3, [r2, #4]
    e03a:	2b02      	cmp	r3, #2
    e03c:	d808      	bhi.n	e050 <ctl_recv+0x1ec>
    e03e:	4935      	ldr	r1, [pc, #212]	; (e114 <ctl_recv+0x2b0>)
    e040:	4b35      	ldr	r3, [pc, #212]	; (e118 <ctl_recv+0x2b4>)
		BT_ERR("Too short heartbeat message");
    e042:	483c      	ldr	r0, [pc, #240]	; (e134 <ctl_recv+0x2d0>)
    e044:	1ac9      	subs	r1, r1, r3
    e046:	08c9      	lsrs	r1, r1, #3
    e048:	0189      	lsls	r1, r1, #6
    e04a:	f041 0101 	orr.w	r1, r1, #1
    e04e:	e72d      	b.n	deac <ctl_recv+0x48>
	if (rx->ctx.recv_dst != hb_sub_dst) {
    e050:	4b39      	ldr	r3, [pc, #228]	; (e138 <ctl_recv+0x2d4>)
    e052:	8942      	ldrh	r2, [r0, #10]
    e054:	881b      	ldrh	r3, [r3, #0]
    e056:	429a      	cmp	r2, r3
    e058:	d00a      	beq.n	e070 <ctl_recv+0x20c>
    e05a:	4b2f      	ldr	r3, [pc, #188]	; (e118 <ctl_recv+0x2b4>)
    e05c:	492d      	ldr	r1, [pc, #180]	; (e114 <ctl_recv+0x2b0>)
		BT_WARN("Ignoring heartbeat to non-subscribed destination");
    e05e:	4837      	ldr	r0, [pc, #220]	; (e13c <ctl_recv+0x2d8>)
    e060:	1ac9      	subs	r1, r1, r3
    e062:	08c9      	lsrs	r1, r1, #3
    e064:	0189      	lsls	r1, r1, #6
    e066:	f041 0102 	orr.w	r1, r1, #2
    e06a:	f015 f99f 	bl	233ac <log_0>
		return 0;
    e06e:	e786      	b.n	df7e <ctl_recv+0x11a>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    e070:	4628      	mov	r0, r5
    e072:	f019 ff0b 	bl	27e8c <net_buf_simple_pull_u8>
    e076:	4604      	mov	r4, r0
	feat = net_buf_simple_pull_be16(buf);
    e078:	4628      	mov	r0, r5
    e07a:	f019 ff17 	bl	27eac <net_buf_simple_pull_be16>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    e07e:	f004 027f 	and.w	r2, r4, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    e082:	7b74      	ldrb	r4, [r6, #13]
	bt_mesh_heartbeat(rx->ctx.addr, rx->ctx.recv_dst, hops, feat);
    e084:	8971      	ldrh	r1, [r6, #10]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    e086:	1b12      	subs	r2, r2, r4
    e088:	3201      	adds	r2, #1
	feat = net_buf_simple_pull_be16(buf);
    e08a:	4603      	mov	r3, r0
	bt_mesh_heartbeat(rx->ctx.addr, rx->ctx.recv_dst, hops, feat);
    e08c:	b2d2      	uxtb	r2, r2
    e08e:	8930      	ldrh	r0, [r6, #8]
    e090:	f003 feec 	bl	11e6c <bt_mesh_heartbeat>
    e094:	e773      	b.n	df7e <ctl_recv+0x11a>
	if (rx->ctx.addr == bt_mesh.lpn.frnd) {
    e096:	4a2a      	ldr	r2, [pc, #168]	; (e140 <ctl_recv+0x2dc>)
    e098:	8901      	ldrh	r1, [r0, #8]
    e09a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    e09c:	4291      	cmp	r1, r2
    e09e:	d116      	bne.n	e0ce <ctl_recv+0x26a>
		if (ctl_op == TRANS_CTL_OP_FRIEND_CLEAR_CFM) {
    e0a0:	2c06      	cmp	r4, #6
    e0a2:	d105      	bne.n	e0b0 <ctl_recv+0x24c>
			return bt_mesh_lpn_friend_clear_cfm(rx, buf);
    e0a4:	4629      	mov	r1, r5
}
    e0a6:	b007      	add	sp, #28
    e0a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_lpn_friend_clear_cfm(rx, buf);
    e0ac:	f006 bad2 	b.w	14654 <bt_mesh_lpn_friend_clear_cfm>
		if (!rx->friend_cred) {
    e0b0:	075b      	lsls	r3, r3, #29
    e0b2:	d408      	bmi.n	e0c6 <ctl_recv+0x262>
    e0b4:	4917      	ldr	r1, [pc, #92]	; (e114 <ctl_recv+0x2b0>)
    e0b6:	4b18      	ldr	r3, [pc, #96]	; (e118 <ctl_recv+0x2b4>)
			BT_WARN("Message from friend with wrong credentials");
    e0b8:	4822      	ldr	r0, [pc, #136]	; (e144 <ctl_recv+0x2e0>)
    e0ba:	1ac9      	subs	r1, r1, r3
    e0bc:	08c9      	lsrs	r1, r1, #3
    e0be:	0189      	lsls	r1, r1, #6
    e0c0:	f041 0102 	orr.w	r1, r1, #2
    e0c4:	e6f2      	b.n	deac <ctl_recv+0x48>
		switch (ctl_op) {
    e0c6:	2c02      	cmp	r4, #2
    e0c8:	d00f      	beq.n	e0ea <ctl_recv+0x286>
    e0ca:	2c09      	cmp	r4, #9
    e0cc:	d013      	beq.n	e0f6 <ctl_recv+0x292>
    e0ce:	4b12      	ldr	r3, [pc, #72]	; (e118 <ctl_recv+0x2b4>)
    e0d0:	4a10      	ldr	r2, [pc, #64]	; (e114 <ctl_recv+0x2b0>)
	BT_WARN("Unhandled TransOpCode 0x%02x", ctl_op);
    e0d2:	481d      	ldr	r0, [pc, #116]	; (e148 <ctl_recv+0x2e4>)
    e0d4:	1ad2      	subs	r2, r2, r3
    e0d6:	08d2      	lsrs	r2, r2, #3
    e0d8:	0192      	lsls	r2, r2, #6
    e0da:	f042 0202 	orr.w	r2, r2, #2
    e0de:	4621      	mov	r1, r4
    e0e0:	f015 f971 	bl	233c6 <log_1>
	return -ENOENT;
    e0e4:	f06f 0701 	mvn.w	r7, #1
    e0e8:	e6e4      	b.n	deb4 <ctl_recv+0x50>
			return bt_mesh_lpn_friend_update(rx, buf);
    e0ea:	4629      	mov	r1, r5
}
    e0ec:	b007      	add	sp, #28
    e0ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_lpn_friend_update(rx, buf);
    e0f2:	f006 bc7f 	b.w	149f4 <bt_mesh_lpn_friend_update>
			return bt_mesh_lpn_friend_sub_cfm(rx, buf);
    e0f6:	4629      	mov	r1, r5
}
    e0f8:	b007      	add	sp, #28
    e0fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_lpn_friend_sub_cfm(rx, buf);
    e0fe:	f006 bbc5 	b.w	1488c <bt_mesh_lpn_friend_sub_cfm>
    e102:	4904      	ldr	r1, [pc, #16]	; (e114 <ctl_recv+0x2b0>)
    e104:	4b04      	ldr	r3, [pc, #16]	; (e118 <ctl_recv+0x2b4>)
		BT_WARN("No matching TX context for ack");
    e106:	4811      	ldr	r0, [pc, #68]	; (e14c <ctl_recv+0x2e8>)
    e108:	1ac9      	subs	r1, r1, r3
    e10a:	08c9      	lsrs	r1, r1, #3
    e10c:	0189      	lsls	r1, r1, #6
    e10e:	f041 0102 	orr.w	r1, r1, #2
    e112:	e6cb      	b.n	deac <ctl_recv+0x48>
    e114:	000289c0 	.word	0x000289c0
    e118:	00028868 	.word	0x00028868
    e11c:	0002c23d 	.word	0x0002c23d
    e120:	200000a0 	.word	0x200000a0
    e124:	0002c253 	.word	0x0002c253
    e128:	0002c26e 	.word	0x0002c26e
    e12c:	0002c27b 	.word	0x0002c27b
    e130:	20007480 	.word	0x20007480
    e134:	0002c29b 	.word	0x0002c29b
    e138:	20001d64 	.word	0x20001d64
    e13c:	0002c2b7 	.word	0x0002c2b7
    e140:	20006ab8 	.word	0x20006ab8
    e144:	0002c2e8 	.word	0x0002c2e8
    e148:	0002c313 	.word	0x0002c313
    e14c:	0002c330 	.word	0x0002c330

0000e150 <send_seg>:
{
    e150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e154:	460f      	mov	r7, r1
		if (seg_tx[i].nack_count) {
    e156:	4980      	ldr	r1, [pc, #512]	; (e358 <send_seg+0x208>)
{
    e158:	b085      	sub	sp, #20
		if (seg_tx[i].nack_count) {
    e15a:	f891 5022 	ldrb.w	r5, [r1, #34]	; 0x22
{
    e15e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    e162:	4606      	mov	r6, r0
		if (seg_tx[i].nack_count) {
    e164:	b36d      	cbz	r5, e1c2 <send_seg+0x72>
	return (tx->src == src) && (tx->dst == dst);
    e166:	8904      	ldrh	r4, [r0, #8]
    e168:	8b08      	ldrh	r0, [r1, #24]
    e16a:	4284      	cmp	r4, r0
    e16c:	d022      	beq.n	e1b4 <send_seg+0x64>
    e16e:	2500      	movs	r5, #0
	for (tx = NULL, i = 0; i < ARRAY_SIZE(seg_tx); i++) {
    e170:	2400      	movs	r4, #0
		if (seg_tx[i].nack_count) {
    e172:	f891 0072 	ldrb.w	r0, [r1, #114]	; 0x72
    e176:	b340      	cbz	r0, e1ca <send_seg+0x7a>
	return (tx->src == src) && (tx->dst == dst);
    e178:	f8b6 e008 	ldrh.w	lr, [r6, #8]
    e17c:	f8b1 0068 	ldrh.w	r0, [r1, #104]	; 0x68
    e180:	4586      	cmp	lr, r0
    e182:	d120      	bne.n	e1c6 <send_seg+0x76>
			blocked |= seg_tx_blocks(&seg_tx[i], net_tx->src,
    e184:	6870      	ldr	r0, [r6, #4]
	return (tx->src == src) && (tx->dst == dst);
    e186:	f8b1 106a 	ldrh.w	r1, [r1, #106]	; 0x6a
    e18a:	8880      	ldrh	r0, [r0, #4]
    e18c:	1a40      	subs	r0, r0, r1
    e18e:	4241      	negs	r1, r0
    e190:	4141      	adcs	r1, r0
			blocked |= seg_tx_blocks(&seg_tx[i], net_tx->src,
    e192:	430d      	orrs	r5, r1
	if (!tx) {
    e194:	b9ec      	cbnz	r4, e1d2 <send_seg+0x82>
    e196:	4b71      	ldr	r3, [pc, #452]	; (e35c <send_seg+0x20c>)
    e198:	4971      	ldr	r1, [pc, #452]	; (e360 <send_seg+0x210>)
		BT_ERR("No multi-segment message contexts available");
    e19a:	4872      	ldr	r0, [pc, #456]	; (e364 <send_seg+0x214>)
    e19c:	1ac9      	subs	r1, r1, r3
    e19e:	08c9      	lsrs	r1, r1, #3
    e1a0:	0189      	lsls	r1, r1, #6
    e1a2:	f041 0101 	orr.w	r1, r1, #1
    e1a6:	f015 f901 	bl	233ac <log_0>
		return -EBUSY;
    e1aa:	f06f 000f 	mvn.w	r0, #15
}
    e1ae:	b005      	add	sp, #20
    e1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			blocked |= seg_tx_blocks(&seg_tx[i], net_tx->src,
    e1b4:	6870      	ldr	r0, [r6, #4]
	return (tx->src == src) && (tx->dst == dst);
    e1b6:	8885      	ldrh	r5, [r0, #4]
    e1b8:	8b48      	ldrh	r0, [r1, #26]
    e1ba:	1a2c      	subs	r4, r5, r0
    e1bc:	4265      	negs	r5, r4
    e1be:	4165      	adcs	r5, r4
    e1c0:	e7d6      	b.n	e170 <send_seg+0x20>
			tx = &seg_tx[i];
    e1c2:	460c      	mov	r4, r1
    e1c4:	e7d5      	b.n	e172 <send_seg+0x22>
	return (tx->src == src) && (tx->dst == dst);
    e1c6:	2100      	movs	r1, #0
    e1c8:	e7e3      	b.n	e192 <send_seg+0x42>
			tx = &seg_tx[i];
    e1ca:	4967      	ldr	r1, [pc, #412]	; (e368 <send_seg+0x218>)
    e1cc:	2c00      	cmp	r4, #0
    e1ce:	bf08      	it	eq
    e1d0:	460c      	moveq	r4, r1
	if (ctl_op) {
    e1d2:	6870      	ldr	r0, [r6, #4]
    e1d4:	f1bc 0f00 	cmp.w	ip, #0
    e1d8:	d073      	beq.n	e2c2 <send_seg+0x172>
		tx->hdr = TRANS_CTL_HDR(*ctl_op, 1);
    e1da:	f89c 1000 	ldrb.w	r1, [ip]
    e1de:	f061 017f 	orn	r1, r1, #127	; 0x7f
		tx->hdr = SEG_HDR(1, net_tx->aid);
    e1e2:	77a1      	strb	r1, [r4, #30]
	tx->src = net_tx->src;
    e1e4:	8931      	ldrh	r1, [r6, #8]
    e1e6:	8321      	strh	r1, [r4, #24]
	tx->dst = net_tx->ctx->addr;
    e1e8:	8881      	ldrh	r1, [r0, #4]
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    e1ea:	88b8      	ldrh	r0, [r7, #4]
	tx->dst = net_tx->ctx->addr;
    e1ec:	8361      	strh	r1, [r4, #26]
		return BT_MESH_APP_SEG_SDU_MAX;
    e1ee:	f1bc 0f00 	cmp.w	ip, #0
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    e1f2:	f894 c020 	ldrb.w	ip, [r4, #32]
	tx->len = sdu->len;
    e1f6:	83a0      	strh	r0, [r4, #28]
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    e1f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
		return BT_MESH_APP_SEG_SDU_MAX;
    e1fc:	bf14      	ite	ne
    e1fe:	f04f 0808 	movne.w	r8, #8
    e202:	f04f 080c 	moveq.w	r8, #12
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    e206:	fb91 f1f8 	sdiv	r1, r1, r8
    e20a:	f001 011f 	and.w	r1, r1, #31
    e20e:	f361 0c04 	bfi	ip, r1, #0, #5
    e212:	f884 c020 	strb.w	ip, [r4, #32]
	tx->seg_o = 0;
    e216:	f894 c021 	ldrb.w	ip, [r4, #33]	; 0x21
	tx->nack_count = tx->seg_n + 1;
    e21a:	f101 0101 	add.w	r1, r1, #1
    e21e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	tx->seg_o = 0;
    e222:	f36f 0c04 	bfc	ip, #0, #5
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    e226:	4951      	ldr	r1, [pc, #324]	; (e36c <send_seg+0x21c>)
	tx->seg_o = 0;
    e228:	f884 c021 	strb.w	ip, [r4, #33]	; 0x21
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    e22c:	6808      	ldr	r0, [r1, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e22e:	f3bf 8f5b 	dmb	ish
    e232:	f8d1 c008 	ldr.w	ip, [r1, #8]
    e236:	f3bf 8f5b 	dmb	ish
    e23a:	f3cc 0c80 	ubfx	ip, ip, #2, #1
    e23e:	eba0 0c0c 	sub.w	ip, r0, ip
    e242:	6848      	ldr	r0, [r1, #4]
    e244:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
    e248:	ea40 600c 	orr.w	r0, r0, ip, lsl #24
    e24c:	e9c4 0e04 	strd	r0, lr, [r4, #16]
	tx->sub = net_tx->sub;
    e250:	6830      	ldr	r0, [r6, #0]
    e252:	6020      	str	r0, [r4, #0]
	tx->cb_data = cb_data;
    e254:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
	tx->seg_pending = 0;
    e258:	f04f 0380 	mov.w	r3, #128	; 0x80
    e25c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	tx->xmit = net_tx->xmit;
    e260:	7ab3      	ldrb	r3, [r6, #10]
    e262:	77e3      	strb	r3, [r4, #31]
	tx->aszmic = net_tx->aszmic;
    e264:	7af2      	ldrb	r2, [r6, #11]
	tx->ctl = !!ctl_op;
    e266:	bf18      	it	ne
    e268:	2320      	movne	r3, #32
    e26a:	f3c2 0040 	ubfx	r0, r2, #1, #1
    e26e:	bf08      	it	eq
    e270:	2300      	moveq	r3, #0
    e272:	f002 0201 	and.w	r2, r2, #1
    e276:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
    e27a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    e27e:	8c22      	ldrh	r2, [r4, #32]
    e280:	f422 5203 	bic.w	r2, r2, #8384	; 0x20c0
    e284:	f022 0220 	bic.w	r2, r2, #32
    e288:	0452      	lsls	r2, r2, #17
    e28a:	ea43 33c5 	orr.w	r3, r3, r5, lsl #15
    e28e:	0c52      	lsrs	r2, r2, #17
    e290:	4313      	orrs	r3, r2
    e292:	8423      	strh	r3, [r4, #32]
	if (net_tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    e294:	6873      	ldr	r3, [r6, #4]
    e296:	7adb      	ldrb	r3, [r3, #11]
    e298:	2bff      	cmp	r3, #255	; 0xff
    e29a:	4689      	mov	r9, r1
    e29c:	d11d      	bne.n	e2da <send_seg+0x18a>
		tx->ttl = bt_mesh_default_ttl_get();
    e29e:	f004 f895 	bl	123cc <bt_mesh_default_ttl_get>
    e2a2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    e2a6:	f8df a0cc 	ldr.w	sl, [pc, #204]	; e374 <send_seg+0x224>
		return BT_MESH_APP_SEG_SDU_MAX;
    e2aa:	2600      	movs	r6, #0
	for (seg_o = 0U; sdu->len; seg_o++) {
    e2ac:	f8b7 b004 	ldrh.w	fp, [r7, #4]
    e2b0:	f1bb 0f00 	cmp.w	fp, #0
    e2b4:	d114      	bne.n	e2e0 <send_seg+0x190>
	if (blocked) {
    e2b6:	2d00      	cmp	r5, #0
    e2b8:	d042      	beq.n	e340 <send_seg+0x1f0>
		bt_mesh_next_seq();
    e2ba:	f7fe fe47 	bl	cf4c <bt_mesh_next_seq>
		return 0;
    e2be:	4658      	mov	r0, fp
    e2c0:	e775      	b.n	e1ae <send_seg+0x5e>
	} else if (BT_MESH_IS_DEV_KEY(net_tx->ctx->app_idx)) {
    e2c2:	8841      	ldrh	r1, [r0, #2]
    e2c4:	3103      	adds	r1, #3
    e2c6:	b289      	uxth	r1, r1
    e2c8:	2901      	cmp	r1, #1
		tx->hdr = SEG_HDR(1, net_tx->aid);
    e2ca:	bf85      	ittet	hi
    e2cc:	7af1      	ldrbhi	r1, [r6, #11]
    e2ce:	f3c1 0185 	ubfxhi	r1, r1, #2, #6
		tx->hdr = SEG_HDR(0, 0);
    e2d2:	2180      	movls	r1, #128	; 0x80
		tx->hdr = SEG_HDR(1, net_tx->aid);
    e2d4:	f061 013f 	ornhi	r1, r1, #63	; 0x3f
    e2d8:	e783      	b.n	e1e2 <send_seg+0x92>
		tx->ttl = net_tx->ctx->send_ttl;
    e2da:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    e2de:	e7e2      	b.n	e2a6 <send_seg+0x156>
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    e2e0:	2200      	movs	r2, #0
    e2e2:	a903      	add	r1, sp, #12
    e2e4:	4650      	mov	r0, sl
    e2e6:	f011 fc09 	bl	1fafc <k_mem_slab_alloc>
		if (err) {
    e2ea:	f106 0b01 	add.w	fp, r6, #1
    e2ee:	b178      	cbz	r0, e310 <send_seg+0x1c0>
    e2f0:	4b1a      	ldr	r3, [pc, #104]	; (e35c <send_seg+0x20c>)
    e2f2:	491b      	ldr	r1, [pc, #108]	; (e360 <send_seg+0x210>)
			BT_ERR("Out of segment buffers");
    e2f4:	481e      	ldr	r0, [pc, #120]	; (e370 <send_seg+0x220>)
    e2f6:	1ac9      	subs	r1, r1, r3
    e2f8:	08c9      	lsrs	r1, r1, #3
    e2fa:	0189      	lsls	r1, r1, #6
    e2fc:	f041 0101 	orr.w	r1, r1, #1
    e300:	f015 f854 	bl	233ac <log_0>
			seg_tx_reset(tx);
    e304:	4620      	mov	r0, r4
    e306:	f7ff fbd5 	bl	dab4 <seg_tx_reset>
			return -ENOBUFS;
    e30a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e30e:	e74e      	b.n	e1ae <send_seg+0x5e>
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    e310:	88ba      	ldrh	r2, [r7, #4]
    e312:	9b03      	ldr	r3, [sp, #12]
    e314:	9301      	str	r3, [sp, #4]
    e316:	4542      	cmp	r2, r8
    e318:	bf28      	it	cs
    e31a:	4642      	movcs	r2, r8
    e31c:	4611      	mov	r1, r2
    e31e:	4638      	mov	r0, r7
    e320:	9200      	str	r2, [sp, #0]
    e322:	f010 f959 	bl	1e5d8 <net_buf_simple_pull_mem>
    e326:	e9dd 2300 	ldrd	r2, r3, [sp]
		tx->seg[seg_o] = buf;
    e32a:	b2f6      	uxtb	r6, r6
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    e32c:	4601      	mov	r1, r0
		tx->seg[seg_o] = buf;
    e32e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    e332:	4618      	mov	r0, r3
    e334:	f016 feac 	bl	25090 <memcpy>
		tx->seg[seg_o] = buf;
    e338:	9b03      	ldr	r3, [sp, #12]
    e33a:	6073      	str	r3, [r6, #4]
	for (seg_o = 0U; sdu->len; seg_o++) {
    e33c:	465e      	mov	r6, fp
    e33e:	e7b5      	b.n	e2ac <send_seg+0x15c>
	seg_tx_send_unacked(tx);
    e340:	4620      	mov	r0, r4
    e342:	f7ff fcad 	bl	dca0 <seg_tx_send_unacked>
			       struct net_buf_simple *buf);

static inline bool bt_mesh_lpn_established(void)
{
#if defined(CONFIG_BT_MESH_LOW_POWER)
	return bt_mesh.lpn.established;
    e346:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) &&
    e34a:	06db      	lsls	r3, r3, #27
    e34c:	d501      	bpl.n	e352 <send_seg+0x202>
		bt_mesh_lpn_poll();
    e34e:	f006 fc35 	bl	14bbc <bt_mesh_lpn_poll>
	return 0;
    e352:	4628      	mov	r0, r5
    e354:	e72b      	b.n	e1ae <send_seg+0x5e>
    e356:	bf00      	nop
    e358:	200000a0 	.word	0x200000a0
    e35c:	00028868 	.word	0x00028868
    e360:	000289c0 	.word	0x000289c0
    e364:	0002c34f 	.word	0x0002c34f
    e368:	200000f0 	.word	0x200000f0
    e36c:	20006ab8 	.word	0x20006ab8
    e370:	0002c37b 	.word	0x0002c37b
    e374:	20007480 	.word	0x20007480

0000e378 <is_replay>:
{
    e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    e37a:	7d04      	ldrb	r4, [r0, #20]
    e37c:	f004 0330 	and.w	r3, r4, #48	; 0x30
    e380:	2b10      	cmp	r3, #16
{
    e382:	4605      	mov	r5, r0
    e384:	460e      	mov	r6, r1
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    e386:	d00c      	beq.n	e3a2 <is_replay+0x2a>
	if (!rx->local_match) {
    e388:	f014 0040 	ands.w	r0, r4, #64	; 0x40
    e38c:	d00a      	beq.n	e3a4 <is_replay+0x2c>
    e38e:	4922      	ldr	r1, [pc, #136]	; (e418 <is_replay+0xa0>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    e390:	2300      	movs	r3, #0
    e392:	460f      	mov	r7, r1
		if (!rpl->src) {
    e394:	f8b1 22bc 	ldrh.w	r2, [r1, #700]	; 0x2bc
    e398:	f501 702f 	add.w	r0, r1, #700	; 0x2bc
    e39c:	b982      	cbnz	r2, e3c0 <is_replay+0x48>
			if (match) {
    e39e:	b116      	cbz	r6, e3a6 <is_replay+0x2e>
					*match = rpl;
    e3a0:	6030      	str	r0, [r6, #0]
		return false;
    e3a2:	2000      	movs	r0, #0
}
    e3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	rpl->src = rx->ctx.addr;
    e3a6:	3357      	adds	r3, #87	; 0x57
    e3a8:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    e3ac:	892a      	ldrh	r2, [r5, #8]
    e3ae:	809a      	strh	r2, [r3, #4]
	rpl->seq = rx->seq;
    e3b0:	692a      	ldr	r2, [r5, #16]
    e3b2:	609a      	str	r2, [r3, #8]
	rpl->old_iv = rx->old_iv;
    e3b4:	f3c4 0400 	ubfx	r4, r4, #0, #1
    e3b8:	719c      	strb	r4, [r3, #6]
		bt_mesh_store_rpl(rpl);
    e3ba:	f018 fd25 	bl	26e08 <bt_mesh_store_rpl>
    e3be:	e7f0      	b.n	e3a2 <is_replay+0x2a>
		if (rpl->src == rx->ctx.addr) {
    e3c0:	f8b5 c008 	ldrh.w	ip, [r5, #8]
    e3c4:	4562      	cmp	r2, ip
    e3c6:	d116      	bne.n	e3f6 <is_replay+0x7e>
			if (rx->old_iv && !rpl->old_iv) {
    e3c8:	3357      	adds	r3, #87	; 0x57
    e3ca:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    e3ce:	07e1      	lsls	r1, r4, #31
    e3d0:	7992      	ldrb	r2, [r2, #6]
    e3d2:	d502      	bpl.n	e3da <is_replay+0x62>
    e3d4:	b912      	cbnz	r2, e3dc <is_replay+0x64>
				return true;
    e3d6:	2001      	movs	r0, #1
    e3d8:	e7e4      	b.n	e3a4 <is_replay+0x2c>
			if ((!rx->old_iv && rpl->old_iv) ||
    e3da:	b92a      	cbnz	r2, e3e8 <is_replay+0x70>
			    rpl->seq < rx->seq) {
    e3dc:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
			if ((!rx->old_iv && rpl->old_iv) ||
    e3e0:	6891      	ldr	r1, [r2, #8]
    e3e2:	692a      	ldr	r2, [r5, #16]
    e3e4:	4291      	cmp	r1, r2
    e3e6:	d2f6      	bcs.n	e3d6 <is_replay+0x5e>
				if (match) {
    e3e8:	2e00      	cmp	r6, #0
    e3ea:	d1d9      	bne.n	e3a0 <is_replay+0x28>
	rpl->src = rx->ctx.addr;
    e3ec:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    e3f0:	f8a3 c004 	strh.w	ip, [r3, #4]
    e3f4:	e7dc      	b.n	e3b0 <is_replay+0x38>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    e3f6:	3301      	adds	r3, #1
    e3f8:	2b0a      	cmp	r3, #10
    e3fa:	f101 0108 	add.w	r1, r1, #8
    e3fe:	d1c9      	bne.n	e394 <is_replay+0x1c>
    e400:	4b06      	ldr	r3, [pc, #24]	; (e41c <is_replay+0xa4>)
    e402:	4907      	ldr	r1, [pc, #28]	; (e420 <is_replay+0xa8>)
	BT_ERR("RPL is full!");
    e404:	4807      	ldr	r0, [pc, #28]	; (e424 <is_replay+0xac>)
    e406:	1ac9      	subs	r1, r1, r3
    e408:	08c9      	lsrs	r1, r1, #3
    e40a:	0189      	lsls	r1, r1, #6
    e40c:	f041 0101 	orr.w	r1, r1, #1
    e410:	f014 ffcc 	bl	233ac <log_0>
	return true;
    e414:	e7df      	b.n	e3d6 <is_replay+0x5e>
    e416:	bf00      	nop
    e418:	20006ab8 	.word	0x20006ab8
    e41c:	00028868 	.word	0x00028868
    e420:	000289c0 	.word	0x000289c0
    e424:	0002c392 	.word	0x0002c392

0000e428 <bt_mesh_set_hb_sub_dst>:
	hb_sub_dst = addr;
    e428:	4b01      	ldr	r3, [pc, #4]	; (e430 <bt_mesh_set_hb_sub_dst+0x8>)
    e42a:	8018      	strh	r0, [r3, #0]
}
    e42c:	4770      	bx	lr
    e42e:	bf00      	nop
    e430:	20001d64 	.word	0x20001d64

0000e434 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
    e434:	4b04      	ldr	r3, [pc, #16]	; (e448 <bt_mesh_tx_in_progress+0x14>)
    e436:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    e43a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
    e43e:	4313      	orrs	r3, r2
}
    e440:	bf14      	ite	ne
    e442:	2001      	movne	r0, #1
    e444:	2000      	moveq	r0, #0
    e446:	4770      	bx	lr
    e448:	200000a0 	.word	0x200000a0

0000e44c <bt_mesh_app_key_find>:
		if (key->net_idx != BT_MESH_KEY_UNUSED &&
    e44c:	4b0f      	ldr	r3, [pc, #60]	; (e48c <bt_mesh_app_key_find+0x40>)
    e44e:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
    e452:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e456:	4291      	cmp	r1, r2
    e458:	461a      	mov	r2, r3
    e45a:	d003      	beq.n	e464 <bt_mesh_app_key_find+0x18>
    e45c:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
    e460:	4281      	cmp	r1, r0
    e462:	d00d      	beq.n	e480 <bt_mesh_app_key_find+0x34>
    e464:	f8b2 10cc 	ldrh.w	r1, [r2, #204]	; 0xcc
    e468:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e46c:	4299      	cmp	r1, r3
    e46e:	d00a      	beq.n	e486 <bt_mesh_app_key_find+0x3a>
    e470:	f8b2 20ce 	ldrh.w	r2, [r2, #206]	; 0xce
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
    e474:	4b06      	ldr	r3, [pc, #24]	; (e490 <bt_mesh_app_key_find+0x44>)
    e476:	4282      	cmp	r2, r0
    e478:	bf0c      	ite	eq
    e47a:	4618      	moveq	r0, r3
    e47c:	2000      	movne	r0, #0
    e47e:	4770      	bx	lr
    e480:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
    e484:	4770      	bx	lr
	return NULL;
    e486:	2000      	movs	r0, #0
}
    e488:	4770      	bx	lr
    e48a:	bf00      	nop
    e48c:	20006ab8 	.word	0x20006ab8
    e490:	20006b84 	.word	0x20006b84

0000e494 <send_ack>:
{
    e494:	b5f0      	push	{r4, r5, r6, r7, lr}
    e496:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
    e498:	8b87      	ldrh	r7, [r0, #28]
{
    e49a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	struct bt_mesh_msg_ctx ctx = {
    e49e:	f8ad 7010 	strh.w	r7, [sp, #16]
{
    e4a2:	460d      	mov	r5, r1
	struct bt_mesh_msg_ctx ctx = {
    e4a4:	f64f 77ff 	movw	r7, #65535	; 0xffff
    e4a8:	2100      	movs	r1, #0
    e4aa:	f88d 301b 	strb.w	r3, [sp, #27]
	struct bt_mesh_net_tx tx = {
    e4ae:	ab04      	add	r3, sp, #16
{
    e4b0:	9e11      	ldr	r6, [sp, #68]	; 0x44
	struct bt_mesh_msg_ctx ctx = {
    e4b2:	f8cd 1016 	str.w	r1, [sp, #22]
    e4b6:	f88d 101a 	strb.w	r1, [sp, #26]
    e4ba:	f8ad 7012 	strh.w	r7, [sp, #18]
    e4be:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
    e4c2:	9109      	str	r1, [sp, #36]	; 0x24
    e4c4:	9007      	str	r0, [sp, #28]
    e4c6:	9308      	str	r3, [sp, #32]
    e4c8:	b1dc      	cbz	r4, e502 <send_ack+0x6e>
		.src = obo ? bt_mesh_primary_addr() : src,
    e4ca:	f001 f993 	bl	f7f4 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
    e4ce:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
    e4d2:	f003 fd37 	bl	11f44 <bt_mesh_net_transmit_get>
    e4d6:	4b1c      	ldr	r3, [pc, #112]	; (e548 <send_ack+0xb4>)
	struct bt_mesh_net_tx tx = {
    e4d8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    e4dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	if (bt_mesh_lpn_established()) {
    e4e0:	f3c3 1100 	ubfx	r1, r3, #4, #1
    e4e4:	06db      	lsls	r3, r3, #27
    e4e6:	d50e      	bpl.n	e506 <send_ack+0x72>
    e4e8:	4b18      	ldr	r3, [pc, #96]	; (e54c <send_ack+0xb8>)
    e4ea:	4919      	ldr	r1, [pc, #100]	; (e550 <send_ack+0xbc>)
		BT_WARN("Not sending ack when LPN is enabled");
    e4ec:	4819      	ldr	r0, [pc, #100]	; (e554 <send_ack+0xc0>)
    e4ee:	1ac9      	subs	r1, r1, r3
    e4f0:	08c9      	lsrs	r1, r1, #3
    e4f2:	0189      	lsls	r1, r1, #6
    e4f4:	f041 0102 	orr.w	r1, r1, #2
    e4f8:	f014 ff58 	bl	233ac <log_0>
		return 0;
    e4fc:	2000      	movs	r0, #0
}
    e4fe:	b00b      	add	sp, #44	; 0x2c
    e500:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
    e502:	4628      	mov	r0, r5
    e504:	e7e3      	b.n	e4ce <send_ack+0x3a>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
    e506:	b22d      	sxth	r5, r5
    e508:	2d00      	cmp	r5, #0
    e50a:	dd1a      	ble.n	e542 <send_ack+0xae>
	u16_t seq_zero = *seq_auth & TRANS_SEQ_ZERO_MASK;
    e50c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e50e:	881b      	ldrh	r3, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
    e510:	03e4      	lsls	r4, r4, #15
    e512:	f3c3 030c 	ubfx	r3, r3, #0, #13
    e516:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
	sys_put_be16(val >> 16, dst);
    e51a:	0c33      	lsrs	r3, r6, #16
	dst[0] = val >> 8;
    e51c:	0e32      	lsrs	r2, r6, #24
	dst[1] = val;
    e51e:	f88d 300b 	strb.w	r3, [sp, #11]
	dst[0] = val >> 8;
    e522:	ba73      	rev16	r3, r6
    e524:	ba64      	rev16	r4, r4
    e526:	f88d 200a 	strb.w	r2, [sp, #10]
    e52a:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
    e52e:	e9cd 1100 	strd	r1, r1, [sp]
    e532:	2306      	movs	r3, #6
    e534:	aa02      	add	r2, sp, #8
    e536:	a807      	add	r0, sp, #28
    e538:	f8ad 4008 	strh.w	r4, [sp, #8]
    e53c:	f017 fffe 	bl	2653c <bt_mesh_ctl_send>
    e540:	e7dd      	b.n	e4fe <send_ack+0x6a>
		return 0;
    e542:	4608      	mov	r0, r1
    e544:	e7db      	b.n	e4fe <send_ack+0x6a>
    e546:	bf00      	nop
    e548:	20006ab8 	.word	0x20006ab8
    e54c:	00028868 	.word	0x00028868
    e550:	000289c0 	.word	0x000289c0
    e554:	0002c39f 	.word	0x0002c39f

0000e558 <seg_ack>:

static void seg_ack(struct k_work *work)
{
    e558:	b530      	push	{r4, r5, lr}
    e55a:	4604      	mov	r4, r0
    e55c:	b085      	sub	sp, #20
	struct seg_rx *rx = CONTAINER_OF(work, struct seg_rx, ack);
    e55e:	f1a0 052c 	sub.w	r5, r0, #44	; 0x2c
    e562:	f019 ff9d 	bl	284a0 <z_impl_k_uptime_ticks>
    e566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    e56a:	460a      	mov	r2, r1
    e56c:	fba0 0103 	umull	r0, r1, r0, r3
    e570:	fb03 1102 	mla	r1, r3, r2, r1

	BT_DBG("rx %p", rx);

	if (k_uptime_get_32() - rx->last > K_SECONDS(60)) {
    e574:	f854 2c04 	ldr.w	r2, [r4, #-4]
    e578:	0bc3      	lsrs	r3, r0, #15
    e57a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    e57e:	1a9b      	subs	r3, r3, r2
    e580:	f64e 2260 	movw	r2, #60000	; 0xea60
    e584:	4293      	cmp	r3, r2
    e586:	d910      	bls.n	e5aa <seg_ack+0x52>
    e588:	4b17      	ldr	r3, [pc, #92]	; (e5e8 <seg_ack+0x90>)
    e58a:	4918      	ldr	r1, [pc, #96]	; (e5ec <seg_ack+0x94>)
		BT_WARN("Incomplete timer expired");
    e58c:	4818      	ldr	r0, [pc, #96]	; (e5f0 <seg_ack+0x98>)
    e58e:	1ac9      	subs	r1, r1, r3
    e590:	08c9      	lsrs	r1, r1, #3
    e592:	0189      	lsls	r1, r1, #6
    e594:	f041 0102 	orr.w	r1, r1, #2
    e598:	f014 ff08 	bl	233ac <log_0>
		seg_rx_reset(rx, false);
    e59c:	2100      	movs	r1, #0
    e59e:	4628      	mov	r0, r5

	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
		 rx->block, rx->obo);

	k_delayed_work_submit(&rx->ack, ack_timeout(rx));
}
    e5a0:	b005      	add	sp, #20
    e5a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		seg_rx_reset(rx, false);
    e5a6:	f7ff ba15 	b.w	d9d4 <seg_rx_reset>
		 rx->block, rx->obo);
    e5aa:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
    e5ae:	f834 2c14 	ldrh.w	r2, [r4, #-20]
    e5b2:	f834 1c12 	ldrh.w	r1, [r4, #-18]
    e5b6:	f854 0c2c 	ldr.w	r0, [r4, #-44]
    e5ba:	09db      	lsrs	r3, r3, #7
    e5bc:	9302      	str	r3, [sp, #8]
    e5be:	f854 3c08 	ldr.w	r3, [r4, #-8]
    e5c2:	9301      	str	r3, [sp, #4]
    e5c4:	f1a4 031c 	sub.w	r3, r4, #28
    e5c8:	9300      	str	r3, [sp, #0]
    e5ca:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
    e5ce:	f7ff ff61 	bl	e494 <send_ack>
	k_delayed_work_submit(&rx->ack, ack_timeout(rx));
    e5d2:	4628      	mov	r0, r5
    e5d4:	f017 ff45 	bl	26462 <ack_timeout>
    e5d8:	4602      	mov	r2, r0
    e5da:	4806      	ldr	r0, [pc, #24]	; (e5f4 <seg_ack+0x9c>)
    e5dc:	4621      	mov	r1, r4
}
    e5de:	b005      	add	sp, #20
    e5e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    e5e4:	f013 bcb0 	b.w	21f48 <k_delayed_work_submit_to_queue>
    e5e8:	00028868 	.word	0x00028868
    e5ec:	000289c0 	.word	0x000289c0
    e5f0:	0002c3c3 	.word	0x0002c3c3
    e5f4:	20001c08 	.word	0x20001c08

0000e5f8 <bt_mesh_trans_recv>:

	return err;
}

int bt_mesh_trans_recv(struct net_buf_simple *buf, struct bt_mesh_net_rx *rx)
{
    e5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    e5fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    e600:	b09f      	sub	sp, #124	; 0x7c
	u64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    e602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e606:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
							rx->ctx.recv_dst);
	} else {
		rx->friend_match = false;
    e60a:	7d0b      	ldrb	r3, [r1, #20]
    e60c:	f36f 13c7 	bfc	r3, #7, #1
    e610:	750b      	strb	r3, [r1, #20]
{
    e612:	460c      	mov	r4, r1

	BT_DBG("src 0x%04x dst 0x%04x seq 0x%08x friend_match %u",
	       rx->ctx.addr, rx->ctx.recv_dst, rx->seq, rx->friend_match);

	/* Remove network headers */
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    e614:	2109      	movs	r1, #9
{
    e616:	4606      	mov	r6, r0
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    e618:	f00f ffbe 	bl	1e598 <net_buf_simple_pull>
    e61c:	4896      	ldr	r0, [pc, #600]	; (e878 <bt_mesh_trans_recv+0x280>)
    e61e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c

	/* If LPN mode is enabled messages are only accepted when we've
	 * requested the Friend to send them. The messages must also
	 * be encrypted using the Friend Credentials.
	 */
	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) &&
    e622:	f013 0f10 	tst.w	r3, #16
    e626:	4683      	mov	fp, r0
    e628:	d019      	beq.n	e65e <bt_mesh_trans_recv+0x66>
	    bt_mesh_lpn_established() && rx->net_if == BT_MESH_NET_IF_ADV &&
    e62a:	7d23      	ldrb	r3, [r4, #20]
    e62c:	f013 0f30 	tst.w	r3, #48	; 0x30
    e630:	d115      	bne.n	e65e <bt_mesh_trans_recv+0x66>
    e632:	f890 2020 	ldrb.w	r2, [r0, #32]
    e636:	2a08      	cmp	r2, #8
    e638:	d101      	bne.n	e63e <bt_mesh_trans_recv+0x46>
	    (!bt_mesh_lpn_waiting_update() || !rx->friend_cred)) {
    e63a:	075a      	lsls	r2, r3, #29
    e63c:	d40f      	bmi.n	e65e <bt_mesh_trans_recv+0x66>
    e63e:	4b8f      	ldr	r3, [pc, #572]	; (e87c <bt_mesh_trans_recv+0x284>)
    e640:	498f      	ldr	r1, [pc, #572]	; (e880 <bt_mesh_trans_recv+0x288>)
		BT_WARN("Ignoring unexpected message in Low Power mode");
    e642:	4890      	ldr	r0, [pc, #576]	; (e884 <bt_mesh_trans_recv+0x28c>)
    e644:	1ac9      	subs	r1, r1, r3
    e646:	08c9      	lsrs	r1, r1, #3
    e648:	0189      	lsls	r1, r1, #6
    e64a:	f041 0102 	orr.w	r1, r1, #2
    e64e:	f014 fead 	bl	233ac <log_0>
		return -EAGAIN;
    e652:	f06f 070a 	mvn.w	r7, #10
						  seg_count, buf);
		}
	}

	return err;
}
    e656:	4638      	mov	r0, r7
    e658:	b01f      	add	sp, #124	; 0x7c
    e65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	state->offset = net_buf_simple_headroom(buf);
    e65e:	4630      	mov	r0, r6
    e660:	f019 fc38 	bl	27ed4 <net_buf_simple_headroom>
	if (SEG(buf->data)) {
    e664:	f8d6 9000 	ldr.w	r9, [r6]
	state->len = buf->len;
    e668:	88b3      	ldrh	r3, [r6, #4]
    e66a:	9306      	str	r3, [sp, #24]
    e66c:	f999 3000 	ldrsb.w	r3, [r9]
	state->offset = net_buf_simple_headroom(buf);
    e670:	9008      	str	r0, [sp, #32]
    e672:	2b00      	cmp	r3, #0
    e674:	f280 8340 	bge.w	ecf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x298>
		if (!rx->local_match && !rx->friend_match) {
    e678:	7d27      	ldrb	r7, [r4, #20]
    e67a:	f017 00c0 	ands.w	r0, r7, #192	; 0xc0
    e67e:	f000 83e7 	beq.w	ee50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3f0>
	struct bt_mesh_rpl *rpl = NULL;
    e682:	2300      	movs	r3, #0
    e684:	930b      	str	r3, [sp, #44]	; 0x2c
	if (buf->len < 5) {
    e686:	9b06      	ldr	r3, [sp, #24]
    e688:	2b04      	cmp	r3, #4
    e68a:	d80d      	bhi.n	e6a8 <bt_mesh_trans_recv+0xb0>
    e68c:	4a7c      	ldr	r2, [pc, #496]	; (e880 <bt_mesh_trans_recv+0x288>)
    e68e:	4b7b      	ldr	r3, [pc, #492]	; (e87c <bt_mesh_trans_recv+0x284>)
		BT_ERR("Too short segmented message (len %u)", buf->len);
    e690:	9906      	ldr	r1, [sp, #24]
    e692:	487d      	ldr	r0, [pc, #500]	; (e888 <bt_mesh_trans_recv+0x290>)
    e694:	1ad2      	subs	r2, r2, r3
    e696:	08d2      	lsrs	r2, r2, #3
    e698:	0192      	lsls	r2, r2, #6
    e69a:	f042 0201 	orr.w	r2, r2, #1
    e69e:	f014 fe92 	bl	233c6 <log_1>
	return -EINVAL;
    e6a2:	f06f 0715 	mvn.w	r7, #21
    e6a6:	e17c      	b.n	e9a2 <bt_mesh_trans_recv+0x3aa>
	if (is_replay(net_rx, &rpl)) {
    e6a8:	a90b      	add	r1, sp, #44	; 0x2c
    e6aa:	4620      	mov	r0, r4
    e6ac:	f7ff fe64 	bl	e378 <is_replay>
    e6b0:	9009      	str	r0, [sp, #36]	; 0x24
    e6b2:	2800      	cmp	r0, #0
    e6b4:	d1f5      	bne.n	e6a2 <bt_mesh_trans_recv+0xaa>
	net_buf_simple_pull(buf, 1);
    e6b6:	2101      	movs	r1, #1
    e6b8:	4630      	mov	r0, r6
    e6ba:	f00f ff6d 	bl	1e598 <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
    e6be:	4630      	mov	r0, r6
    e6c0:	f019 fbf4 	bl	27eac <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
    e6c4:	ea4f 08c0 	mov.w	r8, r0, lsl #3
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    e6c8:	f3c0 058c 	ubfx	r5, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
    e6cc:	4630      	mov	r0, r6
    e6ce:	f019 fbdd 	bl	27e8c <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
    e6d2:	f008 0818 	and.w	r8, r8, #24
	seg_o |= seg_n >> 5;
    e6d6:	ea48 1850 	orr.w	r8, r8, r0, lsr #5
	seg_n &= 0x1f;
    e6da:	f000 031f 	and.w	r3, r0, #31
	seg_o |= seg_n >> 5;
    e6de:	fa5f f888 	uxtb.w	r8, r8
	if (seg_o > seg_n) {
    e6e2:	4598      	cmp	r8, r3
	seg_n &= 0x1f;
    e6e4:	9307      	str	r3, [sp, #28]
    e6e6:	461f      	mov	r7, r3
	if (seg_o > seg_n) {
    e6e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e6ea:	d90c      	bls.n	e706 <bt_mesh_trans_recv+0x10e>
    e6ec:	4a63      	ldr	r2, [pc, #396]	; (e87c <bt_mesh_trans_recv+0x284>)
    e6ee:	4b64      	ldr	r3, [pc, #400]	; (e880 <bt_mesh_trans_recv+0x288>)
		BT_ERR("SegO greater than SegN (%u > %u)", seg_o, seg_n);
    e6f0:	4866      	ldr	r0, [pc, #408]	; (e88c <bt_mesh_trans_recv+0x294>)
    e6f2:	1a9b      	subs	r3, r3, r2
    e6f4:	08db      	lsrs	r3, r3, #3
    e6f6:	019b      	lsls	r3, r3, #6
    e6f8:	f043 0301 	orr.w	r3, r3, #1
    e6fc:	463a      	mov	r2, r7
    e6fe:	4641      	mov	r1, r8
    e700:	f014 fe75 	bl	233ee <log_2>
		return -EINVAL;
    e704:	e7cd      	b.n	e6a2 <bt_mesh_trans_recv+0xaa>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    e706:	6921      	ldr	r1, [r4, #16]
    e708:	7d22      	ldrb	r2, [r4, #20]
    e70a:	f8db 0000 	ldr.w	r0, [fp]
		if (rx->src != net_rx->ctx.addr ||
    e70e:	f8df a198 	ldr.w	sl, [pc, #408]	; e8a8 <bt_mesh_trans_recv+0x2b0>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    e712:	1b4d      	subs	r5, r1, r5
    e714:	f002 0201 	and.w	r2, r2, #1
    e718:	f3c5 050c 	ubfx	r5, r5, #0, #13
    e71c:	1a82      	subs	r2, r0, r2
    e71e:	1b4d      	subs	r5, r1, r5
    e720:	ea45 6002 	orr.w	r0, r5, r2, lsl #24
    e724:	0a11      	lsrs	r1, r2, #8
		if (rx->src != net_rx->ctx.addr ||
    e726:	68a5      	ldr	r5, [r4, #8]
    e728:	f8da 2018 	ldr.w	r2, [sl, #24]
    e72c:	42aa      	cmp	r2, r5
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    e72e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		if (rx->src != net_rx->ctx.addr ||
    e732:	d10a      	bne.n	e74a <bt_mesh_trans_recv+0x152>
		if (rx->seq_auth >= *seq_auth) {
    e734:	e9da bc04 	ldrd	fp, ip, [sl, #16]
    e738:	458c      	cmp	ip, r1
    e73a:	bf08      	it	eq
    e73c:	4583      	cmpeq	fp, r0
    e73e:	f080 8389 	bcs.w	ee54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3f4>
		if (rx->in_use) {
    e742:	f89a 301f 	ldrb.w	r3, [sl, #31]
    e746:	065b      	lsls	r3, r3, #25
    e748:	d43b      	bmi.n	e7c2 <bt_mesh_trans_recv+0x1ca>
		if (rx->src != net_rx->ctx.addr ||
    e74a:	f8da 3068 	ldr.w	r3, [sl, #104]	; 0x68
    e74e:	42ab      	cmp	r3, r5
    e750:	d11a      	bne.n	e788 <bt_mesh_trans_recv+0x190>
		if (rx->seq_auth >= *seq_auth) {
    e752:	e9da bc18 	ldrd	fp, ip, [sl, #96]	; 0x60
    e756:	458c      	cmp	ip, r1
    e758:	bf08      	it	eq
    e75a:	4583      	cmpeq	fp, r0
    e75c:	f080 838b 	bcs.w	ee76 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x416>
		if (rx->in_use) {
    e760:	f89a 306f 	ldrb.w	r3, [sl, #111]	; 0x6f
    e764:	0659      	lsls	r1, r3, #25
    e766:	d50f      	bpl.n	e788 <bt_mesh_trans_recv+0x190>
		struct seg_rx *rx = &seg_rx[i];
    e768:	4d49      	ldr	r5, [pc, #292]	; (e890 <bt_mesh_trans_recv+0x298>)
    e76a:	4b44      	ldr	r3, [pc, #272]	; (e87c <bt_mesh_trans_recv+0x284>)
    e76c:	4a44      	ldr	r2, [pc, #272]	; (e880 <bt_mesh_trans_recv+0x288>)
			BT_WARN("Duplicate SDU from src 0x%04x",
    e76e:	8921      	ldrh	r1, [r4, #8]
    e770:	4848      	ldr	r0, [pc, #288]	; (e894 <bt_mesh_trans_recv+0x29c>)
    e772:	1ad2      	subs	r2, r2, r3
    e774:	08d2      	lsrs	r2, r2, #3
    e776:	0192      	lsls	r2, r2, #6
    e778:	f042 0202 	orr.w	r2, r2, #2
    e77c:	f014 fe23 	bl	233c6 <log_1>
			seg_rx_reset(rx, true);
    e780:	2101      	movs	r1, #1
    e782:	4628      	mov	r0, r5
    e784:	f7ff f926 	bl	d9d4 <seg_rx_reset>
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    e788:	2f02      	cmp	r7, #2
    e78a:	f240 808f 	bls.w	e8ac <bt_mesh_trans_recv+0x2b4>
    e78e:	4b3b      	ldr	r3, [pc, #236]	; (e87c <bt_mesh_trans_recv+0x284>)
    e790:	493b      	ldr	r1, [pc, #236]	; (e880 <bt_mesh_trans_recv+0x288>)
		BT_ERR("Too big incoming SDU length");
    e792:	4841      	ldr	r0, [pc, #260]	; (e898 <bt_mesh_trans_recv+0x2a0>)
    e794:	1ac9      	subs	r1, r1, r3
    e796:	08c9      	lsrs	r1, r1, #3
    e798:	0189      	lsls	r1, r1, #6
    e79a:	f041 0101 	orr.w	r1, r1, #1
    e79e:	f014 fe05 	bl	233ac <log_0>
			 net_rx->friend_match);
    e7a2:	7d23      	ldrb	r3, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    e7a4:	8922      	ldrh	r2, [r4, #8]
    e7a6:	8961      	ldrh	r1, [r4, #10]
    e7a8:	6820      	ldr	r0, [r4, #0]
    e7aa:	09db      	lsrs	r3, r3, #7
    e7ac:	9302      	str	r3, [sp, #8]
    e7ae:	2300      	movs	r3, #0
    e7b0:	9301      	str	r3, [sp, #4]
    e7b2:	ab0c      	add	r3, sp, #48	; 0x30
    e7b4:	9300      	str	r3, [sp, #0]
    e7b6:	7be3      	ldrb	r3, [r4, #15]
    e7b8:	f7ff fe6c 	bl	e494 <send_ack>
			return -EMSGSIZE;
    e7bc:	f06f 0723 	mvn.w	r7, #35	; 0x23
    e7c0:	e0ef      	b.n	e9a2 <bt_mesh_trans_recv+0x3aa>
		struct seg_rx *rx = &seg_rx[i];
    e7c2:	4655      	mov	r5, sl
    e7c4:	e7d1      	b.n	e76a <bt_mesh_trans_recv+0x172>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
    e7c6:	2150      	movs	r1, #80	; 0x50
    e7c8:	fb01 aa03 	mla	sl, r1, r3, sl
    e7cc:	f899 2000 	ldrb.w	r2, [r9]
    e7d0:	f89a 301e 	ldrb.w	r3, [sl, #30]
    e7d4:	429a      	cmp	r2, r3
    e7d6:	d105      	bne.n	e7e4 <bt_mesh_trans_recv+0x1ec>
    e7d8:	f89a 301f 	ldrb.w	r3, [sl, #31]
    e7dc:	f003 021f 	and.w	r2, r3, #31
    e7e0:	42ba      	cmp	r2, r7
    e7e2:	d008      	beq.n	e7f6 <bt_mesh_trans_recv+0x1fe>
    e7e4:	4926      	ldr	r1, [pc, #152]	; (e880 <bt_mesh_trans_recv+0x288>)
    e7e6:	4b25      	ldr	r3, [pc, #148]	; (e87c <bt_mesh_trans_recv+0x284>)
		BT_ERR("Invalid segment for ongoing session");
    e7e8:	482c      	ldr	r0, [pc, #176]	; (e89c <bt_mesh_trans_recv+0x2a4>)
    e7ea:	1ac9      	subs	r1, r1, r3
    e7ec:	08c9      	lsrs	r1, r1, #3
    e7ee:	0189      	lsls	r1, r1, #6
    e7f0:	f041 0101 	orr.w	r1, r1, #1
    e7f4:	e33c      	b.n	ee70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x410>
	if (rx->ctl != net_rx->ctl) {
    e7f6:	7d22      	ldrb	r2, [r4, #20]
    e7f8:	f3c3 1140 	ubfx	r1, r3, #5, #1
    e7fc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    e800:	4291      	cmp	r1, r2
    e802:	d008      	beq.n	e816 <bt_mesh_trans_recv+0x21e>
    e804:	491e      	ldr	r1, [pc, #120]	; (e880 <bt_mesh_trans_recv+0x288>)
    e806:	4b1d      	ldr	r3, [pc, #116]	; (e87c <bt_mesh_trans_recv+0x284>)
		BT_ERR("Inconsistent CTL in segment");
    e808:	4825      	ldr	r0, [pc, #148]	; (e8a0 <bt_mesh_trans_recv+0x2a8>)
    e80a:	1ac9      	subs	r1, r1, r3
    e80c:	08c9      	lsrs	r1, r1, #3
    e80e:	0189      	lsls	r1, r1, #6
    e810:	f041 0101 	orr.w	r1, r1, #1
    e814:	e32c      	b.n	ee70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x410>
		if (rx->in_use) {
    e816:	f89a 201f 	ldrb.w	r2, [sl, #31]
    e81a:	0652      	lsls	r2, r2, #25
    e81c:	f100 809a 	bmi.w	e954 <bt_mesh_trans_recv+0x35c>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    e820:	1c78      	adds	r0, r7, #1
    e822:	2701      	movs	r7, #1
    e824:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
    e828:	4087      	lsls	r7, r0
    e82a:	3f01      	subs	r7, #1
    e82c:	42ba      	cmp	r2, r7
    e82e:	d119      	bne.n	e864 <bt_mesh_trans_recv+0x26c>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    e830:	09db      	lsrs	r3, r3, #7
    e832:	e9cd 2301 	strd	r2, r3, [sp, #4]
    e836:	ab0c      	add	r3, sp, #48	; 0x30
    e838:	9300      	str	r3, [sp, #0]
    e83a:	8922      	ldrh	r2, [r4, #8]
    e83c:	7be3      	ldrb	r3, [r4, #15]
    e83e:	8961      	ldrh	r1, [r4, #10]
    e840:	6820      	ldr	r0, [r4, #0]
    e842:	f7ff fe27 	bl	e494 <send_ack>
			if (rpl) {
    e846:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e848:	b148      	cbz	r0, e85e <bt_mesh_trans_recv+0x266>
	rpl->src = rx->ctx.addr;
    e84a:	8923      	ldrh	r3, [r4, #8]
    e84c:	8003      	strh	r3, [r0, #0]
	rpl->seq = rx->seq;
    e84e:	6923      	ldr	r3, [r4, #16]
    e850:	6043      	str	r3, [r0, #4]
	rpl->old_iv = rx->old_iv;
    e852:	7d23      	ldrb	r3, [r4, #20]
    e854:	f3c3 0300 	ubfx	r3, r3, #0, #1
    e858:	7083      	strb	r3, [r0, #2]
		bt_mesh_store_rpl(rpl);
    e85a:	f018 fad5 	bl	26e08 <bt_mesh_store_rpl>
			return -EALREADY;
    e85e:	f06f 0744 	mvn.w	r7, #68	; 0x44
    e862:	e09e      	b.n	e9a2 <bt_mesh_trans_recv+0x3aa>
    e864:	4906      	ldr	r1, [pc, #24]	; (e880 <bt_mesh_trans_recv+0x288>)
    e866:	4b05      	ldr	r3, [pc, #20]	; (e87c <bt_mesh_trans_recv+0x284>)
		BT_WARN("Got segment for canceled SDU");
    e868:	480e      	ldr	r0, [pc, #56]	; (e8a4 <bt_mesh_trans_recv+0x2ac>)
    e86a:	1ac9      	subs	r1, r1, r3
    e86c:	08c9      	lsrs	r1, r1, #3
    e86e:	0189      	lsls	r1, r1, #6
    e870:	f041 0102 	orr.w	r1, r1, #2
    e874:	e2fc      	b.n	ee70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x410>
    e876:	bf00      	nop
    e878:	20006ab8 	.word	0x20006ab8
    e87c:	00028868 	.word	0x00028868
    e880:	000289c0 	.word	0x000289c0
    e884:	0002c3dc 	.word	0x0002c3dc
    e888:	0002c40a 	.word	0x0002c40a
    e88c:	0002c42f 	.word	0x0002c42f
    e890:	20000050 	.word	0x20000050
    e894:	0002c450 	.word	0x0002c450
    e898:	0002c4e0 	.word	0x0002c4e0
    e89c:	0002c483 	.word	0x0002c483
    e8a0:	0002c4a7 	.word	0x0002c4a7
    e8a4:	0002c4c3 	.word	0x0002c4c3
    e8a8:	20000000 	.word	0x20000000
	return slab->num_blocks - slab->num_used;
    e8ac:	4aad      	ldr	r2, [pc, #692]	; (eb64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x104>)
    e8ae:	6893      	ldr	r3, [r2, #8]
    e8b0:	6992      	ldr	r2, [r2, #24]
    e8b2:	1a9b      	subs	r3, r3, r2
	if (k_mem_slab_num_free_get(&segs) < seg_n) {
    e8b4:	42bb      	cmp	r3, r7
    e8b6:	d35e      	bcc.n	e976 <bt_mesh_trans_recv+0x37e>
		if (rx->in_use) {
    e8b8:	f89a 101f 	ldrb.w	r1, [sl, #31]
    e8bc:	f011 0140 	ands.w	r1, r1, #64	; 0x40
    e8c0:	f000 8085 	beq.w	e9ce <bt_mesh_trans_recv+0x3d6>
    e8c4:	f89a 306f 	ldrb.w	r3, [sl, #111]	; 0x6f
    e8c8:	0658      	lsls	r0, r3, #25
    e8ca:	d45e      	bmi.n	e98a <bt_mesh_trans_recv+0x392>
		struct seg_rx *rx = &seg_rx[i];
    e8cc:	4da6      	ldr	r5, [pc, #664]	; (eb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x108>)
	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
    e8ce:	2101      	movs	r1, #1
		rx->sub = net_rx->sub;
    e8d0:	2350      	movs	r3, #80	; 0x50
    e8d2:	434b      	muls	r3, r1
    e8d4:	6822      	ldr	r2, [r4, #0]
    e8d6:	f84a 2003 	str.w	r2, [sl, r3]
		rx->seq_auth = *seq_auth;
    e8da:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	; 0x30
		rx->ctl = net_rx->ctl;
    e8de:	7d22      	ldrb	r2, [r4, #20]
		rx->sub = net_rx->sub;
    e8e0:	eb0a 0003 	add.w	r0, sl, r3
		rx->seq_auth = *seq_auth;
    e8e4:	e9c0 bc04 	strd	fp, ip, [r0, #16]
		rx->ctl = net_rx->ctl;
    e8e8:	f3c2 0ec0 	ubfx	lr, r2, #3, #1
		rx->seg_n = seg_n;
    e8ec:	3318      	adds	r3, #24
    e8ee:	9a07      	ldr	r2, [sp, #28]
    e8f0:	4453      	add	r3, sl
    e8f2:	f042 0c40 	orr.w	ip, r2, #64	; 0x40
    e8f6:	ea4c 124e 	orr.w	r2, ip, lr, lsl #5
    e8fa:	f893 c007 	ldrb.w	ip, [r3, #7]
    e8fe:	f02c 0c7f 	bic.w	ip, ip, #127	; 0x7f
    e902:	ea42 020c 	orr.w	r2, r2, ip
    e906:	71da      	strb	r2, [r3, #7]
		rx->hdr = *hdr;
    e908:	f899 3000 	ldrb.w	r3, [r9]
    e90c:	7783      	strb	r3, [r0, #30]
		rx->ttl = net_rx->ctx.send_ttl;
    e90e:	7be3      	ldrb	r3, [r4, #15]
    e910:	f880 3020 	strb.w	r3, [r0, #32]
		rx->src = net_rx->ctx.addr;
    e914:	2214      	movs	r2, #20
    e916:	8923      	ldrh	r3, [r4, #8]
    e918:	8303      	strh	r3, [r0, #24]
		rx->dst = net_rx->ctx.recv_dst;
    e91a:	4351      	muls	r1, r2
    e91c:	8963      	ldrh	r3, [r4, #10]
    e91e:	8343      	strh	r3, [r0, #26]
		rx->block = 0U;
    e920:	3101      	adds	r1, #1
    e922:	2300      	movs	r3, #0
    e924:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
			k_mem_slab_alloc(&segs, &rx->seg[j], K_NO_WAIT);
    e928:	f8df a238 	ldr.w	sl, [pc, #568]	; eb64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x104>
		rx->block = 0U;
    e92c:	6243      	str	r3, [r0, #36]	; 0x24
		for (j = 0; j <= seg_n; j++) {
    e92e:	469b      	mov	fp, r3
			k_mem_slab_alloc(&segs, &rx->seg[j], K_NO_WAIT);
    e930:	2200      	movs	r2, #0
    e932:	4650      	mov	r0, sl
    e934:	9107      	str	r1, [sp, #28]
		for (j = 0; j <= seg_n; j++) {
    e936:	f10b 0b01 	add.w	fp, fp, #1
			k_mem_slab_alloc(&segs, &rx->seg[j], K_NO_WAIT);
    e93a:	f011 f8df 	bl	1fafc <k_mem_slab_alloc>
		for (j = 0; j <= seg_n; j++) {
    e93e:	9907      	ldr	r1, [sp, #28]
    e940:	45bb      	cmp	fp, r7
    e942:	f101 0104 	add.w	r1, r1, #4
    e946:	ddf3      	ble.n	e930 <bt_mesh_trans_recv+0x338>
	rx->obo = net_rx->friend_match;
    e948:	7d23      	ldrb	r3, [r4, #20]
    e94a:	7fea      	ldrb	r2, [r5, #31]
    e94c:	09db      	lsrs	r3, r3, #7
    e94e:	f363 12c7 	bfi	r2, r3, #7, #1
    e952:	77ea      	strb	r2, [r5, #31]
	if (BIT(seg_o) & rx->block) {
    e954:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e956:	fa23 fa08 	lsr.w	sl, r3, r8
    e95a:	f01a 0a01 	ands.w	sl, sl, #1
    e95e:	d038      	beq.n	e9d2 <bt_mesh_trans_recv+0x3da>
    e960:	4b82      	ldr	r3, [pc, #520]	; (eb6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c>)
    e962:	4983      	ldr	r1, [pc, #524]	; (eb70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110>)
		BT_WARN("Received already received fragment");
    e964:	4883      	ldr	r0, [pc, #524]	; (eb74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x114>)
    e966:	1ac9      	subs	r1, r1, r3
    e968:	08c9      	lsrs	r1, r1, #3
    e96a:	0189      	lsls	r1, r1, #6
    e96c:	f041 0102 	orr.w	r1, r1, #2
    e970:	f014 fd1c 	bl	233ac <log_0>
		return -EALREADY;
    e974:	e773      	b.n	e85e <bt_mesh_trans_recv+0x266>
    e976:	497e      	ldr	r1, [pc, #504]	; (eb70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110>)
    e978:	4b7c      	ldr	r3, [pc, #496]	; (eb6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c>)
		BT_WARN("Not enough segments for incoming message");
    e97a:	487f      	ldr	r0, [pc, #508]	; (eb78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x118>)
    e97c:	1ac9      	subs	r1, r1, r3
    e97e:	08c9      	lsrs	r1, r1, #3
    e980:	0189      	lsls	r1, r1, #6
    e982:	f041 0102 	orr.w	r1, r1, #2
    e986:	f014 fd11 	bl	233ac <log_0>
    e98a:	4b78      	ldr	r3, [pc, #480]	; (eb6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c>)
    e98c:	4978      	ldr	r1, [pc, #480]	; (eb70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110>)
		BT_WARN("No free slots for new incoming segmented messages");
    e98e:	487b      	ldr	r0, [pc, #492]	; (eb7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11c>)
    e990:	1ac9      	subs	r1, r1, r3
    e992:	08c9      	lsrs	r1, r1, #3
    e994:	0189      	lsls	r1, r1, #6
    e996:	f041 0102 	orr.w	r1, r1, #2
    e99a:	f014 fd07 	bl	233ac <log_0>
		return -ENOMEM;
    e99e:	f06f 070b 	mvn.w	r7, #11
}

static inline bool bt_mesh_lpn_timer(void)
{
#if defined(CONFIG_BT_MESH_LPN_AUTO)
	return (bt_mesh.lpn.state == BT_MESH_LPN_TIMER);
    e9a2:	4a77      	ldr	r2, [pc, #476]	; (eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>)
    e9a4:	f892 3020 	ldrb.w	r3, [r2, #32]
	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) &&
    e9a8:	2b02      	cmp	r3, #2
    e9aa:	d005      	beq.n	e9b8 <bt_mesh_trans_recv+0x3c0>
	return bt_mesh.lpn.established;
    e9ac:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
    e9b0:	06d2      	lsls	r2, r2, #27
    e9b2:	d504      	bpl.n	e9be <bt_mesh_trans_recv+0x3c6>
	     (bt_mesh_lpn_established() && bt_mesh_lpn_waiting_update()))) {
    e9b4:	2b08      	cmp	r3, #8
    e9b6:	d102      	bne.n	e9be <bt_mesh_trans_recv+0x3c6>
		bt_mesh_lpn_msg_received(rx);
    e9b8:	4620      	mov	r0, r4
    e9ba:	f005 fd8d 	bl	144d8 <bt_mesh_lpn_msg_received>
	buf->data = buf->__buf + state->offset;
    e9be:	9b08      	ldr	r3, [sp, #32]
    e9c0:	68b0      	ldr	r0, [r6, #8]
    e9c2:	fa10 f083 	uxtah	r0, r0, r3
	buf->len = state->len;
    e9c6:	9b06      	ldr	r3, [sp, #24]
	buf->data = buf->__buf + state->offset;
    e9c8:	6030      	str	r0, [r6, #0]
	buf->len = state->len;
    e9ca:	80b3      	strh	r3, [r6, #4]
}
    e9cc:	e643      	b.n	e656 <bt_mesh_trans_recv+0x5e>
		struct seg_rx *rx = &seg_rx[i];
    e9ce:	4d6d      	ldr	r5, [pc, #436]	; (eb84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x124>)
    e9d0:	e77e      	b.n	e8d0 <bt_mesh_trans_recv+0x2d8>
	if (seg_o == seg_n) {
    e9d2:	7fea      	ldrb	r2, [r5, #31]
    e9d4:	88b1      	ldrh	r1, [r6, #4]
    e9d6:	f3c2 1240 	ubfx	r2, r2, #5, #1
		return BT_MESH_APP_SEG_SDU_MAX;
    e9da:	2a00      	cmp	r2, #0
    e9dc:	bf14      	ite	ne
    e9de:	2308      	movne	r3, #8
    e9e0:	230c      	moveq	r3, #12
	if (seg_o == seg_n) {
    e9e2:	45b8      	cmp	r8, r7
    e9e4:	d120      	bne.n	ea28 <bt_mesh_trans_recv+0x430>
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    e9e6:	fb03 1308 	mla	r3, r3, r8, r1
    e9ea:	b29b      	uxth	r3, r3
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    e9ec:	2b24      	cmp	r3, #36	; 0x24
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    e9ee:	83ab      	strh	r3, [r5, #28]
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    e9f0:	d925      	bls.n	ea3e <bt_mesh_trans_recv+0x446>
    e9f2:	4b5e      	ldr	r3, [pc, #376]	; (eb6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c>)
    e9f4:	495e      	ldr	r1, [pc, #376]	; (eb70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110>)
			BT_ERR("Too large SDU len");
    e9f6:	4864      	ldr	r0, [pc, #400]	; (eb88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x128>)
    e9f8:	1ac9      	subs	r1, r1, r3
    e9fa:	08c9      	lsrs	r1, r1, #3
    e9fc:	0189      	lsls	r1, r1, #6
    e9fe:	f041 0101 	orr.w	r1, r1, #1
    ea02:	f014 fcd3 	bl	233ac <log_0>
				 seq_auth, 0, rx->obo);
    ea06:	7feb      	ldrb	r3, [r5, #31]
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    ea08:	8961      	ldrh	r1, [r4, #10]
    ea0a:	8922      	ldrh	r2, [r4, #8]
    ea0c:	6820      	ldr	r0, [r4, #0]
    ea0e:	09db      	lsrs	r3, r3, #7
    ea10:	e9cd a301 	strd	sl, r3, [sp, #4]
    ea14:	ab0c      	add	r3, sp, #48	; 0x30
    ea16:	9300      	str	r3, [sp, #0]
    ea18:	7be3      	ldrb	r3, [r4, #15]
    ea1a:	f7ff fd3b 	bl	e494 <send_ack>
			seg_rx_reset(rx, true);
    ea1e:	2101      	movs	r1, #1
    ea20:	4628      	mov	r0, r5
    ea22:	f7fe ffd7 	bl	d9d4 <seg_rx_reset>
    ea26:	e6c9      	b.n	e7bc <bt_mesh_trans_recv+0x1c4>
		if (buf->len != seg_len(rx->ctl)) {
    ea28:	428b      	cmp	r3, r1
    ea2a:	d008      	beq.n	ea3e <bt_mesh_trans_recv+0x446>
    ea2c:	4950      	ldr	r1, [pc, #320]	; (eb70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110>)
    ea2e:	4b4f      	ldr	r3, [pc, #316]	; (eb6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c>)
			BT_ERR("Incorrect segment size for message type");
    ea30:	4856      	ldr	r0, [pc, #344]	; (eb8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12c>)
    ea32:	1ac9      	subs	r1, r1, r3
    ea34:	08c9      	lsrs	r1, r1, #3
    ea36:	0189      	lsls	r1, r1, #6
    ea38:	f041 0101 	orr.w	r1, r1, #1
    ea3c:	e218      	b.n	ee70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x410>
    ea3e:	f019 fd2f 	bl	284a0 <z_impl_k_uptime_ticks>
    ea42:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    ea46:	460b      	mov	r3, r1
    ea48:	fba0 010b 	umull	r0, r1, r0, fp
    ea4c:	fb0b 1103 	mla	r1, fp, r3, r1
    ea50:	0bc3      	lsrs	r3, r0, #15
    ea52:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return (u32_t)k_uptime_get();
    ea56:	62ab      	str	r3, [r5, #40]	; 0x28
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
    ea58:	f105 0038 	add.w	r0, r5, #56	; 0x38
    ea5c:	f013 fca0 	bl	223a0 <z_timeout_remaining>
			return (u32_t)((t * to_hz + off) / from_hz);
    ea60:	fba0 010b 	umull	r0, r1, r0, fp
    ea64:	0bc3      	lsrs	r3, r0, #15
	if (!k_delayed_work_remaining_get(&rx->ack) &&
    ea66:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
    ea6a:	f105 0a2c 	add.w	sl, r5, #44	; 0x2c
    ea6e:	d10c      	bne.n	ea8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a>
    ea70:	4b43      	ldr	r3, [pc, #268]	; (eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>)
    ea72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    ea76:	06d9      	lsls	r1, r3, #27
    ea78:	d407      	bmi.n	ea8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a>
		k_delayed_work_submit(&rx->ack, ack_timeout(rx));
    ea7a:	4628      	mov	r0, r5
    ea7c:	f017 fcf1 	bl	26462 <ack_timeout>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    ea80:	4651      	mov	r1, sl
    ea82:	4602      	mov	r2, r0
    ea84:	4842      	ldr	r0, [pc, #264]	; (eb90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x130>)
    ea86:	f013 fa5f 	bl	21f48 <k_delayed_work_submit_to_queue>
	memcpy(rx->seg[seg_o], buf->data, buf->len);
    ea8a:	eb05 0388 	add.w	r3, r5, r8, lsl #2
    ea8e:	88b2      	ldrh	r2, [r6, #4]
    ea90:	6858      	ldr	r0, [r3, #4]
    ea92:	6831      	ldr	r1, [r6, #0]
    ea94:	f016 fafc 	bl	25090 <memcpy>
	rx->block |= BIT(seg_o);
    ea98:	2301      	movs	r3, #1
    ea9a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ea9c:	441f      	add	r7, r3
	rx->block |= BIT(seg_o);
    ea9e:	fa03 f808 	lsl.w	r8, r3, r8
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    eaa2:	40bb      	lsls	r3, r7
	rx->block |= BIT(seg_o);
    eaa4:	ea48 0202 	orr.w	r2, r8, r2
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    eaa8:	3b01      	subs	r3, #1
    eaaa:	429a      	cmp	r2, r3
	rx->block |= BIT(seg_o);
    eaac:	626a      	str	r2, [r5, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    eaae:	f040 81cd 	bne.w	ee4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3ec>
	if (rpl) {
    eab2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eab4:	b148      	cbz	r0, eaca <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6a>
	rpl->src = rx->ctx.addr;
    eab6:	8923      	ldrh	r3, [r4, #8]
    eab8:	8003      	strh	r3, [r0, #0]
	rpl->seq = rx->seq;
    eaba:	6923      	ldr	r3, [r4, #16]
    eabc:	6043      	str	r3, [r0, #4]
	rpl->old_iv = rx->old_iv;
    eabe:	7d23      	ldrb	r3, [r4, #20]
    eac0:	f3c3 0300 	ubfx	r3, r3, #0, #1
    eac4:	7083      	strb	r3, [r0, #2]
		bt_mesh_store_rpl(rpl);
    eac6:	f018 f99f 	bl	26e08 <bt_mesh_store_rpl>
	k_delayed_work_cancel(&rx->ack);
    eaca:	4650      	mov	r0, sl
    eacc:	f013 facc 	bl	22068 <k_delayed_work_cancel>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
    ead0:	7feb      	ldrb	r3, [r5, #31]
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    ead2:	8922      	ldrh	r2, [r4, #8]
    ead4:	8961      	ldrh	r1, [r4, #10]
    ead6:	6820      	ldr	r0, [r4, #0]
    ead8:	09db      	lsrs	r3, r3, #7
    eada:	9302      	str	r3, [sp, #8]
    eadc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eade:	9301      	str	r3, [sp, #4]
    eae0:	af0c      	add	r7, sp, #48	; 0x30
    eae2:	7be3      	ldrb	r3, [r4, #15]
    eae4:	9700      	str	r7, [sp, #0]
    eae6:	f7ff fcd5 	bl	e494 <send_ack>
	if (net_rx->ctl) {
    eaea:	f894 8014 	ldrb.w	r8, [r4, #20]
    eaee:	f018 0808 	ands.w	r8, r8, #8
    eaf2:	ab15      	add	r3, sp, #84	; 0x54
    eaf4:	d016      	beq.n	eb24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc4>
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    eaf6:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
    eafa:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
		seg_rx_assemble(rx, &sdu, 0U);
    eafe:	a912      	add	r1, sp, #72	; 0x48
    eb00:	2200      	movs	r2, #0
    eb02:	4628      	mov	r0, r5
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    eb04:	9312      	str	r3, [sp, #72]	; 0x48
		seg_rx_assemble(rx, &sdu, 0U);
    eb06:	f017 fcca 	bl	2649e <seg_rx_assemble>
		err = ctl_recv(net_rx, *hdr, &sdu, seq_auth);
    eb0a:	463b      	mov	r3, r7
    eb0c:	f899 1000 	ldrb.w	r1, [r9]
    eb10:	aa12      	add	r2, sp, #72	; 0x48
    eb12:	4620      	mov	r0, r4
    eb14:	f7ff f9a6 	bl	de64 <ctl_recv>
    eb18:	4607      	mov	r7, r0
	seg_rx_reset(rx, false);
    eb1a:	2100      	movs	r1, #0
    eb1c:	4628      	mov	r0, r5
    eb1e:	f7fe ff59 	bl	d9d4 <seg_rx_reset>
	return err;
    eb22:	e73e      	b.n	e9a2 <bt_mesh_trans_recv+0x3aa>
		err = sdu_recv_seg(rx, *hdr, ASZMIC(hdr), net_rx);
    eb24:	f899 7001 	ldrb.w	r7, [r9, #1]
    eb28:	f899 a000 	ldrb.w	sl, [r9]
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_RX_SDU_MAX);
    eb2c:	930f      	str	r3, [sp, #60]	; 0x3c
    eb2e:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
    eb32:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	u32_t seq = (seg->seq_auth & 0xffffff);
    eb36:	692b      	ldr	r3, [r5, #16]
	if (seg->len < 1 + APP_MIC_LEN(aszmic)) {
    eb38:	8baa      	ldrh	r2, [r5, #28]
    eb3a:	09ff      	lsrs	r7, r7, #7
	u32_t seq = (seg->seq_auth & 0xffffff);
    eb3c:	f023 497f 	bic.w	r9, r3, #4278190080	; 0xff000000
	if (seg->len < 1 + APP_MIC_LEN(aszmic)) {
    eb40:	bf14      	ite	ne
    eb42:	2309      	movne	r3, #9
    eb44:	2305      	moveq	r3, #5
    eb46:	429a      	cmp	r2, r3
    eb48:	da26      	bge.n	eb98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x138>
    eb4a:	4909      	ldr	r1, [pc, #36]	; (eb70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110>)
    eb4c:	4b07      	ldr	r3, [pc, #28]	; (eb6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c>)
		BT_ERR("Too short SDU + MIC");
    eb4e:	4811      	ldr	r0, [pc, #68]	; (eb94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x134>)
    eb50:	1ac9      	subs	r1, r1, r3
    eb52:	08c9      	lsrs	r1, r1, #3
    eb54:	0189      	lsls	r1, r1, #6
    eb56:	f041 0101 	orr.w	r1, r1, #1
	BT_WARN("No matching AppKey");
    eb5a:	f014 fc27 	bl	233ac <log_0>
	return -EINVAL;
    eb5e:	f06f 0715 	mvn.w	r7, #21
    eb62:	e7da      	b.n	eb1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xba>
    eb64:	20007480 	.word	0x20007480
    eb68:	20000050 	.word	0x20000050
    eb6c:	00028868 	.word	0x00028868
    eb70:	000289c0 	.word	0x000289c0
    eb74:	0002c557 	.word	0x0002c557
    eb78:	0002c4fc 	.word	0x0002c4fc
    eb7c:	0002c525 	.word	0x0002c525
    eb80:	20006ab8 	.word	0x20006ab8
    eb84:	20000000 	.word	0x20000000
    eb88:	0002c57a 	.word	0x0002c57a
    eb8c:	0002c58c 	.word	0x0002c58c
    eb90:	20001c08 	.word	0x20001c08
    eb94:	0002c5b4 	.word	0x0002c5b4
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    eb98:	8960      	ldrh	r0, [r4, #10]
    eb9a:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    eb9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    eba2:	d202      	bcs.n	ebaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14a>
		ad = bt_mesh_label_uuid_get(rx->ctx.recv_dst);
    eba4:	f003 fca6 	bl	124f4 <bt_mesh_label_uuid_get>
    eba8:	4680      	mov	r8, r0
	if (!AKF(&hdr)) {
    ebaa:	f01a 0f40 	tst.w	sl, #64	; 0x40
    ebae:	f3ca 1b80 	ubfx	fp, sl, #6, #1
    ebb2:	d14b      	bne.n	ec4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ec>
		seg_rx_assemble(seg, &buf, aszmic);
    ebb4:	463a      	mov	r2, r7
    ebb6:	a90f      	add	r1, sp, #60	; 0x3c
    ebb8:	4628      	mov	r0, r5
    ebba:	f017 fc70 	bl	2649e <seg_rx_assemble>
					      seg->len - APP_MIC_LEN(aszmic));
    ebbe:	2f00      	cmp	r7, #0
    ebc0:	8baa      	ldrh	r2, [r5, #28]
		net_buf_simple_init_with_data(&sdu, buf.data,
    ebc2:	990f      	ldr	r1, [sp, #60]	; 0x3c
					      seg->len - APP_MIC_LEN(aszmic));
    ebc4:	bf14      	ite	ne
    ebc6:	2308      	movne	r3, #8
    ebc8:	2304      	moveq	r3, #4
		net_buf_simple_init_with_data(&sdu, buf.data,
    ebca:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
    ebce:	1ad2      	subs	r2, r2, r3
    ebd0:	4650      	mov	r0, sl
    ebd2:	9307      	str	r3, [sp, #28]
    ebd4:	f019 f938 	bl	27e48 <net_buf_simple_init_with_data>
		seg_rx_assemble(seg, &buf, aszmic);
    ebd8:	463a      	mov	r2, r7
    ebda:	a90f      	add	r1, sp, #60	; 0x3c
    ebdc:	4628      	mov	r0, r5
		sdu.len = 0;
    ebde:	f8ad b04c 	strh.w	fp, [sp, #76]	; 0x4c
		seg_rx_assemble(seg, &buf, aszmic);
    ebe2:	f017 fc5c 	bl	2649e <seg_rx_assemble>
		net_buf_simple_init_with_data(&sdu, buf.data,
    ebe6:	9b07      	ldr	r3, [sp, #28]
					      seg->len - APP_MIC_LEN(aszmic));
    ebe8:	8baa      	ldrh	r2, [r5, #28]
		net_buf_simple_init_with_data(&sdu, buf.data,
    ebea:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ebec:	1ad2      	subs	r2, r2, r3
    ebee:	4650      	mov	r0, sl
    ebf0:	f019 f92a 	bl	27e48 <net_buf_simple_init_with_data>
					  BT_MESH_NET_IVI_RX(rx));
    ebf4:	7d23      	ldrb	r3, [r4, #20]
		err = bt_mesh_app_decrypt(bt_mesh.dev_key, true, aszmic, &buf,
    ebf6:	48a1      	ldr	r0, [pc, #644]	; (ee7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x41c>)
		sdu.len = 0;
    ebf8:	f8ad b04c 	strh.w	fp, [sp, #76]	; 0x4c
					  BT_MESH_NET_IVI_RX(rx));
    ebfc:	f003 0201 	and.w	r2, r3, #1
		err = bt_mesh_app_decrypt(bt_mesh.dev_key, true, aszmic, &buf,
    ec00:	f850 3c94 	ldr.w	r3, [r0, #-148]
    ec04:	f8cd a000 	str.w	sl, [sp]
    ec08:	1a9b      	subs	r3, r3, r2
    ec0a:	e9cd 9304 	strd	r9, r3, [sp, #16]
    ec0e:	8963      	ldrh	r3, [r4, #10]
    ec10:	9303      	str	r3, [sp, #12]
    ec12:	8923      	ldrh	r3, [r4, #8]
    ec14:	463a      	mov	r2, r7
    ec16:	e9cd 8301 	strd	r8, r3, [sp, #4]
    ec1a:	2101      	movs	r1, #1
    ec1c:	ab0f      	add	r3, sp, #60	; 0x3c
    ec1e:	f017 fe03 	bl	26828 <bt_mesh_app_decrypt>
		if (err) {
    ec22:	4607      	mov	r7, r0
    ec24:	b150      	cbz	r0, ec3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1dc>
    ec26:	4b96      	ldr	r3, [pc, #600]	; (ee80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x420>)
    ec28:	4996      	ldr	r1, [pc, #600]	; (ee84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x424>)
			BT_ERR("Unable to decrypt with local DevKey");
    ec2a:	4897      	ldr	r0, [pc, #604]	; (ee88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x428>)
    ec2c:	1ac9      	subs	r1, r1, r3
    ec2e:	08c9      	lsrs	r1, r1, #3
    ec30:	0189      	lsls	r1, r1, #6
    ec32:	f041 0101 	orr.w	r1, r1, #1
    ec36:	f014 fbb9 	bl	233ac <log_0>
			return err;
    ec3a:	e76e      	b.n	eb1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xba>
		rx->ctx.app_idx = BT_MESH_KEY_DEV_LOCAL;
    ec3c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    ec40:	80e3      	strh	r3, [r4, #6]
		bt_mesh_model_recv(rx, &sdu);
    ec42:	4651      	mov	r1, sl
    ec44:	4620      	mov	r0, r4
    ec46:	f000 fe2f 	bl	f8a8 <bt_mesh_model_recv>
		return 0;
    ec4a:	e766      	b.n	eb1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xba>
    ec4c:	2f00      	cmp	r7, #0
    ec4e:	bf14      	ite	ne
    ec50:	2308      	movne	r3, #8
    ec52:	2304      	moveq	r3, #4
		seg_rx_assemble(seg, &buf, aszmic);
    ec54:	463a      	mov	r2, r7
    ec56:	a90f      	add	r1, sp, #60	; 0x3c
    ec58:	4628      	mov	r0, r5
    ec5a:	9307      	str	r3, [sp, #28]
    ec5c:	f017 fc1f 	bl	2649e <seg_rx_assemble>
		net_buf_simple_init_with_data(&sdu, buf.data,
    ec60:	9b07      	ldr	r3, [sp, #28]
					      seg->len - APP_MIC_LEN(aszmic));
    ec62:	8baa      	ldrh	r2, [r5, #28]
		net_buf_simple_init_with_data(&sdu, buf.data,
    ec64:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ec66:	1ad2      	subs	r2, r2, r3
    ec68:	a812      	add	r0, sp, #72	; 0x48
    ec6a:	f019 f8ed 	bl	27e48 <net_buf_simple_init_with_data>
		err = app_key_decrypt(rx, &bt_mesh.app_keys[i], seq, ad, hdr,
    ec6e:	ab12      	add	r3, sp, #72	; 0x48
    ec70:	9303      	str	r3, [sp, #12]
    ec72:	ab0f      	add	r3, sp, #60	; 0x3c
    ec74:	e9cd 7301 	strd	r7, r3, [sp, #4]
		sdu.len = 0;
    ec78:	f04f 0b00 	mov.w	fp, #0
		err = app_key_decrypt(rx, &bt_mesh.app_keys[i], seq, ad, hdr,
    ec7c:	4983      	ldr	r1, [pc, #524]	; (ee8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x42c>)
    ec7e:	f8cd a000 	str.w	sl, [sp]
    ec82:	4643      	mov	r3, r8
    ec84:	464a      	mov	r2, r9
    ec86:	4620      	mov	r0, r4
		sdu.len = 0;
    ec88:	f8ad b04c 	strh.w	fp, [sp, #76]	; 0x4c
		err = app_key_decrypt(rx, &bt_mesh.app_keys[i], seq, ad, hdr,
    ec8c:	f7fe feca 	bl	da24 <app_key_decrypt.constprop.0>
		if (err) {
    ec90:	b328      	cbz	r0, ecde <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x27e>
		seg_rx_assemble(seg, &buf, aszmic);
    ec92:	463a      	mov	r2, r7
    ec94:	a90f      	add	r1, sp, #60	; 0x3c
    ec96:	4628      	mov	r0, r5
    ec98:	f017 fc01 	bl	2649e <seg_rx_assemble>
		net_buf_simple_init_with_data(&sdu, buf.data,
    ec9c:	9b07      	ldr	r3, [sp, #28]
					      seg->len - APP_MIC_LEN(aszmic));
    ec9e:	8baa      	ldrh	r2, [r5, #28]
		net_buf_simple_init_with_data(&sdu, buf.data,
    eca0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    eca2:	1ad2      	subs	r2, r2, r3
    eca4:	a812      	add	r0, sp, #72	; 0x48
    eca6:	f019 f8cf 	bl	27e48 <net_buf_simple_init_with_data>
		err = app_key_decrypt(rx, &bt_mesh.app_keys[i], seq, ad, hdr,
    ecaa:	ab12      	add	r3, sp, #72	; 0x48
    ecac:	9303      	str	r3, [sp, #12]
    ecae:	ab0f      	add	r3, sp, #60	; 0x3c
    ecb0:	e9cd 7301 	strd	r7, r3, [sp, #4]
    ecb4:	4976      	ldr	r1, [pc, #472]	; (ee90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x430>)
    ecb6:	f8cd a000 	str.w	sl, [sp]
    ecba:	4643      	mov	r3, r8
    ecbc:	464a      	mov	r2, r9
    ecbe:	4620      	mov	r0, r4
		sdu.len = 0;
    ecc0:	f8ad b04c 	strh.w	fp, [sp, #76]	; 0x4c
		err = app_key_decrypt(rx, &bt_mesh.app_keys[i], seq, ad, hdr,
    ecc4:	f7fe feae 	bl	da24 <app_key_decrypt.constprop.0>
		if (err) {
    ecc8:	b140      	cbz	r0, ecdc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x27c>
    ecca:	496e      	ldr	r1, [pc, #440]	; (ee84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x424>)
    eccc:	4b6c      	ldr	r3, [pc, #432]	; (ee80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x420>)
	BT_WARN("No matching AppKey");
    ecce:	4871      	ldr	r0, [pc, #452]	; (ee94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x434>)
    ecd0:	1ac9      	subs	r1, r1, r3
    ecd2:	08c9      	lsrs	r1, r1, #3
    ecd4:	0189      	lsls	r1, r1, #6
    ecd6:	f041 0102 	orr.w	r1, r1, #2
    ecda:	e73e      	b.n	eb5a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa>
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
    ecdc:	2001      	movs	r0, #1
		rx->ctx.app_idx = key->app_idx;
    ecde:	4b6e      	ldr	r3, [pc, #440]	; (ee98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x438>)
    ece0:	2228      	movs	r2, #40	; 0x28
    ece2:	fb02 3000 	mla	r0, r2, r0, r3
		bt_mesh_model_recv(rx, &sdu);
    ece6:	a912      	add	r1, sp, #72	; 0x48
		rx->ctx.app_idx = key->app_idx;
    ece8:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
    ecec:	80e3      	strh	r3, [r4, #6]
		bt_mesh_model_recv(rx, &sdu);
    ecee:	4620      	mov	r0, r4
    ecf0:	f000 fdda 	bl	f8a8 <bt_mesh_model_recv>
		return 0;
    ecf4:	2700      	movs	r7, #0
    ecf6:	e710      	b.n	eb1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xba>
	if (buf->len < 1) {
    ecf8:	9b06      	ldr	r3, [sp, #24]
    ecfa:	b943      	cbnz	r3, ed0e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2ae>
    ecfc:	4961      	ldr	r1, [pc, #388]	; (ee84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x424>)
    ecfe:	4b60      	ldr	r3, [pc, #384]	; (ee80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x420>)
		BT_ERR("Too small unsegmented PDU");
    ed00:	4866      	ldr	r0, [pc, #408]	; (ee9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x43c>)
    ed02:	1ac9      	subs	r1, r1, r3
    ed04:	08c9      	lsrs	r1, r1, #3
    ed06:	0189      	lsls	r1, r1, #6
    ed08:	f041 0101 	orr.w	r1, r1, #1
    ed0c:	e0b0      	b.n	ee70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x410>
	if (is_replay(rx, NULL)) {
    ed0e:	2100      	movs	r1, #0
    ed10:	4620      	mov	r0, r4
    ed12:	f7ff fb31 	bl	e378 <is_replay>
    ed16:	2800      	cmp	r0, #0
    ed18:	f47f acc3 	bne.w	e6a2 <bt_mesh_trans_recv+0xaa>
	hdr = net_buf_simple_pull_u8(buf);
    ed1c:	4630      	mov	r0, r6
    ed1e:	f019 f8b5 	bl	27e8c <net_buf_simple_pull_u8>
	if (rx->ctl) {
    ed22:	7d22      	ldrb	r2, [r4, #20]
    ed24:	f012 0908 	ands.w	r9, r2, #8
	hdr = net_buf_simple_pull_u8(buf);
    ed28:	4607      	mov	r7, r0
	if (rx->ctl) {
    ed2a:	d007      	beq.n	ed3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2dc>
		return ctl_recv(rx, hdr, buf, seq_auth);
    ed2c:	4601      	mov	r1, r0
    ed2e:	ab0c      	add	r3, sp, #48	; 0x30
    ed30:	4632      	mov	r2, r6
    ed32:	4620      	mov	r0, r4
    ed34:	f7ff f896 	bl	de64 <ctl_recv>
			return 0;
    ed38:	4607      	mov	r7, r0
    ed3a:	e632      	b.n	e9a2 <bt_mesh_trans_recv+0x3aa>
		if (!rx->local_match && !rx->friend_match) {
    ed3c:	f012 00c0 	ands.w	r0, r2, #192	; 0xc0
    ed40:	d0fa      	beq.n	ed38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2d8>
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_SDU_UNSEG_MAX);
    ed42:	aa12      	add	r2, sp, #72	; 0x48
    ed44:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
    ed48:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if (buf->len < 1 + APP_MIC_LEN(0)) {
    ed4c:	88b3      	ldrh	r3, [r6, #4]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_SDU_UNSEG_MAX);
    ed4e:	9215      	str	r2, [sp, #84]	; 0x54
	if (buf->len < 1 + APP_MIC_LEN(0)) {
    ed50:	2b04      	cmp	r3, #4
    ed52:	d808      	bhi.n	ed66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x306>
    ed54:	494b      	ldr	r1, [pc, #300]	; (ee84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x424>)
    ed56:	4b4a      	ldr	r3, [pc, #296]	; (ee80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x420>)
		BT_ERR("Too short SDU + MIC");
    ed58:	4851      	ldr	r0, [pc, #324]	; (eea0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x440>)
    ed5a:	1ac9      	subs	r1, r1, r3
    ed5c:	08c9      	lsrs	r1, r1, #3
    ed5e:	0189      	lsls	r1, r1, #6
    ed60:	f041 0101 	orr.w	r1, r1, #1
    ed64:	e084      	b.n	ee70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x410>
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    ed66:	8960      	ldrh	r0, [r4, #10]
    ed68:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    ed6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    ed70:	d202      	bcs.n	ed78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x318>
		ad = bt_mesh_label_uuid_get(rx->ctx.recv_dst);
    ed72:	f003 fbbf 	bl	124f4 <bt_mesh_label_uuid_get>
    ed76:	4681      	mov	r9, r0
	buf->len -= APP_MIC_LEN(0);
    ed78:	88b3      	ldrh	r3, [r6, #4]
	if (!AKF(&hdr)) {
    ed7a:	f017 0f40 	tst.w	r7, #64	; 0x40
	buf->len -= APP_MIC_LEN(0);
    ed7e:	f1a3 0304 	sub.w	r3, r3, #4
    ed82:	80b3      	strh	r3, [r6, #4]
	if (!AKF(&hdr)) {
    ed84:	f3c7 1280 	ubfx	r2, r7, #6, #1
    ed88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ed8a:	ad15      	add	r5, sp, #84	; 0x54
    ed8c:	d12b      	bne.n	ede6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x386>
		err = bt_mesh_app_decrypt(bt_mesh.dev_key, true, 0, buf, &sdu,
    ed8e:	483b      	ldr	r0, [pc, #236]	; (ee7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x41c>)
	buf->data = buf->__buf;
    ed90:	9315      	str	r3, [sp, #84]	; 0x54
					  rx->seq, BT_MESH_NET_IVI_RX(rx));
    ed92:	7d23      	ldrb	r3, [r4, #20]
    ed94:	6921      	ldr	r1, [r4, #16]
	buf->len  = 0U;
    ed96:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
    ed9a:	f003 0701 	and.w	r7, r3, #1
		err = bt_mesh_app_decrypt(bt_mesh.dev_key, true, 0, buf, &sdu,
    ed9e:	f850 3c94 	ldr.w	r3, [r0, #-148]
    eda2:	9500      	str	r5, [sp, #0]
    eda4:	1bdb      	subs	r3, r3, r7
    eda6:	e9cd 1304 	strd	r1, r3, [sp, #16]
    edaa:	8963      	ldrh	r3, [r4, #10]
    edac:	9303      	str	r3, [sp, #12]
    edae:	8923      	ldrh	r3, [r4, #8]
    edb0:	2101      	movs	r1, #1
    edb2:	e9cd 9301 	strd	r9, r3, [sp, #4]
    edb6:	4633      	mov	r3, r6
    edb8:	f017 fd36 	bl	26828 <bt_mesh_app_decrypt>
		if (err) {
    edbc:	4607      	mov	r7, r0
    edbe:	b150      	cbz	r0, edd6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x376>
    edc0:	4b2f      	ldr	r3, [pc, #188]	; (ee80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x420>)
    edc2:	4930      	ldr	r1, [pc, #192]	; (ee84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x424>)
			BT_ERR("Unable to decrypt with local DevKey");
    edc4:	4830      	ldr	r0, [pc, #192]	; (ee88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x428>)
    edc6:	1ac9      	subs	r1, r1, r3
    edc8:	08c9      	lsrs	r1, r1, #3
    edca:	0189      	lsls	r1, r1, #6
    edcc:	f041 0101 	orr.w	r1, r1, #1
    edd0:	f014 faec 	bl	233ac <log_0>
			return err;
    edd4:	e5e5      	b.n	e9a2 <bt_mesh_trans_recv+0x3aa>
		rx->ctx.app_idx = BT_MESH_KEY_DEV_LOCAL;
    edd6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    edda:	80e3      	strh	r3, [r4, #6]
		bt_mesh_model_recv(rx, &sdu);
    eddc:	4629      	mov	r1, r5
    edde:	4620      	mov	r0, r4
    ede0:	f000 fd62 	bl	f8a8 <bt_mesh_model_recv>
		return 0;
    ede4:	e5dd      	b.n	e9a2 <bt_mesh_trans_recv+0x3aa>
    ede6:	f04f 0800 	mov.w	r8, #0
	buf->data = buf->__buf;
    edea:	9315      	str	r3, [sp, #84]	; 0x54
		err = app_key_decrypt(rx, &bt_mesh.app_keys[i], rx->seq, ad,
    edec:	e9cd 6502 	strd	r6, r5, [sp, #8]
    edf0:	e9cd 7800 	strd	r7, r8, [sp]
    edf4:	6922      	ldr	r2, [r4, #16]
    edf6:	4925      	ldr	r1, [pc, #148]	; (ee8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x42c>)
	buf->len  = 0U;
    edf8:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
    edfc:	464b      	mov	r3, r9
    edfe:	4620      	mov	r0, r4
    ee00:	f7fe fe10 	bl	da24 <app_key_decrypt.constprop.0>
		if (err) {
    ee04:	b1c0      	cbz	r0, ee38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3d8>
	buf->data = buf->__buf;
    ee06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ee08:	9315      	str	r3, [sp, #84]	; 0x54
		err = app_key_decrypt(rx, &bt_mesh.app_keys[i], rx->seq, ad,
    ee0a:	e9cd 6502 	strd	r6, r5, [sp, #8]
    ee0e:	e9cd 7800 	strd	r7, r8, [sp]
    ee12:	6922      	ldr	r2, [r4, #16]
    ee14:	491e      	ldr	r1, [pc, #120]	; (ee90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x430>)
	buf->len  = 0U;
    ee16:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
    ee1a:	464b      	mov	r3, r9
    ee1c:	4620      	mov	r0, r4
    ee1e:	f7fe fe01 	bl	da24 <app_key_decrypt.constprop.0>
		if (err) {
    ee22:	b140      	cbz	r0, ee36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3d6>
    ee24:	4917      	ldr	r1, [pc, #92]	; (ee84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x424>)
    ee26:	4b16      	ldr	r3, [pc, #88]	; (ee80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x420>)
	BT_WARN("No matching AppKey");
    ee28:	481a      	ldr	r0, [pc, #104]	; (ee94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x434>)
    ee2a:	1ac9      	subs	r1, r1, r3
    ee2c:	08c9      	lsrs	r1, r1, #3
    ee2e:	0189      	lsls	r1, r1, #6
    ee30:	f041 0102 	orr.w	r1, r1, #2
    ee34:	e01c      	b.n	ee70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x410>
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
    ee36:	2001      	movs	r0, #1
		rx->ctx.app_idx = key->app_idx;
    ee38:	2328      	movs	r3, #40	; 0x28
    ee3a:	fb03 b000 	mla	r0, r3, r0, fp
		bt_mesh_model_recv(rx, &sdu);
    ee3e:	4629      	mov	r1, r5
		rx->ctx.app_idx = key->app_idx;
    ee40:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
    ee44:	80e3      	strh	r3, [r4, #6]
		bt_mesh_model_recv(rx, &sdu);
    ee46:	4620      	mov	r0, r4
    ee48:	f000 fd2e 	bl	f8a8 <bt_mesh_model_recv>
		return 0;
    ee4c:	2700      	movs	r7, #0
		return sdu_recv_unseg(rx, hdr, buf);
    ee4e:	e5a8      	b.n	e9a2 <bt_mesh_trans_recv+0x3aa>
			return 0;
    ee50:	4607      	mov	r7, r0
    ee52:	e400      	b.n	e656 <bt_mesh_trans_recv+0x5e>
		struct seg_rx *rx = &seg_rx[i];
    ee54:	4655      	mov	r5, sl
		if (rx->seq_auth > *seq_auth) {
    ee56:	4561      	cmp	r1, ip
    ee58:	bf08      	it	eq
    ee5a:	4558      	cmpeq	r0, fp
    ee5c:	f4bf acb3 	bcs.w	e7c6 <bt_mesh_trans_recv+0x1ce>
    ee60:	4908      	ldr	r1, [pc, #32]	; (ee84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x424>)
    ee62:	4b07      	ldr	r3, [pc, #28]	; (ee80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x420>)
			BT_WARN("Ignoring old SeqAuth");
    ee64:	480f      	ldr	r0, [pc, #60]	; (eea4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x444>)
    ee66:	1ac9      	subs	r1, r1, r3
    ee68:	08c9      	lsrs	r1, r1, #3
    ee6a:	0189      	lsls	r1, r1, #6
    ee6c:	f041 0102 	orr.w	r1, r1, #2
	BT_WARN("No matching AppKey");
    ee70:	f014 fa9c 	bl	233ac <log_0>
    ee74:	e415      	b.n	e6a2 <bt_mesh_trans_recv+0xaa>
		struct seg_rx *rx = &seg_rx[i];
    ee76:	4d0c      	ldr	r5, [pc, #48]	; (eea8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x448>)
	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
    ee78:	2301      	movs	r3, #1
    ee7a:	e7ec      	b.n	ee56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3f6>
    ee7c:	20006b4c 	.word	0x20006b4c
    ee80:	00028868 	.word	0x00028868
    ee84:	000289c0 	.word	0x000289c0
    ee88:	0002c5c8 	.word	0x0002c5c8
    ee8c:	20006b5c 	.word	0x20006b5c
    ee90:	20006b84 	.word	0x20006b84
    ee94:	0002c5ec 	.word	0x0002c5ec
    ee98:	20006ab8 	.word	0x20006ab8
    ee9c:	0002c5ff 	.word	0x0002c5ff
    eea0:	0002c5b4 	.word	0x0002c5b4
    eea4:	0002c46e 	.word	0x0002c46e
    eea8:	20000050 	.word	0x20000050

0000eeac <bt_mesh_rx_reset>:

void bt_mesh_rx_reset(void)
{
    eeac:	b510      	push	{r4, lr}
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		seg_rx_reset(&seg_rx[i], true);
    eeae:	4c07      	ldr	r4, [pc, #28]	; (eecc <bt_mesh_rx_reset+0x20>)
    eeb0:	2101      	movs	r1, #1
    eeb2:	4620      	mov	r0, r4
    eeb4:	f7fe fd8e 	bl	d9d4 <seg_rx_reset>
    eeb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
    eebc:	2101      	movs	r1, #1
    eebe:	f7fe fd89 	bl	d9d4 <seg_rx_reset>
	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_clear_rpl();
	} else {
		(void)memset(bt_mesh.rpl, 0, sizeof(bt_mesh.rpl));
	}
}
    eec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_clear_rpl();
    eec6:	f018 b83c 	b.w	26f42 <bt_mesh_clear_rpl>
    eeca:	bf00      	nop
    eecc:	20000000 	.word	0x20000000

0000eed0 <bt_mesh_tx_reset>:

void bt_mesh_tx_reset(void)
{
    eed0:	b510      	push	{r4, lr}
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		seg_tx_reset(&seg_tx[i]);
    eed2:	4c05      	ldr	r4, [pc, #20]	; (eee8 <bt_mesh_tx_reset+0x18>)
    eed4:	4620      	mov	r0, r4
    eed6:	f7fe fded 	bl	dab4 <seg_tx_reset>
    eeda:	f104 0050 	add.w	r0, r4, #80	; 0x50
	}
}
    eede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		seg_tx_reset(&seg_tx[i]);
    eee2:	f7fe bde7 	b.w	dab4 <seg_tx_reset>
    eee6:	bf00      	nop
    eee8:	200000a0 	.word	0x200000a0

0000eeec <bt_mesh_trans_init>:

void bt_mesh_trans_init(void)
{
    eeec:	b538      	push	{r3, r4, r5, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		k_delayed_work_init(&seg_tx[i].retransmit, seg_retransmit);
    eeee:	4d0d      	ldr	r5, [pc, #52]	; (ef24 <bt_mesh_trans_init+0x38>)
    eef0:	4c0d      	ldr	r4, [pc, #52]	; (ef28 <bt_mesh_trans_init+0x3c>)
    eef2:	4629      	mov	r1, r5
    eef4:	f104 0030 	add.w	r0, r4, #48	; 0x30
    eef8:	f019 fac6 	bl	28488 <k_delayed_work_init>
    eefc:	4629      	mov	r1, r5
    eefe:	f104 0080 	add.w	r0, r4, #128	; 0x80
	}

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    ef02:	4d0a      	ldr	r5, [pc, #40]	; (ef2c <bt_mesh_trans_init+0x40>)
    ef04:	4c0a      	ldr	r4, [pc, #40]	; (ef30 <bt_mesh_trans_init+0x44>)
		k_delayed_work_init(&seg_tx[i].retransmit, seg_retransmit);
    ef06:	f019 fabf 	bl	28488 <k_delayed_work_init>
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    ef0a:	4629      	mov	r1, r5
    ef0c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ef10:	f019 faba 	bl	28488 <k_delayed_work_init>
    ef14:	4629      	mov	r1, r5
    ef16:	f104 007c 	add.w	r0, r4, #124	; 0x7c
	}
}
    ef1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    ef1e:	f019 bab3 	b.w	28488 <k_delayed_work_init>
    ef22:	bf00      	nop
    ef24:	00026537 	.word	0x00026537
    ef28:	200000a0 	.word	0x200000a0
    ef2c:	0000e559 	.word	0x0000e559
    ef30:	20000000 	.word	0x20000000

0000ef34 <bt_mesh_heartbeat_send>:
	BT_DBG("");
	(void)memset(bt_mesh.rpl, 0, sizeof(bt_mesh.rpl));
}

void bt_mesh_heartbeat_send(void)
{
    ef34:	b510      	push	{r4, lr}
    ef36:	b08a      	sub	sp, #40	; 0x28
	struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
    ef38:	f003 fb36 	bl	125a8 <bt_mesh_cfg_get>
    ef3c:	4604      	mov	r4, r0
	u16_t feat = 0U;
	struct __packed {
		u8_t  init_ttl;
		u16_t feat;
	} hb;
	struct bt_mesh_msg_ctx ctx = {
    ef3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef42:	f8ad 2012 	strh.w	r2, [sp, #18]
    ef46:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
		.net_idx = cfg->hb_pub.net_idx,
    ef48:	8e80      	ldrh	r0, [r0, #52]	; 0x34
	struct bt_mesh_msg_ctx ctx = {
    ef4a:	f8ad 2014 	strh.w	r2, [sp, #20]
    ef4e:	2300      	movs	r3, #0
    ef50:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    ef54:	f88d 201b 	strb.w	r2, [sp, #27]
		.app_idx = BT_MESH_KEY_UNUSED,
		.addr = cfg->hb_pub.dst,
		.send_ttl = cfg->hb_pub.ttl,
	};
	struct bt_mesh_net_tx tx = {
    ef58:	e9cd 3307 	strd	r3, r3, [sp, #28]
	struct bt_mesh_msg_ctx ctx = {
    ef5c:	f8cd 3016 	str.w	r3, [sp, #22]
    ef60:	f88d 301a 	strb.w	r3, [sp, #26]
	struct bt_mesh_net_tx tx = {
    ef64:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
    ef66:	f8ad 0010 	strh.w	r0, [sp, #16]
		.sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx),
    ef6a:	f7fd fbfb 	bl	c764 <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
    ef6e:	ab04      	add	r3, sp, #16
    ef70:	9007      	str	r0, [sp, #28]
		.ctx = &ctx,
		.src = bt_mesh_model_elem(cfg->model)->addr,
    ef72:	6820      	ldr	r0, [r4, #0]
	struct bt_mesh_net_tx tx = {
    ef74:	9308      	str	r3, [sp, #32]
		.src = bt_mesh_model_elem(cfg->model)->addr,
    ef76:	f000 fbbb 	bl	f6f0 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
    ef7a:	8803      	ldrh	r3, [r0, #0]
    ef7c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
    ef80:	f002 ffe0 	bl	11f44 <bt_mesh_net_transmit_get>
	};

	/* Do nothing if heartbeat publication is not enabled */
	if (cfg->hb_pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    ef84:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
	struct bt_mesh_net_tx tx = {
    ef86:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	if (cfg->hb_pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    ef8a:	b33b      	cbz	r3, efdc <bt_mesh_heartbeat_send+0xa8>
		return;
	}

	hb.init_ttl = cfg->hb_pub.ttl;
    ef8c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    ef90:	f88d 300c 	strb.w	r3, [sp, #12]

	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
    ef94:	f003 f852 	bl	1203c <bt_mesh_relay_get>
	u16_t feat = 0U;
    ef98:	1e42      	subs	r2, r0, #1
    ef9a:	4254      	negs	r4, r2
    ef9c:	4154      	adcs	r4, r2
		feat |= BT_MESH_FEAT_RELAY;
	}

	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    ef9e:	f003 f99d 	bl	122dc <bt_mesh_gatt_proxy_get>
    efa2:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
    efa4:	bf08      	it	eq
    efa6:	f044 0402 	orreq.w	r4, r4, #2
	}

	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
    efaa:	f003 f851 	bl	12050 <bt_mesh_friend_get>
    efae:	4b0c      	ldr	r3, [pc, #48]	; (efe0 <bt_mesh_heartbeat_send+0xac>)
    efb0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    efb4:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_FRIEND;
    efb6:	bf08      	it	eq
    efb8:	f044 0404 	orreq.w	r4, r4, #4
	}

	if (bt_mesh_lpn_established()) {
    efbc:	06db      	lsls	r3, r3, #27
		feat |= BT_MESH_FEAT_LOW_POWER;
    efbe:	bf48      	it	mi
    efc0:	f044 0408 	orrmi.w	r4, r4, #8

	hb.feat = sys_cpu_to_be16(feat);

	BT_DBG("InitTTL %u feat 0x%04x", cfg->hb_pub.ttl, feat);

	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    efc4:	2300      	movs	r3, #0
    efc6:	e9cd 3300 	strd	r3, r3, [sp]
	hb.feat = sys_cpu_to_be16(feat);
    efca:	0224      	lsls	r4, r4, #8
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    efcc:	2303      	movs	r3, #3
    efce:	aa03      	add	r2, sp, #12
    efd0:	210a      	movs	r1, #10
    efd2:	a807      	add	r0, sp, #28
	hb.feat = sys_cpu_to_be16(feat);
    efd4:	f8ad 400d 	strh.w	r4, [sp, #13]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    efd8:	f017 fab0 	bl	2653c <bt_mesh_ctl_send>
			 NULL, NULL);
}
    efdc:	b00a      	add	sp, #40	; 0x28
    efde:	bd10      	pop	{r4, pc}
    efe0:	20006ab8 	.word	0x20006ab8

0000efe4 <bt_mesh_app_key_get>:

int bt_mesh_app_key_get(const struct bt_mesh_subnet *subnet, u16_t app_idx,
			u16_t addr, const u8_t **key, u8_t *aid)
{
    efe4:	b570      	push	{r4, r5, r6, lr}
    efe6:	461c      	mov	r4, r3
	struct bt_mesh_app_key *app_key;

	if (app_idx == BT_MESH_KEY_DEV_LOCAL ||
    efe8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    efec:	4299      	cmp	r1, r3
{
    efee:	4605      	mov	r5, r0
    eff0:	9e04      	ldr	r6, [sp, #16]
    eff2:	4610      	mov	r0, r2
	if (app_idx == BT_MESH_KEY_DEV_LOCAL ||
    eff4:	d104      	bne.n	f000 <bt_mesh_app_key_get+0x1c>
	    (app_idx == BT_MESH_KEY_DEV_REMOTE &&
	     bt_mesh_elem_find(addr) != NULL)) {
		*aid = 0;
		*key = bt_mesh.dev_key;
    eff6:	4b15      	ldr	r3, [pc, #84]	; (f04c <bt_mesh_app_key_get+0x68>)
		*aid = 0;
    eff8:	2000      	movs	r0, #0
    effa:	7030      	strb	r0, [r6, #0]
		*key = bt_mesh.dev_key;
    effc:	6023      	str	r3, [r4, #0]
		*key = app_key->keys[0].val;
		*aid = app_key->keys[0].id;
	}

	return 0;
}
    effe:	bd70      	pop	{r4, r5, r6, pc}
	if (app_idx == BT_MESH_KEY_DEV_LOCAL ||
    f000:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    f004:	4299      	cmp	r1, r3
    f006:	d10d      	bne.n	f024 <bt_mesh_app_key_get+0x40>
	     bt_mesh_elem_find(addr) != NULL)) {
    f008:	f000 fbfa 	bl	f800 <bt_mesh_elem_find>
	    (app_idx == BT_MESH_KEY_DEV_REMOTE &&
    f00c:	2800      	cmp	r0, #0
    f00e:	d1f2      	bne.n	eff6 <bt_mesh_app_key_get+0x12>
			return -EINVAL;
    f010:	f06f 0015 	mvn.w	r0, #21
    f014:	e7f3      	b.n	effe <bt_mesh_app_key_get+0x1a>
		*key = app_key->keys[0].val;
    f016:	1d83      	adds	r3, r0, #6
    f018:	6023      	str	r3, [r4, #0]
		*aid = app_key->keys[0].id;
    f01a:	7943      	ldrb	r3, [r0, #5]
    f01c:	e013      	b.n	f046 <bt_mesh_app_key_get+0x62>
		return -ENOENT;
    f01e:	f06f 0001 	mvn.w	r0, #1
    f022:	e7ec      	b.n	effe <bt_mesh_app_key_get+0x1a>
	if (!subnet) {
    f024:	2d00      	cmp	r5, #0
    f026:	d0f3      	beq.n	f010 <bt_mesh_app_key_get+0x2c>
	app_key = bt_mesh_app_key_find(app_idx);
    f028:	4608      	mov	r0, r1
    f02a:	f7ff fa0f 	bl	e44c <bt_mesh_app_key_find>
	if (!app_key) {
    f02e:	2800      	cmp	r0, #0
    f030:	d0f5      	beq.n	f01e <bt_mesh_app_key_get+0x3a>
	if (subnet->kr_phase == BT_MESH_KR_PHASE_2 && app_key->updated) {
    f032:	7feb      	ldrb	r3, [r5, #31]
    f034:	2b02      	cmp	r3, #2
    f036:	d1ee      	bne.n	f016 <bt_mesh_app_key_get+0x32>
    f038:	7903      	ldrb	r3, [r0, #4]
    f03a:	2b00      	cmp	r3, #0
    f03c:	d0eb      	beq.n	f016 <bt_mesh_app_key_get+0x32>
		*key = app_key->keys[1].val;
    f03e:	f100 0317 	add.w	r3, r0, #23
    f042:	6023      	str	r3, [r4, #0]
		*aid = app_key->keys[1].id;
    f044:	7d83      	ldrb	r3, [r0, #22]
		*aid = app_key->keys[0].id;
    f046:	7033      	strb	r3, [r6, #0]
	return 0;
    f048:	2000      	movs	r0, #0
    f04a:	e7d8      	b.n	effe <bt_mesh_app_key_get+0x1a>
    f04c:	20006b4c 	.word	0x20006b4c

0000f050 <bt_mesh_trans_send>:
{
    f050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f054:	460d      	mov	r5, r1
	if (msg->len < 1) {
    f056:	8889      	ldrh	r1, [r1, #4]
{
    f058:	b088      	sub	sp, #32
    f05a:	4604      	mov	r4, r0
    f05c:	4616      	mov	r6, r2
    f05e:	461f      	mov	r7, r3
	if (msg->len < 1) {
    f060:	b961      	cbnz	r1, f07c <bt_mesh_trans_send+0x2c>
    f062:	494c      	ldr	r1, [pc, #304]	; (f194 <bt_mesh_trans_send+0x144>)
    f064:	4b4c      	ldr	r3, [pc, #304]	; (f198 <bt_mesh_trans_send+0x148>)
		BT_ERR("Zero-length SDU not allowed");
    f066:	484d      	ldr	r0, [pc, #308]	; (f19c <bt_mesh_trans_send+0x14c>)
    f068:	1ac9      	subs	r1, r1, r3
    f06a:	08c9      	lsrs	r1, r1, #3
    f06c:	0189      	lsls	r1, r1, #6
    f06e:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Insufficient tailroom for Transport MIC");
    f072:	f014 f99b 	bl	233ac <log_0>
		return -EINVAL;
    f076:	f06f 0015 	mvn.w	r0, #21
    f07a:	e00d      	b.n	f098 <bt_mesh_trans_send+0x48>
	if (msg->len > BT_MESH_TX_SDU_MAX) {
    f07c:	2924      	cmp	r1, #36	; 0x24
    f07e:	d90e      	bls.n	f09e <bt_mesh_trans_send+0x4e>
    f080:	4b45      	ldr	r3, [pc, #276]	; (f198 <bt_mesh_trans_send+0x148>)
    f082:	4a44      	ldr	r2, [pc, #272]	; (f194 <bt_mesh_trans_send+0x144>)
		BT_ERR("Not enough segment buffers for length %u", msg->len);
    f084:	4846      	ldr	r0, [pc, #280]	; (f1a0 <bt_mesh_trans_send+0x150>)
    f086:	1ad2      	subs	r2, r2, r3
    f088:	08d2      	lsrs	r2, r2, #3
    f08a:	0192      	lsls	r2, r2, #6
    f08c:	f042 0201 	orr.w	r2, r2, #1
    f090:	f014 f999 	bl	233c6 <log_1>
		return -EMSGSIZE;
    f094:	f06f 0023 	mvn.w	r0, #35	; 0x23
}
    f098:	b008      	add	sp, #32
    f09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (net_buf_simple_tailroom(msg) < 4) {
    f09e:	4628      	mov	r0, r5
    f0a0:	f018 ff1c 	bl	27edc <net_buf_simple_tailroom>
    f0a4:	2803      	cmp	r0, #3
    f0a6:	d808      	bhi.n	f0ba <bt_mesh_trans_send+0x6a>
    f0a8:	493a      	ldr	r1, [pc, #232]	; (f194 <bt_mesh_trans_send+0x144>)
    f0aa:	4b3b      	ldr	r3, [pc, #236]	; (f198 <bt_mesh_trans_send+0x148>)
		BT_ERR("Insufficient tailroom for Transport MIC");
    f0ac:	483d      	ldr	r0, [pc, #244]	; (f1a4 <bt_mesh_trans_send+0x154>)
    f0ae:	1ac9      	subs	r1, r1, r3
    f0b0:	08c9      	lsrs	r1, r1, #3
    f0b2:	0189      	lsls	r1, r1, #6
    f0b4:	f041 0101 	orr.w	r1, r1, #1
    f0b8:	e7db      	b.n	f072 <bt_mesh_trans_send+0x22>
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
    f0ba:	88aa      	ldrh	r2, [r5, #4]
    f0bc:	6863      	ldr	r3, [r4, #4]
	err = bt_mesh_app_key_get(tx->sub, tx->ctx->app_idx,
    f0be:	6820      	ldr	r0, [r4, #0]
    f0c0:	8859      	ldrh	r1, [r3, #2]
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
    f0c2:	2a0b      	cmp	r2, #11
		tx->ctx->send_rel = true;
    f0c4:	bf84      	itt	hi
    f0c6:	2201      	movhi	r2, #1
    f0c8:	729a      	strbhi	r2, [r3, #10]
	err = bt_mesh_app_key_get(tx->sub, tx->ctx->app_idx,
    f0ca:	889a      	ldrh	r2, [r3, #4]
    f0cc:	f10d 031b 	add.w	r3, sp, #27
    f0d0:	9300      	str	r3, [sp, #0]
    f0d2:	ab07      	add	r3, sp, #28
    f0d4:	f7ff ff86 	bl	efe4 <bt_mesh_app_key_get>
	if (err) {
    f0d8:	2800      	cmp	r0, #0
    f0da:	d1dd      	bne.n	f098 <bt_mesh_trans_send+0x48>
	tx->aid = aid;
    f0dc:	7ae3      	ldrb	r3, [r4, #11]
    f0de:	f89d 201b 	ldrb.w	r2, [sp, #27]
    f0e2:	f362 0387 	bfi	r3, r2, #2, #6
    f0e6:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
    f0e8:	6863      	ldr	r3, [r4, #4]
    f0ea:	7a98      	ldrb	r0, [r3, #10]
    f0ec:	b130      	cbz	r0, f0fc <bt_mesh_trans_send+0xac>
    f0ee:	4628      	mov	r0, r5
    f0f0:	f018 fef4 	bl	27edc <net_buf_simple_tailroom>
    f0f4:	2807      	cmp	r0, #7
    f0f6:	bf94      	ite	ls
    f0f8:	2000      	movls	r0, #0
    f0fa:	2001      	movhi	r0, #1
    f0fc:	7ae3      	ldrb	r3, [r4, #11]
    f0fe:	f360 0341 	bfi	r3, r0, #1, #1
    f102:	72e3      	strb	r3, [r4, #11]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
    f104:	6863      	ldr	r3, [r4, #4]
    f106:	8898      	ldrh	r0, [r3, #4]
    f108:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    f10c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    f110:	d236      	bcs.n	f180 <bt_mesh_trans_send+0x130>
		ad = bt_mesh_label_uuid_get(tx->ctx->addr);
    f112:	f003 f9ef 	bl	124f4 <bt_mesh_label_uuid_get>
    f116:	4603      	mov	r3, r0
	err = bt_mesh_app_encrypt(key, BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    f118:	6862      	ldr	r2, [r4, #4]
    f11a:	f8df c08c 	ldr.w	ip, [pc, #140]	; f1a8 <bt_mesh_trans_send+0x158>
    f11e:	8851      	ldrh	r1, [r2, #2]
    f120:	f8b2 9004 	ldrh.w	r9, [r2, #4]
				  tx->aszmic, msg, ad, tx->src, tx->ctx->addr,
    f124:	f894 e00b 	ldrb.w	lr, [r4, #11]
	err = bt_mesh_app_encrypt(key, BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    f128:	f8b4 8008 	ldrh.w	r8, [r4, #8]
    f12c:	9807      	ldr	r0, [sp, #28]
				  bt_mesh.seq, BT_MESH_NET_IVI_TX);
    f12e:	e9dc 2a00 	ldrd	r2, sl, [ip]
    f132:	f3bf 8f5b 	dmb	ish
    f136:	f8dc c008 	ldr.w	ip, [ip, #8]
    f13a:	f3bf 8f5b 	dmb	ish
	err = bt_mesh_app_encrypt(key, BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    f13e:	3103      	adds	r1, #3
    f140:	b289      	uxth	r1, r1
				  bt_mesh.seq, BT_MESH_NET_IVI_TX);
    f142:	f3cc 0c80 	ubfx	ip, ip, #2, #1
	err = bt_mesh_app_encrypt(key, BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    f146:	2901      	cmp	r1, #1
    f148:	eba2 020c 	sub.w	r2, r2, ip
    f14c:	e9cd a203 	strd	sl, r2, [sp, #12]
    f150:	9300      	str	r3, [sp, #0]
    f152:	bf8c      	ite	hi
    f154:	2100      	movhi	r1, #0
    f156:	2101      	movls	r1, #1
    f158:	e9cd 8901 	strd	r8, r9, [sp, #4]
    f15c:	462b      	mov	r3, r5
    f15e:	f3ce 0240 	ubfx	r2, lr, #1, #1
    f162:	f017 fb1b 	bl	2679c <bt_mesh_app_encrypt>
	if (err) {
    f166:	2800      	cmp	r0, #0
    f168:	d196      	bne.n	f098 <bt_mesh_trans_send+0x48>
	if (tx->ctx->send_rel) {
    f16a:	6863      	ldr	r3, [r4, #4]
    f16c:	7a9b      	ldrb	r3, [r3, #10]
		err = send_seg(tx, msg, cb, cb_data, NULL);
    f16e:	9000      	str	r0, [sp, #0]
	if (tx->ctx->send_rel) {
    f170:	b143      	cbz	r3, f184 <bt_mesh_trans_send+0x134>
		err = send_seg(tx, msg, cb, cb_data, NULL);
    f172:	463b      	mov	r3, r7
    f174:	4632      	mov	r2, r6
    f176:	4629      	mov	r1, r5
    f178:	4620      	mov	r0, r4
    f17a:	f7fe ffe9 	bl	e150 <send_seg>
    f17e:	e78b      	b.n	f098 <bt_mesh_trans_send+0x48>
		ad = NULL;
    f180:	2300      	movs	r3, #0
    f182:	e7c9      	b.n	f118 <bt_mesh_trans_send+0xc8>
		err = send_unseg(tx, msg, cb, cb_data, NULL);
    f184:	463b      	mov	r3, r7
    f186:	4632      	mov	r2, r6
    f188:	4629      	mov	r1, r5
    f18a:	4620      	mov	r0, r4
    f18c:	f7fe fbd6 	bl	d93c <send_unseg>
    f190:	e782      	b.n	f098 <bt_mesh_trans_send+0x48>
    f192:	bf00      	nop
    f194:	000289c0 	.word	0x000289c0
    f198:	00028868 	.word	0x00028868
    f19c:	0002c619 	.word	0x0002c619
    f1a0:	0002c635 	.word	0x0002c635
    f1a4:	0002c65e 	.word	0x0002c65e
    f1a8:	20006ab8 	.word	0x20006ab8

0000f1ac <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const u8_t n[16], const u8_t *p, size_t p_len,
	       u8_t net_id[1], u8_t enc_key[16], u8_t priv_key[16])
{
    f1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1ae:	b095      	sub	sp, #84	; 0x54
    f1b0:	4604      	mov	r4, r0
    f1b2:	460f      	mov	r7, r1
	int err;

	BT_DBG("n %s", bt_hex(n, 16));
	BT_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
    f1b4:	4828      	ldr	r0, [pc, #160]	; (f258 <bt_mesh_k2+0xac>)
    f1b6:	a902      	add	r1, sp, #8
{
    f1b8:	4615      	mov	r5, r2
    f1ba:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
    f1bc:	f017 fa1c 	bl	265f8 <bt_mesh_s1>
	if (err) {
    f1c0:	2800      	cmp	r0, #0
    f1c2:	d146      	bne.n	f252 <bt_mesh_k2+0xa6>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
    f1c4:	4621      	mov	r1, r4
    f1c6:	ab0a      	add	r3, sp, #40	; 0x28
    f1c8:	2210      	movs	r2, #16
    f1ca:	a802      	add	r0, sp, #8
    f1cc:	f017 fa0a 	bl	265e4 <bt_mesh_aes_cmac_one>
	if (err) {
    f1d0:	4604      	mov	r4, r0
    f1d2:	2800      	cmp	r0, #0
    f1d4:	d13a      	bne.n	f24c <bt_mesh_k2+0xa0>
		return err;
	}

	pad = 0x01;
    f1d6:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
    f1d8:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
	sg[2].data = &pad;
    f1dc:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    f1e0:	ad06      	add	r5, sp, #24
	sg[2].len  = sizeof(pad);
    f1e2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	sg[0].len  = 0;
    f1e6:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	pad = 0x01;
    f1ea:	f88d 3007 	strb.w	r3, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    f1ee:	2203      	movs	r2, #3
    f1f0:	462b      	mov	r3, r5
    f1f2:	a90e      	add	r1, sp, #56	; 0x38
    f1f4:	a80a      	add	r0, sp, #40	; 0x28
    f1f6:	f017 f9d3 	bl	265a0 <bt_mesh_aes_cmac>
	if (err) {
    f1fa:	4604      	mov	r4, r0
    f1fc:	bb30      	cbnz	r0, f24c <bt_mesh_k2+0xa0>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
    f1fe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
    f202:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
    f204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f208:	7033      	strb	r3, [r6, #0]
	sg[0].len  = sizeof(out);
	pad = 0x02;
    f20a:	2302      	movs	r3, #2
    f20c:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
    f210:	2610      	movs	r6, #16

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    f212:	462b      	mov	r3, r5
    f214:	2203      	movs	r2, #3
    f216:	a90e      	add	r1, sp, #56	; 0x38
    f218:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
    f21a:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    f21c:	f017 f9c0 	bl	265a0 <bt_mesh_aes_cmac>
	if (err) {
    f220:	4604      	mov	r4, r0
    f222:	b998      	cbnz	r0, f24c <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(enc_key, out, 16);
    f224:	4632      	mov	r2, r6
    f226:	4629      	mov	r1, r5
    f228:	981a      	ldr	r0, [sp, #104]	; 0x68
    f22a:	f015 ff31 	bl	25090 <memcpy>

	pad = 0x03;
    f22e:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    f230:	462b      	mov	r3, r5
    f232:	a90e      	add	r1, sp, #56	; 0x38
    f234:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
    f236:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    f23a:	f017 f9b1 	bl	265a0 <bt_mesh_aes_cmac>
	if (err) {
    f23e:	4604      	mov	r4, r0
    f240:	b920      	cbnz	r0, f24c <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(priv_key, out, 16);
    f242:	981b      	ldr	r0, [sp, #108]	; 0x6c
    f244:	4632      	mov	r2, r6
    f246:	4629      	mov	r1, r5
    f248:	f015 ff22 	bl	25090 <memcpy>

	BT_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	BT_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
    f24c:	4620      	mov	r0, r4
    f24e:	b015      	add	sp, #84	; 0x54
    f250:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return err;
    f252:	2401      	movs	r4, #1
    f254:	e7fa      	b.n	f24c <bt_mesh_k2+0xa0>
    f256:	bf00      	nop
    f258:	0002c698 	.word	0x0002c698

0000f25c <bt_mesh_k3>:

int bt_mesh_k3(const u8_t n[16], u8_t out[8])
{
    f25c:	b530      	push	{r4, r5, lr}
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    f25e:	4b14      	ldr	r3, [pc, #80]	; (f2b0 <bt_mesh_k3+0x54>)
{
    f260:	b08b      	sub	sp, #44	; 0x2c
    f262:	4604      	mov	r4, r0
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    f264:	6818      	ldr	r0, [r3, #0]
    f266:	9000      	str	r0, [sp, #0]
    f268:	791b      	ldrb	r3, [r3, #4]
	u8_t tmp[16];
	u8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
    f26a:	4812      	ldr	r0, [pc, #72]	; (f2b4 <bt_mesh_k3+0x58>)
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    f26c:	f88d 3004 	strb.w	r3, [sp, #4]
{
    f270:	460d      	mov	r5, r1
	err = bt_mesh_s1("smk3", tmp);
    f272:	a902      	add	r1, sp, #8
    f274:	f017 f9c0 	bl	265f8 <bt_mesh_s1>
	if (err) {
    f278:	b9b8      	cbnz	r0, f2aa <bt_mesh_k3+0x4e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    f27a:	4621      	mov	r1, r4
    f27c:	ab06      	add	r3, sp, #24
    f27e:	2210      	movs	r2, #16
    f280:	a802      	add	r0, sp, #8
    f282:	f017 f9af 	bl	265e4 <bt_mesh_aes_cmac_one>
	if (err) {
    f286:	4604      	mov	r4, r0
    f288:	b960      	cbnz	r0, f2a4 <bt_mesh_k3+0x48>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
    f28a:	ab02      	add	r3, sp, #8
    f28c:	2205      	movs	r2, #5
    f28e:	4669      	mov	r1, sp
    f290:	a806      	add	r0, sp, #24
    f292:	f017 f9a7 	bl	265e4 <bt_mesh_aes_cmac_one>
	if (err) {
    f296:	4604      	mov	r4, r0
    f298:	b920      	cbnz	r0, f2a4 <bt_mesh_k3+0x48>
		return err;
	}

	memcpy(out, tmp + 8, 8);
    f29a:	2208      	movs	r2, #8
    f29c:	a904      	add	r1, sp, #16
    f29e:	4628      	mov	r0, r5
    f2a0:	f015 fef6 	bl	25090 <memcpy>

	return 0;
}
    f2a4:	4620      	mov	r0, r4
    f2a6:	b00b      	add	sp, #44	; 0x2c
    f2a8:	bd30      	pop	{r4, r5, pc}
		return err;
    f2aa:	2401      	movs	r4, #1
    f2ac:	e7fa      	b.n	f2a4 <bt_mesh_k3+0x48>
    f2ae:	bf00      	nop
    f2b0:	0002c6a2 	.word	0x0002c6a2
    f2b4:	0002c69d 	.word	0x0002c69d

0000f2b8 <bt_mesh_k4>:

int bt_mesh_k4(const u8_t n[16], u8_t out[1])
{
    f2b8:	b530      	push	{r4, r5, lr}
    f2ba:	b08b      	sub	sp, #44	; 0x2c
	u8_t id6[] = { 'i', 'd', '6', 0x01 };
    f2bc:	4b10      	ldr	r3, [pc, #64]	; (f300 <bt_mesh_k4+0x48>)
    f2be:	9301      	str	r3, [sp, #4]
{
    f2c0:	4605      	mov	r5, r0
    f2c2:	460c      	mov	r4, r1
	u8_t tmp[16];
	u8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
    f2c4:	480f      	ldr	r0, [pc, #60]	; (f304 <bt_mesh_k4+0x4c>)
    f2c6:	a902      	add	r1, sp, #8
    f2c8:	f017 f996 	bl	265f8 <bt_mesh_s1>
	if (err) {
    f2cc:	b9a8      	cbnz	r0, f2fa <bt_mesh_k4+0x42>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    f2ce:	ab06      	add	r3, sp, #24
    f2d0:	2210      	movs	r2, #16
    f2d2:	4629      	mov	r1, r5
    f2d4:	a802      	add	r0, sp, #8
    f2d6:	f017 f985 	bl	265e4 <bt_mesh_aes_cmac_one>
	if (err) {
    f2da:	b960      	cbnz	r0, f2f6 <bt_mesh_k4+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
    f2dc:	2204      	movs	r2, #4
    f2de:	ab02      	add	r3, sp, #8
    f2e0:	eb0d 0102 	add.w	r1, sp, r2
    f2e4:	a806      	add	r0, sp, #24
    f2e6:	f017 f97d 	bl	265e4 <bt_mesh_aes_cmac_one>
	if (err) {
    f2ea:	b920      	cbnz	r0, f2f6 <bt_mesh_k4+0x3e>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
    f2ec:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f2f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f2f4:	7023      	strb	r3, [r4, #0]

	return 0;
}
    f2f6:	b00b      	add	sp, #44	; 0x2c
    f2f8:	bd30      	pop	{r4, r5, pc}
		return err;
    f2fa:	2001      	movs	r0, #1
    f2fc:	e7fb      	b.n	f2f6 <bt_mesh_k4+0x3e>
    f2fe:	bf00      	nop
    f300:	01366469 	.word	0x01366469
    f304:	0002c6a8 	.word	0x0002c6a8

0000f308 <bt_mesh_id128>:

int bt_mesh_id128(const u8_t n[16], const char *s, u8_t out[16])
{
    f308:	b530      	push	{r4, r5, lr}
    f30a:	b087      	sub	sp, #28
    f30c:	4604      	mov	r4, r0
    f30e:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	u8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
    f310:	a902      	add	r1, sp, #8
{
    f312:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
    f314:	f017 f970 	bl	265f8 <bt_mesh_s1>
	if (err) {
    f318:	b940      	cbnz	r0, f32c <bt_mesh_id128+0x24>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
    f31a:	4b05      	ldr	r3, [pc, #20]	; (f330 <bt_mesh_id128+0x28>)
    f31c:	9500      	str	r5, [sp, #0]
    f31e:	aa02      	add	r2, sp, #8
    f320:	2110      	movs	r1, #16
    f322:	4620      	mov	r0, r4
    f324:	f017 f97e 	bl	26624 <bt_mesh_k1>
}
    f328:	b007      	add	sp, #28
    f32a:	bd30      	pop	{r4, r5, pc}
		return err;
    f32c:	2001      	movs	r0, #1
    f32e:	e7fb      	b.n	f328 <bt_mesh_id128+0x20>
    f330:	0002c6ad 	.word	0x0002c6ad

0000f334 <bt_mesh_net_obfuscate>:
	sys_put_be32(iv_index, &nonce[9]);
}

int bt_mesh_net_obfuscate(u8_t *pdu, u32_t iv_index,
			  const u8_t privacy_key[16])
{
    f334:	b570      	push	{r4, r5, r6, lr}
	u8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    f336:	4b18      	ldr	r3, [pc, #96]	; (f398 <bt_mesh_net_obfuscate+0x64>)
{
    f338:	b088      	sub	sp, #32
    f33a:	4604      	mov	r4, r0
    f33c:	460e      	mov	r6, r1
	u8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    f33e:	6818      	ldr	r0, [r3, #0]
    f340:	889b      	ldrh	r3, [r3, #4]
    f342:	9000      	str	r0, [sp, #0]
    f344:	f8ad 3004 	strh.w	r3, [sp, #4]
	u8_t tmp[16];
	int err, i;

	BT_DBG("IVIndex %u, PrivacyKey %s", iv_index, bt_hex(privacy_key, 16));

	sys_put_be32(iv_index, &priv_rand[5]);
    f348:	f10d 0105 	add.w	r1, sp, #5
	u8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    f34c:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &priv_rand[5]);
    f34e:	4630      	mov	r0, r6
{
    f350:	4615      	mov	r5, r2
	u8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    f352:	f8cd 3006 	str.w	r3, [sp, #6]
    f356:	f8cd 300a 	str.w	r3, [sp, #10]
    f35a:	f8ad 300e 	strh.w	r3, [sp, #14]
	sys_put_be32(iv_index, &priv_rand[5]);
    f35e:	f017 f916 	bl	2658e <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
    f362:	2207      	movs	r2, #7
    f364:	18a1      	adds	r1, r4, r2
    f366:	f10d 0009 	add.w	r0, sp, #9
    f36a:	f015 fe91 	bl	25090 <memcpy>

	BT_DBG("PrivacyRandom %s", bt_hex(priv_rand, 16));

	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
    f36e:	aa04      	add	r2, sp, #16
    f370:	4669      	mov	r1, sp
    f372:	4628      	mov	r0, r5
    f374:	f018 f8b0 	bl	274d8 <bt_encrypt_be>
	if (err) {
    f378:	b958      	cbnz	r0, f392 <bt_mesh_net_obfuscate+0x5e>
    f37a:	4623      	mov	r3, r4
    f37c:	aa04      	add	r2, sp, #16
    f37e:	3406      	adds	r4, #6
		return err;
	}

	for (i = 0; i < 6; i++) {
		pdu[1 + i] ^= tmp[i];
    f380:	f813 5f01 	ldrb.w	r5, [r3, #1]!
    f384:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
    f388:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
    f38a:	ea81 0105 	eor.w	r1, r1, r5
    f38e:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
    f390:	d1f6      	bne.n	f380 <bt_mesh_net_obfuscate+0x4c>
	}

	return 0;
}
    f392:	b008      	add	sp, #32
    f394:	bd70      	pop	{r4, r5, r6, pc}
    f396:	bf00      	nop
    f398:	00028acc 	.word	0x00028acc

0000f39c <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

u8_t bt_mesh_fcs_calc(const u8_t *data, u8_t data_len)
{
    f39c:	b510      	push	{r4, lr}
	u8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
    f39e:	4a06      	ldr	r2, [pc, #24]	; (f3b8 <bt_mesh_fcs_calc+0x1c>)
    f3a0:	4401      	add	r1, r0
	u8_t fcs = 0xff;
    f3a2:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    f3a4:	4288      	cmp	r0, r1
    f3a6:	d102      	bne.n	f3ae <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
    f3a8:	43d8      	mvns	r0, r3
}
    f3aa:	b2c0      	uxtb	r0, r0
    f3ac:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
    f3ae:	f810 4b01 	ldrb.w	r4, [r0], #1
    f3b2:	4063      	eors	r3, r4
    f3b4:	5cd3      	ldrb	r3, [r2, r3]
    f3b6:	e7f5      	b.n	f3a4 <bt_mesh_fcs_calc+0x8>
    f3b8:	0002c6cd 	.word	0x0002c6cd

0000f3bc <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, u8_t received_fcs)
{
    f3bc:	b530      	push	{r4, r5, lr}
	const u8_t *data = buf->data;
    f3be:	6804      	ldr	r4, [r0, #0]
	u16_t data_len = buf->len;
	u8_t fcs = 0xff;

	while (data_len--) {
    f3c0:	8880      	ldrh	r0, [r0, #4]
    f3c2:	4d08      	ldr	r5, [pc, #32]	; (f3e4 <bt_mesh_fcs_check+0x28>)
    f3c4:	4420      	add	r0, r4
	u8_t fcs = 0xff;
    f3c6:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    f3c8:	4284      	cmp	r4, r0
    f3ca:	d106      	bne.n	f3da <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
    f3cc:	404b      	eors	r3, r1
    f3ce:	5ce8      	ldrb	r0, [r5, r3]
}
    f3d0:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
    f3d4:	4258      	negs	r0, r3
    f3d6:	4158      	adcs	r0, r3
    f3d8:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
    f3da:	f814 2b01 	ldrb.w	r2, [r4], #1
    f3de:	405a      	eors	r2, r3
    f3e0:	5cab      	ldrb	r3, [r5, r2]
    f3e2:	e7f1      	b.n	f3c8 <bt_mesh_fcs_check+0xc>
    f3e4:	0002c6cd 	.word	0x0002c6cd

0000f3e8 <bt_mesh_virtual_addr>:

int bt_mesh_virtual_addr(const u8_t virtual_label[16], u16_t *addr)
{
    f3e8:	b530      	push	{r4, r5, lr}
    f3ea:	b089      	sub	sp, #36	; 0x24
    f3ec:	4605      	mov	r5, r0
    f3ee:	460c      	mov	r4, r1
	u8_t salt[16];
	u8_t tmp[16];
	int err;

	err = bt_mesh_s1("vtad", salt);
    f3f0:	480e      	ldr	r0, [pc, #56]	; (f42c <bt_mesh_virtual_addr+0x44>)
    f3f2:	4669      	mov	r1, sp
    f3f4:	f017 f900 	bl	265f8 <bt_mesh_s1>
	if (err) {
    f3f8:	b9a8      	cbnz	r0, f426 <bt_mesh_virtual_addr+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, virtual_label, 16, tmp);
    f3fa:	ab04      	add	r3, sp, #16
    f3fc:	2210      	movs	r2, #16
    f3fe:	4629      	mov	r1, r5
    f400:	4668      	mov	r0, sp
    f402:	f017 f8ef 	bl	265e4 <bt_mesh_aes_cmac_one>
	if (err) {
    f406:	b960      	cbnz	r0, f422 <bt_mesh_virtual_addr+0x3a>
	return ((u16_t)src[0] << 8) | src[1];
    f408:	f89d 201e 	ldrb.w	r2, [sp, #30]
    f40c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    f410:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return err;
	}

	*addr = (sys_get_be16(&tmp[14]) & 0x3fff) | 0x8000;
    f414:	f3c3 030d 	ubfx	r3, r3, #0, #14
    f418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    f41c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    f420:	8023      	strh	r3, [r4, #0]

	return 0;
}
    f422:	b009      	add	sp, #36	; 0x24
    f424:	bd30      	pop	{r4, r5, pc}
		return err;
    f426:	2001      	movs	r0, #1
    f428:	e7fb      	b.n	f422 <bt_mesh_virtual_addr+0x3a>
    f42a:	bf00      	nop
    f42c:	0002c6b4 	.word	0x0002c6b4

0000f430 <bt_mesh_prov_conf_key>:
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
}

int bt_mesh_prov_conf_key(const u8_t dhkey[32], const u8_t conf_salt[16],
			  u8_t conf_key[16])
{
    f430:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_k1(dhkey, 32, conf_salt, "prck", conf_key);
    f432:	4b04      	ldr	r3, [pc, #16]	; (f444 <bt_mesh_prov_conf_key+0x14>)
    f434:	9200      	str	r2, [sp, #0]
    f436:	460a      	mov	r2, r1
    f438:	2120      	movs	r1, #32
    f43a:	f017 f8f3 	bl	26624 <bt_mesh_k1>
}
    f43e:	b003      	add	sp, #12
    f440:	f85d fb04 	ldr.w	pc, [sp], #4
    f444:	0002c6b9 	.word	0x0002c6b9

0000f448 <mod_init>:
	}
}

static void mod_init(struct bt_mesh_model *mod, struct bt_mesh_elem *elem,
		     bool vnd, bool primary, void *user_data)
{
    f448:	b570      	push	{r4, r5, r6, lr}
    f44a:	4604      	mov	r4, r0
	int i;

	if (mod->pub) {
    f44c:	6880      	ldr	r0, [r0, #8]
{
    f44e:	460d      	mov	r5, r1
    f450:	4616      	mov	r6, r2
	if (mod->pub) {
    f452:	b120      	cbz	r0, f45e <mod_init+0x16>
		mod->pub->mod = mod;
    f454:	f840 4b18 	str.w	r4, [r0], #24
		k_delayed_work_init(&mod->pub->timer, mod_publish);
    f458:	490e      	ldr	r1, [pc, #56]	; (f494 <mod_init+0x4c>)
    f45a:	f019 f815 	bl	28488 <k_delayed_work_init>
	}

	for (i = 0; i < ARRAY_SIZE(mod->keys); i++) {
		mod->keys[i] = BT_MESH_KEY_UNUSED;
    f45e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f462:	60e3      	str	r3, [r4, #12]
	}

	mod->elem_idx = elem - dev_comp->elem;
    f464:	4b0c      	ldr	r3, [pc, #48]	; (f498 <mod_init+0x50>)
    f466:	681b      	ldr	r3, [r3, #0]
    f468:	68db      	ldr	r3, [r3, #12]
    f46a:	1aeb      	subs	r3, r5, r3
    f46c:	111b      	asrs	r3, r3, #4
    f46e:	7123      	strb	r3, [r4, #4]
	if (vnd) {
    f470:	b166      	cbz	r6, f48c <mod_init+0x44>
		mod->mod_idx = mod - elem->vnd_models;
    f472:	68eb      	ldr	r3, [r5, #12]
	} else {
		mod->mod_idx = mod - elem->models;
    f474:	1ae3      	subs	r3, r4, r3
    f476:	f3c3 1347 	ubfx	r3, r3, #5, #8
    f47a:	7163      	strb	r3, [r4, #5]
	}

	if (mod->cb && mod->cb->init) {
    f47c:	69a3      	ldr	r3, [r4, #24]
    f47e:	b13b      	cbz	r3, f490 <mod_init+0x48>
    f480:	689b      	ldr	r3, [r3, #8]
    f482:	b12b      	cbz	r3, f490 <mod_init+0x48>
		mod->cb->init(mod);
    f484:	4620      	mov	r0, r4
	}
}
    f486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		mod->cb->init(mod);
    f48a:	4718      	bx	r3
		mod->mod_idx = mod - elem->models;
    f48c:	68ab      	ldr	r3, [r5, #8]
    f48e:	e7f1      	b.n	f474 <mod_init+0x2c>
}
    f490:	bd70      	pop	{r4, r5, r6, pc}
    f492:	bf00      	nop
    f494:	0000fb71 	.word	0x0000fb71
    f498:	20000984 	.word	0x20000984

0000f49c <model_send>:

static int model_send(struct bt_mesh_model *model,
		      struct bt_mesh_net_tx *tx, bool implicit_bind,
		      struct net_buf_simple *msg,
		      const struct bt_mesh_send_cb *cb, void *cb_data)
{
    f49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f4a0:	4606      	mov	r6, r0
    f4a2:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
    f4a6:	460d      	mov	r5, r1
    f4a8:	4691      	mov	r9, r2
    f4aa:	461c      	mov	r4, r3
	BT_DBG("net_idx 0x%04x app_idx 0x%04x dst 0x%04x", tx->ctx->net_idx,
	       tx->ctx->app_idx, tx->ctx->addr);
	BT_DBG("len %u: %s", msg->len, bt_hex(msg->data, msg->len));

	if (!bt_mesh_is_provisioned()) {
    f4ac:	f7fc fb3a 	bl	bb24 <bt_mesh_is_provisioned>
    f4b0:	b968      	cbnz	r0, f4ce <model_send+0x32>
    f4b2:	4b2f      	ldr	r3, [pc, #188]	; (f570 <model_send+0xd4>)
    f4b4:	492f      	ldr	r1, [pc, #188]	; (f574 <model_send+0xd8>)
		BT_ERR("Local node is not yet provisioned");
    f4b6:	4830      	ldr	r0, [pc, #192]	; (f578 <model_send+0xdc>)
    f4b8:	1ac9      	subs	r1, r1, r3
    f4ba:	08c9      	lsrs	r1, r1, #3
    f4bc:	0189      	lsls	r1, r1, #6
    f4be:	f041 0101 	orr.w	r1, r1, #1
    f4c2:	f013 ff73 	bl	233ac <log_0>
		return -EAGAIN;
    f4c6:	f06f 000a 	mvn.w	r0, #10
		BT_ERR("Model not bound to AppKey 0x%04x", tx->ctx->app_idx);
		return -EINVAL;
	}

	return bt_mesh_trans_send(tx, msg, cb, cb_data);
}
    f4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (net_buf_simple_tailroom(msg) < 4) {
    f4ce:	4620      	mov	r0, r4
    f4d0:	f018 fd04 	bl	27edc <net_buf_simple_tailroom>
    f4d4:	2803      	cmp	r0, #3
    f4d6:	d80c      	bhi.n	f4f2 <model_send+0x56>
    f4d8:	4926      	ldr	r1, [pc, #152]	; (f574 <model_send+0xd8>)
    f4da:	4b25      	ldr	r3, [pc, #148]	; (f570 <model_send+0xd4>)
		BT_ERR("Not enough tailroom for TransMIC");
    f4dc:	4827      	ldr	r0, [pc, #156]	; (f57c <model_send+0xe0>)
    f4de:	1ac9      	subs	r1, r1, r3
    f4e0:	08c9      	lsrs	r1, r1, #3
    f4e2:	0189      	lsls	r1, r1, #6
    f4e4:	f041 0101 	orr.w	r1, r1, #1
    f4e8:	f013 ff60 	bl	233ac <log_0>
		return -EINVAL;
    f4ec:	f06f 0015 	mvn.w	r0, #21
    f4f0:	e7eb      	b.n	f4ca <model_send+0x2e>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
    f4f2:	88a3      	ldrh	r3, [r4, #4]
    f4f4:	2b20      	cmp	r3, #32
    f4f6:	d90c      	bls.n	f512 <model_send+0x76>
    f4f8:	4b1d      	ldr	r3, [pc, #116]	; (f570 <model_send+0xd4>)
    f4fa:	491e      	ldr	r1, [pc, #120]	; (f574 <model_send+0xd8>)
		BT_ERR("Too big message");
    f4fc:	4820      	ldr	r0, [pc, #128]	; (f580 <model_send+0xe4>)
    f4fe:	1ac9      	subs	r1, r1, r3
    f500:	08c9      	lsrs	r1, r1, #3
    f502:	0189      	lsls	r1, r1, #6
    f504:	f041 0101 	orr.w	r1, r1, #1
    f508:	f013 ff50 	bl	233ac <log_0>
		return -EMSGSIZE;
    f50c:	f06f 0023 	mvn.w	r0, #35	; 0x23
    f510:	e7db      	b.n	f4ca <model_send+0x2e>
	if (!implicit_bind && !model_has_key(model, tx->ctx->app_idx)) {
    f512:	f1b9 0f00 	cmp.w	r9, #0
    f516:	d122      	bne.n	f55e <model_send+0xc2>
    f518:	686b      	ldr	r3, [r5, #4]
    f51a:	8859      	ldrh	r1, [r3, #2]
		if (mod->keys[i] == key ||
    f51c:	89b3      	ldrh	r3, [r6, #12]
    f51e:	428b      	cmp	r3, r1
    f520:	d01d      	beq.n	f55e <model_send+0xc2>
    f522:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    f526:	4293      	cmp	r3, r2
    f528:	d103      	bne.n	f532 <model_send+0x96>
		     BT_MESH_IS_DEV_KEY(key))) {
    f52a:	1ccb      	adds	r3, r1, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
    f52c:	b29b      	uxth	r3, r3
    f52e:	2b01      	cmp	r3, #1
    f530:	d915      	bls.n	f55e <model_send+0xc2>
		if (mod->keys[i] == key ||
    f532:	89f3      	ldrh	r3, [r6, #14]
    f534:	4299      	cmp	r1, r3
    f536:	d012      	beq.n	f55e <model_send+0xc2>
    f538:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    f53c:	4293      	cmp	r3, r2
    f53e:	d103      	bne.n	f548 <model_send+0xac>
		     BT_MESH_IS_DEV_KEY(key))) {
    f540:	1ccb      	adds	r3, r1, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
    f542:	b29b      	uxth	r3, r3
    f544:	2b01      	cmp	r3, #1
    f546:	d90a      	bls.n	f55e <model_send+0xc2>
    f548:	4b09      	ldr	r3, [pc, #36]	; (f570 <model_send+0xd4>)
    f54a:	4a0a      	ldr	r2, [pc, #40]	; (f574 <model_send+0xd8>)
		BT_ERR("Model not bound to AppKey 0x%04x", tx->ctx->app_idx);
    f54c:	480d      	ldr	r0, [pc, #52]	; (f584 <model_send+0xe8>)
    f54e:	1ad2      	subs	r2, r2, r3
    f550:	08d2      	lsrs	r2, r2, #3
    f552:	0192      	lsls	r2, r2, #6
    f554:	f042 0201 	orr.w	r2, r2, #1
    f558:	f013 ff35 	bl	233c6 <log_1>
    f55c:	e7c6      	b.n	f4ec <model_send+0x50>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
    f55e:	4643      	mov	r3, r8
    f560:	463a      	mov	r2, r7
    f562:	4621      	mov	r1, r4
    f564:	4628      	mov	r0, r5
}
    f566:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
    f56a:	f7ff bd71 	b.w	f050 <bt_mesh_trans_send>
    f56e:	bf00      	nop
    f570:	00028868 	.word	0x00028868
    f574:	00028940 	.word	0x00028940
    f578:	0002c7cd 	.word	0x0002c7cd
    f57c:	0002c7ef 	.word	0x0002c7ef
    f580:	0002c810 	.word	0x0002c810
    f584:	0002c820 	.word	0x0002c820

0000f588 <publish_start>:
{
    f588:	b510      	push	{r4, lr}
	if (err) {
    f58a:	b159      	cbz	r1, f5a4 <publish_start+0x1c>
    f58c:	4a0b      	ldr	r2, [pc, #44]	; (f5bc <publish_start+0x34>)
    f58e:	4b0c      	ldr	r3, [pc, #48]	; (f5c0 <publish_start+0x38>)
		BT_ERR("Failed to publish: err %d", err);
    f590:	480c      	ldr	r0, [pc, #48]	; (f5c4 <publish_start+0x3c>)
    f592:	1ad2      	subs	r2, r2, r3
    f594:	08d2      	lsrs	r2, r2, #3
    f596:	0192      	lsls	r2, r2, #6
}
    f598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to publish: err %d", err);
    f59c:	f042 0201 	orr.w	r2, r2, #1
    f5a0:	f013 bf11 	b.w	233c6 <log_1>
	struct bt_mesh_model_pub *pub = mod->pub;
    f5a4:	6894      	ldr	r4, [r2, #8]
	if (pub->count == BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit)) {
    f5a6:	7a63      	ldrb	r3, [r4, #9]
    f5a8:	7ae2      	ldrb	r2, [r4, #11]
    f5aa:	f003 0307 	and.w	r3, r3, #7
    f5ae:	ebb3 1f52 	cmp.w	r3, r2, lsr #5
    f5b2:	d102      	bne.n	f5ba <publish_start+0x32>
		pub->period_start = k_uptime_get_32();
    f5b4:	f017 f9ca 	bl	2694c <k_uptime_get_32>
    f5b8:	60e0      	str	r0, [r4, #12]
}
    f5ba:	bd10      	pop	{r4, pc}
    f5bc:	00028940 	.word	0x00028940
    f5c0:	00028868 	.word	0x00028868
    f5c4:	0002c841 	.word	0x0002c841

0000f5c8 <bt_mesh_model_foreach>:
{
    f5c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
    f5cc:	f8df 9068 	ldr.w	r9, [pc, #104]	; f638 <bt_mesh_model_foreach+0x70>
{
    f5d0:	4606      	mov	r6, r0
    f5d2:	460f      	mov	r7, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
    f5d4:	2500      	movs	r5, #0
    f5d6:	f8d9 3000 	ldr.w	r3, [r9]
    f5da:	689a      	ldr	r2, [r3, #8]
    f5dc:	42aa      	cmp	r2, r5
    f5de:	d802      	bhi.n	f5e6 <bt_mesh_model_foreach+0x1e>
}
    f5e0:	b003      	add	sp, #12
    f5e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    f5e6:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
    f5e8:	f04f 0800 	mov.w	r8, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    f5ec:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
    f5f0:	7923      	ldrb	r3, [r4, #4]
    f5f2:	4543      	cmp	r3, r8
    f5f4:	dc06      	bgt.n	f604 <bt_mesh_model_foreach+0x3c>
		for (j = 0; j < elem->vnd_model_count; j++) {
    f5f6:	f04f 0800 	mov.w	r8, #0
    f5fa:	7963      	ldrb	r3, [r4, #5]
    f5fc:	4543      	cmp	r3, r8
    f5fe:	dc0e      	bgt.n	f61e <bt_mesh_model_foreach+0x56>
	for (i = 0; i < dev_comp->elem_count; i++) {
    f600:	3501      	adds	r5, #1
    f602:	e7e8      	b.n	f5d6 <bt_mesh_model_foreach+0xe>
			struct bt_mesh_model *model = &elem->models[j];
    f604:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
    f606:	9700      	str	r7, [sp, #0]
    f608:	fab5 f385 	clz	r3, r5
    f60c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
    f610:	095b      	lsrs	r3, r3, #5
    f612:	2200      	movs	r2, #0
    f614:	4621      	mov	r1, r4
    f616:	47b0      	blx	r6
		for (j = 0; j < elem->model_count; j++) {
    f618:	f108 0801 	add.w	r8, r8, #1
    f61c:	e7e8      	b.n	f5f0 <bt_mesh_model_foreach+0x28>
			struct bt_mesh_model *model = &elem->vnd_models[j];
    f61e:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
    f620:	9700      	str	r7, [sp, #0]
    f622:	fab5 f385 	clz	r3, r5
    f626:	eb00 1048 	add.w	r0, r0, r8, lsl #5
    f62a:	095b      	lsrs	r3, r3, #5
    f62c:	2201      	movs	r2, #1
    f62e:	4621      	mov	r1, r4
    f630:	47b0      	blx	r6
		for (j = 0; j < elem->vnd_model_count; j++) {
    f632:	f108 0801 	add.w	r8, r8, #1
    f636:	e7e0      	b.n	f5fa <bt_mesh_model_foreach+0x32>
    f638:	20000984 	.word	0x20000984

0000f63c <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
    f63c:	6883      	ldr	r3, [r0, #8]
    f63e:	b1e3      	cbz	r3, f67a <bt_mesh_model_pub_period_get+0x3e>
	switch (mod->pub->period >> 6) {
    f640:	7a98      	ldrb	r0, [r3, #10]
    f642:	0982      	lsrs	r2, r0, #6
    f644:	2a02      	cmp	r2, #2
    f646:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    f64a:	d011      	beq.n	f670 <bt_mesh_model_pub_period_get+0x34>
    f64c:	2a03      	cmp	r2, #3
    f64e:	d012      	beq.n	f676 <bt_mesh_model_pub_period_get+0x3a>
    f650:	2a01      	cmp	r2, #1
    f652:	d009      	beq.n	f668 <bt_mesh_model_pub_period_get+0x2c>
		period = K_MSEC((mod->pub->period & BIT_MASK(6)) * 100U);
    f654:	2264      	movs	r2, #100	; 0x64
    f656:	fb10 f002 	smulbb	r0, r0, r2
	if (mod->pub->fast_period) {
    f65a:	7adb      	ldrb	r3, [r3, #11]
    f65c:	06da      	lsls	r2, r3, #27
    f65e:	d50d      	bpl.n	f67c <bt_mesh_model_pub_period_get+0x40>
		return period >> mod->pub->period_div;
    f660:	f003 030f 	and.w	r3, r3, #15
    f664:	4118      	asrs	r0, r3
    f666:	4770      	bx	lr
		period = K_SECONDS(mod->pub->period & BIT_MASK(6));
    f668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		period = K_MINUTES((mod->pub->period & BIT_MASK(6)) * 10U);
    f66c:	4350      	muls	r0, r2
		break;
    f66e:	e7f4      	b.n	f65a <bt_mesh_model_pub_period_get+0x1e>
		period = K_SECONDS((mod->pub->period & BIT_MASK(6)) * 10U);
    f670:	f242 7210 	movw	r2, #10000	; 0x2710
    f674:	e7fa      	b.n	f66c <bt_mesh_model_pub_period_get+0x30>
		period = K_MINUTES((mod->pub->period & BIT_MASK(6)) * 10U);
    f676:	4a02      	ldr	r2, [pc, #8]	; (f680 <bt_mesh_model_pub_period_get+0x44>)
    f678:	e7f8      	b.n	f66c <bt_mesh_model_pub_period_get+0x30>
		return 0;
    f67a:	4618      	mov	r0, r3
}
    f67c:	4770      	bx	lr
    f67e:	bf00      	nop
    f680:	000927c0 	.word	0x000927c0

0000f684 <publish_sent>:
{
    f684:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub->count) {
    f686:	688e      	ldr	r6, [r1, #8]
    f688:	7af3      	ldrb	r3, [r6, #11]
    f68a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
{
    f68e:	460d      	mov	r5, r1
	if (mod->pub->count) {
    f690:	d00b      	beq.n	f6aa <publish_sent+0x26>
		delay = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
    f692:	7a72      	ldrb	r2, [r6, #9]
    f694:	08d4      	lsrs	r4, r2, #3
    f696:	2232      	movs	r2, #50	; 0x32
    f698:	fb04 2202 	mla	r2, r4, r2, r2
		k_delayed_work_submit(&mod->pub->timer, delay);
    f69c:	68a9      	ldr	r1, [r5, #8]
    f69e:	4810      	ldr	r0, [pc, #64]	; (f6e0 <publish_sent+0x5c>)
}
    f6a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f6a4:	3118      	adds	r1, #24
    f6a6:	f012 bc4f 	b.w	21f48 <k_delayed_work_submit_to_queue>
	period = bt_mesh_model_pub_period_get(mod);
    f6aa:	4608      	mov	r0, r1
    f6ac:	f7ff ffc6 	bl	f63c <bt_mesh_model_pub_period_get>
	if (!period) {
    f6b0:	4604      	mov	r4, r0
    f6b2:	b1a0      	cbz	r0, f6de <publish_sent+0x5a>
	elapsed = k_uptime_get_32() - pub->period_start;
    f6b4:	f017 f94a 	bl	2694c <k_uptime_get_32>
    f6b8:	68f2      	ldr	r2, [r6, #12]
    f6ba:	1a83      	subs	r3, r0, r2
	if (elapsed >= period) {
    f6bc:	429c      	cmp	r4, r3
    f6be:	d80b      	bhi.n	f6d8 <publish_sent+0x54>
    f6c0:	4908      	ldr	r1, [pc, #32]	; (f6e4 <publish_sent+0x60>)
    f6c2:	4b09      	ldr	r3, [pc, #36]	; (f6e8 <publish_sent+0x64>)
		BT_WARN("Publication sending took longer than the period");
    f6c4:	4809      	ldr	r0, [pc, #36]	; (f6ec <publish_sent+0x68>)
    f6c6:	1a5b      	subs	r3, r3, r1
    f6c8:	08db      	lsrs	r3, r3, #3
    f6ca:	019b      	lsls	r3, r3, #6
    f6cc:	f043 0102 	orr.w	r1, r3, #2
    f6d0:	f013 fe6c 	bl	233ac <log_0>
		return K_MSEC(1);
    f6d4:	2201      	movs	r2, #1
    f6d6:	e7e1      	b.n	f69c <publish_sent+0x18>
	return period - elapsed;
    f6d8:	4414      	add	r4, r2
	if (delay) {
    f6da:	1a22      	subs	r2, r4, r0
    f6dc:	d1de      	bne.n	f69c <publish_sent+0x18>
}
    f6de:	bd70      	pop	{r4, r5, r6, pc}
    f6e0:	20001c08 	.word	0x20001c08
    f6e4:	00028868 	.word	0x00028868
    f6e8:	00028940 	.word	0x00028940
    f6ec:	0002c85b 	.word	0x0002c85b

0000f6f0 <bt_mesh_model_elem>:
	return &dev_comp->elem[mod->elem_idx];
    f6f0:	4b03      	ldr	r3, [pc, #12]	; (f700 <bt_mesh_model_elem+0x10>)
    f6f2:	7900      	ldrb	r0, [r0, #4]
    f6f4:	681b      	ldr	r3, [r3, #0]
    f6f6:	68db      	ldr	r3, [r3, #12]
}
    f6f8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    f6fc:	4770      	bx	lr
    f6fe:	bf00      	nop
    f700:	20000984 	.word	0x20000984

0000f704 <bt_mesh_model_get>:
{
    f704:	b538      	push	{r3, r4, r5, lr}
    f706:	4613      	mov	r3, r2
	if (elem_idx >= dev_comp->elem_count) {
    f708:	4a1b      	ldr	r2, [pc, #108]	; (f778 <bt_mesh_model_get+0x74>)
    f70a:	6812      	ldr	r2, [r2, #0]
{
    f70c:	4604      	mov	r4, r0
	if (elem_idx >= dev_comp->elem_count) {
    f70e:	6890      	ldr	r0, [r2, #8]
    f710:	4281      	cmp	r1, r0
{
    f712:	460d      	mov	r5, r1
	if (elem_idx >= dev_comp->elem_count) {
    f714:	d30b      	bcc.n	f72e <bt_mesh_model_get+0x2a>
    f716:	4a19      	ldr	r2, [pc, #100]	; (f77c <bt_mesh_model_get+0x78>)
    f718:	4b19      	ldr	r3, [pc, #100]	; (f780 <bt_mesh_model_get+0x7c>)
		BT_ERR("Invalid element index %u", elem_idx);
    f71a:	481a      	ldr	r0, [pc, #104]	; (f784 <bt_mesh_model_get+0x80>)
    f71c:	1ad2      	subs	r2, r2, r3
    f71e:	08d2      	lsrs	r2, r2, #3
    f720:	0192      	lsls	r2, r2, #6
    f722:	f042 0201 	orr.w	r2, r2, #1
    f726:	f013 fe4e 	bl	233c6 <log_1>
		return NULL;
    f72a:	2000      	movs	r0, #0
}
    f72c:	bd38      	pop	{r3, r4, r5, pc}
	elem = &dev_comp->elem[elem_idx];
    f72e:	68d1      	ldr	r1, [r2, #12]
    f730:	eb01 1105 	add.w	r1, r1, r5, lsl #4
	if (vnd) {
    f734:	b184      	cbz	r4, f758 <bt_mesh_model_get+0x54>
		if (mod_idx >= elem->vnd_model_count) {
    f736:	794a      	ldrb	r2, [r1, #5]
    f738:	429a      	cmp	r2, r3
    f73a:	d809      	bhi.n	f750 <bt_mesh_model_get+0x4c>
    f73c:	4910      	ldr	r1, [pc, #64]	; (f780 <bt_mesh_model_get+0x7c>)
    f73e:	4a0f      	ldr	r2, [pc, #60]	; (f77c <bt_mesh_model_get+0x78>)
			BT_ERR("Invalid vendor model index %u", mod_idx);
    f740:	4811      	ldr	r0, [pc, #68]	; (f788 <bt_mesh_model_get+0x84>)
    f742:	1a52      	subs	r2, r2, r1
    f744:	08d2      	lsrs	r2, r2, #3
    f746:	0192      	lsls	r2, r2, #6
    f748:	f042 0201 	orr.w	r2, r2, #1
    f74c:	4619      	mov	r1, r3
    f74e:	e7ea      	b.n	f726 <bt_mesh_model_get+0x22>
		return &elem->vnd_models[mod_idx];
    f750:	68c8      	ldr	r0, [r1, #12]
		return &elem->models[mod_idx];
    f752:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    f756:	e7e9      	b.n	f72c <bt_mesh_model_get+0x28>
		if (mod_idx >= elem->model_count) {
    f758:	790a      	ldrb	r2, [r1, #4]
    f75a:	429a      	cmp	r2, r3
    f75c:	d809      	bhi.n	f772 <bt_mesh_model_get+0x6e>
    f75e:	4908      	ldr	r1, [pc, #32]	; (f780 <bt_mesh_model_get+0x7c>)
    f760:	4a06      	ldr	r2, [pc, #24]	; (f77c <bt_mesh_model_get+0x78>)
			BT_ERR("Invalid SIG model index %u", mod_idx);
    f762:	480a      	ldr	r0, [pc, #40]	; (f78c <bt_mesh_model_get+0x88>)
    f764:	1a52      	subs	r2, r2, r1
    f766:	08d2      	lsrs	r2, r2, #3
    f768:	0192      	lsls	r2, r2, #6
    f76a:	f042 0201 	orr.w	r2, r2, #1
    f76e:	4619      	mov	r1, r3
    f770:	e7d9      	b.n	f726 <bt_mesh_model_get+0x22>
		return &elem->models[mod_idx];
    f772:	6888      	ldr	r0, [r1, #8]
    f774:	e7ed      	b.n	f752 <bt_mesh_model_get+0x4e>
    f776:	bf00      	nop
    f778:	20000984 	.word	0x20000984
    f77c:	00028940 	.word	0x00028940
    f780:	00028868 	.word	0x00028868
    f784:	0002c88b 	.word	0x0002c88b
    f788:	0002c8a4 	.word	0x0002c8a4
    f78c:	0002c8c2 	.word	0x0002c8c2

0000f790 <bt_mesh_comp_register>:
{
    f790:	b508      	push	{r3, lr}
	if (!comp->elem_count) {
    f792:	6883      	ldr	r3, [r0, #8]
    f794:	b13b      	cbz	r3, f7a6 <bt_mesh_comp_register+0x16>
	dev_comp = comp;
    f796:	4b05      	ldr	r3, [pc, #20]	; (f7ac <bt_mesh_comp_register+0x1c>)
	bt_mesh_model_foreach(mod_init, NULL);
    f798:	2100      	movs	r1, #0
	dev_comp = comp;
    f79a:	6018      	str	r0, [r3, #0]
	bt_mesh_model_foreach(mod_init, NULL);
    f79c:	4804      	ldr	r0, [pc, #16]	; (f7b0 <bt_mesh_comp_register+0x20>)
    f79e:	f7ff ff13 	bl	f5c8 <bt_mesh_model_foreach>
	return 0;
    f7a2:	2000      	movs	r0, #0
}
    f7a4:	bd08      	pop	{r3, pc}
		return -EINVAL;
    f7a6:	f06f 0015 	mvn.w	r0, #21
    f7aa:	e7fb      	b.n	f7a4 <bt_mesh_comp_register+0x14>
    f7ac:	20000984 	.word	0x20000984
    f7b0:	0000f449 	.word	0x0000f449

0000f7b4 <bt_mesh_comp_provision>:
	dev_primary_addr = addr;
    f7b4:	4b08      	ldr	r3, [pc, #32]	; (f7d8 <bt_mesh_comp_provision+0x24>)
{
    f7b6:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
    f7b8:	8018      	strh	r0, [r3, #0]
	for (i = 0; i < dev_comp->elem_count; i++) {
    f7ba:	4b08      	ldr	r3, [pc, #32]	; (f7dc <bt_mesh_comp_provision+0x28>)
    f7bc:	6819      	ldr	r1, [r3, #0]
    f7be:	688c      	ldr	r4, [r1, #8]
    f7c0:	2300      	movs	r3, #0
    f7c2:	18c2      	adds	r2, r0, r3
    f7c4:	42a3      	cmp	r3, r4
    f7c6:	b292      	uxth	r2, r2
    f7c8:	d100      	bne.n	f7cc <bt_mesh_comp_provision+0x18>
}
    f7ca:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
    f7cc:	011d      	lsls	r5, r3, #4
    f7ce:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
    f7d0:	3301      	adds	r3, #1
		elem->addr = addr++;
    f7d2:	5372      	strh	r2, [r6, r5]
	for (i = 0; i < dev_comp->elem_count; i++) {
    f7d4:	e7f5      	b.n	f7c2 <bt_mesh_comp_provision+0xe>
    f7d6:	bf00      	nop
    f7d8:	20001d66 	.word	0x20001d66
    f7dc:	20000984 	.word	0x20000984

0000f7e0 <bt_mesh_comp_unprovision>:
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    f7e0:	4b02      	ldr	r3, [pc, #8]	; (f7ec <bt_mesh_comp_unprovision+0xc>)
	bt_mesh_model_foreach(mod_init, NULL);
    f7e2:	4803      	ldr	r0, [pc, #12]	; (f7f0 <bt_mesh_comp_unprovision+0x10>)
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    f7e4:	2100      	movs	r1, #0
    f7e6:	8019      	strh	r1, [r3, #0]
	bt_mesh_model_foreach(mod_init, NULL);
    f7e8:	f7ff beee 	b.w	f5c8 <bt_mesh_model_foreach>
    f7ec:	20001d66 	.word	0x20001d66
    f7f0:	0000f449 	.word	0x0000f449

0000f7f4 <bt_mesh_primary_addr>:
}
    f7f4:	4b01      	ldr	r3, [pc, #4]	; (f7fc <bt_mesh_primary_addr+0x8>)
    f7f6:	8818      	ldrh	r0, [r3, #0]
    f7f8:	4770      	bx	lr
    f7fa:	bf00      	nop
    f7fc:	20001d66 	.word	0x20001d66

0000f800 <bt_mesh_elem_find>:
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    f800:	4a25      	ldr	r2, [pc, #148]	; (f898 <bt_mesh_elem_find+0x98>)
{
    f802:	b5f0      	push	{r4, r5, r6, r7, lr}
    f804:	6817      	ldr	r7, [r2, #0]
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    f806:	b202      	sxth	r2, r0
    f808:	2a00      	cmp	r2, #0
    f80a:	68bd      	ldr	r5, [r7, #8]
{
    f80c:	4603      	mov	r3, r0
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    f80e:	dd3d      	ble.n	f88c <bt_mesh_elem_find+0x8c>
		index = (addr - dev_comp->elem[0].addr);
    f810:	68f8      	ldr	r0, [r7, #12]
    f812:	8802      	ldrh	r2, [r0, #0]
    f814:	1a9b      	subs	r3, r3, r2
		if (index < dev_comp->elem_count) {
    f816:	b29b      	uxth	r3, r3
    f818:	42ab      	cmp	r3, r5
    f81a:	d23b      	bcs.n	f894 <bt_mesh_elem_find+0x94>
			return &dev_comp->elem[index];
    f81c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
}
    f820:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[index];
    f822:	68fa      	ldr	r2, [r7, #12]
    f824:	eb02 1000 	add.w	r0, r2, r0, lsl #4
	for (i = 0; i < elem->model_count; i++) {
    f828:	2100      	movs	r1, #0
    f82a:	f890 c004 	ldrb.w	ip, [r0, #4]
    f82e:	4561      	cmp	r1, ip
    f830:	db06      	blt.n	f840 <bt_mesh_elem_find+0x40>
	for (i = 0; i < elem->vnd_model_count; i++) {
    f832:	f890 c005 	ldrb.w	ip, [r0, #5]
    f836:	2100      	movs	r1, #0
    f838:	4561      	cmp	r1, ip
    f83a:	db14      	blt.n	f866 <bt_mesh_elem_find+0x66>
	for (index = 0; index < dev_comp->elem_count; index++) {
    f83c:	3601      	adds	r6, #1
    f83e:	e026      	b.n	f88e <bt_mesh_elem_find+0x8e>
		model = &elem->models[i];
    f840:	6882      	ldr	r2, [r0, #8]
    f842:	eb02 1241 	add.w	r2, r2, r1, lsl #5
		if (mod->groups[i] == addr) {
    f846:	8a14      	ldrh	r4, [r2, #16]
    f848:	429c      	cmp	r4, r3
    f84a:	d00a      	beq.n	f862 <bt_mesh_elem_find+0x62>
    f84c:	8a54      	ldrh	r4, [r2, #18]
    f84e:	429c      	cmp	r4, r3
    f850:	d105      	bne.n	f85e <bt_mesh_elem_find+0x5e>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    f852:	2401      	movs	r4, #1
			return &mod->groups[i];
    f854:	3408      	adds	r4, #8
    f856:	eb02 0244 	add.w	r2, r2, r4, lsl #1
		if (match) {
    f85a:	2a00      	cmp	r2, #0
    f85c:	d1e0      	bne.n	f820 <bt_mesh_elem_find+0x20>
	for (i = 0; i < elem->model_count; i++) {
    f85e:	3101      	adds	r1, #1
    f860:	e7e5      	b.n	f82e <bt_mesh_elem_find+0x2e>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    f862:	2400      	movs	r4, #0
    f864:	e7f6      	b.n	f854 <bt_mesh_elem_find+0x54>
		model = &elem->vnd_models[i];
    f866:	68c2      	ldr	r2, [r0, #12]
    f868:	eb02 1241 	add.w	r2, r2, r1, lsl #5
		if (mod->groups[i] == addr) {
    f86c:	8a14      	ldrh	r4, [r2, #16]
    f86e:	429c      	cmp	r4, r3
    f870:	d00a      	beq.n	f888 <bt_mesh_elem_find+0x88>
    f872:	8a54      	ldrh	r4, [r2, #18]
    f874:	429c      	cmp	r4, r3
    f876:	d105      	bne.n	f884 <bt_mesh_elem_find+0x84>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    f878:	2401      	movs	r4, #1
			return &mod->groups[i];
    f87a:	3408      	adds	r4, #8
    f87c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
		if (match) {
    f880:	2a00      	cmp	r2, #0
    f882:	d1cd      	bne.n	f820 <bt_mesh_elem_find+0x20>
	for (i = 0; i < elem->vnd_model_count; i++) {
    f884:	3101      	adds	r1, #1
    f886:	e7d7      	b.n	f838 <bt_mesh_elem_find+0x38>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    f888:	2400      	movs	r4, #0
    f88a:	e7f6      	b.n	f87a <bt_mesh_elem_find+0x7a>
    f88c:	2600      	movs	r6, #0
	for (index = 0; index < dev_comp->elem_count; index++) {
    f88e:	b2b0      	uxth	r0, r6
    f890:	42a8      	cmp	r0, r5
    f892:	d3c6      	bcc.n	f822 <bt_mesh_elem_find+0x22>
			return NULL;
    f894:	2000      	movs	r0, #0
    f896:	e7c3      	b.n	f820 <bt_mesh_elem_find+0x20>
    f898:	20000984 	.word	0x20000984

0000f89c <bt_mesh_elem_count>:
	return dev_comp->elem_count;
    f89c:	4b01      	ldr	r3, [pc, #4]	; (f8a4 <bt_mesh_elem_count+0x8>)
    f89e:	681b      	ldr	r3, [r3, #0]
}
    f8a0:	7a18      	ldrb	r0, [r3, #8]
    f8a2:	4770      	bx	lr
    f8a4:	20000984 	.word	0x20000984

0000f8a8 <bt_mesh_model_recv>:
{
    f8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
    f8ac:	680b      	ldr	r3, [r1, #0]
    f8ae:	4d64      	ldr	r5, [pc, #400]	; (fa40 <bt_mesh_model_recv+0x198>)
    f8b0:	781b      	ldrb	r3, [r3, #0]
{
    f8b2:	460c      	mov	r4, r1
    f8b4:	4963      	ldr	r1, [pc, #396]	; (fa44 <bt_mesh_model_recv+0x19c>)
	switch (buf->data[0] >> 6) {
    f8b6:	099a      	lsrs	r2, r3, #6
    f8b8:	1a6d      	subs	r5, r5, r1
    f8ba:	2a02      	cmp	r2, #2
{
    f8bc:	b085      	sub	sp, #20
    f8be:	4680      	mov	r8, r0
    f8c0:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	switch (buf->data[0] >> 6) {
    f8c4:	d024      	beq.n	f910 <bt_mesh_model_recv+0x68>
    f8c6:	2a03      	cmp	r2, #3
    f8c8:	d02e      	beq.n	f928 <bt_mesh_model_recv+0x80>
		if (buf->data[0] == 0x7f) {
    f8ca:	2b7f      	cmp	r3, #127	; 0x7f
    f8cc:	d10e      	bne.n	f8ec <bt_mesh_model_recv+0x44>
			BT_ERR("Ignoring RFU OpCode");
    f8ce:	01a9      	lsls	r1, r5, #6
    f8d0:	485d      	ldr	r0, [pc, #372]	; (fa48 <bt_mesh_model_recv+0x1a0>)
    f8d2:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Too short payload for 2-octet OpCode");
    f8d6:	f013 fd69 	bl	233ac <log_0>
		BT_WARN("Unable to decode OpCode");
    f8da:	01ad      	lsls	r5, r5, #6
    f8dc:	485b      	ldr	r0, [pc, #364]	; (fa4c <bt_mesh_model_recv+0x1a4>)
    f8de:	f045 0102 	orr.w	r1, r5, #2
}
    f8e2:	b005      	add	sp, #20
    f8e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_WARN("Unable to decode OpCode");
    f8e8:	f013 bd60 	b.w	233ac <log_0>
		*opcode = net_buf_simple_pull_u8(buf);
    f8ec:	4620      	mov	r0, r4
    f8ee:	f018 facd 	bl	27e8c <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
    f8f2:	4607      	mov	r7, r0
			BT_ERR("Too short message for OpCode 0x%08x", opcode);
    f8f4:	01ad      	lsls	r5, r5, #6
    f8f6:	f045 0301 	orr.w	r3, r5, #1
	for (i = 0; i < dev_comp->elem_count; i++) {
    f8fa:	f04f 0a00 	mov.w	sl, #0
			BT_ERR("Too short message for OpCode 0x%08x", opcode);
    f8fe:	9301      	str	r3, [sp, #4]
	for (i = 0; i < dev_comp->elem_count; i++) {
    f900:	4b53      	ldr	r3, [pc, #332]	; (fa50 <bt_mesh_model_recv+0x1a8>)
    f902:	681b      	ldr	r3, [r3, #0]
    f904:	689a      	ldr	r2, [r3, #8]
    f906:	4552      	cmp	r2, sl
    f908:	d820      	bhi.n	f94c <bt_mesh_model_recv+0xa4>
}
    f90a:	b005      	add	sp, #20
    f90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < 2) {
    f910:	88a3      	ldrh	r3, [r4, #4]
    f912:	2b01      	cmp	r3, #1
    f914:	d804      	bhi.n	f920 <bt_mesh_model_recv+0x78>
			BT_ERR("Too short payload for 2-octet OpCode");
    f916:	01a9      	lsls	r1, r5, #6
    f918:	484e      	ldr	r0, [pc, #312]	; (fa54 <bt_mesh_model_recv+0x1ac>)
    f91a:	f041 0101 	orr.w	r1, r1, #1
    f91e:	e7da      	b.n	f8d6 <bt_mesh_model_recv+0x2e>
		*opcode = net_buf_simple_pull_be16(buf);
    f920:	4620      	mov	r0, r4
    f922:	f018 fac3 	bl	27eac <net_buf_simple_pull_be16>
    f926:	e7e4      	b.n	f8f2 <bt_mesh_model_recv+0x4a>
		if (buf->len < 3) {
    f928:	88a3      	ldrh	r3, [r4, #4]
    f92a:	2b02      	cmp	r3, #2
    f92c:	d804      	bhi.n	f938 <bt_mesh_model_recv+0x90>
			BT_ERR("Too short payload for 3-octet OpCode");
    f92e:	01a9      	lsls	r1, r5, #6
    f930:	4849      	ldr	r0, [pc, #292]	; (fa58 <bt_mesh_model_recv+0x1b0>)
    f932:	f041 0101 	orr.w	r1, r1, #1
    f936:	e7ce      	b.n	f8d6 <bt_mesh_model_recv+0x2e>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
    f938:	4620      	mov	r0, r4
    f93a:	f018 faa7 	bl	27e8c <net_buf_simple_pull_u8>
    f93e:	4607      	mov	r7, r0
		*opcode |= net_buf_simple_pull_le16(buf);
    f940:	4620      	mov	r0, r4
    f942:	f018 faab 	bl	27e9c <net_buf_simple_pull_le16>
    f946:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
		return 0;
    f94a:	e7d3      	b.n	f8f4 <bt_mesh_model_recv+0x4c>
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    f94c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    f950:	eb0c 130a 	add.w	r3, ip, sl, lsl #4
			models = elem->vnd_models;
    f954:	e9d3 2602 	ldrd	r2, r6, [r3, #8]
		if (BT_MESH_MODEL_OP_LEN(opcode) < 3) {
    f958:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
			count = elem->model_count;
    f95c:	bf36      	itet	cc
    f95e:	791b      	ldrbcc	r3, [r3, #4]
			count = elem->vnd_model_count;
    f960:	795b      	ldrbcs	r3, [r3, #5]
			models = elem->models;
    f962:	4616      	movcc	r6, r2
	for (i = 0U; i < model_count; i++) {
    f964:	eb06 1243 	add.w	r2, r6, r3, lsl #5
    f968:	42b2      	cmp	r2, r6
    f96a:	d102      	bne.n	f972 <bt_mesh_model_recv+0xca>
	for (i = 0; i < dev_comp->elem_count; i++) {
    f96c:	f10a 0a01 	add.w	sl, sl, #1
    f970:	e7c6      	b.n	f900 <bt_mesh_model_recv+0x58>
		for (op = (*model)->op; op->func; op++) {
    f972:	6975      	ldr	r5, [r6, #20]
    f974:	68a9      	ldr	r1, [r5, #8]
    f976:	b909      	cbnz	r1, f97c <bt_mesh_model_recv+0xd4>
	for (i = 0U; i < model_count; i++) {
    f978:	3620      	adds	r6, #32
    f97a:	e7f5      	b.n	f968 <bt_mesh_model_recv+0xc0>
			if (op->opcode == opcode) {
    f97c:	6829      	ldr	r1, [r5, #0]
    f97e:	42b9      	cmp	r1, r7
    f980:	d02a      	beq.n	f9d8 <bt_mesh_model_recv+0x130>
		for (op = (*model)->op; op->func; op++) {
    f982:	350c      	adds	r5, #12
    f984:	e7f6      	b.n	f974 <bt_mesh_model_recv+0xcc>
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst)) {
    f986:	f480 4200 	eor.w	r2, r0, #32768	; 0x8000
    f98a:	f5b2 4ffe 	cmp.w	r2, #32512	; 0x7f00
    f98e:	d807      	bhi.n	f9a0 <bt_mesh_model_recv+0xf8>
		return bt_mesh_model_find_group(&mod, dst);
    f990:	4601      	mov	r1, r0
    f992:	a803      	add	r0, sp, #12
    f994:	f016 ffe7 	bl	26966 <bt_mesh_model_find_group>
    f998:	3800      	subs	r0, #0
    f99a:	bf18      	it	ne
    f99c:	2001      	movne	r0, #1
    f99e:	e041      	b.n	fa24 <bt_mesh_model_recv+0x17c>
	return (mod->elem_idx == 0 && bt_mesh_fixed_group_match(dst));
    f9a0:	7932      	ldrb	r2, [r6, #4]
    f9a2:	b922      	cbnz	r2, f9ae <bt_mesh_model_recv+0x106>
    f9a4:	f016 ffef 	bl	26986 <bt_mesh_fixed_group_match>
    f9a8:	f000 0001 	and.w	r0, r0, #1
    f9ac:	e03a      	b.n	fa24 <bt_mesh_model_recv+0x17c>
    f9ae:	2000      	movs	r0, #0
    f9b0:	e7fa      	b.n	f9a8 <bt_mesh_model_recv+0x100>
	state->offset = net_buf_simple_headroom(buf);
    f9b2:	4620      	mov	r0, r4
    f9b4:	f018 fa8e 	bl	27ed4 <net_buf_simple_headroom>
		op->func(model, &rx->ctx, buf);
    f9b8:	68ab      	ldr	r3, [r5, #8]
	state->len = buf->len;
    f9ba:	f8b4 b004 	ldrh.w	fp, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
    f9be:	4681      	mov	r9, r0
    f9c0:	4622      	mov	r2, r4
    f9c2:	4630      	mov	r0, r6
    f9c4:	f108 0104 	add.w	r1, r8, #4
    f9c8:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
    f9ca:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
    f9cc:	f8a4 b004 	strh.w	fp, [r4, #4]
	buf->data = buf->__buf + state->offset;
    f9d0:	fa10 f089 	uxtah	r0, r0, r9
    f9d4:	6020      	str	r0, [r4, #0]
	buf->len = state->len;
    f9d6:	e7c9      	b.n	f96c <bt_mesh_model_recv+0xc4>
		if (!model_has_key(model, rx->ctx.app_idx)) {
    f9d8:	f8b8 2006 	ldrh.w	r2, [r8, #6]
		if (mod->keys[i] == key ||
    f9dc:	89b1      	ldrh	r1, [r6, #12]
    f9de:	428a      	cmp	r2, r1
    f9e0:	d012      	beq.n	fa08 <bt_mesh_model_recv+0x160>
    f9e2:	f64f 70fc 	movw	r0, #65532	; 0xfffc
    f9e6:	4281      	cmp	r1, r0
    f9e8:	d103      	bne.n	f9f2 <bt_mesh_model_recv+0x14a>
		     BT_MESH_IS_DEV_KEY(key))) {
    f9ea:	1cd1      	adds	r1, r2, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
    f9ec:	b289      	uxth	r1, r1
    f9ee:	2901      	cmp	r1, #1
    f9f0:	d90a      	bls.n	fa08 <bt_mesh_model_recv+0x160>
		if (mod->keys[i] == key ||
    f9f2:	89f1      	ldrh	r1, [r6, #14]
    f9f4:	4291      	cmp	r1, r2
    f9f6:	d007      	beq.n	fa08 <bt_mesh_model_recv+0x160>
    f9f8:	f64f 70fc 	movw	r0, #65532	; 0xfffc
    f9fc:	4281      	cmp	r1, r0
    f9fe:	d1b5      	bne.n	f96c <bt_mesh_model_recv+0xc4>
		     BT_MESH_IS_DEV_KEY(key))) {
    fa00:	3203      	adds	r2, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
    fa02:	b292      	uxth	r2, r2
    fa04:	2a01      	cmp	r2, #1
    fa06:	d8b1      	bhi.n	f96c <bt_mesh_model_recv+0xc4>
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
    fa08:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
    fa0c:	f8b8 000a 	ldrh.w	r0, [r8, #10]
    fa10:	9603      	str	r6, [sp, #12]
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
    fa12:	2a00      	cmp	r2, #0
    fa14:	ddb7      	ble.n	f986 <bt_mesh_model_recv+0xde>
		return (dev_comp->elem[mod->elem_idx].addr == dst);
    fa16:	7932      	ldrb	r2, [r6, #4]
    fa18:	0112      	lsls	r2, r2, #4
    fa1a:	f83c 2002 	ldrh.w	r2, [ip, r2]
    fa1e:	1a13      	subs	r3, r2, r0
    fa20:	4258      	negs	r0, r3
    fa22:	4158      	adcs	r0, r3
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
    fa24:	2800      	cmp	r0, #0
    fa26:	d0a1      	beq.n	f96c <bt_mesh_model_recv+0xc4>
		if (buf->len < op->min_len) {
    fa28:	88a1      	ldrh	r1, [r4, #4]
    fa2a:	686a      	ldr	r2, [r5, #4]
    fa2c:	4291      	cmp	r1, r2
    fa2e:	d2c0      	bcs.n	f9b2 <bt_mesh_model_recv+0x10a>
			BT_ERR("Too short message for OpCode 0x%08x", opcode);
    fa30:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fa34:	4809      	ldr	r0, [pc, #36]	; (fa5c <bt_mesh_model_recv+0x1b4>)
    fa36:	4639      	mov	r1, r7
    fa38:	f013 fcc5 	bl	233c6 <log_1>
			continue;
    fa3c:	e796      	b.n	f96c <bt_mesh_model_recv+0xc4>
    fa3e:	bf00      	nop
    fa40:	00028940 	.word	0x00028940
    fa44:	00028868 	.word	0x00028868
    fa48:	0002c8dd 	.word	0x0002c8dd
    fa4c:	0002c93b 	.word	0x0002c93b
    fa50:	20000984 	.word	0x20000984
    fa54:	0002c8f1 	.word	0x0002c8f1
    fa58:	0002c916 	.word	0x0002c916
    fa5c:	0002c953 	.word	0x0002c953

0000fa60 <bt_mesh_model_publish>:

	return model_send(model, &tx, false, msg, cb, cb_data);
}

int bt_mesh_model_publish(struct bt_mesh_model *model)
{
    fa60:	b570      	push	{r4, r5, r6, lr}
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
	struct bt_mesh_model_pub *pub = model->pub;
    fa62:	6884      	ldr	r4, [r0, #8]
{
    fa64:	b094      	sub	sp, #80	; 0x50
	struct bt_mesh_app_key *key;
	struct bt_mesh_msg_ctx ctx = {
		.send_rel = pub->send_rel,
    fa66:	79e1      	ldrb	r1, [r4, #7]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    fa68:	ab0b      	add	r3, sp, #44	; 0x2c
    fa6a:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
    fa6e:	e9cd 2303 	strd	r2, r3, [sp, #12]
		.send_rel = pub->send_rel,
    fa72:	f3c1 1140 	ubfx	r1, r1, #5, #1
	struct bt_mesh_msg_ctx ctx = {
    fa76:	aa05      	add	r2, sp, #20
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    fa78:	9302      	str	r3, [sp, #8]
	struct bt_mesh_msg_ctx ctx = {
    fa7a:	2300      	movs	r3, #0
	};
	struct bt_mesh_net_tx tx = {
    fa7c:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
    fa80:	9307      	str	r3, [sp, #28]
    fa82:	e9cd 3305 	strd	r3, r3, [sp, #20]
    fa86:	f88d 101e 	strb.w	r1, [sp, #30]
	struct bt_mesh_net_tx tx = {
    fa8a:	9308      	str	r3, [sp, #32]
{
    fa8c:	4605      	mov	r5, r0
		.ctx = &ctx,
		.src = bt_mesh_model_elem(model)->addr,
    fa8e:	f7ff fe2f 	bl	f6f0 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
    fa92:	8803      	ldrh	r3, [r0, #0]
    fa94:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		.xmit = bt_mesh_net_transmit_get(),
    fa98:	f002 fa54 	bl	11f44 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
    fa9c:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a

	if (!pub) {
		return -ENOTSUP;
	}

	if (pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    faa0:	88a3      	ldrh	r3, [r4, #4]
    faa2:	b923      	cbnz	r3, faae <bt_mesh_model_publish+0x4e>
		return -EADDRNOTAVAIL;
    faa4:	f06f 0530 	mvn.w	r5, #48	; 0x30
		publish_retransmit_end(err, pub);
		return err;
	}

	return 0;
}
    faa8:	4628      	mov	r0, r5
    faaa:	b014      	add	sp, #80	; 0x50
    faac:	bd70      	pop	{r4, r5, r6, pc}
	key = bt_mesh_app_key_find(pub->key);
    faae:	88e0      	ldrh	r0, [r4, #6]
    fab0:	f3c0 000b 	ubfx	r0, r0, #0, #12
    fab4:	f7fe fcca 	bl	e44c <bt_mesh_app_key_find>
	if (!key) {
    fab8:	4606      	mov	r6, r0
    faba:	2800      	cmp	r0, #0
    fabc:	d0f2      	beq.n	faa4 <bt_mesh_model_publish+0x44>
	if (pub->msg->len + 4 > BT_MESH_TX_SDU_MAX) {
    fabe:	6923      	ldr	r3, [r4, #16]
    fac0:	889b      	ldrh	r3, [r3, #4]
    fac2:	3304      	adds	r3, #4
    fac4:	2b24      	cmp	r3, #36	; 0x24
    fac6:	dd0c      	ble.n	fae2 <bt_mesh_model_publish+0x82>
    fac8:	4b25      	ldr	r3, [pc, #148]	; (fb60 <bt_mesh_model_publish+0x100>)
    faca:	4926      	ldr	r1, [pc, #152]	; (fb64 <bt_mesh_model_publish+0x104>)
		BT_ERR("Message does not fit maximum SDU size");
    facc:	4826      	ldr	r0, [pc, #152]	; (fb68 <bt_mesh_model_publish+0x108>)
    face:	1ac9      	subs	r1, r1, r3
    fad0:	08c9      	lsrs	r1, r1, #3
    fad2:	0189      	lsls	r1, r1, #6
    fad4:	f041 0101 	orr.w	r1, r1, #1
    fad8:	f013 fc68 	bl	233ac <log_0>
		return -EMSGSIZE;
    fadc:	f06f 0523 	mvn.w	r5, #35	; 0x23
    fae0:	e7e2      	b.n	faa8 <bt_mesh_model_publish+0x48>
	if (pub->count) {
    fae2:	7ae3      	ldrb	r3, [r4, #11]
    fae4:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    fae8:	d003      	beq.n	faf2 <bt_mesh_model_publish+0x92>
		k_delayed_work_cancel(&pub->timer);
    faea:	f104 0018 	add.w	r0, r4, #24
    faee:	f012 fabb 	bl	22068 <k_delayed_work_cancel>
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    faf2:	6923      	ldr	r3, [r4, #16]
    faf4:	a802      	add	r0, sp, #8
    faf6:	6819      	ldr	r1, [r3, #0]
    faf8:	889a      	ldrh	r2, [r3, #4]
    fafa:	f018 f9f7 	bl	27eec <net_buf_simple_add_mem>
	ctx.addr = pub->addr;
    fafe:	88a3      	ldrh	r3, [r4, #4]
    fb00:	f8ad 3018 	strh.w	r3, [sp, #24]
	ctx.send_ttl = pub->ttl;
    fb04:	7a23      	ldrb	r3, [r4, #8]
    fb06:	f88d 301f 	strb.w	r3, [sp, #31]
	ctx.app_idx = key->app_idx;
    fb0a:	8873      	ldrh	r3, [r6, #2]
	ctx.net_idx = key->net_idx;
    fb0c:	8830      	ldrh	r0, [r6, #0]
	ctx.app_idx = key->app_idx;
    fb0e:	f8ad 3016 	strh.w	r3, [sp, #22]
	tx.friend_cred = pub->cred;
    fb12:	79e3      	ldrb	r3, [r4, #7]
    fb14:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
	ctx.net_idx = key->net_idx;
    fb18:	f8ad 0014 	strh.w	r0, [sp, #20]
	tx.friend_cred = pub->cred;
    fb1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
    fb20:	f363 0200 	bfi	r2, r3, #0, #1
    fb24:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
	tx.sub = bt_mesh_subnet_get(ctx.net_idx),
    fb28:	f7fc fe1c 	bl	c764 <bt_mesh_subnet_get>
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
    fb2c:	7ae3      	ldrb	r3, [r4, #11]
    fb2e:	7a62      	ldrb	r2, [r4, #9]
	tx.sub = bt_mesh_subnet_get(ctx.net_idx),
    fb30:	9008      	str	r0, [sp, #32]
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
    fb32:	f362 1347 	bfi	r3, r2, #5, #3
    fb36:	72e3      	strb	r3, [r4, #11]
	err = model_send(model, &tx, true, &sdu, &pub_sent_cb, model);
    fb38:	4b0c      	ldr	r3, [pc, #48]	; (fb6c <bt_mesh_model_publish+0x10c>)
    fb3a:	9501      	str	r5, [sp, #4]
    fb3c:	9300      	str	r3, [sp, #0]
    fb3e:	4628      	mov	r0, r5
    fb40:	ab02      	add	r3, sp, #8
    fb42:	2201      	movs	r2, #1
    fb44:	a908      	add	r1, sp, #32
    fb46:	f7ff fca9 	bl	f49c <model_send>
	if (err) {
    fb4a:	4605      	mov	r5, r0
    fb4c:	2800      	cmp	r0, #0
    fb4e:	d0ab      	beq.n	faa8 <bt_mesh_model_publish+0x48>
	pub->count = 0U;
    fb50:	7ae3      	ldrb	r3, [r4, #11]
	publish_sent(err, pub->mod);
    fb52:	6821      	ldr	r1, [r4, #0]
	pub->count = 0U;
    fb54:	f36f 1347 	bfc	r3, #5, #3
    fb58:	72e3      	strb	r3, [r4, #11]
	publish_sent(err, pub->mod);
    fb5a:	f7ff fd93 	bl	f684 <publish_sent>
}
    fb5e:	e7a3      	b.n	faa8 <bt_mesh_model_publish+0x48>
    fb60:	00028868 	.word	0x00028868
    fb64:	00028940 	.word	0x00028940
    fb68:	0002c977 	.word	0x0002c977
    fb6c:	000290d4 	.word	0x000290d4

0000fb70 <mod_publish>:
{
    fb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    fb74:	f850 8c18 	ldr.w	r8, [r0, #-24]
{
    fb78:	4604      	mov	r4, r0
    fb7a:	b092      	sub	sp, #72	; 0x48
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    fb7c:	4640      	mov	r0, r8
    fb7e:	f7ff fd5d 	bl	f63c <bt_mesh_model_pub_period_get>
	if (pub->count) {
    fb82:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    fb86:	f013 0fe0 	tst.w	r3, #224	; 0xe0
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    fb8a:	4607      	mov	r7, r0
	if (pub->count) {
    fb8c:	d068      	beq.n	fc60 <mod_publish+0xf0>
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    fb8e:	ab09      	add	r3, sp, #36	; 0x24
    fb90:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
    fb94:	e9cd 2301 	strd	r2, r3, [sp, #4]
	struct bt_mesh_msg_ctx ctx = {
    fb98:	2200      	movs	r2, #0
	struct bt_mesh_model_pub *pub = mod->pub;
    fb9a:	f8d8 5008 	ldr.w	r5, [r8, #8]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    fb9e:	9300      	str	r3, [sp, #0]
	struct bt_mesh_msg_ctx ctx = {
    fba0:	e9cd 2203 	strd	r2, r2, [sp, #12]
    fba4:	88a9      	ldrh	r1, [r5, #4]
    fba6:	f8cd 2013 	str.w	r2, [sp, #19]
    fbaa:	ab03      	add	r3, sp, #12
    fbac:	f8ad 1010 	strh.w	r1, [sp, #16]
		.src = bt_mesh_model_elem(mod)->addr,
    fbb0:	4640      	mov	r0, r8
	struct bt_mesh_msg_ctx ctx = {
    fbb2:	7a29      	ldrb	r1, [r5, #8]
    fbb4:	f88d 1017 	strb.w	r1, [sp, #23]
	struct bt_mesh_net_tx tx = {
    fbb8:	e9cd 3207 	strd	r3, r2, [sp, #28]
    fbbc:	9206      	str	r2, [sp, #24]
		.src = bt_mesh_model_elem(mod)->addr,
    fbbe:	f7ff fd97 	bl	f6f0 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
    fbc2:	8803      	ldrh	r3, [r0, #0]
    fbc4:	f8ad 3020 	strh.w	r3, [sp, #32]
		.xmit = bt_mesh_net_transmit_get(),
    fbc8:	f002 f9bc 	bl	11f44 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
    fbcc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
		.friend_cred = pub->cred,
    fbd0:	79eb      	ldrb	r3, [r5, #7]
	struct bt_mesh_net_tx tx = {
    fbd2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
	key = bt_mesh_app_key_find(pub->key);
    fbd6:	88e8      	ldrh	r0, [r5, #6]
		.friend_cred = pub->cred,
    fbd8:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx tx = {
    fbdc:	f363 0200 	bfi	r2, r3, #0, #1
	key = bt_mesh_app_key_find(pub->key);
    fbe0:	f3c0 000b 	ubfx	r0, r0, #0, #12
	struct bt_mesh_net_tx tx = {
    fbe4:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	key = bt_mesh_app_key_find(pub->key);
    fbe8:	f7fe fc30 	bl	e44c <bt_mesh_app_key_find>
	if (!key) {
    fbec:	4606      	mov	r6, r0
    fbee:	b9c0      	cbnz	r0, fc22 <mod_publish+0xb2>
		return -EADDRNOTAVAIL;
    fbf0:	f06f 0130 	mvn.w	r1, #48	; 0x30
    fbf4:	4b36      	ldr	r3, [pc, #216]	; (fcd0 <mod_publish+0x160>)
    fbf6:	4a37      	ldr	r2, [pc, #220]	; (fcd4 <mod_publish+0x164>)
			BT_ERR("Failed to retransmit (err %d)", err);
    fbf8:	4837      	ldr	r0, [pc, #220]	; (fcd8 <mod_publish+0x168>)
    fbfa:	1ad2      	subs	r2, r2, r3
    fbfc:	08d2      	lsrs	r2, r2, #3
    fbfe:	0192      	lsls	r2, r2, #6
    fc00:	f042 0201 	orr.w	r2, r2, #1
    fc04:	f013 fbdf 	bl	233c6 <log_1>
			pub->count = 0U;
    fc08:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    fc0c:	f36f 1347 	bfc	r3, #5, #3
    fc10:	f804 3c0d 	strb.w	r3, [r4, #-13]
			if (period_ms) {
    fc14:	b30f      	cbz	r7, fc5a <mod_publish+0xea>
    fc16:	463a      	mov	r2, r7
    fc18:	4621      	mov	r1, r4
    fc1a:	4830      	ldr	r0, [pc, #192]	; (fcdc <mod_publish+0x16c>)
    fc1c:	f012 f994 	bl	21f48 <k_delayed_work_submit_to_queue>
    fc20:	e01b      	b.n	fc5a <mod_publish+0xea>
	tx.sub = bt_mesh_subnet_get(key->net_idx);
    fc22:	8800      	ldrh	r0, [r0, #0]
    fc24:	f7fc fd9e 	bl	c764 <bt_mesh_subnet_get>
	ctx.net_idx = key->net_idx;
    fc28:	8833      	ldrh	r3, [r6, #0]
    fc2a:	f8ad 300c 	strh.w	r3, [sp, #12]
	ctx.app_idx = key->app_idx;
    fc2e:	8873      	ldrh	r3, [r6, #2]
    fc30:	f8ad 300e 	strh.w	r3, [sp, #14]
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    fc34:	692b      	ldr	r3, [r5, #16]
	tx.sub = bt_mesh_subnet_get(key->net_idx);
    fc36:	9006      	str	r0, [sp, #24]
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    fc38:	889a      	ldrh	r2, [r3, #4]
    fc3a:	6819      	ldr	r1, [r3, #0]
    fc3c:	4668      	mov	r0, sp
    fc3e:	f018 f955 	bl	27eec <net_buf_simple_add_mem>
	pub->count--;
    fc42:	7aeb      	ldrb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
    fc44:	4a26      	ldr	r2, [pc, #152]	; (fce0 <mod_publish+0x170>)
	pub->count--;
    fc46:	33e0      	adds	r3, #224	; 0xe0
    fc48:	72eb      	strb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
    fc4a:	4669      	mov	r1, sp
    fc4c:	4643      	mov	r3, r8
    fc4e:	a806      	add	r0, sp, #24
    fc50:	f7ff f9fe 	bl	f050 <bt_mesh_trans_send>
		if (err) {
    fc54:	4601      	mov	r1, r0
    fc56:	2800      	cmp	r0, #0
    fc58:	d1cc      	bne.n	fbf4 <mod_publish+0x84>
}
    fc5a:	b012      	add	sp, #72	; 0x48
    fc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!period_ms) {
    fc60:	2800      	cmp	r0, #0
    fc62:	d0fa      	beq.n	fc5a <mod_publish+0xea>
	__ASSERT_NO_MSG(pub->update != NULL);
    fc64:	f854 3c04 	ldr.w	r3, [r4, #-4]
    fc68:	b94b      	cbnz	r3, fc7e <mod_publish+0x10e>
    fc6a:	491e      	ldr	r1, [pc, #120]	; (fce4 <mod_publish+0x174>)
    fc6c:	481e      	ldr	r0, [pc, #120]	; (fce8 <mod_publish+0x178>)
    fc6e:	4a1f      	ldr	r2, [pc, #124]	; (fcec <mod_publish+0x17c>)
    fc70:	23e7      	movs	r3, #231	; 0xe7
    fc72:	f013 fb2a 	bl	232ca <printk>
    fc76:	481d      	ldr	r0, [pc, #116]	; (fcec <mod_publish+0x17c>)
    fc78:	21e7      	movs	r1, #231	; 0xe7
    fc7a:	f013 fb69 	bl	23350 <assert_post_action>
	err = pub->update(pub->mod);
    fc7e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    fc82:	f854 0c18 	ldr.w	r0, [r4, #-24]
    fc86:	4798      	blx	r3
	if (err) {
    fc88:	4605      	mov	r5, r0
    fc8a:	b178      	cbz	r0, fcac <mod_publish+0x13c>
		pub->period_start = k_uptime_get_32();
    fc8c:	f016 fe5e 	bl	2694c <k_uptime_get_32>
	pub->count = 0U;
    fc90:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
		pub->period_start = k_uptime_get_32();
    fc94:	f844 0c0c 	str.w	r0, [r4, #-12]
	pub->count = 0U;
    fc98:	f36f 1347 	bfc	r3, #5, #3
	publish_sent(err, pub->mod);
    fc9c:	f854 1c18 	ldr.w	r1, [r4, #-24]
	pub->count = 0U;
    fca0:	f804 3c0d 	strb.w	r3, [r4, #-13]
	publish_sent(err, pub->mod);
    fca4:	4628      	mov	r0, r5
    fca6:	f7ff fced 	bl	f684 <publish_sent>
}
    fcaa:	e7d6      	b.n	fc5a <mod_publish+0xea>
	err = bt_mesh_model_publish(pub->mod);
    fcac:	f854 0c18 	ldr.w	r0, [r4, #-24]
    fcb0:	f7ff fed6 	bl	fa60 <bt_mesh_model_publish>
	if (err) {
    fcb4:	4601      	mov	r1, r0
    fcb6:	2800      	cmp	r0, #0
    fcb8:	d0cf      	beq.n	fc5a <mod_publish+0xea>
    fcba:	4b05      	ldr	r3, [pc, #20]	; (fcd0 <mod_publish+0x160>)
    fcbc:	4a05      	ldr	r2, [pc, #20]	; (fcd4 <mod_publish+0x164>)
		BT_ERR("Publishing failed (err %d)", err);
    fcbe:	480c      	ldr	r0, [pc, #48]	; (fcf0 <mod_publish+0x180>)
    fcc0:	1ad2      	subs	r2, r2, r3
    fcc2:	08d2      	lsrs	r2, r2, #3
    fcc4:	0192      	lsls	r2, r2, #6
    fcc6:	f042 0201 	orr.w	r2, r2, #1
    fcca:	f013 fb7c 	bl	233c6 <log_1>
    fcce:	e7c4      	b.n	fc5a <mod_publish+0xea>
    fcd0:	00028868 	.word	0x00028868
    fcd4:	00028940 	.word	0x00028940
    fcd8:	0002c99d 	.word	0x0002c99d
    fcdc:	20001c08 	.word	0x20001c08
    fce0:	000290d4 	.word	0x000290d4
    fce4:	0002c9ed 	.word	0x0002c9ed
    fce8:	000297e6 	.word	0x000297e6
    fcec:	0002c9bb 	.word	0x0002c9bb
    fcf0:	0002ca08 	.word	0x0002ca08

0000fcf4 <bt_mesh_comp_get>:
}

const struct bt_mesh_comp *bt_mesh_comp_get(void)
{
	return dev_comp;
}
    fcf4:	4b01      	ldr	r3, [pc, #4]	; (fcfc <bt_mesh_comp_get+0x8>)
    fcf6:	6818      	ldr	r0, [r3, #0]
    fcf8:	4770      	bx	lr
    fcfa:	bf00      	nop
    fcfc:	20000984 	.word	0x20000984

0000fd00 <app_key_is_valid>:
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];

		if (key->net_idx != BT_MESH_KEY_UNUSED &&
    fd00:	4b0d      	ldr	r3, [pc, #52]	; (fd38 <app_key_is_valid+0x38>)
    fd02:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
    fd06:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fd0a:	4291      	cmp	r1, r2
    fd0c:	461a      	mov	r2, r3
    fd0e:	d003      	beq.n	fd18 <app_key_is_valid+0x18>
    fd10:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
    fd14:	4283      	cmp	r3, r0
    fd16:	d00b      	beq.n	fd30 <app_key_is_valid+0x30>
    fd18:	f8b2 10cc 	ldrh.w	r1, [r2, #204]	; 0xcc
    fd1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fd20:	4299      	cmp	r1, r3
    fd22:	d007      	beq.n	fd34 <app_key_is_valid+0x34>
    fd24:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
    fd28:	1a1b      	subs	r3, r3, r0
    fd2a:	4258      	negs	r0, r3
    fd2c:	4158      	adcs	r0, r3
    fd2e:	4770      	bx	lr
		    key->app_idx == app_idx) {
			return true;
    fd30:	2001      	movs	r0, #1
    fd32:	4770      	bx	lr
		}
	}

	return false;
    fd34:	2000      	movs	r0, #0
}
    fd36:	4770      	bx	lr
    fd38:	20006ab8 	.word	0x20006ab8

0000fd3c <node_identity_get>:
}

static void node_identity_get(struct bt_mesh_model *model,
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
    fd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd3e:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
    fd40:	ab02      	add	r3, sp, #8
{
    fd42:	4606      	mov	r6, r0
    fd44:	460f      	mov	r7, r1

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x len %u: %s",
	       ctx->net_idx, ctx->app_idx, ctx->addr, buf->len,
	       bt_hex(buf->data, buf->len));

	idx = net_buf_simple_pull_le16(buf);
    fd46:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
    fd48:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
    fd4c:	e9cd 1306 	strd	r1, r3, [sp, #24]
    fd50:	9305      	str	r3, [sp, #20]
	idx = net_buf_simple_pull_le16(buf);
    fd52:	f018 f8a3 	bl	27e9c <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
    fd56:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
    fd5a:	4605      	mov	r5, r0
	if (idx > 0xfff) {
    fd5c:	d30c      	bcc.n	fd78 <node_identity_get+0x3c>
    fd5e:	4a1f      	ldr	r2, [pc, #124]	; (fddc <node_identity_get+0xa0>)
    fd60:	4b1f      	ldr	r3, [pc, #124]	; (fde0 <node_identity_get+0xa4>)
    fd62:	1ad2      	subs	r2, r2, r3
    fd64:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
    fd66:	0192      	lsls	r2, r2, #6
    fd68:	4601      	mov	r1, r0
    fd6a:	f042 0201 	orr.w	r2, r2, #1
    fd6e:	481d      	ldr	r0, [pc, #116]	; (fde4 <node_identity_get+0xa8>)
    fd70:	f013 fb29 	bl	233c6 <log_1>
	net_buf_simple_add_u8(&msg, node_id);

	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
		BT_ERR("Unable to send Node Identity Status");
	}
}
    fd74:	b009      	add	sp, #36	; 0x24
    fd76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
    fd78:	f248 0148 	movw	r1, #32840	; 0x8048
    fd7c:	a805      	add	r0, sp, #20
    fd7e:	f016 fe1c 	bl	269ba <bt_mesh_model_msg_init>
	sub = bt_mesh_subnet_get(idx);
    fd82:	4628      	mov	r0, r5
    fd84:	f7fc fcee 	bl	c764 <bt_mesh_subnet_get>
	if (!sub) {
    fd88:	4604      	mov	r4, r0
    fd8a:	b9f8      	cbnz	r0, fdcc <node_identity_get+0x90>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_NETKEY);
    fd8c:	2104      	movs	r1, #4
    fd8e:	a805      	add	r0, sp, #20
    fd90:	f018 f8b8 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
    fd94:	4629      	mov	r1, r5
    fd96:	a805      	add	r0, sp, #20
    fd98:	f018 f8bb 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, node_id);
    fd9c:	4621      	mov	r1, r4
    fd9e:	a805      	add	r0, sp, #20
    fda0:	f018 f8b0 	bl	27f04 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    fda4:	2300      	movs	r3, #0
    fda6:	9300      	str	r3, [sp, #0]
    fda8:	aa05      	add	r2, sp, #20
    fdaa:	4639      	mov	r1, r7
    fdac:	4630      	mov	r0, r6
    fdae:	f016 fe2d 	bl	26a0c <bt_mesh_model_send>
    fdb2:	2800      	cmp	r0, #0
    fdb4:	d0de      	beq.n	fd74 <node_identity_get+0x38>
    fdb6:	4b0a      	ldr	r3, [pc, #40]	; (fde0 <node_identity_get+0xa4>)
    fdb8:	4908      	ldr	r1, [pc, #32]	; (fddc <node_identity_get+0xa0>)
		BT_ERR("Unable to send Node Identity Status");
    fdba:	480b      	ldr	r0, [pc, #44]	; (fde8 <node_identity_get+0xac>)
    fdbc:	1ac9      	subs	r1, r1, r3
    fdbe:	08c9      	lsrs	r1, r1, #3
    fdc0:	0189      	lsls	r1, r1, #6
    fdc2:	f041 0101 	orr.w	r1, r1, #1
    fdc6:	f013 faf1 	bl	233ac <log_0>
    fdca:	e7d3      	b.n	fd74 <node_identity_get+0x38>
		net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
    fdcc:	2100      	movs	r1, #0
    fdce:	a805      	add	r0, sp, #20
    fdd0:	f018 f898 	bl	27f04 <net_buf_simple_add_u8>
		node_id = sub->node_id;
    fdd4:	f894 4020 	ldrb.w	r4, [r4, #32]
    fdd8:	e7dc      	b.n	fd94 <node_identity_get+0x58>
    fdda:	bf00      	nop
    fddc:	00028960 	.word	0x00028960
    fde0:	00028868 	.word	0x00028868
    fde4:	0002ca32 	.word	0x0002ca32
    fde8:	0002ca4d 	.word	0x0002ca4d

0000fdec <app_key_get>:
{
    fdec:	b5f0      	push	{r4, r5, r6, r7, lr}
    fdee:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
    fdf0:	ab02      	add	r3, sp, #8
{
    fdf2:	4605      	mov	r5, r0
    fdf4:	460e      	mov	r6, r1
	get_idx = net_buf_simple_pull_le16(buf);
    fdf6:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
    fdf8:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
    fdfc:	e9cd 1306 	strd	r1, r3, [sp, #24]
    fe00:	9305      	str	r3, [sp, #20]
	get_idx = net_buf_simple_pull_le16(buf);
    fe02:	f018 f84b 	bl	27e9c <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
    fe06:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
    fe0a:	4604      	mov	r4, r0
	if (get_idx > 0xfff) {
    fe0c:	d30c      	bcc.n	fe28 <app_key_get+0x3c>
    fe0e:	4a2a      	ldr	r2, [pc, #168]	; (feb8 <app_key_get+0xcc>)
    fe10:	4b2a      	ldr	r3, [pc, #168]	; (febc <app_key_get+0xd0>)
    fe12:	1ad2      	subs	r2, r2, r3
    fe14:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid NetKeyIndex 0x%04x", get_idx);
    fe16:	0192      	lsls	r2, r2, #6
    fe18:	4601      	mov	r1, r0
    fe1a:	f042 0201 	orr.w	r2, r2, #1
    fe1e:	4828      	ldr	r0, [pc, #160]	; (fec0 <app_key_get+0xd4>)
    fe20:	f013 fad1 	bl	233c6 <log_1>
}
    fe24:	b009      	add	sp, #36	; 0x24
    fe26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_LIST);
    fe28:	f248 0102 	movw	r1, #32770	; 0x8002
    fe2c:	a805      	add	r0, sp, #20
    fe2e:	f016 fdc4 	bl	269ba <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_get(get_idx)) {
    fe32:	4620      	mov	r0, r4
    fe34:	f7fc fc96 	bl	c764 <bt_mesh_subnet_get>
		status = STATUS_SUCCESS;
    fe38:	2800      	cmp	r0, #0
    fe3a:	bf0c      	ite	eq
    fe3c:	2704      	moveq	r7, #4
    fe3e:	2700      	movne	r7, #0
	net_buf_simple_add_u8(&msg, status);
    fe40:	4639      	mov	r1, r7
    fe42:	a805      	add	r0, sp, #20
    fe44:	f018 f85e 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, get_idx);
    fe48:	4621      	mov	r1, r4
    fe4a:	a805      	add	r0, sp, #20
    fe4c:	f018 f861 	bl	27f12 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
    fe50:	b9af      	cbnz	r7, fe7e <app_key_get+0x92>
		if (key->net_idx != get_idx) {
    fe52:	4b1c      	ldr	r3, [pc, #112]	; (fec4 <app_key_get+0xd8>)
    fe54:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
    fe58:	42a2      	cmp	r2, r4
    fe5a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
			prev = key->app_idx;
    fe5e:	bf0c      	ite	eq
    fe60:	f8b3 10a6 	ldrheq.w	r1, [r3, #166]	; 0xa6
	prev = BT_MESH_KEY_UNUSED;
    fe64:	f64f 71ff 	movwne	r1, #65535	; 0xffff
		if (key->net_idx != get_idx) {
    fe68:	42a2      	cmp	r2, r4
    fe6a:	d11d      	bne.n	fea8 <app_key_get+0xbc>
		if (prev == BT_MESH_KEY_UNUSED) {
    fe6c:	f8b3 20ce 	ldrh.w	r2, [r3, #206]	; 0xce
    fe70:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fe74:	4299      	cmp	r1, r3
    fe76:	d016      	beq.n	fea6 <app_key_get+0xba>
		key_idx_pack(&msg, prev, key->app_idx);
    fe78:	a805      	add	r0, sp, #20
    fe7a:	f016 fe19 	bl	26ab0 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    fe7e:	2300      	movs	r3, #0
    fe80:	9300      	str	r3, [sp, #0]
    fe82:	aa05      	add	r2, sp, #20
    fe84:	4631      	mov	r1, r6
    fe86:	4628      	mov	r0, r5
    fe88:	f016 fdc0 	bl	26a0c <bt_mesh_model_send>
    fe8c:	2800      	cmp	r0, #0
    fe8e:	d0c9      	beq.n	fe24 <app_key_get+0x38>
    fe90:	4b0a      	ldr	r3, [pc, #40]	; (febc <app_key_get+0xd0>)
    fe92:	4909      	ldr	r1, [pc, #36]	; (feb8 <app_key_get+0xcc>)
		BT_ERR("Unable to send AppKey List");
    fe94:	480c      	ldr	r0, [pc, #48]	; (fec8 <app_key_get+0xdc>)
    fe96:	1ac9      	subs	r1, r1, r3
    fe98:	08c9      	lsrs	r1, r1, #3
    fe9a:	0189      	lsls	r1, r1, #6
    fe9c:	f041 0101 	orr.w	r1, r1, #1
    fea0:	f013 fa84 	bl	233ac <log_0>
    fea4:	e7be      	b.n	fe24 <app_key_get+0x38>
			prev = key->app_idx;
    fea6:	4611      	mov	r1, r2
	if (prev != BT_MESH_KEY_UNUSED) {
    fea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    feac:	4299      	cmp	r1, r3
    feae:	d0e6      	beq.n	fe7e <app_key_get+0x92>
		net_buf_simple_add_le16(&msg, prev);
    feb0:	a805      	add	r0, sp, #20
    feb2:	f018 f82e 	bl	27f12 <net_buf_simple_add_le16>
    feb6:	e7e2      	b.n	fe7e <app_key_get+0x92>
    feb8:	00028960 	.word	0x00028960
    febc:	00028868 	.word	0x00028868
    fec0:	0002ca32 	.word	0x0002ca32
    fec4:	20006ab8 	.word	0x20006ab8
    fec8:	0002ca71 	.word	0x0002ca71

0000fecc <hb_pub_send_status>:
} __packed;

static void hb_pub_send_status(struct bt_mesh_model *model,
			       struct bt_mesh_msg_ctx *ctx, u8_t status,
			       struct hb_pub_param *orig_msg)
{
    fecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fed0:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    fed2:	69c4      	ldr	r4, [r0, #28]
{
    fed4:	4690      	mov	r8, r2
    fed6:	461f      	mov	r7, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
    fed8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    fedc:	ab06      	add	r3, sp, #24
{
    fede:	4605      	mov	r5, r0
    fee0:	460e      	mov	r6, r1

	BT_DBG("src 0x%04x status 0x%02x", ctx->addr, status);

	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
    fee2:	a803      	add	r0, sp, #12
    fee4:	2106      	movs	r1, #6
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
    fee6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    feea:	9303      	str	r3, [sp, #12]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
    feec:	f016 fd65 	bl	269ba <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(&msg, status);
    fef0:	4641      	mov	r1, r8
    fef2:	a803      	add	r0, sp, #12
    fef4:	f018 f806 	bl	27f04 <net_buf_simple_add_u8>

	if (orig_msg) {
    fef8:	b1e7      	cbz	r7, ff34 <hb_pub_send_status+0x68>
		memcpy(net_buf_simple_add(&msg, sizeof(*orig_msg)), orig_msg,
    fefa:	2109      	movs	r1, #9
    fefc:	a803      	add	r0, sp, #12
    fefe:	f00e fb8d 	bl	1e61c <net_buf_simple_add>
    ff02:	2209      	movs	r2, #9
    ff04:	4639      	mov	r1, r7
    ff06:	f015 f8c3 	bl	25090 <memcpy>
	net_buf_simple_add_u8(&msg, cfg->hb_pub.ttl);
	net_buf_simple_add_le16(&msg, cfg->hb_pub.feat);
	net_buf_simple_add_le16(&msg, cfg->hb_pub.net_idx);

send:
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    ff0a:	2300      	movs	r3, #0
    ff0c:	9300      	str	r3, [sp, #0]
    ff0e:	aa03      	add	r2, sp, #12
    ff10:	4631      	mov	r1, r6
    ff12:	4628      	mov	r0, r5
    ff14:	f016 fd7a 	bl	26a0c <bt_mesh_model_send>
    ff18:	b148      	cbz	r0, ff2e <hb_pub_send_status+0x62>
    ff1a:	491c      	ldr	r1, [pc, #112]	; (ff8c <hb_pub_send_status+0xc0>)
    ff1c:	4b1c      	ldr	r3, [pc, #112]	; (ff90 <hb_pub_send_status+0xc4>)
		BT_ERR("Unable to send Heartbeat Publication Status");
    ff1e:	481d      	ldr	r0, [pc, #116]	; (ff94 <hb_pub_send_status+0xc8>)
    ff20:	1ac9      	subs	r1, r1, r3
    ff22:	08c9      	lsrs	r1, r1, #3
    ff24:	0189      	lsls	r1, r1, #6
    ff26:	f041 0101 	orr.w	r1, r1, #1
    ff2a:	f013 fa3f 	bl	233ac <log_0>
	}
}
    ff2e:	b00a      	add	sp, #40	; 0x28
    ff30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_simple_add_le16(&msg, cfg->hb_pub.dst);
    ff34:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    ff36:	a803      	add	r0, sp, #12
    ff38:	f017 ffeb 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, hb_pub_count_log(cfg->hb_pub.count));
    ff3c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (!val) {
    ff3e:	b171      	cbz	r1, ff5e <hb_pub_send_status+0x92>
	} else if (val == 0x01) {
    ff40:	2901      	cmp	r1, #1
    ff42:	d00c      	beq.n	ff5e <hb_pub_send_status+0x92>
	} else if (val == 0xffff) {
    ff44:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ff48:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
    ff4a:	bf1f      	itttt	ne
    ff4c:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
    ff50:	fab1 f181 	clzne	r1, r1
    ff54:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
    ff58:	b2c9      	uxtbne	r1, r1
		return 0xff;
    ff5a:	bf08      	it	eq
    ff5c:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_pub_count_log(cfg->hb_pub.count));
    ff5e:	a803      	add	r0, sp, #12
    ff60:	f017 ffd0 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_pub.period);
    ff64:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    ff68:	a803      	add	r0, sp, #12
    ff6a:	f017 ffcb 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_pub.ttl);
    ff6e:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
    ff72:	a803      	add	r0, sp, #12
    ff74:	f017 ffc6 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, cfg->hb_pub.feat);
    ff78:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    ff7a:	a803      	add	r0, sp, #12
    ff7c:	f017 ffc9 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, cfg->hb_pub.net_idx);
    ff80:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    ff82:	a803      	add	r0, sp, #12
    ff84:	f017 ffc5 	bl	27f12 <net_buf_simple_add_le16>
    ff88:	e7bf      	b.n	ff0a <hb_pub_send_status+0x3e>
    ff8a:	bf00      	nop
    ff8c:	00028960 	.word	0x00028960
    ff90:	00028868 	.word	0x00028868
    ff94:	0002ca8c 	.word	0x0002ca8c

0000ff98 <send_mod_sub_status>:
{
    ff98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ff9c:	b08b      	sub	sp, #44	; 0x2c
    ff9e:	4617      	mov	r7, r2
    ffa0:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
    ffa2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    ffa6:	ab06      	add	r3, sp, #24
{
    ffa8:	4604      	mov	r4, r0
    ffaa:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
    ffac:	a803      	add	r0, sp, #12
    ffae:	f248 011f 	movw	r1, #32799	; 0x801f
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
    ffb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    ffb6:	9303      	str	r3, [sp, #12]
{
    ffb8:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
    ffbc:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
    ffc0:	f016 fcfb 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
    ffc4:	4639      	mov	r1, r7
    ffc6:	a803      	add	r0, sp, #12
    ffc8:	f017 ff9c 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
    ffcc:	4631      	mov	r1, r6
    ffce:	a803      	add	r0, sp, #12
    ffd0:	f017 ff9f 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub_addr);
    ffd4:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
    ffd8:	a803      	add	r0, sp, #12
    ffda:	f017 ff9a 	bl	27f12 <net_buf_simple_add_le16>
	if (vnd) {
    ffde:	f1b9 0f00 	cmp.w	r9, #0
    ffe2:	d01c      	beq.n	1001e <__kernel_ram_size+0x1e>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
    ffe4:	2104      	movs	r1, #4
    ffe6:	a803      	add	r0, sp, #12
    ffe8:	f00e fb18 	bl	1e61c <net_buf_simple_add>
    ffec:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
    ffee:	4641      	mov	r1, r8
    fff0:	f015 f84e 	bl	25090 <memcpy>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    fff4:	2300      	movs	r3, #0
    fff6:	9300      	str	r3, [sp, #0]
    fff8:	aa03      	add	r2, sp, #12
    fffa:	4629      	mov	r1, r5
    fffc:	4620      	mov	r0, r4
    fffe:	f016 fd05 	bl	26a0c <bt_mesh_model_send>
   10002:	b148      	cbz	r0, 10018 <__kernel_ram_size+0x18>
   10004:	4909      	ldr	r1, [pc, #36]	; (1002c <__kernel_ram_size+0x2c>)
   10006:	4b0a      	ldr	r3, [pc, #40]	; (10030 <__kernel_ram_size+0x30>)
		BT_ERR("Unable to send Model Subscription Status");
   10008:	480a      	ldr	r0, [pc, #40]	; (10034 <__kernel_ram_size+0x34>)
   1000a:	1ac9      	subs	r1, r1, r3
   1000c:	08c9      	lsrs	r1, r1, #3
   1000e:	0189      	lsls	r1, r1, #6
   10010:	f041 0101 	orr.w	r1, r1, #1
   10014:	f013 f9ca 	bl	233ac <log_0>
}
   10018:	b00b      	add	sp, #44	; 0x2c
   1001a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   1001e:	2102      	movs	r1, #2
   10020:	a803      	add	r0, sp, #12
   10022:	f00e fafb 	bl	1e61c <net_buf_simple_add>
   10026:	2202      	movs	r2, #2
   10028:	e7e1      	b.n	ffee <send_mod_sub_status+0x56>
   1002a:	bf00      	nop
   1002c:	00028960 	.word	0x00028960
   10030:	00028868 	.word	0x00028868
   10034:	0002cab8 	.word	0x0002cab8

00010038 <node_reset>:
{
   10038:	b530      	push	{r4, r5, lr}
   1003a:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   1003c:	ab03      	add	r3, sp, #12
   1003e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
{
   10042:	4604      	mov	r4, r0
   10044:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   10046:	a805      	add	r0, sp, #20
   10048:	f248 014a 	movw	r1, #32842	; 0x804a
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   1004c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10050:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   10052:	f016 fcb2 	bl	269ba <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10056:	2300      	movs	r3, #0
   10058:	9300      	str	r3, [sp, #0]
   1005a:	aa05      	add	r2, sp, #20
   1005c:	4629      	mov	r1, r5
   1005e:	4620      	mov	r0, r4
   10060:	f016 fcd4 	bl	26a0c <bt_mesh_model_send>
   10064:	b148      	cbz	r0, 1007a <node_reset+0x42>
   10066:	4907      	ldr	r1, [pc, #28]	; (10084 <node_reset+0x4c>)
   10068:	4b07      	ldr	r3, [pc, #28]	; (10088 <node_reset+0x50>)
		BT_ERR("Unable to send Node Reset Status");
   1006a:	4808      	ldr	r0, [pc, #32]	; (1008c <node_reset+0x54>)
   1006c:	1ac9      	subs	r1, r1, r3
   1006e:	08c9      	lsrs	r1, r1, #3
   10070:	0189      	lsls	r1, r1, #6
   10072:	f041 0101 	orr.w	r1, r1, #1
   10076:	f013 f999 	bl	233ac <log_0>
	bt_mesh_reset();
   1007a:	f7fb fd1d 	bl	bab8 <bt_mesh_reset>
}
   1007e:	b009      	add	sp, #36	; 0x24
   10080:	bd30      	pop	{r4, r5, pc}
   10082:	bf00      	nop
   10084:	00028960 	.word	0x00028960
   10088:	00028868 	.word	0x00028868
   1008c:	0002cae1 	.word	0x0002cae1

00010090 <node_identity_set>:
{
   10090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10094:	4615      	mov	r5, r2
   10096:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   10098:	ab02      	add	r3, sp, #8
   1009a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
{
   1009e:	4607      	mov	r7, r0
	idx = net_buf_simple_pull_le16(buf);
   100a0:	4628      	mov	r0, r5
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   100a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
   100a6:	4688      	mov	r8, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   100a8:	9305      	str	r3, [sp, #20]
	idx = net_buf_simple_pull_le16(buf);
   100aa:	f017 fef7 	bl	27e9c <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   100ae:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   100b2:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   100b4:	d30d      	bcc.n	100d2 <node_identity_set+0x42>
   100b6:	4a2e      	ldr	r2, [pc, #184]	; (10170 <node_identity_set+0xe0>)
   100b8:	4b2e      	ldr	r3, [pc, #184]	; (10174 <node_identity_set+0xe4>)
   100ba:	1ad2      	subs	r2, r2, r3
   100bc:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Invalid NetKeyIndex 0x%04x", idx);
   100be:	0192      	lsls	r2, r2, #6
   100c0:	4601      	mov	r1, r0
   100c2:	482d      	ldr	r0, [pc, #180]	; (10178 <node_identity_set+0xe8>)
   100c4:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   100c8:	f013 f97d 	bl	233c6 <log_1>
}
   100cc:	b008      	add	sp, #32
   100ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node_id = net_buf_simple_pull_u8(buf);
   100d2:	4628      	mov	r0, r5
   100d4:	f017 feda 	bl	27e8c <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
   100d8:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
   100da:	4606      	mov	r6, r0
	if (node_id != 0x00 && node_id != 0x01) {
   100dc:	d909      	bls.n	100f2 <node_identity_set+0x62>
   100de:	4a24      	ldr	r2, [pc, #144]	; (10170 <node_identity_set+0xe0>)
   100e0:	4b24      	ldr	r3, [pc, #144]	; (10174 <node_identity_set+0xe4>)
   100e2:	1ad2      	subs	r2, r2, r3
   100e4:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   100e6:	0192      	lsls	r2, r2, #6
   100e8:	4601      	mov	r1, r0
   100ea:	f042 0202 	orr.w	r2, r2, #2
   100ee:	4823      	ldr	r0, [pc, #140]	; (1017c <node_identity_set+0xec>)
   100f0:	e7ea      	b.n	100c8 <node_identity_set+0x38>
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   100f2:	f248 0148 	movw	r1, #32840	; 0x8048
   100f6:	a805      	add	r0, sp, #20
   100f8:	f016 fc5f 	bl	269ba <bt_mesh_model_msg_init>
	sub = bt_mesh_subnet_get(idx);
   100fc:	4620      	mov	r0, r4
   100fe:	f7fc fb31 	bl	c764 <bt_mesh_subnet_get>
	if (!sub) {
   10102:	4605      	mov	r5, r0
   10104:	b9f8      	cbnz	r0, 10146 <node_identity_set+0xb6>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_NETKEY);
   10106:	2104      	movs	r1, #4
   10108:	a805      	add	r0, sp, #20
   1010a:	f017 fefb 	bl	27f04 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, idx);
   1010e:	4621      	mov	r1, r4
   10110:	a805      	add	r0, sp, #20
   10112:	f017 fefe 	bl	27f12 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, node_id);
   10116:	4631      	mov	r1, r6
		net_buf_simple_add_u8(&msg, sub->node_id);
   10118:	a805      	add	r0, sp, #20
   1011a:	f017 fef3 	bl	27f04 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1011e:	2300      	movs	r3, #0
   10120:	9300      	str	r3, [sp, #0]
   10122:	aa05      	add	r2, sp, #20
   10124:	4641      	mov	r1, r8
   10126:	4638      	mov	r0, r7
   10128:	f016 fc70 	bl	26a0c <bt_mesh_model_send>
   1012c:	2800      	cmp	r0, #0
   1012e:	d0cd      	beq.n	100cc <node_identity_set+0x3c>
   10130:	4b10      	ldr	r3, [pc, #64]	; (10174 <node_identity_set+0xe4>)
   10132:	490f      	ldr	r1, [pc, #60]	; (10170 <node_identity_set+0xe0>)
		BT_ERR("Unable to send Node Identity Status");
   10134:	4812      	ldr	r0, [pc, #72]	; (10180 <node_identity_set+0xf0>)
   10136:	1ac9      	subs	r1, r1, r3
   10138:	08c9      	lsrs	r1, r1, #3
   1013a:	0189      	lsls	r1, r1, #6
   1013c:	f041 0101 	orr.w	r1, r1, #1
   10140:	f013 f934 	bl	233ac <log_0>
   10144:	e7c2      	b.n	100cc <node_identity_set+0x3c>
		net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   10146:	2100      	movs	r1, #0
   10148:	a805      	add	r0, sp, #20
   1014a:	f017 fedb 	bl	27f04 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, idx);
   1014e:	a805      	add	r0, sp, #20
   10150:	4621      	mov	r1, r4
   10152:	f017 fede 	bl	27f12 <net_buf_simple_add_le16>
				bt_mesh_proxy_identity_start(sub);
   10156:	4628      	mov	r0, r5
			if (node_id) {
   10158:	b136      	cbz	r6, 10168 <node_identity_set+0xd8>
				bt_mesh_proxy_identity_start(sub);
   1015a:	f006 fe2f 	bl	16dbc <bt_mesh_proxy_identity_start>
			bt_mesh_adv_update();
   1015e:	f7fb fe6f 	bl	be40 <bt_mesh_adv_update>
		net_buf_simple_add_u8(&msg, sub->node_id);
   10162:	f895 1020 	ldrb.w	r1, [r5, #32]
   10166:	e7d7      	b.n	10118 <node_identity_set+0x88>
				bt_mesh_proxy_identity_stop(sub);
   10168:	f016 ffe3 	bl	27132 <bt_mesh_proxy_identity_stop>
   1016c:	e7f7      	b.n	1015e <node_identity_set+0xce>
   1016e:	bf00      	nop
   10170:	00028960 	.word	0x00028960
   10174:	00028868 	.word	0x00028868
   10178:	0002ca32 	.word	0x0002ca32
   1017c:	0002cb02 	.word	0x0002cb02
   10180:	0002ca4d 	.word	0x0002ca4d

00010184 <mod_sub_get_vnd>:
{
   10184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10188:	4615      	mov	r5, r2
   1018a:	b08f      	sub	sp, #60	; 0x3c
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   1018c:	ab05      	add	r3, sp, #20
   1018e:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
{
   10192:	4607      	mov	r7, r0
	addr = net_buf_simple_pull_le16(buf);
   10194:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   10196:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1019a:	9302      	str	r3, [sp, #8]
{
   1019c:	4688      	mov	r8, r1
	addr = net_buf_simple_pull_le16(buf);
   1019e:	f017 fe7d 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   101a2:	b203      	sxth	r3, r0
   101a4:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   101a6:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   101a8:	dc0c      	bgt.n	101c4 <mod_sub_get_vnd+0x40>
   101aa:	4930      	ldr	r1, [pc, #192]	; (1026c <mod_sub_get_vnd+0xe8>)
   101ac:	4b30      	ldr	r3, [pc, #192]	; (10270 <mod_sub_get_vnd+0xec>)
		BT_WARN("Prohibited element address");
   101ae:	4831      	ldr	r0, [pc, #196]	; (10274 <mod_sub_get_vnd+0xf0>)
   101b0:	1ac9      	subs	r1, r1, r3
   101b2:	08c9      	lsrs	r1, r1, #3
   101b4:	0189      	lsls	r1, r1, #6
   101b6:	f041 0102 	orr.w	r1, r1, #2
		BT_ERR("Unable to send Vendor Model Subscription List");
   101ba:	f013 f8f7 	bl	233ac <log_0>
}
   101be:	b00f      	add	sp, #60	; 0x3c
   101c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	company = net_buf_simple_pull_le16(buf);
   101c4:	4628      	mov	r0, r5
   101c6:	f017 fe69 	bl	27e9c <net_buf_simple_pull_le16>
   101ca:	4606      	mov	r6, r0
	id = net_buf_simple_pull_le16(buf);
   101cc:	4628      	mov	r0, r5
   101ce:	f017 fe65 	bl	27e9c <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   101d2:	f248 012c 	movw	r1, #32812	; 0x802c
	id = net_buf_simple_pull_le16(buf);
   101d6:	4605      	mov	r5, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   101d8:	a802      	add	r0, sp, #8
   101da:	f016 fbee 	bl	269ba <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   101de:	4620      	mov	r0, r4
   101e0:	f7ff fb0e 	bl	f800 <bt_mesh_elem_find>
	if (!elem) {
   101e4:	bb08      	cbnz	r0, 1022a <mod_sub_get_vnd+0xa6>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   101e6:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   101e8:	a802      	add	r0, sp, #8
   101ea:	f017 fe8b 	bl	27f04 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   101ee:	4621      	mov	r1, r4
   101f0:	a802      	add	r0, sp, #8
   101f2:	f017 fe8e 	bl	27f12 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, company);
   101f6:	4631      	mov	r1, r6
   101f8:	a802      	add	r0, sp, #8
   101fa:	f017 fe8a 	bl	27f12 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   101fe:	4629      	mov	r1, r5
   10200:	a802      	add	r0, sp, #8
   10202:	f017 fe86 	bl	27f12 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10206:	2300      	movs	r3, #0
   10208:	9300      	str	r3, [sp, #0]
   1020a:	aa02      	add	r2, sp, #8
   1020c:	4641      	mov	r1, r8
   1020e:	4638      	mov	r0, r7
   10210:	f016 fbfc 	bl	26a0c <bt_mesh_model_send>
   10214:	2800      	cmp	r0, #0
   10216:	d0d2      	beq.n	101be <mod_sub_get_vnd+0x3a>
   10218:	4914      	ldr	r1, [pc, #80]	; (1026c <mod_sub_get_vnd+0xe8>)
   1021a:	4b15      	ldr	r3, [pc, #84]	; (10270 <mod_sub_get_vnd+0xec>)
		BT_ERR("Unable to send Vendor Model Subscription List");
   1021c:	4816      	ldr	r0, [pc, #88]	; (10278 <mod_sub_get_vnd+0xf4>)
   1021e:	1ac9      	subs	r1, r1, r3
   10220:	08c9      	lsrs	r1, r1, #3
   10222:	0189      	lsls	r1, r1, #6
   10224:	f041 0101 	orr.w	r1, r1, #1
   10228:	e7c7      	b.n	101ba <mod_sub_get_vnd+0x36>
	mod = bt_mesh_model_find_vnd(elem, company, id);
   1022a:	462a      	mov	r2, r5
   1022c:	4631      	mov	r1, r6
   1022e:	f016 fc13 	bl	26a58 <bt_mesh_model_find_vnd>
	if (!mod) {
   10232:	4681      	mov	r9, r0
   10234:	b908      	cbnz	r0, 1023a <mod_sub_get_vnd+0xb6>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   10236:	2102      	movs	r1, #2
   10238:	e7d6      	b.n	101e8 <mod_sub_get_vnd+0x64>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   1023a:	2100      	movs	r1, #0
   1023c:	a802      	add	r0, sp, #8
   1023e:	f017 fe61 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   10242:	4621      	mov	r1, r4
   10244:	a802      	add	r0, sp, #8
   10246:	f017 fe64 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, company);
   1024a:	4631      	mov	r1, r6
   1024c:	a802      	add	r0, sp, #8
   1024e:	f017 fe60 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   10252:	4629      	mov	r1, r5
   10254:	a802      	add	r0, sp, #8
   10256:	f017 fe5c 	bl	27f12 <net_buf_simple_add_le16>
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_list_visitor,
   1025a:	4648      	mov	r0, r9
   1025c:	f016 fc24 	bl	26aa8 <bt_mesh_model_root>
   10260:	4906      	ldr	r1, [pc, #24]	; (1027c <mod_sub_get_vnd+0xf8>)
   10262:	aa02      	add	r2, sp, #8
   10264:	f016 fc21 	bl	26aaa <bt_mesh_model_tree_walk>
   10268:	e7cd      	b.n	10206 <mod_sub_get_vnd+0x82>
   1026a:	bf00      	nop
   1026c:	00028960 	.word	0x00028960
   10270:	00028868 	.word	0x00028868
   10274:	0002cb1f 	.word	0x0002cb1f
   10278:	0002cb3a 	.word	0x0002cb3a
   1027c:	00011005 	.word	0x00011005

00010280 <mod_sub_get>:
{
   10280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10284:	4614      	mov	r4, r2
   10286:	b091      	sub	sp, #68	; 0x44
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   10288:	ab07      	add	r3, sp, #28
   1028a:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
{
   1028e:	4680      	mov	r8, r0
	addr = net_buf_simple_pull_le16(buf);
   10290:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   10292:	e9cd 2305 	strd	r2, r3, [sp, #20]
   10296:	9304      	str	r3, [sp, #16]
{
   10298:	4689      	mov	r9, r1
	addr = net_buf_simple_pull_le16(buf);
   1029a:	f017 fdff 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1029e:	b203      	sxth	r3, r0
   102a0:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   102a2:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   102a4:	dc0c      	bgt.n	102c0 <mod_sub_get+0x40>
   102a6:	492c      	ldr	r1, [pc, #176]	; (10358 <mod_sub_get+0xd8>)
   102a8:	4b2c      	ldr	r3, [pc, #176]	; (1035c <mod_sub_get+0xdc>)
		BT_WARN("Prohibited element address");
   102aa:	482d      	ldr	r0, [pc, #180]	; (10360 <mod_sub_get+0xe0>)
   102ac:	1ac9      	subs	r1, r1, r3
   102ae:	08c9      	lsrs	r1, r1, #3
   102b0:	0189      	lsls	r1, r1, #6
   102b2:	f041 0102 	orr.w	r1, r1, #2
		BT_ERR("Unable to send Model Subscription List");
   102b6:	f013 f879 	bl	233ac <log_0>
}
   102ba:	b011      	add	sp, #68	; 0x44
   102bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	id = net_buf_simple_pull_le16(buf);
   102c0:	4620      	mov	r0, r4
   102c2:	f017 fdeb 	bl	27e9c <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   102c6:	ac04      	add	r4, sp, #16
	id = net_buf_simple_pull_le16(buf);
   102c8:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   102ca:	f248 012a 	movw	r1, #32810	; 0x802a
   102ce:	4620      	mov	r0, r4
   102d0:	f016 fb73 	bl	269ba <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   102d4:	4628      	mov	r0, r5
   102d6:	f7ff fa93 	bl	f800 <bt_mesh_elem_find>
	if (!elem) {
   102da:	b9e8      	cbnz	r0, 10318 <mod_sub_get+0x98>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   102dc:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   102de:	4620      	mov	r0, r4
   102e0:	f017 fe10 	bl	27f04 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   102e4:	4629      	mov	r1, r5
   102e6:	4620      	mov	r0, r4
   102e8:	f017 fe13 	bl	27f12 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   102ec:	4631      	mov	r1, r6
   102ee:	4620      	mov	r0, r4
   102f0:	f017 fe0f 	bl	27f12 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   102f4:	2300      	movs	r3, #0
   102f6:	9300      	str	r3, [sp, #0]
   102f8:	4622      	mov	r2, r4
   102fa:	4649      	mov	r1, r9
   102fc:	4640      	mov	r0, r8
   102fe:	f016 fb85 	bl	26a0c <bt_mesh_model_send>
   10302:	2800      	cmp	r0, #0
   10304:	d0d9      	beq.n	102ba <mod_sub_get+0x3a>
   10306:	4914      	ldr	r1, [pc, #80]	; (10358 <mod_sub_get+0xd8>)
   10308:	4b14      	ldr	r3, [pc, #80]	; (1035c <mod_sub_get+0xdc>)
		BT_ERR("Unable to send Model Subscription List");
   1030a:	4816      	ldr	r0, [pc, #88]	; (10364 <mod_sub_get+0xe4>)
   1030c:	1ac9      	subs	r1, r1, r3
   1030e:	08c9      	lsrs	r1, r1, #3
   10310:	0189      	lsls	r1, r1, #6
   10312:	f041 0101 	orr.w	r1, r1, #1
   10316:	e7ce      	b.n	102b6 <mod_sub_get+0x36>
	mod = bt_mesh_model_find(elem, id);
   10318:	4631      	mov	r1, r6
   1031a:	f016 fbb2 	bl	26a82 <bt_mesh_model_find>
	if (!mod) {
   1031e:	4607      	mov	r7, r0
   10320:	b908      	cbnz	r0, 10326 <mod_sub_get+0xa6>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   10322:	2102      	movs	r1, #2
   10324:	e7db      	b.n	102de <mod_sub_get+0x5e>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   10326:	2100      	movs	r1, #0
   10328:	4620      	mov	r0, r4
   1032a:	f017 fdeb 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   1032e:	4629      	mov	r1, r5
   10330:	4620      	mov	r0, r4
   10332:	f017 fdee 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   10336:	4631      	mov	r1, r6
   10338:	4620      	mov	r0, r4
   1033a:	f017 fdea 	bl	27f12 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
   1033e:	9403      	str	r4, [sp, #12]
	visit_ctx.elem_idx = mod->elem_idx;
   10340:	793b      	ldrb	r3, [r7, #4]
   10342:	f8ad 3008 	strh.w	r3, [sp, #8]
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_list_visitor,
   10346:	4638      	mov	r0, r7
   10348:	f016 fbae 	bl	26aa8 <bt_mesh_model_root>
   1034c:	4906      	ldr	r1, [pc, #24]	; (10368 <mod_sub_get+0xe8>)
   1034e:	aa02      	add	r2, sp, #8
   10350:	f016 fbab 	bl	26aaa <bt_mesh_model_tree_walk>
   10354:	e7ce      	b.n	102f4 <mod_sub_get+0x74>
   10356:	bf00      	nop
   10358:	00028960 	.word	0x00028960
   1035c:	00028868 	.word	0x00028868
   10360:	0002cb1f 	.word	0x0002cb1f
   10364:	0002cb68 	.word	0x0002cb68
   10368:	00011005 	.word	0x00011005

0001036c <cfg_srv_init>:

	return true;
}

static int cfg_srv_init(struct bt_mesh_model *model)
{
   1036c:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;

	if (!bt_mesh_model_in_primary(model)) {
   1036e:	7905      	ldrb	r5, [r0, #4]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   10370:	69c4      	ldr	r4, [r0, #28]
{
   10372:	4606      	mov	r6, r0
	if (!bt_mesh_model_in_primary(model)) {
   10374:	b165      	cbz	r5, 10390 <cfg_srv_init+0x24>
   10376:	4920      	ldr	r1, [pc, #128]	; (103f8 <cfg_srv_init+0x8c>)
   10378:	4b20      	ldr	r3, [pc, #128]	; (103fc <cfg_srv_init+0x90>)
		BT_ERR("Configuration Server only allowed in primary element");
   1037a:	4821      	ldr	r0, [pc, #132]	; (10400 <cfg_srv_init+0x94>)
   1037c:	1ac9      	subs	r1, r1, r3
   1037e:	08c9      	lsrs	r1, r1, #3
   10380:	0189      	lsls	r1, r1, #6
   10382:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("No Configuration Server context provided");
		return -EINVAL;
	}

	if (!conf_is_valid(cfg)) {
		BT_ERR("Invalid values in configuration");
   10386:	f013 f811 	bl	233ac <log_0>
		return -EINVAL;
   1038a:	f06f 0015 	mvn.w	r0, #21
   1038e:	e028      	b.n	103e2 <cfg_srv_init+0x76>
	if (!cfg) {
   10390:	b944      	cbnz	r4, 103a4 <cfg_srv_init+0x38>
   10392:	4919      	ldr	r1, [pc, #100]	; (103f8 <cfg_srv_init+0x8c>)
   10394:	4b19      	ldr	r3, [pc, #100]	; (103fc <cfg_srv_init+0x90>)
		BT_ERR("No Configuration Server context provided");
   10396:	481b      	ldr	r0, [pc, #108]	; (10404 <cfg_srv_init+0x98>)
   10398:	1ac9      	subs	r1, r1, r3
   1039a:	08c9      	lsrs	r1, r1, #3
   1039c:	0189      	lsls	r1, r1, #6
   1039e:	f041 0101 	orr.w	r1, r1, #1
   103a2:	e7f0      	b.n	10386 <cfg_srv_init+0x1a>
	if (cfg->relay > 0x02) {
   103a4:	7963      	ldrb	r3, [r4, #5]
   103a6:	2b02      	cmp	r3, #2
   103a8:	d81c      	bhi.n	103e4 <cfg_srv_init+0x78>
	if (cfg->beacon > 0x01) {
   103aa:	79e3      	ldrb	r3, [r4, #7]
   103ac:	2b01      	cmp	r3, #1
   103ae:	d819      	bhi.n	103e4 <cfg_srv_init+0x78>
	if (cfg->default_ttl > BT_MESH_TTL_MAX) {
   103b0:	f994 300a 	ldrsb.w	r3, [r4, #10]
   103b4:	2b00      	cmp	r3, #0
   103b6:	db15      	blt.n	103e4 <cfg_srv_init+0x78>

	/*
	 * Configuration Model security is device-key based and only the local
	 * device-key is allowed to access this model.
	 */
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;
   103b8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   103bc:	8183      	strh	r3, [r0, #12]
	if (!IS_ENABLED(CONFIG_BT_MESH_RELAY)) {
		cfg->relay = BT_MESH_RELAY_NOT_SUPPORTED;
	}

	if (!IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		cfg->frnd = BT_MESH_FRIEND_NOT_SUPPORTED;
   103be:	2302      	movs	r3, #2
   103c0:	7263      	strb	r3, [r4, #9]

	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		cfg->gatt_proxy = BT_MESH_GATT_PROXY_NOT_SUPPORTED;
	}

	k_delayed_work_init(&cfg->hb_pub.timer, hb_publish);
   103c2:	f104 000c 	add.w	r0, r4, #12
   103c6:	4910      	ldr	r1, [pc, #64]	; (10408 <cfg_srv_init+0x9c>)
   103c8:	f018 f85e 	bl	28488 <k_delayed_work_init>
	cfg->hb_pub.net_idx = BT_MESH_KEY_UNUSED;
   103cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   103d0:	86a3      	strh	r3, [r4, #52]	; 0x34
	cfg->hb_sub.expiry = 0;
   103d2:	2200      	movs	r2, #0
   103d4:	2300      	movs	r3, #0
   103d6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38

	cfg->model = model;

	conf = cfg;
   103da:	4b0c      	ldr	r3, [pc, #48]	; (1040c <cfg_srv_init+0xa0>)
	cfg->model = model;
   103dc:	6026      	str	r6, [r4, #0]
	conf = cfg;
   103de:	601c      	str	r4, [r3, #0]

	return 0;
   103e0:	4628      	mov	r0, r5
}
   103e2:	bd70      	pop	{r4, r5, r6, pc}
   103e4:	4904      	ldr	r1, [pc, #16]	; (103f8 <cfg_srv_init+0x8c>)
   103e6:	4b05      	ldr	r3, [pc, #20]	; (103fc <cfg_srv_init+0x90>)
		BT_ERR("Invalid values in configuration");
   103e8:	4809      	ldr	r0, [pc, #36]	; (10410 <cfg_srv_init+0xa4>)
   103ea:	1ac9      	subs	r1, r1, r3
   103ec:	08c9      	lsrs	r1, r1, #3
   103ee:	0189      	lsls	r1, r1, #6
   103f0:	f041 0101 	orr.w	r1, r1, #1
   103f4:	e7c7      	b.n	10386 <cfg_srv_init+0x1a>
   103f6:	bf00      	nop
   103f8:	00028960 	.word	0x00028960
   103fc:	00028868 	.word	0x00028868
   10400:	0002cb8f 	.word	0x0002cb8f
   10404:	0002cbc4 	.word	0x0002cbc4
   10408:	000111a1 	.word	0x000111a1
   1040c:	20000988 	.word	0x20000988
   10410:	0002cbed 	.word	0x0002cbed

00010414 <send_krp_status>:
{
   10414:	b5f0      	push	{r4, r5, r6, r7, lr}
   10416:	b089      	sub	sp, #36	; 0x24
   10418:	4604      	mov	r4, r0
   1041a:	460d      	mov	r5, r1
   1041c:	4617      	mov	r7, r2
   1041e:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   10420:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   10424:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   10426:	f248 0117 	movw	r1, #32791	; 0x8017
   1042a:	a805      	add	r0, sp, #20
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   1042c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10430:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   10432:	f016 fac2 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   10436:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   1043a:	a805      	add	r0, sp, #20
   1043c:	f017 fd62 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   10440:	4639      	mov	r1, r7
   10442:	a805      	add	r0, sp, #20
   10444:	f017 fd65 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, phase);
   10448:	4631      	mov	r1, r6
   1044a:	a805      	add	r0, sp, #20
   1044c:	f017 fd5a 	bl	27f04 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10450:	2300      	movs	r3, #0
   10452:	9300      	str	r3, [sp, #0]
   10454:	aa05      	add	r2, sp, #20
   10456:	4629      	mov	r1, r5
   10458:	4620      	mov	r0, r4
   1045a:	f016 fad7 	bl	26a0c <bt_mesh_model_send>
   1045e:	b148      	cbz	r0, 10474 <send_krp_status+0x60>
   10460:	4905      	ldr	r1, [pc, #20]	; (10478 <send_krp_status+0x64>)
   10462:	4b06      	ldr	r3, [pc, #24]	; (1047c <send_krp_status+0x68>)
		BT_ERR("Unable to send Key Refresh State Status");
   10464:	4806      	ldr	r0, [pc, #24]	; (10480 <send_krp_status+0x6c>)
   10466:	1ac9      	subs	r1, r1, r3
   10468:	08c9      	lsrs	r1, r1, #3
   1046a:	0189      	lsls	r1, r1, #6
   1046c:	f041 0101 	orr.w	r1, r1, #1
   10470:	f012 ff9c 	bl	233ac <log_0>
}
   10474:	b009      	add	sp, #36	; 0x24
   10476:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10478:	00028960 	.word	0x00028960
   1047c:	00028868 	.word	0x00028868
   10480:	0002cc0d 	.word	0x0002cc0d

00010484 <krp_get>:
{
   10484:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10486:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   10488:	4610      	mov	r0, r2
{
   1048a:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   1048c:	f017 fd06 	bl	27e9c <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   10490:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   10494:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   10496:	d30d      	bcc.n	104b4 <krp_get+0x30>
   10498:	4b0e      	ldr	r3, [pc, #56]	; (104d4 <krp_get+0x50>)
   1049a:	4a0f      	ldr	r2, [pc, #60]	; (104d8 <krp_get+0x54>)
   1049c:	1ad2      	subs	r2, r2, r3
   1049e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   104a0:	4601      	mov	r1, r0
   104a2:	0192      	lsls	r2, r2, #6
   104a4:	480d      	ldr	r0, [pc, #52]	; (104dc <krp_get+0x58>)
   104a6:	f042 0201 	orr.w	r2, r2, #1
}
   104aa:	b002      	add	sp, #8
   104ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   104b0:	f012 bf89 	b.w	233c6 <log_1>
	sub = bt_mesh_subnet_get(idx);
   104b4:	f7fc f956 	bl	c764 <bt_mesh_subnet_get>
	if (!sub) {
   104b8:	4603      	mov	r3, r0
   104ba:	b940      	cbnz	r0, 104ce <krp_get+0x4a>
		send_krp_status(model, ctx, idx, 0x00, STATUS_INVALID_NETKEY);
   104bc:	2204      	movs	r2, #4
		send_krp_status(model, ctx, idx, sub->kr_phase,
   104be:	9200      	str	r2, [sp, #0]
   104c0:	4631      	mov	r1, r6
   104c2:	4622      	mov	r2, r4
   104c4:	4628      	mov	r0, r5
   104c6:	f7ff ffa5 	bl	10414 <send_krp_status>
}
   104ca:	b002      	add	sp, #8
   104cc:	bd70      	pop	{r4, r5, r6, pc}
		send_krp_status(model, ctx, idx, sub->kr_phase,
   104ce:	7fc3      	ldrb	r3, [r0, #31]
   104d0:	2200      	movs	r2, #0
   104d2:	e7f4      	b.n	104be <krp_get+0x3a>
   104d4:	00028868 	.word	0x00028868
   104d8:	00028960 	.word	0x00028960
   104dc:	0002ca32 	.word	0x0002ca32

000104e0 <krp_set>:
{
   104e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   104e4:	4680      	mov	r8, r0
	idx = net_buf_simple_pull_le16(buf);
   104e6:	4610      	mov	r0, r2
{
   104e8:	4614      	mov	r4, r2
   104ea:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
   104ec:	f017 fcd6 	bl	27e9c <net_buf_simple_pull_le16>
   104f0:	4605      	mov	r5, r0
	phase = net_buf_simple_pull_u8(buf);
   104f2:	4620      	mov	r0, r4
   104f4:	f017 fcca 	bl	27e8c <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
   104f8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
   104fc:	4606      	mov	r6, r0
	if (idx > 0xfff) {
   104fe:	d30d      	bcc.n	1051c <krp_set+0x3c>
   10500:	4b27      	ldr	r3, [pc, #156]	; (105a0 <krp_set+0xc0>)
   10502:	4a28      	ldr	r2, [pc, #160]	; (105a4 <krp_set+0xc4>)
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   10504:	4828      	ldr	r0, [pc, #160]	; (105a8 <krp_set+0xc8>)
   10506:	1ad2      	subs	r2, r2, r3
   10508:	08d2      	lsrs	r2, r2, #3
   1050a:	0192      	lsls	r2, r2, #6
   1050c:	f042 0201 	orr.w	r2, r2, #1
   10510:	4629      	mov	r1, r5
}
   10512:	b002      	add	sp, #8
   10514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   10518:	f012 bf55 	b.w	233c6 <log_1>
	sub = bt_mesh_subnet_get(idx);
   1051c:	4628      	mov	r0, r5
   1051e:	f7fc f921 	bl	c764 <bt_mesh_subnet_get>
   10522:	4604      	mov	r4, r0
	if (!sub) {
   10524:	b950      	cbnz	r0, 1053c <krp_set+0x5c>
		send_krp_status(model, ctx, idx, 0x00, STATUS_INVALID_NETKEY);
   10526:	2304      	movs	r3, #4
   10528:	9300      	str	r3, [sp, #0]
   1052a:	4603      	mov	r3, r0
	send_krp_status(model, ctx, idx, sub->kr_phase, STATUS_SUCCESS);
   1052c:	462a      	mov	r2, r5
   1052e:	4639      	mov	r1, r7
   10530:	4640      	mov	r0, r8
   10532:	f7ff ff6f 	bl	10414 <send_krp_status>
}
   10536:	b002      	add	sp, #8
   10538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (phase < BT_MESH_KR_PHASE_2 || phase > BT_MESH_KR_PHASE_3 ||
   1053c:	1eb3      	subs	r3, r6, #2
   1053e:	b2db      	uxtb	r3, r3
   10540:	2b01      	cmp	r3, #1
   10542:	7fc1      	ldrb	r1, [r0, #31]
   10544:	d802      	bhi.n	1054c <krp_set+0x6c>
   10546:	b979      	cbnz	r1, 10568 <krp_set+0x88>
	    (sub->kr_phase == BT_MESH_KR_NORMAL &&
   10548:	2e02      	cmp	r6, #2
   1054a:	d116      	bne.n	1057a <krp_set+0x9a>
   1054c:	4a14      	ldr	r2, [pc, #80]	; (105a0 <krp_set+0xc0>)
   1054e:	4b15      	ldr	r3, [pc, #84]	; (105a4 <krp_set+0xc4>)
		BT_WARN("Prohibited transition %u -> %u", sub->kr_phase, phase);
   10550:	4816      	ldr	r0, [pc, #88]	; (105ac <krp_set+0xcc>)
   10552:	1a9b      	subs	r3, r3, r2
   10554:	08db      	lsrs	r3, r3, #3
   10556:	019b      	lsls	r3, r3, #6
   10558:	f043 0302 	orr.w	r3, r3, #2
   1055c:	4632      	mov	r2, r6
}
   1055e:	b002      	add	sp, #8
   10560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Prohibited transition %u -> %u", sub->kr_phase, phase);
   10564:	f012 bf43 	b.w	233ee <log_2>
	if (sub->kr_phase == BT_MESH_KR_PHASE_1 &&
   10568:	2901      	cmp	r1, #1
   1056a:	d10a      	bne.n	10582 <krp_set+0xa2>
   1056c:	2e02      	cmp	r6, #2
   1056e:	d10a      	bne.n	10586 <krp_set+0xa6>
		sub->kr_flag = 1;
   10570:	f240 2301 	movw	r3, #513	; 0x201
   10574:	83c3      	strh	r3, [r0, #30]
		bt_mesh_net_beacon_update(sub);
   10576:	f7fc facf 	bl	cb18 <bt_mesh_net_beacon_update>
	send_krp_status(model, ctx, idx, sub->kr_phase, STATUS_SUCCESS);
   1057a:	2200      	movs	r2, #0
   1057c:	7fe3      	ldrb	r3, [r4, #31]
   1057e:	9200      	str	r2, [sp, #0]
   10580:	e7d4      	b.n	1052c <krp_set+0x4c>
	} else if ((sub->kr_phase == BT_MESH_KR_PHASE_1 ||
   10582:	2902      	cmp	r1, #2
   10584:	d1f9      	bne.n	1057a <krp_set+0x9a>
		    sub->kr_phase == BT_MESH_KR_PHASE_2) &&
   10586:	2e03      	cmp	r6, #3
   10588:	d1f7      	bne.n	1057a <krp_set+0x9a>
		bt_mesh_net_revoke_keys(sub);
   1058a:	4620      	mov	r0, r4
   1058c:	f7fc fb38 	bl	cc00 <bt_mesh_net_revoke_keys>
			friend_cred_refresh(ctx->net_idx);
   10590:	8838      	ldrh	r0, [r7, #0]
   10592:	f7fc f9c7 	bl	c924 <friend_cred_refresh>
		sub->kr_flag = 0;
   10596:	2300      	movs	r3, #0
   10598:	83e3      	strh	r3, [r4, #30]
		bt_mesh_net_beacon_update(sub);
   1059a:	4620      	mov	r0, r4
   1059c:	e7eb      	b.n	10576 <krp_set+0x96>
   1059e:	bf00      	nop
   105a0:	00028868 	.word	0x00028868
   105a4:	00028960 	.word	0x00028960
   105a8:	0002ca32 	.word	0x0002ca32
   105ac:	0002cc35 	.word	0x0002cc35

000105b0 <send_friend_status>:
{
   105b0:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   105b2:	69c6      	ldr	r6, [r0, #28]
{
   105b4:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   105b6:	ab03      	add	r3, sp, #12
   105b8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   105bc:	4604      	mov	r4, r0
   105be:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   105c0:	a805      	add	r0, sp, #20
   105c2:	f248 0111 	movw	r1, #32785	; 0x8011
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   105c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   105ca:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   105cc:	f016 f9f5 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, cfg->frnd);
   105d0:	7a71      	ldrb	r1, [r6, #9]
   105d2:	a805      	add	r0, sp, #20
   105d4:	f017 fc96 	bl	27f04 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   105d8:	2300      	movs	r3, #0
   105da:	9300      	str	r3, [sp, #0]
   105dc:	aa05      	add	r2, sp, #20
   105de:	4629      	mov	r1, r5
   105e0:	4620      	mov	r0, r4
   105e2:	f016 fa13 	bl	26a0c <bt_mesh_model_send>
   105e6:	b148      	cbz	r0, 105fc <send_friend_status+0x4c>
   105e8:	4905      	ldr	r1, [pc, #20]	; (10600 <send_friend_status+0x50>)
   105ea:	4b06      	ldr	r3, [pc, #24]	; (10604 <send_friend_status+0x54>)
		BT_ERR("Unable to send Friend Status");
   105ec:	4806      	ldr	r0, [pc, #24]	; (10608 <send_friend_status+0x58>)
   105ee:	1ac9      	subs	r1, r1, r3
   105f0:	08c9      	lsrs	r1, r1, #3
   105f2:	0189      	lsls	r1, r1, #6
   105f4:	f041 0101 	orr.w	r1, r1, #1
   105f8:	f012 fed8 	bl	233ac <log_0>
}
   105fc:	b008      	add	sp, #32
   105fe:	bd70      	pop	{r4, r5, r6, pc}
   10600:	00028960 	.word	0x00028960
   10604:	00028868 	.word	0x00028868
   10608:	0002cc54 	.word	0x0002cc54

0001060c <friend_set>:
{
   1060c:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1060e:	6813      	ldr	r3, [r2, #0]
{
   10610:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   10612:	7819      	ldrb	r1, [r3, #0]
   10614:	2901      	cmp	r1, #1
{
   10616:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   10618:	d90b      	bls.n	10632 <friend_set+0x26>
   1061a:	4b13      	ldr	r3, [pc, #76]	; (10668 <friend_set+0x5c>)
   1061c:	4a13      	ldr	r2, [pc, #76]	; (1066c <friend_set+0x60>)
		BT_WARN("Invalid Friend value 0x%02x", buf->data[0]);
   1061e:	4814      	ldr	r0, [pc, #80]	; (10670 <friend_set+0x64>)
   10620:	1ad2      	subs	r2, r2, r3
   10622:	08d2      	lsrs	r2, r2, #3
   10624:	0192      	lsls	r2, r2, #6
}
   10626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Invalid Friend value 0x%02x", buf->data[0]);
   1062a:	f042 0202 	orr.w	r2, r2, #2
   1062e:	f012 beca 	b.w	233c6 <log_1>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   10632:	69c3      	ldr	r3, [r0, #28]
	if (!cfg) {
   10634:	b97b      	cbnz	r3, 10656 <friend_set+0x4a>
   10636:	490c      	ldr	r1, [pc, #48]	; (10668 <friend_set+0x5c>)
   10638:	4b0c      	ldr	r3, [pc, #48]	; (1066c <friend_set+0x60>)
		BT_WARN("No Configuration Server context available");
   1063a:	480e      	ldr	r0, [pc, #56]	; (10674 <friend_set+0x68>)
   1063c:	1a5b      	subs	r3, r3, r1
   1063e:	08db      	lsrs	r3, r3, #3
   10640:	019b      	lsls	r3, r3, #6
   10642:	f043 0102 	orr.w	r1, r3, #2
   10646:	f012 feb1 	bl	233ac <log_0>
	send_friend_status(model, ctx);
   1064a:	4629      	mov	r1, r5
   1064c:	4620      	mov	r0, r4
}
   1064e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_friend_status(model, ctx);
   10652:	f7ff bfad 	b.w	105b0 <send_friend_status>
	if (cfg->frnd == buf->data[0]) {
   10656:	7a5a      	ldrb	r2, [r3, #9]
   10658:	428a      	cmp	r2, r1
   1065a:	d0f6      	beq.n	1064a <friend_set+0x3e>
	if (cfg->hb_pub.feat & BT_MESH_FEAT_FRIEND) {
   1065c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   1065e:	075b      	lsls	r3, r3, #29
   10660:	d5f3      	bpl.n	1064a <friend_set+0x3e>
		bt_mesh_heartbeat_send();
   10662:	f7fe fc67 	bl	ef34 <bt_mesh_heartbeat_send>
   10666:	e7f0      	b.n	1064a <friend_set+0x3e>
   10668:	00028868 	.word	0x00028868
   1066c:	00028960 	.word	0x00028960
   10670:	0002cc71 	.word	0x0002cc71
   10674:	0002cc8d 	.word	0x0002cc8d

00010678 <net_key_get>:
{
   10678:	b530      	push	{r4, r5, lr}
   1067a:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   1067c:	ab02      	add	r3, sp, #8
   1067e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
{
   10682:	4604      	mov	r4, r0
   10684:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   10686:	a805      	add	r0, sp, #20
   10688:	f248 0143 	movw	r1, #32835	; 0x8043
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   1068c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10690:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   10692:	f016 f992 	bl	269ba <bt_mesh_model_msg_init>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   10696:	4b15      	ldr	r3, [pc, #84]	; (106ec <net_key_get+0x74>)
   10698:	f8b3 21f4 	ldrh.w	r2, [r3, #500]	; 0x1f4
   1069c:	f8b3 1110 	ldrh.w	r1, [r3, #272]	; 0x110
   106a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   106a4:	429a      	cmp	r2, r3
   106a6:	d018      	beq.n	106da <net_key_get+0x62>
		if (prev == BT_MESH_KEY_UNUSED) {
   106a8:	4299      	cmp	r1, r3
   106aa:	d019      	beq.n	106e0 <net_key_get+0x68>
		key_idx_pack(&msg, prev, sub->net_idx);
   106ac:	a805      	add	r0, sp, #20
   106ae:	f016 f9ff 	bl	26ab0 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   106b2:	2300      	movs	r3, #0
   106b4:	9300      	str	r3, [sp, #0]
   106b6:	aa05      	add	r2, sp, #20
   106b8:	4629      	mov	r1, r5
   106ba:	4620      	mov	r0, r4
   106bc:	f016 f9a6 	bl	26a0c <bt_mesh_model_send>
   106c0:	b148      	cbz	r0, 106d6 <net_key_get+0x5e>
   106c2:	490b      	ldr	r1, [pc, #44]	; (106f0 <net_key_get+0x78>)
   106c4:	4b0b      	ldr	r3, [pc, #44]	; (106f4 <net_key_get+0x7c>)
		BT_ERR("Unable to send NetKey List");
   106c6:	480c      	ldr	r0, [pc, #48]	; (106f8 <net_key_get+0x80>)
   106c8:	1ac9      	subs	r1, r1, r3
   106ca:	08c9      	lsrs	r1, r1, #3
   106cc:	0189      	lsls	r1, r1, #6
   106ce:	f041 0101 	orr.w	r1, r1, #1
   106d2:	f012 fe6b 	bl	233ac <log_0>
}
   106d6:	b009      	add	sp, #36	; 0x24
   106d8:	bd30      	pop	{r4, r5, pc}
	if (prev != BT_MESH_KEY_UNUSED) {
   106da:	4291      	cmp	r1, r2
   106dc:	d0e9      	beq.n	106b2 <net_key_get+0x3a>
   106de:	460a      	mov	r2, r1
		net_buf_simple_add_le16(&msg, prev);
   106e0:	4611      	mov	r1, r2
   106e2:	a805      	add	r0, sp, #20
   106e4:	f017 fc15 	bl	27f12 <net_buf_simple_add_le16>
   106e8:	e7e3      	b.n	106b2 <net_key_get+0x3a>
   106ea:	bf00      	nop
   106ec:	20006ab8 	.word	0x20006ab8
   106f0:	00028960 	.word	0x00028960
   106f4:	00028868 	.word	0x00028868
   106f8:	0002ccb7 	.word	0x0002ccb7

000106fc <send_net_key_status>:
{
   106fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   106fe:	b089      	sub	sp, #36	; 0x24
   10700:	4604      	mov	r4, r0
   10702:	460d      	mov	r5, r1
   10704:	4616      	mov	r6, r2
   10706:	461f      	mov	r7, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   10708:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   1070c:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   1070e:	f248 0144 	movw	r1, #32836	; 0x8044
   10712:	a805      	add	r0, sp, #20
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   10714:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10718:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   1071a:	f016 f94e 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1071e:	4639      	mov	r1, r7
   10720:	a805      	add	r0, sp, #20
   10722:	f017 fbef 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   10726:	4631      	mov	r1, r6
   10728:	a805      	add	r0, sp, #20
   1072a:	f017 fbf2 	bl	27f12 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1072e:	2300      	movs	r3, #0
   10730:	9300      	str	r3, [sp, #0]
   10732:	aa05      	add	r2, sp, #20
   10734:	4629      	mov	r1, r5
   10736:	4620      	mov	r0, r4
   10738:	f016 f968 	bl	26a0c <bt_mesh_model_send>
   1073c:	b148      	cbz	r0, 10752 <send_net_key_status+0x56>
   1073e:	4906      	ldr	r1, [pc, #24]	; (10758 <send_net_key_status+0x5c>)
   10740:	4b06      	ldr	r3, [pc, #24]	; (1075c <send_net_key_status+0x60>)
		BT_ERR("Unable to send NetKey Status");
   10742:	4807      	ldr	r0, [pc, #28]	; (10760 <send_net_key_status+0x64>)
   10744:	1ac9      	subs	r1, r1, r3
   10746:	08c9      	lsrs	r1, r1, #3
   10748:	0189      	lsls	r1, r1, #6
   1074a:	f041 0101 	orr.w	r1, r1, #1
   1074e:	f012 fe2d 	bl	233ac <log_0>
}
   10752:	b009      	add	sp, #36	; 0x24
   10754:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10756:	bf00      	nop
   10758:	00028960 	.word	0x00028960
   1075c:	00028868 	.word	0x00028868
   10760:	0002ccd2 	.word	0x0002ccd2

00010764 <net_key_update>:
{
   10764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10768:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   1076a:	4610      	mov	r0, r2
{
   1076c:	460f      	mov	r7, r1
   1076e:	4690      	mov	r8, r2
	idx = net_buf_simple_pull_le16(buf);
   10770:	f017 fb94 	bl	27e9c <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   10774:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   10778:	4605      	mov	r5, r0
	if (idx > 0xfff) {
   1077a:	d30c      	bcc.n	10796 <net_key_update+0x32>
   1077c:	4a27      	ldr	r2, [pc, #156]	; (1081c <net_key_update+0xb8>)
   1077e:	4b28      	ldr	r3, [pc, #160]	; (10820 <net_key_update+0xbc>)
   10780:	1ad2      	subs	r2, r2, r3
   10782:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   10784:	0192      	lsls	r2, r2, #6
   10786:	4601      	mov	r1, r0
}
   10788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   1078c:	4825      	ldr	r0, [pc, #148]	; (10824 <net_key_update+0xc0>)
   1078e:	f042 0201 	orr.w	r2, r2, #1
   10792:	f012 be18 	b.w	233c6 <log_1>
	sub = bt_mesh_subnet_get(idx);
   10796:	f7fb ffe5 	bl	c764 <bt_mesh_subnet_get>
	if (!sub) {
   1079a:	4604      	mov	r4, r0
   1079c:	b938      	cbnz	r0, 107ae <net_key_update+0x4a>
		send_net_key_status(model, ctx, idx, STATUS_INVALID_NETKEY);
   1079e:	2304      	movs	r3, #4
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
   107a0:	462a      	mov	r2, r5
   107a2:	4639      	mov	r1, r7
   107a4:	4630      	mov	r0, r6
}
   107a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
   107aa:	f7ff bfa7 	b.w	106fc <send_net_key_status>
	switch (sub->kr_phase) {
   107ae:	7fc3      	ldrb	r3, [r0, #31]
   107b0:	2b01      	cmp	r3, #1
   107b2:	d017      	beq.n	107e4 <net_key_update+0x80>
   107b4:	d90b      	bls.n	107ce <net_key_update+0x6a>
   107b6:	3b02      	subs	r3, #2
   107b8:	2b01      	cmp	r3, #1
   107ba:	d91d      	bls.n	107f8 <net_key_update+0x94>
	err = bt_mesh_net_keys_create(&sub->keys[1], buf->data);
   107bc:	f8d8 1000 	ldr.w	r1, [r8]
   107c0:	f104 0089 	add.w	r0, r4, #137	; 0x89
   107c4:	f7fb ffee 	bl	c7a4 <bt_mesh_net_keys_create>
	if (!err && (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) ||
   107c8:	b1c0      	cbz	r0, 107fc <net_key_update+0x98>
		send_net_key_status(model, ctx, idx, STATUS_UNSPECIFIED);
   107ca:	2310      	movs	r3, #16
   107cc:	e7e8      	b.n	107a0 <net_key_update+0x3c>
		if (!memcmp(buf->data, sub->keys[0].net, 16)) {
   107ce:	f100 0130 	add.w	r1, r0, #48	; 0x30
   107d2:	2210      	movs	r2, #16
   107d4:	f8d8 0000 	ldr.w	r0, [r8]
   107d8:	f014 fc4a 	bl	25070 <memcmp>
   107dc:	2800      	cmp	r0, #0
   107de:	d1ed      	bne.n	107bc <net_key_update+0x58>
}
   107e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!memcmp(buf->data, sub->keys[1].net, 16)) {
   107e4:	f100 0189 	add.w	r1, r0, #137	; 0x89
   107e8:	2210      	movs	r2, #16
   107ea:	f8d8 0000 	ldr.w	r0, [r8]
   107ee:	f014 fc3f 	bl	25070 <memcmp>
   107f2:	4603      	mov	r3, r0
   107f4:	2800      	cmp	r0, #0
   107f6:	d0d3      	beq.n	107a0 <net_key_update+0x3c>
		send_net_key_status(model, ctx, idx, STATUS_CANNOT_UPDATE);
   107f8:	230b      	movs	r3, #11
   107fa:	e7d1      	b.n	107a0 <net_key_update+0x3c>
		err = friend_cred_update(sub);
   107fc:	4620      	mov	r0, r4
   107fe:	f7fc f8b5 	bl	c96c <friend_cred_update>
	if (err) {
   10802:	4680      	mov	r8, r0
   10804:	2800      	cmp	r0, #0
   10806:	d1e0      	bne.n	107ca <net_key_update+0x66>
	sub->kr_phase = BT_MESH_KR_PHASE_1;
   10808:	2301      	movs	r3, #1
   1080a:	77e3      	strb	r3, [r4, #31]
		bt_mesh_store_subnet(sub);
   1080c:	4620      	mov	r0, r4
   1080e:	f016 fb00 	bl	26e12 <bt_mesh_store_subnet>
	bt_mesh_net_beacon_update(sub);
   10812:	4620      	mov	r0, r4
   10814:	f7fc f980 	bl	cb18 <bt_mesh_net_beacon_update>
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
   10818:	4643      	mov	r3, r8
   1081a:	e7c1      	b.n	107a0 <net_key_update+0x3c>
   1081c:	00028960 	.word	0x00028960
   10820:	00028868 	.word	0x00028868
   10824:	0002ca32 	.word	0x0002ca32

00010828 <net_key_add>:
{
   10828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1082c:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   1082e:	4610      	mov	r0, r2
{
   10830:	460f      	mov	r7, r1
   10832:	4690      	mov	r8, r2
	idx = net_buf_simple_pull_le16(buf);
   10834:	f017 fb32 	bl	27e9c <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   10838:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1083c:	4605      	mov	r5, r0
	if (idx > 0xfff) {
   1083e:	d30c      	bcc.n	1085a <net_key_add+0x32>
   10840:	4a28      	ldr	r2, [pc, #160]	; (108e4 <net_key_add+0xbc>)
   10842:	4b29      	ldr	r3, [pc, #164]	; (108e8 <net_key_add+0xc0>)
   10844:	1ad2      	subs	r2, r2, r3
   10846:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   10848:	0192      	lsls	r2, r2, #6
   1084a:	4601      	mov	r1, r0
}
   1084c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   10850:	4826      	ldr	r0, [pc, #152]	; (108ec <net_key_add+0xc4>)
   10852:	f042 0201 	orr.w	r2, r2, #1
   10856:	f012 bdb6 	b.w	233c6 <log_1>
	sub = bt_mesh_subnet_get(idx);
   1085a:	f7fb ff83 	bl	c764 <bt_mesh_subnet_get>
	if (!sub) {
   1085e:	4604      	mov	r4, r0
   10860:	b978      	cbnz	r0, 10882 <net_key_add+0x5a>
			if (bt_mesh.sub[i].net_idx == BT_MESH_KEY_UNUSED) {
   10862:	4b23      	ldr	r3, [pc, #140]	; (108f0 <net_key_add+0xc8>)
   10864:	f8b3 1110 	ldrh.w	r1, [r3, #272]	; 0x110
   10868:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1086c:	4291      	cmp	r1, r2
   1086e:	d004      	beq.n	1087a <net_key_add+0x52>
   10870:	f8b3 11f4 	ldrh.w	r1, [r3, #500]	; 0x1f4
   10874:	4291      	cmp	r1, r2
   10876:	d114      	bne.n	108a2 <net_key_add+0x7a>
		for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   10878:	2401      	movs	r4, #1
				sub = &bt_mesh.sub[i];
   1087a:	20e4      	movs	r0, #228	; 0xe4
   1087c:	fb00 3404 	mla	r4, r0, r4, r3
   10880:	34f4      	adds	r4, #244	; 0xf4
	if (sub->net_idx == idx) {
   10882:	8ba2      	ldrh	r2, [r4, #28]
   10884:	f8d8 0000 	ldr.w	r0, [r8]
   10888:	42aa      	cmp	r2, r5
   1088a:	f104 0330 	add.w	r3, r4, #48	; 0x30
   1088e:	d110      	bne.n	108b2 <net_key_add+0x8a>
		if (memcmp(buf->data, sub->keys[0].net, 16)) {
   10890:	4619      	mov	r1, r3
   10892:	2210      	movs	r2, #16
   10894:	f014 fbec 	bl	25070 <memcmp>
			status = STATUS_SUCCESS;
   10898:	2800      	cmp	r0, #0
		send_net_key_status(model, ctx, idx, status);
   1089a:	bf14      	ite	ne
   1089c:	2306      	movne	r3, #6
   1089e:	2300      	moveq	r3, #0
   108a0:	e000      	b.n	108a4 <net_key_add+0x7c>
			send_net_key_status(model, ctx, idx,
   108a2:	2305      	movs	r3, #5
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
   108a4:	462a      	mov	r2, r5
   108a6:	4639      	mov	r1, r7
   108a8:	4630      	mov	r0, r6
}
   108aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
   108ae:	f7ff bf25 	b.w	106fc <send_net_key_status>
	err = bt_mesh_net_keys_create(&sub->keys[0], buf->data);
   108b2:	4601      	mov	r1, r0
   108b4:	4618      	mov	r0, r3
   108b6:	f7fb ff75 	bl	c7a4 <bt_mesh_net_keys_create>
	if (err) {
   108ba:	4680      	mov	r8, r0
   108bc:	b108      	cbz	r0, 108c2 <net_key_add+0x9a>
		send_net_key_status(model, ctx, idx, STATUS_UNSPECIFIED);
   108be:	2310      	movs	r3, #16
   108c0:	e7f0      	b.n	108a4 <net_key_add+0x7c>
		bt_mesh_store_subnet(sub);
   108c2:	4620      	mov	r0, r4
	sub->net_idx = idx;
   108c4:	83a5      	strh	r5, [r4, #28]
		bt_mesh_store_subnet(sub);
   108c6:	f016 faa4 	bl	26e12 <bt_mesh_store_subnet>
	bt_mesh_net_beacon_update(sub);
   108ca:	4620      	mov	r0, r4
   108cc:	f7fc f924 	bl	cb18 <bt_mesh_net_beacon_update>
		bt_mesh_proxy_beacon_send(sub);
   108d0:	4620      	mov	r0, r4
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   108d2:	f884 8020 	strb.w	r8, [r4, #32]
		bt_mesh_proxy_beacon_send(sub);
   108d6:	f006 fa4b 	bl	16d70 <bt_mesh_proxy_beacon_send>
		bt_mesh_adv_update();
   108da:	f7fb fab1 	bl	be40 <bt_mesh_adv_update>
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
   108de:	4643      	mov	r3, r8
   108e0:	e7e0      	b.n	108a4 <net_key_add+0x7c>
   108e2:	bf00      	nop
   108e4:	00028960 	.word	0x00028960
   108e8:	00028868 	.word	0x00028868
   108ec:	0002ca32 	.word	0x0002ca32
   108f0:	20006ab8 	.word	0x20006ab8

000108f4 <send_mod_pub_status.isra.0>:
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   108f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108f8:	b08b      	sub	sp, #44	; 0x2c
   108fa:	4692      	mov	sl, r2
   108fc:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   10900:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
   10904:	9c15      	ldr	r4, [sp, #84]	; 0x54
   10906:	9f17      	ldr	r7, [sp, #92]	; 0x5c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   10908:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   1090c:	4605      	mov	r5, r0
   1090e:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   10910:	a802      	add	r0, sp, #8
   10912:	f248 0119 	movw	r1, #32793	; 0x8019
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   10916:	4699      	mov	r9, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   10918:	ab05      	add	r3, sp, #20
   1091a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1091e:	9302      	str	r3, [sp, #8]
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   10920:	f016 f84b 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   10924:	4659      	mov	r1, fp
   10926:	a802      	add	r0, sp, #8
   10928:	f017 faec 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   1092c:	4651      	mov	r1, sl
   1092e:	a802      	add	r0, sp, #8
   10930:	f017 faef 	bl	27f12 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   10934:	f1bb 0f00 	cmp.w	fp, #0
   10938:	d027      	beq.n	1098a <send_mod_pub_status.isra.0+0x96>
		(void)memset(net_buf_simple_add(&msg, 7), 0, 7);
   1093a:	2107      	movs	r1, #7
   1093c:	a802      	add	r0, sp, #8
   1093e:	f00d fe6d 	bl	1e61c <net_buf_simple_add>
   10942:	2207      	movs	r2, #7
   10944:	2100      	movs	r1, #0
   10946:	f014 fbce 	bl	250e6 <memset>
	if (vnd) {
   1094a:	f1b8 0f00 	cmp.w	r8, #0
   1094e:	d03c      	beq.n	109ca <send_mod_pub_status.isra.0+0xd6>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   10950:	2104      	movs	r1, #4
   10952:	a802      	add	r0, sp, #8
   10954:	f00d fe62 	bl	1e61c <net_buf_simple_add>
   10958:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   1095a:	4639      	mov	r1, r7
   1095c:	f014 fb98 	bl	25090 <memcpy>
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   10960:	2300      	movs	r3, #0
   10962:	9300      	str	r3, [sp, #0]
   10964:	aa02      	add	r2, sp, #8
   10966:	4631      	mov	r1, r6
   10968:	4628      	mov	r0, r5
   1096a:	f016 f84f 	bl	26a0c <bt_mesh_model_send>
   1096e:	b148      	cbz	r0, 10984 <send_mod_pub_status.isra.0+0x90>
   10970:	4919      	ldr	r1, [pc, #100]	; (109d8 <send_mod_pub_status.isra.0+0xe4>)
   10972:	4b1a      	ldr	r3, [pc, #104]	; (109dc <send_mod_pub_status.isra.0+0xe8>)
		BT_ERR("Unable to send Model Publication Status");
   10974:	481a      	ldr	r0, [pc, #104]	; (109e0 <send_mod_pub_status.isra.0+0xec>)
   10976:	1ac9      	subs	r1, r1, r3
   10978:	08c9      	lsrs	r1, r1, #3
   1097a:	0189      	lsls	r1, r1, #6
   1097c:	f041 0101 	orr.w	r1, r1, #1
   10980:	f012 fd14 	bl	233ac <log_0>
}
   10984:	b00b      	add	sp, #44	; 0x2c
   10986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_simple_add_le16(&msg, pub_addr);
   1098a:	4649      	mov	r1, r9
   1098c:	a802      	add	r0, sp, #8
   1098e:	f017 fac0 	bl	27f12 <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (u16_t)mod->pub->cred << 12;
   10992:	6823      	ldr	r3, [r4, #0]
   10994:	79d9      	ldrb	r1, [r3, #7]
   10996:	88db      	ldrh	r3, [r3, #6]
   10998:	f3c1 1100 	ubfx	r1, r1, #4, #1
   1099c:	f3c3 030b 	ubfx	r3, r3, #0, #12
		net_buf_simple_add_le16(&msg, idx_cred);
   109a0:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
   109a4:	a802      	add	r0, sp, #8
   109a6:	f017 fab4 	bl	27f12 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, mod->pub->ttl);
   109aa:	6823      	ldr	r3, [r4, #0]
   109ac:	a802      	add	r0, sp, #8
   109ae:	7a19      	ldrb	r1, [r3, #8]
   109b0:	f017 faa8 	bl	27f04 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->period);
   109b4:	6823      	ldr	r3, [r4, #0]
   109b6:	a802      	add	r0, sp, #8
   109b8:	7a99      	ldrb	r1, [r3, #10]
   109ba:	f017 faa3 	bl	27f04 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->retransmit);
   109be:	6823      	ldr	r3, [r4, #0]
   109c0:	a802      	add	r0, sp, #8
   109c2:	7a59      	ldrb	r1, [r3, #9]
   109c4:	f017 fa9e 	bl	27f04 <net_buf_simple_add_u8>
   109c8:	e7bf      	b.n	1094a <send_mod_pub_status.isra.0+0x56>
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   109ca:	2102      	movs	r1, #2
   109cc:	a802      	add	r0, sp, #8
   109ce:	f00d fe25 	bl	1e61c <net_buf_simple_add>
   109d2:	2202      	movs	r2, #2
   109d4:	e7c1      	b.n	1095a <send_mod_pub_status.isra.0+0x66>
   109d6:	bf00      	nop
   109d8:	00028960 	.word	0x00028960
   109dc:	00028868 	.word	0x00028868
   109e0:	0002ccef 	.word	0x0002ccef

000109e4 <lpn_timeout_get>:
{
   109e4:	b570      	push	{r4, r5, r6, lr}
   109e6:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   109e8:	ab02      	add	r3, sp, #8
{
   109ea:	4605      	mov	r5, r0
   109ec:	460e      	mov	r6, r1
	lpn_addr = net_buf_simple_pull_le16(buf);
   109ee:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   109f0:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   109f4:	e9cd 1306 	strd	r1, r3, [sp, #24]
   109f8:	9305      	str	r3, [sp, #20]
	lpn_addr = net_buf_simple_pull_le16(buf);
   109fa:	f017 fa4f 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   109fe:	b203      	sxth	r3, r0
   10a00:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
   10a02:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   10a04:	dc0b      	bgt.n	10a1e <lpn_timeout_get+0x3a>
   10a06:	4915      	ldr	r1, [pc, #84]	; (10a5c <lpn_timeout_get+0x78>)
   10a08:	4b15      	ldr	r3, [pc, #84]	; (10a60 <lpn_timeout_get+0x7c>)
		BT_WARN("Invalid LPNAddress; ignoring msg");
   10a0a:	4816      	ldr	r0, [pc, #88]	; (10a64 <lpn_timeout_get+0x80>)
   10a0c:	1ac9      	subs	r1, r1, r3
   10a0e:	08c9      	lsrs	r1, r1, #3
   10a10:	0189      	lsls	r1, r1, #6
   10a12:	f041 0102 	orr.w	r1, r1, #2
		BT_ERR("Unable to send LPN PollTimeout Status");
   10a16:	f012 fcc9 	bl	233ac <log_0>
}
   10a1a:	b008      	add	sp, #32
   10a1c:	bd70      	pop	{r4, r5, r6, pc}
	bt_mesh_model_msg_init(&msg, OP_LPN_TIMEOUT_STATUS);
   10a1e:	f248 012e 	movw	r1, #32814	; 0x802e
   10a22:	a805      	add	r0, sp, #20
   10a24:	f015 ffc9 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, lpn_addr);
   10a28:	4621      	mov	r1, r4
   10a2a:	a805      	add	r0, sp, #20
   10a2c:	f017 fa71 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_le24(&msg, timeout);
   10a30:	2100      	movs	r1, #0
   10a32:	a805      	add	r0, sp, #20
   10a34:	f017 fa7f 	bl	27f36 <net_buf_simple_add_le24>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10a38:	2300      	movs	r3, #0
   10a3a:	9300      	str	r3, [sp, #0]
   10a3c:	aa05      	add	r2, sp, #20
   10a3e:	4631      	mov	r1, r6
   10a40:	4628      	mov	r0, r5
   10a42:	f015 ffe3 	bl	26a0c <bt_mesh_model_send>
   10a46:	2800      	cmp	r0, #0
   10a48:	d0e7      	beq.n	10a1a <lpn_timeout_get+0x36>
   10a4a:	4904      	ldr	r1, [pc, #16]	; (10a5c <lpn_timeout_get+0x78>)
   10a4c:	4b04      	ldr	r3, [pc, #16]	; (10a60 <lpn_timeout_get+0x7c>)
		BT_ERR("Unable to send LPN PollTimeout Status");
   10a4e:	4806      	ldr	r0, [pc, #24]	; (10a68 <lpn_timeout_get+0x84>)
   10a50:	1ac9      	subs	r1, r1, r3
   10a52:	08c9      	lsrs	r1, r1, #3
   10a54:	0189      	lsls	r1, r1, #6
   10a56:	f041 0101 	orr.w	r1, r1, #1
   10a5a:	e7dc      	b.n	10a16 <lpn_timeout_get+0x32>
   10a5c:	00028960 	.word	0x00028960
   10a60:	00028868 	.word	0x00028868
   10a64:	0002cd17 	.word	0x0002cd17
   10a68:	0002cd38 	.word	0x0002cd38

00010a6c <mod_app_get>:
{
   10a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10a70:	4615      	mov	r5, r2
   10a72:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(msg,
   10a74:	ab07      	add	r3, sp, #28
   10a76:	f44f 1298 	mov.w	r2, #1245184	; 0x130000
{
   10a7a:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   10a7c:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(msg,
   10a7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   10a82:	9304      	str	r3, [sp, #16]
{
   10a84:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   10a86:	f017 fa09 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10a8a:	b203      	sxth	r3, r0
   10a8c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10a8e:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10a90:	dc0c      	bgt.n	10aac <mod_app_get+0x40>
   10a92:	4933      	ldr	r1, [pc, #204]	; (10b60 <mod_app_get+0xf4>)
   10a94:	4b33      	ldr	r3, [pc, #204]	; (10b64 <mod_app_get+0xf8>)
		BT_WARN("Prohibited element address");
   10a96:	4834      	ldr	r0, [pc, #208]	; (10b68 <mod_app_get+0xfc>)
   10a98:	1ac9      	subs	r1, r1, r3
   10a9a:	08c9      	lsrs	r1, r1, #3
   10a9c:	0189      	lsls	r1, r1, #6
   10a9e:	f041 0102 	orr.w	r1, r1, #2
		BT_ERR("Unable to send Model Application List message");
   10aa2:	f012 fc83 	bl	233ac <log_0>
}
   10aa6:	b00d      	add	sp, #52	; 0x34
   10aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod_id = buf->data;
   10aac:	f8d5 9000 	ldr.w	r9, [r5]
	elem = bt_mesh_elem_find(elem_addr);
   10ab0:	f7fe fea6 	bl	f800 <bt_mesh_elem_find>
	if (!elem) {
   10ab4:	4604      	mov	r4, r0
   10ab6:	2800      	cmp	r0, #0
   10ab8:	d143      	bne.n	10b42 <mod_app_get+0xd6>
		vnd = (buf->len == 4U);
   10aba:	88ab      	ldrh	r3, [r5, #4]
   10abc:	1f1a      	subs	r2, r3, #4
   10abe:	4253      	negs	r3, r2
   10ac0:	4153      	adcs	r3, r2
   10ac2:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
   10ac6:	2501      	movs	r5, #1
	if (vnd) {
   10ac8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10acc:	2b00      	cmp	r3, #0
   10ace:	d042      	beq.n	10b56 <mod_app_get+0xea>
		bt_mesh_model_msg_init(&msg, OP_VND_MOD_APP_LIST);
   10ad0:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   10ad4:	a804      	add	r0, sp, #16
   10ad6:	f015 ff70 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   10ada:	4629      	mov	r1, r5
   10adc:	a804      	add	r0, sp, #16
   10ade:	f017 fa11 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   10ae2:	4631      	mov	r1, r6
   10ae4:	a804      	add	r0, sp, #16
   10ae6:	f017 fa14 	bl	27f12 <net_buf_simple_add_le16>
	if (vnd) {
   10aea:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10aee:	2b00      	cmp	r3, #0
   10af0:	d034      	beq.n	10b5c <mod_app_get+0xf0>
		net_buf_simple_add_mem(&msg, mod_id, 4);
   10af2:	2204      	movs	r2, #4
		net_buf_simple_add_mem(&msg, mod_id, 2);
   10af4:	4649      	mov	r1, r9
   10af6:	a804      	add	r0, sp, #16
   10af8:	f017 f9f8 	bl	27eec <net_buf_simple_add_mem>
	if (mod) {
   10afc:	b17c      	cbz	r4, 10b1e <mod_app_get+0xb2>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   10afe:	89a1      	ldrh	r1, [r4, #12]
   10b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10b04:	4299      	cmp	r1, r3
   10b06:	d002      	beq.n	10b0e <mod_app_get+0xa2>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
   10b08:	a804      	add	r0, sp, #16
   10b0a:	f017 fa02 	bl	27f12 <net_buf_simple_add_le16>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   10b0e:	89e1      	ldrh	r1, [r4, #14]
   10b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10b14:	4299      	cmp	r1, r3
   10b16:	d002      	beq.n	10b1e <mod_app_get+0xb2>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
   10b18:	a804      	add	r0, sp, #16
   10b1a:	f017 f9fa 	bl	27f12 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10b1e:	2300      	movs	r3, #0
   10b20:	9300      	str	r3, [sp, #0]
   10b22:	aa04      	add	r2, sp, #16
   10b24:	4641      	mov	r1, r8
   10b26:	4638      	mov	r0, r7
   10b28:	f015 ff70 	bl	26a0c <bt_mesh_model_send>
   10b2c:	2800      	cmp	r0, #0
   10b2e:	d0ba      	beq.n	10aa6 <mod_app_get+0x3a>
   10b30:	490b      	ldr	r1, [pc, #44]	; (10b60 <mod_app_get+0xf4>)
   10b32:	4b0c      	ldr	r3, [pc, #48]	; (10b64 <mod_app_get+0xf8>)
		BT_ERR("Unable to send Model Application List message");
   10b34:	480d      	ldr	r0, [pc, #52]	; (10b6c <mod_app_get+0x100>)
   10b36:	1ac9      	subs	r1, r1, r3
   10b38:	08c9      	lsrs	r1, r1, #3
   10b3a:	0189      	lsls	r1, r1, #6
   10b3c:	f041 0101 	orr.w	r1, r1, #1
   10b40:	e7af      	b.n	10aa2 <mod_app_get+0x36>
	mod = get_model(elem, buf, &vnd);
   10b42:	4629      	mov	r1, r5
   10b44:	f10d 020f 	add.w	r2, sp, #15
   10b48:	f016 f805 	bl	26b56 <get_model>
		status = STATUS_INVALID_MODEL;
   10b4c:	1e04      	subs	r4, r0, #0
   10b4e:	bf14      	ite	ne
   10b50:	2500      	movne	r5, #0
   10b52:	2502      	moveq	r5, #2
   10b54:	e7b8      	b.n	10ac8 <mod_app_get+0x5c>
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   10b56:	f248 014c 	movw	r1, #32844	; 0x804c
   10b5a:	e7bb      	b.n	10ad4 <mod_app_get+0x68>
		net_buf_simple_add_mem(&msg, mod_id, 2);
   10b5c:	2202      	movs	r2, #2
   10b5e:	e7c9      	b.n	10af4 <mod_app_get+0x88>
   10b60:	00028960 	.word	0x00028960
   10b64:	00028868 	.word	0x00028868
   10b68:	0002cb1f 	.word	0x0002cb1f
   10b6c:	0002cd5e 	.word	0x0002cd5e

00010b70 <mod_app_bind>:
{
   10b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10b74:	4614      	mov	r4, r2
   10b76:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   10b78:	ab06      	add	r3, sp, #24
   10b7a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   10b7e:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   10b80:	4620      	mov	r0, r4
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   10b82:	e9cd 2304 	strd	r2, r3, [sp, #16]
   10b86:	9303      	str	r3, [sp, #12]
{
   10b88:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   10b8a:	f017 f987 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10b8e:	b203      	sxth	r3, r0
   10b90:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10b92:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10b94:	dc0c      	bgt.n	10bb0 <mod_app_bind+0x40>
   10b96:	4938      	ldr	r1, [pc, #224]	; (10c78 <mod_app_bind+0x108>)
   10b98:	4b38      	ldr	r3, [pc, #224]	; (10c7c <mod_app_bind+0x10c>)
		BT_WARN("Prohibited element address");
   10b9a:	4839      	ldr	r0, [pc, #228]	; (10c80 <mod_app_bind+0x110>)
   10b9c:	1ac9      	subs	r1, r1, r3
   10b9e:	08c9      	lsrs	r1, r1, #3
   10ba0:	0189      	lsls	r1, r1, #6
   10ba2:	f041 0102 	orr.w	r1, r1, #2
		BT_ERR("Unable to send Model App Bind Status response");
   10ba6:	f012 fc01 	bl	233ac <log_0>
}
   10baa:	b00b      	add	sp, #44	; 0x2c
   10bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	key_app_idx = net_buf_simple_pull_le16(buf);
   10bb0:	4620      	mov	r0, r4
   10bb2:	f017 f973 	bl	27e9c <net_buf_simple_pull_le16>
   10bb6:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   10bb8:	4630      	mov	r0, r6
	mod_id = buf->data;
   10bba:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10bbe:	f7fe fe1f 	bl	f800 <bt_mesh_elem_find>
	if (!elem) {
   10bc2:	bb08      	cbnz	r0, 10c08 <mod_app_bind+0x98>
		vnd = (buf->len == 4U);
   10bc4:	88a3      	ldrh	r3, [r4, #4]
   10bc6:	1f1a      	subs	r2, r3, #4
   10bc8:	4253      	negs	r3, r2
   10bca:	4153      	adcs	r3, r2
   10bcc:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   10bd0:	2301      	movs	r3, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   10bd2:	e9cd 3900 	strd	r3, r9, [sp]
   10bd6:	f89d 100b 	ldrb.w	r1, [sp, #11]
   10bda:	462b      	mov	r3, r5
   10bdc:	4632      	mov	r2, r6
   10bde:	a803      	add	r0, sp, #12
   10be0:	f015 ff8e 	bl	26b00 <create_mod_app_status.isra.0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10be4:	2300      	movs	r3, #0
   10be6:	9300      	str	r3, [sp, #0]
   10be8:	aa03      	add	r2, sp, #12
   10bea:	4641      	mov	r1, r8
   10bec:	4638      	mov	r0, r7
   10bee:	f015 ff0d 	bl	26a0c <bt_mesh_model_send>
   10bf2:	2800      	cmp	r0, #0
   10bf4:	d0d9      	beq.n	10baa <mod_app_bind+0x3a>
   10bf6:	4920      	ldr	r1, [pc, #128]	; (10c78 <mod_app_bind+0x108>)
   10bf8:	4b20      	ldr	r3, [pc, #128]	; (10c7c <mod_app_bind+0x10c>)
		BT_ERR("Unable to send Model App Bind Status response");
   10bfa:	4822      	ldr	r0, [pc, #136]	; (10c84 <mod_app_bind+0x114>)
   10bfc:	1ac9      	subs	r1, r1, r3
   10bfe:	08c9      	lsrs	r1, r1, #3
   10c00:	0189      	lsls	r1, r1, #6
   10c02:	f041 0101 	orr.w	r1, r1, #1
   10c06:	e7ce      	b.n	10ba6 <mod_app_bind+0x36>
	mod = get_model(elem, buf, &vnd);
   10c08:	4621      	mov	r1, r4
   10c0a:	f10d 020b 	add.w	r2, sp, #11
   10c0e:	f015 ffa2 	bl	26b56 <get_model>
	if (!mod) {
   10c12:	4604      	mov	r4, r0
   10c14:	b348      	cbz	r0, 10c6a <mod_app_bind+0xfa>
	if (model == mod) {
   10c16:	42b8      	cmp	r0, r7
   10c18:	d10b      	bne.n	10c32 <mod_app_bind+0xc2>
   10c1a:	4918      	ldr	r1, [pc, #96]	; (10c7c <mod_app_bind+0x10c>)
   10c1c:	4b16      	ldr	r3, [pc, #88]	; (10c78 <mod_app_bind+0x108>)
		BT_ERR("Client tried to bind AppKey to Configuration Model");
   10c1e:	481a      	ldr	r0, [pc, #104]	; (10c88 <mod_app_bind+0x118>)
   10c20:	1a5b      	subs	r3, r3, r1
   10c22:	08db      	lsrs	r3, r3, #3
   10c24:	019b      	lsls	r3, r3, #6
   10c26:	f043 0101 	orr.w	r1, r3, #1
   10c2a:	f012 fbbf 	bl	233ac <log_0>
		status = STATUS_CANNOT_BIND;
   10c2e:	230d      	movs	r3, #13
		goto send_status;
   10c30:	e7cf      	b.n	10bd2 <mod_app_bind+0x62>
	if (!app_key_is_valid(key_idx)) {
   10c32:	4628      	mov	r0, r5
   10c34:	f7ff f864 	bl	fd00 <app_key_is_valid>
   10c38:	b1c8      	cbz	r0, 10c6e <mod_app_bind+0xfe>
		if (model->keys[i] == key_idx) {
   10c3a:	89a1      	ldrh	r1, [r4, #12]
   10c3c:	428d      	cmp	r5, r1
   10c3e:	d010      	beq.n	10c62 <mod_app_bind+0xf2>
   10c40:	89e2      	ldrh	r2, [r4, #14]
   10c42:	4295      	cmp	r5, r2
   10c44:	d00d      	beq.n	10c62 <mod_app_bind+0xf2>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
   10c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10c4a:	4299      	cmp	r1, r3
   10c4c:	d00b      	beq.n	10c66 <mod_app_bind+0xf6>
   10c4e:	429a      	cmp	r2, r3
   10c50:	d10f      	bne.n	10c72 <mod_app_bind+0x102>
	for (i = 0; i < ARRAY_SIZE(model->keys); i++) {
   10c52:	2301      	movs	r3, #1
			model->keys[i] = key_idx;
   10c54:	3304      	adds	r3, #4
   10c56:	eb04 0343 	add.w	r3, r4, r3, lsl #1
				bt_mesh_store_mod_bind(model);
   10c5a:	4620      	mov	r0, r4
			model->keys[i] = key_idx;
   10c5c:	809d      	strh	r5, [r3, #4]
				bt_mesh_store_mod_bind(model);
   10c5e:	f016 f973 	bl	26f48 <bt_mesh_store_mod_bind>
			return STATUS_SUCCESS;
   10c62:	2300      	movs	r3, #0
   10c64:	e7b5      	b.n	10bd2 <mod_app_bind+0x62>
	for (i = 0; i < ARRAY_SIZE(model->keys); i++) {
   10c66:	2300      	movs	r3, #0
   10c68:	e7f4      	b.n	10c54 <mod_app_bind+0xe4>
		status = STATUS_INVALID_MODEL;
   10c6a:	2302      	movs	r3, #2
   10c6c:	e7b1      	b.n	10bd2 <mod_app_bind+0x62>
		return STATUS_INVALID_APPKEY;
   10c6e:	2303      	movs	r3, #3
   10c70:	e7af      	b.n	10bd2 <mod_app_bind+0x62>
	return STATUS_INSUFF_RESOURCES;
   10c72:	2305      	movs	r3, #5
   10c74:	e7ad      	b.n	10bd2 <mod_app_bind+0x62>
   10c76:	bf00      	nop
   10c78:	00028960 	.word	0x00028960
   10c7c:	00028868 	.word	0x00028868
   10c80:	0002cb1f 	.word	0x0002cb1f
   10c84:	0002cdbf 	.word	0x0002cdbf
   10c88:	0002cd8c 	.word	0x0002cd8c

00010c8c <mod_sub_del_all>:
{
   10c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c90:	4606      	mov	r6, r0
   10c92:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   10c94:	4610      	mov	r0, r2
{
   10c96:	460f      	mov	r7, r1
   10c98:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10c9a:	f017 f8ff 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10c9e:	b203      	sxth	r3, r0
   10ca0:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10ca2:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10ca4:	dc0c      	bgt.n	10cc0 <mod_sub_del_all+0x34>
   10ca6:	491c      	ldr	r1, [pc, #112]	; (10d18 <mod_sub_del_all+0x8c>)
   10ca8:	4b1c      	ldr	r3, [pc, #112]	; (10d1c <mod_sub_del_all+0x90>)
		BT_WARN("Prohibited element address");
   10caa:	481d      	ldr	r0, [pc, #116]	; (10d20 <mod_sub_del_all+0x94>)
   10cac:	1ac9      	subs	r1, r1, r3
   10cae:	08c9      	lsrs	r1, r1, #3
   10cb0:	0189      	lsls	r1, r1, #6
   10cb2:	f041 0102 	orr.w	r1, r1, #2
   10cb6:	f012 fb79 	bl	233ac <log_0>
}
   10cba:	b006      	add	sp, #24
   10cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod_id = buf->data;
   10cc0:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10cc4:	f7fe fd9c 	bl	f800 <bt_mesh_elem_find>
	if (!elem) {
   10cc8:	b990      	cbnz	r0, 10cf0 <mod_sub_del_all+0x64>
		vnd = (buf->len == 4U);
   10cca:	88a3      	ldrh	r3, [r4, #4]
   10ccc:	1f1a      	subs	r2, r3, #4
   10cce:	4253      	negs	r3, r2
   10cd0:	4153      	adcs	r3, r2
   10cd2:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   10cd6:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr,
   10cd8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10cdc:	e9cd 8301 	strd	r8, r3, [sp, #4]
   10ce0:	2300      	movs	r3, #0
   10ce2:	9300      	str	r3, [sp, #0]
   10ce4:	4639      	mov	r1, r7
   10ce6:	462b      	mov	r3, r5
   10ce8:	4630      	mov	r0, r6
   10cea:	f7ff f955 	bl	ff98 <send_mod_sub_status>
   10cee:	e7e4      	b.n	10cba <mod_sub_del_all+0x2e>
	mod = get_model(elem, buf, &vnd);
   10cf0:	4621      	mov	r1, r4
   10cf2:	f10d 0217 	add.w	r2, sp, #23
   10cf6:	f015 ff2e 	bl	26b56 <get_model>
	if (!mod) {
   10cfa:	4604      	mov	r4, r0
   10cfc:	b150      	cbz	r0, 10d14 <mod_sub_del_all+0x88>
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_clear_visitor,
   10cfe:	f015 fed3 	bl	26aa8 <bt_mesh_model_root>
   10d02:	2200      	movs	r2, #0
   10d04:	4907      	ldr	r1, [pc, #28]	; (10d24 <mod_sub_del_all+0x98>)
   10d06:	f015 fed0 	bl	26aaa <bt_mesh_model_tree_walk>
		bt_mesh_store_mod_sub(mod);
   10d0a:	4620      	mov	r0, r4
   10d0c:	f016 f923 	bl	26f56 <bt_mesh_store_mod_sub>
	status = STATUS_SUCCESS;
   10d10:	2200      	movs	r2, #0
   10d12:	e7e1      	b.n	10cd8 <mod_sub_del_all+0x4c>
		status = STATUS_INVALID_MODEL;
   10d14:	2202      	movs	r2, #2
   10d16:	e7df      	b.n	10cd8 <mod_sub_del_all+0x4c>
   10d18:	00028960 	.word	0x00028960
   10d1c:	00028868 	.word	0x00028868
   10d20:	0002cb1f 	.word	0x0002cb1f
   10d24:	00026d1f 	.word	0x00026d1f

00010d28 <mod_sub_overwrite>:
{
   10d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10d2c:	4607      	mov	r7, r0
   10d2e:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   10d30:	4610      	mov	r0, r2
{
   10d32:	4688      	mov	r8, r1
   10d34:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10d36:	f017 f8b1 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10d3a:	b203      	sxth	r3, r0
   10d3c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10d3e:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10d40:	dc0c      	bgt.n	10d5c <mod_sub_overwrite+0x34>
   10d42:	4923      	ldr	r1, [pc, #140]	; (10dd0 <mod_sub_overwrite+0xa8>)
   10d44:	4b23      	ldr	r3, [pc, #140]	; (10dd4 <mod_sub_overwrite+0xac>)
		BT_WARN("Prohibited element address");
   10d46:	4824      	ldr	r0, [pc, #144]	; (10dd8 <mod_sub_overwrite+0xb0>)
   10d48:	1ac9      	subs	r1, r1, r3
   10d4a:	08c9      	lsrs	r1, r1, #3
   10d4c:	0189      	lsls	r1, r1, #6
   10d4e:	f041 0102 	orr.w	r1, r1, #2
   10d52:	f012 fb2b 	bl	233ac <log_0>
}
   10d56:	b007      	add	sp, #28
   10d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   10d5c:	4620      	mov	r0, r4
   10d5e:	f017 f89d 	bl	27e9c <net_buf_simple_pull_le16>
   10d62:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   10d64:	4630      	mov	r0, r6
	mod_id = buf->data;
   10d66:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10d6a:	f7fe fd49 	bl	f800 <bt_mesh_elem_find>
	if (!elem) {
   10d6e:	b938      	cbnz	r0, 10d80 <mod_sub_overwrite+0x58>
		vnd = (buf->len == 4U);
   10d70:	88a3      	ldrh	r3, [r4, #4]
   10d72:	1f1a      	subs	r2, r3, #4
   10d74:	4253      	negs	r3, r2
   10d76:	4153      	adcs	r3, r2
   10d78:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   10d7c:	2201      	movs	r2, #1
   10d7e:	e01a      	b.n	10db6 <mod_sub_overwrite+0x8e>
	mod = get_model(elem, buf, &vnd);
   10d80:	4621      	mov	r1, r4
   10d82:	f10d 0217 	add.w	r2, sp, #23
   10d86:	f015 fee6 	bl	26b56 <get_model>
	if (!mod) {
   10d8a:	4604      	mov	r4, r0
   10d8c:	b1f0      	cbz	r0, 10dcc <mod_sub_overwrite+0xa4>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   10d8e:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   10d92:	b29b      	uxth	r3, r3
   10d94:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   10d98:	d8f0      	bhi.n	10d7c <mod_sub_overwrite+0x54>
		bt_mesh_model_tree_walk(bt_mesh_model_root(mod),
   10d9a:	f015 fe85 	bl	26aa8 <bt_mesh_model_root>
   10d9e:	2200      	movs	r2, #0
   10da0:	490e      	ldr	r1, [pc, #56]	; (10ddc <mod_sub_overwrite+0xb4>)
   10da2:	f015 fe82 	bl	26aaa <bt_mesh_model_tree_walk>
			bt_mesh_store_mod_sub(mod);
   10da6:	4620      	mov	r0, r4
		mod->groups[0] = sub_addr;
   10da8:	8225      	strh	r5, [r4, #16]
			bt_mesh_store_mod_sub(mod);
   10daa:	f016 f8d4 	bl	26f56 <bt_mesh_store_mod_sub>
			bt_mesh_lpn_group_add(sub_addr);
   10dae:	4628      	mov	r0, r5
   10db0:	f003 fcac 	bl	1470c <bt_mesh_lpn_group_add>
		status = STATUS_SUCCESS;
   10db4:	2200      	movs	r2, #0
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   10db6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10dba:	9500      	str	r5, [sp, #0]
   10dbc:	e9cd 9301 	strd	r9, r3, [sp, #4]
   10dc0:	4641      	mov	r1, r8
   10dc2:	4633      	mov	r3, r6
   10dc4:	4638      	mov	r0, r7
   10dc6:	f7ff f8e7 	bl	ff98 <send_mod_sub_status>
   10dca:	e7c4      	b.n	10d56 <mod_sub_overwrite+0x2e>
		status = STATUS_INVALID_MODEL;
   10dcc:	2202      	movs	r2, #2
   10dce:	e7f2      	b.n	10db6 <mod_sub_overwrite+0x8e>
   10dd0:	00028960 	.word	0x00028960
   10dd4:	00028868 	.word	0x00028868
   10dd8:	0002cb1f 	.word	0x0002cb1f
   10ddc:	00026d1f 	.word	0x00026d1f

00010de0 <mod_sub_del>:
{
   10de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10de4:	4606      	mov	r6, r0
   10de6:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   10de8:	4610      	mov	r0, r2
{
   10dea:	460f      	mov	r7, r1
   10dec:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10dee:	f017 f855 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10df2:	b203      	sxth	r3, r0
   10df4:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10df6:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10df8:	dc0c      	bgt.n	10e14 <mod_sub_del+0x34>
   10dfa:	4928      	ldr	r1, [pc, #160]	; (10e9c <mod_sub_del+0xbc>)
   10dfc:	4b28      	ldr	r3, [pc, #160]	; (10ea0 <mod_sub_del+0xc0>)
		BT_WARN("Prohibited element address");
   10dfe:	4829      	ldr	r0, [pc, #164]	; (10ea4 <mod_sub_del+0xc4>)
   10e00:	1ac9      	subs	r1, r1, r3
   10e02:	08c9      	lsrs	r1, r1, #3
   10e04:	0189      	lsls	r1, r1, #6
   10e06:	f041 0102 	orr.w	r1, r1, #2
   10e0a:	f012 facf 	bl	233ac <log_0>
}
   10e0e:	b006      	add	sp, #24
   10e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   10e14:	4620      	mov	r0, r4
   10e16:	f017 f841 	bl	27e9c <net_buf_simple_pull_le16>
   10e1a:	f8ad 0012 	strh.w	r0, [sp, #18]
	elem = bt_mesh_elem_find(elem_addr);
   10e1e:	4628      	mov	r0, r5
	mod_id = buf->data;
   10e20:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10e24:	f7fe fcec 	bl	f800 <bt_mesh_elem_find>
	if (!elem) {
   10e28:	b940      	cbnz	r0, 10e3c <mod_sub_del+0x5c>
		vnd = (buf->len == 4U);
   10e2a:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   10e2c:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   10e2e:	1f1a      	subs	r2, r3, #4
   10e30:	4253      	negs	r3, r2
   10e32:	4153      	adcs	r3, r2
   10e34:	f88d 3011 	strb.w	r3, [sp, #17]
		status = STATUS_INVALID_ADDRESS;
   10e38:	2201      	movs	r2, #1
   10e3a:	e020      	b.n	10e7e <mod_sub_del+0x9e>
	mod = get_model(elem, buf, &vnd);
   10e3c:	f10d 0211 	add.w	r2, sp, #17
   10e40:	4621      	mov	r1, r4
   10e42:	f015 fe88 	bl	26b56 <get_model>
   10e46:	9005      	str	r0, [sp, #20]
	if (!mod) {
   10e48:	b330      	cbz	r0, 10e98 <mod_sub_del+0xb8>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   10e4a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   10e4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   10e52:	b29b      	uxth	r3, r3
   10e54:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   10e58:	d8ee      	bhi.n	10e38 <mod_sub_del+0x58>
		bt_mesh_lpn_group_del(&sub_addr, 1);
   10e5a:	2101      	movs	r1, #1
   10e5c:	f10d 0012 	add.w	r0, sp, #18
   10e60:	f003 fcb0 	bl	147c4 <bt_mesh_lpn_group_del>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   10e64:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   10e68:	a805      	add	r0, sp, #20
   10e6a:	f015 fd7c 	bl	26966 <bt_mesh_model_find_group>
	if (match) {
   10e6e:	2400      	movs	r4, #0
   10e70:	4602      	mov	r2, r0
   10e72:	b120      	cbz	r0, 10e7e <mod_sub_del+0x9e>
		*match = BT_MESH_ADDR_UNASSIGNED;
   10e74:	8004      	strh	r4, [r0, #0]
			bt_mesh_store_mod_sub(mod);
   10e76:	9805      	ldr	r0, [sp, #20]
   10e78:	f016 f86d 	bl	26f56 <bt_mesh_store_mod_sub>
	status = STATUS_SUCCESS;
   10e7c:	4622      	mov	r2, r4
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   10e7e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   10e82:	e9cd 8301 	strd	r8, r3, [sp, #4]
   10e86:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   10e8a:	9300      	str	r3, [sp, #0]
   10e8c:	4639      	mov	r1, r7
   10e8e:	462b      	mov	r3, r5
   10e90:	4630      	mov	r0, r6
   10e92:	f7ff f881 	bl	ff98 <send_mod_sub_status>
   10e96:	e7ba      	b.n	10e0e <mod_sub_del+0x2e>
		status = STATUS_INVALID_MODEL;
   10e98:	2202      	movs	r2, #2
   10e9a:	e7f0      	b.n	10e7e <mod_sub_del+0x9e>
   10e9c:	00028960 	.word	0x00028960
   10ea0:	00028868 	.word	0x00028868
   10ea4:	0002cb1f 	.word	0x0002cb1f

00010ea8 <mod_sub_add>:
{
   10ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10eac:	4607      	mov	r7, r0
   10eae:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   10eb0:	4610      	mov	r0, r2
{
   10eb2:	4688      	mov	r8, r1
   10eb4:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10eb6:	f016 fff1 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10eba:	b203      	sxth	r3, r0
   10ebc:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10ebe:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10ec0:	dc0c      	bgt.n	10edc <mod_sub_add+0x34>
   10ec2:	4927      	ldr	r1, [pc, #156]	; (10f60 <mod_sub_add+0xb8>)
   10ec4:	4b27      	ldr	r3, [pc, #156]	; (10f64 <mod_sub_add+0xbc>)
		BT_WARN("Prohibited element address");
   10ec6:	4828      	ldr	r0, [pc, #160]	; (10f68 <mod_sub_add+0xc0>)
   10ec8:	1ac9      	subs	r1, r1, r3
   10eca:	08c9      	lsrs	r1, r1, #3
   10ecc:	0189      	lsls	r1, r1, #6
   10ece:	f041 0102 	orr.w	r1, r1, #2
   10ed2:	f012 fa6b 	bl	233ac <log_0>
}
   10ed6:	b007      	add	sp, #28
   10ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   10edc:	4620      	mov	r0, r4
   10ede:	f016 ffdd 	bl	27e9c <net_buf_simple_pull_le16>
   10ee2:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   10ee4:	4630      	mov	r0, r6
	mod_id = buf->data;
   10ee6:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10eea:	f7fe fc89 	bl	f800 <bt_mesh_elem_find>
	if (!elem) {
   10eee:	b940      	cbnz	r0, 10f02 <mod_sub_add+0x5a>
		vnd = (buf->len == 4U);
   10ef0:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   10ef2:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   10ef4:	1f1a      	subs	r2, r3, #4
   10ef6:	4253      	negs	r3, r2
   10ef8:	4153      	adcs	r3, r2
   10efa:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   10efe:	2201      	movs	r2, #1
   10f00:	e020      	b.n	10f44 <mod_sub_add+0x9c>
	mod = get_model(elem, buf, &vnd);
   10f02:	f10d 0213 	add.w	r2, sp, #19
   10f06:	4621      	mov	r1, r4
   10f08:	f015 fe25 	bl	26b56 <get_model>
   10f0c:	9005      	str	r0, [sp, #20]
	if (!mod) {
   10f0e:	b1c0      	cbz	r0, 10f42 <mod_sub_add+0x9a>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   10f10:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   10f14:	b29b      	uxth	r3, r3
   10f16:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   10f1a:	d8f0      	bhi.n	10efe <mod_sub_add+0x56>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   10f1c:	4629      	mov	r1, r5
   10f1e:	a805      	add	r0, sp, #20
   10f20:	f015 fd21 	bl	26966 <bt_mesh_model_find_group>
   10f24:	b958      	cbnz	r0, 10f3e <mod_sub_add+0x96>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   10f26:	4601      	mov	r1, r0
   10f28:	a805      	add	r0, sp, #20
   10f2a:	f015 fd1c 	bl	26966 <bt_mesh_model_find_group>
	if (!entry) {
   10f2e:	b1a0      	cbz	r0, 10f5a <mod_sub_add+0xb2>
	*entry = sub_addr;
   10f30:	8005      	strh	r5, [r0, #0]
		bt_mesh_store_mod_sub(mod);
   10f32:	9805      	ldr	r0, [sp, #20]
   10f34:	f016 f80f 	bl	26f56 <bt_mesh_store_mod_sub>
		bt_mesh_lpn_group_add(sub_addr);
   10f38:	4628      	mov	r0, r5
   10f3a:	f003 fbe7 	bl	1470c <bt_mesh_lpn_group_add>
		status = STATUS_SUCCESS;
   10f3e:	2200      	movs	r2, #0
   10f40:	e000      	b.n	10f44 <mod_sub_add+0x9c>
		status = STATUS_INVALID_MODEL;
   10f42:	2202      	movs	r2, #2
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   10f44:	f89d 3013 	ldrb.w	r3, [sp, #19]
   10f48:	9500      	str	r5, [sp, #0]
   10f4a:	e9cd 9301 	strd	r9, r3, [sp, #4]
   10f4e:	4641      	mov	r1, r8
   10f50:	4633      	mov	r3, r6
   10f52:	4638      	mov	r0, r7
   10f54:	f7ff f820 	bl	ff98 <send_mod_sub_status>
   10f58:	e7bd      	b.n	10ed6 <mod_sub_add+0x2e>
		status = STATUS_INSUFF_RESOURCES;
   10f5a:	2205      	movs	r2, #5
   10f5c:	e7f2      	b.n	10f44 <mod_sub_add+0x9c>
   10f5e:	bf00      	nop
   10f60:	00028960 	.word	0x00028960
   10f64:	00028868 	.word	0x00028868
   10f68:	0002cb1f 	.word	0x0002cb1f

00010f6c <mod_pub_get>:
{
   10f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10f70:	4606      	mov	r6, r0
   10f72:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   10f74:	4610      	mov	r0, r2
{
   10f76:	460f      	mov	r7, r1
   10f78:	4691      	mov	r9, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10f7a:	f016 ff8f 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10f7e:	b203      	sxth	r3, r0
   10f80:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10f82:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10f84:	dc0c      	bgt.n	10fa0 <mod_pub_get+0x34>
   10f86:	491c      	ldr	r1, [pc, #112]	; (10ff8 <mod_pub_get+0x8c>)
   10f88:	4b1c      	ldr	r3, [pc, #112]	; (10ffc <mod_pub_get+0x90>)
		BT_WARN("Prohibited element address");
   10f8a:	481d      	ldr	r0, [pc, #116]	; (11000 <mod_pub_get+0x94>)
   10f8c:	1ac9      	subs	r1, r1, r3
   10f8e:	08c9      	lsrs	r1, r1, #3
   10f90:	0189      	lsls	r1, r1, #6
   10f92:	f041 0102 	orr.w	r1, r1, #2
   10f96:	f012 fa09 	bl	233ac <log_0>
}
   10f9a:	b007      	add	sp, #28
   10f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod_id = buf->data;
   10fa0:	f8d9 8000 	ldr.w	r8, [r9]
	elem = bt_mesh_elem_find(elem_addr);
   10fa4:	f7fe fc2c 	bl	f800 <bt_mesh_elem_find>
	if (!elem) {
   10fa8:	4604      	mov	r4, r0
   10faa:	b948      	cbnz	r0, 10fc0 <mod_pub_get+0x54>
		vnd = (buf->len == 4U);
   10fac:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   10fb0:	1f1a      	subs	r2, r3, #4
   10fb2:	4253      	negs	r3, r2
   10fb4:	4153      	adcs	r3, r2
   10fb6:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   10fba:	2201      	movs	r2, #1
	u16_t elem_addr, pub_addr = 0U;
   10fbc:	4623      	mov	r3, r4
   10fbe:	e00a      	b.n	10fd6 <mod_pub_get+0x6a>
	mod = get_model(elem, buf, &vnd);
   10fc0:	f10d 0217 	add.w	r2, sp, #23
   10fc4:	4649      	mov	r1, r9
   10fc6:	f015 fdc6 	bl	26b56 <get_model>
	if (!mod) {
   10fca:	4604      	mov	r4, r0
   10fcc:	b180      	cbz	r0, 10ff0 <mod_pub_get+0x84>
	if (!mod->pub) {
   10fce:	6883      	ldr	r3, [r0, #8]
   10fd0:	b183      	cbz	r3, 10ff4 <mod_pub_get+0x88>
	pub_addr = mod->pub->addr;
   10fd2:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
   10fd4:	2200      	movs	r2, #0
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   10fd6:	e9cd 2802 	strd	r2, r8, [sp, #8]
   10fda:	3408      	adds	r4, #8
   10fdc:	f89d 2017 	ldrb.w	r2, [sp, #23]
   10fe0:	9200      	str	r2, [sp, #0]
   10fe2:	9401      	str	r4, [sp, #4]
   10fe4:	462a      	mov	r2, r5
   10fe6:	4639      	mov	r1, r7
   10fe8:	4630      	mov	r0, r6
   10fea:	f7ff fc83 	bl	108f4 <send_mod_pub_status.isra.0>
   10fee:	e7d4      	b.n	10f9a <mod_pub_get+0x2e>
		status = STATUS_INVALID_MODEL;
   10ff0:	2202      	movs	r2, #2
   10ff2:	e7e3      	b.n	10fbc <mod_pub_get+0x50>
		status = STATUS_NVAL_PUB_PARAM;
   10ff4:	2207      	movs	r2, #7
   10ff6:	e7ee      	b.n	10fd6 <mod_pub_get+0x6a>
   10ff8:	00028960 	.word	0x00028960
   10ffc:	00028868 	.word	0x00028868
   11000:	0002cb1f 	.word	0x0002cb1f

00011004 <mod_sub_list_visitor>:
{
   11004:	b538      	push	{r3, r4, r5, lr}
   11006:	4614      	mov	r4, r2
	if (mod->elem_idx != visit->elem_idx) {
   11008:	7902      	ldrb	r2, [r0, #4]
   1100a:	8823      	ldrh	r3, [r4, #0]
   1100c:	429a      	cmp	r2, r3
{
   1100e:	4605      	mov	r5, r0
	if (mod->elem_idx != visit->elem_idx) {
   11010:	d121      	bne.n	11056 <mod_sub_list_visitor+0x52>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   11012:	8a03      	ldrh	r3, [r0, #16]
   11014:	b143      	cbz	r3, 11028 <mod_sub_list_visitor+0x24>
		if (net_buf_simple_tailroom(visit->msg) <
   11016:	6860      	ldr	r0, [r4, #4]
   11018:	f016 ff60 	bl	27edc <net_buf_simple_tailroom>
   1101c:	2805      	cmp	r0, #5
   1101e:	d90a      	bls.n	11036 <mod_sub_list_visitor+0x32>
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   11020:	8a29      	ldrh	r1, [r5, #16]
   11022:	6860      	ldr	r0, [r4, #4]
   11024:	f016 ff75 	bl	27f12 <net_buf_simple_add_le16>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   11028:	8a6b      	ldrh	r3, [r5, #18]
   1102a:	b1a3      	cbz	r3, 11056 <mod_sub_list_visitor+0x52>
		if (net_buf_simple_tailroom(visit->msg) <
   1102c:	6860      	ldr	r0, [r4, #4]
   1102e:	f016 ff55 	bl	27edc <net_buf_simple_tailroom>
   11032:	2805      	cmp	r0, #5
   11034:	d80b      	bhi.n	1104e <mod_sub_list_visitor+0x4a>
   11036:	4b09      	ldr	r3, [pc, #36]	; (1105c <mod_sub_list_visitor+0x58>)
   11038:	4909      	ldr	r1, [pc, #36]	; (11060 <mod_sub_list_visitor+0x5c>)
			BT_WARN("No room for all groups");
   1103a:	480a      	ldr	r0, [pc, #40]	; (11064 <mod_sub_list_visitor+0x60>)
   1103c:	1ac9      	subs	r1, r1, r3
   1103e:	08c9      	lsrs	r1, r1, #3
   11040:	0189      	lsls	r1, r1, #6
   11042:	f041 0102 	orr.w	r1, r1, #2
   11046:	f012 f9b1 	bl	233ac <log_0>
			return BT_MESH_WALK_STOP;
   1104a:	2000      	movs	r0, #0
}
   1104c:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   1104e:	8a69      	ldrh	r1, [r5, #18]
   11050:	6860      	ldr	r0, [r4, #4]
   11052:	f016 ff5e 	bl	27f12 <net_buf_simple_add_le16>
		return BT_MESH_WALK_CONTINUE;
   11056:	2001      	movs	r0, #1
   11058:	e7f8      	b.n	1104c <mod_sub_list_visitor+0x48>
   1105a:	bf00      	nop
   1105c:	00028868 	.word	0x00028868
   11060:	00028960 	.word	0x00028960
   11064:	0002cded 	.word	0x0002cded

00011068 <dev_comp_data_get>:
{
   11068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1106c:	b08f      	sub	sp, #60	; 0x3c
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1106e:	ab05      	add	r3, sp, #20
{
   11070:	4680      	mov	r8, r0
   11072:	4689      	mov	r9, r1
	page = net_buf_simple_pull_u8(buf);
   11074:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11076:	f44f 1110 	mov.w	r1, #2359296	; 0x240000
   1107a:	e9cd 1303 	strd	r1, r3, [sp, #12]
   1107e:	9302      	str	r3, [sp, #8]
	page = net_buf_simple_pull_u8(buf);
   11080:	f016 ff04 	bl	27e8c <net_buf_simple_pull_u8>
	bt_mesh_model_msg_init(&sdu, OP_DEV_COMP_DATA_STATUS);
   11084:	2102      	movs	r1, #2
   11086:	a802      	add	r0, sp, #8
   11088:	f015 fc97 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&sdu, page);
   1108c:	2100      	movs	r1, #0
   1108e:	a802      	add	r0, sp, #8
   11090:	f016 ff38 	bl	27f04 <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
   11094:	f7fe fe2e 	bl	fcf4 <bt_mesh_comp_get>
   11098:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
   1109a:	8801      	ldrh	r1, [r0, #0]
   1109c:	a802      	add	r0, sp, #8
   1109e:	f016 ff38 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
   110a2:	8869      	ldrh	r1, [r5, #2]
   110a4:	a802      	add	r0, sp, #8
   110a6:	f016 ff34 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
   110aa:	88a9      	ldrh	r1, [r5, #4]
   110ac:	a802      	add	r0, sp, #8
   110ae:	f016 ff30 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
   110b2:	210a      	movs	r1, #10
   110b4:	a802      	add	r0, sp, #8
   110b6:	f016 ff2c 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
   110ba:	210b      	movs	r1, #11
   110bc:	a802      	add	r0, sp, #8
   110be:	f016 ff28 	bl	27f12 <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
   110c2:	2700      	movs	r7, #0
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   110c4:	f04f 0a02 	mov.w	sl, #2
	for (i = 0; i < comp->elem_count; i++) {
   110c8:	68ab      	ldr	r3, [r5, #8]
   110ca:	429f      	cmp	r7, r3
   110cc:	d310      	bcc.n	110f0 <dev_comp_data_get+0x88>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   110ce:	2300      	movs	r3, #0
   110d0:	9300      	str	r3, [sp, #0]
   110d2:	aa02      	add	r2, sp, #8
   110d4:	4649      	mov	r1, r9
   110d6:	4640      	mov	r0, r8
   110d8:	f015 fc98 	bl	26a0c <bt_mesh_model_send>
   110dc:	b328      	cbz	r0, 1112a <dev_comp_data_get+0xc2>
   110de:	492b      	ldr	r1, [pc, #172]	; (1118c <dev_comp_data_get+0x124>)
   110e0:	4b2b      	ldr	r3, [pc, #172]	; (11190 <dev_comp_data_get+0x128>)
		BT_ERR("Unable to send Device Composition Status response");
   110e2:	482c      	ldr	r0, [pc, #176]	; (11194 <dev_comp_data_get+0x12c>)
   110e4:	1ac9      	subs	r1, r1, r3
   110e6:	08c9      	lsrs	r1, r1, #3
   110e8:	0189      	lsls	r1, r1, #6
   110ea:	f041 0101 	orr.w	r1, r1, #1
   110ee:	e01a      	b.n	11126 <dev_comp_data_get+0xbe>
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
   110f0:	68ec      	ldr	r4, [r5, #12]
   110f2:	eb04 1407 	add.w	r4, r4, r7, lsl #4
	if (net_buf_simple_tailroom(buf) <
   110f6:	a802      	add	r0, sp, #8
   110f8:	f016 fef0 	bl	27edc <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   110fc:	7922      	ldrb	r2, [r4, #4]
   110fe:	7963      	ldrb	r3, [r4, #5]
   11100:	3202      	adds	r2, #2
   11102:	fb1a 2303 	smlabb	r3, sl, r3, r2
	if (net_buf_simple_tailroom(buf) <
   11106:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   1110a:	d211      	bcs.n	11130 <dev_comp_data_get+0xc8>
   1110c:	4b20      	ldr	r3, [pc, #128]	; (11190 <dev_comp_data_get+0x128>)
   1110e:	4c1f      	ldr	r4, [pc, #124]	; (1118c <dev_comp_data_get+0x124>)
		BT_ERR("Too large device composition");
   11110:	4821      	ldr	r0, [pc, #132]	; (11198 <dev_comp_data_get+0x130>)
   11112:	1ae4      	subs	r4, r4, r3
   11114:	08e4      	lsrs	r4, r4, #3
   11116:	01a4      	lsls	r4, r4, #6
   11118:	f044 0401 	orr.w	r4, r4, #1
   1111c:	4621      	mov	r1, r4
   1111e:	f012 f945 	bl	233ac <log_0>
		BT_ERR("Unable to get composition page 0");
   11122:	481e      	ldr	r0, [pc, #120]	; (1119c <dev_comp_data_get+0x134>)
   11124:	4621      	mov	r1, r4
		BT_ERR("Unable to send Device Composition Status response");
   11126:	f012 f941 	bl	233ac <log_0>
}
   1112a:	b00f      	add	sp, #60	; 0x3c
   1112c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_simple_add_le16(buf, elem->loc);
   11130:	8861      	ldrh	r1, [r4, #2]
   11132:	a802      	add	r0, sp, #8
   11134:	f016 feed 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
   11138:	7921      	ldrb	r1, [r4, #4]
   1113a:	a802      	add	r0, sp, #8
   1113c:	f016 fee2 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
   11140:	7961      	ldrb	r1, [r4, #5]
   11142:	a802      	add	r0, sp, #8
   11144:	f016 fede 	bl	27f04 <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
   11148:	2600      	movs	r6, #0
   1114a:	7923      	ldrb	r3, [r4, #4]
   1114c:	429e      	cmp	r6, r3
   1114e:	db05      	blt.n	1115c <dev_comp_data_get+0xf4>
	for (i = 0; i < elem->vnd_model_count; i++) {
   11150:	2600      	movs	r6, #0
   11152:	7963      	ldrb	r3, [r4, #5]
   11154:	429e      	cmp	r6, r3
   11156:	db09      	blt.n	1116c <dev_comp_data_get+0x104>
	for (i = 0; i < comp->elem_count; i++) {
   11158:	3701      	adds	r7, #1
   1115a:	e7b5      	b.n	110c8 <dev_comp_data_get+0x60>
		net_buf_simple_add_le16(buf, mod->id);
   1115c:	0173      	lsls	r3, r6, #5
   1115e:	68a2      	ldr	r2, [r4, #8]
   11160:	a802      	add	r0, sp, #8
   11162:	5ad1      	ldrh	r1, [r2, r3]
   11164:	f016 fed5 	bl	27f12 <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
   11168:	3601      	adds	r6, #1
   1116a:	e7ee      	b.n	1114a <dev_comp_data_get+0xe2>
		mod = &elem->vnd_models[i];
   1116c:	68e3      	ldr	r3, [r4, #12]
   1116e:	0172      	lsls	r2, r6, #5
   11170:	eb03 1b46 	add.w	fp, r3, r6, lsl #5
		net_buf_simple_add_le16(buf, mod->vnd.company);
   11174:	5a99      	ldrh	r1, [r3, r2]
   11176:	a802      	add	r0, sp, #8
   11178:	f016 fecb 	bl	27f12 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
   1117c:	f8bb 1002 	ldrh.w	r1, [fp, #2]
   11180:	a802      	add	r0, sp, #8
   11182:	f016 fec6 	bl	27f12 <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
   11186:	3601      	adds	r6, #1
   11188:	e7e3      	b.n	11152 <dev_comp_data_get+0xea>
   1118a:	bf00      	nop
   1118c:	00028960 	.word	0x00028960
   11190:	00028868 	.word	0x00028868
   11194:	0002ce42 	.word	0x0002ce42
   11198:	0002ce04 	.word	0x0002ce04
   1119c:	0002ce21 	.word	0x0002ce21

000111a0 <hb_publish>:
{
   111a0:	b538      	push	{r3, r4, r5, lr}
   111a2:	4604      	mov	r4, r0
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
   111a4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   111a6:	f7fb fadd 	bl	c764 <bt_mesh_subnet_get>
	if (!sub) {
   111aa:	4605      	mov	r5, r0
   111ac:	b960      	cbnz	r0, 111c8 <hb_publish+0x28>
   111ae:	4b16      	ldr	r3, [pc, #88]	; (11208 <hb_publish+0x68>)
   111b0:	4a16      	ldr	r2, [pc, #88]	; (1120c <hb_publish+0x6c>)
		BT_ERR("No matching subnet for idx 0x%02x",
   111b2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   111b4:	4816      	ldr	r0, [pc, #88]	; (11210 <hb_publish+0x70>)
   111b6:	1ad2      	subs	r2, r2, r3
   111b8:	08d2      	lsrs	r2, r2, #3
   111ba:	0192      	lsls	r2, r2, #6
   111bc:	f042 0201 	orr.w	r2, r2, #1
   111c0:	f012 f901 	bl	233c6 <log_1>
		cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
   111c4:	8425      	strh	r5, [r4, #32]
}
   111c6:	bd38      	pop	{r3, r4, r5, pc}
	if (cfg->hb_pub.count == 0U) {
   111c8:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   111ca:	2900      	cmp	r1, #0
   111cc:	d0fb      	beq.n	111c6 <hb_publish+0x26>
	period_ms = hb_pwr2(cfg->hb_pub.period, 1) * 1000U;
   111ce:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   111d2:	f015 fce1 	bl	26b98 <hb_pwr2.constprop.0>
   111d6:	ebc0 1240 	rsb	r2, r0, r0, lsl #5
   111da:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   111de:	00d2      	lsls	r2, r2, #3
   111e0:	b292      	uxth	r2, r2
	if (period_ms && cfg->hb_pub.count > 1) {
   111e2:	b12a      	cbz	r2, 111f0 <hb_publish+0x50>
   111e4:	2901      	cmp	r1, #1
   111e6:	d903      	bls.n	111f0 <hb_publish+0x50>
   111e8:	480a      	ldr	r0, [pc, #40]	; (11214 <hb_publish+0x74>)
   111ea:	4621      	mov	r1, r4
   111ec:	f010 feac 	bl	21f48 <k_delayed_work_submit_to_queue>
	bt_mesh_heartbeat_send();
   111f0:	f7fd fea0 	bl	ef34 <bt_mesh_heartbeat_send>
	if (cfg->hb_pub.count != 0xffff) {
   111f4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   111f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   111fa:	4293      	cmp	r3, r2
		cfg->hb_pub.count--;
   111fc:	bf1c      	itt	ne
   111fe:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
   11202:	8463      	strhne	r3, [r4, #34]	; 0x22
   11204:	e7df      	b.n	111c6 <hb_publish+0x26>
   11206:	bf00      	nop
   11208:	00028868 	.word	0x00028868
   1120c:	00028960 	.word	0x00028960
   11210:	0002ce74 	.word	0x0002ce74
   11214:	20001c08 	.word	0x20001c08

00011218 <va_add>:
{
   11218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (labels[i].ref == 0) {
   1121c:	4e19      	ldr	r6, [pc, #100]	; (11284 <va_add+0x6c>)
			match = &labels[i];
   1121e:	2300      	movs	r3, #0
{
   11220:	4605      	mov	r5, r0
   11222:	460f      	mov	r7, r1
			match = &labels[i];
   11224:	461c      	mov	r4, r3
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
   11226:	f106 0804 	add.w	r8, r6, #4
		if (labels[i].ref == 0) {
   1122a:	8832      	ldrh	r2, [r6, #0]
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
   1122c:	b113      	cbz	r3, 11234 <va_add+0x1c>
	if (update) {
   1122e:	b91c      	cbnz	r4, 11238 <va_add+0x20>
		return STATUS_INSUFF_RESOURCES;
   11230:	2005      	movs	r0, #5
   11232:	e008      	b.n	11246 <va_add+0x2e>
		if (labels[i].ref == 0) {
   11234:	b94a      	cbnz	r2, 1124a <va_add+0x32>
	if (update) {
   11236:	b194      	cbz	r4, 1125e <va_add+0x46>
		update->ref++;
   11238:	8823      	ldrh	r3, [r4, #0]
   1123a:	3301      	adds	r3, #1
   1123c:	8023      	strh	r3, [r4, #0]
		va_store(update);
   1123e:	4620      	mov	r0, r4
   11240:	f015 fcb8 	bl	26bb4 <va_store>
		return STATUS_SUCCESS;
   11244:	2000      	movs	r0, #0
}
   11246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
   1124a:	2210      	movs	r2, #16
   1124c:	4629      	mov	r1, r5
   1124e:	4640      	mov	r0, r8
   11250:	f013 ff0e 	bl	25070 <memcmp>
			match = &labels[i];
   11254:	2301      	movs	r3, #1
   11256:	2800      	cmp	r0, #0
   11258:	bf08      	it	eq
   1125a:	4634      	moveq	r4, r6
   1125c:	e7e5      	b.n	1122a <va_add+0x12>
	if (bt_mesh_virtual_addr(label_uuid, addr) < 0) {
   1125e:	4639      	mov	r1, r7
   11260:	4628      	mov	r0, r5
   11262:	f7fe f8c1 	bl	f3e8 <bt_mesh_virtual_addr>
   11266:	2800      	cmp	r0, #0
   11268:	db0a      	blt.n	11280 <va_add+0x68>
	free_slot->ref = 1U;
   1126a:	2301      	movs	r3, #1
   1126c:	8033      	strh	r3, [r6, #0]
	free_slot->addr = *addr;
   1126e:	883b      	ldrh	r3, [r7, #0]
	memcpy(free_slot->uuid, label_uuid, 16);
   11270:	4805      	ldr	r0, [pc, #20]	; (11288 <va_add+0x70>)
	free_slot->addr = *addr;
   11272:	8073      	strh	r3, [r6, #2]
	memcpy(free_slot->uuid, label_uuid, 16);
   11274:	2210      	movs	r2, #16
   11276:	4629      	mov	r1, r5
   11278:	f013 ff0a 	bl	25090 <memcpy>
	va_store(free_slot);
   1127c:	4801      	ldr	r0, [pc, #4]	; (11284 <va_add+0x6c>)
   1127e:	e7df      	b.n	11240 <va_add+0x28>
		return STATUS_UNSPECIFIED;
   11280:	2010      	movs	r0, #16
   11282:	e7e0      	b.n	11246 <va_add+0x2e>
   11284:	2000098c 	.word	0x2000098c
   11288:	20000990 	.word	0x20000990

0001128c <mod_sub_va_overwrite>:
{
   1128c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11290:	b087      	sub	sp, #28
	u16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   11292:	f04f 0b00 	mov.w	fp, #0
{
   11296:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   11298:	4610      	mov	r0, r2
{
   1129a:	4688      	mov	r8, r1
   1129c:	4614      	mov	r4, r2
	u16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1129e:	f8ad b016 	strh.w	fp, [sp, #22]
	elem_addr = net_buf_simple_pull_le16(buf);
   112a2:	f016 fdfb 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   112a6:	b203      	sxth	r3, r0
   112a8:	455b      	cmp	r3, fp
	elem_addr = net_buf_simple_pull_le16(buf);
   112aa:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   112ac:	dc0c      	bgt.n	112c8 <mod_sub_va_overwrite+0x3c>
   112ae:	4927      	ldr	r1, [pc, #156]	; (1134c <mod_sub_va_overwrite+0xc0>)
   112b0:	4b27      	ldr	r3, [pc, #156]	; (11350 <mod_sub_va_overwrite+0xc4>)
		BT_WARN("Prohibited element address");
   112b2:	4828      	ldr	r0, [pc, #160]	; (11354 <mod_sub_va_overwrite+0xc8>)
   112b4:	1ac9      	subs	r1, r1, r3
   112b6:	08c9      	lsrs	r1, r1, #3
   112b8:	0189      	lsls	r1, r1, #6
   112ba:	f041 0102 	orr.w	r1, r1, #2
   112be:	f012 f875 	bl	233ac <log_0>
}
   112c2:	b007      	add	sp, #28
   112c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   112c8:	2110      	movs	r1, #16
   112ca:	4620      	mov	r0, r4
   112cc:	f00d f984 	bl	1e5d8 <net_buf_simple_pull_mem>
   112d0:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
   112d2:	4628      	mov	r0, r5
	mod_id = buf->data;
   112d4:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   112d8:	f7fe fa92 	bl	f800 <bt_mesh_elem_find>
	if (!elem) {
   112dc:	b9a0      	cbnz	r0, 11308 <mod_sub_va_overwrite+0x7c>
		vnd = (buf->len == 4U);
   112de:	88a3      	ldrh	r3, [r4, #4]
   112e0:	1f1a      	subs	r2, r3, #4
   112e2:	4253      	negs	r3, r2
   112e4:	4153      	adcs	r3, r2
   112e6:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
   112ea:	2401      	movs	r4, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   112ec:	f89d 3015 	ldrb.w	r3, [sp, #21]
   112f0:	e9cd 9301 	strd	r9, r3, [sp, #4]
   112f4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   112f8:	9300      	str	r3, [sp, #0]
   112fa:	4622      	mov	r2, r4
   112fc:	462b      	mov	r3, r5
   112fe:	4641      	mov	r1, r8
   11300:	4638      	mov	r0, r7
   11302:	f7fe fe49 	bl	ff98 <send_mod_sub_status>
   11306:	e7dc      	b.n	112c2 <mod_sub_va_overwrite+0x36>
	mod = get_model(elem, buf, &vnd);
   11308:	f10d 0215 	add.w	r2, sp, #21
   1130c:	4621      	mov	r1, r4
   1130e:	f015 fc22 	bl	26b56 <get_model>
	if (!mod) {
   11312:	4606      	mov	r6, r0
   11314:	b1c0      	cbz	r0, 11348 <mod_sub_va_overwrite+0xbc>
		bt_mesh_model_tree_walk(bt_mesh_model_root(mod),
   11316:	f015 fbc7 	bl	26aa8 <bt_mesh_model_root>
   1131a:	490f      	ldr	r1, [pc, #60]	; (11358 <mod_sub_va_overwrite+0xcc>)
   1131c:	465a      	mov	r2, fp
   1131e:	f015 fbc4 	bl	26aaa <bt_mesh_model_tree_walk>
		status = va_add(label_uuid, &sub_addr);
   11322:	f10d 0116 	add.w	r1, sp, #22
   11326:	4650      	mov	r0, sl
   11328:	f7ff ff76 	bl	11218 <va_add>
		if (status == STATUS_SUCCESS) {
   1132c:	4604      	mov	r4, r0
   1132e:	2800      	cmp	r0, #0
   11330:	d1dc      	bne.n	112ec <mod_sub_va_overwrite+0x60>
			mod->groups[0] = sub_addr;
   11332:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   11336:	8233      	strh	r3, [r6, #16]
				bt_mesh_store_mod_sub(mod);
   11338:	4630      	mov	r0, r6
   1133a:	f015 fe0c 	bl	26f56 <bt_mesh_store_mod_sub>
				bt_mesh_lpn_group_add(sub_addr);
   1133e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   11342:	f003 f9e3 	bl	1470c <bt_mesh_lpn_group_add>
   11346:	e7d1      	b.n	112ec <mod_sub_va_overwrite+0x60>
		status = STATUS_INVALID_MODEL;
   11348:	2402      	movs	r4, #2
   1134a:	e7cf      	b.n	112ec <mod_sub_va_overwrite+0x60>
   1134c:	00028960 	.word	0x00028960
   11350:	00028868 	.word	0x00028868
   11354:	0002cb1f 	.word	0x0002cb1f
   11358:	00026d1f 	.word	0x00026d1f

0001135c <mod_sub_va_add>:
{
   1135c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11360:	4606      	mov	r6, r0
   11362:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   11364:	4610      	mov	r0, r2
{
   11366:	460f      	mov	r7, r1
   11368:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1136a:	f016 fd97 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1136e:	b203      	sxth	r3, r0
   11370:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   11372:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11374:	dc0c      	bgt.n	11390 <mod_sub_va_add+0x34>
   11376:	492d      	ldr	r1, [pc, #180]	; (1142c <mod_sub_va_add+0xd0>)
   11378:	4b2d      	ldr	r3, [pc, #180]	; (11430 <mod_sub_va_add+0xd4>)
		BT_WARN("Prohibited element address");
   1137a:	482e      	ldr	r0, [pc, #184]	; (11434 <mod_sub_va_add+0xd8>)
   1137c:	1ac9      	subs	r1, r1, r3
   1137e:	08c9      	lsrs	r1, r1, #3
   11380:	0189      	lsls	r1, r1, #6
   11382:	f041 0102 	orr.w	r1, r1, #2
   11386:	f012 f811 	bl	233ac <log_0>
}
   1138a:	b007      	add	sp, #28
   1138c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   11390:	2110      	movs	r1, #16
   11392:	4620      	mov	r0, r4
   11394:	f00d f920 	bl	1e5d8 <net_buf_simple_pull_mem>
   11398:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
   1139a:	4628      	mov	r0, r5
	mod_id = buf->data;
   1139c:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   113a0:	f7fe fa2e 	bl	f800 <bt_mesh_elem_find>
	if (!elem) {
   113a4:	b9b8      	cbnz	r0, 113d6 <mod_sub_va_add+0x7a>
		vnd = (buf->len == 4U);
   113a6:	88a2      	ldrh	r2, [r4, #4]
		mod = NULL;
   113a8:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   113aa:	1f11      	subs	r1, r2, #4
   113ac:	424a      	negs	r2, r1
   113ae:	414a      	adcs	r2, r1
   113b0:	f88d 2011 	strb.w	r2, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   113b4:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   113b8:	2401      	movs	r4, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   113ba:	f89d 3011 	ldrb.w	r3, [sp, #17]
   113be:	e9cd 8301 	strd	r8, r3, [sp, #4]
   113c2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   113c6:	9300      	str	r3, [sp, #0]
   113c8:	4622      	mov	r2, r4
   113ca:	462b      	mov	r3, r5
   113cc:	4639      	mov	r1, r7
   113ce:	4630      	mov	r0, r6
   113d0:	f7fe fde2 	bl	ff98 <send_mod_sub_status>
   113d4:	e7d9      	b.n	1138a <mod_sub_va_add+0x2e>
	mod = get_model(elem, buf, &vnd);
   113d6:	f10d 0211 	add.w	r2, sp, #17
   113da:	4621      	mov	r1, r4
   113dc:	f015 fbbb 	bl	26b56 <get_model>
   113e0:	9005      	str	r0, [sp, #20]
	if (!mod) {
   113e2:	b918      	cbnz	r0, 113ec <mod_sub_va_add+0x90>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   113e4:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   113e8:	2402      	movs	r4, #2
		goto send_status;
   113ea:	e7e6      	b.n	113ba <mod_sub_va_add+0x5e>
	status = va_add(label_uuid, &sub_addr);
   113ec:	f10d 0112 	add.w	r1, sp, #18
   113f0:	4648      	mov	r0, r9
   113f2:	f7ff ff11 	bl	11218 <va_add>
	if (status != STATUS_SUCCESS) {
   113f6:	4604      	mov	r4, r0
   113f8:	2800      	cmp	r0, #0
   113fa:	d1de      	bne.n	113ba <mod_sub_va_add+0x5e>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   113fc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   11400:	a805      	add	r0, sp, #20
   11402:	f015 fab0 	bl	26966 <bt_mesh_model_find_group>
   11406:	2800      	cmp	r0, #0
   11408:	d1d7      	bne.n	113ba <mod_sub_va_add+0x5e>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   1140a:	4621      	mov	r1, r4
   1140c:	a805      	add	r0, sp, #20
   1140e:	f015 faaa 	bl	26966 <bt_mesh_model_find_group>
	if (!entry) {
   11412:	4603      	mov	r3, r0
   11414:	b140      	cbz	r0, 11428 <mod_sub_va_add+0xcc>
	*entry = sub_addr;
   11416:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   1141a:	8018      	strh	r0, [r3, #0]
		bt_mesh_lpn_group_add(sub_addr);
   1141c:	f003 f976 	bl	1470c <bt_mesh_lpn_group_add>
		bt_mesh_store_mod_sub(mod);
   11420:	9805      	ldr	r0, [sp, #20]
   11422:	f015 fd98 	bl	26f56 <bt_mesh_store_mod_sub>
	status = STATUS_SUCCESS;
   11426:	e7c8      	b.n	113ba <mod_sub_va_add+0x5e>
		status = STATUS_INSUFF_RESOURCES;
   11428:	2405      	movs	r4, #5
   1142a:	e7c6      	b.n	113ba <mod_sub_va_add+0x5e>
   1142c:	00028960 	.word	0x00028960
   11430:	00028868 	.word	0x00028868
   11434:	0002cb1f 	.word	0x0002cb1f

00011438 <heartbeat_pub_set>:
{
   11438:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct hb_pub_param *param = (void *)buf->data;
   1143c:	6815      	ldr	r5, [r2, #0]
	dst = sys_le16_to_cpu(param->dst);
   1143e:	f8b5 8000 	ldrh.w	r8, [r5]
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
   11442:	f488 4300 	eor.w	r3, r8, #32768	; 0x8000
   11446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
   1144a:	4606      	mov	r6, r0
   1144c:	460f      	mov	r7, r1
	dst = sys_le16_to_cpu(param->dst);
   1144e:	fa1f fa88 	uxth.w	sl, r8
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
   11452:	d374      	bcc.n	1153e <heartbeat_pub_set+0x106>
	if (param->count_log > 0x11 && param->count_log != 0xff) {
   11454:	78ab      	ldrb	r3, [r5, #2]
   11456:	3b12      	subs	r3, #18
   11458:	b2db      	uxtb	r3, r3
   1145a:	2bec      	cmp	r3, #236	; 0xec
   1145c:	d972      	bls.n	11544 <heartbeat_pub_set+0x10c>
	if (param->period_log > 0x10) {
   1145e:	78eb      	ldrb	r3, [r5, #3]
   11460:	2b10      	cmp	r3, #16
   11462:	d86f      	bhi.n	11544 <heartbeat_pub_set+0x10c>
	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
   11464:	7929      	ldrb	r1, [r5, #4]
   11466:	f081 0380 	eor.w	r3, r1, #128	; 0x80
   1146a:	2b7e      	cmp	r3, #126	; 0x7e
   1146c:	d80c      	bhi.n	11488 <heartbeat_pub_set+0x50>
   1146e:	4a37      	ldr	r2, [pc, #220]	; (1154c <heartbeat_pub_set+0x114>)
   11470:	4b37      	ldr	r3, [pc, #220]	; (11550 <heartbeat_pub_set+0x118>)
		BT_ERR("Invalid TTL value 0x%02x", param->ttl);
   11472:	4838      	ldr	r0, [pc, #224]	; (11554 <heartbeat_pub_set+0x11c>)
   11474:	1ad2      	subs	r2, r2, r3
   11476:	08d2      	lsrs	r2, r2, #3
   11478:	0192      	lsls	r2, r2, #6
   1147a:	f042 0201 	orr.w	r2, r2, #1
}
   1147e:	b001      	add	sp, #4
   11480:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   11484:	f011 bf9f 	b.w	233c6 <log_1>
	idx = sys_le16_to_cpu(param->net_idx);
   11488:	f8b5 9007 	ldrh.w	r9, [r5, #7]
	if (idx > 0xfff) {
   1148c:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
	idx = sys_le16_to_cpu(param->net_idx);
   11490:	fa1f f189 	uxth.w	r1, r9
	if (idx > 0xfff) {
   11494:	d308      	bcc.n	114a8 <heartbeat_pub_set+0x70>
   11496:	4a2d      	ldr	r2, [pc, #180]	; (1154c <heartbeat_pub_set+0x114>)
   11498:	4b2d      	ldr	r3, [pc, #180]	; (11550 <heartbeat_pub_set+0x118>)
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   1149a:	482f      	ldr	r0, [pc, #188]	; (11558 <heartbeat_pub_set+0x120>)
   1149c:	1ad2      	subs	r2, r2, r3
   1149e:	08d2      	lsrs	r2, r2, #3
   114a0:	0192      	lsls	r2, r2, #6
   114a2:	f042 0201 	orr.w	r2, r2, #1
   114a6:	e7ea      	b.n	1147e <heartbeat_pub_set+0x46>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   114a8:	69c4      	ldr	r4, [r0, #28]
	feat = sys_le16_to_cpu(param->feat);
   114aa:	f8b5 b005 	ldrh.w	fp, [r5, #5]
	if (!bt_mesh_subnet_get(idx)) {
   114ae:	4608      	mov	r0, r1
   114b0:	f7fb f958 	bl	c764 <bt_mesh_subnet_get>
   114b4:	2800      	cmp	r0, #0
   114b6:	d047      	beq.n	11548 <heartbeat_pub_set+0x110>
	cfg->hb_pub.dst = dst;
   114b8:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
	cfg->hb_pub.period = param->period_log;
   114bc:	78ea      	ldrb	r2, [r5, #3]
   114be:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
	cfg->hb_pub.feat = feat & BT_MESH_FEAT_SUPPORTED;
   114c2:	f00b 0b0f 	and.w	fp, fp, #15
   114c6:	f8a4 b032 	strh.w	fp, [r4, #50]	; 0x32
	cfg->hb_pub.net_idx = idx;
   114ca:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
	if (dst == BT_MESH_ADDR_UNASSIGNED) {
   114ce:	f104 010c 	add.w	r1, r4, #12
   114d2:	f1ba 0f00 	cmp.w	sl, #0
   114d6:	d107      	bne.n	114e8 <heartbeat_pub_set+0xb0>
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
   114d8:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
	cfg->hb_pub.period = 0U;
   114dc:	f8a4 8030 	strh.w	r8, [r4, #48]	; 0x30
			k_delayed_work_cancel(&cfg->hb_pub.timer);
   114e0:	4608      	mov	r0, r1
   114e2:	f010 fdc1 	bl	22068 <k_delayed_work_cancel>
   114e6:	e01f      	b.n	11528 <heartbeat_pub_set+0xf0>
		cfg->hb_pub.count = hb_pwr2(param->count_log, 1);
   114e8:	f895 8002 	ldrb.w	r8, [r5, #2]
   114ec:	4640      	mov	r0, r8
   114ee:	f015 fb53 	bl	26b98 <hb_pwr2.constprop.0>
   114f2:	85e0      	strh	r0, [r4, #46]	; 0x2e
		cfg->hb_pub.ttl = param->ttl;
   114f4:	792b      	ldrb	r3, [r5, #4]
   114f6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		if (param->period_log && param->count_log) {
   114fa:	2a00      	cmp	r2, #0
   114fc:	d0f0      	beq.n	114e0 <heartbeat_pub_set+0xa8>
   114fe:	f1b8 0f00 	cmp.w	r8, #0
   11502:	d0ed      	beq.n	114e0 <heartbeat_pub_set+0xa8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11504:	3414      	adds	r4, #20
   11506:	f3bf 8f5b 	dmb	ish
   1150a:	e854 3f00 	ldrex	r3, [r4]
   1150e:	f043 0201 	orr.w	r2, r3, #1
   11512:	e844 2000 	strex	r0, r2, [r4]
   11516:	2800      	cmp	r0, #0
   11518:	d1f7      	bne.n	1150a <heartbeat_pub_set+0xd2>
   1151a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1151e:	07db      	lsls	r3, r3, #31
   11520:	d402      	bmi.n	11528 <heartbeat_pub_set+0xf0>
		k_queue_append(&work_q->queue, work);
   11522:	480e      	ldr	r0, [pc, #56]	; (1155c <heartbeat_pub_set+0x124>)
   11524:	f016 fedc 	bl	282e0 <k_queue_append>
		bt_mesh_store_hb_pub();
   11528:	f015 fcb7 	bl	26e9a <bt_mesh_store_hb_pub>
	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
   1152c:	2300      	movs	r3, #0
   1152e:	461a      	mov	r2, r3
	hb_pub_send_status(model, ctx, status, param);
   11530:	4639      	mov	r1, r7
   11532:	4630      	mov	r0, r6
}
   11534:	b001      	add	sp, #4
   11536:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hb_pub_send_status(model, ctx, status, param);
   1153a:	f7fe bcc7 	b.w	fecc <hb_pub_send_status>
		status = STATUS_INVALID_ADDRESS;
   1153e:	2201      	movs	r2, #1
	hb_pub_send_status(model, ctx, status, param);
   11540:	462b      	mov	r3, r5
   11542:	e7f5      	b.n	11530 <heartbeat_pub_set+0xf8>
		status = STATUS_CANNOT_SET;
   11544:	220f      	movs	r2, #15
   11546:	e7fb      	b.n	11540 <heartbeat_pub_set+0x108>
		status = STATUS_INVALID_NETKEY;
   11548:	2204      	movs	r2, #4
   1154a:	e7f9      	b.n	11540 <heartbeat_pub_set+0x108>
   1154c:	00028960 	.word	0x00028960
   11550:	00028868 	.word	0x00028868
   11554:	0002ce96 	.word	0x0002ce96
   11558:	0002ca32 	.word	0x0002ca32
   1155c:	20001c08 	.word	0x20001c08

00011560 <_mod_pub_set>:
{
   11560:	e92d 47d8 	stmdb	sp!, {r3, r4, r6, r7, r8, r9, sl, lr}
   11564:	4606      	mov	r6, r0
	if (!model->pub) {
   11566:	6880      	ldr	r0, [r0, #8]
{
   11568:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
   1156c:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
   11570:	4688      	mov	r8, r1
   11572:	4614      	mov	r4, r2
   11574:	469a      	mov	sl, r3
	if (!model->pub) {
   11576:	2800      	cmp	r0, #0
   11578:	d047      	beq.n	1160a <_mod_pub_set+0xaa>
	if (!model->pub->update && period) {
   1157a:	6942      	ldr	r2, [r0, #20]
   1157c:	b912      	cbnz	r2, 11584 <_mod_pub_set+0x24>
   1157e:	f1b9 0f00 	cmp.w	r9, #0
   11582:	d142      	bne.n	1160a <_mod_pub_set+0xaa>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
   11584:	f1b8 0f00 	cmp.w	r8, #0
   11588:	d116      	bne.n	115b8 <_mod_pub_set+0x58>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   1158a:	8883      	ldrh	r3, [r0, #4]
   1158c:	b913      	cbnz	r3, 11594 <_mod_pub_set+0x34>
		return STATUS_SUCCESS;
   1158e:	2000      	movs	r0, #0
}
   11590:	e8bd 87d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, r9, sl, pc}
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   11594:	6843      	ldr	r3, [r0, #4]
   11596:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   1159a:	6043      	str	r3, [r0, #4]
		model->pub->ttl = 0U;
   1159c:	6883      	ldr	r3, [r0, #8]
   1159e:	f003 53f8 	and.w	r3, r3, #520093696	; 0x1f000000
   115a2:	6083      	str	r3, [r0, #8]
		if (model->pub->update) {
   115a4:	b112      	cbz	r2, 115ac <_mod_pub_set+0x4c>
			k_delayed_work_cancel(&model->pub->timer);
   115a6:	3018      	adds	r0, #24
   115a8:	f010 fd5e 	bl	22068 <k_delayed_work_cancel>
		if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   115ac:	2f00      	cmp	r7, #0
   115ae:	d0ee      	beq.n	1158e <_mod_pub_set+0x2e>
			bt_mesh_store_mod_pub(model);
   115b0:	4630      	mov	r0, r6
   115b2:	f015 fcd7 	bl	26f64 <bt_mesh_store_mod_pub>
   115b6:	e7ea      	b.n	1158e <_mod_pub_set+0x2e>
	if (!bt_mesh_app_key_find(app_idx)) {
   115b8:	4620      	mov	r0, r4
   115ba:	f7fc ff47 	bl	e44c <bt_mesh_app_key_find>
   115be:	b330      	cbz	r0, 1160e <_mod_pub_set+0xae>
	model->pub->addr = pub_addr;
   115c0:	68b0      	ldr	r0, [r6, #8]
	model->pub->key = app_idx;
   115c2:	88c3      	ldrh	r3, [r0, #6]
	model->pub->addr = pub_addr;
   115c4:	f8a0 8004 	strh.w	r8, [r0, #4]
	model->pub->key = app_idx;
   115c8:	ea44 340a 	orr.w	r4, r4, sl, lsl #12
   115cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
   115d0:	f3c4 040c 	ubfx	r4, r4, #0, #13
   115d4:	431c      	orrs	r4, r3
	model->pub->ttl = ttl;
   115d6:	f89d 3020 	ldrb.w	r3, [sp, #32]
   115da:	7203      	strb	r3, [r0, #8]
	model->pub->retransmit = retransmit;
   115dc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   115e0:	7243      	strb	r3, [r0, #9]
	if (model->pub->update) {
   115e2:	6943      	ldr	r3, [r0, #20]
	model->pub->key = app_idx;
   115e4:	80c4      	strh	r4, [r0, #6]
	model->pub->period = period;
   115e6:	f880 900a 	strb.w	r9, [r0, #10]
	if (model->pub->update) {
   115ea:	2b00      	cmp	r3, #0
   115ec:	d0de      	beq.n	115ac <_mod_pub_set+0x4c>
		period_ms = bt_mesh_model_pub_period_get(model);
   115ee:	4630      	mov	r0, r6
   115f0:	f7fe f824 	bl	f63c <bt_mesh_model_pub_period_get>
		if (period_ms) {
   115f4:	68b1      	ldr	r1, [r6, #8]
   115f6:	4602      	mov	r2, r0
   115f8:	b120      	cbz	r0, 11604 <_mod_pub_set+0xa4>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   115fa:	3118      	adds	r1, #24
   115fc:	4805      	ldr	r0, [pc, #20]	; (11614 <_mod_pub_set+0xb4>)
   115fe:	f010 fca3 	bl	21f48 <k_delayed_work_submit_to_queue>
   11602:	e7d3      	b.n	115ac <_mod_pub_set+0x4c>
			k_delayed_work_cancel(&model->pub->timer);
   11604:	f101 0018 	add.w	r0, r1, #24
   11608:	e7ce      	b.n	115a8 <_mod_pub_set+0x48>
		return STATUS_NVAL_PUB_PARAM;
   1160a:	2007      	movs	r0, #7
   1160c:	e7c0      	b.n	11590 <_mod_pub_set+0x30>
		return STATUS_INVALID_APPKEY;
   1160e:	2003      	movs	r0, #3
   11610:	e7be      	b.n	11590 <_mod_pub_set+0x30>
   11612:	bf00      	nop
   11614:	20001c08 	.word	0x20001c08

00011618 <mod_app_unbind>:
{
   11618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1161c:	4614      	mov	r4, r2
   1161e:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   11620:	ab06      	add	r3, sp, #24
   11622:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   11626:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   11628:	4620      	mov	r0, r4
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   1162a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1162e:	9303      	str	r3, [sp, #12]
{
   11630:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   11632:	f016 fc33 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11636:	b203      	sxth	r3, r0
   11638:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1163a:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1163c:	dc0c      	bgt.n	11658 <mod_app_unbind+0x40>
   1163e:	4927      	ldr	r1, [pc, #156]	; (116dc <mod_app_unbind+0xc4>)
   11640:	4b27      	ldr	r3, [pc, #156]	; (116e0 <mod_app_unbind+0xc8>)
		BT_WARN("Prohibited element address");
   11642:	4828      	ldr	r0, [pc, #160]	; (116e4 <mod_app_unbind+0xcc>)
   11644:	1ac9      	subs	r1, r1, r3
   11646:	08c9      	lsrs	r1, r1, #3
   11648:	0189      	lsls	r1, r1, #6
   1164a:	f041 0102 	orr.w	r1, r1, #2
		BT_ERR("Unable to send Model App Unbind Status response");
   1164e:	f011 fead 	bl	233ac <log_0>
}
   11652:	b00b      	add	sp, #44	; 0x2c
   11654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	key_app_idx = net_buf_simple_pull_le16(buf);
   11658:	4620      	mov	r0, r4
   1165a:	f016 fc1f 	bl	27e9c <net_buf_simple_pull_le16>
   1165e:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   11660:	4628      	mov	r0, r5
	mod_id = buf->data;
   11662:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   11666:	f7fe f8cb 	bl	f800 <bt_mesh_elem_find>
	if (!elem) {
   1166a:	bb08      	cbnz	r0, 116b0 <mod_app_unbind+0x98>
		vnd = (buf->len == 4U);
   1166c:	88a3      	ldrh	r3, [r4, #4]
   1166e:	1f1a      	subs	r2, r3, #4
   11670:	4253      	negs	r3, r2
   11672:	4153      	adcs	r3, r2
   11674:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   11678:	2001      	movs	r0, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   1167a:	e9cd 0900 	strd	r0, r9, [sp]
   1167e:	f89d 100b 	ldrb.w	r1, [sp, #11]
   11682:	4633      	mov	r3, r6
   11684:	462a      	mov	r2, r5
   11686:	a803      	add	r0, sp, #12
   11688:	f015 fa3a 	bl	26b00 <create_mod_app_status.isra.0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1168c:	2300      	movs	r3, #0
   1168e:	9300      	str	r3, [sp, #0]
   11690:	aa03      	add	r2, sp, #12
   11692:	4641      	mov	r1, r8
   11694:	4638      	mov	r0, r7
   11696:	f015 f9b9 	bl	26a0c <bt_mesh_model_send>
   1169a:	2800      	cmp	r0, #0
   1169c:	d0d9      	beq.n	11652 <mod_app_unbind+0x3a>
   1169e:	490f      	ldr	r1, [pc, #60]	; (116dc <mod_app_unbind+0xc4>)
   116a0:	4b0f      	ldr	r3, [pc, #60]	; (116e0 <mod_app_unbind+0xc8>)
		BT_ERR("Unable to send Model App Unbind Status response");
   116a2:	4811      	ldr	r0, [pc, #68]	; (116e8 <mod_app_unbind+0xd0>)
   116a4:	1ac9      	subs	r1, r1, r3
   116a6:	08c9      	lsrs	r1, r1, #3
   116a8:	0189      	lsls	r1, r1, #6
   116aa:	f041 0101 	orr.w	r1, r1, #1
   116ae:	e7ce      	b.n	1164e <mod_app_unbind+0x36>
	mod = get_model(elem, buf, &vnd);
   116b0:	4621      	mov	r1, r4
   116b2:	f10d 020b 	add.w	r2, sp, #11
   116b6:	f015 fa4e 	bl	26b56 <get_model>
	if (!mod) {
   116ba:	4604      	mov	r4, r0
   116bc:	b148      	cbz	r0, 116d2 <mod_app_unbind+0xba>
	if (!app_key_is_valid(key_idx)) {
   116be:	4630      	mov	r0, r6
   116c0:	f7fe fb1e 	bl	fd00 <app_key_is_valid>
   116c4:	b138      	cbz	r0, 116d6 <mod_app_unbind+0xbe>
   116c6:	2201      	movs	r2, #1
   116c8:	4631      	mov	r1, r6
   116ca:	4620      	mov	r0, r4
   116cc:	f015 fa81 	bl	26bd2 <mod_unbind.part.0>
   116d0:	e7d3      	b.n	1167a <mod_app_unbind+0x62>
		status = STATUS_INVALID_MODEL;
   116d2:	2002      	movs	r0, #2
   116d4:	e7d1      	b.n	1167a <mod_app_unbind+0x62>
		return STATUS_INVALID_APPKEY;
   116d6:	2003      	movs	r0, #3
   116d8:	e7cf      	b.n	1167a <mod_app_unbind+0x62>
   116da:	bf00      	nop
   116dc:	00028960 	.word	0x00028960
   116e0:	00028868 	.word	0x00028868
   116e4:	0002cb1f 	.word	0x0002cb1f
   116e8:	0002ceaf 	.word	0x0002ceaf

000116ec <mod_pub_set>:
{
   116ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116f0:	4680      	mov	r8, r0
   116f2:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   116f4:	4610      	mov	r0, r2
{
   116f6:	4689      	mov	r9, r1
   116f8:	4693      	mov	fp, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   116fa:	f016 fbcf 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   116fe:	b203      	sxth	r3, r0
   11700:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   11702:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11704:	dc0c      	bgt.n	11720 <mod_pub_set+0x34>
   11706:	4934      	ldr	r1, [pc, #208]	; (117d8 <mod_pub_set+0xec>)
   11708:	4b34      	ldr	r3, [pc, #208]	; (117dc <mod_pub_set+0xf0>)
		BT_WARN("Prohibited element address");
   1170a:	4835      	ldr	r0, [pc, #212]	; (117e0 <mod_pub_set+0xf4>)
   1170c:	1ac9      	subs	r1, r1, r3
   1170e:	08c9      	lsrs	r1, r1, #3
   11710:	0189      	lsls	r1, r1, #6
   11712:	f041 0102 	orr.w	r1, r1, #2
   11716:	f011 fe49 	bl	233ac <log_0>
}
   1171a:	b00b      	add	sp, #44	; 0x2c
   1171c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pub_addr = net_buf_simple_pull_le16(buf);
   11720:	4658      	mov	r0, fp
   11722:	f016 fbbb 	bl	27e9c <net_buf_simple_pull_le16>
   11726:	4606      	mov	r6, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   11728:	4658      	mov	r0, fp
   1172a:	f016 fbb7 	bl	27e9c <net_buf_simple_pull_le16>
   1172e:	4607      	mov	r7, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   11730:	4658      	mov	r0, fp
   11732:	f016 fbab 	bl	27e8c <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   11736:	f1a0 0280 	sub.w	r2, r0, #128	; 0x80
   1173a:	b2d2      	uxtb	r2, r2
   1173c:	2a7e      	cmp	r2, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   1173e:	4682      	mov	sl, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   11740:	d80b      	bhi.n	1175a <mod_pub_set+0x6e>
   11742:	4926      	ldr	r1, [pc, #152]	; (117dc <mod_pub_set+0xf0>)
   11744:	4a24      	ldr	r2, [pc, #144]	; (117d8 <mod_pub_set+0xec>)
   11746:	1a52      	subs	r2, r2, r1
   11748:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
   1174a:	0192      	lsls	r2, r2, #6
   1174c:	4601      	mov	r1, r0
   1174e:	f042 0201 	orr.w	r2, r2, #1
   11752:	4824      	ldr	r0, [pc, #144]	; (117e4 <mod_pub_set+0xf8>)
   11754:	f011 fe37 	bl	233c6 <log_1>
		return;
   11758:	e7df      	b.n	1171a <mod_pub_set+0x2e>
	pub_period = net_buf_simple_pull_u8(buf);
   1175a:	4658      	mov	r0, fp
   1175c:	f016 fb96 	bl	27e8c <net_buf_simple_pull_u8>
   11760:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   11762:	4658      	mov	r0, fp
   11764:	f016 fb92 	bl	27e8c <net_buf_simple_pull_u8>
	mod_id = buf->data;
   11768:	f8db 3000 	ldr.w	r3, [fp]
	retransmit = net_buf_simple_pull_u8(buf);
   1176c:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   1176e:	4628      	mov	r0, r5
	mod_id = buf->data;
   11770:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   11772:	f7fe f845 	bl	f800 <bt_mesh_elem_find>
	if (!elem) {
   11776:	4604      	mov	r4, r0
   11778:	b9b0      	cbnz	r0, 117a8 <mod_pub_set+0xbc>
		vnd = (buf->len == 4U);
   1177a:	f8bb 3004 	ldrh.w	r3, [fp, #4]
   1177e:	1f1a      	subs	r2, r3, #4
   11780:	4253      	negs	r3, r2
   11782:	4153      	adcs	r3, r2
   11784:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		status = STATUS_INVALID_ADDRESS;
   11788:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   1178a:	9b05      	ldr	r3, [sp, #20]
   1178c:	3408      	adds	r4, #8
   1178e:	e9cd 0302 	strd	r0, r3, [sp, #8]
   11792:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11796:	9300      	str	r3, [sp, #0]
   11798:	9401      	str	r4, [sp, #4]
   1179a:	4633      	mov	r3, r6
   1179c:	462a      	mov	r2, r5
   1179e:	4649      	mov	r1, r9
   117a0:	4640      	mov	r0, r8
   117a2:	f7ff f8a7 	bl	108f4 <send_mod_pub_status.isra.0>
   117a6:	e7b8      	b.n	1171a <mod_pub_set+0x2e>
	mod = get_model(elem, buf, &vnd);
   117a8:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   117ac:	4659      	mov	r1, fp
   117ae:	f015 f9d2 	bl	26b56 <get_model>
	if (!mod) {
   117b2:	4604      	mov	r4, r0
   117b4:	b170      	cbz	r0, 117d4 <mod_pub_set+0xe8>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   117b6:	9b07      	ldr	r3, [sp, #28]
   117b8:	9302      	str	r3, [sp, #8]
   117ba:	9b06      	ldr	r3, [sp, #24]
   117bc:	2201      	movs	r2, #1
   117be:	e9cd a300 	strd	sl, r3, [sp]
   117c2:	9203      	str	r2, [sp, #12]
   117c4:	f3c7 3300 	ubfx	r3, r7, #12, #1
   117c8:	f3c7 020b 	ubfx	r2, r7, #0, #12
   117cc:	4631      	mov	r1, r6
   117ce:	f7ff fec7 	bl	11560 <_mod_pub_set>
   117d2:	e7da      	b.n	1178a <mod_pub_set+0x9e>
		status = STATUS_INVALID_MODEL;
   117d4:	2002      	movs	r0, #2
   117d6:	e7d8      	b.n	1178a <mod_pub_set+0x9e>
   117d8:	00028960 	.word	0x00028960
   117dc:	00028868 	.word	0x00028868
   117e0:	0002cb1f 	.word	0x0002cb1f
   117e4:	0002ce96 	.word	0x0002ce96

000117e8 <mod_pub_va_set>:
{
   117e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117ec:	4680      	mov	r8, r0
   117ee:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   117f0:	4610      	mov	r0, r2
{
   117f2:	4692      	mov	sl, r2
   117f4:	4689      	mov	r9, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   117f6:	f016 fb51 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   117fa:	b202      	sxth	r2, r0
   117fc:	2a00      	cmp	r2, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   117fe:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11800:	dc0c      	bgt.n	1181c <mod_pub_va_set+0x34>
   11802:	493c      	ldr	r1, [pc, #240]	; (118f4 <mod_pub_va_set+0x10c>)
   11804:	4b3c      	ldr	r3, [pc, #240]	; (118f8 <mod_pub_va_set+0x110>)
		BT_WARN("Prohibited element address");
   11806:	483d      	ldr	r0, [pc, #244]	; (118fc <mod_pub_va_set+0x114>)
   11808:	1ac9      	subs	r1, r1, r3
   1180a:	08c9      	lsrs	r1, r1, #3
   1180c:	0189      	lsls	r1, r1, #6
   1180e:	f041 0102 	orr.w	r1, r1, #2
   11812:	f011 fdcb 	bl	233ac <log_0>
}
   11816:	b00b      	add	sp, #44	; 0x2c
   11818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   1181c:	2110      	movs	r1, #16
   1181e:	4650      	mov	r0, sl
   11820:	f00c feda 	bl	1e5d8 <net_buf_simple_pull_mem>
   11824:	4683      	mov	fp, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   11826:	4650      	mov	r0, sl
   11828:	f016 fb38 	bl	27e9c <net_buf_simple_pull_le16>
   1182c:	4607      	mov	r7, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   1182e:	4650      	mov	r0, sl
   11830:	f016 fb2c 	bl	27e8c <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   11834:	f1a0 0280 	sub.w	r2, r0, #128	; 0x80
   11838:	b2d2      	uxtb	r2, r2
   1183a:	2a7e      	cmp	r2, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   1183c:	4606      	mov	r6, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   1183e:	d80b      	bhi.n	11858 <mod_pub_va_set+0x70>
   11840:	4b2d      	ldr	r3, [pc, #180]	; (118f8 <mod_pub_va_set+0x110>)
   11842:	4a2c      	ldr	r2, [pc, #176]	; (118f4 <mod_pub_va_set+0x10c>)
   11844:	1ad2      	subs	r2, r2, r3
   11846:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
   11848:	0192      	lsls	r2, r2, #6
   1184a:	4601      	mov	r1, r0
   1184c:	f042 0201 	orr.w	r2, r2, #1
   11850:	482b      	ldr	r0, [pc, #172]	; (11900 <mod_pub_va_set+0x118>)
   11852:	f011 fdb8 	bl	233c6 <log_1>
		return;
   11856:	e7de      	b.n	11816 <mod_pub_va_set+0x2e>
	pub_period = net_buf_simple_pull_u8(buf);
   11858:	4650      	mov	r0, sl
   1185a:	f016 fb17 	bl	27e8c <net_buf_simple_pull_u8>
   1185e:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   11860:	4650      	mov	r0, sl
   11862:	f016 fb13 	bl	27e8c <net_buf_simple_pull_u8>
	mod_id = buf->data;
   11866:	f8da 3000 	ldr.w	r3, [sl]
	retransmit = net_buf_simple_pull_u8(buf);
   1186a:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   1186c:	4628      	mov	r0, r5
	mod_id = buf->data;
   1186e:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   11870:	f7fd ffc6 	bl	f800 <bt_mesh_elem_find>
	if (!elem) {
   11874:	4604      	mov	r4, r0
   11876:	b9c8      	cbnz	r0, 118ac <mod_pub_va_set+0xc4>
		vnd = (buf->len == 4U);
   11878:	f8ba 3004 	ldrh.w	r3, [sl, #4]
		pub_addr = 0U;
   1187c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		vnd = (buf->len == 4U);
   11880:	1f1a      	subs	r2, r3, #4
   11882:	4253      	negs	r3, r2
   11884:	4153      	adcs	r3, r2
   11886:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		status = STATUS_INVALID_ADDRESS;
   1188a:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   1188c:	9b05      	ldr	r3, [sp, #20]
   1188e:	3408      	adds	r4, #8
   11890:	e9cd 0302 	strd	r0, r3, [sp, #8]
   11894:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   11898:	9300      	str	r3, [sp, #0]
   1189a:	9401      	str	r4, [sp, #4]
   1189c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   118a0:	462a      	mov	r2, r5
   118a2:	4649      	mov	r1, r9
   118a4:	4640      	mov	r0, r8
   118a6:	f7ff f825 	bl	108f4 <send_mod_pub_status.isra.0>
   118aa:	e7b4      	b.n	11816 <mod_pub_va_set+0x2e>
	mod = get_model(elem, buf, &vnd);
   118ac:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   118b0:	4651      	mov	r1, sl
   118b2:	f015 f950 	bl	26b56 <get_model>
	if (!mod) {
   118b6:	4604      	mov	r4, r0
   118b8:	b918      	cbnz	r0, 118c2 <mod_pub_va_set+0xda>
		pub_addr = 0U;
   118ba:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		status = STATUS_INVALID_MODEL;
   118be:	2002      	movs	r0, #2
		goto send_status;
   118c0:	e7e4      	b.n	1188c <mod_pub_va_set+0xa4>
	status = va_add(label_uuid, &pub_addr);
   118c2:	f10d 0126 	add.w	r1, sp, #38	; 0x26
   118c6:	4658      	mov	r0, fp
   118c8:	f7ff fca6 	bl	11218 <va_add>
	if (status == STATUS_SUCCESS) {
   118cc:	2800      	cmp	r0, #0
   118ce:	d1dd      	bne.n	1188c <mod_pub_va_set+0xa4>
		status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag,
   118d0:	2301      	movs	r3, #1
   118d2:	9303      	str	r3, [sp, #12]
   118d4:	9b07      	ldr	r3, [sp, #28]
   118d6:	9302      	str	r3, [sp, #8]
   118d8:	9b06      	ldr	r3, [sp, #24]
   118da:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   118de:	e9cd 6300 	strd	r6, r3, [sp]
   118e2:	f3c7 020b 	ubfx	r2, r7, #0, #12
   118e6:	f3c7 3300 	ubfx	r3, r7, #12, #1
   118ea:	4620      	mov	r0, r4
   118ec:	f7ff fe38 	bl	11560 <_mod_pub_set>
   118f0:	e7cc      	b.n	1188c <mod_pub_va_set+0xa4>
   118f2:	bf00      	nop
   118f4:	00028960 	.word	0x00028960
   118f8:	00028868 	.word	0x00028868
   118fc:	0002cb1f 	.word	0x0002cb1f
   11900:	0002ce96 	.word	0x0002ce96

00011904 <va_del>:
{
   11904:	b538      	push	{r3, r4, r5, lr}
		if (labels[i].ref == 0) {
   11906:	4d0e      	ldr	r5, [pc, #56]	; (11940 <va_del+0x3c>)
   11908:	882b      	ldrh	r3, [r5, #0]
{
   1190a:	460c      	mov	r4, r1
		if (labels[i].ref == 0) {
   1190c:	b913      	cbnz	r3, 11914 <va_del+0x10>
	if (addr) {
   1190e:	b99c      	cbnz	r4, 11938 <va_del+0x34>
	return STATUS_CANNOT_REMOVE;
   11910:	200c      	movs	r0, #12
   11912:	e010      	b.n	11936 <va_del+0x32>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
   11914:	4601      	mov	r1, r0
   11916:	2210      	movs	r2, #16
   11918:	1d28      	adds	r0, r5, #4
   1191a:	f013 fba9 	bl	25070 <memcmp>
   1191e:	2800      	cmp	r0, #0
   11920:	d1f5      	bne.n	1190e <va_del+0xa>
		update->ref--;
   11922:	882b      	ldrh	r3, [r5, #0]
   11924:	3b01      	subs	r3, #1
   11926:	802b      	strh	r3, [r5, #0]
		if (addr) {
   11928:	b10c      	cbz	r4, 1192e <va_del+0x2a>
			*addr = update->addr;
   1192a:	886b      	ldrh	r3, [r5, #2]
   1192c:	8023      	strh	r3, [r4, #0]
		va_store(update);
   1192e:	4804      	ldr	r0, [pc, #16]	; (11940 <va_del+0x3c>)
   11930:	f015 f940 	bl	26bb4 <va_store>
		return STATUS_SUCCESS;
   11934:	2000      	movs	r0, #0
}
   11936:	bd38      	pop	{r3, r4, r5, pc}
		*addr = BT_MESH_ADDR_UNASSIGNED;
   11938:	2300      	movs	r3, #0
   1193a:	8023      	strh	r3, [r4, #0]
   1193c:	e7e8      	b.n	11910 <va_del+0xc>
   1193e:	bf00      	nop
   11940:	2000098c 	.word	0x2000098c

00011944 <mod_sub_va_del>:
{
   11944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11948:	4606      	mov	r6, r0
   1194a:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   1194c:	4610      	mov	r0, r2
{
   1194e:	460f      	mov	r7, r1
   11950:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   11952:	f016 faa3 	bl	27e9c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11956:	b203      	sxth	r3, r0
   11958:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1195a:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1195c:	dc0c      	bgt.n	11978 <mod_sub_va_del+0x34>
   1195e:	492c      	ldr	r1, [pc, #176]	; (11a10 <mod_sub_va_del+0xcc>)
   11960:	4b2c      	ldr	r3, [pc, #176]	; (11a14 <mod_sub_va_del+0xd0>)
		BT_WARN("Prohibited element address");
   11962:	482d      	ldr	r0, [pc, #180]	; (11a18 <mod_sub_va_del+0xd4>)
   11964:	1ac9      	subs	r1, r1, r3
   11966:	08c9      	lsrs	r1, r1, #3
   11968:	0189      	lsls	r1, r1, #6
   1196a:	f041 0102 	orr.w	r1, r1, #2
   1196e:	f011 fd1d 	bl	233ac <log_0>
}
   11972:	b007      	add	sp, #28
   11974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   11978:	2110      	movs	r1, #16
   1197a:	4620      	mov	r0, r4
   1197c:	f00c fe2c 	bl	1e5d8 <net_buf_simple_pull_mem>
   11980:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
   11982:	4628      	mov	r0, r5
	mod_id = buf->data;
   11984:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   11988:	f7fd ff3a 	bl	f800 <bt_mesh_elem_find>
	if (!elem) {
   1198c:	b9b0      	cbnz	r0, 119bc <mod_sub_va_del+0x78>
		vnd = (buf->len == 4U);
   1198e:	88a2      	ldrh	r2, [r4, #4]
		mod = NULL;
   11990:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   11992:	1f11      	subs	r1, r2, #4
   11994:	424a      	negs	r2, r1
   11996:	414a      	adcs	r2, r1
   11998:	f88d 2011 	strb.w	r2, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1199c:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   119a0:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   119a2:	f89d 3011 	ldrb.w	r3, [sp, #17]
   119a6:	e9cd 8301 	strd	r8, r3, [sp, #4]
   119aa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   119ae:	9300      	str	r3, [sp, #0]
   119b0:	4639      	mov	r1, r7
   119b2:	462b      	mov	r3, r5
   119b4:	4630      	mov	r0, r6
   119b6:	f7fe faef 	bl	ff98 <send_mod_sub_status>
   119ba:	e7da      	b.n	11972 <mod_sub_va_del+0x2e>
	mod = get_model(elem, buf, &vnd);
   119bc:	f10d 0211 	add.w	r2, sp, #17
   119c0:	4621      	mov	r1, r4
   119c2:	f015 f8c8 	bl	26b56 <get_model>
   119c6:	9005      	str	r0, [sp, #20]
	if (!mod) {
   119c8:	b918      	cbnz	r0, 119d2 <mod_sub_va_del+0x8e>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   119ca:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   119ce:	2202      	movs	r2, #2
		goto send_status;
   119d0:	e7e7      	b.n	119a2 <mod_sub_va_del+0x5e>
	status = va_del(label_uuid, &sub_addr);
   119d2:	f10d 0112 	add.w	r1, sp, #18
   119d6:	4648      	mov	r0, r9
   119d8:	f7ff ff94 	bl	11904 <va_del>
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   119dc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	status = va_del(label_uuid, &sub_addr);
   119e0:	4602      	mov	r2, r0
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   119e2:	2b00      	cmp	r3, #0
   119e4:	d0dd      	beq.n	119a2 <mod_sub_va_del+0x5e>
		bt_mesh_lpn_group_del(&sub_addr, 1);
   119e6:	2101      	movs	r1, #1
   119e8:	f10d 0012 	add.w	r0, sp, #18
   119ec:	f002 feea 	bl	147c4 <bt_mesh_lpn_group_del>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   119f0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   119f4:	a805      	add	r0, sp, #20
   119f6:	f014 ffb6 	bl	26966 <bt_mesh_model_find_group>
	if (match) {
   119fa:	b130      	cbz	r0, 11a0a <mod_sub_va_del+0xc6>
		*match = BT_MESH_ADDR_UNASSIGNED;
   119fc:	2400      	movs	r4, #0
   119fe:	8004      	strh	r4, [r0, #0]
			bt_mesh_store_mod_sub(mod);
   11a00:	9805      	ldr	r0, [sp, #20]
   11a02:	f015 faa8 	bl	26f56 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
   11a06:	4622      	mov	r2, r4
   11a08:	e7cb      	b.n	119a2 <mod_sub_va_del+0x5e>
		status = STATUS_CANNOT_REMOVE;
   11a0a:	220c      	movs	r2, #12
   11a0c:	e7c9      	b.n	119a2 <mod_sub_va_del+0x5e>
   11a0e:	bf00      	nop
   11a10:	00028960 	.word	0x00028960
   11a14:	00028868 	.word	0x00028868
   11a18:	0002cb1f 	.word	0x0002cb1f

00011a1c <hb_sub_send_status.constprop.0>:
static void hb_sub_send_status(struct bt_mesh_model *model,
   11a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11a20:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   11a22:	ab06      	add	r3, sp, #24
   11a24:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   11a28:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   11a2c:	69c6      	ldr	r6, [r0, #28]
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   11a2e:	9303      	str	r3, [sp, #12]
static void hb_sub_send_status(struct bt_mesh_model *model,
   11a30:	4607      	mov	r7, r0
   11a32:	468a      	mov	sl, r1
   11a34:	f016 fd34 	bl	284a0 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   11a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	if (uptime > cfg->hb_sub.expiry) {
   11a3c:	e9d6 890e 	ldrd	r8, r9, [r6, #56]	; 0x38
   11a40:	460a      	mov	r2, r1
   11a42:	fba0 0103 	umull	r0, r1, r0, r3
   11a46:	fb03 1102 	mla	r1, r3, r2, r1
   11a4a:	0bc4      	lsrs	r4, r0, #15
   11a4c:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
   11a50:	0bcd      	lsrs	r5, r1, #15
   11a52:	45a0      	cmp	r8, r4
   11a54:	eb79 0305 	sbcs.w	r3, r9, r5
   11a58:	db5a      	blt.n	11b10 <hb_sub_send_status.constprop.0+0xf4>
		period = (cfg->hb_sub.expiry - uptime) / 1000;
   11a5a:	ebb8 0004 	subs.w	r0, r8, r4
   11a5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11a62:	f04f 0300 	mov.w	r3, #0
   11a66:	eb69 0105 	sbc.w	r1, r9, r5
   11a6a:	f7ee fb39 	bl	e0 <__aeabi_ldivmod>
   11a6e:	b284      	uxth	r4, r0
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   11a70:	f248 013c 	movw	r1, #32828	; 0x803c
   11a74:	a803      	add	r0, sp, #12
   11a76:	f014 ffa0 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   11a7a:	2100      	movs	r1, #0
   11a7c:	a803      	add	r0, sp, #12
   11a7e:	f016 fa41 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, cfg->hb_sub.src);
   11a82:	f8b6 1040 	ldrh.w	r1, [r6, #64]	; 0x40
   11a86:	a803      	add	r0, sp, #12
   11a88:	f016 fa43 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, cfg->hb_sub.dst);
   11a8c:	f8b6 1042 	ldrh.w	r1, [r6, #66]	; 0x42
   11a90:	a803      	add	r0, sp, #12
   11a92:	f016 fa3e 	bl	27f12 <net_buf_simple_add_le16>
	if (!val) {
   11a96:	2c00      	cmp	r4, #0
   11a98:	d03c      	beq.n	11b14 <hb_sub_send_status.constprop.0+0xf8>
	} else if (val == 0xffff) {
   11a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11a9e:	429c      	cmp	r4, r3
   11aa0:	d03a      	beq.n	11b18 <hb_sub_send_status.constprop.0+0xfc>
		return 32 - __builtin_clz(val);
   11aa2:	fab4 f484 	clz	r4, r4
   11aa6:	f1c4 0420 	rsb	r4, r4, #32
   11aaa:	b2e1      	uxtb	r1, r4
	net_buf_simple_add_u8(&msg, hb_log(period));
   11aac:	a803      	add	r0, sp, #12
   11aae:	f016 fa29 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, hb_log(cfg->hb_sub.count));
   11ab2:	f8b6 1044 	ldrh.w	r1, [r6, #68]	; 0x44
	if (!val) {
   11ab6:	b149      	cbz	r1, 11acc <hb_sub_send_status.constprop.0+0xb0>
	} else if (val == 0xffff) {
   11ab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11abc:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   11abe:	bf1d      	ittte	ne
   11ac0:	fab1 f181 	clzne	r1, r1
   11ac4:	f1c1 0120 	rsbne	r1, r1, #32
   11ac8:	b2c9      	uxtbne	r1, r1
		return 0xff;
   11aca:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_log(cfg->hb_sub.count));
   11acc:	a803      	add	r0, sp, #12
   11ace:	f016 fa19 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_sub.min_hops);
   11ad2:	f896 1046 	ldrb.w	r1, [r6, #70]	; 0x46
   11ad6:	a803      	add	r0, sp, #12
   11ad8:	f016 fa14 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_sub.max_hops);
   11adc:	f896 1047 	ldrb.w	r1, [r6, #71]	; 0x47
   11ae0:	a803      	add	r0, sp, #12
   11ae2:	f016 fa0f 	bl	27f04 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11ae6:	2300      	movs	r3, #0
   11ae8:	9300      	str	r3, [sp, #0]
   11aea:	aa03      	add	r2, sp, #12
   11aec:	4651      	mov	r1, sl
   11aee:	4638      	mov	r0, r7
   11af0:	f014 ff8c 	bl	26a0c <bt_mesh_model_send>
   11af4:	b148      	cbz	r0, 11b0a <hb_sub_send_status.constprop.0+0xee>
   11af6:	4909      	ldr	r1, [pc, #36]	; (11b1c <hb_sub_send_status.constprop.0+0x100>)
   11af8:	4b09      	ldr	r3, [pc, #36]	; (11b20 <hb_sub_send_status.constprop.0+0x104>)
		BT_ERR("Unable to send Heartbeat Subscription Status");
   11afa:	480a      	ldr	r0, [pc, #40]	; (11b24 <hb_sub_send_status.constprop.0+0x108>)
   11afc:	1ac9      	subs	r1, r1, r3
   11afe:	08c9      	lsrs	r1, r1, #3
   11b00:	0189      	lsls	r1, r1, #6
   11b02:	f041 0101 	orr.w	r1, r1, #1
   11b06:	f011 fc51 	bl	233ac <log_0>
}
   11b0a:	b00a      	add	sp, #40	; 0x28
   11b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		period = 0U;
   11b10:	2400      	movs	r4, #0
   11b12:	e7ad      	b.n	11a70 <hb_sub_send_status.constprop.0+0x54>
		return 0x00;
   11b14:	4621      	mov	r1, r4
   11b16:	e7c9      	b.n	11aac <hb_sub_send_status.constprop.0+0x90>
		return 0xff;
   11b18:	21ff      	movs	r1, #255	; 0xff
   11b1a:	e7c7      	b.n	11aac <hb_sub_send_status.constprop.0+0x90>
   11b1c:	00028960 	.word	0x00028960
   11b20:	00028868 	.word	0x00028868
   11b24:	0002cedf 	.word	0x0002cedf

00011b28 <heartbeat_sub_set>:
{
   11b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   11b2c:	69c5      	ldr	r5, [r0, #28]
{
   11b2e:	4607      	mov	r7, r0
	sub_src = net_buf_simple_pull_le16(buf);
   11b30:	4610      	mov	r0, r2
{
   11b32:	4614      	mov	r4, r2
   11b34:	4688      	mov	r8, r1
	sub_src = net_buf_simple_pull_le16(buf);
   11b36:	f016 f9b1 	bl	27e9c <net_buf_simple_pull_le16>
   11b3a:	4681      	mov	r9, r0
	sub_dst = net_buf_simple_pull_le16(buf);
   11b3c:	4620      	mov	r0, r4
   11b3e:	f016 f9ad 	bl	27e9c <net_buf_simple_pull_le16>
   11b42:	4606      	mov	r6, r0
	sub_period = net_buf_simple_pull_u8(buf);
   11b44:	4620      	mov	r0, r4
   11b46:	f016 f9a1 	bl	27e8c <net_buf_simple_pull_u8>
	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
   11b4a:	f419 4f00 	tst.w	r9, #32768	; 0x8000
	sub_period = net_buf_simple_pull_u8(buf);
   11b4e:	4604      	mov	r4, r0
	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
   11b50:	d00b      	beq.n	11b6a <heartbeat_sub_set+0x42>
   11b52:	4938      	ldr	r1, [pc, #224]	; (11c34 <heartbeat_sub_set+0x10c>)
   11b54:	4b38      	ldr	r3, [pc, #224]	; (11c38 <heartbeat_sub_set+0x110>)
		BT_WARN("Prohibited source address");
   11b56:	4839      	ldr	r0, [pc, #228]	; (11c3c <heartbeat_sub_set+0x114>)
   11b58:	1ac9      	subs	r1, r1, r3
   11b5a:	08c9      	lsrs	r1, r1, #3
   11b5c:	0189      	lsls	r1, r1, #6
   11b5e:	f041 0102 	orr.w	r1, r1, #2
}
   11b62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Prohibited destination address");
   11b66:	f011 bc21 	b.w	233ac <log_0>
	if (BT_MESH_ADDR_IS_VIRTUAL(sub_dst) || BT_MESH_ADDR_IS_RFU(sub_dst) ||
   11b6a:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
   11b6e:	b29b      	uxth	r3, r3
   11b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   11b74:	d208      	bcs.n	11b88 <heartbeat_sub_set+0x60>
   11b76:	492f      	ldr	r1, [pc, #188]	; (11c34 <heartbeat_sub_set+0x10c>)
   11b78:	4b2f      	ldr	r3, [pc, #188]	; (11c38 <heartbeat_sub_set+0x110>)
		BT_WARN("Prohibited destination address");
   11b7a:	4831      	ldr	r0, [pc, #196]	; (11c40 <heartbeat_sub_set+0x118>)
   11b7c:	1ac9      	subs	r1, r1, r3
   11b7e:	08c9      	lsrs	r1, r1, #3
   11b80:	0189      	lsls	r1, r1, #6
   11b82:	f041 0102 	orr.w	r1, r1, #2
   11b86:	e7ec      	b.n	11b62 <heartbeat_sub_set+0x3a>
	if (BT_MESH_ADDR_IS_VIRTUAL(sub_dst) || BT_MESH_ADDR_IS_RFU(sub_dst) ||
   11b88:	f506 7380 	add.w	r3, r6, #256	; 0x100
   11b8c:	b29b      	uxth	r3, r3
   11b8e:	2bfb      	cmp	r3, #251	; 0xfb
   11b90:	d9f1      	bls.n	11b76 <heartbeat_sub_set+0x4e>
   11b92:	b233      	sxth	r3, r6
   11b94:	2b00      	cmp	r3, #0
   11b96:	dd03      	ble.n	11ba0 <heartbeat_sub_set+0x78>
	     sub_dst != bt_mesh_primary_addr())) {
   11b98:	f7fd fe2c 	bl	f7f4 <bt_mesh_primary_addr>
	    (BT_MESH_ADDR_IS_UNICAST(sub_dst) &&
   11b9c:	42b0      	cmp	r0, r6
   11b9e:	d1ea      	bne.n	11b76 <heartbeat_sub_set+0x4e>
	if (sub_period > 0x11) {
   11ba0:	2c11      	cmp	r4, #17
   11ba2:	d90c      	bls.n	11bbe <heartbeat_sub_set+0x96>
   11ba4:	4b24      	ldr	r3, [pc, #144]	; (11c38 <heartbeat_sub_set+0x110>)
   11ba6:	4a23      	ldr	r2, [pc, #140]	; (11c34 <heartbeat_sub_set+0x10c>)
		BT_WARN("Prohibited subscription period 0x%02x", sub_period);
   11ba8:	4826      	ldr	r0, [pc, #152]	; (11c44 <heartbeat_sub_set+0x11c>)
   11baa:	1ad2      	subs	r2, r2, r3
   11bac:	08d2      	lsrs	r2, r2, #3
   11bae:	0192      	lsls	r2, r2, #6
   11bb0:	4621      	mov	r1, r4
   11bb2:	f042 0202 	orr.w	r2, r2, #2
}
   11bb6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Prohibited subscription period 0x%02x", sub_period);
   11bba:	f011 bc04 	b.w	233c6 <log_1>
	if (sub_src == BT_MESH_ADDR_UNASSIGNED ||
   11bbe:	f1b9 0f00 	cmp.w	r9, #0
   11bc2:	d00f      	beq.n	11be4 <heartbeat_sub_set+0xbc>
   11bc4:	b176      	cbz	r6, 11be4 <heartbeat_sub_set+0xbc>
	    sub_dst == BT_MESH_ADDR_UNASSIGNED ||
   11bc6:	b194      	cbz	r4, 11bee <heartbeat_sub_set+0xc6>
		cfg->hb_sub.count = 0U;
   11bc8:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
		period_ms = hb_pwr2(sub_period, 1) * 1000U;
   11bcc:	4620      	mov	r0, r4
		cfg->hb_sub.src = sub_src;
   11bce:	f8a5 9040 	strh.w	r9, [r5, #64]	; 0x40
		cfg->hb_sub.dst = sub_dst;
   11bd2:	f8a5 6042 	strh.w	r6, [r5, #66]	; 0x42
		cfg->hb_sub.count = 0U;
   11bd6:	646b      	str	r3, [r5, #68]	; 0x44
		period_ms = hb_pwr2(sub_period, 1) * 1000U;
   11bd8:	f014 ffde 	bl	26b98 <hb_pwr2.constprop.0>
   11bdc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   11be0:	4344      	muls	r4, r0
   11be2:	e004      	b.n	11bee <heartbeat_sub_set+0xc6>
			cfg->hb_sub.count = 0U;
   11be4:	2400      	movs	r4, #0
   11be6:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
   11bea:	e9c5 4310 	strd	r4, r3, [r5, #64]	; 0x40
	bt_mesh_set_hb_sub_dst(cfg->hb_sub.dst);
   11bee:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
   11bf2:	f7fc fc19 	bl	e428 <bt_mesh_set_hb_sub_dst>
	if (period_ms) {
   11bf6:	b1d4      	cbz	r4, 11c2e <heartbeat_sub_set+0x106>
   11bf8:	f016 fc52 	bl	284a0 <z_impl_k_uptime_ticks>
   11bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11c00:	460a      	mov	r2, r1
   11c02:	fba0 0103 	umull	r0, r1, r0, r3
   11c06:	fb03 1102 	mla	r1, r3, r2, r1
   11c0a:	0bc2      	lsrs	r2, r0, #15
   11c0c:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   11c10:	0bcb      	lsrs	r3, r1, #15
		cfg->hb_sub.expiry = k_uptime_get() + period_ms;
   11c12:	1912      	adds	r2, r2, r4
   11c14:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
		cfg->hb_sub.expiry = 0;
   11c18:	e9c5 230e 	strd	r2, r3, [r5, #56]	; 0x38
	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
   11c1c:	4641      	mov	r1, r8
   11c1e:	4638      	mov	r0, r7
   11c20:	f7ff fefc 	bl	11a1c <hb_sub_send_status.constprop.0>
	if (!period_ms) {
   11c24:	b90c      	cbnz	r4, 11c2a <heartbeat_sub_set+0x102>
		cfg->hb_sub.min_hops = 0U;
   11c26:	f885 4046 	strb.w	r4, [r5, #70]	; 0x46
}
   11c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg->hb_sub.expiry = 0;
   11c2e:	2200      	movs	r2, #0
   11c30:	2300      	movs	r3, #0
   11c32:	e7f1      	b.n	11c18 <heartbeat_sub_set+0xf0>
   11c34:	00028960 	.word	0x00028960
   11c38:	00028868 	.word	0x00028868
   11c3c:	0002cf0c 	.word	0x0002cf0c
   11c40:	0002cf26 	.word	0x0002cf26
   11c44:	0002cf45 	.word	0x0002cf45

00011c48 <bt_mesh_app_key_alloc>:
		if (key->net_idx == BT_MESH_KEY_UNUSED) {
   11c48:	4807      	ldr	r0, [pc, #28]	; (11c68 <bt_mesh_app_key_alloc+0x20>)
   11c4a:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
   11c4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11c52:	429a      	cmp	r2, r3
   11c54:	d005      	beq.n	11c62 <bt_mesh_app_key_alloc+0x1a>
   11c56:	f830 2fcc 	ldrh.w	r2, [r0, #204]!
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
   11c5a:	429a      	cmp	r2, r3
   11c5c:	bf18      	it	ne
   11c5e:	2000      	movne	r0, #0
   11c60:	4770      	bx	lr
   11c62:	30a4      	adds	r0, #164	; 0xa4
}
   11c64:	4770      	bx	lr
   11c66:	bf00      	nop
   11c68:	20006ab8 	.word	0x20006ab8

00011c6c <app_key_update>:
{
   11c6c:	b570      	push	{r4, r5, r6, lr}
   11c6e:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   11c70:	ab04      	add	r3, sp, #16
{
   11c72:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   11c74:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   11c78:	e9cd 2308 	strd	r2, r3, [sp, #32]
{
   11c7c:	4605      	mov	r5, r0
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   11c7e:	f10d 020e 	add.w	r2, sp, #14
{
   11c82:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   11c84:	4620      	mov	r0, r4
   11c86:	a903      	add	r1, sp, #12
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   11c88:	9307      	str	r3, [sp, #28]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   11c8a:	f014 ff24 	bl	26ad6 <key_idx_unpack>
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   11c8e:	f248 0103 	movw	r1, #32771	; 0x8003
   11c92:	a807      	add	r0, sp, #28
   11c94:	f014 fe91 	bl	269ba <bt_mesh_model_msg_init>
	status = app_key_set(key_net_idx, key_app_idx, buf->data, true);
   11c98:	2301      	movs	r3, #1
   11c9a:	6822      	ldr	r2, [r4, #0]
   11c9c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   11ca0:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   11ca4:	f014 ffd5 	bl	26c52 <app_key_set>
   11ca8:	4601      	mov	r1, r0
	net_buf_simple_add_u8(&msg, status);
   11caa:	a807      	add	r0, sp, #28
   11cac:	f016 f92a 	bl	27f04 <net_buf_simple_add_u8>
	key_idx_pack(&msg, key_net_idx, key_app_idx);
   11cb0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   11cb4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   11cb8:	a807      	add	r0, sp, #28
   11cba:	f014 fef9 	bl	26ab0 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11cbe:	2300      	movs	r3, #0
   11cc0:	9300      	str	r3, [sp, #0]
   11cc2:	aa07      	add	r2, sp, #28
   11cc4:	4631      	mov	r1, r6
   11cc6:	4628      	mov	r0, r5
   11cc8:	f014 fea0 	bl	26a0c <bt_mesh_model_send>
   11ccc:	b148      	cbz	r0, 11ce2 <app_key_update+0x76>
   11cce:	4906      	ldr	r1, [pc, #24]	; (11ce8 <app_key_update+0x7c>)
   11cd0:	4b06      	ldr	r3, [pc, #24]	; (11cec <app_key_update+0x80>)
		BT_ERR("Unable to send App Key Status response");
   11cd2:	4807      	ldr	r0, [pc, #28]	; (11cf0 <app_key_update+0x84>)
   11cd4:	1ac9      	subs	r1, r1, r3
   11cd6:	08c9      	lsrs	r1, r1, #3
   11cd8:	0189      	lsls	r1, r1, #6
   11cda:	f041 0101 	orr.w	r1, r1, #1
   11cde:	f011 fb65 	bl	233ac <log_0>
}
   11ce2:	b00a      	add	sp, #40	; 0x28
   11ce4:	bd70      	pop	{r4, r5, r6, pc}
   11ce6:	bf00      	nop
   11ce8:	00028960 	.word	0x00028960
   11cec:	00028868 	.word	0x00028868
   11cf0:	0002cf6b 	.word	0x0002cf6b

00011cf4 <app_key_add>:
{
   11cf4:	b570      	push	{r4, r5, r6, lr}
   11cf6:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   11cf8:	ab04      	add	r3, sp, #16
{
   11cfa:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   11cfc:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   11d00:	e9cd 2308 	strd	r2, r3, [sp, #32]
{
   11d04:	4605      	mov	r5, r0
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   11d06:	f10d 020e 	add.w	r2, sp, #14
{
   11d0a:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   11d0c:	4620      	mov	r0, r4
   11d0e:	a903      	add	r1, sp, #12
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   11d10:	9307      	str	r3, [sp, #28]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   11d12:	f014 fee0 	bl	26ad6 <key_idx_unpack>
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   11d16:	f248 0103 	movw	r1, #32771	; 0x8003
   11d1a:	a807      	add	r0, sp, #28
   11d1c:	f014 fe4d 	bl	269ba <bt_mesh_model_msg_init>
	status = app_key_set(key_net_idx, key_app_idx, buf->data, false);
   11d20:	2300      	movs	r3, #0
   11d22:	6822      	ldr	r2, [r4, #0]
   11d24:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   11d28:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   11d2c:	f014 ff91 	bl	26c52 <app_key_set>
   11d30:	4601      	mov	r1, r0
	net_buf_simple_add_u8(&msg, status);
   11d32:	a807      	add	r0, sp, #28
   11d34:	f016 f8e6 	bl	27f04 <net_buf_simple_add_u8>
	key_idx_pack(&msg, key_net_idx, key_app_idx);
   11d38:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   11d3c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   11d40:	a807      	add	r0, sp, #28
   11d42:	f014 feb5 	bl	26ab0 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11d46:	2300      	movs	r3, #0
   11d48:	9300      	str	r3, [sp, #0]
   11d4a:	aa07      	add	r2, sp, #28
   11d4c:	4631      	mov	r1, r6
   11d4e:	4628      	mov	r0, r5
   11d50:	f014 fe5c 	bl	26a0c <bt_mesh_model_send>
   11d54:	b148      	cbz	r0, 11d6a <app_key_add+0x76>
   11d56:	4906      	ldr	r1, [pc, #24]	; (11d70 <app_key_add+0x7c>)
   11d58:	4b06      	ldr	r3, [pc, #24]	; (11d74 <app_key_add+0x80>)
		BT_ERR("Unable to send App Key Status response");
   11d5a:	4807      	ldr	r0, [pc, #28]	; (11d78 <app_key_add+0x84>)
   11d5c:	1ac9      	subs	r1, r1, r3
   11d5e:	08c9      	lsrs	r1, r1, #3
   11d60:	0189      	lsls	r1, r1, #6
   11d62:	f041 0101 	orr.w	r1, r1, #1
   11d66:	f011 fb21 	bl	233ac <log_0>
}
   11d6a:	b00a      	add	sp, #40	; 0x28
   11d6c:	bd70      	pop	{r4, r5, r6, pc}
   11d6e:	bf00      	nop
   11d70:	00028960 	.word	0x00028960
   11d74:	00028868 	.word	0x00028868
   11d78:	0002cf6b 	.word	0x0002cf6b

00011d7c <bt_mesh_app_key_del>:
{
   11d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct unbind_data data = { .app_idx = key->app_idx, .store = store };
   11d7e:	8843      	ldrh	r3, [r0, #2]
   11d80:	f88d 1006 	strb.w	r1, [sp, #6]
{
   11d84:	460d      	mov	r5, r1
   11d86:	4604      	mov	r4, r0
	bt_mesh_model_foreach(_mod_unbind, &data);
   11d88:	a901      	add	r1, sp, #4
   11d8a:	480a      	ldr	r0, [pc, #40]	; (11db4 <bt_mesh_app_key_del+0x38>)
	struct unbind_data data = { .app_idx = key->app_idx, .store = store };
   11d8c:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_mesh_model_foreach(_mod_unbind, &data);
   11d90:	f7fd fc1a 	bl	f5c8 <bt_mesh_model_foreach>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   11d94:	b115      	cbz	r5, 11d9c <bt_mesh_app_key_del+0x20>
		bt_mesh_clear_app_key(key);
   11d96:	4620      	mov	r0, r4
   11d98:	f015 f8b2 	bl	26f00 <bt_mesh_clear_app_key>
	key->net_idx = BT_MESH_KEY_UNUSED;
   11d9c:	4620      	mov	r0, r4
   11d9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11da2:	f820 3b05 	strh.w	r3, [r0], #5
	(void)memset(key->keys, 0, sizeof(key->keys));
   11da6:	2222      	movs	r2, #34	; 0x22
   11da8:	2100      	movs	r1, #0
   11daa:	f013 f99c 	bl	250e6 <memset>
}
   11dae:	b003      	add	sp, #12
   11db0:	bd30      	pop	{r4, r5, pc}
   11db2:	bf00      	nop
   11db4:	00026c2f 	.word	0x00026c2f

00011db8 <app_key_del>:
{
   11db8:	b570      	push	{r4, r5, r6, lr}
   11dba:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   11dbc:	ab04      	add	r3, sp, #16
{
   11dbe:	4605      	mov	r5, r0
   11dc0:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   11dc2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   11dc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
{
   11dca:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   11dcc:	f10d 020e 	add.w	r2, sp, #14
   11dd0:	a903      	add	r1, sp, #12
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   11dd2:	9307      	str	r3, [sp, #28]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   11dd4:	f014 fe7f 	bl	26ad6 <key_idx_unpack>
	if (!bt_mesh_subnet_get(key_net_idx)) {
   11dd8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   11ddc:	f7fa fcc2 	bl	c764 <bt_mesh_subnet_get>
   11de0:	b390      	cbz	r0, 11e48 <app_key_del+0x90>
	key = bt_mesh_app_key_find(key_app_idx);
   11de2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   11de6:	f7fc fb31 	bl	e44c <bt_mesh_app_key_find>
   11dea:	4604      	mov	r4, r0
	if (!key) {
   11dec:	b140      	cbz	r0, 11e00 <app_key_del+0x48>
	if (key->net_idx != key_net_idx) {
   11dee:	8802      	ldrh	r2, [r0, #0]
   11df0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   11df4:	429a      	cmp	r2, r3
   11df6:	d129      	bne.n	11e4c <app_key_del+0x94>
	bt_mesh_app_key_del(key, true);
   11df8:	2101      	movs	r1, #1
   11dfa:	f7ff ffbf 	bl	11d7c <bt_mesh_app_key_del>
	status = STATUS_SUCCESS;
   11dfe:	2400      	movs	r4, #0
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   11e00:	f248 0103 	movw	r1, #32771	; 0x8003
   11e04:	a807      	add	r0, sp, #28
   11e06:	f014 fdd8 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   11e0a:	4621      	mov	r1, r4
   11e0c:	a807      	add	r0, sp, #28
   11e0e:	f016 f879 	bl	27f04 <net_buf_simple_add_u8>
	key_idx_pack(&msg, key_net_idx, key_app_idx);
   11e12:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   11e16:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   11e1a:	a807      	add	r0, sp, #28
   11e1c:	f014 fe48 	bl	26ab0 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11e20:	2300      	movs	r3, #0
   11e22:	9300      	str	r3, [sp, #0]
   11e24:	aa07      	add	r2, sp, #28
   11e26:	4631      	mov	r1, r6
   11e28:	4628      	mov	r0, r5
   11e2a:	f014 fdef 	bl	26a0c <bt_mesh_model_send>
   11e2e:	b148      	cbz	r0, 11e44 <app_key_del+0x8c>
   11e30:	4907      	ldr	r1, [pc, #28]	; (11e50 <app_key_del+0x98>)
   11e32:	4b08      	ldr	r3, [pc, #32]	; (11e54 <app_key_del+0x9c>)
		BT_ERR("Unable to send App Key Status response");
   11e34:	4808      	ldr	r0, [pc, #32]	; (11e58 <app_key_del+0xa0>)
   11e36:	1ac9      	subs	r1, r1, r3
   11e38:	08c9      	lsrs	r1, r1, #3
   11e3a:	0189      	lsls	r1, r1, #6
   11e3c:	f041 0101 	orr.w	r1, r1, #1
   11e40:	f011 fab4 	bl	233ac <log_0>
}
   11e44:	b00a      	add	sp, #40	; 0x28
   11e46:	bd70      	pop	{r4, r5, r6, pc}
		status = STATUS_INVALID_NETKEY;
   11e48:	2404      	movs	r4, #4
   11e4a:	e7d9      	b.n	11e00 <app_key_del+0x48>
		status = STATUS_INVALID_BINDING;
   11e4c:	2411      	movs	r4, #17
   11e4e:	e7d7      	b.n	11e00 <app_key_del+0x48>
   11e50:	00028960 	.word	0x00028960
   11e54:	00028868 	.word	0x00028868
   11e58:	0002cf6b 	.word	0x0002cf6b

00011e5c <get_label>:
	if (index >= ARRAY_SIZE(labels)) {
   11e5c:	2800      	cmp	r0, #0
}
   11e5e:	4802      	ldr	r0, [pc, #8]	; (11e68 <get_label+0xc>)
   11e60:	bf18      	it	ne
   11e62:	2000      	movne	r0, #0
   11e64:	4770      	bx	lr
   11e66:	bf00      	nop
   11e68:	2000098c 	.word	0x2000098c

00011e6c <bt_mesh_heartbeat>:

	(void)memset(labels, 0, sizeof(labels));
}

void bt_mesh_heartbeat(u16_t src, u16_t dst, u8_t hops, u16_t feat)
{
   11e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e70:	4698      	mov	r8, r3
	struct bt_mesh_cfg_srv *cfg = conf;
   11e72:	4b2e      	ldr	r3, [pc, #184]	; (11f2c <bt_mesh_heartbeat+0xc0>)
   11e74:	681c      	ldr	r4, [r3, #0]
{
   11e76:	4615      	mov	r5, r2

	if (!cfg) {
   11e78:	b95c      	cbnz	r4, 11e92 <bt_mesh_heartbeat+0x26>
   11e7a:	492d      	ldr	r1, [pc, #180]	; (11f30 <bt_mesh_heartbeat+0xc4>)
   11e7c:	4b2d      	ldr	r3, [pc, #180]	; (11f34 <bt_mesh_heartbeat+0xc8>)
		BT_WARN("No configuaration server context available");
   11e7e:	482e      	ldr	r0, [pc, #184]	; (11f38 <bt_mesh_heartbeat+0xcc>)
   11e80:	1ac9      	subs	r1, r1, r3
   11e82:	08c9      	lsrs	r1, r1, #3
   11e84:	0189      	lsls	r1, r1, #6
   11e86:	f041 0102 	orr.w	r1, r1, #2
	       cfg->hb_sub.count);

	if (cfg->hb_sub.func) {
		cfg->hb_sub.func(hops, feat);
	}
}
   11e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("No subscription for received heartbeat");
   11e8e:	f011 ba8d 	b.w	233ac <log_0>
	if (src != cfg->hb_sub.src || dst != cfg->hb_sub.dst) {
   11e92:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
   11e96:	4283      	cmp	r3, r0
   11e98:	d103      	bne.n	11ea2 <bt_mesh_heartbeat+0x36>
   11e9a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   11e9e:	428b      	cmp	r3, r1
   11ea0:	d008      	beq.n	11eb4 <bt_mesh_heartbeat+0x48>
   11ea2:	4923      	ldr	r1, [pc, #140]	; (11f30 <bt_mesh_heartbeat+0xc4>)
   11ea4:	4b23      	ldr	r3, [pc, #140]	; (11f34 <bt_mesh_heartbeat+0xc8>)
		BT_WARN("No subscription for received heartbeat");
   11ea6:	4825      	ldr	r0, [pc, #148]	; (11f3c <bt_mesh_heartbeat+0xd0>)
   11ea8:	1ac9      	subs	r1, r1, r3
   11eaa:	08c9      	lsrs	r1, r1, #3
   11eac:	0189      	lsls	r1, r1, #6
   11eae:	f041 0102 	orr.w	r1, r1, #2
   11eb2:	e7ea      	b.n	11e8a <bt_mesh_heartbeat+0x1e>
   11eb4:	f016 faf4 	bl	284a0 <z_impl_k_uptime_ticks>
   11eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11ebc:	460a      	mov	r2, r1
   11ebe:	fba0 0103 	umull	r0, r1, r0, r3
   11ec2:	fb03 1102 	mla	r1, r3, r2, r1
	if (k_uptime_get() > cfg->hb_sub.expiry) {
   11ec6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   11eca:	0bc6      	lsrs	r6, r0, #15
   11ecc:	ea46 4641 	orr.w	r6, r6, r1, lsl #17
   11ed0:	0bcf      	lsrs	r7, r1, #15
   11ed2:	42b2      	cmp	r2, r6
   11ed4:	41bb      	sbcs	r3, r7
   11ed6:	da08      	bge.n	11eea <bt_mesh_heartbeat+0x7e>
   11ed8:	4915      	ldr	r1, [pc, #84]	; (11f30 <bt_mesh_heartbeat+0xc4>)
   11eda:	4b16      	ldr	r3, [pc, #88]	; (11f34 <bt_mesh_heartbeat+0xc8>)
		BT_WARN("Heartbeat subscription period expired");
   11edc:	4818      	ldr	r0, [pc, #96]	; (11f40 <bt_mesh_heartbeat+0xd4>)
   11ede:	1ac9      	subs	r1, r1, r3
   11ee0:	08c9      	lsrs	r1, r1, #3
   11ee2:	0189      	lsls	r1, r1, #6
   11ee4:	f041 0102 	orr.w	r1, r1, #2
   11ee8:	e7cf      	b.n	11e8a <bt_mesh_heartbeat+0x1e>
	cfg->hb_sub.min_hops = MIN(cfg->hb_sub.min_hops, hops);
   11eea:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	if (cfg->hb_sub.count < 0xffff) {
   11eee:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
	cfg->hb_sub.min_hops = MIN(cfg->hb_sub.min_hops, hops);
   11ef2:	42ab      	cmp	r3, r5
   11ef4:	bf28      	it	cs
   11ef6:	462b      	movcs	r3, r5
   11ef8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	cfg->hb_sub.max_hops = MAX(cfg->hb_sub.max_hops, hops);
   11efc:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   11f00:	42ab      	cmp	r3, r5
   11f02:	bf38      	it	cc
   11f04:	462b      	movcc	r3, r5
   11f06:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	if (cfg->hb_sub.count < 0xffff) {
   11f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11f0e:	429a      	cmp	r2, r3
	if (cfg->hb_sub.func) {
   11f10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		cfg->hb_sub.count++;
   11f12:	bf1c      	itt	ne
   11f14:	3201      	addne	r2, #1
   11f16:	f8a4 2044 	strhne.w	r2, [r4, #68]	; 0x44
	if (cfg->hb_sub.func) {
   11f1a:	b123      	cbz	r3, 11f26 <bt_mesh_heartbeat+0xba>
		cfg->hb_sub.func(hops, feat);
   11f1c:	4641      	mov	r1, r8
   11f1e:	4628      	mov	r0, r5
}
   11f20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cfg->hb_sub.func(hops, feat);
   11f24:	4718      	bx	r3
}
   11f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f2a:	bf00      	nop
   11f2c:	20000988 	.word	0x20000988
   11f30:	00028960 	.word	0x00028960
   11f34:	00028868 	.word	0x00028868
   11f38:	0002cf92 	.word	0x0002cf92
   11f3c:	0002cfbd 	.word	0x0002cfbd
   11f40:	0002cfe4 	.word	0x0002cfe4

00011f44 <bt_mesh_net_transmit_get>:

u8_t bt_mesh_net_transmit_get(void)
{
	if (conf) {
   11f44:	4b02      	ldr	r3, [pc, #8]	; (11f50 <bt_mesh_net_transmit_get+0xc>)
   11f46:	6818      	ldr	r0, [r3, #0]
   11f48:	b100      	cbz	r0, 11f4c <bt_mesh_net_transmit_get+0x8>
		return conf->net_transmit;
   11f4a:	7900      	ldrb	r0, [r0, #4]
	}

	return 0;
}
   11f4c:	4770      	bx	lr
   11f4e:	bf00      	nop
   11f50:	20000988 	.word	0x20000988

00011f54 <net_transmit_set>:
{
   11f54:	b530      	push	{r4, r5, lr}
   11f56:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   11f58:	ab03      	add	r3, sp, #12
{
   11f5a:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   11f5c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
   11f60:	e9cd 1306 	strd	r1, r3, [sp, #24]
   11f64:	9305      	str	r3, [sp, #20]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   11f66:	69c3      	ldr	r3, [r0, #28]
{
   11f68:	4604      	mov	r4, r0
	if (!cfg) {
   11f6a:	bb43      	cbnz	r3, 11fbe <net_transmit_set+0x6a>
   11f6c:	4917      	ldr	r1, [pc, #92]	; (11fcc <net_transmit_set+0x78>)
   11f6e:	4b18      	ldr	r3, [pc, #96]	; (11fd0 <net_transmit_set+0x7c>)
		BT_WARN("No Configuration Server context available");
   11f70:	4818      	ldr	r0, [pc, #96]	; (11fd4 <net_transmit_set+0x80>)
   11f72:	1a5b      	subs	r3, r3, r1
   11f74:	08db      	lsrs	r3, r3, #3
   11f76:	019b      	lsls	r3, r3, #6
   11f78:	f043 0102 	orr.w	r1, r3, #2
   11f7c:	f011 fa16 	bl	233ac <log_0>
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   11f80:	f248 0125 	movw	r1, #32805	; 0x8025
   11f84:	a805      	add	r0, sp, #20
   11f86:	f014 fd18 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   11f8a:	f7ff ffdb 	bl	11f44 <bt_mesh_net_transmit_get>
   11f8e:	4601      	mov	r1, r0
   11f90:	a805      	add	r0, sp, #20
   11f92:	f015 ffb7 	bl	27f04 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11f96:	2300      	movs	r3, #0
   11f98:	9300      	str	r3, [sp, #0]
   11f9a:	aa05      	add	r2, sp, #20
   11f9c:	4629      	mov	r1, r5
   11f9e:	4620      	mov	r0, r4
   11fa0:	f014 fd34 	bl	26a0c <bt_mesh_model_send>
   11fa4:	b148      	cbz	r0, 11fba <net_transmit_set+0x66>
   11fa6:	490a      	ldr	r1, [pc, #40]	; (11fd0 <net_transmit_set+0x7c>)
   11fa8:	4b08      	ldr	r3, [pc, #32]	; (11fcc <net_transmit_set+0x78>)
		BT_ERR("Unable to send Network Transmit Status");
   11faa:	480b      	ldr	r0, [pc, #44]	; (11fd8 <net_transmit_set+0x84>)
   11fac:	1ac9      	subs	r1, r1, r3
   11fae:	08c9      	lsrs	r1, r1, #3
   11fb0:	0189      	lsls	r1, r1, #6
   11fb2:	f041 0101 	orr.w	r1, r1, #1
   11fb6:	f011 f9f9 	bl	233ac <log_0>
}
   11fba:	b009      	add	sp, #36	; 0x24
   11fbc:	bd30      	pop	{r4, r5, pc}
		cfg->net_transmit = buf->data[0];
   11fbe:	6812      	ldr	r2, [r2, #0]
   11fc0:	7812      	ldrb	r2, [r2, #0]
   11fc2:	711a      	strb	r2, [r3, #4]
			bt_mesh_store_cfg();
   11fc4:	f014 ff6c 	bl	26ea0 <bt_mesh_store_cfg>
   11fc8:	e7da      	b.n	11f80 <net_transmit_set+0x2c>
   11fca:	bf00      	nop
   11fcc:	00028868 	.word	0x00028868
   11fd0:	00028960 	.word	0x00028960
   11fd4:	0002cc8d 	.word	0x0002cc8d
   11fd8:	0002d00a 	.word	0x0002d00a

00011fdc <net_transmit_get>:
{
   11fdc:	b530      	push	{r4, r5, lr}
   11fde:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   11fe0:	ab03      	add	r3, sp, #12
   11fe2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   11fe6:	4604      	mov	r4, r0
   11fe8:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   11fea:	a805      	add	r0, sp, #20
   11fec:	f248 0125 	movw	r1, #32805	; 0x8025
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   11ff0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11ff4:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   11ff6:	f014 fce0 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   11ffa:	f7ff ffa3 	bl	11f44 <bt_mesh_net_transmit_get>
   11ffe:	4601      	mov	r1, r0
   12000:	a805      	add	r0, sp, #20
   12002:	f015 ff7f 	bl	27f04 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12006:	2300      	movs	r3, #0
   12008:	9300      	str	r3, [sp, #0]
   1200a:	aa05      	add	r2, sp, #20
   1200c:	4629      	mov	r1, r5
   1200e:	4620      	mov	r0, r4
   12010:	f014 fcfc 	bl	26a0c <bt_mesh_model_send>
   12014:	b148      	cbz	r0, 1202a <net_transmit_get+0x4e>
   12016:	4906      	ldr	r1, [pc, #24]	; (12030 <net_transmit_get+0x54>)
   12018:	4b06      	ldr	r3, [pc, #24]	; (12034 <net_transmit_get+0x58>)
		BT_ERR("Unable to send Config Network Transmit Status");
   1201a:	4807      	ldr	r0, [pc, #28]	; (12038 <net_transmit_get+0x5c>)
   1201c:	1ac9      	subs	r1, r1, r3
   1201e:	08c9      	lsrs	r1, r1, #3
   12020:	0189      	lsls	r1, r1, #6
   12022:	f041 0101 	orr.w	r1, r1, #1
   12026:	f011 f9c1 	bl	233ac <log_0>
}
   1202a:	b009      	add	sp, #36	; 0x24
   1202c:	bd30      	pop	{r4, r5, pc}
   1202e:	bf00      	nop
   12030:	00028960 	.word	0x00028960
   12034:	00028868 	.word	0x00028868
   12038:	0002d031 	.word	0x0002d031

0001203c <bt_mesh_relay_get>:

u8_t bt_mesh_relay_get(void)
{
	if (conf) {
   1203c:	4b03      	ldr	r3, [pc, #12]	; (1204c <bt_mesh_relay_get+0x10>)
   1203e:	681b      	ldr	r3, [r3, #0]
   12040:	b10b      	cbz	r3, 12046 <bt_mesh_relay_get+0xa>
		return conf->relay;
   12042:	7958      	ldrb	r0, [r3, #5]
   12044:	4770      	bx	lr
	}

	return BT_MESH_RELAY_NOT_SUPPORTED;
   12046:	2002      	movs	r0, #2
}
   12048:	4770      	bx	lr
   1204a:	bf00      	nop
   1204c:	20000988 	.word	0x20000988

00012050 <bt_mesh_friend_get>:
u8_t bt_mesh_friend_get(void)
{
	BT_DBG("conf %p conf->frnd 0x%02x", conf,
	       conf ? conf->frnd : BT_MESH_FRIEND_NOT_SUPPORTED);

	if (conf) {
   12050:	4b03      	ldr	r3, [pc, #12]	; (12060 <bt_mesh_friend_get+0x10>)
   12052:	681b      	ldr	r3, [r3, #0]
   12054:	b10b      	cbz	r3, 1205a <bt_mesh_friend_get+0xa>
		return conf->frnd;
   12056:	7a58      	ldrb	r0, [r3, #9]
   12058:	4770      	bx	lr
	}

	return BT_MESH_FRIEND_NOT_SUPPORTED;
   1205a:	2002      	movs	r0, #2
}
   1205c:	4770      	bx	lr
   1205e:	bf00      	nop
   12060:	20000988 	.word	0x20000988

00012064 <bt_mesh_relay_retransmit_get>:

u8_t bt_mesh_relay_retransmit_get(void)
{
	if (conf) {
   12064:	4b02      	ldr	r3, [pc, #8]	; (12070 <bt_mesh_relay_retransmit_get+0xc>)
   12066:	6818      	ldr	r0, [r3, #0]
   12068:	b100      	cbz	r0, 1206c <bt_mesh_relay_retransmit_get+0x8>
		return conf->relay_retransmit;
   1206a:	7980      	ldrb	r0, [r0, #6]
	}

	return 0;
}
   1206c:	4770      	bx	lr
   1206e:	bf00      	nop
   12070:	20000988 	.word	0x20000988

00012074 <relay_set>:
{
   12074:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   12076:	69c7      	ldr	r7, [r0, #28]
{
   12078:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   1207a:	ab03      	add	r3, sp, #12
{
   1207c:	460e      	mov	r6, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   1207e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   12082:	e9cd 1306 	strd	r1, r3, [sp, #24]
{
   12086:	4605      	mov	r5, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   12088:	9305      	str	r3, [sp, #20]
	if (!cfg) {
   1208a:	bb6f      	cbnz	r7, 120e8 <relay_set+0x74>
   1208c:	4929      	ldr	r1, [pc, #164]	; (12134 <relay_set+0xc0>)
   1208e:	4b2a      	ldr	r3, [pc, #168]	; (12138 <relay_set+0xc4>)
		BT_WARN("No Configuration Server context available");
   12090:	482a      	ldr	r0, [pc, #168]	; (1213c <relay_set+0xc8>)
   12092:	1a5b      	subs	r3, r3, r1
   12094:	08db      	lsrs	r3, r3, #3
   12096:	019b      	lsls	r3, r3, #6
   12098:	f043 0102 	orr.w	r1, r3, #2
   1209c:	f011 f986 	bl	233ac <log_0>
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   120a0:	f248 0128 	movw	r1, #32808	; 0x8028
   120a4:	a805      	add	r0, sp, #20
   120a6:	f014 fc88 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   120aa:	f7ff ffc7 	bl	1203c <bt_mesh_relay_get>
   120ae:	4601      	mov	r1, r0
   120b0:	a805      	add	r0, sp, #20
   120b2:	f015 ff27 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   120b6:	f7ff ffd5 	bl	12064 <bt_mesh_relay_retransmit_get>
   120ba:	4601      	mov	r1, r0
   120bc:	a805      	add	r0, sp, #20
   120be:	f015 ff21 	bl	27f04 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   120c2:	2300      	movs	r3, #0
   120c4:	9300      	str	r3, [sp, #0]
   120c6:	aa05      	add	r2, sp, #20
   120c8:	4631      	mov	r1, r6
   120ca:	4628      	mov	r0, r5
   120cc:	f014 fc9e 	bl	26a0c <bt_mesh_model_send>
   120d0:	b368      	cbz	r0, 1212e <relay_set+0xba>
   120d2:	4b18      	ldr	r3, [pc, #96]	; (12134 <relay_set+0xc0>)
   120d4:	4918      	ldr	r1, [pc, #96]	; (12138 <relay_set+0xc4>)
		BT_ERR("Unable to send Relay Status response");
   120d6:	481a      	ldr	r0, [pc, #104]	; (12140 <relay_set+0xcc>)
   120d8:	1ac9      	subs	r1, r1, r3
   120da:	08c9      	lsrs	r1, r1, #3
   120dc:	0189      	lsls	r1, r1, #6
   120de:	f041 0101 	orr.w	r1, r1, #1
   120e2:	f011 f963 	bl	233ac <log_0>
   120e6:	e022      	b.n	1212e <relay_set+0xba>
	} else if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
   120e8:	6813      	ldr	r3, [r2, #0]
   120ea:	7819      	ldrb	r1, [r3, #0]
   120ec:	2901      	cmp	r1, #1
   120ee:	d814      	bhi.n	1211a <relay_set+0xa6>
		if (cfg->relay == BT_MESH_RELAY_NOT_SUPPORTED) {
   120f0:	797c      	ldrb	r4, [r7, #5]
   120f2:	2c02      	cmp	r4, #2
   120f4:	d00f      	beq.n	12116 <relay_set+0xa2>
			cfg->relay = buf->data[0];
   120f6:	7179      	strb	r1, [r7, #5]
			cfg->relay_retransmit = buf->data[1];
   120f8:	785b      	ldrb	r3, [r3, #1]
   120fa:	71bb      	strb	r3, [r7, #6]
			change = (cfg->relay != buf->data[0]);
   120fc:	1b0c      	subs	r4, r1, r4
   120fe:	bf18      	it	ne
   12100:	2401      	movne	r4, #1
				bt_mesh_store_cfg();
   12102:	f014 fecd 	bl	26ea0 <bt_mesh_store_cfg>
		if ((cfg->hb_pub.feat & BT_MESH_FEAT_RELAY) && change) {
   12106:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   12108:	07db      	lsls	r3, r3, #31
   1210a:	d5c9      	bpl.n	120a0 <relay_set+0x2c>
   1210c:	2c00      	cmp	r4, #0
   1210e:	d0c7      	beq.n	120a0 <relay_set+0x2c>
			bt_mesh_heartbeat_send();
   12110:	f7fc ff10 	bl	ef34 <bt_mesh_heartbeat_send>
   12114:	e7c4      	b.n	120a0 <relay_set+0x2c>
			change = false;
   12116:	2400      	movs	r4, #0
   12118:	e7f5      	b.n	12106 <relay_set+0x92>
   1211a:	4a07      	ldr	r2, [pc, #28]	; (12138 <relay_set+0xc4>)
   1211c:	4b05      	ldr	r3, [pc, #20]	; (12134 <relay_set+0xc0>)
		BT_WARN("Invalid Relay value 0x%02x", buf->data[0]);
   1211e:	4809      	ldr	r0, [pc, #36]	; (12144 <relay_set+0xd0>)
   12120:	1ad2      	subs	r2, r2, r3
   12122:	08d2      	lsrs	r2, r2, #3
   12124:	0192      	lsls	r2, r2, #6
   12126:	f042 0202 	orr.w	r2, r2, #2
   1212a:	f011 f94c 	bl	233c6 <log_1>
}
   1212e:	b009      	add	sp, #36	; 0x24
   12130:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12132:	bf00      	nop
   12134:	00028868 	.word	0x00028868
   12138:	00028960 	.word	0x00028960
   1213c:	0002cc8d 	.word	0x0002cc8d
   12140:	0002d07a 	.word	0x0002d07a
   12144:	0002d05f 	.word	0x0002d05f

00012148 <relay_get>:
{
   12148:	b530      	push	{r4, r5, lr}
   1214a:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   1214c:	ab03      	add	r3, sp, #12
   1214e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   12152:	4604      	mov	r4, r0
   12154:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   12156:	a805      	add	r0, sp, #20
   12158:	f248 0128 	movw	r1, #32808	; 0x8028
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   1215c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12160:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   12162:	f014 fc2a 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   12166:	f7ff ff69 	bl	1203c <bt_mesh_relay_get>
   1216a:	4601      	mov	r1, r0
   1216c:	a805      	add	r0, sp, #20
   1216e:	f015 fec9 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   12172:	f7ff ff77 	bl	12064 <bt_mesh_relay_retransmit_get>
   12176:	4601      	mov	r1, r0
   12178:	a805      	add	r0, sp, #20
   1217a:	f015 fec3 	bl	27f04 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1217e:	2300      	movs	r3, #0
   12180:	9300      	str	r3, [sp, #0]
   12182:	aa05      	add	r2, sp, #20
   12184:	4629      	mov	r1, r5
   12186:	4620      	mov	r0, r4
   12188:	f014 fc40 	bl	26a0c <bt_mesh_model_send>
   1218c:	b148      	cbz	r0, 121a2 <relay_get+0x5a>
   1218e:	4906      	ldr	r1, [pc, #24]	; (121a8 <relay_get+0x60>)
   12190:	4b06      	ldr	r3, [pc, #24]	; (121ac <relay_get+0x64>)
		BT_ERR("Unable to send Config Relay Status response");
   12192:	4807      	ldr	r0, [pc, #28]	; (121b0 <relay_get+0x68>)
   12194:	1ac9      	subs	r1, r1, r3
   12196:	08c9      	lsrs	r1, r1, #3
   12198:	0189      	lsls	r1, r1, #6
   1219a:	f041 0101 	orr.w	r1, r1, #1
   1219e:	f011 f905 	bl	233ac <log_0>
}
   121a2:	b009      	add	sp, #36	; 0x24
   121a4:	bd30      	pop	{r4, r5, pc}
   121a6:	bf00      	nop
   121a8:	00028960 	.word	0x00028960
   121ac:	00028868 	.word	0x00028868
   121b0:	0002d09f 	.word	0x0002d09f

000121b4 <bt_mesh_beacon_get>:

u8_t bt_mesh_beacon_get(void)
{
	if (conf) {
   121b4:	4b02      	ldr	r3, [pc, #8]	; (121c0 <bt_mesh_beacon_get+0xc>)
   121b6:	6818      	ldr	r0, [r3, #0]
   121b8:	b100      	cbz	r0, 121bc <bt_mesh_beacon_get+0x8>
		return conf->beacon;
   121ba:	79c0      	ldrb	r0, [r0, #7]
	}

	return BT_MESH_BEACON_DISABLED;
}
   121bc:	4770      	bx	lr
   121be:	bf00      	nop
   121c0:	20000988 	.word	0x20000988

000121c4 <beacon_set>:
{
   121c4:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   121c6:	69c5      	ldr	r5, [r0, #28]
{
   121c8:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   121ca:	ab03      	add	r3, sp, #12
{
   121cc:	460e      	mov	r6, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   121ce:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
   121d2:	e9cd 1306 	strd	r1, r3, [sp, #24]
{
   121d6:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   121d8:	9305      	str	r3, [sp, #20]
	if (!cfg) {
   121da:	bb3d      	cbnz	r5, 1222c <beacon_set+0x68>
   121dc:	4922      	ldr	r1, [pc, #136]	; (12268 <beacon_set+0xa4>)
   121de:	4b23      	ldr	r3, [pc, #140]	; (1226c <beacon_set+0xa8>)
		BT_WARN("No Configuration Server context available");
   121e0:	4823      	ldr	r0, [pc, #140]	; (12270 <beacon_set+0xac>)
   121e2:	1a5b      	subs	r3, r3, r1
   121e4:	08db      	lsrs	r3, r3, #3
   121e6:	019b      	lsls	r3, r3, #6
   121e8:	f043 0102 	orr.w	r1, r3, #2
   121ec:	f011 f8de 	bl	233ac <log_0>
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   121f0:	f248 010b 	movw	r1, #32779	; 0x800b
   121f4:	a805      	add	r0, sp, #20
   121f6:	f014 fbe0 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_get());
   121fa:	f7ff ffdb 	bl	121b4 <bt_mesh_beacon_get>
   121fe:	4601      	mov	r1, r0
   12200:	a805      	add	r0, sp, #20
   12202:	f015 fe7f 	bl	27f04 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12206:	2300      	movs	r3, #0
   12208:	9300      	str	r3, [sp, #0]
   1220a:	aa05      	add	r2, sp, #20
   1220c:	4631      	mov	r1, r6
   1220e:	4620      	mov	r0, r4
   12210:	f014 fbfc 	bl	26a0c <bt_mesh_model_send>
   12214:	b330      	cbz	r0, 12264 <beacon_set+0xa0>
   12216:	4b14      	ldr	r3, [pc, #80]	; (12268 <beacon_set+0xa4>)
   12218:	4914      	ldr	r1, [pc, #80]	; (1226c <beacon_set+0xa8>)
		BT_ERR("Unable to send Config Beacon Status response");
   1221a:	4816      	ldr	r0, [pc, #88]	; (12274 <beacon_set+0xb0>)
   1221c:	1ac9      	subs	r1, r1, r3
   1221e:	08c9      	lsrs	r1, r1, #3
   12220:	0189      	lsls	r1, r1, #6
   12222:	f041 0101 	orr.w	r1, r1, #1
   12226:	f011 f8c1 	bl	233ac <log_0>
   1222a:	e01b      	b.n	12264 <beacon_set+0xa0>
	} else if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
   1222c:	6813      	ldr	r3, [r2, #0]
   1222e:	7819      	ldrb	r1, [r3, #0]
   12230:	2901      	cmp	r1, #1
   12232:	d80d      	bhi.n	12250 <beacon_set+0x8c>
		if (buf->data[0] != cfg->beacon) {
   12234:	79eb      	ldrb	r3, [r5, #7]
   12236:	428b      	cmp	r3, r1
   12238:	d0da      	beq.n	121f0 <beacon_set+0x2c>
			cfg->beacon = buf->data[0];
   1223a:	71e9      	strb	r1, [r5, #7]
				bt_mesh_store_cfg();
   1223c:	f014 fe30 	bl	26ea0 <bt_mesh_store_cfg>
			if (cfg->beacon) {
   12240:	79eb      	ldrb	r3, [r5, #7]
   12242:	b113      	cbz	r3, 1224a <beacon_set+0x86>
				bt_mesh_beacon_enable();
   12244:	f7fa f98c 	bl	c560 <bt_mesh_beacon_enable>
   12248:	e7d2      	b.n	121f0 <beacon_set+0x2c>
				bt_mesh_beacon_disable();
   1224a:	f7fa f9af 	bl	c5ac <bt_mesh_beacon_disable>
   1224e:	e7cf      	b.n	121f0 <beacon_set+0x2c>
   12250:	4a06      	ldr	r2, [pc, #24]	; (1226c <beacon_set+0xa8>)
   12252:	4b05      	ldr	r3, [pc, #20]	; (12268 <beacon_set+0xa4>)
		BT_WARN("Invalid Config Beacon value 0x%02x", buf->data[0]);
   12254:	4808      	ldr	r0, [pc, #32]	; (12278 <beacon_set+0xb4>)
   12256:	1ad2      	subs	r2, r2, r3
   12258:	08d2      	lsrs	r2, r2, #3
   1225a:	0192      	lsls	r2, r2, #6
   1225c:	f042 0202 	orr.w	r2, r2, #2
   12260:	f011 f8b1 	bl	233c6 <log_1>
}
   12264:	b008      	add	sp, #32
   12266:	bd70      	pop	{r4, r5, r6, pc}
   12268:	00028868 	.word	0x00028868
   1226c:	00028960 	.word	0x00028960
   12270:	0002cc8d 	.word	0x0002cc8d
   12274:	0002d0ee 	.word	0x0002d0ee
   12278:	0002d0cb 	.word	0x0002d0cb

0001227c <beacon_get>:
{
   1227c:	b530      	push	{r4, r5, lr}
   1227e:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   12280:	ab03      	add	r3, sp, #12
   12282:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   12286:	4604      	mov	r4, r0
   12288:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   1228a:	a805      	add	r0, sp, #20
   1228c:	f248 010b 	movw	r1, #32779	; 0x800b
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   12290:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12294:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   12296:	f014 fb90 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_get());
   1229a:	f7ff ff8b 	bl	121b4 <bt_mesh_beacon_get>
   1229e:	4601      	mov	r1, r0
   122a0:	a805      	add	r0, sp, #20
   122a2:	f015 fe2f 	bl	27f04 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   122a6:	2300      	movs	r3, #0
   122a8:	9300      	str	r3, [sp, #0]
   122aa:	aa05      	add	r2, sp, #20
   122ac:	4629      	mov	r1, r5
   122ae:	4620      	mov	r0, r4
   122b0:	f014 fbac 	bl	26a0c <bt_mesh_model_send>
   122b4:	b148      	cbz	r0, 122ca <beacon_get+0x4e>
   122b6:	4906      	ldr	r1, [pc, #24]	; (122d0 <beacon_get+0x54>)
   122b8:	4b06      	ldr	r3, [pc, #24]	; (122d4 <beacon_get+0x58>)
		BT_ERR("Unable to send Config Beacon Status response");
   122ba:	4807      	ldr	r0, [pc, #28]	; (122d8 <beacon_get+0x5c>)
   122bc:	1ac9      	subs	r1, r1, r3
   122be:	08c9      	lsrs	r1, r1, #3
   122c0:	0189      	lsls	r1, r1, #6
   122c2:	f041 0101 	orr.w	r1, r1, #1
   122c6:	f011 f871 	bl	233ac <log_0>
}
   122ca:	b009      	add	sp, #36	; 0x24
   122cc:	bd30      	pop	{r4, r5, pc}
   122ce:	bf00      	nop
   122d0:	00028960 	.word	0x00028960
   122d4:	00028868 	.word	0x00028868
   122d8:	0002d0ee 	.word	0x0002d0ee

000122dc <bt_mesh_gatt_proxy_get>:

u8_t bt_mesh_gatt_proxy_get(void)
{
	if (conf) {
   122dc:	4b03      	ldr	r3, [pc, #12]	; (122ec <bt_mesh_gatt_proxy_get+0x10>)
   122de:	681b      	ldr	r3, [r3, #0]
   122e0:	b10b      	cbz	r3, 122e6 <bt_mesh_gatt_proxy_get+0xa>
		return conf->gatt_proxy;
   122e2:	7a18      	ldrb	r0, [r3, #8]
   122e4:	4770      	bx	lr
	}

	return BT_MESH_GATT_PROXY_NOT_SUPPORTED;
   122e6:	2002      	movs	r0, #2
}
   122e8:	4770      	bx	lr
   122ea:	bf00      	nop
   122ec:	20000988 	.word	0x20000988

000122f0 <send_gatt_proxy_status>:
{
   122f0:	b530      	push	{r4, r5, lr}
   122f2:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   122f4:	ab03      	add	r3, sp, #12
   122f6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   122fa:	4604      	mov	r4, r0
   122fc:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   122fe:	a805      	add	r0, sp, #20
   12300:	f248 0114 	movw	r1, #32788	; 0x8014
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   12304:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12308:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   1230a:	f014 fb56 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   1230e:	f7ff ffe5 	bl	122dc <bt_mesh_gatt_proxy_get>
   12312:	4601      	mov	r1, r0
   12314:	a805      	add	r0, sp, #20
   12316:	f015 fdf5 	bl	27f04 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1231a:	2300      	movs	r3, #0
   1231c:	9300      	str	r3, [sp, #0]
   1231e:	aa05      	add	r2, sp, #20
   12320:	4629      	mov	r1, r5
   12322:	4620      	mov	r0, r4
   12324:	f014 fb72 	bl	26a0c <bt_mesh_model_send>
   12328:	b148      	cbz	r0, 1233e <send_gatt_proxy_status+0x4e>
   1232a:	4906      	ldr	r1, [pc, #24]	; (12344 <send_gatt_proxy_status+0x54>)
   1232c:	4b06      	ldr	r3, [pc, #24]	; (12348 <send_gatt_proxy_status+0x58>)
		BT_ERR("Unable to send GATT Proxy Status");
   1232e:	4807      	ldr	r0, [pc, #28]	; (1234c <send_gatt_proxy_status+0x5c>)
   12330:	1ac9      	subs	r1, r1, r3
   12332:	08c9      	lsrs	r1, r1, #3
   12334:	0189      	lsls	r1, r1, #6
   12336:	f041 0101 	orr.w	r1, r1, #1
   1233a:	f011 f837 	bl	233ac <log_0>
}
   1233e:	b009      	add	sp, #36	; 0x24
   12340:	bd30      	pop	{r4, r5, pc}
   12342:	bf00      	nop
   12344:	00028960 	.word	0x00028960
   12348:	00028868 	.word	0x00028868
   1234c:	0002d11b 	.word	0x0002d11b

00012350 <gatt_proxy_set>:
{
   12350:	b570      	push	{r4, r5, r6, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   12352:	6813      	ldr	r3, [r2, #0]
{
   12354:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   12356:	7819      	ldrb	r1, [r3, #0]
   12358:	2901      	cmp	r1, #1
{
   1235a:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1235c:	d90b      	bls.n	12376 <gatt_proxy_set+0x26>
   1235e:	4a17      	ldr	r2, [pc, #92]	; (123bc <gatt_proxy_set+0x6c>)
   12360:	4b17      	ldr	r3, [pc, #92]	; (123c0 <gatt_proxy_set+0x70>)
		BT_WARN("Invalid GATT Proxy value 0x%02x", buf->data[0]);
   12362:	4818      	ldr	r0, [pc, #96]	; (123c4 <gatt_proxy_set+0x74>)
   12364:	1ad2      	subs	r2, r2, r3
   12366:	08d2      	lsrs	r2, r2, #3
   12368:	0192      	lsls	r2, r2, #6
}
   1236a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("Invalid GATT Proxy value 0x%02x", buf->data[0]);
   1236e:	f042 0202 	orr.w	r2, r2, #2
   12372:	f011 b828 	b.w	233c6 <log_1>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
   12376:	f7ff ffb1 	bl	122dc <bt_mesh_gatt_proxy_get>
	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) ||
   1237a:	2802      	cmp	r0, #2
   1237c:	d00b      	beq.n	12396 <gatt_proxy_set+0x46>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   1237e:	69e5      	ldr	r5, [r4, #28]
	if (!cfg) {
   12380:	b97d      	cbnz	r5, 123a2 <gatt_proxy_set+0x52>
   12382:	490f      	ldr	r1, [pc, #60]	; (123c0 <gatt_proxy_set+0x70>)
   12384:	4b0d      	ldr	r3, [pc, #52]	; (123bc <gatt_proxy_set+0x6c>)
		BT_WARN("No Configuration Server context available");
   12386:	4810      	ldr	r0, [pc, #64]	; (123c8 <gatt_proxy_set+0x78>)
   12388:	1a5b      	subs	r3, r3, r1
   1238a:	08db      	lsrs	r3, r3, #3
   1238c:	019b      	lsls	r3, r3, #6
   1238e:	f043 0102 	orr.w	r1, r3, #2
   12392:	f011 f80b 	bl	233ac <log_0>
	send_gatt_proxy_status(model, ctx);
   12396:	4631      	mov	r1, r6
   12398:	4620      	mov	r0, r4
}
   1239a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_gatt_proxy_status(model, ctx);
   1239e:	f7ff bfa7 	b.w	122f0 <send_gatt_proxy_status>
	if (cfg->gatt_proxy == buf->data[0]) {
   123a2:	7a2b      	ldrb	r3, [r5, #8]
   123a4:	428b      	cmp	r3, r1
   123a6:	d0f6      	beq.n	12396 <gatt_proxy_set+0x46>
	cfg->gatt_proxy = buf->data[0];
   123a8:	7229      	strb	r1, [r5, #8]
		bt_mesh_store_cfg();
   123aa:	f014 fd79 	bl	26ea0 <bt_mesh_store_cfg>
	if (cfg->hb_pub.feat & BT_MESH_FEAT_PROXY) {
   123ae:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
   123b0:	079b      	lsls	r3, r3, #30
   123b2:	d5f0      	bpl.n	12396 <gatt_proxy_set+0x46>
		bt_mesh_heartbeat_send();
   123b4:	f7fc fdbe 	bl	ef34 <bt_mesh_heartbeat_send>
   123b8:	e7ed      	b.n	12396 <gatt_proxy_set+0x46>
   123ba:	bf00      	nop
   123bc:	00028960 	.word	0x00028960
   123c0:	00028868 	.word	0x00028868
   123c4:	0002d13c 	.word	0x0002d13c
   123c8:	0002cc8d 	.word	0x0002cc8d

000123cc <bt_mesh_default_ttl_get>:

u8_t bt_mesh_default_ttl_get(void)
{
	if (conf) {
   123cc:	4b03      	ldr	r3, [pc, #12]	; (123dc <bt_mesh_default_ttl_get+0x10>)
   123ce:	681b      	ldr	r3, [r3, #0]
   123d0:	b10b      	cbz	r3, 123d6 <bt_mesh_default_ttl_get+0xa>
		return conf->default_ttl;
   123d2:	7a98      	ldrb	r0, [r3, #10]
   123d4:	4770      	bx	lr
	}

	return DEFAULT_TTL;
   123d6:	2007      	movs	r0, #7
}
   123d8:	4770      	bx	lr
   123da:	bf00      	nop
   123dc:	20000988 	.word	0x20000988

000123e0 <default_ttl_set>:
{
   123e0:	b530      	push	{r4, r5, lr}
   123e2:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   123e4:	ab03      	add	r3, sp, #12
{
   123e6:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   123e8:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
   123ec:	e9cd 1306 	strd	r1, r3, [sp, #24]
   123f0:	9305      	str	r3, [sp, #20]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   123f2:	69c3      	ldr	r3, [r0, #28]
{
   123f4:	4604      	mov	r4, r0
	if (!cfg) {
   123f6:	bb3b      	cbnz	r3, 12448 <default_ttl_set+0x68>
   123f8:	4921      	ldr	r1, [pc, #132]	; (12480 <default_ttl_set+0xa0>)
   123fa:	4b22      	ldr	r3, [pc, #136]	; (12484 <default_ttl_set+0xa4>)
		BT_WARN("No Configuration Server context available");
   123fc:	4822      	ldr	r0, [pc, #136]	; (12488 <default_ttl_set+0xa8>)
   123fe:	1a5b      	subs	r3, r3, r1
   12400:	08db      	lsrs	r3, r3, #3
   12402:	019b      	lsls	r3, r3, #6
   12404:	f043 0102 	orr.w	r1, r3, #2
   12408:	f010 ffd0 	bl	233ac <log_0>
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   1240c:	f248 010e 	movw	r1, #32782	; 0x800e
   12410:	a805      	add	r0, sp, #20
   12412:	f014 fad2 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   12416:	f7ff ffd9 	bl	123cc <bt_mesh_default_ttl_get>
   1241a:	4601      	mov	r1, r0
   1241c:	a805      	add	r0, sp, #20
   1241e:	f015 fd71 	bl	27f04 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12422:	2300      	movs	r3, #0
   12424:	9300      	str	r3, [sp, #0]
   12426:	aa05      	add	r2, sp, #20
   12428:	4629      	mov	r1, r5
   1242a:	4620      	mov	r0, r4
   1242c:	f014 faee 	bl	26a0c <bt_mesh_model_send>
   12430:	b318      	cbz	r0, 1247a <default_ttl_set+0x9a>
   12432:	4b13      	ldr	r3, [pc, #76]	; (12480 <default_ttl_set+0xa0>)
   12434:	4913      	ldr	r1, [pc, #76]	; (12484 <default_ttl_set+0xa4>)
		BT_ERR("Unable to send Default TTL Status response");
   12436:	4815      	ldr	r0, [pc, #84]	; (1248c <default_ttl_set+0xac>)
   12438:	1ac9      	subs	r1, r1, r3
   1243a:	08c9      	lsrs	r1, r1, #3
   1243c:	0189      	lsls	r1, r1, #6
   1243e:	f041 0101 	orr.w	r1, r1, #1
   12442:	f010 ffb3 	bl	233ac <log_0>
   12446:	e018      	b.n	1247a <default_ttl_set+0x9a>
	} else if (buf->data[0] <= BT_MESH_TTL_MAX && buf->data[0] != 0x01) {
   12448:	6812      	ldr	r2, [r2, #0]
   1244a:	7811      	ldrb	r1, [r2, #0]
   1244c:	f992 2000 	ldrsb.w	r2, [r2]
   12450:	2a00      	cmp	r2, #0
   12452:	db08      	blt.n	12466 <default_ttl_set+0x86>
   12454:	2901      	cmp	r1, #1
   12456:	d006      	beq.n	12466 <default_ttl_set+0x86>
		if (cfg->default_ttl != buf->data[0]) {
   12458:	7a9a      	ldrb	r2, [r3, #10]
   1245a:	428a      	cmp	r2, r1
   1245c:	d0d6      	beq.n	1240c <default_ttl_set+0x2c>
			cfg->default_ttl = buf->data[0];
   1245e:	7299      	strb	r1, [r3, #10]
				bt_mesh_store_cfg();
   12460:	f014 fd1e 	bl	26ea0 <bt_mesh_store_cfg>
   12464:	e7d2      	b.n	1240c <default_ttl_set+0x2c>
   12466:	4a07      	ldr	r2, [pc, #28]	; (12484 <default_ttl_set+0xa4>)
   12468:	4b05      	ldr	r3, [pc, #20]	; (12480 <default_ttl_set+0xa0>)
		BT_WARN("Prohibited Default TTL value 0x%02x", buf->data[0]);
   1246a:	4809      	ldr	r0, [pc, #36]	; (12490 <default_ttl_set+0xb0>)
   1246c:	1ad2      	subs	r2, r2, r3
   1246e:	08d2      	lsrs	r2, r2, #3
   12470:	0192      	lsls	r2, r2, #6
   12472:	f042 0202 	orr.w	r2, r2, #2
   12476:	f010 ffa6 	bl	233c6 <log_1>
}
   1247a:	b009      	add	sp, #36	; 0x24
   1247c:	bd30      	pop	{r4, r5, pc}
   1247e:	bf00      	nop
   12480:	00028868 	.word	0x00028868
   12484:	00028960 	.word	0x00028960
   12488:	0002cc8d 	.word	0x0002cc8d
   1248c:	0002d180 	.word	0x0002d180
   12490:	0002d15c 	.word	0x0002d15c

00012494 <default_ttl_get>:
{
   12494:	b530      	push	{r4, r5, lr}
   12496:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   12498:	ab03      	add	r3, sp, #12
   1249a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1249e:	4604      	mov	r4, r0
   124a0:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   124a2:	a805      	add	r0, sp, #20
   124a4:	f248 010e 	movw	r1, #32782	; 0x800e
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   124a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   124ac:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   124ae:	f014 fa84 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   124b2:	f7ff ff8b 	bl	123cc <bt_mesh_default_ttl_get>
   124b6:	4601      	mov	r1, r0
   124b8:	a805      	add	r0, sp, #20
   124ba:	f015 fd23 	bl	27f04 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   124be:	2300      	movs	r3, #0
   124c0:	9300      	str	r3, [sp, #0]
   124c2:	aa05      	add	r2, sp, #20
   124c4:	4629      	mov	r1, r5
   124c6:	4620      	mov	r0, r4
   124c8:	f014 faa0 	bl	26a0c <bt_mesh_model_send>
   124cc:	b148      	cbz	r0, 124e2 <default_ttl_get+0x4e>
   124ce:	4906      	ldr	r1, [pc, #24]	; (124e8 <default_ttl_get+0x54>)
   124d0:	4b06      	ldr	r3, [pc, #24]	; (124ec <default_ttl_get+0x58>)
		BT_ERR("Unable to send Default TTL Status response");
   124d2:	4807      	ldr	r0, [pc, #28]	; (124f0 <default_ttl_get+0x5c>)
   124d4:	1ac9      	subs	r1, r1, r3
   124d6:	08c9      	lsrs	r1, r1, #3
   124d8:	0189      	lsls	r1, r1, #6
   124da:	f041 0101 	orr.w	r1, r1, #1
   124de:	f010 ff65 	bl	233ac <log_0>
}
   124e2:	b009      	add	sp, #36	; 0x24
   124e4:	bd30      	pop	{r4, r5, pc}
   124e6:	bf00      	nop
   124e8:	00028960 	.word	0x00028960
   124ec:	00028868 	.word	0x00028868
   124f0:	0002d180 	.word	0x0002d180

000124f4 <bt_mesh_label_uuid_get>:

u8_t *bt_mesh_label_uuid_get(u16_t addr)
{
   124f4:	4601      	mov	r1, r0
	int i;

	BT_DBG("addr 0x%04x", addr);

	for (i = 0; i < ARRAY_SIZE(labels); i++) {
		if (labels[i].addr == addr) {
   124f6:	4809      	ldr	r0, [pc, #36]	; (1251c <bt_mesh_label_uuid_get+0x28>)
   124f8:	8842      	ldrh	r2, [r0, #2]
   124fa:	428a      	cmp	r2, r1
{
   124fc:	b508      	push	{r3, lr}
		if (labels[i].addr == addr) {
   124fe:	d00b      	beq.n	12518 <bt_mesh_label_uuid_get+0x24>
   12500:	4b07      	ldr	r3, [pc, #28]	; (12520 <bt_mesh_label_uuid_get+0x2c>)
   12502:	4a08      	ldr	r2, [pc, #32]	; (12524 <bt_mesh_label_uuid_get+0x30>)
			       bt_hex(labels[i].uuid, 16));
			return labels[i].uuid;
		}
	}

	BT_WARN("No matching Label UUID for 0x%04x", addr);
   12504:	4808      	ldr	r0, [pc, #32]	; (12528 <bt_mesh_label_uuid_get+0x34>)
   12506:	1ad2      	subs	r2, r2, r3
   12508:	08d2      	lsrs	r2, r2, #3
   1250a:	0192      	lsls	r2, r2, #6
   1250c:	f042 0202 	orr.w	r2, r2, #2
   12510:	f010 ff59 	bl	233c6 <log_1>

	return NULL;
   12514:	2000      	movs	r0, #0
}
   12516:	bd08      	pop	{r3, pc}
			return labels[i].uuid;
   12518:	3004      	adds	r0, #4
   1251a:	e7fc      	b.n	12516 <bt_mesh_label_uuid_get+0x22>
   1251c:	2000098c 	.word	0x2000098c
   12520:	00028868 	.word	0x00028868
   12524:	00028960 	.word	0x00028960
   12528:	0002d1ab 	.word	0x0002d1ab

0001252c <mod_sub_list_clear>:
{
   1252c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12530:	4b16      	ldr	r3, [pc, #88]	; (1258c <mod_sub_list_clear+0x60>)
   12532:	4c17      	ldr	r4, [pc, #92]	; (12590 <mod_sub_list_clear+0x64>)
			BT_ERR("Label UUID not found");
   12534:	f8df 805c 	ldr.w	r8, [pc, #92]	; 12594 <mod_sub_list_clear+0x68>
   12538:	1ae4      	subs	r4, r4, r3
   1253a:	08e4      	lsrs	r4, r4, #3
   1253c:	01a4      	lsls	r4, r4, #6
   1253e:	f100 0610 	add.w	r6, r0, #16
   12542:	f100 0714 	add.w	r7, r0, #20
	for (i = 0, clear_count = 0; i < ARRAY_SIZE(mod->groups); i++) {
   12546:	2500      	movs	r5, #0
			BT_ERR("Label UUID not found");
   12548:	f044 0401 	orr.w	r4, r4, #1
		if (!BT_MESH_ADDR_IS_VIRTUAL(mod->groups[i])) {
   1254c:	f836 0b02 	ldrh.w	r0, [r6], #2
   12550:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   12554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   12558:	d309      	bcc.n	1256e <mod_sub_list_clear+0x42>
			if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   1255a:	b118      	cbz	r0, 12564 <mod_sub_list_clear+0x38>
				mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   1255c:	2300      	movs	r3, #0
   1255e:	f826 3c02 	strh.w	r3, [r6, #-2]
				clear_count++;
   12562:	3501      	adds	r5, #1
	for (i = 0, clear_count = 0; i < ARRAY_SIZE(mod->groups); i++) {
   12564:	42b7      	cmp	r7, r6
   12566:	d1f1      	bne.n	1254c <mod_sub_list_clear+0x20>
}
   12568:	4628      	mov	r0, r5
   1256a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		label_uuid = bt_mesh_label_uuid_get(mod->groups[i]);
   1256e:	f7ff ffc1 	bl	124f4 <bt_mesh_label_uuid_get>
		mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   12572:	2100      	movs	r1, #0
   12574:	f826 1c02 	strh.w	r1, [r6, #-2]
		clear_count++;
   12578:	3501      	adds	r5, #1
		if (label_uuid) {
   1257a:	b110      	cbz	r0, 12582 <mod_sub_list_clear+0x56>
			va_del(label_uuid, NULL);
   1257c:	f7ff f9c2 	bl	11904 <va_del>
   12580:	e7f0      	b.n	12564 <mod_sub_list_clear+0x38>
			BT_ERR("Label UUID not found");
   12582:	4621      	mov	r1, r4
   12584:	4640      	mov	r0, r8
   12586:	f010 ff11 	bl	233ac <log_0>
   1258a:	e7eb      	b.n	12564 <mod_sub_list_clear+0x38>
   1258c:	00028868 	.word	0x00028868
   12590:	00028960 	.word	0x00028960
   12594:	0002d1cd 	.word	0x0002d1cd

00012598 <bt_mesh_hb_pub_get>:

struct bt_mesh_hb_pub *bt_mesh_hb_pub_get(void)
{
	if (!conf) {
   12598:	4b02      	ldr	r3, [pc, #8]	; (125a4 <bt_mesh_hb_pub_get+0xc>)
   1259a:	6818      	ldr	r0, [r3, #0]
   1259c:	b100      	cbz	r0, 125a0 <bt_mesh_hb_pub_get+0x8>
		return NULL;
	}

	return &conf->hb_pub;
   1259e:	300c      	adds	r0, #12
}
   125a0:	4770      	bx	lr
   125a2:	bf00      	nop
   125a4:	20000988 	.word	0x20000988

000125a8 <bt_mesh_cfg_get>:
}

struct bt_mesh_cfg_srv *bt_mesh_cfg_get(void)
{
	return conf;
}
   125a8:	4b01      	ldr	r3, [pc, #4]	; (125b0 <bt_mesh_cfg_get+0x8>)
   125aa:	6818      	ldr	r0, [r3, #0]
   125ac:	4770      	bx	lr
   125ae:	bf00      	nop
   125b0:	20000988 	.word	0x20000988

000125b4 <bt_mesh_subnet_del>:
{
	int i;

	BT_DBG("NetIdx 0x%03x store %u", sub->net_idx, store);

	if (conf && conf->hb_pub.net_idx == sub->net_idx) {
   125b4:	4b19      	ldr	r3, [pc, #100]	; (1261c <bt_mesh_subnet_del+0x68>)
{
   125b6:	b570      	push	{r4, r5, r6, lr}
   125b8:	4604      	mov	r4, r0
	if (conf && conf->hb_pub.net_idx == sub->net_idx) {
   125ba:	6818      	ldr	r0, [r3, #0]
{
   125bc:	460d      	mov	r5, r1
	if (conf && conf->hb_pub.net_idx == sub->net_idx) {
   125be:	b160      	cbz	r0, 125da <bt_mesh_subnet_del+0x26>
   125c0:	8e82      	ldrh	r2, [r0, #52]	; 0x34
   125c2:	8ba3      	ldrh	r3, [r4, #28]
   125c4:	429a      	cmp	r2, r3
   125c6:	d108      	bne.n	125da <bt_mesh_subnet_del+0x26>
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
   125c8:	2300      	movs	r3, #0
   125ca:	62c3      	str	r3, [r0, #44]	; 0x2c
	cfg->hb_pub.period = 0U;
   125cc:	8603      	strh	r3, [r0, #48]	; 0x30
	k_delayed_work_cancel(&cfg->hb_pub.timer);
   125ce:	300c      	adds	r0, #12
   125d0:	f00f fd4a 	bl	22068 <k_delayed_work_cancel>
		hb_pub_disable(conf);

		if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   125d4:	b10d      	cbz	r5, 125da <bt_mesh_subnet_del+0x26>
			bt_mesh_store_hb_pub();
   125d6:	f014 fc60 	bl	26e9a <bt_mesh_store_hb_pub>

	/* Delete any app keys bound to this NetKey index */
	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];

		if (key->net_idx == sub->net_idx) {
   125da:	4e11      	ldr	r6, [pc, #68]	; (12620 <bt_mesh_subnet_del+0x6c>)
   125dc:	8ba3      	ldrh	r3, [r4, #28]
   125de:	f8b6 20a4 	ldrh.w	r2, [r6, #164]	; 0xa4
   125e2:	429a      	cmp	r2, r3
   125e4:	d104      	bne.n	125f0 <bt_mesh_subnet_del+0x3c>
			bt_mesh_app_key_del(key, store);
   125e6:	4629      	mov	r1, r5
   125e8:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
   125ec:	f7ff fbc6 	bl	11d7c <bt_mesh_app_key_del>
		if (key->net_idx == sub->net_idx) {
   125f0:	f8b6 20cc 	ldrh.w	r2, [r6, #204]	; 0xcc
   125f4:	8ba3      	ldrh	r3, [r4, #28]
   125f6:	429a      	cmp	r2, r3
   125f8:	d103      	bne.n	12602 <bt_mesh_subnet_del+0x4e>
			bt_mesh_app_key_del(key, store);
   125fa:	480a      	ldr	r0, [pc, #40]	; (12624 <bt_mesh_subnet_del+0x70>)
   125fc:	4629      	mov	r1, r5
   125fe:	f7ff fbbd 	bl	11d7c <bt_mesh_app_key_del>

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_clear_net_idx(sub->net_idx);
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   12602:	b115      	cbz	r5, 1260a <bt_mesh_subnet_del+0x56>
		bt_mesh_clear_subnet(sub);
   12604:	4620      	mov	r0, r4
   12606:	f014 fc5a 	bl	26ebe <bt_mesh_clear_subnet>
	}

	(void)memset(sub, 0, sizeof(*sub));
   1260a:	22e4      	movs	r2, #228	; 0xe4
   1260c:	2100      	movs	r1, #0
   1260e:	4620      	mov	r0, r4
   12610:	f012 fd69 	bl	250e6 <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
   12614:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12618:	83a3      	strh	r3, [r4, #28]
}
   1261a:	bd70      	pop	{r4, r5, r6, pc}
   1261c:	20000988 	.word	0x20000988
   12620:	20006ab8 	.word	0x20006ab8
   12624:	20006b84 	.word	0x20006b84

00012628 <net_key_del>:
{
   12628:	b570      	push	{r4, r5, r6, lr}
   1262a:	4606      	mov	r6, r0
	del_idx = net_buf_simple_pull_le16(buf);
   1262c:	4610      	mov	r0, r2
{
   1262e:	460d      	mov	r5, r1
	del_idx = net_buf_simple_pull_le16(buf);
   12630:	f015 fc34 	bl	27e9c <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
   12634:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
   12638:	4604      	mov	r4, r0
	if (del_idx > 0xfff) {
   1263a:	d30c      	bcc.n	12656 <net_key_del+0x2e>
   1263c:	4a10      	ldr	r2, [pc, #64]	; (12680 <net_key_del+0x58>)
   1263e:	4b11      	ldr	r3, [pc, #68]	; (12684 <net_key_del+0x5c>)
   12640:	1ad2      	subs	r2, r2, r3
   12642:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   12644:	0192      	lsls	r2, r2, #6
   12646:	4601      	mov	r1, r0
}
   12648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   1264c:	480e      	ldr	r0, [pc, #56]	; (12688 <net_key_del+0x60>)
   1264e:	f042 0201 	orr.w	r2, r2, #1
   12652:	f010 beb8 	b.w	233c6 <log_1>
	sub = bt_mesh_subnet_get(del_idx);
   12656:	f7fa f885 	bl	c764 <bt_mesh_subnet_get>
   1265a:	4603      	mov	r3, r0
	if (!sub) {
   1265c:	b130      	cbz	r0, 1266c <net_key_del+0x44>
	if (ctx->net_idx == del_idx) {
   1265e:	882b      	ldrh	r3, [r5, #0]
   12660:	42a3      	cmp	r3, r4
   12662:	d00a      	beq.n	1267a <net_key_del+0x52>
	bt_mesh_subnet_del(sub, true);
   12664:	2101      	movs	r1, #1
   12666:	f7ff ffa5 	bl	125b4 <bt_mesh_subnet_del>
	status = STATUS_SUCCESS;
   1266a:	2300      	movs	r3, #0
	send_net_key_status(model, ctx, del_idx, status);
   1266c:	4622      	mov	r2, r4
   1266e:	4629      	mov	r1, r5
   12670:	4630      	mov	r0, r6
}
   12672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_net_key_status(model, ctx, del_idx, status);
   12676:	f7fe b841 	b.w	106fc <send_net_key_status>
		status = STATUS_CANNOT_REMOVE;
   1267a:	230c      	movs	r3, #12
   1267c:	e7f6      	b.n	1266c <net_key_del+0x44>
   1267e:	bf00      	nop
   12680:	00028960 	.word	0x00028960
   12684:	00028868 	.word	0x00028868
   12688:	0002ca32 	.word	0x0002ca32

0001268c <bt_mesh_cfg_reset>:
	struct bt_mesh_cfg_srv *cfg = conf;
   1268c:	4b17      	ldr	r3, [pc, #92]	; (126ec <bt_mesh_cfg_reset+0x60>)
{
   1268e:	b510      	push	{r4, lr}
	struct bt_mesh_cfg_srv *cfg = conf;
   12690:	681c      	ldr	r4, [r3, #0]
	if (!cfg) {
   12692:	b34c      	cbz	r4, 126e8 <bt_mesh_cfg_reset+0x5c>
	bt_mesh_set_hb_sub_dst(BT_MESH_ADDR_UNASSIGNED);
   12694:	2000      	movs	r0, #0
   12696:	f7fb fec7 	bl	e428 <bt_mesh_set_hb_sub_dst>
	cfg->hb_sub.expiry = 0;
   1269a:	2200      	movs	r2, #0
   1269c:	2300      	movs	r3, #0
   1269e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
   126a2:	2300      	movs	r3, #0
   126a4:	6423      	str	r3, [r4, #64]	; 0x40
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   126a6:	4c12      	ldr	r4, [pc, #72]	; (126f0 <bt_mesh_cfg_reset+0x64>)
   126a8:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
   126ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   126b0:	429a      	cmp	r2, r3
   126b2:	d004      	beq.n	126be <bt_mesh_cfg_reset+0x32>
			bt_mesh_subnet_del(sub, true);
   126b4:	2101      	movs	r1, #1
   126b6:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   126ba:	f7ff ff7b 	bl	125b4 <bt_mesh_subnet_del>
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   126be:	f8b4 21f4 	ldrh.w	r2, [r4, #500]	; 0x1f4
   126c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   126c6:	429a      	cmp	r2, r3
   126c8:	d003      	beq.n	126d2 <bt_mesh_cfg_reset+0x46>
			bt_mesh_subnet_del(sub, true);
   126ca:	480a      	ldr	r0, [pc, #40]	; (126f4 <bt_mesh_cfg_reset+0x68>)
   126cc:	2101      	movs	r1, #1
   126ce:	f7ff ff71 	bl	125b4 <bt_mesh_subnet_del>
	bt_mesh_model_foreach(mod_reset, NULL);
   126d2:	4809      	ldr	r0, [pc, #36]	; (126f8 <bt_mesh_cfg_reset+0x6c>)
   126d4:	2100      	movs	r1, #0
   126d6:	f7fc ff77 	bl	f5c8 <bt_mesh_model_foreach>
}
   126da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(labels, 0, sizeof(labels));
   126de:	4807      	ldr	r0, [pc, #28]	; (126fc <bt_mesh_cfg_reset+0x70>)
   126e0:	2218      	movs	r2, #24
   126e2:	2100      	movs	r1, #0
   126e4:	f012 bcff 	b.w	250e6 <memset>
}
   126e8:	bd10      	pop	{r4, pc}
   126ea:	bf00      	nop
   126ec:	20000988 	.word	0x20000988
   126f0:	20006ab8 	.word	0x20006ab8
   126f4:	20006c90 	.word	0x20006c90
   126f8:	00026d35 	.word	0x00026d35
   126fc:	2000098c 	.word	0x2000098c

00012700 <bt_mesh_attention>:
const struct bt_mesh_model_cb bt_mesh_health_srv_cb = {
	.init = health_srv_init,
};

void bt_mesh_attention(struct bt_mesh_model *model, u8_t time)
{
   12700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12704:	460e      	mov	r6, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
   12706:	4604      	mov	r4, r0
   12708:	bb08      	cbnz	r0, 1274e <bt_mesh_attention+0x4e>
		srv = health_srv;
   1270a:	4b18      	ldr	r3, [pc, #96]	; (1276c <bt_mesh_attention+0x6c>)
   1270c:	681d      	ldr	r5, [r3, #0]
		if (!srv) {
   1270e:	b95d      	cbnz	r5, 12728 <bt_mesh_attention+0x28>
   12710:	4917      	ldr	r1, [pc, #92]	; (12770 <bt_mesh_attention+0x70>)
   12712:	4b18      	ldr	r3, [pc, #96]	; (12774 <bt_mesh_attention+0x74>)
			BT_WARN("No Health Server available");
   12714:	4818      	ldr	r0, [pc, #96]	; (12778 <bt_mesh_attention+0x78>)
   12716:	1ac9      	subs	r1, r1, r3
   12718:	08c9      	lsrs	r1, r1, #3
   1271a:	0189      	lsls	r1, r1, #6

		if (srv->cb && srv->cb->attn_off) {
			srv->cb->attn_off(model);
		}
	}
}
   1271c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("No Health Server available");
   12720:	f041 0102 	orr.w	r1, r1, #2
   12724:	f010 be42 	b.w	233ac <log_0>
		model = srv->model;
   12728:	682c      	ldr	r4, [r5, #0]
	if (time) {
   1272a:	f105 0708 	add.w	r7, r5, #8
   1272e:	b186      	cbz	r6, 12752 <bt_mesh_attention+0x52>
		if (srv->cb && srv->cb->attn_on) {
   12730:	686b      	ldr	r3, [r5, #4]
   12732:	b11b      	cbz	r3, 1273c <bt_mesh_attention+0x3c>
   12734:	691b      	ldr	r3, [r3, #16]
   12736:	b10b      	cbz	r3, 1273c <bt_mesh_attention+0x3c>
			srv->cb->attn_on(model);
   12738:	4620      	mov	r0, r4
   1273a:	4798      	blx	r3
   1273c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12740:	4372      	muls	r2, r6
   12742:	4639      	mov	r1, r7
   12744:	480d      	ldr	r0, [pc, #52]	; (1277c <bt_mesh_attention+0x7c>)
}
   12746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1274a:	f00f bbfd 	b.w	21f48 <k_delayed_work_submit_to_queue>
		srv = model->user_data;
   1274e:	69c5      	ldr	r5, [r0, #28]
   12750:	e7eb      	b.n	1272a <bt_mesh_attention+0x2a>
		k_delayed_work_cancel(&srv->attn_timer);
   12752:	4638      	mov	r0, r7
   12754:	f00f fc88 	bl	22068 <k_delayed_work_cancel>
		if (srv->cb && srv->cb->attn_off) {
   12758:	686b      	ldr	r3, [r5, #4]
   1275a:	b12b      	cbz	r3, 12768 <bt_mesh_attention+0x68>
   1275c:	695b      	ldr	r3, [r3, #20]
   1275e:	b11b      	cbz	r3, 12768 <bt_mesh_attention+0x68>
			srv->cb->attn_off(model);
   12760:	4620      	mov	r0, r4
}
   12762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			srv->cb->attn_off(model);
   12766:	4718      	bx	r3
}
   12768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1276c:	200009a4 	.word	0x200009a4
   12770:	00028978 	.word	0x00028978
   12774:	00028868 	.word	0x00028868
   12778:	0002d1f2 	.word	0x0002d1f2
   1277c:	20001c08 	.word	0x20001c08

00012780 <key_update_find>:
	schedule_store(BT_MESH_RPL_PENDING);
}

static struct key_update *key_update_find(bool app_key, u16_t key_idx,
					  struct key_update **free_slot)
{
   12780:	b5f0      	push	{r4, r5, r6, r7, lr}
   12782:	4c0f      	ldr	r4, [pc, #60]	; (127c0 <key_update_find+0x40>)
	struct key_update *match;
	int i;

	match = NULL;
	*free_slot = NULL;
   12784:	2300      	movs	r3, #0
{
   12786:	4606      	mov	r6, r0
	*free_slot = NULL;
   12788:	6013      	str	r3, [r2, #0]
	match = NULL;
   1278a:	4618      	mov	r0, r3
   1278c:	4627      	mov	r7, r4

	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
		struct key_update *update = &key_updates[i];

		if (!update->valid) {
   1278e:	eb07 0543 	add.w	r5, r7, r3, lsl #1
   12792:	786d      	ldrb	r5, [r5, #1]
   12794:	f015 0f10 	tst.w	r5, #16
   12798:	d106      	bne.n	127a8 <key_update_find+0x28>
			*free_slot = update;
   1279a:	6014      	str	r4, [r2, #0]
	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
   1279c:	3301      	adds	r3, #1
   1279e:	2b04      	cmp	r3, #4
   127a0:	f104 0402 	add.w	r4, r4, #2
   127a4:	d1f3      	bne.n	1278e <key_update_find+0xe>
			match = update;
		}
	}

	return match;
}
   127a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (update->app_key != app_key) {
   127a8:	f3c5 1540 	ubfx	r5, r5, #5, #1
   127ac:	42b5      	cmp	r5, r6
   127ae:	d1f5      	bne.n	1279c <key_update_find+0x1c>
		if (update->key_idx == key_idx) {
   127b0:	f837 5013 	ldrh.w	r5, [r7, r3, lsl #1]
   127b4:	f3c5 050b 	ubfx	r5, r5, #0, #12
			match = update;
   127b8:	428d      	cmp	r5, r1
   127ba:	bf08      	it	eq
   127bc:	4620      	moveq	r0, r4
   127be:	e7ed      	b.n	1279c <key_update_find+0x1c>
   127c0:	20001d68 	.word	0x20001d68

000127c4 <mesh_x_set>:
{
   127c4:	b538      	push	{r3, r4, r5, lr}
   127c6:	4604      	mov	r4, r0
   127c8:	4608      	mov	r0, r1
   127ca:	4611      	mov	r1, r2
	len = read_cb(cb_arg, out, read_len);
   127cc:	461a      	mov	r2, r3
{
   127ce:	461d      	mov	r5, r3
	len = read_cb(cb_arg, out, read_len);
   127d0:	47a0      	blx	r4
	if (len < 0) {
   127d2:	1e04      	subs	r4, r0, #0
   127d4:	da0c      	bge.n	127f0 <mesh_x_set+0x2c>
   127d6:	4a10      	ldr	r2, [pc, #64]	; (12818 <mesh_x_set+0x54>)
   127d8:	4b10      	ldr	r3, [pc, #64]	; (1281c <mesh_x_set+0x58>)
		BT_ERR("Failed to read value (err %zu)", len);
   127da:	4811      	ldr	r0, [pc, #68]	; (12820 <mesh_x_set+0x5c>)
   127dc:	1ad2      	subs	r2, r2, r3
   127de:	08d2      	lsrs	r2, r2, #3
   127e0:	0192      	lsls	r2, r2, #6
   127e2:	f042 0201 	orr.w	r2, r2, #1
   127e6:	4621      	mov	r1, r4
   127e8:	f010 fded 	bl	233c6 <log_1>
}
   127ec:	4620      	mov	r0, r4
   127ee:	bd38      	pop	{r3, r4, r5, pc}
	if (len != read_len) {
   127f0:	42a5      	cmp	r5, r4
   127f2:	d00e      	beq.n	12812 <mesh_x_set+0x4e>
   127f4:	4b09      	ldr	r3, [pc, #36]	; (1281c <mesh_x_set+0x58>)
   127f6:	4908      	ldr	r1, [pc, #32]	; (12818 <mesh_x_set+0x54>)
		BT_ERR("Unexpected value length (%zu != %zu)", len, read_len);
   127f8:	480a      	ldr	r0, [pc, #40]	; (12824 <mesh_x_set+0x60>)
   127fa:	1ac9      	subs	r1, r1, r3
   127fc:	08c9      	lsrs	r1, r1, #3
   127fe:	0189      	lsls	r1, r1, #6
   12800:	f041 0301 	orr.w	r3, r1, #1
   12804:	462a      	mov	r2, r5
   12806:	4621      	mov	r1, r4
   12808:	f010 fdf1 	bl	233ee <log_2>
		return -EINVAL;
   1280c:	f06f 0415 	mvn.w	r4, #21
   12810:	e7ec      	b.n	127ec <mesh_x_set+0x28>
	return 0;
   12812:	2400      	movs	r4, #0
   12814:	e7ea      	b.n	127ec <mesh_x_set+0x28>
   12816:	bf00      	nop
   12818:	000289b8 	.word	0x000289b8
   1281c:	00028868 	.word	0x00028868
   12820:	0002d220 	.word	0x0002d220
   12824:	0002d23f 	.word	0x0002d23f

00012828 <va_set>:
{
   12828:	b5f0      	push	{r4, r5, r6, r7, lr}
   1282a:	460c      	mov	r4, r1
   1282c:	b087      	sub	sp, #28
   1282e:	4616      	mov	r6, r2
   12830:	461f      	mov	r7, r3
	if (!name) {
   12832:	b970      	cbnz	r0, 12852 <va_set+0x2a>
   12834:	4b2d      	ldr	r3, [pc, #180]	; (128ec <va_set+0xc4>)
   12836:	492e      	ldr	r1, [pc, #184]	; (128f0 <va_set+0xc8>)
		BT_ERR("Insufficient number of arguments");
   12838:	482e      	ldr	r0, [pc, #184]	; (128f4 <va_set+0xcc>)
   1283a:	1ac9      	subs	r1, r1, r3
   1283c:	08c9      	lsrs	r1, r1, #3
   1283e:	0189      	lsls	r1, r1, #6
   12840:	f041 0101 	orr.w	r1, r1, #1
   12844:	f010 fdb2 	bl	233ac <log_0>
		return -ENOENT;
   12848:	f06f 0401 	mvn.w	r4, #1
}
   1284c:	4620      	mov	r0, r4
   1284e:	b007      	add	sp, #28
   12850:	bdf0      	pop	{r4, r5, r6, r7, pc}
	index = strtol(name, NULL, 16);
   12852:	2210      	movs	r2, #16
   12854:	2100      	movs	r1, #0
   12856:	f012 fb48 	bl	24eea <strtol>
   1285a:	4605      	mov	r5, r0
	if (len_rd == 0) {
   1285c:	b954      	cbnz	r4, 12874 <va_set+0x4c>
   1285e:	4923      	ldr	r1, [pc, #140]	; (128ec <va_set+0xc4>)
   12860:	4b23      	ldr	r3, [pc, #140]	; (128f0 <va_set+0xc8>)
		BT_WARN("Mesh Virtual Address length = 0");
   12862:	4825      	ldr	r0, [pc, #148]	; (128f8 <va_set+0xd0>)
   12864:	1a5b      	subs	r3, r3, r1
   12866:	08db      	lsrs	r3, r3, #3
   12868:	019b      	lsls	r3, r3, #6
   1286a:	f043 0102 	orr.w	r1, r3, #2
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
   1286e:	f010 fd9d 	bl	233ac <log_0>
		return 0;
   12872:	e7eb      	b.n	1284c <va_set+0x24>
	err = mesh_x_set(read_cb, cb_arg, &va, sizeof(va));
   12874:	2314      	movs	r3, #20
   12876:	aa01      	add	r2, sp, #4
   12878:	4639      	mov	r1, r7
   1287a:	4630      	mov	r0, r6
   1287c:	f7ff ffa2 	bl	127c4 <mesh_x_set>
	if (err) {
   12880:	4604      	mov	r4, r0
   12882:	b140      	cbz	r0, 12896 <va_set+0x6e>
   12884:	491a      	ldr	r1, [pc, #104]	; (128f0 <va_set+0xc8>)
   12886:	4b19      	ldr	r3, [pc, #100]	; (128ec <va_set+0xc4>)
		BT_ERR("Failed to set \'virtual address\'");
   12888:	481c      	ldr	r0, [pc, #112]	; (128fc <va_set+0xd4>)
   1288a:	1ac9      	subs	r1, r1, r3
   1288c:	08c9      	lsrs	r1, r1, #3
   1288e:	0189      	lsls	r1, r1, #6
   12890:	f041 0101 	orr.w	r1, r1, #1
   12894:	e7eb      	b.n	1286e <va_set+0x46>
	if (va.ref == 0) {
   12896:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1289a:	b943      	cbnz	r3, 128ae <va_set+0x86>
   1289c:	4914      	ldr	r1, [pc, #80]	; (128f0 <va_set+0xc8>)
   1289e:	4b13      	ldr	r3, [pc, #76]	; (128ec <va_set+0xc4>)
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
   128a0:	4817      	ldr	r0, [pc, #92]	; (12900 <va_set+0xd8>)
   128a2:	1ac9      	subs	r1, r1, r3
   128a4:	08c9      	lsrs	r1, r1, #3
   128a6:	0189      	lsls	r1, r1, #6
   128a8:	f041 0102 	orr.w	r1, r1, #2
   128ac:	e7df      	b.n	1286e <va_set+0x46>
	lab = get_label(index);
   128ae:	b2a8      	uxth	r0, r5
   128b0:	f7ff fad4 	bl	11e5c <get_label>
	if (lab == NULL) {
   128b4:	4605      	mov	r5, r0
   128b6:	b960      	cbnz	r0, 128d2 <va_set+0xaa>
   128b8:	4b0c      	ldr	r3, [pc, #48]	; (128ec <va_set+0xc4>)
   128ba:	490d      	ldr	r1, [pc, #52]	; (128f0 <va_set+0xc8>)
		BT_WARN("Out of labels buffers");
   128bc:	4811      	ldr	r0, [pc, #68]	; (12904 <va_set+0xdc>)
   128be:	1ac9      	subs	r1, r1, r3
   128c0:	08c9      	lsrs	r1, r1, #3
   128c2:	0189      	lsls	r1, r1, #6
   128c4:	f041 0102 	orr.w	r1, r1, #2
   128c8:	f010 fd70 	bl	233ac <log_0>
		return -ENOBUFS;
   128cc:	f06f 0436 	mvn.w	r4, #54	; 0x36
   128d0:	e7bc      	b.n	1284c <va_set+0x24>
	memcpy(lab->uuid, va.uuid, 16);
   128d2:	2210      	movs	r2, #16
   128d4:	a902      	add	r1, sp, #8
   128d6:	3004      	adds	r0, #4
   128d8:	f012 fbda 	bl	25090 <memcpy>
	lab->addr = va.addr;
   128dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   128e0:	806b      	strh	r3, [r5, #2]
	lab->ref = va.ref;
   128e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   128e6:	802b      	strh	r3, [r5, #0]
	return 0;
   128e8:	e7b0      	b.n	1284c <va_set+0x24>
   128ea:	bf00      	nop
   128ec:	00028868 	.word	0x00028868
   128f0:	000289b8 	.word	0x000289b8
   128f4:	0002a92d 	.word	0x0002a92d
   128f8:	0002d264 	.word	0x0002d264
   128fc:	0002d284 	.word	0x0002d284
   12900:	0002d2a4 	.word	0x0002d2a4
   12904:	0002d2c8 	.word	0x0002d2c8

00012908 <rpl_set>:
{
   12908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1290a:	460d      	mov	r5, r1
   1290c:	4616      	mov	r6, r2
   1290e:	461f      	mov	r7, r3
	if (!name) {
   12910:	b970      	cbnz	r0, 12930 <rpl_set+0x28>
   12912:	4b38      	ldr	r3, [pc, #224]	; (129f4 <rpl_set+0xec>)
   12914:	4938      	ldr	r1, [pc, #224]	; (129f8 <rpl_set+0xf0>)
		BT_ERR("Insufficient number of arguments");
   12916:	4839      	ldr	r0, [pc, #228]	; (129fc <rpl_set+0xf4>)
   12918:	1ac9      	subs	r1, r1, r3
   1291a:	08c9      	lsrs	r1, r1, #3
   1291c:	0189      	lsls	r1, r1, #6
   1291e:	f041 0101 	orr.w	r1, r1, #1
   12922:	f010 fd43 	bl	233ac <log_0>
		return -ENOENT;
   12926:	f06f 0501 	mvn.w	r5, #1
}
   1292a:	4628      	mov	r0, r5
   1292c:	b003      	add	sp, #12
   1292e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	src = strtol(name, NULL, 16);
   12930:	2210      	movs	r2, #16
   12932:	2100      	movs	r1, #0
   12934:	f012 fad9 	bl	24eea <strtol>
		if (bt_mesh.rpl[i].src == src) {
   12938:	4a31      	ldr	r2, [pc, #196]	; (12a00 <rpl_set+0xf8>)
	src = strtol(name, NULL, 16);
   1293a:	b283      	uxth	r3, r0
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   1293c:	2100      	movs	r1, #0
   1293e:	4614      	mov	r4, r2
		if (bt_mesh.rpl[i].src == src) {
   12940:	f832 c031 	ldrh.w	ip, [r2, r1, lsl #3]
   12944:	459c      	cmp	ip, r3
   12946:	d118      	bne.n	1297a <rpl_set+0x72>
			return &bt_mesh.rpl[i];
   12948:	4c2d      	ldr	r4, [pc, #180]	; (12a00 <rpl_set+0xf8>)
   1294a:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
	if (len_rd == 0) {
   1294e:	b31d      	cbz	r5, 12998 <rpl_set+0x90>
	err = mesh_x_set(read_cb, cb_arg, &rpl, sizeof(rpl));
   12950:	2304      	movs	r3, #4
   12952:	eb0d 0203 	add.w	r2, sp, r3
   12956:	4639      	mov	r1, r7
   12958:	4630      	mov	r0, r6
   1295a:	f7ff ff33 	bl	127c4 <mesh_x_set>
	if (err) {
   1295e:	4605      	mov	r5, r0
   12960:	2800      	cmp	r0, #0
   12962:	d03c      	beq.n	129de <rpl_set+0xd6>
   12964:	4b23      	ldr	r3, [pc, #140]	; (129f4 <rpl_set+0xec>)
   12966:	4924      	ldr	r1, [pc, #144]	; (129f8 <rpl_set+0xf0>)
		BT_ERR("Failed to set `net`");
   12968:	4826      	ldr	r0, [pc, #152]	; (12a04 <rpl_set+0xfc>)
   1296a:	1ac9      	subs	r1, r1, r3
   1296c:	08c9      	lsrs	r1, r1, #3
   1296e:	0189      	lsls	r1, r1, #6
   12970:	f041 0101 	orr.w	r1, r1, #1
   12974:	f010 fd1a 	bl	233ac <log_0>
		return err;
   12978:	e7d7      	b.n	1292a <rpl_set+0x22>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   1297a:	3101      	adds	r1, #1
   1297c:	290a      	cmp	r1, #10
   1297e:	d1df      	bne.n	12940 <rpl_set+0x38>
	if (len_rd == 0) {
   12980:	b185      	cbz	r5, 129a4 <rpl_set+0x9c>
   12982:	2500      	movs	r5, #0
		if (!bt_mesh.rpl[i].src) {
   12984:	f834 2035 	ldrh.w	r2, [r4, r5, lsl #3]
   12988:	b9c2      	cbnz	r2, 129bc <rpl_set+0xb4>
			bt_mesh.rpl[i].src = src;
   1298a:	4c1f      	ldr	r4, [pc, #124]	; (12a08 <rpl_set+0x100>)
   1298c:	3557      	adds	r5, #87	; 0x57
   1298e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
			return &bt_mesh.rpl[i];
   12992:	1d14      	adds	r4, r2, #4
			bt_mesh.rpl[i].src = src;
   12994:	8093      	strh	r3, [r2, #4]
		if (!entry) {
   12996:	e7db      	b.n	12950 <rpl_set+0x48>
			(void)memset(entry, 0, sizeof(*entry));
   12998:	2208      	movs	r2, #8
   1299a:	4629      	mov	r1, r5
   1299c:	4620      	mov	r0, r4
   1299e:	f012 fba2 	bl	250e6 <memset>
   129a2:	e7c2      	b.n	1292a <rpl_set+0x22>
   129a4:	4b13      	ldr	r3, [pc, #76]	; (129f4 <rpl_set+0xec>)
   129a6:	4a14      	ldr	r2, [pc, #80]	; (129f8 <rpl_set+0xf0>)
   129a8:	1ad2      	subs	r2, r2, r3
   129aa:	08d2      	lsrs	r2, r2, #3
			BT_WARN("Unable to find RPL entry for 0x%04x", src);
   129ac:	0192      	lsls	r2, r2, #6
   129ae:	b281      	uxth	r1, r0
   129b0:	f042 0202 	orr.w	r2, r2, #2
   129b4:	4815      	ldr	r0, [pc, #84]	; (12a0c <rpl_set+0x104>)
   129b6:	f010 fd06 	bl	233c6 <log_1>
   129ba:	e7b6      	b.n	1292a <rpl_set+0x22>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   129bc:	3501      	adds	r5, #1
   129be:	2d0a      	cmp	r5, #10
   129c0:	d1e0      	bne.n	12984 <rpl_set+0x7c>
   129c2:	4b0c      	ldr	r3, [pc, #48]	; (129f4 <rpl_set+0xec>)
   129c4:	4a0c      	ldr	r2, [pc, #48]	; (129f8 <rpl_set+0xf0>)
   129c6:	1ad2      	subs	r2, r2, r3
   129c8:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to allocate RPL entry for 0x%04x", src);
   129ca:	0192      	lsls	r2, r2, #6
   129cc:	b281      	uxth	r1, r0
   129ce:	f042 0201 	orr.w	r2, r2, #1
   129d2:	480f      	ldr	r0, [pc, #60]	; (12a10 <rpl_set+0x108>)
   129d4:	f010 fcf7 	bl	233c6 <log_1>
			return -ENOMEM;
   129d8:	f06f 050b 	mvn.w	r5, #11
   129dc:	e7a5      	b.n	1292a <rpl_set+0x22>
	entry->seq = rpl.seq;
   129de:	9b01      	ldr	r3, [sp, #4]
   129e0:	f3c3 0317 	ubfx	r3, r3, #0, #24
   129e4:	6063      	str	r3, [r4, #4]
	entry->old_iv = rpl.old_iv;
   129e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
   129ee:	70a3      	strb	r3, [r4, #2]
	return 0;
   129f0:	e79b      	b.n	1292a <rpl_set+0x22>
   129f2:	bf00      	nop
   129f4:	00028868 	.word	0x00028868
   129f8:	000289b8 	.word	0x000289b8
   129fc:	0002a92d 	.word	0x0002a92d
   12a00:	20006d74 	.word	0x20006d74
   12a04:	0002d302 	.word	0x0002d302
   12a08:	20006ab8 	.word	0x20006ab8
   12a0c:	0002d2de 	.word	0x0002d2de
   12a10:	0002d316 	.word	0x0002d316

00012a14 <hb_pub_set>:
{
   12a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12a16:	460c      	mov	r4, r1
   12a18:	4616      	mov	r6, r2
   12a1a:	461f      	mov	r7, r3
	struct bt_mesh_hb_pub *pub = bt_mesh_hb_pub_get();
   12a1c:	f7ff fdbc 	bl	12598 <bt_mesh_hb_pub_get>
	if (!pub) {
   12a20:	4605      	mov	r5, r0
   12a22:	b378      	cbz	r0, 12a84 <hb_pub_set+0x70>
	if (len_rd == 0) {
   12a24:	b924      	cbnz	r4, 12a30 <hb_pub_set+0x1c>
		pub->period = 0U;
   12a26:	e9c0 4408 	strd	r4, r4, [r0, #32]
}
   12a2a:	4620      	mov	r0, r4
   12a2c:	b003      	add	sp, #12
   12a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = mesh_x_set(read_cb, cb_arg, &hb_val, sizeof(hb_val));
   12a30:	2308      	movs	r3, #8
   12a32:	466a      	mov	r2, sp
   12a34:	4639      	mov	r1, r7
   12a36:	4630      	mov	r0, r6
   12a38:	f7ff fec4 	bl	127c4 <mesh_x_set>
	if (err) {
   12a3c:	4604      	mov	r4, r0
   12a3e:	b150      	cbz	r0, 12a56 <hb_pub_set+0x42>
   12a40:	4b12      	ldr	r3, [pc, #72]	; (12a8c <hb_pub_set+0x78>)
   12a42:	4913      	ldr	r1, [pc, #76]	; (12a90 <hb_pub_set+0x7c>)
		BT_ERR("Failed to set \'hb_val\'");
   12a44:	4813      	ldr	r0, [pc, #76]	; (12a94 <hb_pub_set+0x80>)
   12a46:	1ac9      	subs	r1, r1, r3
   12a48:	08c9      	lsrs	r1, r1, #3
   12a4a:	0189      	lsls	r1, r1, #6
   12a4c:	f041 0101 	orr.w	r1, r1, #1
   12a50:	f010 fcac 	bl	233ac <log_0>
		return err;
   12a54:	e7e9      	b.n	12a2a <hb_pub_set+0x16>
	pub->dst = hb_val.dst;
   12a56:	f8bd 3000 	ldrh.w	r3, [sp]
   12a5a:	842b      	strh	r3, [r5, #32]
	pub->feat = hb_val.feat;
   12a5c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   12a60:	84eb      	strh	r3, [r5, #38]	; 0x26
	pub->net_idx = hb_val.net_idx;
   12a62:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	pub->period = hb_val.period;
   12a66:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   12a6a:	84aa      	strh	r2, [r5, #36]	; 0x24
	pub->net_idx = hb_val.net_idx;
   12a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
   12a70:	852b      	strh	r3, [r5, #40]	; 0x28
	if (hb_val.indefinite) {
   12a72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a76:	06db      	lsls	r3, r3, #27
		pub->count = 0xffff;
   12a78:	bf46      	itte	mi
   12a7a:	f64f 73ff 	movwmi	r3, #65535	; 0xffff
   12a7e:	846b      	strhmi	r3, [r5, #34]	; 0x22
		pub->count = 0U;
   12a80:	8468      	strhpl	r0, [r5, #34]	; 0x22
   12a82:	e7d2      	b.n	12a2a <hb_pub_set+0x16>
		return -ENOENT;
   12a84:	f06f 0401 	mvn.w	r4, #1
   12a88:	e7cf      	b.n	12a2a <hb_pub_set+0x16>
   12a8a:	bf00      	nop
   12a8c:	00028868 	.word	0x00028868
   12a90:	000289b8 	.word	0x000289b8
   12a94:	0002d33e 	.word	0x0002d33e

00012a98 <net_key_set>:
{
   12a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12a9c:	460c      	mov	r4, r1
   12a9e:	b08b      	sub	sp, #44	; 0x2c
   12aa0:	4690      	mov	r8, r2
   12aa2:	4699      	mov	r9, r3
	if (!name) {
   12aa4:	b978      	cbnz	r0, 12ac6 <net_key_set+0x2e>
   12aa6:	4948      	ldr	r1, [pc, #288]	; (12bc8 <net_key_set+0x130>)
   12aa8:	4b48      	ldr	r3, [pc, #288]	; (12bcc <net_key_set+0x134>)
		BT_ERR("Insufficient number of arguments");
   12aaa:	4849      	ldr	r0, [pc, #292]	; (12bd0 <net_key_set+0x138>)
   12aac:	1ac9      	subs	r1, r1, r3
   12aae:	08c9      	lsrs	r1, r1, #3
   12ab0:	0189      	lsls	r1, r1, #6
   12ab2:	f041 0101 	orr.w	r1, r1, #1
   12ab6:	f010 fc79 	bl	233ac <log_0>
			return -ENOENT;
   12aba:	f06f 0401 	mvn.w	r4, #1
}
   12abe:	4620      	mov	r0, r4
   12ac0:	b00b      	add	sp, #44	; 0x2c
   12ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_idx = strtol(name, NULL, 16);
   12ac6:	2210      	movs	r2, #16
   12ac8:	2100      	movs	r1, #0
   12aca:	f012 fa0e 	bl	24eea <strtol>
   12ace:	b287      	uxth	r7, r0
	sub = bt_mesh_subnet_get(net_idx);
   12ad0:	4638      	mov	r0, r7
   12ad2:	f7f9 fe47 	bl	c764 <bt_mesh_subnet_get>
   12ad6:	4605      	mov	r5, r0
	if (len_rd == 0) {
   12ad8:	b984      	cbnz	r4, 12afc <net_key_set+0x64>
		if (!sub) {
   12ada:	b958      	cbnz	r0, 12af4 <net_key_set+0x5c>
   12adc:	4b3b      	ldr	r3, [pc, #236]	; (12bcc <net_key_set+0x134>)
   12ade:	4a3a      	ldr	r2, [pc, #232]	; (12bc8 <net_key_set+0x130>)
			BT_ERR("No subnet with NetKeyIndex 0x%03x", net_idx);
   12ae0:	483c      	ldr	r0, [pc, #240]	; (12bd4 <net_key_set+0x13c>)
   12ae2:	1ad2      	subs	r2, r2, r3
   12ae4:	08d2      	lsrs	r2, r2, #3
   12ae6:	0192      	lsls	r2, r2, #6
   12ae8:	f042 0201 	orr.w	r2, r2, #1
   12aec:	4639      	mov	r1, r7
   12aee:	f010 fc6a 	bl	233c6 <log_1>
   12af2:	e7e2      	b.n	12aba <net_key_set+0x22>
		bt_mesh_subnet_del(sub, false);
   12af4:	4621      	mov	r1, r4
   12af6:	f7ff fd5d 	bl	125b4 <bt_mesh_subnet_del>
		return 0;
   12afa:	e7e0      	b.n	12abe <net_key_set+0x26>
	err = mesh_x_set(read_cb, cb_arg, &key, sizeof(key));
   12afc:	2321      	movs	r3, #33	; 0x21
   12afe:	aa01      	add	r2, sp, #4
   12b00:	4649      	mov	r1, r9
   12b02:	4640      	mov	r0, r8
   12b04:	f7ff fe5e 	bl	127c4 <mesh_x_set>
	if (err) {
   12b08:	4604      	mov	r4, r0
   12b0a:	b150      	cbz	r0, 12b22 <net_key_set+0x8a>
   12b0c:	4b2f      	ldr	r3, [pc, #188]	; (12bcc <net_key_set+0x134>)
   12b0e:	492e      	ldr	r1, [pc, #184]	; (12bc8 <net_key_set+0x130>)
		BT_ERR("Failed to set \'net-key\'");
   12b10:	4831      	ldr	r0, [pc, #196]	; (12bd8 <net_key_set+0x140>)
   12b12:	1ac9      	subs	r1, r1, r3
   12b14:	08c9      	lsrs	r1, r1, #3
   12b16:	0189      	lsls	r1, r1, #6
   12b18:	f041 0101 	orr.w	r1, r1, #1
   12b1c:	f010 fc46 	bl	233ac <log_0>
		return err;
   12b20:	e7cd      	b.n	12abe <net_key_set+0x26>
	if (sub) {
   12b22:	bb55      	cbnz	r5, 12b7a <net_key_set+0xe2>
		if (bt_mesh.sub[i].net_idx == BT_MESH_KEY_UNUSED) {
   12b24:	4b2d      	ldr	r3, [pc, #180]	; (12bdc <net_key_set+0x144>)
   12b26:	f8b3 1110 	ldrh.w	r1, [r3, #272]	; 0x110
   12b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12b2e:	4291      	cmp	r1, r2
   12b30:	461e      	mov	r6, r3
   12b32:	d004      	beq.n	12b3e <net_key_set+0xa6>
   12b34:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	; 0x1f4
   12b38:	4293      	cmp	r3, r2
   12b3a:	d137      	bne.n	12bac <net_key_set+0x114>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   12b3c:	2001      	movs	r0, #1
			sub = &bt_mesh.sub[i];
   12b3e:	25e4      	movs	r5, #228	; 0xe4
	sub->kr_flag = key.kr_flag;
   12b40:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12b44:	4345      	muls	r5, r0
	sub->net_idx = net_idx;
   12b46:	1972      	adds	r2, r6, r5
	sub->kr_flag = key.kr_flag;
   12b48:	f3c3 0100 	ubfx	r1, r3, #0, #1
	memcpy(sub->keys[0].net, &key.val[0], 16);
   12b4c:	f505 7092 	add.w	r0, r5, #292	; 0x124
	sub->kr_phase = key.kr_phase;
   12b50:	f3c3 0346 	ubfx	r3, r3, #1, #7
	sub->kr_flag = key.kr_flag;
   12b54:	f882 1112 	strb.w	r1, [r2, #274]	; 0x112
	sub->net_idx = net_idx;
   12b58:	f8a2 7110 	strh.w	r7, [r2, #272]	; 0x110
	sub->kr_phase = key.kr_phase;
   12b5c:	f882 3113 	strb.w	r3, [r2, #275]	; 0x113
	memcpy(sub->keys[0].net, &key.val[0], 16);
   12b60:	f10d 0105 	add.w	r1, sp, #5
   12b64:	2210      	movs	r2, #16
   12b66:	4430      	add	r0, r6
   12b68:	f012 fa92 	bl	25090 <memcpy>
	memcpy(sub->keys[1].net, &key.val[1], 16);
   12b6c:	f205 107d 	addw	r0, r5, #381	; 0x17d
   12b70:	2210      	movs	r2, #16
   12b72:	f10d 0115 	add.w	r1, sp, #21
   12b76:	4430      	add	r0, r6
   12b78:	e015      	b.n	12ba6 <net_key_set+0x10e>
		sub->kr_flag = key.kr_flag;
   12b7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12b7e:	f3c3 0300 	ubfx	r3, r3, #0, #1
   12b82:	77ab      	strb	r3, [r5, #30]
		sub->kr_phase = key.kr_phase;
   12b84:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12b88:	f3c3 0346 	ubfx	r3, r3, #1, #7
		memcpy(sub->keys[0].net, &key.val[0], 16);
   12b8c:	2210      	movs	r2, #16
   12b8e:	f10d 0105 	add.w	r1, sp, #5
		sub->kr_phase = key.kr_phase;
   12b92:	77eb      	strb	r3, [r5, #31]
		memcpy(sub->keys[0].net, &key.val[0], 16);
   12b94:	f105 0030 	add.w	r0, r5, #48	; 0x30
   12b98:	f012 fa7a 	bl	25090 <memcpy>
		memcpy(sub->keys[1].net, &key.val[1], 16);
   12b9c:	2210      	movs	r2, #16
   12b9e:	f10d 0115 	add.w	r1, sp, #21
   12ba2:	f105 0089 	add.w	r0, r5, #137	; 0x89
	memcpy(sub->keys[1].net, &key.val[1], 16);
   12ba6:	f012 fa73 	bl	25090 <memcpy>
	return 0;
   12baa:	e788      	b.n	12abe <net_key_set+0x26>
   12bac:	4b07      	ldr	r3, [pc, #28]	; (12bcc <net_key_set+0x134>)
   12bae:	4906      	ldr	r1, [pc, #24]	; (12bc8 <net_key_set+0x130>)
		BT_ERR("No space to allocate a new subnet");
   12bb0:	480b      	ldr	r0, [pc, #44]	; (12be0 <net_key_set+0x148>)
   12bb2:	1ac9      	subs	r1, r1, r3
   12bb4:	08c9      	lsrs	r1, r1, #3
   12bb6:	0189      	lsls	r1, r1, #6
   12bb8:	f041 0101 	orr.w	r1, r1, #1
   12bbc:	f010 fbf6 	bl	233ac <log_0>
		return -ENOMEM;
   12bc0:	f06f 040b 	mvn.w	r4, #11
   12bc4:	e77b      	b.n	12abe <net_key_set+0x26>
   12bc6:	bf00      	nop
   12bc8:	000289b8 	.word	0x000289b8
   12bcc:	00028868 	.word	0x00028868
   12bd0:	0002a92d 	.word	0x0002a92d
   12bd4:	0002d355 	.word	0x0002d355
   12bd8:	0002d377 	.word	0x0002d377
   12bdc:	20006ab8 	.word	0x20006ab8
   12be0:	0002d38f 	.word	0x0002d38f

00012be4 <commit_mod>:
	if (mod->pub && mod->pub->update &&
   12be4:	6883      	ldr	r3, [r0, #8]
{
   12be6:	b510      	push	{r4, lr}
   12be8:	4604      	mov	r4, r0
	if (mod->pub && mod->pub->update &&
   12bea:	b163      	cbz	r3, 12c06 <commit_mod+0x22>
   12bec:	695a      	ldr	r2, [r3, #20]
   12bee:	b152      	cbz	r2, 12c06 <commit_mod+0x22>
   12bf0:	889b      	ldrh	r3, [r3, #4]
   12bf2:	b143      	cbz	r3, 12c06 <commit_mod+0x22>
		s32_t ms = bt_mesh_model_pub_period_get(mod);
   12bf4:	f7fc fd22 	bl	f63c <bt_mesh_model_pub_period_get>
		if (ms) {
   12bf8:	4602      	mov	r2, r0
   12bfa:	b120      	cbz	r0, 12c06 <commit_mod+0x22>
			k_delayed_work_submit(&mod->pub->timer, ms);
   12bfc:	68a1      	ldr	r1, [r4, #8]
   12bfe:	4807      	ldr	r0, [pc, #28]	; (12c1c <commit_mod+0x38>)
   12c00:	3118      	adds	r1, #24
   12c02:	f00f f9a1 	bl	21f48 <k_delayed_work_submit_to_queue>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   12c06:	8a20      	ldrh	r0, [r4, #16]
   12c08:	b108      	cbz	r0, 12c0e <commit_mod+0x2a>
			bt_mesh_lpn_group_add(mod->groups[i]);
   12c0a:	f001 fd7f 	bl	1470c <bt_mesh_lpn_group_add>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   12c0e:	8a60      	ldrh	r0, [r4, #18]
   12c10:	b118      	cbz	r0, 12c1a <commit_mod+0x36>
}
   12c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			bt_mesh_lpn_group_add(mod->groups[i]);
   12c16:	f001 bd79 	b.w	1470c <bt_mesh_lpn_group_add>
}
   12c1a:	bd10      	pop	{r4, pc}
   12c1c:	20001c08 	.word	0x20001c08

00012c20 <mesh_set>:
{
   12c20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12c24:	4688      	mov	r8, r1
   12c26:	4691      	mov	r9, r2
   12c28:	469a      	mov	sl, r3
	if (!name) {
   12c2a:	4605      	mov	r5, r0
   12c2c:	b970      	cbnz	r0, 12c4c <mesh_set+0x2c>
   12c2e:	4b1d      	ldr	r3, [pc, #116]	; (12ca4 <mesh_set+0x84>)
   12c30:	491d      	ldr	r1, [pc, #116]	; (12ca8 <mesh_set+0x88>)
		BT_ERR("Insufficient number of arguments");
   12c32:	481e      	ldr	r0, [pc, #120]	; (12cac <mesh_set+0x8c>)
   12c34:	1ac9      	subs	r1, r1, r3
   12c36:	08c9      	lsrs	r1, r1, #3
   12c38:	0189      	lsls	r1, r1, #6
   12c3a:	f041 0101 	orr.w	r1, r1, #1
   12c3e:	f010 fbb5 	bl	233ac <log_0>
		return -EINVAL;
   12c42:	f06f 0015 	mvn.w	r0, #21
}
   12c46:	b002      	add	sp, #8
   12c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	len = settings_name_next(name, &next);
   12c4c:	a901      	add	r1, sp, #4
   12c4e:	f010 ff8a 	bl	23b66 <settings_name_next>
		if (!strncmp(settings[i].name, name, len)) {
   12c52:	4e17      	ldr	r6, [pc, #92]	; (12cb0 <mesh_set+0x90>)
	len = settings_name_next(name, &next);
   12c54:	4607      	mov	r7, r0
	for (i = 0; i < ARRAY_SIZE(settings); i++) {
   12c56:	2400      	movs	r4, #0
		if (!strncmp(settings[i].name, name, len)) {
   12c58:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
   12c5c:	463a      	mov	r2, r7
   12c5e:	4629      	mov	r1, r5
   12c60:	f012 f9f7 	bl	25052 <strncmp>
   12c64:	b940      	cbnz	r0, 12c78 <mesh_set+0x58>
			return settings[i].func(next, len_rd, read_cb, cb_arg);
   12c66:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
   12c6a:	9801      	ldr	r0, [sp, #4]
   12c6c:	6864      	ldr	r4, [r4, #4]
   12c6e:	4653      	mov	r3, sl
   12c70:	464a      	mov	r2, r9
   12c72:	4641      	mov	r1, r8
   12c74:	47a0      	blx	r4
   12c76:	e7e6      	b.n	12c46 <mesh_set+0x26>
	for (i = 0; i < ARRAY_SIZE(settings); i++) {
   12c78:	3401      	adds	r4, #1
   12c7a:	2c0b      	cmp	r4, #11
   12c7c:	d1ec      	bne.n	12c58 <mesh_set+0x38>
   12c7e:	4a09      	ldr	r2, [pc, #36]	; (12ca4 <mesh_set+0x84>)
   12c80:	4c09      	ldr	r4, [pc, #36]	; (12ca8 <mesh_set+0x88>)
	BT_WARN("No matching handler for key %s", log_strdup(name));
   12c82:	4628      	mov	r0, r5
   12c84:	1aa4      	subs	r4, r4, r2
   12c86:	08e4      	lsrs	r4, r4, #3
   12c88:	f7ef fb5a 	bl	2340 <log_strdup>
   12c8c:	01a4      	lsls	r4, r4, #6
   12c8e:	f044 0402 	orr.w	r4, r4, #2
   12c92:	4601      	mov	r1, r0
   12c94:	4622      	mov	r2, r4
   12c96:	4807      	ldr	r0, [pc, #28]	; (12cb4 <mesh_set+0x94>)
   12c98:	f010 fb95 	bl	233c6 <log_1>
	return -ENOENT;
   12c9c:	f06f 0001 	mvn.w	r0, #1
   12ca0:	e7d1      	b.n	12c46 <mesh_set+0x26>
   12ca2:	bf00      	nop
   12ca4:	00028868 	.word	0x00028868
   12ca8:	000289b8 	.word	0x000289b8
   12cac:	0002a92d 	.word	0x0002a92d
   12cb0:	0002932c 	.word	0x0002932c
   12cb4:	0002d3b1 	.word	0x0002d3b1

00012cb8 <store_app_key>:
{
   12cb8:	b510      	push	{r4, lr}
   12cba:	b08e      	sub	sp, #56	; 0x38
	key.net_idx = app->net_idx;
   12cbc:	8803      	ldrh	r3, [r0, #0]
   12cbe:	f8ad 3014 	strh.w	r3, [sp, #20]
{
   12cc2:	4604      	mov	r4, r0
	key.updated = app->updated;
   12cc4:	7903      	ldrb	r3, [r0, #4]
   12cc6:	f88d 3016 	strb.w	r3, [sp, #22]
	memcpy(key.val[0], app->keys[0].val, 16);
   12cca:	1d81      	adds	r1, r0, #6
   12ccc:	2210      	movs	r2, #16
   12cce:	f10d 0017 	add.w	r0, sp, #23
   12cd2:	f012 f9dd 	bl	25090 <memcpy>
	memcpy(key.val[1], app->keys[1].val, 16);
   12cd6:	2210      	movs	r2, #16
   12cd8:	f104 0117 	add.w	r1, r4, #23
   12cdc:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   12ce0:	f012 f9d6 	bl	25090 <memcpy>
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app->app_idx);
   12ce4:	4a0e      	ldr	r2, [pc, #56]	; (12d20 <store_app_key+0x68>)
   12ce6:	8863      	ldrh	r3, [r4, #2]
   12ce8:	2114      	movs	r1, #20
   12cea:	4668      	mov	r0, sp
   12cec:	f010 fafa 	bl	232e4 <snprintk>
	err = settings_save_one(path, &key, sizeof(key));
   12cf0:	2223      	movs	r2, #35	; 0x23
   12cf2:	a905      	add	r1, sp, #20
   12cf4:	4668      	mov	r0, sp
   12cf6:	f7f0 fcc1 	bl	367c <settings_save_one>
	if (err) {
   12cfa:	b170      	cbz	r0, 12d1a <store_app_key+0x62>
   12cfc:	4a09      	ldr	r2, [pc, #36]	; (12d24 <store_app_key+0x6c>)
   12cfe:	4c0a      	ldr	r4, [pc, #40]	; (12d28 <store_app_key+0x70>)
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
   12d00:	4668      	mov	r0, sp
   12d02:	1aa4      	subs	r4, r4, r2
   12d04:	08e4      	lsrs	r4, r4, #3
   12d06:	f7ef fb1b 	bl	2340 <log_strdup>
   12d0a:	01a4      	lsls	r4, r4, #6
   12d0c:	f044 0401 	orr.w	r4, r4, #1
   12d10:	4601      	mov	r1, r0
   12d12:	4622      	mov	r2, r4
   12d14:	4805      	ldr	r0, [pc, #20]	; (12d2c <store_app_key+0x74>)
   12d16:	f010 fb56 	bl	233c6 <log_1>
}
   12d1a:	b00e      	add	sp, #56	; 0x38
   12d1c:	bd10      	pop	{r4, pc}
   12d1e:	bf00      	nop
   12d20:	0002d3d0 	.word	0x0002d3d0
   12d24:	00028868 	.word	0x00028868
   12d28:	000289b8 	.word	0x000289b8
   12d2c:	0002d3e2 	.word	0x0002d3e2

00012d30 <mod_set>:
{
   12d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   12d34:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   12d38:	4605      	mov	r5, r0
   12d3a:	4616      	mov	r6, r2
   12d3c:	461f      	mov	r7, r3
	if (!name) {
   12d3e:	468a      	mov	sl, r1
   12d40:	b951      	cbnz	r1, 12d58 <mod_set+0x28>
   12d42:	4b6c      	ldr	r3, [pc, #432]	; (12ef4 <mod_set+0x1c4>)
   12d44:	496c      	ldr	r1, [pc, #432]	; (12ef8 <mod_set+0x1c8>)
		BT_ERR("Insufficient number of arguments");
   12d46:	486d      	ldr	r0, [pc, #436]	; (12efc <mod_set+0x1cc>)
   12d48:	1ac9      	subs	r1, r1, r3
   12d4a:	08c9      	lsrs	r1, r1, #3
   12d4c:	0189      	lsls	r1, r1, #6
   12d4e:	f041 0101 	orr.w	r1, r1, #1
   12d52:	f010 fb2b 	bl	233ac <log_0>
		return -ENOENT;
   12d56:	e01b      	b.n	12d90 <mod_set+0x60>
	mod_key = strtol(name, NULL, 16);
   12d58:	2210      	movs	r2, #16
   12d5a:	2100      	movs	r1, #0
   12d5c:	4650      	mov	r0, sl
   12d5e:	f012 f8c4 	bl	24eea <strtol>
	elem_idx = mod_key >> 8;
   12d62:	f3c0 2407 	ubfx	r4, r0, #8, #8
	mod = bt_mesh_model_get(vnd, elem_idx, mod_idx);
   12d66:	fa5f f880 	uxtb.w	r8, r0
   12d6a:	4642      	mov	r2, r8
   12d6c:	4628      	mov	r0, r5
   12d6e:	4621      	mov	r1, r4
   12d70:	f7fc fcc8 	bl	f704 <bt_mesh_model_get>
	if (!mod) {
   12d74:	4605      	mov	r5, r0
   12d76:	b970      	cbnz	r0, 12d96 <mod_set+0x66>
   12d78:	4a5e      	ldr	r2, [pc, #376]	; (12ef4 <mod_set+0x1c4>)
   12d7a:	4b5f      	ldr	r3, [pc, #380]	; (12ef8 <mod_set+0x1c8>)
		BT_ERR("Failed to get model for elem_idx %u mod_idx %u",
   12d7c:	4860      	ldr	r0, [pc, #384]	; (12f00 <mod_set+0x1d0>)
   12d7e:	1a9b      	subs	r3, r3, r2
   12d80:	08db      	lsrs	r3, r3, #3
   12d82:	019b      	lsls	r3, r3, #6
   12d84:	f043 0301 	orr.w	r3, r3, #1
   12d88:	4642      	mov	r2, r8
   12d8a:	4621      	mov	r1, r4
   12d8c:	f010 fb2f 	bl	233ee <log_2>
	return -ENOENT;
   12d90:	f06f 0401 	mvn.w	r4, #1
   12d94:	e011      	b.n	12dba <mod_set+0x8a>
	len = settings_name_next(name, &next);
   12d96:	a901      	add	r1, sp, #4
   12d98:	4650      	mov	r0, sl
   12d9a:	f010 fee4 	bl	23b66 <settings_name_next>
   12d9e:	4680      	mov	r8, r0
	if (!next) {
   12da0:	9801      	ldr	r0, [sp, #4]
   12da2:	2800      	cmp	r0, #0
   12da4:	d0cd      	beq.n	12d42 <mod_set+0x12>
	if (!strncmp(next, "bind", len)) {
   12da6:	4957      	ldr	r1, [pc, #348]	; (12f04 <mod_set+0x1d4>)
   12da8:	4642      	mov	r2, r8
   12daa:	f012 f952 	bl	25052 <strncmp>
   12dae:	b9d8      	cbnz	r0, 12de8 <mod_set+0xb8>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   12db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12db4:	60eb      	str	r3, [r5, #12]
	if (len_rd == 0) {
   12db6:	b926      	cbnz	r6, 12dc2 <mod_set+0x92>
		return 0;
   12db8:	2400      	movs	r4, #0
}
   12dba:	4620      	mov	r0, r4
   12dbc:	b004      	add	sp, #16
   12dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	len = read_cb(cb_arg, mod->keys, sizeof(mod->keys));
   12dc2:	2204      	movs	r2, #4
   12dc4:	f105 010c 	add.w	r1, r5, #12
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
   12dc8:	4648      	mov	r0, r9
   12dca:	47b8      	blx	r7
	if (len < 0) {
   12dcc:	1e04      	subs	r4, r0, #0
   12dce:	daf3      	bge.n	12db8 <mod_set+0x88>
   12dd0:	4b48      	ldr	r3, [pc, #288]	; (12ef4 <mod_set+0x1c4>)
   12dd2:	4a49      	ldr	r2, [pc, #292]	; (12ef8 <mod_set+0x1c8>)
		BT_ERR("Failed to read value (err %zu)", len);
   12dd4:	484c      	ldr	r0, [pc, #304]	; (12f08 <mod_set+0x1d8>)
   12dd6:	1ad2      	subs	r2, r2, r3
   12dd8:	08d2      	lsrs	r2, r2, #3
   12dda:	0192      	lsls	r2, r2, #6
   12ddc:	f042 0201 	orr.w	r2, r2, #1
   12de0:	4621      	mov	r1, r4
   12de2:	f010 faf0 	bl	233c6 <log_1>
		return len;
   12de6:	e7e8      	b.n	12dba <mod_set+0x8a>
	if (!strncmp(next, "sub", len)) {
   12de8:	4948      	ldr	r1, [pc, #288]	; (12f0c <mod_set+0x1dc>)
   12dea:	9801      	ldr	r0, [sp, #4]
   12dec:	4642      	mov	r2, r8
   12dee:	f012 f930 	bl	25052 <strncmp>
   12df2:	4601      	mov	r1, r0
   12df4:	b948      	cbnz	r0, 12e0a <mod_set+0xda>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
   12df6:	3510      	adds	r5, #16
   12df8:	2204      	movs	r2, #4
   12dfa:	4628      	mov	r0, r5
   12dfc:	f012 f973 	bl	250e6 <memset>
	if (len_rd == 0) {
   12e00:	2e00      	cmp	r6, #0
   12e02:	d0d9      	beq.n	12db8 <mod_set+0x88>
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
   12e04:	2204      	movs	r2, #4
   12e06:	4629      	mov	r1, r5
   12e08:	e7de      	b.n	12dc8 <mod_set+0x98>
	if (!strncmp(next, "pub", len)) {
   12e0a:	4941      	ldr	r1, [pc, #260]	; (12f10 <mod_set+0x1e0>)
   12e0c:	9801      	ldr	r0, [sp, #4]
   12e0e:	4642      	mov	r2, r8
   12e10:	f012 f91f 	bl	25052 <strncmp>
   12e14:	4604      	mov	r4, r0
   12e16:	2800      	cmp	r0, #0
   12e18:	d14a      	bne.n	12eb0 <mod_set+0x180>
	if (!mod->pub) {
   12e1a:	68ab      	ldr	r3, [r5, #8]
   12e1c:	b963      	cbnz	r3, 12e38 <mod_set+0x108>
   12e1e:	4b35      	ldr	r3, [pc, #212]	; (12ef4 <mod_set+0x1c4>)
   12e20:	4935      	ldr	r1, [pc, #212]	; (12ef8 <mod_set+0x1c8>)
		BT_WARN("Model has no publication context!");
   12e22:	483c      	ldr	r0, [pc, #240]	; (12f14 <mod_set+0x1e4>)
   12e24:	1ac9      	subs	r1, r1, r3
   12e26:	08c9      	lsrs	r1, r1, #3
   12e28:	0189      	lsls	r1, r1, #6
   12e2a:	f041 0102 	orr.w	r1, r1, #2
   12e2e:	f010 fabd 	bl	233ac <log_0>
		return -EINVAL;
   12e32:	f06f 0415 	mvn.w	r4, #21
   12e36:	e7c0      	b.n	12dba <mod_set+0x8a>
	if (len_rd == 0) {
   12e38:	b946      	cbnz	r6, 12e4c <mod_set+0x11c>
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   12e3a:	685a      	ldr	r2, [r3, #4]
   12e3c:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
   12e40:	605a      	str	r2, [r3, #4]
		mod->pub->ttl = 0U;
   12e42:	689a      	ldr	r2, [r3, #8]
   12e44:	f002 52f8 	and.w	r2, r2, #520093696	; 0x1f000000
   12e48:	609a      	str	r2, [r3, #8]
		return 0;
   12e4a:	e7b6      	b.n	12dba <mod_set+0x8a>
	err = mesh_x_set(read_cb, cb_arg, &pub, sizeof(pub));
   12e4c:	2308      	movs	r3, #8
   12e4e:	eb0d 0203 	add.w	r2, sp, r3
   12e52:	4649      	mov	r1, r9
   12e54:	4638      	mov	r0, r7
   12e56:	f7ff fcb5 	bl	127c4 <mesh_x_set>
	if (err) {
   12e5a:	4604      	mov	r4, r0
   12e5c:	b150      	cbz	r0, 12e74 <mod_set+0x144>
   12e5e:	4b25      	ldr	r3, [pc, #148]	; (12ef4 <mod_set+0x1c4>)
   12e60:	4925      	ldr	r1, [pc, #148]	; (12ef8 <mod_set+0x1c8>)
		BT_ERR("Failed to set \'model-pub\'");
   12e62:	482d      	ldr	r0, [pc, #180]	; (12f18 <mod_set+0x1e8>)
   12e64:	1ac9      	subs	r1, r1, r3
   12e66:	08c9      	lsrs	r1, r1, #3
   12e68:	0189      	lsls	r1, r1, #6
   12e6a:	f041 0101 	orr.w	r1, r1, #1
   12e6e:	f010 fa9d 	bl	233ac <log_0>
		return err;
   12e72:	e7a2      	b.n	12dba <mod_set+0x8a>
	mod->pub->addr = pub.addr;
   12e74:	68ab      	ldr	r3, [r5, #8]
   12e76:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   12e7a:	809a      	strh	r2, [r3, #4]
	mod->pub->cred = pub.cred;
   12e7c:	f89d 200f 	ldrb.w	r2, [sp, #15]
	mod->pub->key = pub.key;
   12e80:	f3c2 1100 	ubfx	r1, r2, #4, #1
   12e84:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   12e88:	f3c2 020b 	ubfx	r2, r2, #0, #12
   12e8c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   12e90:	88d9      	ldrh	r1, [r3, #6]
   12e92:	f401 4160 	and.w	r1, r1, #57344	; 0xe000
   12e96:	430a      	orrs	r2, r1
   12e98:	80da      	strh	r2, [r3, #6]
	mod->pub->period = pub.period;
   12e9a:	f89d 200e 	ldrb.w	r2, [sp, #14]
   12e9e:	729a      	strb	r2, [r3, #10]
	mod->pub->count = 0U;
   12ea0:	7ada      	ldrb	r2, [r3, #11]
	mod->pub->ttl = pub.ttl;
   12ea2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   12ea6:	8119      	strh	r1, [r3, #8]
	mod->pub->count = 0U;
   12ea8:	f360 1247 	bfi	r2, r0, #5, #3
   12eac:	72da      	strb	r2, [r3, #11]
		return mod_set_pub(mod, len_rd, read_cb, cb_arg);
   12eae:	e784      	b.n	12dba <mod_set+0x8a>
	if (!strncmp(next, "data", len)) {
   12eb0:	491a      	ldr	r1, [pc, #104]	; (12f1c <mod_set+0x1ec>)
   12eb2:	9801      	ldr	r0, [sp, #4]
   12eb4:	4642      	mov	r2, r8
   12eb6:	f012 f8cc 	bl	25052 <strncmp>
   12eba:	b970      	cbnz	r0, 12eda <mod_set+0x1aa>
		mod->flags |= BT_MESH_MOD_DATA_PRESENT;
   12ebc:	88eb      	ldrh	r3, [r5, #6]
   12ebe:	f043 0308 	orr.w	r3, r3, #8
   12ec2:	80eb      	strh	r3, [r5, #6]
		if (mod->cb && mod->cb->settings_set) {
   12ec4:	69ab      	ldr	r3, [r5, #24]
   12ec6:	b143      	cbz	r3, 12eda <mod_set+0x1aa>
   12ec8:	681c      	ldr	r4, [r3, #0]
   12eca:	b134      	cbz	r4, 12eda <mod_set+0x1aa>
			return mod->cb->settings_set(mod, len_rd, read_cb, cb_arg);
   12ecc:	464b      	mov	r3, r9
   12ece:	463a      	mov	r2, r7
   12ed0:	4631      	mov	r1, r6
   12ed2:	4628      	mov	r0, r5
   12ed4:	47a0      	blx	r4
   12ed6:	4604      	mov	r4, r0
   12ed8:	e76f      	b.n	12dba <mod_set+0x8a>
   12eda:	4b06      	ldr	r3, [pc, #24]	; (12ef4 <mod_set+0x1c4>)
   12edc:	4a06      	ldr	r2, [pc, #24]	; (12ef8 <mod_set+0x1c8>)
	BT_WARN("Unknown module key %s", next);
   12ede:	9901      	ldr	r1, [sp, #4]
   12ee0:	480f      	ldr	r0, [pc, #60]	; (12f20 <mod_set+0x1f0>)
   12ee2:	1ad2      	subs	r2, r2, r3
   12ee4:	08d2      	lsrs	r2, r2, #3
   12ee6:	0192      	lsls	r2, r2, #6
   12ee8:	f042 0202 	orr.w	r2, r2, #2
   12eec:	f010 fa6b 	bl	233c6 <log_1>
   12ef0:	e74e      	b.n	12d90 <mod_set+0x60>
   12ef2:	bf00      	nop
   12ef4:	00028868 	.word	0x00028868
   12ef8:	000289b8 	.word	0x000289b8
   12efc:	0002a92d 	.word	0x0002a92d
   12f00:	0002d402 	.word	0x0002d402
   12f04:	0002d431 	.word	0x0002d431
   12f08:	0002d220 	.word	0x0002d220
   12f0c:	0002d436 	.word	0x0002d436
   12f10:	0002d43a 	.word	0x0002d43a
   12f14:	0002d43e 	.word	0x0002d43e
   12f18:	0002d460 	.word	0x0002d460
   12f1c:	0002b3e5 	.word	0x0002b3e5
   12f20:	0002d47a 	.word	0x0002d47a

00012f24 <seq_set>:
{
   12f24:	b513      	push	{r0, r1, r4, lr}
   12f26:	460c      	mov	r4, r1
   12f28:	4610      	mov	r0, r2
   12f2a:	4619      	mov	r1, r3
	if (len_rd == 0) {
   12f2c:	b924      	cbnz	r4, 12f38 <seq_set+0x14>
		bt_mesh.seq = 0U;
   12f2e:	4b13      	ldr	r3, [pc, #76]	; (12f7c <seq_set+0x58>)
   12f30:	605c      	str	r4, [r3, #4]
}
   12f32:	4620      	mov	r0, r4
   12f34:	b002      	add	sp, #8
   12f36:	bd10      	pop	{r4, pc}
	err = mesh_x_set(read_cb, cb_arg, &seq, sizeof(seq));
   12f38:	2303      	movs	r3, #3
   12f3a:	aa01      	add	r2, sp, #4
   12f3c:	f7ff fc42 	bl	127c4 <mesh_x_set>
	if (err) {
   12f40:	4604      	mov	r4, r0
   12f42:	b150      	cbz	r0, 12f5a <seq_set+0x36>
   12f44:	4b0e      	ldr	r3, [pc, #56]	; (12f80 <seq_set+0x5c>)
   12f46:	490f      	ldr	r1, [pc, #60]	; (12f84 <seq_set+0x60>)
		BT_ERR("Failed to set \'seq\'");
   12f48:	480f      	ldr	r0, [pc, #60]	; (12f88 <seq_set+0x64>)
   12f4a:	1ac9      	subs	r1, r1, r3
   12f4c:	08c9      	lsrs	r1, r1, #3
   12f4e:	0189      	lsls	r1, r1, #6
   12f50:	f041 0101 	orr.w	r1, r1, #1
   12f54:	f010 fa2a 	bl	233ac <log_0>
		return err;
   12f58:	e7eb      	b.n	12f32 <seq_set+0xe>
	return ((u16_t)src[1] << 8) | src[0];
   12f5a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   12f5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return ((u32_t)src[2] << 16) | sys_get_le16(&src[0]);
   12f62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12f66:	f89d 2006 	ldrb.w	r2, [sp, #6]
   12f6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		bt_mesh.seq += (CONFIG_BT_MESH_SEQ_STORE_RATE -
   12f6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		bt_mesh.seq--;
   12f72:	4a02      	ldr	r2, [pc, #8]	; (12f7c <seq_set+0x58>)
   12f74:	337f      	adds	r3, #127	; 0x7f
   12f76:	6053      	str	r3, [r2, #4]
	return 0;
   12f78:	e7db      	b.n	12f32 <seq_set+0xe>
   12f7a:	bf00      	nop
   12f7c:	20006ab8 	.word	0x20006ab8
   12f80:	00028868 	.word	0x00028868
   12f84:	000289b8 	.word	0x000289b8
   12f88:	0002d490 	.word	0x0002d490

00012f8c <cfg_set>:
{
   12f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f8e:	460c      	mov	r4, r1
   12f90:	4616      	mov	r6, r2
   12f92:	461f      	mov	r7, r3
	struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
   12f94:	f7ff fb08 	bl	125a8 <bt_mesh_cfg_get>
	if (!cfg) {
   12f98:	b1d0      	cbz	r0, 12fd0 <cfg_set+0x44>
	if (len_rd == 0) {
   12f9a:	4d0f      	ldr	r5, [pc, #60]	; (12fd8 <cfg_set+0x4c>)
   12f9c:	b914      	cbnz	r4, 12fa4 <cfg_set+0x18>
		stored_cfg.valid = false;
   12f9e:	702c      	strb	r4, [r5, #0]
}
   12fa0:	4620      	mov	r0, r4
   12fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	err = mesh_x_set(read_cb, cb_arg, &stored_cfg.cfg,
   12fa4:	2307      	movs	r3, #7
   12fa6:	1c6a      	adds	r2, r5, #1
   12fa8:	4639      	mov	r1, r7
   12faa:	4630      	mov	r0, r6
   12fac:	f7ff fc0a 	bl	127c4 <mesh_x_set>
	if (err) {
   12fb0:	4604      	mov	r4, r0
   12fb2:	b150      	cbz	r0, 12fca <cfg_set+0x3e>
   12fb4:	4b09      	ldr	r3, [pc, #36]	; (12fdc <cfg_set+0x50>)
   12fb6:	490a      	ldr	r1, [pc, #40]	; (12fe0 <cfg_set+0x54>)
		BT_ERR("Failed to set \'cfg\'");
   12fb8:	480a      	ldr	r0, [pc, #40]	; (12fe4 <cfg_set+0x58>)
   12fba:	1ac9      	subs	r1, r1, r3
   12fbc:	08c9      	lsrs	r1, r1, #3
   12fbe:	0189      	lsls	r1, r1, #6
   12fc0:	f041 0101 	orr.w	r1, r1, #1
   12fc4:	f010 f9f2 	bl	233ac <log_0>
		return err;
   12fc8:	e7ea      	b.n	12fa0 <cfg_set+0x14>
	stored_cfg.valid = true;
   12fca:	2301      	movs	r3, #1
   12fcc:	702b      	strb	r3, [r5, #0]
	return 0;
   12fce:	e7e7      	b.n	12fa0 <cfg_set+0x14>
		return -ENOENT;
   12fd0:	f06f 0401 	mvn.w	r4, #1
   12fd4:	e7e4      	b.n	12fa0 <cfg_set+0x14>
   12fd6:	bf00      	nop
   12fd8:	20002303 	.word	0x20002303
   12fdc:	00028868 	.word	0x00028868
   12fe0:	000289b8 	.word	0x000289b8
   12fe4:	0002d4a4 	.word	0x0002d4a4

00012fe8 <net_set>:
{
   12fe8:	b510      	push	{r4, lr}
   12fea:	460c      	mov	r4, r1
   12fec:	b086      	sub	sp, #24
   12fee:	4610      	mov	r0, r2
   12ff0:	4619      	mov	r1, r3
	if (len_rd == 0) {
   12ff2:	b94c      	cbnz	r4, 13008 <net_set+0x20>
		bt_mesh_comp_unprovision();
   12ff4:	f7fc fbf4 	bl	f7e0 <bt_mesh_comp_unprovision>
		(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
   12ff8:	4811      	ldr	r0, [pc, #68]	; (13040 <net_set+0x58>)
   12ffa:	2210      	movs	r2, #16
   12ffc:	4621      	mov	r1, r4
   12ffe:	f012 f872 	bl	250e6 <memset>
}
   13002:	4620      	mov	r0, r4
   13004:	b006      	add	sp, #24
   13006:	bd10      	pop	{r4, pc}
	err = mesh_x_set(read_cb, cb_arg, &net, sizeof(net));
   13008:	2312      	movs	r3, #18
   1300a:	aa01      	add	r2, sp, #4
   1300c:	f7ff fbda 	bl	127c4 <mesh_x_set>
	if (err) {
   13010:	4604      	mov	r4, r0
   13012:	b150      	cbz	r0, 1302a <net_set+0x42>
   13014:	4b0b      	ldr	r3, [pc, #44]	; (13044 <net_set+0x5c>)
   13016:	490c      	ldr	r1, [pc, #48]	; (13048 <net_set+0x60>)
		BT_ERR("Failed to set \'net\'");
   13018:	480c      	ldr	r0, [pc, #48]	; (1304c <net_set+0x64>)
   1301a:	1ac9      	subs	r1, r1, r3
   1301c:	08c9      	lsrs	r1, r1, #3
   1301e:	0189      	lsls	r1, r1, #6
   13020:	f041 0101 	orr.w	r1, r1, #1
   13024:	f010 f9c2 	bl	233ac <log_0>
		return err;
   13028:	e7eb      	b.n	13002 <net_set+0x1a>
	memcpy(bt_mesh.dev_key, net.dev_key, sizeof(bt_mesh.dev_key));
   1302a:	2210      	movs	r2, #16
   1302c:	f10d 0106 	add.w	r1, sp, #6
   13030:	4803      	ldr	r0, [pc, #12]	; (13040 <net_set+0x58>)
   13032:	f012 f82d 	bl	25090 <memcpy>
	bt_mesh_comp_provision(net.primary_addr);
   13036:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1303a:	f7fc fbbb 	bl	f7b4 <bt_mesh_comp_provision>
	return 0;
   1303e:	e7e0      	b.n	13002 <net_set+0x1a>
   13040:	20006b4c 	.word	0x20006b4c
   13044:	00028868 	.word	0x00028868
   13048:	000289b8 	.word	0x000289b8
   1304c:	0002d4b8 	.word	0x0002d4b8

00013050 <store_net_key>:
{
   13050:	b510      	push	{r4, lr}
   13052:	b08e      	sub	sp, #56	; 0x38
   13054:	4604      	mov	r4, r0
	memcpy(&key.val[0], sub->keys[0].net, 16);
   13056:	f100 0130 	add.w	r1, r0, #48	; 0x30
   1305a:	2210      	movs	r2, #16
   1305c:	f10d 0015 	add.w	r0, sp, #21
   13060:	f012 f816 	bl	25090 <memcpy>
	memcpy(&key.val[1], sub->keys[1].net, 16);
   13064:	2210      	movs	r2, #16
   13066:	f104 0189 	add.w	r1, r4, #137	; 0x89
   1306a:	f10d 0025 	add.w	r0, sp, #37	; 0x25
   1306e:	f012 f80f 	bl	25090 <memcpy>
	key.kr_flag = sub->kr_flag;
   13072:	7fe2      	ldrb	r2, [r4, #31]
   13074:	7fa3      	ldrb	r3, [r4, #30]
   13076:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   1307a:	f88d 3014 	strb.w	r3, [sp, #20]
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", sub->net_idx);
   1307e:	4a0c      	ldr	r2, [pc, #48]	; (130b0 <store_net_key+0x60>)
   13080:	8ba3      	ldrh	r3, [r4, #28]
   13082:	2114      	movs	r1, #20
   13084:	4668      	mov	r0, sp
   13086:	f010 f92d 	bl	232e4 <snprintk>
	err = settings_save_one(path, &key, sizeof(key));
   1308a:	2221      	movs	r2, #33	; 0x21
   1308c:	a905      	add	r1, sp, #20
   1308e:	4668      	mov	r0, sp
   13090:	f7f0 faf4 	bl	367c <settings_save_one>
	if (err) {
   13094:	b148      	cbz	r0, 130aa <store_net_key+0x5a>
   13096:	4907      	ldr	r1, [pc, #28]	; (130b4 <store_net_key+0x64>)
   13098:	4b07      	ldr	r3, [pc, #28]	; (130b8 <store_net_key+0x68>)
		BT_ERR("Failed to store NetKey value");
   1309a:	4808      	ldr	r0, [pc, #32]	; (130bc <store_net_key+0x6c>)
   1309c:	1ac9      	subs	r1, r1, r3
   1309e:	08c9      	lsrs	r1, r1, #3
   130a0:	0189      	lsls	r1, r1, #6
   130a2:	f041 0101 	orr.w	r1, r1, #1
   130a6:	f010 f981 	bl	233ac <log_0>
}
   130aa:	b00e      	add	sp, #56	; 0x38
   130ac:	bd10      	pop	{r4, pc}
   130ae:	bf00      	nop
   130b0:	0002d4cc 	.word	0x0002d4cc
   130b4:	000289b8 	.word	0x000289b8
   130b8:	00028868 	.word	0x00028868
   130bc:	0002d4de 	.word	0x0002d4de

000130c0 <clear_net_key>:
{
   130c0:	b510      	push	{r4, lr}
   130c2:	b086      	sub	sp, #24
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
   130c4:	4603      	mov	r3, r0
   130c6:	4a0b      	ldr	r2, [pc, #44]	; (130f4 <clear_net_key+0x34>)
{
   130c8:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
   130ca:	2114      	movs	r1, #20
   130cc:	a801      	add	r0, sp, #4
   130ce:	f010 f909 	bl	232e4 <snprintk>
	err = settings_delete(path);
   130d2:	a801      	add	r0, sp, #4
   130d4:	f010 fd20 	bl	23b18 <settings_delete>
	if (err) {
   130d8:	b150      	cbz	r0, 130f0 <clear_net_key+0x30>
   130da:	4a07      	ldr	r2, [pc, #28]	; (130f8 <clear_net_key+0x38>)
   130dc:	4b07      	ldr	r3, [pc, #28]	; (130fc <clear_net_key+0x3c>)
		BT_ERR("Failed to clear NetKeyIndex 0x%03x", net_idx);
   130de:	4808      	ldr	r0, [pc, #32]	; (13100 <clear_net_key+0x40>)
   130e0:	1ad2      	subs	r2, r2, r3
   130e2:	08d2      	lsrs	r2, r2, #3
   130e4:	0192      	lsls	r2, r2, #6
   130e6:	f042 0201 	orr.w	r2, r2, #1
   130ea:	4621      	mov	r1, r4
   130ec:	f010 f96b 	bl	233c6 <log_1>
}
   130f0:	b006      	add	sp, #24
   130f2:	bd10      	pop	{r4, pc}
   130f4:	0002d4cc 	.word	0x0002d4cc
   130f8:	000289b8 	.word	0x000289b8
   130fc:	00028868 	.word	0x00028868
   13100:	0002d4fb 	.word	0x0002d4fb

00013104 <clear_app_key>:
{
   13104:	b510      	push	{r4, lr}
   13106:	b086      	sub	sp, #24
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   13108:	4603      	mov	r3, r0
   1310a:	4a0b      	ldr	r2, [pc, #44]	; (13138 <clear_app_key+0x34>)
{
   1310c:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   1310e:	2114      	movs	r1, #20
   13110:	a801      	add	r0, sp, #4
   13112:	f010 f8e7 	bl	232e4 <snprintk>
	err = settings_delete(path);
   13116:	a801      	add	r0, sp, #4
   13118:	f010 fcfe 	bl	23b18 <settings_delete>
	if (err) {
   1311c:	b150      	cbz	r0, 13134 <clear_app_key+0x30>
   1311e:	4a07      	ldr	r2, [pc, #28]	; (1313c <clear_app_key+0x38>)
   13120:	4b07      	ldr	r3, [pc, #28]	; (13140 <clear_app_key+0x3c>)
		BT_ERR("Failed to clear AppKeyIndex 0x%03x", app_idx);
   13122:	4808      	ldr	r0, [pc, #32]	; (13144 <clear_app_key+0x40>)
   13124:	1ad2      	subs	r2, r2, r3
   13126:	08d2      	lsrs	r2, r2, #3
   13128:	0192      	lsls	r2, r2, #6
   1312a:	f042 0201 	orr.w	r2, r2, #1
   1312e:	4621      	mov	r1, r4
   13130:	f010 f949 	bl	233c6 <log_1>
}
   13134:	b006      	add	sp, #24
   13136:	bd10      	pop	{r4, pc}
   13138:	0002d3d0 	.word	0x0002d3d0
   1313c:	000289b8 	.word	0x000289b8
   13140:	00028868 	.word	0x00028868
   13144:	0002d51e 	.word	0x0002d51e

00013148 <encode_mod_path.constprop.0>:
static void encode_mod_path(struct bt_mesh_model *mod, bool vnd,
   13148:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1314a:	4604      	mov	r4, r0
   1314c:	4618      	mov	r0, r3
	u16_t mod_key = (((u16_t)mod->elem_idx << 8) | mod->mod_idx);
   1314e:	7925      	ldrb	r5, [r4, #4]
   13150:	7963      	ldrb	r3, [r4, #5]
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   13152:	9200      	str	r2, [sp, #0]
   13154:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	if (vnd) {
   13158:	b129      	cbz	r1, 13166 <encode_mod_path.constprop.0+0x1e>
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   1315a:	4a04      	ldr	r2, [pc, #16]	; (1316c <encode_mod_path.constprop.0+0x24>)
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
   1315c:	2114      	movs	r1, #20
   1315e:	f010 f8c1 	bl	232e4 <snprintk>
}
   13162:	b003      	add	sp, #12
   13164:	bd30      	pop	{r4, r5, pc}
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
   13166:	4a02      	ldr	r2, [pc, #8]	; (13170 <encode_mod_path.constprop.0+0x28>)
   13168:	e7f8      	b.n	1315c <encode_mod_path.constprop.0+0x14>
   1316a:	bf00      	nop
   1316c:	0002d541 	.word	0x0002d541
   13170:	0002d551 	.word	0x0002d551

00013174 <store_pending_mod>:
{
   13174:	b570      	push	{r4, r5, r6, lr}
	if (!mod->flags) {
   13176:	88c3      	ldrh	r3, [r0, #6]
{
   13178:	b088      	sub	sp, #32
   1317a:	4604      	mov	r4, r0
   1317c:	4616      	mov	r6, r2
	if (!mod->flags) {
   1317e:	2b00      	cmp	r3, #0
   13180:	f000 8089 	beq.w	13296 <store_pending_mod+0x122>
	if (mod->flags & BT_MESH_MOD_BIND_PENDING) {
   13184:	07d8      	lsls	r0, r3, #31
   13186:	d533      	bpl.n	131f0 <store_pending_mod+0x7c>
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   13188:	89a2      	ldrh	r2, [r4, #12]
		mod->flags &= ~BT_MESH_MOD_BIND_PENDING;
   1318a:	f023 0301 	bic.w	r3, r3, #1
   1318e:	80e3      	strh	r3, [r4, #6]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   13190:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13194:	429a      	cmp	r2, r3
			keys[count++] = mod->keys[i];
   13196:	bf18      	it	ne
   13198:	f8ad 2004 	strhne.w	r2, [sp, #4]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   1319c:	89e2      	ldrh	r2, [r4, #14]
			keys[count++] = mod->keys[i];
   1319e:	bf14      	ite	ne
   131a0:	2501      	movne	r5, #1
	for (i = 0, count = 0; i < ARRAY_SIZE(mod->keys); i++) {
   131a2:	2500      	moveq	r5, #0
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   131a4:	429a      	cmp	r2, r3
			keys[count++] = mod->keys[i];
   131a6:	bf1c      	itt	ne
   131a8:	ab08      	addne	r3, sp, #32
   131aa:	eb03 0345 	addne.w	r3, r3, r5, lsl #1
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   131ae:	4631      	mov	r1, r6
			keys[count++] = mod->keys[i];
   131b0:	bf1c      	itt	ne
   131b2:	f823 2c1c 	strhne.w	r2, [r3, #-28]
   131b6:	3501      	addne	r5, #1
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   131b8:	4a4b      	ldr	r2, [pc, #300]	; (132e8 <store_pending_mod+0x174>)
   131ba:	ab03      	add	r3, sp, #12
   131bc:	4620      	mov	r0, r4
   131be:	f7ff ffc3 	bl	13148 <encode_mod_path.constprop.0>
	if (count) {
   131c2:	2d00      	cmp	r5, #0
   131c4:	d069      	beq.n	1329a <store_pending_mod+0x126>
		err = settings_save_one(path, keys, count * sizeof(keys[0]));
   131c6:	006a      	lsls	r2, r5, #1
   131c8:	a901      	add	r1, sp, #4
   131ca:	a803      	add	r0, sp, #12
   131cc:	f7f0 fa56 	bl	367c <settings_save_one>
	if (err) {
   131d0:	b170      	cbz	r0, 131f0 <store_pending_mod+0x7c>
   131d2:	4a46      	ldr	r2, [pc, #280]	; (132ec <store_pending_mod+0x178>)
   131d4:	4d46      	ldr	r5, [pc, #280]	; (132f0 <store_pending_mod+0x17c>)
		BT_ERR("Failed to store %s value", log_strdup(path));
   131d6:	a803      	add	r0, sp, #12
   131d8:	1aad      	subs	r5, r5, r2
   131da:	08ed      	lsrs	r5, r5, #3
   131dc:	f7ef f8b0 	bl	2340 <log_strdup>
   131e0:	01ad      	lsls	r5, r5, #6
   131e2:	f045 0501 	orr.w	r5, r5, #1
   131e6:	4601      	mov	r1, r0
   131e8:	462a      	mov	r2, r5
   131ea:	4842      	ldr	r0, [pc, #264]	; (132f4 <store_pending_mod+0x180>)
   131ec:	f010 f8eb 	bl	233c6 <log_1>
	if (mod->flags & BT_MESH_MOD_SUB_PENDING) {
   131f0:	88e3      	ldrh	r3, [r4, #6]
   131f2:	0799      	lsls	r1, r3, #30
   131f4:	d52c      	bpl.n	13250 <store_pending_mod+0xdc>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   131f6:	8a25      	ldrh	r5, [r4, #16]
		mod->flags &= ~BT_MESH_MOD_SUB_PENDING;
   131f8:	f023 0302 	bic.w	r3, r3, #2
   131fc:	80e3      	strh	r3, [r4, #6]
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   131fe:	b115      	cbz	r5, 13206 <store_pending_mod+0x92>
			groups[count++] = mod->groups[i];
   13200:	f8ad 5004 	strh.w	r5, [sp, #4]
   13204:	2501      	movs	r5, #1
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   13206:	8a63      	ldrh	r3, [r4, #18]
   13208:	b12b      	cbz	r3, 13216 <store_pending_mod+0xa2>
			groups[count++] = mod->groups[i];
   1320a:	aa08      	add	r2, sp, #32
   1320c:	eb02 0245 	add.w	r2, r2, r5, lsl #1
   13210:	3501      	adds	r5, #1
   13212:	f822 3c1c 	strh.w	r3, [r2, #-28]
	encode_mod_path(mod, vnd, "sub", path, sizeof(path));
   13216:	4a38      	ldr	r2, [pc, #224]	; (132f8 <store_pending_mod+0x184>)
   13218:	ab03      	add	r3, sp, #12
   1321a:	4631      	mov	r1, r6
   1321c:	4620      	mov	r0, r4
   1321e:	f7ff ff93 	bl	13148 <encode_mod_path.constprop.0>
	if (count) {
   13222:	2d00      	cmp	r5, #0
   13224:	d03d      	beq.n	132a2 <store_pending_mod+0x12e>
		err = settings_save_one(path, groups,
   13226:	006a      	lsls	r2, r5, #1
   13228:	a901      	add	r1, sp, #4
   1322a:	a803      	add	r0, sp, #12
   1322c:	f7f0 fa26 	bl	367c <settings_save_one>
	if (err) {
   13230:	b170      	cbz	r0, 13250 <store_pending_mod+0xdc>
   13232:	4a2e      	ldr	r2, [pc, #184]	; (132ec <store_pending_mod+0x178>)
   13234:	4d2e      	ldr	r5, [pc, #184]	; (132f0 <store_pending_mod+0x17c>)
		BT_ERR("Failed to store %s value", log_strdup(path));
   13236:	a803      	add	r0, sp, #12
   13238:	1aad      	subs	r5, r5, r2
   1323a:	08ed      	lsrs	r5, r5, #3
   1323c:	f7ef f880 	bl	2340 <log_strdup>
   13240:	01ad      	lsls	r5, r5, #6
   13242:	f045 0501 	orr.w	r5, r5, #1
   13246:	4601      	mov	r1, r0
   13248:	462a      	mov	r2, r5
   1324a:	482a      	ldr	r0, [pc, #168]	; (132f4 <store_pending_mod+0x180>)
   1324c:	f010 f8bb 	bl	233c6 <log_1>
	if (mod->flags & BT_MESH_MOD_PUB_PENDING) {
   13250:	88e3      	ldrh	r3, [r4, #6]
   13252:	075a      	lsls	r2, r3, #29
   13254:	d51f      	bpl.n	13296 <store_pending_mod+0x122>
		mod->flags &= ~BT_MESH_MOD_PUB_PENDING;
   13256:	f023 0304 	bic.w	r3, r3, #4
   1325a:	80e3      	strh	r3, [r4, #6]
	encode_mod_path(mod, vnd, "pub", path, sizeof(path));
   1325c:	4a27      	ldr	r2, [pc, #156]	; (132fc <store_pending_mod+0x188>)
   1325e:	ab03      	add	r3, sp, #12
   13260:	4631      	mov	r1, r6
   13262:	4620      	mov	r0, r4
   13264:	f7ff ff70 	bl	13148 <encode_mod_path.constprop.0>
	if (!mod->pub || mod->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   13268:	68a3      	ldr	r3, [r4, #8]
   1326a:	b10b      	cbz	r3, 13270 <store_pending_mod+0xfc>
   1326c:	889a      	ldrh	r2, [r3, #4]
   1326e:	b9e2      	cbnz	r2, 132aa <store_pending_mod+0x136>
		err = settings_delete(path);
   13270:	a803      	add	r0, sp, #12
   13272:	f010 fc51 	bl	23b18 <settings_delete>
	if (err) {
   13276:	b170      	cbz	r0, 13296 <store_pending_mod+0x122>
   13278:	4a1c      	ldr	r2, [pc, #112]	; (132ec <store_pending_mod+0x178>)
   1327a:	4c1d      	ldr	r4, [pc, #116]	; (132f0 <store_pending_mod+0x17c>)
		BT_ERR("Failed to store %s value", log_strdup(path));
   1327c:	a803      	add	r0, sp, #12
   1327e:	1aa4      	subs	r4, r4, r2
   13280:	08e4      	lsrs	r4, r4, #3
   13282:	f7ef f85d 	bl	2340 <log_strdup>
   13286:	01a4      	lsls	r4, r4, #6
   13288:	f044 0401 	orr.w	r4, r4, #1
   1328c:	4601      	mov	r1, r0
   1328e:	4622      	mov	r2, r4
   13290:	4818      	ldr	r0, [pc, #96]	; (132f4 <store_pending_mod+0x180>)
   13292:	f010 f898 	bl	233c6 <log_1>
}
   13296:	b008      	add	sp, #32
   13298:	bd70      	pop	{r4, r5, r6, pc}
		err = settings_delete(path);
   1329a:	a803      	add	r0, sp, #12
   1329c:	f010 fc3c 	bl	23b18 <settings_delete>
   132a0:	e796      	b.n	131d0 <store_pending_mod+0x5c>
		err = settings_delete(path);
   132a2:	a803      	add	r0, sp, #12
   132a4:	f010 fc38 	bl	23b18 <settings_delete>
   132a8:	e7c2      	b.n	13230 <store_pending_mod+0xbc>
		pub.addr = mod->pub->addr;
   132aa:	f8ad 2004 	strh.w	r2, [sp, #4]
		pub.key = mod->pub->key;
   132ae:	88da      	ldrh	r2, [r3, #6]
   132b0:	f3c2 020b 	ubfx	r2, r2, #0, #12
   132b4:	f8ad 2006 	strh.w	r2, [sp, #6]
		pub.ttl = mod->pub->ttl;
   132b8:	6899      	ldr	r1, [r3, #8]
   132ba:	9a02      	ldr	r2, [sp, #8]
   132bc:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
   132c0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
   132c4:	430a      	orrs	r2, r1
   132c6:	9202      	str	r2, [sp, #8]
		pub.cred = mod->pub->cred;
   132c8:	79db      	ldrb	r3, [r3, #7]
   132ca:	f89d 200b 	ldrb.w	r2, [sp, #11]
   132ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
   132d2:	f363 1204 	bfi	r2, r3, #4, #1
   132d6:	f88d 200b 	strb.w	r2, [sp, #11]
		err = settings_save_one(path, &pub, sizeof(pub));
   132da:	a901      	add	r1, sp, #4
   132dc:	2208      	movs	r2, #8
   132de:	a803      	add	r0, sp, #12
   132e0:	f7f0 f9cc 	bl	367c <settings_save_one>
   132e4:	e7c7      	b.n	13276 <store_pending_mod+0x102>
   132e6:	bf00      	nop
   132e8:	0002d431 	.word	0x0002d431
   132ec:	00028868 	.word	0x00028868
   132f0:	000289b8 	.word	0x000289b8
   132f4:	0002d561 	.word	0x0002d561
   132f8:	0002d436 	.word	0x0002d436
   132fc:	0002d43a 	.word	0x0002d43a

00013300 <store_pending>:
{
   13300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_RPL_PENDING)) {
   13304:	48b4      	ldr	r0, [pc, #720]	; (135d8 <store_pending+0x2d8>)
   13306:	4db4      	ldr	r5, [pc, #720]	; (135d8 <store_pending+0x2d8>)
{
   13308:	b08c      	sub	sp, #48	; 0x30
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_RPL_PENDING)) {
   1330a:	2106      	movs	r1, #6
   1330c:	f013 fd55 	bl	26dba <atomic_test_and_clear_bit>
   13310:	2800      	cmp	r0, #0
   13312:	f040 80fb 	bne.w	1350c <store_pending+0x20c>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_KEYS_PENDING)) {
   13316:	48b0      	ldr	r0, [pc, #704]	; (135d8 <store_pending+0x2d8>)
   13318:	2107      	movs	r1, #7
   1331a:	f013 fd4e 	bl	26dba <atomic_test_and_clear_bit>
   1331e:	b338      	cbz	r0, 13370 <store_pending+0x70>
   13320:	4eae      	ldr	r6, [pc, #696]	; (135dc <store_pending+0x2dc>)
   13322:	4baf      	ldr	r3, [pc, #700]	; (135e0 <store_pending+0x2e0>)
		if (!update->valid) {
   13324:	4faf      	ldr	r7, [pc, #700]	; (135e4 <store_pending+0x2e4>)
					BT_WARN("NetKeyIndex 0x%03x not found",
   13326:	f8df a2fc 	ldr.w	sl, [pc, #764]	; 13624 <store_pending+0x324>
   1332a:	1af6      	subs	r6, r6, r3
   1332c:	08f6      	lsrs	r6, r6, #3
	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
   1332e:	2400      	movs	r4, #0
   13330:	46b9      	mov	r9, r7
		if (!update->valid) {
   13332:	eb07 0344 	add.w	r3, r7, r4, lsl #1
   13336:	ea4f 0844 	mov.w	r8, r4, lsl #1
   1333a:	785b      	ldrb	r3, [r3, #1]
   1333c:	06da      	lsls	r2, r3, #27
   1333e:	d514      	bpl.n	1336a <store_pending+0x6a>
		if (update->clear) {
   13340:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
   13344:	f003 0220 	and.w	r2, r3, #32
   13348:	065b      	lsls	r3, r3, #25
   1334a:	f3c0 000b 	ubfx	r0, r0, #0, #12
   1334e:	f140 8172 	bpl.w	13636 <store_pending+0x336>
			if (update->app_key) {
   13352:	2a00      	cmp	r2, #0
   13354:	f000 816c 	beq.w	13630 <store_pending+0x330>
				clear_app_key(update->key_idx);
   13358:	f7ff fed4 	bl	13104 <clear_app_key>
		update->valid = 0U;
   1335c:	44c8      	add	r8, r9
   1335e:	f898 3001 	ldrb.w	r3, [r8, #1]
   13362:	f36f 1304 	bfc	r3, #4, #1
   13366:	f888 3001 	strb.w	r3, [r8, #1]
	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
   1336a:	3401      	adds	r4, #1
   1336c:	2c04      	cmp	r4, #4
   1336e:	d1e0      	bne.n	13332 <store_pending+0x32>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_NET_PENDING)) {
   13370:	4899      	ldr	r0, [pc, #612]	; (135d8 <store_pending+0x2d8>)
   13372:	2108      	movs	r1, #8
   13374:	f013 fd21 	bl	26dba <atomic_test_and_clear_bit>
   13378:	b1f8      	cbz	r0, 133ba <store_pending+0xba>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1337a:	4897      	ldr	r0, [pc, #604]	; (135d8 <store_pending+0x2d8>)
   1337c:	f013 fd01 	bl	26d82 <atomic_get>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   13380:	07c7      	lsls	r7, r0, #31
   13382:	f140 8179 	bpl.w	13678 <store_pending+0x378>
	net.primary_addr = bt_mesh_primary_addr();
   13386:	f7fc fa35 	bl	f7f4 <bt_mesh_primary_addr>
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
   1338a:	4997      	ldr	r1, [pc, #604]	; (135e8 <store_pending+0x2e8>)
	net.primary_addr = bt_mesh_primary_addr();
   1338c:	f8ad 001c 	strh.w	r0, [sp, #28]
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
   13390:	2210      	movs	r2, #16
   13392:	f10d 001e 	add.w	r0, sp, #30
   13396:	f011 fe7b 	bl	25090 <memcpy>
	err = settings_save_one("bt/mesh/Net", &net, sizeof(net));
   1339a:	4894      	ldr	r0, [pc, #592]	; (135ec <store_pending+0x2ec>)
   1339c:	2212      	movs	r2, #18
   1339e:	a907      	add	r1, sp, #28
   133a0:	f7f0 f96c 	bl	367c <settings_save_one>
	if (err) {
   133a4:	b148      	cbz	r0, 133ba <store_pending+0xba>
   133a6:	498d      	ldr	r1, [pc, #564]	; (135dc <store_pending+0x2dc>)
   133a8:	4b8d      	ldr	r3, [pc, #564]	; (135e0 <store_pending+0x2e0>)
		BT_ERR("Failed to store Network value");
   133aa:	4891      	ldr	r0, [pc, #580]	; (135f0 <store_pending+0x2f0>)
   133ac:	1ac9      	subs	r1, r1, r3
   133ae:	08c9      	lsrs	r1, r1, #3
   133b0:	0189      	lsls	r1, r1, #6
   133b2:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Failed to clear Network");
   133b6:	f00f fff9 	bl	233ac <log_0>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IV_PENDING)) {
   133ba:	4887      	ldr	r0, [pc, #540]	; (135d8 <store_pending+0x2d8>)
   133bc:	2109      	movs	r1, #9
   133be:	f013 fcfc 	bl	26dba <atomic_test_and_clear_bit>
   133c2:	b328      	cbz	r0, 13410 <store_pending+0x110>
   133c4:	4884      	ldr	r0, [pc, #528]	; (135d8 <store_pending+0x2d8>)
   133c6:	f013 fcdc 	bl	26d82 <atomic_get>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   133ca:	07c6      	lsls	r6, r0, #31
   133cc:	f140 8163 	bpl.w	13696 <store_pending+0x396>
	iv.iv_index = bt_mesh.iv_index;
   133d0:	4b88      	ldr	r3, [pc, #544]	; (135f4 <store_pending+0x2f4>)
   133d2:	f855 2c08 	ldr.w	r2, [r5, #-8]
   133d6:	9207      	str	r2, [sp, #28]
   133d8:	f103 0008 	add.w	r0, r3, #8
   133dc:	f013 fcd1 	bl	26d82 <atomic_get>
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
   133e0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   133e4:	f3c0 0080 	ubfx	r0, r0, #2, #1
   133e8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
   133ec:	f88d 0020 	strb.w	r0, [sp, #32]
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
   133f0:	2205      	movs	r2, #5
   133f2:	4881      	ldr	r0, [pc, #516]	; (135f8 <store_pending+0x2f8>)
   133f4:	a907      	add	r1, sp, #28
   133f6:	f7f0 f941 	bl	367c <settings_save_one>
	if (err) {
   133fa:	b148      	cbz	r0, 13410 <store_pending+0x110>
   133fc:	4977      	ldr	r1, [pc, #476]	; (135dc <store_pending+0x2dc>)
   133fe:	4b78      	ldr	r3, [pc, #480]	; (135e0 <store_pending+0x2e0>)
		BT_ERR("Failed to store IV value");
   13400:	487e      	ldr	r0, [pc, #504]	; (135fc <store_pending+0x2fc>)
   13402:	1ac9      	subs	r1, r1, r3
   13404:	08c9      	lsrs	r1, r1, #3
   13406:	0189      	lsls	r1, r1, #6
   13408:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Failed to clear IV");
   1340c:	f00f ffce 	bl	233ac <log_0>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_SEQ_PENDING)) {
   13410:	4871      	ldr	r0, [pc, #452]	; (135d8 <store_pending+0x2d8>)
   13412:	210a      	movs	r1, #10
   13414:	f013 fcd1 	bl	26dba <atomic_test_and_clear_bit>
   13418:	b1b0      	cbz	r0, 13448 <store_pending+0x148>
	sys_put_le24(bt_mesh.seq, seq.val);
   1341a:	4b76      	ldr	r3, [pc, #472]	; (135f4 <store_pending+0x2f4>)
	err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
   1341c:	4878      	ldr	r0, [pc, #480]	; (13600 <store_pending+0x300>)
	dst[0] = val;
   1341e:	889a      	ldrh	r2, [r3, #4]
   13420:	f8ad 201c 	strh.w	r2, [sp, #28]
	dst[2] = val >> 16;
   13424:	88db      	ldrh	r3, [r3, #6]
   13426:	f88d 301e 	strb.w	r3, [sp, #30]
   1342a:	2203      	movs	r2, #3
   1342c:	a907      	add	r1, sp, #28
   1342e:	f7f0 f925 	bl	367c <settings_save_one>
	if (err) {
   13432:	b148      	cbz	r0, 13448 <store_pending+0x148>
   13434:	4969      	ldr	r1, [pc, #420]	; (135dc <store_pending+0x2dc>)
   13436:	4b6a      	ldr	r3, [pc, #424]	; (135e0 <store_pending+0x2e0>)
		BT_ERR("Failed to stor Seq value");
   13438:	4872      	ldr	r0, [pc, #456]	; (13604 <store_pending+0x304>)
   1343a:	1ac9      	subs	r1, r1, r3
   1343c:	08c9      	lsrs	r1, r1, #3
   1343e:	0189      	lsls	r1, r1, #6
   13440:	f041 0101 	orr.w	r1, r1, #1
   13444:	f00f ffb2 	bl	233ac <log_0>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_HB_PUB_PENDING)) {
   13448:	4863      	ldr	r0, [pc, #396]	; (135d8 <store_pending+0x2d8>)
   1344a:	210b      	movs	r1, #11
   1344c:	f013 fcb5 	bl	26dba <atomic_test_and_clear_bit>
   13450:	b1a0      	cbz	r0, 1347c <store_pending+0x17c>
	struct bt_mesh_hb_pub *pub = bt_mesh_hb_pub_get();
   13452:	f7ff f8a1 	bl	12598 <bt_mesh_hb_pub_get>
	if (!pub) {
   13456:	b188      	cbz	r0, 1347c <store_pending+0x17c>
	if (pub->dst == BT_MESH_ADDR_UNASSIGNED) {
   13458:	8c01      	ldrh	r1, [r0, #32]
   1345a:	2900      	cmp	r1, #0
   1345c:	f040 812a 	bne.w	136b4 <store_pending+0x3b4>
		err = settings_delete("bt/mesh/HBPub");
   13460:	4869      	ldr	r0, [pc, #420]	; (13608 <store_pending+0x308>)
   13462:	f010 fb59 	bl	23b18 <settings_delete>
	if (err) {
   13466:	b148      	cbz	r0, 1347c <store_pending+0x17c>
   13468:	495c      	ldr	r1, [pc, #368]	; (135dc <store_pending+0x2dc>)
   1346a:	4b5d      	ldr	r3, [pc, #372]	; (135e0 <store_pending+0x2e0>)
		BT_ERR("Failed to store Heartbeat Publication");
   1346c:	4867      	ldr	r0, [pc, #412]	; (1360c <store_pending+0x30c>)
   1346e:	1ac9      	subs	r1, r1, r3
   13470:	08c9      	lsrs	r1, r1, #3
   13472:	0189      	lsls	r1, r1, #6
   13474:	f041 0101 	orr.w	r1, r1, #1
   13478:	f00f ff98 	bl	233ac <log_0>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_CFG_PENDING)) {
   1347c:	4856      	ldr	r0, [pc, #344]	; (135d8 <store_pending+0x2d8>)
   1347e:	210c      	movs	r1, #12
   13480:	f013 fc9b 	bl	26dba <atomic_test_and_clear_bit>
   13484:	b300      	cbz	r0, 134c8 <store_pending+0x1c8>
   13486:	4854      	ldr	r0, [pc, #336]	; (135d8 <store_pending+0x2d8>)
   13488:	f013 fc7b 	bl	26d82 <atomic_get>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   1348c:	07c3      	lsls	r3, r0, #31
   1348e:	f140 8131 	bpl.w	136f4 <store_pending+0x3f4>
	struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
   13492:	f7ff f889 	bl	125a8 <bt_mesh_cfg_get>
	if (!cfg) {
   13496:	b1b8      	cbz	r0, 134c8 <store_pending+0x1c8>
	val.net_transmit = cfg->net_transmit;
   13498:	6843      	ldr	r3, [r0, #4]
   1349a:	9307      	str	r3, [sp, #28]
	val.gatt_proxy = cfg->gatt_proxy;
   1349c:	8902      	ldrh	r2, [r0, #8]
	val.default_ttl = cfg->default_ttl;
   1349e:	7a83      	ldrb	r3, [r0, #10]
	val.gatt_proxy = cfg->gatt_proxy;
   134a0:	f8ad 2020 	strh.w	r2, [sp, #32]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
   134a4:	485a      	ldr	r0, [pc, #360]	; (13610 <store_pending+0x310>)
	val.default_ttl = cfg->default_ttl;
   134a6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
   134aa:	2207      	movs	r2, #7
   134ac:	a907      	add	r1, sp, #28
   134ae:	f7f0 f8e5 	bl	367c <settings_save_one>
	if (err) {
   134b2:	b148      	cbz	r0, 134c8 <store_pending+0x1c8>
   134b4:	4949      	ldr	r1, [pc, #292]	; (135dc <store_pending+0x2dc>)
   134b6:	4b4a      	ldr	r3, [pc, #296]	; (135e0 <store_pending+0x2e0>)
		BT_ERR("Failed to store configuration value");
   134b8:	4856      	ldr	r0, [pc, #344]	; (13614 <store_pending+0x314>)
   134ba:	1ac9      	subs	r1, r1, r3
   134bc:	08c9      	lsrs	r1, r1, #3
   134be:	0189      	lsls	r1, r1, #6
   134c0:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Failed to clear configuration");
   134c4:	f00f ff72 	bl	233ac <log_0>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_MOD_PENDING)) {
   134c8:	4843      	ldr	r0, [pc, #268]	; (135d8 <store_pending+0x2d8>)
   134ca:	210d      	movs	r1, #13
   134cc:	f013 fc75 	bl	26dba <atomic_test_and_clear_bit>
   134d0:	b118      	cbz	r0, 134da <store_pending+0x1da>
		bt_mesh_model_foreach(store_pending_mod, NULL);
   134d2:	4851      	ldr	r0, [pc, #324]	; (13618 <store_pending+0x318>)
   134d4:	2100      	movs	r1, #0
   134d6:	f7fc f877 	bl	f5c8 <bt_mesh_model_foreach>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_VA_PENDING)) {
   134da:	483f      	ldr	r0, [pc, #252]	; (135d8 <store_pending+0x2d8>)
   134dc:	210e      	movs	r1, #14
   134de:	f013 fc6c 	bl	26dba <atomic_test_and_clear_bit>
   134e2:	b180      	cbz	r0, 13506 <store_pending+0x206>
   134e4:	4c3d      	ldr	r4, [pc, #244]	; (135dc <store_pending+0x2dc>)
   134e6:	4b3e      	ldr	r3, [pc, #248]	; (135e0 <store_pending+0x2e0>)
		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
   134e8:	f8df 813c 	ldr.w	r8, [pc, #316]	; 13628 <store_pending+0x328>
   134ec:	1ae4      	subs	r4, r4, r3
   134ee:	08e4      	lsrs	r4, r4, #3
			BT_ERR("Failed to %s %s value (err %d)",
   134f0:	01a4      	lsls	r4, r4, #6
   134f2:	2700      	movs	r7, #0
   134f4:	f044 0401 	orr.w	r4, r4, #1
	for (i = 0; (lab = get_label(i)) != NULL; i++) {
   134f8:	b2b8      	uxth	r0, r7
   134fa:	f7fe fcaf 	bl	11e5c <get_label>
   134fe:	4605      	mov	r5, r0
   13500:	2800      	cmp	r0, #0
   13502:	f040 8106 	bne.w	13712 <store_pending+0x412>
}
   13506:	b00c      	add	sp, #48	; 0x30
   13508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1350c:	4628      	mov	r0, r5
   1350e:	f013 fc38 	bl	26d82 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13512:	4b32      	ldr	r3, [pc, #200]	; (135dc <store_pending+0x2dc>)
   13514:	4a32      	ldr	r2, [pc, #200]	; (135e0 <store_pending+0x2e0>)
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   13516:	f010 0601 	ands.w	r6, r0, #1
   1351a:	eba3 0302 	sub.w	r3, r3, r2
   1351e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   13522:	d036      	beq.n	13592 <store_pending+0x292>
		BT_ERR("Failed to store RPL %s value", log_strdup(path));
   13524:	019b      	lsls	r3, r3, #6
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
   13526:	f8df 8104 	ldr.w	r8, [pc, #260]	; 1362c <store_pending+0x32c>
   1352a:	f1a5 0608 	sub.w	r6, r5, #8
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   1352e:	2700      	movs	r7, #0
		BT_ERR("Failed to store RPL %s value", log_strdup(path));
   13530:	f043 0401 	orr.w	r4, r3, #1
		if (rpl->store) {
   13534:	f896 32bf 	ldrb.w	r3, [r6, #703]	; 0x2bf
   13538:	b32b      	cbz	r3, 13586 <store_pending+0x286>
			rpl->store = false;
   1353a:	2300      	movs	r3, #0
   1353c:	f886 32bf 	strb.w	r3, [r6, #703]	; 0x2bf
	rpl.seq = entry->seq;
   13540:	9b02      	ldr	r3, [sp, #8]
   13542:	f8d6 22c0 	ldr.w	r2, [r6, #704]	; 0x2c0
   13546:	f362 0317 	bfi	r3, r2, #0, #24
   1354a:	9302      	str	r3, [sp, #8]
	rpl.old_iv = entry->old_iv;
   1354c:	f896 22be 	ldrb.w	r2, [r6, #702]	; 0x2be
   13550:	f3c3 6307 	ubfx	r3, r3, #24, #8
   13554:	f362 0300 	bfi	r3, r2, #0, #1
   13558:	f88d 300b 	strb.w	r3, [sp, #11]
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
   1355c:	4642      	mov	r2, r8
   1355e:	2112      	movs	r1, #18
   13560:	f8b6 32bc 	ldrh.w	r3, [r6, #700]	; 0x2bc
   13564:	a807      	add	r0, sp, #28
   13566:	f00f febd 	bl	232e4 <snprintk>
	err = settings_save_one(path, &rpl, sizeof(rpl));
   1356a:	2204      	movs	r2, #4
   1356c:	a902      	add	r1, sp, #8
   1356e:	a807      	add	r0, sp, #28
   13570:	f7f0 f884 	bl	367c <settings_save_one>
	if (err) {
   13574:	b138      	cbz	r0, 13586 <store_pending+0x286>
		BT_ERR("Failed to store RPL %s value", log_strdup(path));
   13576:	a807      	add	r0, sp, #28
   13578:	f7ee fee2 	bl	2340 <log_strdup>
   1357c:	4622      	mov	r2, r4
   1357e:	4601      	mov	r1, r0
   13580:	4826      	ldr	r0, [pc, #152]	; (1361c <store_pending+0x31c>)
   13582:	f00f ff20 	bl	233c6 <log_1>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   13586:	3701      	adds	r7, #1
   13588:	2f0a      	cmp	r7, #10
   1358a:	f106 0608 	add.w	r6, r6, #8
   1358e:	d1d1      	bne.n	13534 <store_pending+0x234>
   13590:	e6c1      	b.n	13316 <store_pending+0x16>
			BT_ERR("Failed to clear RPL");
   13592:	019b      	lsls	r3, r3, #6
		snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
   13594:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1362c <store_pending+0x32c>
   13598:	f1a5 0708 	sub.w	r7, r5, #8
			BT_ERR("Failed to clear RPL");
   1359c:	f043 0401 	orr.w	r4, r3, #1
		if (!rpl->src) {
   135a0:	f8b7 32bc 	ldrh.w	r3, [r7, #700]	; 0x2bc
   135a4:	b193      	cbz	r3, 135cc <store_pending+0x2cc>
		snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
   135a6:	4642      	mov	r2, r8
   135a8:	2112      	movs	r1, #18
   135aa:	a807      	add	r0, sp, #28
   135ac:	f00f fe9a 	bl	232e4 <snprintk>
		err = settings_delete(path);
   135b0:	a807      	add	r0, sp, #28
   135b2:	f010 fab1 	bl	23b18 <settings_delete>
		if (err) {
   135b6:	b118      	cbz	r0, 135c0 <store_pending+0x2c0>
			BT_ERR("Failed to clear RPL");
   135b8:	4819      	ldr	r0, [pc, #100]	; (13620 <store_pending+0x320>)
   135ba:	4621      	mov	r1, r4
   135bc:	f00f fef6 	bl	233ac <log_0>
		(void)memset(rpl, 0, sizeof(*rpl));
   135c0:	2208      	movs	r2, #8
   135c2:	2100      	movs	r1, #0
   135c4:	f507 702f 	add.w	r0, r7, #700	; 0x2bc
   135c8:	f011 fd8d 	bl	250e6 <memset>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   135cc:	3601      	adds	r6, #1
   135ce:	2e0a      	cmp	r6, #10
   135d0:	f107 0708 	add.w	r7, r7, #8
   135d4:	d1e4      	bne.n	135a0 <store_pending+0x2a0>
   135d6:	e69e      	b.n	13316 <store_pending+0x16>
   135d8:	20006ac0 	.word	0x20006ac0
   135dc:	000289b8 	.word	0x000289b8
   135e0:	00028868 	.word	0x00028868
   135e4:	20001d68 	.word	0x20001d68
   135e8:	20006b4c 	.word	0x20006b4c
   135ec:	0002d5f4 	.word	0x0002d5f4
   135f0:	0002d600 	.word	0x0002d600
   135f4:	20006ab8 	.word	0x20006ab8
   135f8:	0002d636 	.word	0x0002d636
   135fc:	0002d641 	.word	0x0002d641
   13600:	0002d66d 	.word	0x0002d66d
   13604:	0002d679 	.word	0x0002d679
   13608:	0002d692 	.word	0x0002d692
   1360c:	0002d6a0 	.word	0x0002d6a0
   13610:	0002d6c6 	.word	0x0002d6c6
   13614:	0002d6d2 	.word	0x0002d6d2
   13618:	00013175 	.word	0x00013175
   1361c:	0002d589 	.word	0x0002d589
   13620:	0002d5a6 	.word	0x0002d5a6
   13624:	0002d5d7 	.word	0x0002d5d7
   13628:	0002d714 	.word	0x0002d714
   1362c:	0002d57a 	.word	0x0002d57a
				clear_net_key(update->key_idx);
   13630:	f7ff fd46 	bl	130c0 <clear_net_key>
   13634:	e692      	b.n	1335c <store_pending+0x5c>
			if (update->app_key) {
   13636:	b182      	cbz	r2, 1365a <store_pending+0x35a>
				key = bt_mesh_app_key_find(update->key_idx);
   13638:	f7fa ff08 	bl	e44c <bt_mesh_app_key_find>
				if (key) {
   1363c:	b110      	cbz	r0, 13644 <store_pending+0x344>
					store_app_key(key);
   1363e:	f7ff fb3b 	bl	12cb8 <store_app_key>
   13642:	e68b      	b.n	1335c <store_pending+0x5c>
					BT_WARN("AppKeyIndex 0x%03x not found",
   13644:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
   13648:	484d      	ldr	r0, [pc, #308]	; (13780 <store_pending+0x480>)
   1364a:	01b2      	lsls	r2, r6, #6
   1364c:	f042 0202 	orr.w	r2, r2, #2
   13650:	f3c1 010b 	ubfx	r1, r1, #0, #12
					BT_WARN("NetKeyIndex 0x%03x not found",
   13654:	f00f feb7 	bl	233c6 <log_1>
   13658:	e680      	b.n	1335c <store_pending+0x5c>
				sub = bt_mesh_subnet_get(update->key_idx);
   1365a:	f7f9 f883 	bl	c764 <bt_mesh_subnet_get>
				if (sub) {
   1365e:	b110      	cbz	r0, 13666 <store_pending+0x366>
					store_net_key(sub);
   13660:	f7ff fcf6 	bl	13050 <store_net_key>
   13664:	e67a      	b.n	1335c <store_pending+0x5c>
					BT_WARN("NetKeyIndex 0x%03x not found",
   13666:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
   1366a:	01b2      	lsls	r2, r6, #6
   1366c:	f042 0202 	orr.w	r2, r2, #2
   13670:	f3c1 010b 	ubfx	r1, r1, #0, #12
   13674:	4650      	mov	r0, sl
   13676:	e7ed      	b.n	13654 <store_pending+0x354>
	err = settings_delete("bt/mesh/Net");
   13678:	4842      	ldr	r0, [pc, #264]	; (13784 <store_pending+0x484>)
   1367a:	f010 fa4d 	bl	23b18 <settings_delete>
	if (err) {
   1367e:	2800      	cmp	r0, #0
   13680:	f43f ae9b 	beq.w	133ba <store_pending+0xba>
   13684:	4940      	ldr	r1, [pc, #256]	; (13788 <store_pending+0x488>)
   13686:	4b41      	ldr	r3, [pc, #260]	; (1378c <store_pending+0x48c>)
		BT_ERR("Failed to clear Network");
   13688:	4841      	ldr	r0, [pc, #260]	; (13790 <store_pending+0x490>)
   1368a:	1ac9      	subs	r1, r1, r3
   1368c:	08c9      	lsrs	r1, r1, #3
   1368e:	0189      	lsls	r1, r1, #6
   13690:	f041 0101 	orr.w	r1, r1, #1
   13694:	e68f      	b.n	133b6 <store_pending+0xb6>
	err = settings_delete("bt/mesh/IV");
   13696:	483f      	ldr	r0, [pc, #252]	; (13794 <store_pending+0x494>)
   13698:	f010 fa3e 	bl	23b18 <settings_delete>
	if (err) {
   1369c:	2800      	cmp	r0, #0
   1369e:	f43f aeb7 	beq.w	13410 <store_pending+0x110>
   136a2:	4939      	ldr	r1, [pc, #228]	; (13788 <store_pending+0x488>)
   136a4:	4b39      	ldr	r3, [pc, #228]	; (1378c <store_pending+0x48c>)
		BT_ERR("Failed to clear IV");
   136a6:	483c      	ldr	r0, [pc, #240]	; (13798 <store_pending+0x498>)
   136a8:	1ac9      	subs	r1, r1, r3
   136aa:	08c9      	lsrs	r1, r1, #3
   136ac:	0189      	lsls	r1, r1, #6
   136ae:	f041 0101 	orr.w	r1, r1, #1
   136b2:	e6ab      	b.n	1340c <store_pending+0x10c>
		val.indefinite = (pub->count == 0xffff);
   136b4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
		val.dst = pub->dst;
   136b6:	f8ad 101c 	strh.w	r1, [sp, #28]
		val.period = pub->period;
   136ba:	8c81      	ldrh	r1, [r0, #36]	; 0x24
		val.indefinite = (pub->count == 0xffff);
   136bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   136c0:	1a9c      	subs	r4, r3, r2
		val.feat = pub->feat;
   136c2:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
		val.period = pub->period;
   136c4:	f8ad 101e 	strh.w	r1, [sp, #30]
		val.feat = pub->feat;
   136c8:	f8ad 3020 	strh.w	r3, [sp, #32]
		val.net_idx = pub->net_idx;
   136cc:	8d03      	ldrh	r3, [r0, #40]	; 0x28
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   136ce:	4833      	ldr	r0, [pc, #204]	; (1379c <store_pending+0x49c>)
		val.indefinite = (pub->count == 0xffff);
   136d0:	4262      	negs	r2, r4
   136d2:	4162      	adcs	r2, r4
		val.net_idx = pub->net_idx;
   136d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
   136d8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
   136dc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   136e0:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
   136e4:	4313      	orrs	r3, r2
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   136e6:	a907      	add	r1, sp, #28
   136e8:	2208      	movs	r2, #8
		val.net_idx = pub->net_idx;
   136ea:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   136ee:	f7ef ffc5 	bl	367c <settings_save_one>
   136f2:	e6b8      	b.n	13466 <store_pending+0x166>
	err = settings_delete("bt/mesh/Cfg");
   136f4:	482a      	ldr	r0, [pc, #168]	; (137a0 <store_pending+0x4a0>)
   136f6:	f010 fa0f 	bl	23b18 <settings_delete>
	if (err) {
   136fa:	2800      	cmp	r0, #0
   136fc:	f43f aee4 	beq.w	134c8 <store_pending+0x1c8>
   13700:	4921      	ldr	r1, [pc, #132]	; (13788 <store_pending+0x488>)
   13702:	4b22      	ldr	r3, [pc, #136]	; (1378c <store_pending+0x48c>)
		BT_ERR("Failed to clear configuration");
   13704:	4827      	ldr	r0, [pc, #156]	; (137a4 <store_pending+0x4a4>)
   13706:	1ac9      	subs	r1, r1, r3
   13708:	08c9      	lsrs	r1, r1, #3
   1370a:	0189      	lsls	r1, r1, #6
   1370c:	f041 0101 	orr.w	r1, r1, #1
   13710:	e6d8      	b.n	134c4 <store_pending+0x1c4>
		if (!atomic_test_and_clear_bit(lab->flags,
   13712:	2100      	movs	r1, #0
   13714:	f105 0014 	add.w	r0, r5, #20
   13718:	f013 fb4f 	bl	26dba <atomic_test_and_clear_bit>
   1371c:	b1e8      	cbz	r0, 1375a <store_pending+0x45a>
		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
   1371e:	b2bb      	uxth	r3, r7
   13720:	4642      	mov	r2, r8
   13722:	2112      	movs	r1, #18
   13724:	a802      	add	r0, sp, #8
   13726:	f00f fddd 	bl	232e4 <snprintk>
		if (IS_VA_DEL(lab)) {
   1372a:	882b      	ldrh	r3, [r5, #0]
   1372c:	b9bb      	cbnz	r3, 1375e <store_pending+0x45e>
			err = settings_delete(path);
   1372e:	a802      	add	r0, sp, #8
   13730:	f010 f9f2 	bl	23b18 <settings_delete>
			err = settings_save_one(path, &va, sizeof(va));
   13734:	4606      	mov	r6, r0
		if (err) {
   13736:	b180      	cbz	r0, 1375a <store_pending+0x45a>
			BT_ERR("Failed to %s %s value (err %d)",
   13738:	882b      	ldrh	r3, [r5, #0]
   1373a:	491b      	ldr	r1, [pc, #108]	; (137a8 <store_pending+0x4a8>)
   1373c:	4d1b      	ldr	r5, [pc, #108]	; (137ac <store_pending+0x4ac>)
   1373e:	a802      	add	r0, sp, #8
   13740:	2b00      	cmp	r3, #0
   13742:	bf08      	it	eq
   13744:	460d      	moveq	r5, r1
   13746:	f7ee fdfb 	bl	2340 <log_strdup>
   1374a:	f8ad 4000 	strh.w	r4, [sp]
   1374e:	4602      	mov	r2, r0
   13750:	4633      	mov	r3, r6
   13752:	4817      	ldr	r0, [pc, #92]	; (137b0 <store_pending+0x4b0>)
   13754:	4629      	mov	r1, r5
   13756:	f00f fe63 	bl	23420 <log_3>
	for (i = 0; (lab = get_label(i)) != NULL; i++) {
   1375a:	3701      	adds	r7, #1
   1375c:	e6cc      	b.n	134f8 <store_pending+0x1f8>
			va.ref = lab->ref;
   1375e:	f8ad 301c 	strh.w	r3, [sp, #28]
			memcpy(va.uuid, lab->uuid, 16);
   13762:	1d29      	adds	r1, r5, #4
			va.addr = lab->addr;
   13764:	886b      	ldrh	r3, [r5, #2]
   13766:	f8ad 301e 	strh.w	r3, [sp, #30]
			memcpy(va.uuid, lab->uuid, 16);
   1376a:	2210      	movs	r2, #16
   1376c:	a808      	add	r0, sp, #32
   1376e:	f011 fc8f 	bl	25090 <memcpy>
			err = settings_save_one(path, &va, sizeof(va));
   13772:	2214      	movs	r2, #20
   13774:	a907      	add	r1, sp, #28
   13776:	a802      	add	r0, sp, #8
   13778:	f7ef ff80 	bl	367c <settings_save_one>
   1377c:	e7da      	b.n	13734 <store_pending+0x434>
   1377e:	bf00      	nop
   13780:	0002d5ba 	.word	0x0002d5ba
   13784:	0002d5f4 	.word	0x0002d5f4
   13788:	000289b8 	.word	0x000289b8
   1378c:	00028868 	.word	0x00028868
   13790:	0002d61e 	.word	0x0002d61e
   13794:	0002d636 	.word	0x0002d636
   13798:	0002d65a 	.word	0x0002d65a
   1379c:	0002d692 	.word	0x0002d692
   137a0:	0002d6c6 	.word	0x0002d6c6
   137a4:	0002d6f6 	.word	0x0002d6f6
   137a8:	0002d722 	.word	0x0002d722
   137ac:	0002d729 	.word	0x0002d729
   137b0:	0002d72f 	.word	0x0002d72f

000137b4 <iv_set>:
{
   137b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   137b6:	460c      	mov	r4, r1
   137b8:	4610      	mov	r0, r2
   137ba:	4619      	mov	r1, r3
	if (len_rd == 0) {
   137bc:	b98c      	cbnz	r4, 137e2 <iv_set+0x2e>
		bt_mesh.iv_index = 0U;
   137be:	4b22      	ldr	r3, [pc, #136]	; (13848 <iv_set+0x94>)
   137c0:	f843 4b08 	str.w	r4, [r3], #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   137c4:	f3bf 8f5b 	dmb	ish
   137c8:	e853 2f00 	ldrex	r2, [r3]
   137cc:	f022 0204 	bic.w	r2, r2, #4
   137d0:	e843 2100 	strex	r1, r2, [r3]
   137d4:	2900      	cmp	r1, #0
   137d6:	d1f7      	bne.n	137c8 <iv_set+0x14>
   137d8:	f3bf 8f5b 	dmb	ish
}
   137dc:	4620      	mov	r0, r4
   137de:	b003      	add	sp, #12
   137e0:	bd30      	pop	{r4, r5, pc}
	err = mesh_x_set(read_cb, cb_arg, &iv, sizeof(iv));
   137e2:	2305      	movs	r3, #5
   137e4:	466a      	mov	r2, sp
   137e6:	f7fe ffed 	bl	127c4 <mesh_x_set>
	if (err) {
   137ea:	4604      	mov	r4, r0
   137ec:	b150      	cbz	r0, 13804 <iv_set+0x50>
   137ee:	4b17      	ldr	r3, [pc, #92]	; (1384c <iv_set+0x98>)
   137f0:	4917      	ldr	r1, [pc, #92]	; (13850 <iv_set+0x9c>)
		BT_ERR("Failed to set \'iv\'");
   137f2:	4818      	ldr	r0, [pc, #96]	; (13854 <iv_set+0xa0>)
   137f4:	1ac9      	subs	r1, r1, r3
   137f6:	08c9      	lsrs	r1, r1, #3
   137f8:	0189      	lsls	r1, r1, #6
   137fa:	f041 0101 	orr.w	r1, r1, #1
   137fe:	f00f fdd5 	bl	233ac <log_0>
		return err;
   13802:	e7eb      	b.n	137dc <iv_set+0x28>
	bt_mesh.iv_index = iv.iv_index;
   13804:	4d10      	ldr	r5, [pc, #64]	; (13848 <iv_set+0x94>)
   13806:	9b00      	ldr	r3, [sp, #0]
   13808:	602b      	str	r3, [r5, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
   1380a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (val) {
   1380e:	f013 0f01 	tst.w	r3, #1
   13812:	f105 0008 	add.w	r0, r5, #8
   13816:	d009      	beq.n	1382c <iv_set+0x78>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13818:	2104      	movs	r1, #4
   1381a:	f013 faa3 	bl	26d64 <atomic_or>
	bt_mesh.ivu_duration = iv.iv_duration;
   1381e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   13822:	f3c3 0346 	ubfx	r3, r3, #1, #7
   13826:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
	return 0;
   1382a:	e7d7      	b.n	137dc <iv_set+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1382c:	f3bf 8f5b 	dmb	ish
   13830:	e850 3f00 	ldrex	r3, [r0]
   13834:	f023 0304 	bic.w	r3, r3, #4
   13838:	e840 3200 	strex	r2, r3, [r0]
   1383c:	2a00      	cmp	r2, #0
   1383e:	d1f7      	bne.n	13830 <iv_set+0x7c>
   13840:	f3bf 8f5b 	dmb	ish
   13844:	e7eb      	b.n	1381e <iv_set+0x6a>
   13846:	bf00      	nop
   13848:	20006ab8 	.word	0x20006ab8
   1384c:	00028868 	.word	0x00028868
   13850:	000289b8 	.word	0x000289b8
   13854:	0002d74e 	.word	0x0002d74e

00013858 <schedule_store>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13858:	2101      	movs	r1, #1
   1385a:	4081      	lsls	r1, r0
{
   1385c:	b510      	push	{r4, lr}
   1385e:	4818      	ldr	r0, [pc, #96]	; (138c0 <schedule_store+0x68>)
   13860:	f013 fa80 	bl	26d64 <atomic_or>
	if (atomic_get(bt_mesh.flags) & NO_WAIT_PENDING_BITS) {
   13864:	4816      	ldr	r0, [pc, #88]	; (138c0 <schedule_store+0x68>)
   13866:	f013 fa8c 	bl	26d82 <atomic_get>
   1386a:	f410 6fe0 	tst.w	r0, #1792	; 0x700
   1386e:	d120      	bne.n	138b2 <schedule_store+0x5a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13870:	4813      	ldr	r0, [pc, #76]	; (138c0 <schedule_store+0x68>)
   13872:	f013 fa86 	bl	26d82 <atomic_get>
	} else if (atomic_test_bit(bt_mesh.flags, BT_MESH_RPL_PENDING) &&
   13876:	0643      	lsls	r3, r0, #25
   13878:	d505      	bpl.n	13886 <schedule_store+0x2e>
		   (!(atomic_get(bt_mesh.flags) & GENERIC_PENDING_BITS) ||
   1387a:	4811      	ldr	r0, [pc, #68]	; (138c0 <schedule_store+0x68>)
   1387c:	f013 fa81 	bl	26d82 <atomic_get>
	} else if (atomic_test_bit(bt_mesh.flags, BT_MESH_RPL_PENDING) &&
   13880:	f410 5f62 	tst.w	r0, #14464	; 0x3880
   13884:	d017      	beq.n	138b6 <schedule_store+0x5e>
		timeout = K_SECONDS(CONFIG_BT_MESH_STORE_TIMEOUT);
   13886:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   1388a:	480e      	ldr	r0, [pc, #56]	; (138c4 <schedule_store+0x6c>)
   1388c:	f00e fd88 	bl	223a0 <z_timeout_remaining>
			return (u32_t)((t * to_hz + off) / from_hz);
   13890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   13894:	fba0 0103 	umull	r0, r1, r0, r3
   13898:	0bc3      	lsrs	r3, r0, #15
	if (remaining && remaining < timeout) {
   1389a:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   1389e:	d001      	beq.n	138a4 <schedule_store+0x4c>
   138a0:	429c      	cmp	r4, r3
   138a2:	dc0b      	bgt.n	138bc <schedule_store+0x64>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   138a4:	4622      	mov	r2, r4
   138a6:	4908      	ldr	r1, [pc, #32]	; (138c8 <schedule_store+0x70>)
   138a8:	4808      	ldr	r0, [pc, #32]	; (138cc <schedule_store+0x74>)
}
   138aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   138ae:	f00e bb4b 	b.w	21f48 <k_delayed_work_submit_to_queue>
		timeout = K_NO_WAIT;
   138b2:	2400      	movs	r4, #0
   138b4:	e7e9      	b.n	1388a <schedule_store+0x32>
		timeout = K_SECONDS(CONFIG_BT_MESH_RPL_STORE_TIMEOUT);
   138b6:	f241 3488 	movw	r4, #5000	; 0x1388
   138ba:	e7e6      	b.n	1388a <schedule_store+0x32>
}
   138bc:	bd10      	pop	{r4, pc}
   138be:	bf00      	nop
   138c0:	20006ac0 	.word	0x20006ac0
   138c4:	200009b4 	.word	0x200009b4
   138c8:	200009a8 	.word	0x200009a8
   138cc:	20001c08 	.word	0x20001c08

000138d0 <app_key_set>:
{
   138d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   138d2:	460c      	mov	r4, r1
   138d4:	b08b      	sub	sp, #44	; 0x2c
   138d6:	4615      	mov	r5, r2
   138d8:	461f      	mov	r7, r3
	if (!name) {
   138da:	b970      	cbnz	r0, 138fa <app_key_set+0x2a>
   138dc:	4b34      	ldr	r3, [pc, #208]	; (139b0 <app_key_set+0xe0>)
   138de:	4935      	ldr	r1, [pc, #212]	; (139b4 <app_key_set+0xe4>)
		BT_ERR("Insufficient number of arguments");
   138e0:	4835      	ldr	r0, [pc, #212]	; (139b8 <app_key_set+0xe8>)
   138e2:	1ac9      	subs	r1, r1, r3
   138e4:	08c9      	lsrs	r1, r1, #3
   138e6:	0189      	lsls	r1, r1, #6
   138e8:	f041 0101 	orr.w	r1, r1, #1
   138ec:	f00f fd5e 	bl	233ac <log_0>
		return -ENOENT;
   138f0:	f06f 0501 	mvn.w	r5, #1
}
   138f4:	4628      	mov	r0, r5
   138f6:	b00b      	add	sp, #44	; 0x2c
   138f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	app_idx = strtol(name, NULL, 16);
   138fa:	2210      	movs	r2, #16
   138fc:	2100      	movs	r1, #0
   138fe:	f011 faf4 	bl	24eea <strtol>
   13902:	b286      	uxth	r6, r0
	if (len_rd == 0) {
   13904:	b954      	cbnz	r4, 1391c <app_key_set+0x4c>
		app = bt_mesh_app_key_find(app_idx);
   13906:	4630      	mov	r0, r6
   13908:	f7fa fda0 	bl	e44c <bt_mesh_app_key_find>
   1390c:	4605      	mov	r5, r0
		if (app) {
   1390e:	2800      	cmp	r0, #0
   13910:	d0f0      	beq.n	138f4 <app_key_set+0x24>
			bt_mesh_app_key_del(app, false);
   13912:	4621      	mov	r1, r4
   13914:	f7fe fa32 	bl	11d7c <bt_mesh_app_key_del>
		return 0;
   13918:	4625      	mov	r5, r4
   1391a:	e7eb      	b.n	138f4 <app_key_set+0x24>
	err = mesh_x_set(read_cb, cb_arg, &key, sizeof(key));
   1391c:	4628      	mov	r0, r5
   1391e:	2323      	movs	r3, #35	; 0x23
   13920:	aa01      	add	r2, sp, #4
   13922:	4639      	mov	r1, r7
   13924:	f7fe ff4e 	bl	127c4 <mesh_x_set>
	if (err) {
   13928:	4605      	mov	r5, r0
   1392a:	b150      	cbz	r0, 13942 <app_key_set+0x72>
   1392c:	4b20      	ldr	r3, [pc, #128]	; (139b0 <app_key_set+0xe0>)
   1392e:	4921      	ldr	r1, [pc, #132]	; (139b4 <app_key_set+0xe4>)
		BT_ERR("Failed to set \'app-key\'");
   13930:	4822      	ldr	r0, [pc, #136]	; (139bc <app_key_set+0xec>)
   13932:	1ac9      	subs	r1, r1, r3
   13934:	08c9      	lsrs	r1, r1, #3
   13936:	0189      	lsls	r1, r1, #6
   13938:	f041 0101 	orr.w	r1, r1, #1
   1393c:	f00f fd36 	bl	233ac <log_0>
		return err;
   13940:	e7d8      	b.n	138f4 <app_key_set+0x24>
	app = bt_mesh_app_key_find(app_idx);
   13942:	4630      	mov	r0, r6
   13944:	f7fa fd82 	bl	e44c <bt_mesh_app_key_find>
	if (!app) {
   13948:	4604      	mov	r4, r0
   1394a:	b988      	cbnz	r0, 13970 <app_key_set+0xa0>
		app = bt_mesh_app_key_alloc(app_idx);
   1394c:	4630      	mov	r0, r6
   1394e:	f7fe f97b 	bl	11c48 <bt_mesh_app_key_alloc>
	if (!app) {
   13952:	4604      	mov	r4, r0
   13954:	b960      	cbnz	r0, 13970 <app_key_set+0xa0>
   13956:	4b16      	ldr	r3, [pc, #88]	; (139b0 <app_key_set+0xe0>)
   13958:	4916      	ldr	r1, [pc, #88]	; (139b4 <app_key_set+0xe4>)
		BT_ERR("No space for a new app key");
   1395a:	4819      	ldr	r0, [pc, #100]	; (139c0 <app_key_set+0xf0>)
   1395c:	1ac9      	subs	r1, r1, r3
   1395e:	08c9      	lsrs	r1, r1, #3
   13960:	0189      	lsls	r1, r1, #6
   13962:	f041 0101 	orr.w	r1, r1, #1
   13966:	f00f fd21 	bl	233ac <log_0>
		return -ENOMEM;
   1396a:	f06f 050b 	mvn.w	r5, #11
   1396e:	e7c1      	b.n	138f4 <app_key_set+0x24>
	app->net_idx = key.net_idx;
   13970:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   13974:	8023      	strh	r3, [r4, #0]
	memcpy(app->keys[0].val, key.val[0], 16);
   13976:	1da7      	adds	r7, r4, #6
	app->updated = key.updated;
   13978:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1397c:	7123      	strb	r3, [r4, #4]
	app->app_idx = app_idx;
   1397e:	8066      	strh	r6, [r4, #2]
	memcpy(app->keys[0].val, key.val[0], 16);
   13980:	f10d 0107 	add.w	r1, sp, #7
	memcpy(app->keys[1].val, key.val[1], 16);
   13984:	f104 0617 	add.w	r6, r4, #23
	memcpy(app->keys[0].val, key.val[0], 16);
   13988:	2210      	movs	r2, #16
   1398a:	4638      	mov	r0, r7
   1398c:	f011 fb80 	bl	25090 <memcpy>
	memcpy(app->keys[1].val, key.val[1], 16);
   13990:	2210      	movs	r2, #16
   13992:	f10d 0117 	add.w	r1, sp, #23
   13996:	4630      	mov	r0, r6
   13998:	f011 fb7a 	bl	25090 <memcpy>
			const u8_t net_id[16], u32_t iv_index,
			u8_t auth[8]);

static inline int bt_mesh_app_id(const u8_t app_key[16], u8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
   1399c:	1d61      	adds	r1, r4, #5
   1399e:	4638      	mov	r0, r7
   139a0:	f7fb fc8a 	bl	f2b8 <bt_mesh_k4>
   139a4:	f104 0116 	add.w	r1, r4, #22
   139a8:	4630      	mov	r0, r6
   139aa:	f7fb fc85 	bl	f2b8 <bt_mesh_k4>
   139ae:	e7a1      	b.n	138f4 <app_key_set+0x24>
   139b0:	00028868 	.word	0x00028868
   139b4:	000289b8 	.word	0x000289b8
   139b8:	0002a92d 	.word	0x0002a92d
   139bc:	0002d761 	.word	0x0002d761
   139c0:	0002d779 	.word	0x0002d779

000139c4 <mesh_commit>:
{
   139c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (bt_mesh.sub[0].net_idx == BT_MESH_KEY_UNUSED) {
   139c8:	4e47      	ldr	r6, [pc, #284]	; (13ae8 <mesh_commit+0x124>)
   139ca:	f8b6 2110 	ldrh.w	r2, [r6, #272]	; 0x110
   139ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   139d2:	429a      	cmp	r2, r3
   139d4:	f000 8085 	beq.w	13ae2 <mesh_commit+0x11e>
		bt_mesh_proxy_prov_disable(true);
   139d8:	2001      	movs	r0, #1
   139da:	f003 fa71 	bl	16ec0 <bt_mesh_proxy_prov_disable>
   139de:	4c43      	ldr	r4, [pc, #268]	; (13aec <mesh_commit+0x128>)
   139e0:	4b43      	ldr	r3, [pc, #268]	; (13af0 <mesh_commit+0x12c>)
			BT_ERR("Failed to init subnet 0x%03x", sub->net_idx);
   139e2:	f8df a12c 	ldr.w	sl, [pc, #300]	; 13b10 <mesh_commit+0x14c>
   139e6:	1ae4      	subs	r4, r4, r3
   139e8:	08e4      	lsrs	r4, r4, #3
   139ea:	01a4      	lsls	r4, r4, #6
   139ec:	4635      	mov	r5, r6
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   139ee:	f04f 0900 	mov.w	r9, #0
			BT_ERR("Failed to init subnet 0x%03x", sub->net_idx);
   139f2:	f044 0401 	orr.w	r4, r4, #1
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   139f6:	f8b5 2110 	ldrh.w	r2, [r5, #272]	; 0x110
   139fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   139fe:	429a      	cmp	r2, r3
   13a00:	d02f      	beq.n	13a62 <mesh_commit+0x9e>
	err = bt_mesh_net_keys_create(&sub->keys[0], sub->keys[0].net);
   13a02:	f505 7892 	add.w	r8, r5, #292	; 0x124
   13a06:	4641      	mov	r1, r8
   13a08:	4640      	mov	r0, r8
   13a0a:	f7f8 fecb 	bl	c7a4 <bt_mesh_net_keys_create>
	if (err) {
   13a0e:	4607      	mov	r7, r0
   13a10:	b168      	cbz	r0, 13a2e <mesh_commit+0x6a>
		BT_ERR("Unable to generate keys for subnet");
   13a12:	4838      	ldr	r0, [pc, #224]	; (13af4 <mesh_commit+0x130>)
   13a14:	4621      	mov	r1, r4
   13a16:	f00f fcc9 	bl	233ac <log_0>
			BT_ERR("Failed to init subnet 0x%03x", sub->net_idx);
   13a1a:	f8b5 1110 	ldrh.w	r1, [r5, #272]	; 0x110
   13a1e:	4622      	mov	r2, r4
   13a20:	4650      	mov	r0, sl
   13a22:	f00f fcd0 	bl	233c6 <log_1>
   13a26:	e01c      	b.n	13a62 <mesh_commit+0x9e>
   13a28:	f04f 0901 	mov.w	r9, #1
   13a2c:	e7e3      	b.n	139f6 <mesh_commit+0x32>
	if (sub->kr_phase != BT_MESH_KR_NORMAL) {
   13a2e:	f895 3113 	ldrb.w	r3, [r5, #275]	; 0x113
   13a32:	b17b      	cbz	r3, 13a54 <mesh_commit+0x90>
		err = bt_mesh_net_keys_create(&sub->keys[1], sub->keys[1].net);
   13a34:	f205 117d 	addw	r1, r5, #381	; 0x17d
   13a38:	4608      	mov	r0, r1
   13a3a:	f7f8 feb3 	bl	c7a4 <bt_mesh_net_keys_create>
		if (err) {
   13a3e:	b148      	cbz	r0, 13a54 <mesh_commit+0x90>
			BT_ERR("Unable to generate keys for subnet");
   13a40:	4621      	mov	r1, r4
   13a42:	482c      	ldr	r0, [pc, #176]	; (13af4 <mesh_commit+0x130>)
   13a44:	f00f fcb2 	bl	233ac <log_0>
			(void)memset(&sub->keys[0], 0, sizeof(sub->keys[0]));
   13a48:	2259      	movs	r2, #89	; 0x59
   13a4a:	4639      	mov	r1, r7
   13a4c:	4640      	mov	r0, r8
   13a4e:	f011 fb4a 	bl	250e6 <memset>
		if (err) {
   13a52:	e7e2      	b.n	13a1a <mesh_commit+0x56>
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   13a54:	2300      	movs	r3, #0
   13a56:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
	bt_mesh_net_beacon_update(sub);
   13a5a:	f105 00f4 	add.w	r0, r5, #244	; 0xf4
   13a5e:	f7f9 f85b 	bl	cb18 <bt_mesh_net_beacon_update>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   13a62:	35e4      	adds	r5, #228	; 0xe4
   13a64:	f1b9 0f00 	cmp.w	r9, #0
   13a68:	d0de      	beq.n	13a28 <mesh_commit+0x64>
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
   13a6a:	f896 3070 	ldrb.w	r3, [r6, #112]	; 0x70
   13a6e:	2b5f      	cmp	r3, #95	; 0x5f
   13a70:	d804      	bhi.n	13a7c <mesh_commit+0xb8>
   13a72:	4a21      	ldr	r2, [pc, #132]	; (13af8 <mesh_commit+0x134>)
   13a74:	4921      	ldr	r1, [pc, #132]	; (13afc <mesh_commit+0x138>)
   13a76:	4822      	ldr	r0, [pc, #136]	; (13b00 <mesh_commit+0x13c>)
   13a78:	f00e fa66 	bl	21f48 <k_delayed_work_submit_to_queue>
	bt_mesh_model_foreach(commit_mod, NULL);
   13a7c:	4821      	ldr	r0, [pc, #132]	; (13b04 <mesh_commit+0x140>)
   13a7e:	2100      	movs	r1, #0
   13a80:	f7fb fda2 	bl	f5c8 <bt_mesh_model_foreach>
	hb_pub = bt_mesh_hb_pub_get();
   13a84:	f7fe fd88 	bl	12598 <bt_mesh_hb_pub_get>
	if (hb_pub && hb_pub->dst != BT_MESH_ADDR_UNASSIGNED &&
   13a88:	4604      	mov	r4, r0
   13a8a:	b180      	cbz	r0, 13aae <mesh_commit+0xea>
   13a8c:	8c03      	ldrh	r3, [r0, #32]
   13a8e:	b173      	cbz	r3, 13aae <mesh_commit+0xea>
   13a90:	8c43      	ldrh	r3, [r0, #34]	; 0x22
   13a92:	b163      	cbz	r3, 13aae <mesh_commit+0xea>
	    hb_pub->count && hb_pub->period) {
   13a94:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   13a98:	b14b      	cbz	r3, 13aae <mesh_commit+0xea>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13a9a:	2101      	movs	r1, #1
   13a9c:	3008      	adds	r0, #8
   13a9e:	f013 f961 	bl	26d64 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   13aa2:	07c3      	lsls	r3, r0, #31
   13aa4:	d403      	bmi.n	13aae <mesh_commit+0xea>
		k_queue_append(&work_q->queue, work);
   13aa6:	4816      	ldr	r0, [pc, #88]	; (13b00 <mesh_commit+0x13c>)
   13aa8:	4621      	mov	r1, r4
   13aaa:	f014 fc19 	bl	282e0 <k_queue_append>
	cfg = bt_mesh_cfg_get();
   13aae:	f7fe fd7b 	bl	125a8 <bt_mesh_cfg_get>
	if (cfg && stored_cfg.valid) {
   13ab2:	b180      	cbz	r0, 13ad6 <mesh_commit+0x112>
   13ab4:	4b14      	ldr	r3, [pc, #80]	; (13b08 <mesh_commit+0x144>)
   13ab6:	781a      	ldrb	r2, [r3, #0]
   13ab8:	b16a      	cbz	r2, 13ad6 <mesh_commit+0x112>
		cfg->net_transmit = stored_cfg.cfg.net_transmit;
   13aba:	785a      	ldrb	r2, [r3, #1]
   13abc:	7102      	strb	r2, [r0, #4]
		cfg->relay = stored_cfg.cfg.relay;
   13abe:	789a      	ldrb	r2, [r3, #2]
   13ac0:	7142      	strb	r2, [r0, #5]
		cfg->relay_retransmit = stored_cfg.cfg.relay_retransmit;
   13ac2:	78da      	ldrb	r2, [r3, #3]
   13ac4:	7182      	strb	r2, [r0, #6]
		cfg->beacon = stored_cfg.cfg.beacon;
   13ac6:	791a      	ldrb	r2, [r3, #4]
   13ac8:	71c2      	strb	r2, [r0, #7]
		cfg->gatt_proxy = stored_cfg.cfg.gatt_proxy;
   13aca:	795a      	ldrb	r2, [r3, #5]
   13acc:	7202      	strb	r2, [r0, #8]
		cfg->frnd = stored_cfg.cfg.frnd;
   13ace:	799a      	ldrb	r2, [r3, #6]
		cfg->default_ttl = stored_cfg.cfg.default_ttl;
   13ad0:	79db      	ldrb	r3, [r3, #7]
		cfg->frnd = stored_cfg.cfg.frnd;
   13ad2:	7242      	strb	r2, [r0, #9]
		cfg->default_ttl = stored_cfg.cfg.default_ttl;
   13ad4:	7283      	strb	r3, [r0, #10]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13ad6:	2101      	movs	r1, #1
   13ad8:	480c      	ldr	r0, [pc, #48]	; (13b0c <mesh_commit+0x148>)
   13ada:	f013 f943 	bl	26d64 <atomic_or>
	bt_mesh_start();
   13ade:	f7f8 f82d 	bl	bb3c <bt_mesh_start>
}
   13ae2:	2000      	movs	r0, #0
   13ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13ae8:	20006ab8 	.word	0x20006ab8
   13aec:	000289b8 	.word	0x000289b8
   13af0:	00028868 	.word	0x00028868
   13af4:	0002d794 	.word	0x0002d794
   13af8:	05265c00 	.word	0x05265c00
   13afc:	20006b2c 	.word	0x20006b2c
   13b00:	20001c08 	.word	0x20001c08
   13b04:	00012be5 	.word	0x00012be5
   13b08:	20002303 	.word	0x20002303
   13b0c:	20006ac0 	.word	0x20006ac0
   13b10:	0002d7b7 	.word	0x0002d7b7

00013b14 <bt_mesh_store_seq>:
	    (bt_mesh.seq % CONFIG_BT_MESH_SEQ_STORE_RATE)) {
   13b14:	4b03      	ldr	r3, [pc, #12]	; (13b24 <bt_mesh_store_seq+0x10>)
   13b16:	685b      	ldr	r3, [r3, #4]
	if (CONFIG_BT_MESH_SEQ_STORE_RATE &&
   13b18:	065b      	lsls	r3, r3, #25
   13b1a:	d102      	bne.n	13b22 <bt_mesh_store_seq+0xe>
	schedule_store(BT_MESH_SEQ_PENDING);
   13b1c:	200a      	movs	r0, #10
   13b1e:	f7ff be9b 	b.w	13858 <schedule_store>
}
   13b22:	4770      	bx	lr
   13b24:	20006ab8 	.word	0x20006ab8

00013b28 <bt_mesh_model_data_store>:
	schedule_cdb_store(BT_MESH_CDB_KEYS_PENDING);
}

int bt_mesh_model_data_store(struct bt_mesh_model *mod, bool vnd,
			     const void *data, size_t data_len)
{
   13b28:	b570      	push	{r4, r5, r6, lr}
   13b2a:	4605      	mov	r5, r0
   13b2c:	b086      	sub	sp, #24
   13b2e:	4616      	mov	r6, r2
   13b30:	461c      	mov	r4, r3
	char path[20];
	int err;

	encode_mod_path(mod, vnd, "data", path, sizeof(path));
   13b32:	4a16      	ldr	r2, [pc, #88]	; (13b8c <bt_mesh_model_data_store+0x64>)
   13b34:	ab01      	add	r3, sp, #4
   13b36:	f7ff fb07 	bl	13148 <encode_mod_path.constprop.0>

	if (data_len) {
		mod->flags |= BT_MESH_MOD_DATA_PRESENT;
   13b3a:	88eb      	ldrh	r3, [r5, #6]
	if (data_len) {
   13b3c:	b1dc      	cbz	r4, 13b76 <bt_mesh_model_data_store+0x4e>
		mod->flags |= BT_MESH_MOD_DATA_PRESENT;
   13b3e:	f043 0308 	orr.w	r3, r3, #8
   13b42:	80eb      	strh	r3, [r5, #6]
		err = settings_save_one(path, data, data_len);
   13b44:	4622      	mov	r2, r4
   13b46:	4631      	mov	r1, r6
   13b48:	a801      	add	r0, sp, #4
   13b4a:	f7ef fd97 	bl	367c <settings_save_one>
	} else if (mod->flags & BT_MESH_MOD_DATA_PRESENT) {
		mod->flags &= ~BT_MESH_MOD_DATA_PRESENT;
		err = settings_delete(path);
   13b4e:	4604      	mov	r4, r0
	} else {
		/* Nothing to delete */
		err = 0;
	}

	if (err) {
   13b50:	b170      	cbz	r0, 13b70 <bt_mesh_model_data_store+0x48>
   13b52:	4a0f      	ldr	r2, [pc, #60]	; (13b90 <bt_mesh_model_data_store+0x68>)
   13b54:	4d0f      	ldr	r5, [pc, #60]	; (13b94 <bt_mesh_model_data_store+0x6c>)
		BT_ERR("Failed to store %s value", log_strdup(path));
   13b56:	a801      	add	r0, sp, #4
   13b58:	1aad      	subs	r5, r5, r2
   13b5a:	08ed      	lsrs	r5, r5, #3
   13b5c:	f7ee fbf0 	bl	2340 <log_strdup>
   13b60:	01ad      	lsls	r5, r5, #6
   13b62:	f045 0501 	orr.w	r5, r5, #1
   13b66:	4601      	mov	r1, r0
   13b68:	462a      	mov	r2, r5
   13b6a:	480b      	ldr	r0, [pc, #44]	; (13b98 <bt_mesh_model_data_store+0x70>)
   13b6c:	f00f fc2b 	bl	233c6 <log_1>
	} else {
		BT_DBG("Stored %s value", log_strdup(path));
	}
	return err;
}
   13b70:	4620      	mov	r0, r4
   13b72:	b006      	add	sp, #24
   13b74:	bd70      	pop	{r4, r5, r6, pc}
	} else if (mod->flags & BT_MESH_MOD_DATA_PRESENT) {
   13b76:	f013 0408 	ands.w	r4, r3, #8
   13b7a:	d0f9      	beq.n	13b70 <bt_mesh_model_data_store+0x48>
		mod->flags &= ~BT_MESH_MOD_DATA_PRESENT;
   13b7c:	f023 0308 	bic.w	r3, r3, #8
   13b80:	80eb      	strh	r3, [r5, #6]
		err = settings_delete(path);
   13b82:	a801      	add	r0, sp, #4
   13b84:	f00f ffc8 	bl	23b18 <settings_delete>
   13b88:	e7e1      	b.n	13b4e <bt_mesh_model_data_store+0x26>
   13b8a:	bf00      	nop
   13b8c:	0002b3e5 	.word	0x0002b3e5
   13b90:	00028868 	.word	0x00028868
   13b94:	000289b8 	.word	0x000289b8
   13b98:	0002d561 	.word	0x0002d561

00013b9c <bt_mesh_settings_init>:

void bt_mesh_settings_init(void)
{
	k_delayed_work_init(&pending_store, store_pending);
   13b9c:	4901      	ldr	r1, [pc, #4]	; (13ba4 <bt_mesh_settings_init+0x8>)
   13b9e:	4802      	ldr	r0, [pc, #8]	; (13ba8 <bt_mesh_settings_init+0xc>)
   13ba0:	f014 bc72 	b.w	28488 <k_delayed_work_init>
   13ba4:	00013301 	.word	0x00013301
   13ba8:	200009a8 	.word	0x200009a8

00013bac <lpn_set_state>:
	}
}
#endif /* CONFIG_BT_MESH_DEBUG_LOW_POWER */

static inline void lpn_set_state(int state)
{
   13bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13bae:	4b0f      	ldr	r3, [pc, #60]	; (13bec <lpn_set_state+0x40>)
   13bb0:	4a0f      	ldr	r2, [pc, #60]	; (13bf0 <lpn_set_state+0x44>)
#if defined(CONFIG_BT_MESH_DEBUG_LOW_POWER)
	BT_DBG("%s -> %s", state2str(bt_mesh.lpn.state), state2str(state));
   13bb2:	4c10      	ldr	r4, [pc, #64]	; (13bf4 <lpn_set_state+0x48>)
   13bb4:	4910      	ldr	r1, [pc, #64]	; (13bf8 <lpn_set_state+0x4c>)
   13bb6:	1a9b      	subs	r3, r3, r2
{
   13bb8:	4605      	mov	r5, r0
   13bba:	08db      	lsrs	r3, r3, #3
   13bbc:	f894 0020 	ldrb.w	r0, [r4, #32]
	BT_DBG("%s -> %s", state2str(bt_mesh.lpn.state), state2str(state));
   13bc0:	019b      	lsls	r3, r3, #6
   13bc2:	2808      	cmp	r0, #8
   13bc4:	f043 0304 	orr.w	r3, r3, #4
	switch (state) {
   13bc8:	bf98      	it	ls
   13bca:	f851 2020 	ldrls.w	r2, [r1, r0, lsl #2]
	BT_DBG("%s -> %s", state2str(bt_mesh.lpn.state), state2str(state));
   13bce:	f8ad 3000 	strh.w	r3, [sp]
   13bd2:	bf88      	it	hi
   13bd4:	4a09      	ldrhi	r2, [pc, #36]	; (13bfc <lpn_set_state+0x50>)
   13bd6:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
   13bda:	4809      	ldr	r0, [pc, #36]	; (13c00 <lpn_set_state+0x54>)
   13bdc:	4909      	ldr	r1, [pc, #36]	; (13c04 <lpn_set_state+0x58>)
   13bde:	f00f fc1f 	bl	23420 <log_3>
#endif
	bt_mesh.lpn.state = state;
   13be2:	f884 5020 	strb.w	r5, [r4, #32]
}
   13be6:	b003      	add	sp, #12
   13be8:	bd30      	pop	{r4, r5, pc}
   13bea:	bf00      	nop
   13bec:	00028980 	.word	0x00028980
   13bf0:	00028868 	.word	0x00028868
   13bf4:	20006ab8 	.word	0x20006ab8
   13bf8:	00029384 	.word	0x00029384
   13bfc:	0002d7f7 	.word	0x0002d7f7
   13c00:	0002d801 	.word	0x0002d801
   13c04:	0002de16 	.word	0x0002de16

00013c08 <k_delayed_work_submit>:
{
   13c08:	460a      	mov	r2, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13c0a:	4601      	mov	r1, r0
   13c0c:	4801      	ldr	r0, [pc, #4]	; (13c14 <k_delayed_work_submit+0xc>)
   13c0e:	f00e b99b 	b.w	21f48 <k_delayed_work_submit_to_queue>
   13c12:	bf00      	nop
   13c14:	20001c08 	.word	0x20001c08

00013c18 <send_friend_poll>:
static const struct bt_mesh_send_cb req_sent_cb = {
	.start = req_sent,
};

static int send_friend_poll(void)
{
   13c18:	b530      	push	{r4, r5, lr}
	struct bt_mesh_msg_ctx ctx = {
		.net_idx     = bt_mesh.sub[0].net_idx,
   13c1a:	4d2d      	ldr	r5, [pc, #180]	; (13cd0 <send_friend_poll+0xb8>)
{
   13c1c:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   13c1e:	f8b5 3110 	ldrh.w	r3, [r5, #272]	; 0x110
   13c22:	f8ad 3010 	strh.w	r3, [sp, #16]
   13c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13c2a:	2400      	movs	r4, #0
   13c2c:	f8ad 3012 	strh.w	r3, [sp, #18]
   13c30:	8cab      	ldrh	r3, [r5, #36]	; 0x24
		.app_idx     = BT_MESH_KEY_UNUSED,
		.addr        = bt_mesh.lpn.frnd,
		.send_ttl    = 0,
	};
	struct bt_mesh_net_tx tx = {
   13c32:	9409      	str	r4, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
   13c34:	e9cd 4405 	strd	r4, r4, [sp, #20]
   13c38:	f8ad 3014 	strh.w	r3, [sp, #20]
	struct bt_mesh_net_tx tx = {
   13c3c:	f105 03f4 	add.w	r3, r5, #244	; 0xf4
   13c40:	9307      	str	r3, [sp, #28]
   13c42:	ab04      	add	r3, sp, #16
   13c44:	9308      	str	r3, [sp, #32]
		.sub = &bt_mesh.sub[0],
		.ctx = &ctx,
		.src = bt_mesh_primary_addr(),
   13c46:	f7fb fdd5 	bl	f7f4 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   13c4a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   13c4e:	4a21      	ldr	r2, [pc, #132]	; (13cd4 <send_friend_poll+0xbc>)
   13c50:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
   13c54:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
   13c58:	f443 7384 	orr.w	r3, r3, #264	; 0x108
   13c5c:	f043 0301 	orr.w	r3, r3, #1
   13c60:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
		.xmit = POLL_XMIT,
		.friend_cred = true,
	};
	struct bt_mesh_lpn *lpn = &bt_mesh.lpn;
	u8_t fsn = lpn->fsn;
   13c64:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
	int err;

	BT_DBG("lpn->sent_req 0x%02x", lpn->sent_req);
   13c68:	491b      	ldr	r1, [pc, #108]	; (13cd8 <send_friend_poll+0xc0>)
   13c6a:	481c      	ldr	r0, [pc, #112]	; (13cdc <send_friend_poll+0xc4>)
	u8_t fsn = lpn->fsn;
   13c6c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   13c70:	f88d 300f 	strb.w	r3, [sp, #15]
   13c74:	4b1a      	ldr	r3, [pc, #104]	; (13ce0 <send_friend_poll+0xc8>)
   13c76:	1a9b      	subs	r3, r3, r2
   13c78:	08db      	lsrs	r3, r3, #3
	BT_DBG("lpn->sent_req 0x%02x", lpn->sent_req);
   13c7a:	019b      	lsls	r3, r3, #6
   13c7c:	f043 0304 	orr.w	r3, r3, #4
   13c80:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   13c84:	f00f fbb3 	bl	233ee <log_2>

	if (lpn->sent_req) {
   13c88:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   13c8c:	b14b      	cbz	r3, 13ca2 <send_friend_poll+0x8a>
		if (lpn->sent_req != TRANS_CTL_OP_FRIEND_POLL) {
   13c8e:	2b01      	cmp	r3, #1
   13c90:	d005      	beq.n	13c9e <send_friend_poll+0x86>
			lpn->pending_poll = 1U;
   13c92:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   13c96:	f043 0302 	orr.w	r3, r3, #2
   13c9a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
		}

		return 0;
   13c9e:	4620      	mov	r0, r4
   13ca0:	e013      	b.n	13cca <send_friend_poll+0xb2>
	}

	err = bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_POLL, &fsn, 1,
   13ca2:	9301      	str	r3, [sp, #4]
   13ca4:	4b0f      	ldr	r3, [pc, #60]	; (13ce4 <send_friend_poll+0xcc>)
   13ca6:	9300      	str	r3, [sp, #0]
   13ca8:	2301      	movs	r3, #1
   13caa:	f10d 020f 	add.w	r2, sp, #15
   13cae:	4619      	mov	r1, r3
   13cb0:	a807      	add	r0, sp, #28
   13cb2:	f012 fc43 	bl	2653c <bt_mesh_ctl_send>
			       &req_sent_cb, NULL);
	if (err == 0) {
   13cb6:	b940      	cbnz	r0, 13cca <send_friend_poll+0xb2>
		lpn->pending_poll = 0U;
   13cb8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   13cbc:	f360 0341 	bfi	r3, r0, #1, #1
   13cc0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
		lpn->sent_req = TRANS_CTL_OP_FRIEND_POLL;
   13cc4:	2301      	movs	r3, #1
   13cc6:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	}

	return err;
}
   13cca:	b00b      	add	sp, #44	; 0x2c
   13ccc:	bd30      	pop	{r4, r5, pc}
   13cce:	bf00      	nop
   13cd0:	20006ab8 	.word	0x20006ab8
   13cd4:	00028868 	.word	0x00028868
   13cd8:	0002de60 	.word	0x0002de60
   13cdc:	0002d80e 	.word	0x0002d80e
   13ce0:	00028980 	.word	0x00028980
   13ce4:	000293b8 	.word	0x000293b8

00013ce8 <friend_req_sent>:
{
   13ce8:	b508      	push	{r3, lr}
	if (err) {
   13cea:	b159      	cbz	r1, 13d04 <friend_req_sent+0x1c>
   13cec:	4b0b      	ldr	r3, [pc, #44]	; (13d1c <friend_req_sent+0x34>)
   13cee:	4a0c      	ldr	r2, [pc, #48]	; (13d20 <friend_req_sent+0x38>)
		BT_ERR("Sending Friend Request failed (err %d)", err);
   13cf0:	480c      	ldr	r0, [pc, #48]	; (13d24 <friend_req_sent+0x3c>)
   13cf2:	1ad2      	subs	r2, r2, r3
   13cf4:	08d2      	lsrs	r2, r2, #3
   13cf6:	0192      	lsls	r2, r2, #6
}
   13cf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Sending Friend Request failed (err %d)", err);
   13cfc:	f042 0201 	orr.w	r2, r2, #1
   13d00:	f00f bb61 	b.w	233c6 <log_1>
	lpn->adv_duration = duration;
   13d04:	4b08      	ldr	r3, [pc, #32]	; (13d28 <friend_req_sent+0x40>)
		k_delayed_work_submit(&lpn->timer, FRIEND_REQ_WAIT);
   13d06:	2164      	movs	r1, #100	; 0x64
	lpn->adv_duration = duration;
   13d08:	8658      	strh	r0, [r3, #50]	; 0x32
		k_delayed_work_submit(&lpn->timer, FRIEND_REQ_WAIT);
   13d0a:	f103 0034 	add.w	r0, r3, #52	; 0x34
   13d0e:	f7ff ff7b 	bl	13c08 <k_delayed_work_submit>
}
   13d12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lpn_set_state(BT_MESH_LPN_REQ_WAIT);
   13d16:	2004      	movs	r0, #4
   13d18:	f7ff bf48 	b.w	13bac <lpn_set_state>
   13d1c:	00028868 	.word	0x00028868
   13d20:	00028980 	.word	0x00028980
   13d24:	0002d827 	.word	0x0002d827
   13d28:	20006ab8 	.word	0x20006ab8

00013d2c <poll_timeout.constprop.0>:
	}

	sub_update(TRANS_CTL_OP_FRIEND_SUB_REM);
}

static s32_t poll_timeout(struct bt_mesh_lpn *lpn)
   13d2c:	b510      	push	{r4, lr}
{
	/* If we're waiting for segment acks keep polling at high freq */
	if (bt_mesh_tx_in_progress()) {
   13d2e:	f7fa fb81 	bl	e434 <bt_mesh_tx_in_progress>
   13d32:	4c18      	ldr	r4, [pc, #96]	; (13d94 <poll_timeout.constprop.0+0x68>)
   13d34:	b168      	cbz	r0, 13d52 <poll_timeout.constprop.0+0x26>
		return MIN(POLL_TIMEOUT_MAX(lpn), K_SECONDS(1));
   13d36:	8e60      	ldrh	r0, [r4, #50]	; 0x32
   13d38:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   13d3c:	4418      	add	r0, r3
   13d3e:	f5c0 50e4 	rsb	r0, r0, #7296	; 0x1c80
   13d42:	3004      	adds	r0, #4
   13d44:	0080      	lsls	r0, r0, #2
   13d46:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   13d4a:	bf28      	it	cs
   13d4c:	f44f 707a 	movcs.w	r0, #1000	; 0x3e8
	}

	BT_DBG("Poll Timeout is %ums", lpn->poll_timeout);

	return lpn->poll_timeout;
}
   13d50:	bd10      	pop	{r4, pc}
	if (lpn->poll_timeout < POLL_TIMEOUT_MAX(lpn)) {
   13d52:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
   13d56:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   13d58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   13d5a:	440b      	add	r3, r1
   13d5c:	f5c3 53e4 	rsb	r3, r3, #7296	; 0x1c80
   13d60:	3304      	adds	r3, #4
   13d62:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   13d66:	ea4f 0183 	mov.w	r1, r3, lsl #2
   13d6a:	da04      	bge.n	13d76 <poll_timeout.constprop.0+0x4a>
		lpn->poll_timeout *= 2;
   13d6c:	0052      	lsls	r2, r2, #1
		lpn->poll_timeout = MIN(lpn->poll_timeout,
   13d6e:	428a      	cmp	r2, r1
   13d70:	bfd4      	ite	le
   13d72:	62a2      	strle	r2, [r4, #40]	; 0x28
   13d74:	62a1      	strgt	r1, [r4, #40]	; 0x28
   13d76:	4a08      	ldr	r2, [pc, #32]	; (13d98 <poll_timeout.constprop.0+0x6c>)
   13d78:	4b08      	ldr	r3, [pc, #32]	; (13d9c <poll_timeout.constprop.0+0x70>)
	BT_DBG("Poll Timeout is %ums", lpn->poll_timeout);
   13d7a:	4809      	ldr	r0, [pc, #36]	; (13da0 <poll_timeout.constprop.0+0x74>)
   13d7c:	4909      	ldr	r1, [pc, #36]	; (13da4 <poll_timeout.constprop.0+0x78>)
   13d7e:	1a9b      	subs	r3, r3, r2
   13d80:	08db      	lsrs	r3, r3, #3
   13d82:	019b      	lsls	r3, r3, #6
   13d84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   13d86:	f043 0304 	orr.w	r3, r3, #4
   13d8a:	f00f fb30 	bl	233ee <log_2>
	return lpn->poll_timeout;
   13d8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   13d90:	e7de      	b.n	13d50 <poll_timeout.constprop.0+0x24>
   13d92:	bf00      	nop
   13d94:	20006ab8 	.word	0x20006ab8
   13d98:	00028868 	.word	0x00028868
   13d9c:	00028980 	.word	0x00028980
   13da0:	0002d84e 	.word	0x0002d84e
   13da4:	0002df1c 	.word	0x0002df1c

00013da8 <friend_response_received.constprop.0>:
   13da8:	4a13      	ldr	r2, [pc, #76]	; (13df8 <friend_response_received.constprop.0+0x50>)
   13daa:	4b14      	ldr	r3, [pc, #80]	; (13dfc <friend_response_received.constprop.0+0x54>)
	BT_DBG("lpn->sent_req 0x%02x", lpn->sent_req);
   13dac:	4914      	ldr	r1, [pc, #80]	; (13e00 <friend_response_received.constprop.0+0x58>)
   13dae:	4815      	ldr	r0, [pc, #84]	; (13e04 <friend_response_received.constprop.0+0x5c>)
   13db0:	1a9b      	subs	r3, r3, r2
static void friend_response_received(struct bt_mesh_lpn *lpn)
   13db2:	b510      	push	{r4, lr}
   13db4:	08db      	lsrs	r3, r3, #3
	BT_DBG("lpn->sent_req 0x%02x", lpn->sent_req);
   13db6:	4c14      	ldr	r4, [pc, #80]	; (13e08 <friend_response_received.constprop.0+0x60>)
   13db8:	019b      	lsls	r3, r3, #6
   13dba:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   13dbe:	f043 0304 	orr.w	r3, r3, #4
   13dc2:	f00f fb14 	bl	233ee <log_2>
	if (lpn->sent_req == TRANS_CTL_OP_FRIEND_POLL) {
   13dc6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	k_delayed_work_cancel(&lpn->timer);
   13dca:	4810      	ldr	r0, [pc, #64]	; (13e0c <friend_response_received.constprop.0+0x64>)
	if (lpn->sent_req == TRANS_CTL_OP_FRIEND_POLL) {
   13dcc:	2b01      	cmp	r3, #1
		lpn->fsn++;
   13dce:	bf02      	ittt	eq
   13dd0:	f894 302c 	ldrbeq.w	r3, [r4, #44]	; 0x2c
   13dd4:	f083 0308 	eoreq.w	r3, r3, #8
   13dd8:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
	k_delayed_work_cancel(&lpn->timer);
   13ddc:	f00e f944 	bl	22068 <k_delayed_work_cancel>
	bt_mesh_scan_disable();
   13de0:	f7f8 f8ee 	bl	bfc0 <bt_mesh_scan_disable>
	lpn_set_state(BT_MESH_LPN_ESTABLISHED);
   13de4:	2006      	movs	r0, #6
   13de6:	f7ff fee1 	bl	13bac <lpn_set_state>
	lpn->req_attempts = 0U;
   13dea:	2300      	movs	r3, #0
   13dec:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	lpn->sent_req = 0U;
   13df0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   13df4:	bd10      	pop	{r4, pc}
   13df6:	bf00      	nop
   13df8:	00028868 	.word	0x00028868
   13dfc:	00028980 	.word	0x00028980
   13e00:	0002de71 	.word	0x0002de71
   13e04:	0002d80e 	.word	0x0002d80e
   13e08:	20006ab8 	.word	0x20006ab8
   13e0c:	20006aec 	.word	0x20006aec

00013e10 <send_friend_req.constprop.0>:
static int send_friend_req(struct bt_mesh_lpn *lpn)
   13e10:	b570      	push	{r4, r5, r6, lr}
		.net_idx  = bt_mesh.sub[0].net_idx,
   13e12:	4d28      	ldr	r5, [pc, #160]	; (13eb4 <send_friend_req.constprop.0+0xa4>)
static int send_friend_req(struct bt_mesh_lpn *lpn)
   13e14:	b08c      	sub	sp, #48	; 0x30
	const struct bt_mesh_comp *comp = bt_mesh_comp_get();
   13e16:	f7fb ff6d 	bl	fcf4 <bt_mesh_comp_get>
	struct bt_mesh_msg_ctx ctx = {
   13e1a:	f8b5 3110 	ldrh.w	r3, [r5, #272]	; 0x110
   13e1e:	f8ad 3018 	strh.w	r3, [sp, #24]
   13e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13e26:	2400      	movs	r4, #0
   13e28:	f8ad 301a 	strh.w	r3, [sp, #26]
   13e2c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   13e30:	e9cd 4407 	strd	r4, r4, [sp, #28]
   13e34:	f8ad 301c 	strh.w	r3, [sp, #28]
	struct bt_mesh_net_tx tx = {
   13e38:	f105 03f4 	add.w	r3, r5, #244	; 0xf4
   13e3c:	9309      	str	r3, [sp, #36]	; 0x24
   13e3e:	ab06      	add	r3, sp, #24
	const struct bt_mesh_comp *comp = bt_mesh_comp_get();
   13e40:	4606      	mov	r6, r0
	struct bt_mesh_net_tx tx = {
   13e42:	930a      	str	r3, [sp, #40]	; 0x28
   13e44:	940b      	str	r4, [sp, #44]	; 0x2c
		.src = bt_mesh_primary_addr(),
   13e46:	f7fb fcd5 	bl	f7f4 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   13e4a:	2309      	movs	r3, #9
   13e4c:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	struct bt_mesh_ctl_friend_req req = {
   13e50:	f246 4301 	movw	r3, #25601	; 0x6401
   13e54:	f8ad 300c 	strh.w	r3, [sp, #12]
   13e58:	4b17      	ldr	r3, [pc, #92]	; (13eb8 <send_friend_req.constprop.0+0xa8>)
	struct bt_mesh_net_tx tx = {
   13e5a:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
	struct bt_mesh_ctl_friend_req req = {
   13e5e:	881a      	ldrh	r2, [r3, #0]
   13e60:	f8ad 200e 	strh.w	r2, [sp, #14]
		.prev_addr   = sys_cpu_to_be16(lpn->old_friend),
   13e64:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
	struct bt_mesh_ctl_friend_req req = {
   13e66:	789b      	ldrb	r3, [r3, #2]
   13e68:	f88d 3010 	strb.w	r3, [sp, #16]
		.prev_addr   = sys_cpu_to_be16(lpn->old_friend),
   13e6c:	0213      	lsls	r3, r2, #8
	struct bt_mesh_ctl_friend_req req = {
   13e6e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		.lpn_counter = sys_cpu_to_be16(lpn->counter),
   13e72:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
	struct bt_mesh_ctl_friend_req req = {
   13e74:	f8ad 3011 	strh.w	r3, [sp, #17]
   13e78:	68b3      	ldr	r3, [r6, #8]
   13e7a:	f88d 3013 	strb.w	r3, [sp, #19]
		.lpn_counter = sys_cpu_to_be16(lpn->counter),
   13e7e:	0213      	lsls	r3, r2, #8
   13e80:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	struct bt_mesh_ctl_friend_req req = {
   13e84:	f8ad 3014 	strh.w	r3, [sp, #20]
   13e88:	4a0c      	ldr	r2, [pc, #48]	; (13ebc <send_friend_req.constprop.0+0xac>)
   13e8a:	4b0d      	ldr	r3, [pc, #52]	; (13ec0 <send_friend_req.constprop.0+0xb0>)
	BT_DBG("");
   13e8c:	490d      	ldr	r1, [pc, #52]	; (13ec4 <send_friend_req.constprop.0+0xb4>)
   13e8e:	480e      	ldr	r0, [pc, #56]	; (13ec8 <send_friend_req.constprop.0+0xb8>)
   13e90:	1ad2      	subs	r2, r2, r3
   13e92:	08d2      	lsrs	r2, r2, #3
   13e94:	0192      	lsls	r2, r2, #6
   13e96:	f042 0204 	orr.w	r2, r2, #4
   13e9a:	f00f fa94 	bl	233c6 <log_1>
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_REQ, &req,
   13e9e:	4b0b      	ldr	r3, [pc, #44]	; (13ecc <send_friend_req.constprop.0+0xbc>)
   13ea0:	9300      	str	r3, [sp, #0]
   13ea2:	9401      	str	r4, [sp, #4]
   13ea4:	230a      	movs	r3, #10
   13ea6:	aa03      	add	r2, sp, #12
   13ea8:	2103      	movs	r1, #3
   13eaa:	a809      	add	r0, sp, #36	; 0x24
   13eac:	f012 fb46 	bl	2653c <bt_mesh_ctl_send>
}
   13eb0:	b00c      	add	sp, #48	; 0x30
   13eb2:	bd70      	pop	{r4, r5, r6, pc}
   13eb4:	20006ab8 	.word	0x20006ab8
   13eb8:	00028adc 	.word	0x00028adc
   13ebc:	00028980 	.word	0x00028980
   13ec0:	00028868 	.word	0x00028868
   13ec4:	0002de47 	.word	0x0002de47
   13ec8:	000299a3 	.word	0x000299a3
   13ecc:	000293b0 	.word	0x000293b0

00013ed0 <clear_friendship>:
{
   13ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ed4:	b08a      	sub	sp, #40	; 0x28
   13ed6:	460f      	mov	r7, r1
   13ed8:	4606      	mov	r6, r0
   13eda:	4d50      	ldr	r5, [pc, #320]	; (1401c <clear_friendship+0x14c>)
   13edc:	4c50      	ldr	r4, [pc, #320]	; (14020 <clear_friendship+0x150>)
	struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
   13ede:	f7fe fb63 	bl	125a8 <bt_mesh_cfg_get>
   13ee2:	4b50      	ldr	r3, [pc, #320]	; (14024 <clear_friendship+0x154>)
	BT_DBG("force %u disable %u", force, disable);
   13ee4:	4950      	ldr	r1, [pc, #320]	; (14028 <clear_friendship+0x158>)
   13ee6:	1aed      	subs	r5, r5, r3
   13ee8:	08ed      	lsrs	r5, r5, #3
   13eea:	01ad      	lsls	r5, r5, #6
   13eec:	f045 0504 	orr.w	r5, r5, #4
	struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
   13ef0:	4680      	mov	r8, r0
	BT_DBG("force %u disable %u", force, disable);
   13ef2:	f8ad 5000 	strh.w	r5, [sp]
   13ef6:	484d      	ldr	r0, [pc, #308]	; (1402c <clear_friendship+0x15c>)
   13ef8:	463b      	mov	r3, r7
   13efa:	4632      	mov	r2, r6
   13efc:	f00f fa90 	bl	23420 <log_3>
	if (!force && lpn->established && !lpn->clear_success &&
   13f00:	2e00      	cmp	r6, #0
   13f02:	d148      	bne.n	13f96 <clear_friendship+0xc6>
   13f04:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   13f08:	f003 0330 	and.w	r3, r3, #48	; 0x30
   13f0c:	2b10      	cmp	r3, #16
   13f0e:	d142      	bne.n	13f96 <clear_friendship+0xc6>
   13f10:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   13f14:	2b01      	cmp	r3, #1
   13f16:	d83e      	bhi.n	13f96 <clear_friendship+0xc6>
	struct bt_mesh_msg_ctx ctx = {
   13f18:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
   13f1c:	f8ad 3010 	strh.w	r3, [sp, #16]
   13f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13f24:	f8ad 3012 	strh.w	r3, [sp, #18]
   13f28:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	struct bt_mesh_net_tx tx = {
   13f2a:	9609      	str	r6, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
   13f2c:	e9cd 6605 	strd	r6, r6, [sp, #20]
   13f30:	f8ad 3014 	strh.w	r3, [sp, #20]
	struct bt_mesh_net_tx tx = {
   13f34:	f104 03f4 	add.w	r3, r4, #244	; 0xf4
   13f38:	9307      	str	r3, [sp, #28]
   13f3a:	ab04      	add	r3, sp, #16
   13f3c:	9308      	str	r3, [sp, #32]
		.src = bt_mesh_primary_addr(),
   13f3e:	f7fb fc59 	bl	f7f4 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   13f42:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   13f46:	f7fd fffd 	bl	11f44 <bt_mesh_net_transmit_get>
		.lpn_addr    = sys_cpu_to_be16(tx.src),
   13f4a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
	BT_DBG("");
   13f4e:	4938      	ldr	r1, [pc, #224]	; (14030 <clear_friendship+0x160>)
	struct bt_mesh_net_tx tx = {
   13f50:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
		.lpn_addr    = sys_cpu_to_be16(tx.src),
   13f54:	0213      	lsls	r3, r2, #8
   13f56:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		.lpn_counter = sys_cpu_to_be16(bt_mesh.lpn.counter),
   13f5a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
	struct bt_mesh_ctl_friend_clear req = {
   13f5c:	f8ad 300c 	strh.w	r3, [sp, #12]
		.lpn_counter = sys_cpu_to_be16(bt_mesh.lpn.counter),
   13f60:	0213      	lsls	r3, r2, #8
   13f62:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	BT_DBG("");
   13f66:	4833      	ldr	r0, [pc, #204]	; (14034 <clear_friendship+0x164>)
	struct bt_mesh_ctl_friend_clear req = {
   13f68:	f8ad 300e 	strh.w	r3, [sp, #14]
	BT_DBG("");
   13f6c:	462a      	mov	r2, r5
   13f6e:	f00f fa2a 	bl	233c6 <log_1>
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR, &req,
   13f72:	4b31      	ldr	r3, [pc, #196]	; (14038 <clear_friendship+0x168>)
   13f74:	9300      	str	r3, [sp, #0]
   13f76:	9601      	str	r6, [sp, #4]
   13f78:	2304      	movs	r3, #4
   13f7a:	aa03      	add	r2, sp, #12
   13f7c:	2105      	movs	r1, #5
   13f7e:	a807      	add	r0, sp, #28
   13f80:	f012 fadc 	bl	2653c <bt_mesh_ctl_send>
		lpn->disable = disable;
   13f84:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   13f88:	f367 0382 	bfi	r3, r7, #2, #1
   13f8c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
   13f90:	b00a      	add	sp, #40	; 0x28
   13f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_mesh_rx_reset();
   13f96:	f7fa ff89 	bl	eeac <bt_mesh_rx_reset>
	k_delayed_work_cancel(&lpn->timer);
   13f9a:	4828      	ldr	r0, [pc, #160]	; (1403c <clear_friendship+0x16c>)
   13f9c:	f00e f864 	bl	22068 <k_delayed_work_cancel>
	friend_cred_del(bt_mesh.sub[0].net_idx, lpn->frnd);
   13fa0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   13fa2:	f8b4 0110 	ldrh.w	r0, [r4, #272]	; 0x110
   13fa6:	f7f8 fd5b 	bl	ca60 <friend_cred_del>
	if (lpn->clear_success) {
   13faa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   13fae:	069a      	lsls	r2, r3, #26
		lpn->old_friend = lpn->frnd;
   13fb0:	bf54      	ite	pl
   13fb2:	8ca3      	ldrhpl	r3, [r4, #36]	; 0x24
		lpn->old_friend = BT_MESH_ADDR_UNASSIGNED;
   13fb4:	2300      	movmi	r3, #0
   13fb6:	8623      	strh	r3, [r4, #48]	; 0x30
	if (lpn_cb && lpn->frnd != BT_MESH_ADDR_UNASSIGNED) {
   13fb8:	4b21      	ldr	r3, [pc, #132]	; (14040 <clear_friendship+0x170>)
   13fba:	681b      	ldr	r3, [r3, #0]
   13fbc:	b11b      	cbz	r3, 13fc6 <clear_friendship+0xf6>
   13fbe:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   13fc0:	b108      	cbz	r0, 13fc6 <clear_friendship+0xf6>
		lpn_cb(lpn->frnd, false);
   13fc2:	2100      	movs	r1, #0
   13fc4:	4798      	blx	r3
	lpn->sent_req = 0U;
   13fc6:	2300      	movs	r3, #0
   13fc8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	lpn->frnd = BT_MESH_ADDR_UNASSIGNED;
   13fcc:	6263      	str	r3, [r4, #36]	; 0x24
	lpn->disable = 0U;
   13fce:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
	group_zero(lpn->added);
   13fd0:	481c      	ldr	r0, [pc, #112]	; (14044 <clear_friendship+0x174>)
	lpn->disable = 0U;
   13fd2:	f003 03c3 	and.w	r3, r3, #195	; 0xc3
   13fd6:	85a3      	strh	r3, [r4, #44]	; 0x2c
	group_zero(lpn->added);
   13fd8:	f012 ffdc 	bl	26f94 <group_zero>
	group_zero(lpn->pending);
   13fdc:	481a      	ldr	r0, [pc, #104]	; (14048 <clear_friendship+0x178>)
   13fde:	f012 ffd9 	bl	26f94 <group_zero>
	group_zero(lpn->to_remove);
   13fe2:	481a      	ldr	r0, [pc, #104]	; (1404c <clear_friendship+0x17c>)
   13fe4:	f012 ffd6 	bl	26f94 <group_zero>
	lpn->groups_changed = 1U;
   13fe8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   13fec:	f043 0301 	orr.w	r3, r3, #1
   13ff0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	if (cfg->hb_pub.feat & BT_MESH_FEAT_LOW_POWER) {
   13ff4:	f8b8 3032 	ldrh.w	r3, [r8, #50]	; 0x32
   13ff8:	071b      	lsls	r3, r3, #28
   13ffa:	d501      	bpl.n	14000 <clear_friendship+0x130>
		bt_mesh_heartbeat_send();
   13ffc:	f7fa ff9a 	bl	ef34 <bt_mesh_heartbeat_send>
	if (disable) {
   14000:	b11f      	cbz	r7, 1400a <clear_friendship+0x13a>
		lpn_set_state(BT_MESH_LPN_DISABLED);
   14002:	2000      	movs	r0, #0
   14004:	f7ff fdd2 	bl	13bac <lpn_set_state>
		return;
   14008:	e7c2      	b.n	13f90 <clear_friendship+0xc0>
	lpn_set_state(BT_MESH_LPN_ENABLED);
   1400a:	2003      	movs	r0, #3
   1400c:	f7ff fdce 	bl	13bac <lpn_set_state>
	k_delayed_work_submit(&lpn->timer, FRIEND_REQ_RETRY_TIMEOUT);
   14010:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   14014:	4809      	ldr	r0, [pc, #36]	; (1403c <clear_friendship+0x16c>)
   14016:	f7ff fdf7 	bl	13c08 <k_delayed_work_submit>
   1401a:	e7b9      	b.n	13f90 <clear_friendship+0xc0>
   1401c:	00028980 	.word	0x00028980
   14020:	20006ab8 	.word	0x20006ab8
   14024:	00028868 	.word	0x00028868
   14028:	0002de36 	.word	0x0002de36
   1402c:	0002d867 	.word	0x0002d867
   14030:	0002de24 	.word	0x0002de24
   14034:	000299a3 	.word	0x000299a3
   14038:	000293a8 	.word	0x000293a8
   1403c:	20006aec 	.word	0x20006aec
   14040:	200009c8 	.word	0x200009c8
   14044:	20006b1c 	.word	0x20006b1c
   14048:	20006b20 	.word	0x20006b20
   1404c:	20006b24 	.word	0x20006b24

00014050 <friend_clear_sent>:
{
   14050:	b538      	push	{r3, r4, r5, lr}
	lpn->req_attempts++;
   14052:	4c16      	ldr	r4, [pc, #88]	; (140ac <friend_clear_sent+0x5c>)
{
   14054:	4605      	mov	r5, r0
	bt_mesh_scan_enable();
   14056:	f7f7 ff79 	bl	bf4c <bt_mesh_scan_enable>
	lpn->req_attempts++;
   1405a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1405e:	3301      	adds	r3, #1
   14060:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err) {
   14064:	b1b5      	cbz	r5, 14094 <friend_clear_sent+0x44>
   14066:	4b12      	ldr	r3, [pc, #72]	; (140b0 <friend_clear_sent+0x60>)
   14068:	4a12      	ldr	r2, [pc, #72]	; (140b4 <friend_clear_sent+0x64>)
		BT_ERR("Sending Friend Request failed (err %d)", err);
   1406a:	4813      	ldr	r0, [pc, #76]	; (140b8 <friend_clear_sent+0x68>)
   1406c:	1ad2      	subs	r2, r2, r3
   1406e:	08d2      	lsrs	r2, r2, #3
   14070:	0192      	lsls	r2, r2, #6
   14072:	4629      	mov	r1, r5
   14074:	f042 0201 	orr.w	r2, r2, #1
   14078:	f00f f9a5 	bl	233c6 <log_1>
		lpn_set_state(BT_MESH_LPN_ENABLED);
   1407c:	2003      	movs	r0, #3
   1407e:	f7ff fd95 	bl	13bac <lpn_set_state>
		clear_friendship(false, lpn->disable);
   14082:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   14086:	2000      	movs	r0, #0
}
   14088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		clear_friendship(false, lpn->disable);
   1408c:	f3c1 0180 	ubfx	r1, r1, #2, #1
   14090:	f7ff bf1e 	b.w	13ed0 <clear_friendship>
	lpn_set_state(BT_MESH_LPN_CLEAR);
   14094:	2001      	movs	r0, #1
   14096:	f7ff fd89 	bl	13bac <lpn_set_state>
	k_delayed_work_submit(&lpn->timer, FRIEND_REQ_TIMEOUT);
   1409a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1409e:	f240 414c 	movw	r1, #1100	; 0x44c
}
   140a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_delayed_work_submit(&lpn->timer, FRIEND_REQ_TIMEOUT);
   140a6:	f7ff bdaf 	b.w	13c08 <k_delayed_work_submit>
   140aa:	bf00      	nop
   140ac:	20006ab8 	.word	0x20006ab8
   140b0:	00028868 	.word	0x00028868
   140b4:	00028980 	.word	0x00028980
   140b8:	0002d827 	.word	0x0002d827

000140bc <req_sent>:
{
   140bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("req 0x%02x duration %u err %d state %s",
   140be:	4c1e      	ldr	r4, [pc, #120]	; (14138 <req_sent+0x7c>)
   140c0:	4a1e      	ldr	r2, [pc, #120]	; (1413c <req_sent+0x80>)
   140c2:	4b1f      	ldr	r3, [pc, #124]	; (14140 <req_sent+0x84>)
   140c4:	4d1f      	ldr	r5, [pc, #124]	; (14144 <req_sent+0x88>)
{
   140c6:	b087      	sub	sp, #28
   140c8:	460f      	mov	r7, r1
	BT_DBG("req 0x%02x duration %u err %d state %s",
   140ca:	9201      	str	r2, [sp, #4]
   140cc:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   140d0:	9104      	str	r1, [sp, #16]
   140d2:	e9cd 2002 	strd	r2, r0, [sp, #8]
   140d6:	f894 2020 	ldrb.w	r2, [r4, #32]
   140da:	2a08      	cmp	r2, #8
   140dc:	bf96      	itet	ls
   140de:	491a      	ldrls	r1, [pc, #104]	; (14148 <req_sent+0x8c>)
   140e0:	4a1a      	ldrhi	r2, [pc, #104]	; (1414c <req_sent+0x90>)
   140e2:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   140e6:	9205      	str	r2, [sp, #20]
   140e8:	1aed      	subs	r5, r5, r3
   140ea:	08ed      	lsrs	r5, r5, #3
   140ec:	01ad      	lsls	r5, r5, #6
{
   140ee:	4606      	mov	r6, r0
	BT_DBG("req 0x%02x duration %u err %d state %s",
   140f0:	f045 0304 	orr.w	r3, r5, #4
   140f4:	4816      	ldr	r0, [pc, #88]	; (14150 <req_sent+0x94>)
   140f6:	2205      	movs	r2, #5
   140f8:	a901      	add	r1, sp, #4
   140fa:	f00f f9ad 	bl	23458 <log_n>
	if (err) {
   140fe:	b16f      	cbz	r7, 1411c <req_sent+0x60>
		BT_ERR("Sending request failed (err %d)", err);
   14100:	4814      	ldr	r0, [pc, #80]	; (14154 <req_sent+0x98>)
   14102:	f045 0201 	orr.w	r2, r5, #1
   14106:	4639      	mov	r1, r7
   14108:	f00f f95d 	bl	233c6 <log_1>
		lpn->sent_req = 0U;
   1410c:	2300      	movs	r3, #0
		group_zero(lpn->pending);
   1410e:	4812      	ldr	r0, [pc, #72]	; (14158 <req_sent+0x9c>)
		lpn->sent_req = 0U;
   14110:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
		group_zero(lpn->pending);
   14114:	f012 ff3e 	bl	26f94 <group_zero>
}
   14118:	b007      	add	sp, #28
   1411a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	lpn->req_attempts++;
   1411c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	lpn->adv_duration = duration;
   14120:	8666      	strh	r6, [r4, #50]	; 0x32
	lpn->req_attempts++;
   14122:	3301      	adds	r3, #1
		lpn_set_state(BT_MESH_LPN_RECV_DELAY);
   14124:	2007      	movs	r0, #7
	lpn->req_attempts++;
   14126:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		lpn_set_state(BT_MESH_LPN_RECV_DELAY);
   1412a:	f7ff fd3f 	bl	13bac <lpn_set_state>
		k_delayed_work_submit(&lpn->timer,
   1412e:	215a      	movs	r1, #90	; 0x5a
   14130:	480a      	ldr	r0, [pc, #40]	; (1415c <req_sent+0xa0>)
   14132:	f7ff fd69 	bl	13c08 <k_delayed_work_submit>
   14136:	e7ef      	b.n	14118 <req_sent+0x5c>
   14138:	20006ab8 	.word	0x20006ab8
   1413c:	0002de57 	.word	0x0002de57
   14140:	00028868 	.word	0x00028868
   14144:	00028980 	.word	0x00028980
   14148:	00029384 	.word	0x00029384
   1414c:	0002d7f7 	.word	0x0002d7f7
   14150:	0002d87f 	.word	0x0002d87f
   14154:	0002d8aa 	.word	0x0002d8aa
   14158:	20006b20 	.word	0x20006b20
   1415c:	20006aec 	.word	0x20006aec

00014160 <sub_update>:
{
   14160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14164:	4f54      	ldr	r7, [pc, #336]	; (142b8 <sub_update+0x158>)
   14166:	f3bf 8f5b 	dmb	ish
   1416a:	463c      	mov	r4, r7
   1416c:	b08f      	sub	sp, #60	; 0x3c
   1416e:	f854 3964 	ldr.w	r3, [r4], #-100
   14172:	9302      	str	r3, [sp, #8]
   14174:	f3bf 8f5b 	dmb	ish
	struct bt_mesh_msg_ctx ctx = {
   14178:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
   1417c:	f8ad 3020 	strh.w	r3, [sp, #32]
   14180:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14184:	f04f 0800 	mov.w	r8, #0
   14188:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   1418c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	struct bt_mesh_net_tx tx = {
   1418e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
	struct bt_mesh_msg_ctx ctx = {
   14192:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
   14196:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	struct bt_mesh_net_tx tx = {
   1419a:	f107 0390 	add.w	r3, r7, #144	; 0x90
   1419e:	930b      	str	r3, [sp, #44]	; 0x2c
   141a0:	ab08      	add	r3, sp, #32
{
   141a2:	4606      	mov	r6, r0
	struct bt_mesh_net_tx tx = {
   141a4:	930c      	str	r3, [sp, #48]	; 0x30
		.src = bt_mesh_primary_addr(),
   141a6:	f7fb fb25 	bl	f7f4 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   141aa:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   141ae:	4d43      	ldr	r5, [pc, #268]	; (142bc <sub_update+0x15c>)
	BT_DBG("op 0x%02x sent_req 0x%02x", op, lpn->sent_req);
   141b0:	4943      	ldr	r1, [pc, #268]	; (142c0 <sub_update+0x160>)
	struct bt_mesh_net_tx tx = {
   141b2:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
   141b6:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
   141ba:	f443 7384 	orr.w	r3, r3, #264	; 0x108
   141be:	f043 0301 	orr.w	r3, r3, #1
   141c2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   141c6:	4b3f      	ldr	r3, [pc, #252]	; (142c4 <sub_update+0x164>)
	BT_DBG("op 0x%02x sent_req 0x%02x", op, lpn->sent_req);
   141c8:	483f      	ldr	r0, [pc, #252]	; (142c8 <sub_update+0x168>)
   141ca:	1aed      	subs	r5, r5, r3
   141cc:	08ed      	lsrs	r5, r5, #3
   141ce:	01ad      	lsls	r5, r5, #6
   141d0:	f045 0304 	orr.w	r3, r5, #4
   141d4:	f8ad 3000 	strh.w	r3, [sp]
   141d8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   141dc:	4632      	mov	r2, r6
   141de:	f00f f91f 	bl	23420 <log_3>
	if (lpn->sent_req) {
   141e2:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
   141e6:	2900      	cmp	r1, #0
   141e8:	d164      	bne.n	142b4 <sub_update+0x154>
   141ea:	f104 0854 	add.w	r8, r4, #84	; 0x54
	for (i = 0, g = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   141ee:	468a      	mov	sl, r1
   141f0:	4689      	mov	r9, r1
		atomic_set_bit(lpn->pending, i);
   141f2:	f104 0b68 	add.w	fp, r4, #104	; 0x68
		if (lpn->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   141f6:	f838 2b02 	ldrh.w	r2, [r8], #2
   141fa:	b312      	cbz	r2, 14242 <sub_update+0xe2>
		if (op == TRANS_CTL_OP_FRIEND_SUB_ADD) {
   141fc:	2e07      	cmp	r6, #7
			if (atomic_test_bit(lpn->added, i)) {
   141fe:	4651      	mov	r1, sl
		if (op == TRANS_CTL_OP_FRIEND_SUB_ADD) {
   14200:	d11a      	bne.n	14238 <sub_update+0xd8>
			if (atomic_test_bit(lpn->added, i)) {
   14202:	4638      	mov	r0, r7
   14204:	f012 fed2 	bl	26fac <atomic_test_bit>
   14208:	b9d8      	cbnz	r0, 14242 <sub_update+0xe2>
	return popcount(atomic_get(target));
   1420a:	9802      	ldr	r0, [sp, #8]
   1420c:	f7eb ffd0 	bl	1b0 <__popcountsi2>
		if (added_count + g >= lpn->queue_size) {
   14210:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   14214:	4448      	add	r0, r9
   14216:	4290      	cmp	r0, r2
   14218:	d319      	bcc.n	1424e <sub_update+0xee>
			BT_WARN("Friend Queue Size exceeded");
   1421a:	482c      	ldr	r0, [pc, #176]	; (142cc <sub_update+0x16c>)
   1421c:	f045 0102 	orr.w	r1, r5, #2
   14220:	f00f f8c4 	bl	233ac <log_0>
	if (g == 0) {
   14224:	f1b9 0f00 	cmp.w	r9, #0
   14228:	d127      	bne.n	1427a <sub_update+0x11a>
		group_zero(lpn->pending);
   1422a:	4829      	ldr	r0, [pc, #164]	; (142d0 <sub_update+0x170>)
   1422c:	f012 feb2 	bl	26f94 <group_zero>
		return false;
   14230:	2000      	movs	r0, #0
}
   14232:	b00f      	add	sp, #60	; 0x3c
   14234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!atomic_test_bit(lpn->to_remove, i)) {
   14238:	4826      	ldr	r0, [pc, #152]	; (142d4 <sub_update+0x174>)
   1423a:	f012 feb7 	bl	26fac <atomic_test_bit>
   1423e:	2800      	cmp	r0, #0
   14240:	d1e3      	bne.n	1420a <sub_update+0xaa>
	for (i = 0, g = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   14242:	f10a 0a01 	add.w	sl, sl, #1
   14246:	f1ba 0f08 	cmp.w	sl, #8
   1424a:	d1d4      	bne.n	141f6 <sub_update+0x96>
   1424c:	e7ea      	b.n	14224 <sub_update+0xc4>
		req.addr_list[g++] = sys_cpu_to_be16(lpn->groups[i]);
   1424e:	f838 cc02 	ldrh.w	ip, [r8, #-2]
   14252:	ab0e      	add	r3, sp, #56	; 0x38
   14254:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   14258:	ea4f 200c 	mov.w	r0, ip, lsl #8
   1425c:	f109 0201 	add.w	r2, r9, #1
   14260:	ea40 201c 	orr.w	r0, r0, ip, lsr #8
   14264:	9203      	str	r2, [sp, #12]
		atomic_set_bit(lpn->pending, i);
   14266:	4651      	mov	r1, sl
		req.addr_list[g++] = sys_cpu_to_be16(lpn->groups[i]);
   14268:	f823 0c23 	strh.w	r0, [r3, #-35]
		atomic_set_bit(lpn->pending, i);
   1426c:	4658      	mov	r0, fp
   1426e:	f012 fe83 	bl	26f78 <atomic_set_bit>
		if (g == ARRAY_SIZE(req.addr_list)) {
   14272:	9a03      	ldr	r2, [sp, #12]
   14274:	2a05      	cmp	r2, #5
   14276:	4691      	mov	r9, r2
   14278:	d1e3      	bne.n	14242 <sub_update+0xe2>
	req.xact = lpn->xact_next++;
   1427a:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   1427e:	f88d 2014 	strb.w	r2, [sp, #20]
   14282:	1c51      	adds	r1, r2, #1
	if (bt_mesh_ctl_send(&tx, op, &req, 1 + g * 2,
   14284:	2200      	movs	r2, #0
	req.xact = lpn->xact_next++;
   14286:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
	if (bt_mesh_ctl_send(&tx, op, &req, 1 + g * 2,
   1428a:	ea4f 0349 	mov.w	r3, r9, lsl #1
   1428e:	9201      	str	r2, [sp, #4]
   14290:	4a11      	ldr	r2, [pc, #68]	; (142d8 <sub_update+0x178>)
   14292:	9200      	str	r2, [sp, #0]
   14294:	3301      	adds	r3, #1
   14296:	aa05      	add	r2, sp, #20
   14298:	4631      	mov	r1, r6
   1429a:	a80b      	add	r0, sp, #44	; 0x2c
   1429c:	f012 f94e 	bl	2653c <bt_mesh_ctl_send>
   142a0:	2800      	cmp	r0, #0
   142a2:	dbc2      	blt.n	1422a <sub_update+0xca>
	lpn->xact_pending = req.xact;
   142a4:	f89d 3014 	ldrb.w	r3, [sp, #20]
   142a8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	lpn->sent_req = op;
   142ac:	f884 6023 	strb.w	r6, [r4, #35]	; 0x23
	return true;
   142b0:	2001      	movs	r0, #1
   142b2:	e7be      	b.n	14232 <sub_update+0xd2>
		return false;
   142b4:	4640      	mov	r0, r8
   142b6:	e7bc      	b.n	14232 <sub_update+0xd2>
   142b8:	20006b1c 	.word	0x20006b1c
   142bc:	00028980 	.word	0x00028980
   142c0:	0002ded9 	.word	0x0002ded9
   142c4:	00028868 	.word	0x00028868
   142c8:	0002d8ca 	.word	0x0002d8ca
   142cc:	0002d8e8 	.word	0x0002d8e8
   142d0:	20006b20 	.word	0x20006b20
   142d4:	20006b24 	.word	0x20006b24
   142d8:	000293b8 	.word	0x000293b8

000142dc <lpn_timeout>:
{
   142dc:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("state: %s", state2str(lpn->state));
   142de:	4c67      	ldr	r4, [pc, #412]	; (1447c <lpn_timeout+0x1a0>)
   142e0:	4b67      	ldr	r3, [pc, #412]	; (14480 <lpn_timeout+0x1a4>)
   142e2:	f894 2020 	ldrb.w	r2, [r4, #32]
   142e6:	4d67      	ldr	r5, [pc, #412]	; (14484 <lpn_timeout+0x1a8>)
   142e8:	4867      	ldr	r0, [pc, #412]	; (14488 <lpn_timeout+0x1ac>)
   142ea:	2a08      	cmp	r2, #8
   142ec:	eba5 0503 	sub.w	r5, r5, r3
   142f0:	bf96      	itet	ls
   142f2:	4966      	ldrls	r1, [pc, #408]	; (1448c <lpn_timeout+0x1b0>)
   142f4:	4a66      	ldrhi	r2, [pc, #408]	; (14490 <lpn_timeout+0x1b4>)
   142f6:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   142fa:	4966      	ldr	r1, [pc, #408]	; (14494 <lpn_timeout+0x1b8>)
   142fc:	08ed      	lsrs	r5, r5, #3
   142fe:	01ad      	lsls	r5, r5, #6
   14300:	f045 0304 	orr.w	r3, r5, #4
   14304:	f00f f873 	bl	233ee <log_2>
	switch (lpn->state) {
   14308:	f894 3020 	ldrb.w	r3, [r4, #32]
   1430c:	2b08      	cmp	r3, #8
   1430e:	f200 80a3 	bhi.w	14458 <lpn_timeout+0x17c>
   14312:	e8df f003 	tbb	[pc, r3]
   14316:	05a0      	.short	0x05a0
   14318:	2a1d190e 	.word	0x2a1d190e
   1431c:	6b41      	.short	0x6b41
   1431e:	77          	.byte	0x77
   1431f:	00          	.byte	0x00
		clear_friendship(false, bt_mesh.lpn.disable);
   14320:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   14324:	f3c1 0180 	ubfx	r1, r1, #2, #1
}
   14328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_friendship(false, bt_mesh.lpn.disable);
   1432c:	2000      	movs	r0, #0
   1432e:	f7ff bdcf 	b.w	13ed0 <clear_friendship>
		BT_DBG("Starting to look for Friend nodes");
   14332:	4958      	ldr	r1, [pc, #352]	; (14494 <lpn_timeout+0x1b8>)
   14334:	4858      	ldr	r0, [pc, #352]	; (14498 <lpn_timeout+0x1bc>)
   14336:	f045 0204 	orr.w	r2, r5, #4
   1433a:	f00f f844 	bl	233c6 <log_1>
		lpn_set_state(BT_MESH_LPN_ENABLED);
   1433e:	2003      	movs	r0, #3
   14340:	f7ff fc34 	bl	13bac <lpn_set_state>
			bt_mesh_scan_disable();
   14344:	f7f7 fe3c 	bl	bfc0 <bt_mesh_scan_disable>
}
   14348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		send_friend_req(lpn);
   1434c:	f7ff bd60 	b.w	13e10 <send_friend_req.constprop.0>
		bt_mesh_scan_enable();
   14350:	f7f7 fdfc 	bl	bf4c <bt_mesh_scan_enable>
				      lpn->adv_duration + FRIEND_REQ_SCAN);
   14354:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		k_delayed_work_submit(&lpn->timer,
   14356:	4851      	ldr	r0, [pc, #324]	; (1449c <lpn_timeout+0x1c0>)
   14358:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   1435c:	f7ff fc54 	bl	13c08 <k_delayed_work_submit>
		lpn_set_state(BT_MESH_LPN_WAIT_OFFER);
   14360:	2005      	movs	r0, #5
}
   14362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lpn_set_state(BT_MESH_LPN_WAIT_UPDATE);
   14366:	f7ff bc21 	b.w	13bac <lpn_set_state>
		BT_WARN("No acceptable Friend Offers received");
   1436a:	f045 0102 	orr.w	r1, r5, #2
   1436e:	484c      	ldr	r0, [pc, #304]	; (144a0 <lpn_timeout+0x1c4>)
   14370:	f00f f81c 	bl	233ac <log_0>
			bt_mesh_scan_disable();
   14374:	f7f7 fe24 	bl	bfc0 <bt_mesh_scan_disable>
		lpn->counter++;
   14378:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		lpn_set_state(BT_MESH_LPN_ENABLED);
   1437a:	2003      	movs	r0, #3
		lpn->counter++;
   1437c:	3301      	adds	r3, #1
   1437e:	85e3      	strh	r3, [r4, #46]	; 0x2e
		lpn_set_state(BT_MESH_LPN_ENABLED);
   14380:	f7ff fc14 	bl	13bac <lpn_set_state>
		lpn->sent_req = 0U;
   14384:	2300      	movs	r3, #0
   14386:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
		k_delayed_work_submit(&lpn->timer, FRIEND_REQ_RETRY_TIMEOUT);
   1438a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
}
   1438e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_delayed_work_submit(&lpn->timer, POLL_RETRY_TIMEOUT);
   14392:	4842      	ldr	r0, [pc, #264]	; (1449c <lpn_timeout+0x1c0>)
   14394:	f7ff bc38 	b.w	13c08 <k_delayed_work_submit>
		if (lpn->req_attempts < REQ_ATTEMPTS(lpn)) {
   14398:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   1439c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1439e:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
   143a2:	4413      	add	r3, r2
   143a4:	f5c3 53e4 	rsb	r3, r3, #7296	; 0x1c80
   143a8:	3304      	adds	r3, #4
   143aa:	f640 32b7 	movw	r2, #2999	; 0xbb7
   143ae:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   143b2:	bf2c      	ite	cs
   143b4:	2302      	movcs	r3, #2
   143b6:	2304      	movcc	r3, #4
   143b8:	4299      	cmp	r1, r3
   143ba:	da0e      	bge.n	143da <lpn_timeout+0xfe>
			u8_t req = lpn->sent_req;
   143bc:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
			lpn->sent_req = 0U;
   143c0:	2300      	movs	r3, #0
			if (!req || req == TRANS_CTL_OP_FRIEND_POLL) {
   143c2:	2801      	cmp	r0, #1
			lpn->sent_req = 0U;
   143c4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
			if (!req || req == TRANS_CTL_OP_FRIEND_POLL) {
   143c8:	d803      	bhi.n	143d2 <lpn_timeout+0xf6>
}
   143ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				send_friend_poll();
   143ce:	f7ff bc23 	b.w	13c18 <send_friend_poll>
}
   143d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				sub_update(req);
   143d6:	f7ff bec3 	b.w	14160 <sub_update>
		BT_ERR("No response from Friend after %u retries",
   143da:	4832      	ldr	r0, [pc, #200]	; (144a4 <lpn_timeout+0x1c8>)
   143dc:	f045 0201 	orr.w	r2, r5, #1
   143e0:	f00e fff1 	bl	233c6 <log_1>
		lpn->req_attempts = 0U;
   143e4:	2100      	movs	r1, #0
   143e6:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
		clear_friendship(false, false);
   143ea:	e79d      	b.n	14328 <lpn_timeout+0x4c>
				      lpn->recv_win);
   143ec:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
				      lpn->adv_duration + SCAN_LATENCY +
   143f0:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		k_delayed_work_submit(&lpn->timer,
   143f2:	482a      	ldr	r0, [pc, #168]	; (1449c <lpn_timeout+0x1c0>)
				      lpn->adv_duration + SCAN_LATENCY +
   143f4:	4419      	add	r1, r3
		k_delayed_work_submit(&lpn->timer,
   143f6:	310a      	adds	r1, #10
   143f8:	f7ff fc06 	bl	13c08 <k_delayed_work_submit>
		bt_mesh_scan_enable();
   143fc:	f7f7 fda6 	bl	bf4c <bt_mesh_scan_enable>
		lpn_set_state(BT_MESH_LPN_WAIT_UPDATE);
   14400:	2008      	movs	r0, #8
   14402:	e7ae      	b.n	14362 <lpn_timeout+0x86>
	if (lpn->established) {
   14404:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   14408:	f013 0610 	ands.w	r6, r3, #16
   1440c:	d00b      	beq.n	14426 <lpn_timeout+0x14a>
		BT_WARN("No response from Friend during ReceiveWindow");
   1440e:	f045 0102 	orr.w	r1, r5, #2
   14412:	4825      	ldr	r0, [pc, #148]	; (144a8 <lpn_timeout+0x1cc>)
   14414:	f00e ffca 	bl	233ac <log_0>
		bt_mesh_scan_disable();
   14418:	f7f7 fdd2 	bl	bfc0 <bt_mesh_scan_disable>
		lpn_set_state(BT_MESH_LPN_ESTABLISHED);
   1441c:	2006      	movs	r0, #6
   1441e:	f7ff fbc5 	bl	13bac <lpn_set_state>
		k_delayed_work_submit(&lpn->timer, POLL_RETRY_TIMEOUT);
   14422:	2164      	movs	r1, #100	; 0x64
   14424:	e7b3      	b.n	1438e <lpn_timeout+0xb2>
			bt_mesh_scan_disable();
   14426:	f7f7 fdcb 	bl	bfc0 <bt_mesh_scan_disable>
		if (lpn->req_attempts < 6) {
   1442a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1442e:	2b05      	cmp	r3, #5
   14430:	d906      	bls.n	14440 <lpn_timeout+0x164>
		BT_ERR("Timed out waiting for first Friend Update");
   14432:	f045 0101 	orr.w	r1, r5, #1
   14436:	481d      	ldr	r0, [pc, #116]	; (144ac <lpn_timeout+0x1d0>)
   14438:	f00e ffb8 	bl	233ac <log_0>
		clear_friendship(false, false);
   1443c:	2100      	movs	r1, #0
   1443e:	e773      	b.n	14328 <lpn_timeout+0x4c>
			BT_WARN("Retrying first Friend Poll");
   14440:	481b      	ldr	r0, [pc, #108]	; (144b0 <lpn_timeout+0x1d4>)
   14442:	f045 0102 	orr.w	r1, r5, #2
   14446:	f00e ffb1 	bl	233ac <log_0>
			lpn->sent_req = 0U;
   1444a:	f884 6023 	strb.w	r6, [r4, #35]	; 0x23
			if (send_friend_poll() == 0) {
   1444e:	f7ff fbe3 	bl	13c18 <send_friend_poll>
   14452:	2800      	cmp	r0, #0
   14454:	d1ed      	bne.n	14432 <lpn_timeout+0x156>
}
   14456:	bd70      	pop	{r4, r5, r6, pc}
		__ASSERT(0, "Unhandled LPN state");
   14458:	4916      	ldr	r1, [pc, #88]	; (144b4 <lpn_timeout+0x1d8>)
   1445a:	4a17      	ldr	r2, [pc, #92]	; (144b8 <lpn_timeout+0x1dc>)
   1445c:	4817      	ldr	r0, [pc, #92]	; (144bc <lpn_timeout+0x1e0>)
   1445e:	f240 3323 	movw	r3, #803	; 0x323
   14462:	f00e ff32 	bl	232ca <printk>
   14466:	4816      	ldr	r0, [pc, #88]	; (144c0 <lpn_timeout+0x1e4>)
   14468:	f00e ff2f 	bl	232ca <printk>
}
   1446c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Unhandled LPN state");
   14470:	4811      	ldr	r0, [pc, #68]	; (144b8 <lpn_timeout+0x1dc>)
   14472:	f240 3123 	movw	r1, #803	; 0x323
   14476:	f00e bf6b 	b.w	23350 <assert_post_action>
   1447a:	bf00      	nop
   1447c:	20006ab8 	.word	0x20006ab8
   14480:	00028868 	.word	0x00028868
   14484:	00028980 	.word	0x00028980
   14488:	0002d903 	.word	0x0002d903
   1448c:	00029384 	.word	0x00029384
   14490:	0002d7f7 	.word	0x0002d7f7
   14494:	0002dee4 	.word	0x0002dee4
   14498:	0002d911 	.word	0x0002d911
   1449c:	20006aec 	.word	0x20006aec
   144a0:	0002d937 	.word	0x0002d937
   144a4:	0002d95c 	.word	0x0002d95c
   144a8:	0002d985 	.word	0x0002d985
   144ac:	0002d9b2 	.word	0x0002d9b2
   144b0:	0002d9dc 	.word	0x0002d9dc
   144b4:	0002d2c6 	.word	0x0002d2c6
   144b8:	0002d9f7 	.word	0x0002d9f7
   144bc:	000297e6 	.word	0x000297e6
   144c0:	0002da26 	.word	0x0002da26

000144c4 <bt_mesh_lpn_disable>:
	if (bt_mesh.lpn.state == BT_MESH_LPN_DISABLED) {
   144c4:	4b03      	ldr	r3, [pc, #12]	; (144d4 <bt_mesh_lpn_disable+0x10>)
   144c6:	f893 3020 	ldrb.w	r3, [r3, #32]
   144ca:	b113      	cbz	r3, 144d2 <bt_mesh_lpn_disable+0xe>
	clear_friendship(force, true);
   144cc:	2101      	movs	r1, #1
   144ce:	f7ff bcff 	b.w	13ed0 <clear_friendship>
}
   144d2:	4770      	bx	lr
   144d4:	20006ab8 	.word	0x20006ab8

000144d8 <bt_mesh_lpn_msg_received>:
{
   144d8:	b538      	push	{r3, r4, r5, lr}
	if (lpn->state == BT_MESH_LPN_TIMER) {
   144da:	4d18      	ldr	r5, [pc, #96]	; (1453c <bt_mesh_lpn_msg_received+0x64>)
   144dc:	4c18      	ldr	r4, [pc, #96]	; (14540 <bt_mesh_lpn_msg_received+0x68>)
   144de:	4919      	ldr	r1, [pc, #100]	; (14544 <bt_mesh_lpn_msg_received+0x6c>)
   144e0:	f895 3020 	ldrb.w	r3, [r5, #32]
   144e4:	1a64      	subs	r4, r4, r1
   144e6:	08e4      	lsrs	r4, r4, #3
   144e8:	2b02      	cmp	r3, #2
   144ea:	ea4f 1484 	mov.w	r4, r4, lsl #6
   144ee:	d10d      	bne.n	1450c <bt_mesh_lpn_msg_received+0x34>
		BT_DBG("Restarting establishment timer");
   144f0:	4915      	ldr	r1, [pc, #84]	; (14548 <bt_mesh_lpn_msg_received+0x70>)
   144f2:	4816      	ldr	r0, [pc, #88]	; (1454c <bt_mesh_lpn_msg_received+0x74>)
   144f4:	f044 0204 	orr.w	r2, r4, #4
   144f8:	f00e ff65 	bl	233c6 <log_1>
		k_delayed_work_submit(&lpn->timer, LPN_AUTO_TIMEOUT);
   144fc:	f105 0034 	add.w	r0, r5, #52	; 0x34
   14500:	f643 2198 	movw	r1, #15000	; 0x3a98
}
   14504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_delayed_work_submit(&lpn->timer, LPN_AUTO_TIMEOUT);
   14508:	f7ff bb7e 	b.w	13c08 <k_delayed_work_submit>
	if (lpn->sent_req != TRANS_CTL_OP_FRIEND_POLL) {
   1450c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   14510:	2b01      	cmp	r3, #1
   14512:	d006      	beq.n	14522 <bt_mesh_lpn_msg_received+0x4a>
		BT_WARN("Unexpected message withouth a preceding Poll");
   14514:	f044 0102 	orr.w	r1, r4, #2
   14518:	480d      	ldr	r0, [pc, #52]	; (14550 <bt_mesh_lpn_msg_received+0x78>)
}
   1451a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Unexpected message withouth a preceding Poll");
   1451e:	f00e bf45 	b.w	233ac <log_0>
	friend_response_received(lpn);
   14522:	f7ff fc41 	bl	13da8 <friend_response_received.constprop.0>
	BT_DBG("Requesting more messages from Friend");
   14526:	f044 0204 	orr.w	r2, r4, #4
   1452a:	4907      	ldr	r1, [pc, #28]	; (14548 <bt_mesh_lpn_msg_received+0x70>)
   1452c:	4809      	ldr	r0, [pc, #36]	; (14554 <bt_mesh_lpn_msg_received+0x7c>)
   1452e:	f00e ff4a 	bl	233c6 <log_1>
}
   14532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_friend_poll();
   14536:	f7ff bb6f 	b.w	13c18 <send_friend_poll>
   1453a:	bf00      	nop
   1453c:	20006ab8 	.word	0x20006ab8
   14540:	00028980 	.word	0x00028980
   14544:	00028868 	.word	0x00028868
   14548:	0002de8a 	.word	0x0002de8a
   1454c:	0002da3c 	.word	0x0002da3c
   14550:	0002da5f 	.word	0x0002da5f
   14554:	0002da8c 	.word	0x0002da8c

00014558 <bt_mesh_lpn_friend_offer>:
{
   14558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1455c:	4a35      	ldr	r2, [pc, #212]	; (14634 <bt_mesh_lpn_friend_offer+0xdc>)
   1455e:	4b36      	ldr	r3, [pc, #216]	; (14638 <bt_mesh_lpn_friend_offer+0xe0>)
   14560:	1a9b      	subs	r3, r3, r2
	if (buf->len < sizeof(*msg)) {
   14562:	888a      	ldrh	r2, [r1, #4]
   14564:	08db      	lsrs	r3, r3, #3
   14566:	2a05      	cmp	r2, #5
{
   14568:	b086      	sub	sp, #24
   1456a:	4607      	mov	r7, r0
   1456c:	ea4f 1383 	mov.w	r3, r3, lsl #6
	if (buf->len < sizeof(*msg)) {
   14570:	d807      	bhi.n	14582 <bt_mesh_lpn_friend_offer+0x2a>
		BT_WARN("Too short Friend Offer");
   14572:	4832      	ldr	r0, [pc, #200]	; (1463c <bt_mesh_lpn_friend_offer+0xe4>)
   14574:	f043 0102 	orr.w	r1, r3, #2
		BT_WARN("Prohibited ReceiveWindow value");
   14578:	f00e ff18 	bl	233ac <log_0>
		return -EINVAL;
   1457c:	f06f 0515 	mvn.w	r5, #21
   14580:	e00a      	b.n	14598 <bt_mesh_lpn_friend_offer+0x40>
	if (lpn->state != BT_MESH_LPN_WAIT_OFFER) {
   14582:	4c2f      	ldr	r4, [pc, #188]	; (14640 <bt_mesh_lpn_friend_offer+0xe8>)
   14584:	f894 2020 	ldrb.w	r2, [r4, #32]
   14588:	2a05      	cmp	r2, #5
   1458a:	d009      	beq.n	145a0 <bt_mesh_lpn_friend_offer+0x48>
		BT_WARN("Ignoring unexpected Friend Offer");
   1458c:	482d      	ldr	r0, [pc, #180]	; (14644 <bt_mesh_lpn_friend_offer+0xec>)
   1458e:	f043 0102 	orr.w	r1, r3, #2
   14592:	f00e ff0b 	bl	233ac <log_0>
		return 0;
   14596:	2500      	movs	r5, #0
}
   14598:	4628      	mov	r0, r5
   1459a:	b006      	add	sp, #24
   1459c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_mesh_ctl_friend_offer *msg = (void *)buf->data;
   145a0:	680d      	ldr	r5, [r1, #0]
	if (!msg->recv_win) {
   145a2:	782a      	ldrb	r2, [r5, #0]
   145a4:	b91a      	cbnz	r2, 145ae <bt_mesh_lpn_friend_offer+0x56>
		BT_WARN("Prohibited ReceiveWindow value");
   145a6:	4828      	ldr	r0, [pc, #160]	; (14648 <bt_mesh_lpn_friend_offer+0xf0>)
   145a8:	f043 0102 	orr.w	r1, r3, #2
   145ac:	e7e4      	b.n	14578 <bt_mesh_lpn_friend_offer+0x20>
	frnd_counter = sys_be16_to_cpu(msg->frnd_counter);
   145ae:	88a9      	ldrh	r1, [r5, #4]
	struct bt_mesh_subnet *sub = rx->sub;
   145b0:	f8d0 8000 	ldr.w	r8, [r0]
	BT_DBG("recv_win %u queue_size %u sub_list_size %u rssi %d counter %u",
   145b4:	4825      	ldr	r0, [pc, #148]	; (1464c <bt_mesh_lpn_friend_offer+0xf4>)
	frnd_counter = sys_be16_to_cpu(msg->frnd_counter);
   145b6:	020e      	lsls	r6, r1, #8
   145b8:	ea46 2611 	orr.w	r6, r6, r1, lsr #8
	BT_DBG("recv_win %u queue_size %u sub_list_size %u rssi %d counter %u",
   145bc:	4924      	ldr	r1, [pc, #144]	; (14650 <bt_mesh_lpn_friend_offer+0xf8>)
   145be:	e9cd 1200 	strd	r1, r2, [sp]
   145c2:	786a      	ldrb	r2, [r5, #1]
   145c4:	9202      	str	r2, [sp, #8]
   145c6:	78aa      	ldrb	r2, [r5, #2]
   145c8:	9203      	str	r2, [sp, #12]
   145ca:	f995 2003 	ldrsb.w	r2, [r5, #3]
	frnd_counter = sys_be16_to_cpu(msg->frnd_counter);
   145ce:	b2b6      	uxth	r6, r6
	BT_DBG("recv_win %u queue_size %u sub_list_size %u rssi %d counter %u",
   145d0:	e9cd 2604 	strd	r2, r6, [sp, #16]
   145d4:	f043 0304 	orr.w	r3, r3, #4
   145d8:	2206      	movs	r2, #6
   145da:	4669      	mov	r1, sp
   145dc:	f00e ff3c 	bl	23458 <log_n>
	lpn->frnd = rx->ctx.addr;
   145e0:	8939      	ldrh	r1, [r7, #8]
	cred = friend_cred_create(sub, lpn->frnd, lpn->counter, frnd_counter);
   145e2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
	lpn->frnd = rx->ctx.addr;
   145e4:	84a1      	strh	r1, [r4, #36]	; 0x24
	cred = friend_cred_create(sub, lpn->frnd, lpn->counter, frnd_counter);
   145e6:	4633      	mov	r3, r6
   145e8:	4640      	mov	r0, r8
   145ea:	f7f8 f9e7 	bl	c9bc <friend_cred_create>
	if (!cred) {
   145ee:	4606      	mov	r6, r0
   145f0:	b918      	cbnz	r0, 145fa <bt_mesh_lpn_friend_offer+0xa2>
		lpn->frnd = BT_MESH_ADDR_UNASSIGNED;
   145f2:	84a0      	strh	r0, [r4, #36]	; 0x24
		return -ENOMEM;
   145f4:	f06f 050b 	mvn.w	r5, #11
   145f8:	e7ce      	b.n	14598 <bt_mesh_lpn_friend_offer+0x40>
	k_delayed_work_cancel(&lpn->timer);
   145fa:	f104 0034 	add.w	r0, r4, #52	; 0x34
   145fe:	f00d fd33 	bl	22068 <k_delayed_work_cancel>
	lpn->recv_win = msg->recv_win;
   14602:	782b      	ldrb	r3, [r5, #0]
   14604:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	lpn->queue_size = msg->queue_size;
   14608:	786b      	ldrb	r3, [r5, #1]
   1460a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	err = send_friend_poll();
   1460e:	f7ff fb03 	bl	13c18 <send_friend_poll>
	if (err) {
   14612:	4605      	mov	r5, r0
   14614:	b148      	cbz	r0, 1462a <bt_mesh_lpn_friend_offer+0xd2>
		friend_cred_clear(cred);
   14616:	4630      	mov	r0, r6
   14618:	f011 ff00 	bl	2641c <friend_cred_clear>
		lpn->frnd = BT_MESH_ADDR_UNASSIGNED;
   1461c:	2300      	movs	r3, #0
   1461e:	84a3      	strh	r3, [r4, #36]	; 0x24
		lpn->recv_win = 0U;
   14620:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		lpn->queue_size = 0U;
   14624:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		return err;
   14628:	e7b6      	b.n	14598 <bt_mesh_lpn_friend_offer+0x40>
	lpn->counter++;
   1462a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1462c:	3301      	adds	r3, #1
   1462e:	85e3      	strh	r3, [r4, #46]	; 0x2e
	return 0;
   14630:	e7b2      	b.n	14598 <bt_mesh_lpn_friend_offer+0x40>
   14632:	bf00      	nop
   14634:	00028868 	.word	0x00028868
   14638:	00028980 	.word	0x00028980
   1463c:	0002dab5 	.word	0x0002dab5
   14640:	20006ab8 	.word	0x20006ab8
   14644:	0002dacc 	.word	0x0002dacc
   14648:	0002daed 	.word	0x0002daed
   1464c:	0002db0c 	.word	0x0002db0c
   14650:	0002dea3 	.word	0x0002dea3

00014654 <bt_mesh_lpn_friend_clear_cfm>:
	if (buf->len < sizeof(*msg)) {
   14654:	4b25      	ldr	r3, [pc, #148]	; (146ec <bt_mesh_lpn_friend_clear_cfm+0x98>)
{
   14656:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14658:	4c25      	ldr	r4, [pc, #148]	; (146f0 <bt_mesh_lpn_friend_clear_cfm+0x9c>)
   1465a:	1ae4      	subs	r4, r4, r3
	if (buf->len < sizeof(*msg)) {
   1465c:	888b      	ldrh	r3, [r1, #4]
   1465e:	08e4      	lsrs	r4, r4, #3
   14660:	2b03      	cmp	r3, #3
   14662:	ea4f 1484 	mov.w	r4, r4, lsl #6
   14666:	d808      	bhi.n	1467a <bt_mesh_lpn_friend_clear_cfm+0x26>
		BT_WARN("Too short Friend Clear Confirm");
   14668:	4822      	ldr	r0, [pc, #136]	; (146f4 <bt_mesh_lpn_friend_clear_cfm+0xa0>)
   1466a:	f044 0102 	orr.w	r1, r4, #2
   1466e:	f00e fe9d 	bl	233ac <log_0>
		return -EINVAL;
   14672:	f06f 0015 	mvn.w	r0, #21
}
   14676:	b003      	add	sp, #12
   14678:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (lpn->state != BT_MESH_LPN_CLEAR) {
   1467a:	4f1f      	ldr	r7, [pc, #124]	; (146f8 <bt_mesh_lpn_friend_clear_cfm+0xa4>)
   1467c:	f897 3020 	ldrb.w	r3, [r7, #32]
   14680:	2b01      	cmp	r3, #1
   14682:	d006      	beq.n	14692 <bt_mesh_lpn_friend_clear_cfm+0x3e>
		BT_WARN("Ignoring unexpected Friend Clear Confirm");
   14684:	481d      	ldr	r0, [pc, #116]	; (146fc <bt_mesh_lpn_friend_clear_cfm+0xa8>)
   14686:	f044 0102 	orr.w	r1, r4, #2
		BT_WARN("Invalid parameters in Friend Clear Confirm");
   1468a:	f00e fe8f 	bl	233ac <log_0>
	return 0;
   1468e:	2000      	movs	r0, #0
   14690:	e7f1      	b.n	14676 <bt_mesh_lpn_friend_clear_cfm+0x22>
	struct bt_mesh_ctl_friend_clear_confirm *msg = (void *)buf->data;
   14692:	680b      	ldr	r3, [r1, #0]
	BT_DBG("LPNAddress 0x%04x LPNCounter 0x%04x", addr, counter);
   14694:	481a      	ldr	r0, [pc, #104]	; (14700 <bt_mesh_lpn_friend_clear_cfm+0xac>)
	addr = sys_be16_to_cpu(msg->lpn_addr);
   14696:	881a      	ldrh	r2, [r3, #0]
	counter = sys_be16_to_cpu(msg->lpn_counter);
   14698:	885b      	ldrh	r3, [r3, #2]
	BT_DBG("LPNAddress 0x%04x LPNCounter 0x%04x", addr, counter);
   1469a:	491a      	ldr	r1, [pc, #104]	; (14704 <bt_mesh_lpn_friend_clear_cfm+0xb0>)
	addr = sys_be16_to_cpu(msg->lpn_addr);
   1469c:	0216      	lsls	r6, r2, #8
	counter = sys_be16_to_cpu(msg->lpn_counter);
   1469e:	021d      	lsls	r5, r3, #8
	addr = sys_be16_to_cpu(msg->lpn_addr);
   146a0:	ea46 2612 	orr.w	r6, r6, r2, lsr #8
	counter = sys_be16_to_cpu(msg->lpn_counter);
   146a4:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
	addr = sys_be16_to_cpu(msg->lpn_addr);
   146a8:	b2b6      	uxth	r6, r6
	BT_DBG("LPNAddress 0x%04x LPNCounter 0x%04x", addr, counter);
   146aa:	f044 0304 	orr.w	r3, r4, #4
	counter = sys_be16_to_cpu(msg->lpn_counter);
   146ae:	b2ad      	uxth	r5, r5
	BT_DBG("LPNAddress 0x%04x LPNCounter 0x%04x", addr, counter);
   146b0:	f8ad 3000 	strh.w	r3, [sp]
   146b4:	4632      	mov	r2, r6
   146b6:	462b      	mov	r3, r5
   146b8:	f00e feb2 	bl	23420 <log_3>
	if (addr != bt_mesh_primary_addr() || counter != lpn->counter) {
   146bc:	f7fb f89a 	bl	f7f4 <bt_mesh_primary_addr>
   146c0:	4286      	cmp	r6, r0
   146c2:	d102      	bne.n	146ca <bt_mesh_lpn_friend_clear_cfm+0x76>
   146c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   146c6:	42ab      	cmp	r3, r5
   146c8:	d003      	beq.n	146d2 <bt_mesh_lpn_friend_clear_cfm+0x7e>
		BT_WARN("Invalid parameters in Friend Clear Confirm");
   146ca:	480f      	ldr	r0, [pc, #60]	; (14708 <bt_mesh_lpn_friend_clear_cfm+0xb4>)
   146cc:	f044 0102 	orr.w	r1, r4, #2
   146d0:	e7db      	b.n	1468a <bt_mesh_lpn_friend_clear_cfm+0x36>
	lpn->clear_success = 1U;
   146d2:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
   146d6:	f041 0120 	orr.w	r1, r1, #32
   146da:	f887 102c 	strb.w	r1, [r7, #44]	; 0x2c
	clear_friendship(false, lpn->disable);
   146de:	2000      	movs	r0, #0
   146e0:	f3c1 0180 	ubfx	r1, r1, #2, #1
   146e4:	f7ff fbf4 	bl	13ed0 <clear_friendship>
   146e8:	e7d1      	b.n	1468e <bt_mesh_lpn_friend_clear_cfm+0x3a>
   146ea:	bf00      	nop
   146ec:	00028868 	.word	0x00028868
   146f0:	00028980 	.word	0x00028980
   146f4:	0002db4e 	.word	0x0002db4e
   146f8:	20006ab8 	.word	0x20006ab8
   146fc:	0002db6d 	.word	0x0002db6d
   14700:	0002db96 	.word	0x0002db96
   14704:	0002debc 	.word	0x0002debc
   14708:	0002dbbe 	.word	0x0002dbbe

0001470c <bt_mesh_lpn_group_add>:
{
   1470c:	b570      	push	{r4, r5, r6, lr}
   1470e:	4b25      	ldr	r3, [pc, #148]	; (147a4 <bt_mesh_lpn_group_add+0x98>)
   14710:	4c25      	ldr	r4, [pc, #148]	; (147a8 <bt_mesh_lpn_group_add+0x9c>)
	BT_DBG("group 0x%04x", group);
   14712:	4926      	ldr	r1, [pc, #152]	; (147ac <bt_mesh_lpn_group_add+0xa0>)
   14714:	1ae4      	subs	r4, r4, r3
   14716:	08e4      	lsrs	r4, r4, #3
   14718:	01a4      	lsls	r4, r4, #6
   1471a:	4602      	mov	r2, r0
   1471c:	f044 0304 	orr.w	r3, r4, #4
{
   14720:	4605      	mov	r5, r0
	BT_DBG("group 0x%04x", group);
   14722:	4823      	ldr	r0, [pc, #140]	; (147b0 <bt_mesh_lpn_group_add+0xa4>)
   14724:	f00e fe63 	bl	233ee <log_2>
	u16_t *free_slot = NULL;
   14728:	2300      	movs	r3, #0
   1472a:	4922      	ldr	r1, [pc, #136]	; (147b4 <bt_mesh_lpn_group_add+0xa8>)
	for (i = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   1472c:	461a      	mov	r2, r3
		if (lpn->groups[i] == group) {
   1472e:	8808      	ldrh	r0, [r1, #0]
   14730:	4285      	cmp	r5, r0
   14732:	460e      	mov	r6, r1
   14734:	f101 0102 	add.w	r1, r1, #2
   14738:	d11b      	bne.n	14772 <bt_mesh_lpn_group_add+0x66>
	atomic_val_t mask = ATOMIC_MASK(bit);
   1473a:	2301      	movs	r3, #1
   1473c:	4093      	lsls	r3, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1473e:	491e      	ldr	r1, [pc, #120]	; (147b8 <bt_mesh_lpn_group_add+0xac>)
   14740:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14744:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14746:	e851 2f00 	ldrex	r2, [r1]
   1474a:	401a      	ands	r2, r3
   1474c:	e841 2000 	strex	r0, r2, [r1]
   14750:	2800      	cmp	r0, #0
   14752:	d1f8      	bne.n	14746 <bt_mesh_lpn_group_add+0x3a>
   14754:	f3bf 8f5b 	dmb	ish
   14758:	4b18      	ldr	r3, [pc, #96]	; (147bc <bt_mesh_lpn_group_add+0xb0>)
   1475a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
	if (!bt_mesh_lpn_established() || bt_mesh.lpn.sent_req) {
   1475e:	06d2      	lsls	r2, r2, #27
   14760:	d51e      	bpl.n	147a0 <bt_mesh_lpn_group_add+0x94>
   14762:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   14766:	b9db      	cbnz	r3, 147a0 <bt_mesh_lpn_group_add+0x94>
}
   14768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	sub_update(TRANS_CTL_OP_FRIEND_SUB_ADD);
   1476c:	2007      	movs	r0, #7
   1476e:	f7ff bcf7 	b.w	14160 <sub_update>
		if (!free_slot && lpn->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   14772:	b913      	cbnz	r3, 1477a <bt_mesh_lpn_group_add+0x6e>
   14774:	2800      	cmp	r0, #0
   14776:	bf08      	it	eq
   14778:	4633      	moveq	r3, r6
	for (i = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   1477a:	3201      	adds	r2, #1
   1477c:	2a08      	cmp	r2, #8
   1477e:	d1d6      	bne.n	1472e <bt_mesh_lpn_group_add+0x22>
	if (!free_slot) {
   14780:	b92b      	cbnz	r3, 1478e <bt_mesh_lpn_group_add+0x82>
		BT_WARN("Friend Subscription List exceeded!");
   14782:	480f      	ldr	r0, [pc, #60]	; (147c0 <bt_mesh_lpn_group_add+0xb4>)
   14784:	f044 0102 	orr.w	r1, r4, #2
   14788:	f00e fe10 	bl	233ac <log_0>
		return;
   1478c:	e7e4      	b.n	14758 <bt_mesh_lpn_group_add+0x4c>
	lpn->groups_changed = 1U;
   1478e:	4a0b      	ldr	r2, [pc, #44]	; (147bc <bt_mesh_lpn_group_add+0xb0>)
	*free_slot = group;
   14790:	801d      	strh	r5, [r3, #0]
	lpn->groups_changed = 1U;
   14792:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
   14796:	f043 0301 	orr.w	r3, r3, #1
   1479a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
   1479e:	e7db      	b.n	14758 <bt_mesh_lpn_group_add+0x4c>
}
   147a0:	bd70      	pop	{r4, r5, r6, pc}
   147a2:	bf00      	nop
   147a4:	00028868 	.word	0x00028868
   147a8:	00028980 	.word	0x00028980
   147ac:	0002def0 	.word	0x0002def0
   147b0:	0002dbe9 	.word	0x0002dbe9
   147b4:	20006b0c 	.word	0x20006b0c
   147b8:	20006b24 	.word	0x20006b24
   147bc:	20006ab8 	.word	0x20006ab8
   147c0:	0002dbfa 	.word	0x0002dbfa

000147c4 <bt_mesh_lpn_group_del>:
{
   147c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147c8:	4b2a      	ldr	r3, [pc, #168]	; (14874 <bt_mesh_lpn_group_del+0xb0>)
   147ca:	4c2b      	ldr	r4, [pc, #172]	; (14878 <bt_mesh_lpn_group_del+0xb4>)
			BT_DBG("group 0x%04x", groups[i]);
   147cc:	4f2b      	ldr	r7, [pc, #172]	; (1487c <bt_mesh_lpn_group_del+0xb8>)
   147ce:	1ae4      	subs	r4, r4, r3
   147d0:	08e4      	lsrs	r4, r4, #3
   147d2:	eb00 0341 	add.w	r3, r0, r1, lsl #1
   147d6:	01a4      	lsls	r4, r4, #6
   147d8:	9300      	str	r3, [sp, #0]
   147da:	f044 0304 	orr.w	r3, r4, #4
   147de:	4605      	mov	r5, r0
   147e0:	9301      	str	r3, [sp, #4]
	for (i = 0; i < group_count; i++) {
   147e2:	9b00      	ldr	r3, [sp, #0]
   147e4:	429d      	cmp	r5, r3
   147e6:	d10e      	bne.n	14806 <bt_mesh_lpn_group_del+0x42>
   147e8:	4b25      	ldr	r3, [pc, #148]	; (14880 <bt_mesh_lpn_group_del+0xbc>)
   147ea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
	if (!bt_mesh_lpn_established() || bt_mesh.lpn.sent_req) {
   147ee:	06d2      	lsls	r2, r2, #27
   147f0:	d53d      	bpl.n	1486e <bt_mesh_lpn_group_del+0xaa>
   147f2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   147f6:	2b00      	cmp	r3, #0
   147f8:	d139      	bne.n	1486e <bt_mesh_lpn_group_del+0xaa>
	sub_update(TRANS_CTL_OP_FRIEND_SUB_REM);
   147fa:	2008      	movs	r0, #8
}
   147fc:	b003      	add	sp, #12
   147fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sub_update(TRANS_CTL_OP_FRIEND_SUB_REM);
   14802:	f7ff bcad 	b.w	14160 <sub_update>
		if (groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   14806:	f835 2b02 	ldrh.w	r2, [r5], #2
   1480a:	2a00      	cmp	r2, #0
   1480c:	d0e9      	beq.n	147e2 <bt_mesh_lpn_group_del+0x1e>
			BT_DBG("group 0x%04x", groups[i]);
   1480e:	4c1d      	ldr	r4, [pc, #116]	; (14884 <bt_mesh_lpn_group_del+0xc0>)
   14810:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   14814:	481c      	ldr	r0, [pc, #112]	; (14888 <bt_mesh_lpn_group_del+0xc4>)
   14816:	4639      	mov	r1, r7
   14818:	f00e fde9 	bl	233ee <log_2>
			lpn_group_del(groups[i]);
   1481c:	f835 8c02 	ldrh.w	r8, [r5, #-2]
	for (i = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   14820:	2600      	movs	r6, #0
			if (atomic_test_bit(lpn->added, i) ||
   14822:	f104 0910 	add.w	r9, r4, #16
			    atomic_test_bit(lpn->pending, i)) {
   14826:	f104 0a14 	add.w	sl, r4, #20
				atomic_set_bit(lpn->to_remove, i);
   1482a:	f104 0b18 	add.w	fp, r4, #24
		if (lpn->groups[i] == group) {
   1482e:	f834 2b02 	ldrh.w	r2, [r4], #2
   14832:	4590      	cmp	r8, r2
   14834:	d10f      	bne.n	14856 <bt_mesh_lpn_group_del+0x92>
			if (atomic_test_bit(lpn->added, i) ||
   14836:	4631      	mov	r1, r6
   14838:	4648      	mov	r0, r9
   1483a:	f012 fbb7 	bl	26fac <atomic_test_bit>
   1483e:	b170      	cbz	r0, 1485e <bt_mesh_lpn_group_del+0x9a>
				atomic_set_bit(lpn->to_remove, i);
   14840:	4658      	mov	r0, fp
   14842:	4631      	mov	r1, r6
   14844:	f012 fb98 	bl	26f78 <atomic_set_bit>
				lpn->groups_changed = 1U;
   14848:	480d      	ldr	r0, [pc, #52]	; (14880 <bt_mesh_lpn_group_del+0xbc>)
   1484a:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
   1484e:	f042 0201 	orr.w	r2, r2, #1
   14852:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	for (i = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   14856:	3601      	adds	r6, #1
   14858:	2e08      	cmp	r6, #8
   1485a:	d1e8      	bne.n	1482e <bt_mesh_lpn_group_del+0x6a>
   1485c:	e7c1      	b.n	147e2 <bt_mesh_lpn_group_del+0x1e>
			    atomic_test_bit(lpn->pending, i)) {
   1485e:	4650      	mov	r0, sl
   14860:	f012 fba4 	bl	26fac <atomic_test_bit>
			if (atomic_test_bit(lpn->added, i) ||
   14864:	2800      	cmp	r0, #0
   14866:	d1eb      	bne.n	14840 <bt_mesh_lpn_group_del+0x7c>
				lpn->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   14868:	f824 0c02 	strh.w	r0, [r4, #-2]
   1486c:	e7f3      	b.n	14856 <bt_mesh_lpn_group_del+0x92>
}
   1486e:	b003      	add	sp, #12
   14870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14874:	00028868 	.word	0x00028868
   14878:	00028980 	.word	0x00028980
   1487c:	0002df06 	.word	0x0002df06
   14880:	20006ab8 	.word	0x20006ab8
   14884:	20006b0c 	.word	0x20006b0c
   14888:	0002dbe9 	.word	0x0002dbe9

0001488c <bt_mesh_lpn_friend_sub_cfm>:

int bt_mesh_lpn_friend_sub_cfm(struct bt_mesh_net_rx *rx,
			       struct net_buf_simple *buf)
{
   1488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14890:	4b4e      	ldr	r3, [pc, #312]	; (149cc <bt_mesh_lpn_friend_sub_cfm+0x140>)
   14892:	4e4f      	ldr	r6, [pc, #316]	; (149d0 <bt_mesh_lpn_friend_sub_cfm+0x144>)
	struct bt_mesh_ctl_friend_sub_confirm *msg = (void *)buf->data;
   14894:	680f      	ldr	r7, [r1, #0]
	struct bt_mesh_lpn *lpn = &bt_mesh.lpn;

	if (buf->len < sizeof(*msg)) {
   14896:	1af6      	subs	r6, r6, r3
   14898:	888b      	ldrh	r3, [r1, #4]
   1489a:	08f6      	lsrs	r6, r6, #3
   1489c:	01b6      	lsls	r6, r6, #6
   1489e:	b943      	cbnz	r3, 148b2 <bt_mesh_lpn_friend_sub_cfm+0x26>
		BT_WARN("Too short Friend Subscription Confirm");
   148a0:	484c      	ldr	r0, [pc, #304]	; (149d4 <bt_mesh_lpn_friend_sub_cfm+0x148>)
   148a2:	f046 0102 	orr.w	r1, r6, #2
   148a6:	f00e fd81 	bl	233ac <log_0>
		return -EINVAL;
   148aa:	f06f 0015 	mvn.w	r0, #21
	if (!lpn->sent_req) {
		k_delayed_work_submit(&lpn->timer, poll_timeout(lpn));
	}

	return 0;
}
   148ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	BT_DBG("xact 0x%02x", msg->xact);
   148b2:	f046 0304 	orr.w	r3, r6, #4
   148b6:	783a      	ldrb	r2, [r7, #0]
   148b8:	4947      	ldr	r1, [pc, #284]	; (149d8 <bt_mesh_lpn_friend_sub_cfm+0x14c>)
   148ba:	4848      	ldr	r0, [pc, #288]	; (149dc <bt_mesh_lpn_friend_sub_cfm+0x150>)
   148bc:	f00e fd97 	bl	233ee <log_2>
	if (!lpn->sent_req) {
   148c0:	4b47      	ldr	r3, [pc, #284]	; (149e0 <bt_mesh_lpn_friend_sub_cfm+0x154>)
   148c2:	f893 4023 	ldrb.w	r4, [r3, #35]	; 0x23
   148c6:	461d      	mov	r5, r3
   148c8:	b92c      	cbnz	r4, 148d6 <bt_mesh_lpn_friend_sub_cfm+0x4a>
		BT_WARN("No pending subscription list message");
   148ca:	4846      	ldr	r0, [pc, #280]	; (149e4 <bt_mesh_lpn_friend_sub_cfm+0x158>)
   148cc:	f046 0102 	orr.w	r1, r6, #2
		BT_WARN("Unexpected Friend Subscription Confirm");
   148d0:	f00e fd6c 	bl	233ac <log_0>
		return 0;
   148d4:	e009      	b.n	148ea <bt_mesh_lpn_friend_sub_cfm+0x5e>
	if (msg->xact != lpn->xact_pending) {
   148d6:	7839      	ldrb	r1, [r7, #0]
   148d8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   148dc:	4291      	cmp	r1, r2
   148de:	d006      	beq.n	148ee <bt_mesh_lpn_friend_sub_cfm+0x62>
		BT_WARN("Transaction mismatch (0x%02x != 0x%02x)",
   148e0:	4841      	ldr	r0, [pc, #260]	; (149e8 <bt_mesh_lpn_friend_sub_cfm+0x15c>)
   148e2:	f046 0302 	orr.w	r3, r6, #2
   148e6:	f00e fd82 	bl	233ee <log_2>
	return 0;
   148ea:	2000      	movs	r0, #0
   148ec:	e7df      	b.n	148ae <bt_mesh_lpn_friend_sub_cfm+0x22>
	if (lpn->sent_req == TRANS_CTL_OP_FRIEND_SUB_ADD) {
   148ee:	2c07      	cmp	r4, #7
   148f0:	d13a      	bne.n	14968 <bt_mesh_lpn_friend_sub_cfm+0xdc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   148f2:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   148f6:	3364      	adds	r3, #100	; 0x64
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   148f8:	685a      	ldr	r2, [r3, #4]
   148fa:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   148fe:	f3bf 8f5b 	dmb	ish
   14902:	e853 1f00 	ldrex	r1, [r3]
   14906:	4311      	orrs	r1, r2
   14908:	e843 1000 	strex	r0, r1, [r3]
   1490c:	2800      	cmp	r0, #0
   1490e:	d1f8      	bne.n	14902 <bt_mesh_lpn_friend_sub_cfm+0x76>
   14910:	f3bf 8f5b 	dmb	ish
		group_zero(lpn->pending);
   14914:	f105 0068 	add.w	r0, r5, #104	; 0x68
   14918:	f012 fb3c 	bl	26f94 <group_zero>
	friend_response_received(lpn);
   1491c:	f7ff fa44 	bl	13da8 <friend_response_received.constprop.0>
	if (lpn->groups_changed) {
   14920:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   14924:	07da      	lsls	r2, r3, #31
   14926:	d50e      	bpl.n	14946 <bt_mesh_lpn_friend_sub_cfm+0xba>
		sub_update(TRANS_CTL_OP_FRIEND_SUB_ADD);
   14928:	2007      	movs	r0, #7
   1492a:	f7ff fc19 	bl	14160 <sub_update>
		sub_update(TRANS_CTL_OP_FRIEND_SUB_REM);
   1492e:	2008      	movs	r0, #8
   14930:	f7ff fc16 	bl	14160 <sub_update>
		if (!lpn->sent_req) {
   14934:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   14938:	b92a      	cbnz	r2, 14946 <bt_mesh_lpn_friend_sub_cfm+0xba>
			lpn->groups_changed = 0U;
   1493a:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1493e:	f362 0300 	bfi	r3, r2, #0, #1
   14942:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	if (lpn->pending_poll) {
   14946:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1494a:	079b      	lsls	r3, r3, #30
   1494c:	d501      	bpl.n	14952 <bt_mesh_lpn_friend_sub_cfm+0xc6>
		send_friend_poll();
   1494e:	f7ff f963 	bl	13c18 <send_friend_poll>
	if (!lpn->sent_req) {
   14952:	f895 4023 	ldrb.w	r4, [r5, #35]	; 0x23
   14956:	2c00      	cmp	r4, #0
   14958:	d1c7      	bne.n	148ea <bt_mesh_lpn_friend_sub_cfm+0x5e>
		k_delayed_work_submit(&lpn->timer, poll_timeout(lpn));
   1495a:	f7ff f9e7 	bl	13d2c <poll_timeout.constprop.0>
   1495e:	4601      	mov	r1, r0
   14960:	4822      	ldr	r0, [pc, #136]	; (149ec <bt_mesh_lpn_friend_sub_cfm+0x160>)
   14962:	f7ff f951 	bl	13c08 <k_delayed_work_submit>
   14966:	e7c0      	b.n	148ea <bt_mesh_lpn_friend_sub_cfm+0x5e>
	} else if (lpn->sent_req == TRANS_CTL_OP_FRIEND_SUB_REM) {
   14968:	2c08      	cmp	r4, #8
   1496a:	d12a      	bne.n	149c2 <bt_mesh_lpn_friend_sub_cfm+0x136>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1496c:	f3bf 8f5b 	dmb	ish
   14970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   14972:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14976:	f105 0264 	add.w	r2, r5, #100	; 0x64
	(void)atomic_and(target, ~atomic_get(source));
   1497a:	43db      	mvns	r3, r3
   1497c:	f3bf 8f5b 	dmb	ish
   14980:	e852 1f00 	ldrex	r1, [r2]
   14984:	4019      	ands	r1, r3
   14986:	e842 1000 	strex	r0, r1, [r2]
   1498a:	2800      	cmp	r0, #0
   1498c:	d1f8      	bne.n	14980 <bt_mesh_lpn_friend_sub_cfm+0xf4>
   1498e:	f3bf 8f5b 	dmb	ish
		for (i = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   14992:	2400      	movs	r4, #0
			if (atomic_test_and_clear_bit(lpn->pending, i) &&
   14994:	f105 0668 	add.w	r6, r5, #104	; 0x68
			    atomic_test_and_clear_bit(lpn->to_remove, i)) {
   14998:	f105 076c 	add.w	r7, r5, #108	; 0x6c
				lpn->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   1499c:	f105 0854 	add.w	r8, r5, #84	; 0x54
			if (atomic_test_and_clear_bit(lpn->pending, i) &&
   149a0:	4621      	mov	r1, r4
   149a2:	4630      	mov	r0, r6
   149a4:	f012 fb0b 	bl	26fbe <atomic_test_and_clear_bit>
   149a8:	b138      	cbz	r0, 149ba <bt_mesh_lpn_friend_sub_cfm+0x12e>
			    atomic_test_and_clear_bit(lpn->to_remove, i)) {
   149aa:	4621      	mov	r1, r4
   149ac:	4638      	mov	r0, r7
   149ae:	f012 fb06 	bl	26fbe <atomic_test_and_clear_bit>
			if (atomic_test_and_clear_bit(lpn->pending, i) &&
   149b2:	b110      	cbz	r0, 149ba <bt_mesh_lpn_friend_sub_cfm+0x12e>
				lpn->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   149b4:	2300      	movs	r3, #0
   149b6:	f828 3014 	strh.w	r3, [r8, r4, lsl #1]
		for (i = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   149ba:	3401      	adds	r4, #1
   149bc:	2c08      	cmp	r4, #8
   149be:	d1ef      	bne.n	149a0 <bt_mesh_lpn_friend_sub_cfm+0x114>
   149c0:	e7ac      	b.n	1491c <bt_mesh_lpn_friend_sub_cfm+0x90>
		BT_WARN("Unexpected Friend Subscription Confirm");
   149c2:	480b      	ldr	r0, [pc, #44]	; (149f0 <bt_mesh_lpn_friend_sub_cfm+0x164>)
   149c4:	f046 0102 	orr.w	r1, r6, #2
   149c8:	e782      	b.n	148d0 <bt_mesh_lpn_friend_sub_cfm+0x44>
   149ca:	bf00      	nop
   149cc:	00028868 	.word	0x00028868
   149d0:	00028980 	.word	0x00028980
   149d4:	0002dc1d 	.word	0x0002dc1d
   149d8:	0002df29 	.word	0x0002df29
   149dc:	0002dc43 	.word	0x0002dc43
   149e0:	20006ab8 	.word	0x20006ab8
   149e4:	0002dc53 	.word	0x0002dc53
   149e8:	0002dc78 	.word	0x0002dc78
   149ec:	20006aec 	.word	0x20006aec
   149f0:	0002dca0 	.word	0x0002dca0

000149f4 <bt_mesh_lpn_friend_update>:

int bt_mesh_lpn_friend_update(struct bt_mesh_net_rx *rx,
			      struct net_buf_simple *buf)
{
   149f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   149f8:	4b62      	ldr	r3, [pc, #392]	; (14b84 <bt_mesh_lpn_friend_update+0x190>)
   149fa:	4e63      	ldr	r6, [pc, #396]	; (14b88 <bt_mesh_lpn_friend_update+0x194>)
   149fc:	1af6      	subs	r6, r6, r3
	struct bt_mesh_ctl_friend_update *msg = (void *)buf->data;
	struct bt_mesh_lpn *lpn = &bt_mesh.lpn;
	struct bt_mesh_subnet *sub = rx->sub;
	u32_t iv_index;

	if (buf->len < sizeof(*msg)) {
   149fe:	888b      	ldrh	r3, [r1, #4]
   14a00:	08f6      	lsrs	r6, r6, #3
   14a02:	2b05      	cmp	r3, #5
{
   14a04:	b085      	sub	sp, #20
   14a06:	4607      	mov	r7, r0
   14a08:	ea4f 1686 	mov.w	r6, r6, lsl #6
	if (buf->len < sizeof(*msg)) {
   14a0c:	d809      	bhi.n	14a22 <bt_mesh_lpn_friend_update+0x2e>
		BT_WARN("Too short Friend Update");
   14a0e:	485f      	ldr	r0, [pc, #380]	; (14b8c <bt_mesh_lpn_friend_update+0x198>)
   14a10:	f046 0102 	orr.w	r1, r6, #2
		 * in this state we're also still accepting master
		 * credentials so we need to ensure the right ones (Friend
		 * Credentials) were used for this message.
		 */
		if (!rx->friend_cred) {
			BT_WARN("Friend Update with wrong credentials");
   14a14:	f00e fcca 	bl	233ac <log_0>
			return -EINVAL;
   14a18:	f06f 0015 	mvn.w	r0, #21
	if (!lpn->sent_req) {
		k_delayed_work_submit(&lpn->timer, poll_timeout(lpn));
	}

	return 0;
}
   14a1c:	b005      	add	sp, #20
   14a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (lpn->sent_req != TRANS_CTL_OP_FRIEND_POLL) {
   14a22:	4c5b      	ldr	r4, [pc, #364]	; (14b90 <bt_mesh_lpn_friend_update+0x19c>)
   14a24:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   14a28:	2b01      	cmp	r3, #1
   14a2a:	d006      	beq.n	14a3a <bt_mesh_lpn_friend_update+0x46>
		BT_WARN("Unexpected friend update");
   14a2c:	4859      	ldr	r0, [pc, #356]	; (14b94 <bt_mesh_lpn_friend_update+0x1a0>)
   14a2e:	f046 0102 	orr.w	r1, r6, #2
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
   14a32:	f00e fcbb 	bl	233ac <log_0>
	return 0;
   14a36:	2000      	movs	r0, #0
   14a38:	e7f0      	b.n	14a1c <bt_mesh_lpn_friend_update+0x28>
	struct bt_mesh_subnet *sub = rx->sub;
   14a3a:	f8d0 8000 	ldr.w	r8, [r0]
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !rx->new_key) {
   14a3e:	f898 301f 	ldrb.w	r3, [r8, #31]
   14a42:	2b02      	cmp	r3, #2
   14a44:	d107      	bne.n	14a56 <bt_mesh_lpn_friend_update+0x62>
   14a46:	7d03      	ldrb	r3, [r0, #20]
   14a48:	f013 0502 	ands.w	r5, r3, #2
   14a4c:	d103      	bne.n	14a56 <bt_mesh_lpn_friend_update+0x62>
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
   14a4e:	4852      	ldr	r0, [pc, #328]	; (14b98 <bt_mesh_lpn_friend_update+0x1a4>)
   14a50:	f046 0102 	orr.w	r1, r6, #2
   14a54:	e7ed      	b.n	14a32 <bt_mesh_lpn_friend_update+0x3e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14a56:	4b51      	ldr	r3, [pc, #324]	; (14b9c <bt_mesh_lpn_friend_update+0x1a8>)
	struct bt_mesh_ctl_friend_update *msg = (void *)buf->data;
   14a58:	680d      	ldr	r5, [r1, #0]
   14a5a:	f3bf 8f5b 	dmb	ish
   14a5e:	681a      	ldr	r2, [r3, #0]
   14a60:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
   14a64:	0712      	lsls	r2, r2, #28
   14a66:	d50e      	bpl.n	14a86 <bt_mesh_lpn_friend_update+0x92>
   14a68:	f3bf 8f5b 	dmb	ish
   14a6c:	681b      	ldr	r3, [r3, #0]
   14a6e:	f3bf 8f5b 	dmb	ish
	     BT_MESH_IV_UPDATE(msg->flags))) {
   14a72:	782a      	ldrb	r2, [r5, #0]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
   14a74:	f3c3 0380 	ubfx	r3, r3, #2, #1
	     BT_MESH_IV_UPDATE(msg->flags))) {
   14a78:	f3c2 0240 	ubfx	r2, r2, #1, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
   14a7c:	429a      	cmp	r2, r3
   14a7e:	d102      	bne.n	14a86 <bt_mesh_lpn_friend_update+0x92>
		bt_mesh_beacon_ivu_initiator(false);
   14a80:	2000      	movs	r0, #0
   14a82:	f7f7 fc37 	bl	c2f4 <bt_mesh_beacon_ivu_initiator>
	if (!lpn->established) {
   14a86:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   14a8a:	06d8      	lsls	r0, r3, #27
   14a8c:	d42a      	bmi.n	14ae4 <bt_mesh_lpn_friend_update+0xf0>
		struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
   14a8e:	f7fd fd8b 	bl	125a8 <bt_mesh_cfg_get>
		if (!rx->friend_cred) {
   14a92:	7d3b      	ldrb	r3, [r7, #20]
   14a94:	0759      	lsls	r1, r3, #29
		struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
   14a96:	4681      	mov	r9, r0
		if (!rx->friend_cred) {
   14a98:	d403      	bmi.n	14aa2 <bt_mesh_lpn_friend_update+0xae>
			BT_WARN("Friend Update with wrong credentials");
   14a9a:	4841      	ldr	r0, [pc, #260]	; (14ba0 <bt_mesh_lpn_friend_update+0x1ac>)
   14a9c:	f046 0102 	orr.w	r1, r6, #2
   14aa0:	e7b8      	b.n	14a14 <bt_mesh_lpn_friend_update+0x20>
		lpn->established = 1U;
   14aa2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
		BT_INFO("Friendship established with 0x%04x", lpn->frnd);
   14aa6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   14aa8:	483e      	ldr	r0, [pc, #248]	; (14ba4 <bt_mesh_lpn_friend_update+0x1b0>)
		lpn->established = 1U;
   14aaa:	f043 0310 	orr.w	r3, r3, #16
   14aae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		BT_INFO("Friendship established with 0x%04x", lpn->frnd);
   14ab2:	f046 0203 	orr.w	r2, r6, #3
   14ab6:	f00e fc86 	bl	233c6 <log_1>
		if (cfg->hb_pub.feat & BT_MESH_FEAT_LOW_POWER) {
   14aba:	f8b9 3032 	ldrh.w	r3, [r9, #50]	; 0x32
   14abe:	071a      	lsls	r2, r3, #28
   14ac0:	d501      	bpl.n	14ac6 <bt_mesh_lpn_friend_update+0xd2>
			bt_mesh_heartbeat_send();
   14ac2:	f7fa fa37 	bl	ef34 <bt_mesh_heartbeat_send>
		if (lpn_cb) {
   14ac6:	4b38      	ldr	r3, [pc, #224]	; (14ba8 <bt_mesh_lpn_friend_update+0x1b4>)
   14ac8:	681b      	ldr	r3, [r3, #0]
   14aca:	b113      	cbz	r3, 14ad2 <bt_mesh_lpn_friend_update+0xde>
			lpn_cb(lpn->frnd, true);
   14acc:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   14ace:	2101      	movs	r1, #1
   14ad0:	4798      	blx	r3
		lpn->poll_timeout = MIN(POLL_TIMEOUT_MAX(lpn),
   14ad2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   14ad4:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   14ad8:	4413      	add	r3, r2
   14ada:	f5c3 53e4 	rsb	r3, r3, #7296	; 0x1c80
   14ade:	3304      	adds	r3, #4
   14ae0:	009b      	lsls	r3, r3, #2
   14ae2:	62a3      	str	r3, [r4, #40]	; 0x28
	friend_response_received(lpn);
   14ae4:	f7ff f960 	bl	13da8 <friend_response_received.constprop.0>
	BT_DBG("flags 0x%02x iv_index 0x%08x md %u", msg->flags, iv_index,
   14ae8:	4b30      	ldr	r3, [pc, #192]	; (14bac <bt_mesh_lpn_friend_update+0x1b8>)
   14aea:	f8d5 9001 	ldr.w	r9, [r5, #1]
   14aee:	9300      	str	r3, [sp, #0]
   14af0:	782b      	ldrb	r3, [r5, #0]
   14af2:	482f      	ldr	r0, [pc, #188]	; (14bb0 <bt_mesh_lpn_friend_update+0x1bc>)
   14af4:	fa99 f989 	rev.w	r9, r9
   14af8:	e9cd 3901 	strd	r3, r9, [sp, #4]
   14afc:	796b      	ldrb	r3, [r5, #5]
   14afe:	9303      	str	r3, [sp, #12]
   14b00:	2204      	movs	r2, #4
   14b02:	4669      	mov	r1, sp
   14b04:	f046 0304 	orr.w	r3, r6, #4
   14b08:	f00e fca6 	bl	23458 <log_n>
			      rx->new_key)) {
   14b0c:	7d3a      	ldrb	r2, [r7, #20]
	if (bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(msg->flags),
   14b0e:	7829      	ldrb	r1, [r5, #0]
   14b10:	f3c2 0240 	ubfx	r2, r2, #1, #1
   14b14:	f001 0101 	and.w	r1, r1, #1
   14b18:	4640      	mov	r0, r8
   14b1a:	f7f8 f8b1 	bl	cc80 <bt_mesh_kr_update>
   14b1e:	b110      	cbz	r0, 14b26 <bt_mesh_lpn_friend_update+0x132>
		bt_mesh_net_beacon_update(sub);
   14b20:	4640      	mov	r0, r8
   14b22:	f7f7 fff9 	bl	cb18 <bt_mesh_net_beacon_update>
	bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(msg->flags));
   14b26:	7829      	ldrb	r1, [r5, #0]
   14b28:	4648      	mov	r0, r9
   14b2a:	f3c1 0140 	ubfx	r1, r1, #1, #1
   14b2e:	f7f8 f8f9 	bl	cd24 <bt_mesh_net_iv_update>
	if (lpn->groups_changed) {
   14b32:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   14b36:	07db      	lsls	r3, r3, #31
   14b38:	d50e      	bpl.n	14b58 <bt_mesh_lpn_friend_update+0x164>
		sub_update(TRANS_CTL_OP_FRIEND_SUB_ADD);
   14b3a:	2007      	movs	r0, #7
   14b3c:	f7ff fb10 	bl	14160 <sub_update>
		sub_update(TRANS_CTL_OP_FRIEND_SUB_REM);
   14b40:	2008      	movs	r0, #8
   14b42:	f7ff fb0d 	bl	14160 <sub_update>
		if (!lpn->sent_req) {
   14b46:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   14b4a:	b92a      	cbnz	r2, 14b58 <bt_mesh_lpn_friend_update+0x164>
			lpn->groups_changed = 0U;
   14b4c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   14b50:	f362 0300 	bfi	r3, r2, #0, #1
   14b54:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	if (msg->md) {
   14b58:	796b      	ldrb	r3, [r5, #5]
   14b5a:	b13b      	cbz	r3, 14b6c <bt_mesh_lpn_friend_update+0x178>
		BT_DBG("Requesting for more messages");
   14b5c:	4913      	ldr	r1, [pc, #76]	; (14bac <bt_mesh_lpn_friend_update+0x1b8>)
   14b5e:	4815      	ldr	r0, [pc, #84]	; (14bb4 <bt_mesh_lpn_friend_update+0x1c0>)
   14b60:	f046 0204 	orr.w	r2, r6, #4
   14b64:	f00e fc2f 	bl	233c6 <log_1>
		send_friend_poll();
   14b68:	f7ff f856 	bl	13c18 <send_friend_poll>
	if (!lpn->sent_req) {
   14b6c:	f894 4023 	ldrb.w	r4, [r4, #35]	; 0x23
   14b70:	2c00      	cmp	r4, #0
   14b72:	f47f af60 	bne.w	14a36 <bt_mesh_lpn_friend_update+0x42>
		k_delayed_work_submit(&lpn->timer, poll_timeout(lpn));
   14b76:	f7ff f8d9 	bl	13d2c <poll_timeout.constprop.0>
   14b7a:	4601      	mov	r1, r0
   14b7c:	480e      	ldr	r0, [pc, #56]	; (14bb8 <bt_mesh_lpn_friend_update+0x1c4>)
   14b7e:	f7ff f843 	bl	13c08 <k_delayed_work_submit>
   14b82:	e758      	b.n	14a36 <bt_mesh_lpn_friend_update+0x42>
   14b84:	00028868 	.word	0x00028868
   14b88:	00028980 	.word	0x00028980
   14b8c:	0002dcc7 	.word	0x0002dcc7
   14b90:	20006ab8 	.word	0x20006ab8
   14b94:	0002dcdf 	.word	0x0002dcdf
   14b98:	0002bdef 	.word	0x0002bdef
   14b9c:	20006ac0 	.word	0x20006ac0
   14ba0:	0002dcf8 	.word	0x0002dcf8
   14ba4:	0002dd1d 	.word	0x0002dd1d
   14ba8:	200009c8 	.word	0x200009c8
   14bac:	0002df44 	.word	0x0002df44
   14bb0:	0002dd40 	.word	0x0002dd40
   14bb4:	0002dd67 	.word	0x0002dd67
   14bb8:	20006aec 	.word	0x20006aec

00014bbc <bt_mesh_lpn_poll>:

int bt_mesh_lpn_poll(void)
{
   14bbc:	b508      	push	{r3, lr}
	if (!bt_mesh.lpn.established) {
   14bbe:	4b0b      	ldr	r3, [pc, #44]	; (14bec <bt_mesh_lpn_poll+0x30>)
   14bc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   14bc4:	06db      	lsls	r3, r3, #27
   14bc6:	d50e      	bpl.n	14be6 <bt_mesh_lpn_poll+0x2a>
   14bc8:	4b09      	ldr	r3, [pc, #36]	; (14bf0 <bt_mesh_lpn_poll+0x34>)
   14bca:	4a0a      	ldr	r2, [pc, #40]	; (14bf4 <bt_mesh_lpn_poll+0x38>)
		return -EAGAIN;
	}

	BT_DBG("Requesting more messages");
   14bcc:	490a      	ldr	r1, [pc, #40]	; (14bf8 <bt_mesh_lpn_poll+0x3c>)
   14bce:	480b      	ldr	r0, [pc, #44]	; (14bfc <bt_mesh_lpn_poll+0x40>)
   14bd0:	1ad2      	subs	r2, r2, r3
   14bd2:	08d2      	lsrs	r2, r2, #3
   14bd4:	0192      	lsls	r2, r2, #6
   14bd6:	f042 0204 	orr.w	r2, r2, #4
   14bda:	f00e fbf4 	bl	233c6 <log_1>

	return send_friend_poll();
}
   14bde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return send_friend_poll();
   14be2:	f7ff b819 	b.w	13c18 <send_friend_poll>
}
   14be6:	f06f 000a 	mvn.w	r0, #10
   14bea:	bd08      	pop	{r3, pc}
   14bec:	20006ab8 	.word	0x20006ab8
   14bf0:	00028868 	.word	0x00028868
   14bf4:	00028980 	.word	0x00028980
   14bf8:	0002df5e 	.word	0x0002df5e
   14bfc:	0002dd88 	.word	0x0002dd88

00014c00 <bt_mesh_lpn_init>:
{
	lpn_cb = cb;
}

int bt_mesh_lpn_init(void)
{
   14c00:	b538      	push	{r3, r4, r5, lr}
   14c02:	4b17      	ldr	r3, [pc, #92]	; (14c60 <bt_mesh_lpn_init+0x60>)
   14c04:	4c17      	ldr	r4, [pc, #92]	; (14c64 <bt_mesh_lpn_init+0x64>)
	struct bt_mesh_lpn *lpn = &bt_mesh.lpn;

	BT_DBG("");
   14c06:	4918      	ldr	r1, [pc, #96]	; (14c68 <bt_mesh_lpn_init+0x68>)
   14c08:	4818      	ldr	r0, [pc, #96]	; (14c6c <bt_mesh_lpn_init+0x6c>)

	k_delayed_work_init(&lpn->timer, lpn_timeout);

	if (lpn->state == BT_MESH_LPN_ENABLED) {
   14c0a:	4d19      	ldr	r5, [pc, #100]	; (14c70 <bt_mesh_lpn_init+0x70>)
   14c0c:	1ae4      	subs	r4, r4, r3
   14c0e:	08e4      	lsrs	r4, r4, #3
	BT_DBG("");
   14c10:	01a4      	lsls	r4, r4, #6
   14c12:	f044 0404 	orr.w	r4, r4, #4
   14c16:	4622      	mov	r2, r4
   14c18:	f00e fbd5 	bl	233c6 <log_1>
	k_delayed_work_init(&lpn->timer, lpn_timeout);
   14c1c:	4915      	ldr	r1, [pc, #84]	; (14c74 <bt_mesh_lpn_init+0x74>)
   14c1e:	4816      	ldr	r0, [pc, #88]	; (14c78 <bt_mesh_lpn_init+0x78>)
   14c20:	f013 fc32 	bl	28488 <k_delayed_work_init>
	if (lpn->state == BT_MESH_LPN_ENABLED) {
   14c24:	f895 3020 	ldrb.w	r3, [r5, #32]
   14c28:	2b03      	cmp	r3, #3
   14c2a:	d105      	bne.n	14c38 <bt_mesh_lpn_init+0x38>
		if (IS_ENABLED(CONFIG_BT_MESH_LPN_ESTABLISHMENT)) {
			bt_mesh_scan_disable();
   14c2c:	f7f7 f9c8 	bl	bfc0 <bt_mesh_scan_disable>
		} else {
			bt_mesh_scan_enable();
		}

		send_friend_req(lpn);
   14c30:	f7ff f8ee 	bl	13e10 <send_friend_req.constprop.0>
			k_delayed_work_submit(&lpn->timer, LPN_AUTO_TIMEOUT);
		}
	}

	return 0;
}
   14c34:	2000      	movs	r0, #0
   14c36:	bd38      	pop	{r3, r4, r5, pc}
		bt_mesh_scan_enable();
   14c38:	f7f7 f988 	bl	bf4c <bt_mesh_scan_enable>
			BT_DBG("Waiting %u ms for messages", LPN_AUTO_TIMEOUT);
   14c3c:	490a      	ldr	r1, [pc, #40]	; (14c68 <bt_mesh_lpn_init+0x68>)
   14c3e:	480f      	ldr	r0, [pc, #60]	; (14c7c <bt_mesh_lpn_init+0x7c>)
   14c40:	4623      	mov	r3, r4
   14c42:	f643 2298 	movw	r2, #15000	; 0x3a98
   14c46:	f00e fbd2 	bl	233ee <log_2>
			lpn_set_state(BT_MESH_LPN_TIMER);
   14c4a:	2002      	movs	r0, #2
   14c4c:	f7fe ffae 	bl	13bac <lpn_set_state>
			k_delayed_work_submit(&lpn->timer, LPN_AUTO_TIMEOUT);
   14c50:	f643 2198 	movw	r1, #15000	; 0x3a98
   14c54:	f105 0034 	add.w	r0, r5, #52	; 0x34
   14c58:	f7fe ffd6 	bl	13c08 <k_delayed_work_submit>
   14c5c:	e7ea      	b.n	14c34 <bt_mesh_lpn_init+0x34>
   14c5e:	bf00      	nop
   14c60:	00028868 	.word	0x00028868
   14c64:	00028980 	.word	0x00028980
   14c68:	0002df6f 	.word	0x0002df6f
   14c6c:	000299a3 	.word	0x000299a3
   14c70:	20006ab8 	.word	0x20006ab8
   14c74:	000142dd 	.word	0x000142dd
   14c78:	20006aec 	.word	0x20006aec
   14c7c:	0002dda5 	.word	0x0002dda5

00014c80 <reset_state>:
static void send_pub_key(void);
static void pub_key_ready(const u8_t *pkey);
static void start_sent(int err, void *cb_data);

static int reset_state(void)
{
   14c80:	b510      	push	{r4, lr}
		.func = pub_key_ready,
	};
	int err;

	/* Disable Attention Timer if it was set */
	if (link.conf_inputs[0]) {
   14c82:	4b10      	ldr	r3, [pc, #64]	; (14cc4 <reset_state+0x44>)
   14c84:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   14c88:	b11b      	cbz	r3, 14c92 <reset_state+0x12>
		bt_mesh_attention(NULL, 0);
   14c8a:	2100      	movs	r1, #0
   14c8c:	4608      	mov	r0, r1
   14c8e:	f7fd fd37 	bl	12700 <bt_mesh_attention>
	if (IS_ENABLED(CONFIG_BT_MESH_PROVISIONER) &&
	    link.provisioner->node != NULL) {
		bt_mesh_cdb_node_del(link.provisioner->node, false);
	}

	memset(&link, 0, sizeof(link));
   14c92:	f44f 7290 	mov.w	r2, #288	; 0x120
   14c96:	2100      	movs	r1, #0
   14c98:	480a      	ldr	r0, [pc, #40]	; (14cc4 <reset_state+0x44>)
   14c9a:	f010 fa24 	bl	250e6 <memset>

	err = bt_pub_key_gen(&pub_key_cb);
   14c9e:	480a      	ldr	r0, [pc, #40]	; (14cc8 <reset_state+0x48>)
   14ca0:	f7f3 fd98 	bl	87d4 <bt_pub_key_gen>
	if (err) {
   14ca4:	4604      	mov	r4, r0
   14ca6:	b150      	cbz	r0, 14cbe <reset_state+0x3e>
   14ca8:	4a08      	ldr	r2, [pc, #32]	; (14ccc <reset_state+0x4c>)
   14caa:	4b09      	ldr	r3, [pc, #36]	; (14cd0 <reset_state+0x50>)
   14cac:	1ad2      	subs	r2, r2, r3
   14cae:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to generate public key (%d)", err);
   14cb0:	0192      	lsls	r2, r2, #6
   14cb2:	4601      	mov	r1, r0
   14cb4:	f042 0201 	orr.w	r2, r2, #1
   14cb8:	4806      	ldr	r0, [pc, #24]	; (14cd4 <reset_state+0x54>)
   14cba:	f00e fb84 	bl	233c6 <log_1>
		return err;
	}

	return 0;
}
   14cbe:	4620      	mov	r0, r4
   14cc0:	bd10      	pop	{r4, pc}
   14cc2:	bf00      	nop
   14cc4:	200009cc 	.word	0x200009cc
   14cc8:	20006dc4 	.word	0x20006dc4
   14ccc:	000289a8 	.word	0x000289a8
   14cd0:	00028868 	.word	0x00028868
   14cd4:	0002df80 	.word	0x0002df80

00014cd8 <prov_failed>:
		bt_mesh_proxy_identity_enable();
	}
}

static void prov_failed(const u8_t *data)
{
   14cd8:	b508      	push	{r3, lr}
   14cda:	4a07      	ldr	r2, [pc, #28]	; (14cf8 <prov_failed+0x20>)
   14cdc:	4b07      	ldr	r3, [pc, #28]	; (14cfc <prov_failed+0x24>)
	BT_WARN("Error: 0x%02x", data[0]);
   14cde:	7801      	ldrb	r1, [r0, #0]
   14ce0:	4807      	ldr	r0, [pc, #28]	; (14d00 <prov_failed+0x28>)
   14ce2:	1ad2      	subs	r2, r2, r3
   14ce4:	08d2      	lsrs	r2, r2, #3
   14ce6:	0192      	lsls	r2, r2, #6
   14ce8:	f042 0202 	orr.w	r2, r2, #2
   14cec:	f00e fb6b 	bl	233c6 <log_1>
	reset_state();
}
   14cf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	reset_state();
   14cf4:	f7ff bfc4 	b.w	14c80 <reset_state>
   14cf8:	000289a8 	.word	0x000289a8
   14cfc:	00028868 	.word	0x00028868
   14d00:	0002dfa3 	.word	0x0002dfa3

00014d04 <prov_link_closed>:
	}
}

static void prov_link_closed(const struct prov_bearer *bearer, void *cb_data,
			     enum prov_bearer_link_status reason)
{
   14d04:	b510      	push	{r4, lr}
   14d06:	4604      	mov	r4, r0
	/* Reset state before calling link_close, so a new provisioning
	 * procedure can be started from the callback.
	 */
	reset_state();
   14d08:	f7ff ffba 	bl	14c80 <reset_state>

	BT_DBG("%u", reason);

	if (prov->link_close) {
   14d0c:	4b04      	ldr	r3, [pc, #16]	; (14d20 <prov_link_closed+0x1c>)
   14d0e:	681b      	ldr	r3, [r3, #0]
   14d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14d12:	b11b      	cbz	r3, 14d1c <prov_link_closed+0x18>
		prov->link_close(bearer->type);
   14d14:	7820      	ldrb	r0, [r4, #0]
	}
}
   14d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov->link_close(bearer->type);
   14d1a:	4718      	bx	r3
}
   14d1c:	bd10      	pop	{r4, pc}
   14d1e:	bf00      	nop
   14d20:	20000aec 	.word	0x20000aec

00014d24 <prov_send.constprop.0>:
	return link.bearer->send(buf, cb, NULL);
   14d24:	4b03      	ldr	r3, [pc, #12]	; (14d34 <prov_send.constprop.0+0x10>)
   14d26:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   14d2a:	2200      	movs	r2, #0
   14d2c:	689b      	ldr	r3, [r3, #8]
   14d2e:	4611      	mov	r1, r2
   14d30:	4718      	bx	r3
   14d32:	bf00      	nop
   14d34:	200009cc 	.word	0x200009cc

00014d38 <prov_invite>:
{
   14d38:	b530      	push	{r4, r5, lr}
   14d3a:	b089      	sub	sp, #36	; 0x24
	if (data[0]) {
   14d3c:	7801      	ldrb	r1, [r0, #0]
	PROV_BUF(buf, 12);
   14d3e:	ab03      	add	r3, sp, #12
   14d40:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
   14d44:	e9cd 2301 	strd	r2, r3, [sp, #4]
{
   14d48:	4604      	mov	r4, r0
	PROV_BUF(buf, 12);
   14d4a:	9300      	str	r3, [sp, #0]
	if (data[0]) {
   14d4c:	b111      	cbz	r1, 14d54 <prov_invite+0x1c>
		bt_mesh_attention(NULL, data[0]);
   14d4e:	2000      	movs	r0, #0
   14d50:	f7fd fcd6 	bl	12700 <bt_mesh_attention>
	link.conf_inputs[0] = data[0];
   14d54:	4d26      	ldr	r5, [pc, #152]	; (14df0 <prov_invite+0xb8>)
   14d56:	7823      	ldrb	r3, [r4, #0]
   14d58:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	prov_buf_init(&buf, PROV_CAPABILITIES);
   14d5c:	2101      	movs	r1, #1
   14d5e:	4668      	mov	r0, sp
   14d60:	f012 f946 	bl	26ff0 <prov_buf_init>
	net_buf_simple_add_u8(&buf, bt_mesh_elem_count());
   14d64:	f7fa fd9a 	bl	f89c <bt_mesh_elem_count>
   14d68:	4601      	mov	r1, r0
   14d6a:	4668      	mov	r0, sp
   14d6c:	f013 f8ca 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, prov->static_val ? BIT(0) : 0x00);
   14d70:	4c20      	ldr	r4, [pc, #128]	; (14df4 <prov_invite+0xbc>)
	net_buf_simple_add_be16(&buf, BIT(PROV_ALG_P256));
   14d72:	2101      	movs	r1, #1
   14d74:	4668      	mov	r0, sp
   14d76:	f013 f8d5 	bl	27f24 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, PUB_KEY_NO_OOB);
   14d7a:	2100      	movs	r1, #0
   14d7c:	4668      	mov	r0, sp
   14d7e:	f013 f8c1 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, prov->static_val ? BIT(0) : 0x00);
   14d82:	6823      	ldr	r3, [r4, #0]
   14d84:	68d9      	ldr	r1, [r3, #12]
   14d86:	3900      	subs	r1, #0
   14d88:	bf18      	it	ne
   14d8a:	2101      	movne	r1, #1
   14d8c:	4668      	mov	r0, sp
   14d8e:	f013 f8b9 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, prov->output_size);
   14d92:	6823      	ldr	r3, [r4, #0]
   14d94:	4668      	mov	r0, sp
   14d96:	7c59      	ldrb	r1, [r3, #17]
   14d98:	f013 f8b4 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, prov->output_actions);
   14d9c:	6823      	ldr	r3, [r4, #0]
   14d9e:	4668      	mov	r0, sp
   14da0:	8a59      	ldrh	r1, [r3, #18]
   14da2:	f013 f8bf 	bl	27f24 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, prov->input_size);
   14da6:	6823      	ldr	r3, [r4, #0]
   14da8:	4668      	mov	r0, sp
   14daa:	7d19      	ldrb	r1, [r3, #20]
   14dac:	f013 f8aa 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, prov->input_actions);
   14db0:	6823      	ldr	r3, [r4, #0]
   14db2:	4668      	mov	r0, sp
   14db4:	8ad9      	ldrh	r1, [r3, #22]
   14db6:	f013 f8b5 	bl	27f24 <net_buf_simple_add_be16>
	memcpy(&link.conf_inputs[1], &buf.data[1], 11);
   14dba:	9900      	ldr	r1, [sp, #0]
   14dbc:	220b      	movs	r2, #11
   14dbe:	3101      	adds	r1, #1
   14dc0:	f105 0079 	add.w	r0, r5, #121	; 0x79
   14dc4:	f010 f964 	bl	25090 <memcpy>
	if (prov_send(&buf, NULL)) {
   14dc8:	4668      	mov	r0, sp
   14dca:	f7ff ffab 	bl	14d24 <prov_send.constprop.0>
   14dce:	b158      	cbz	r0, 14de8 <prov_invite+0xb0>
   14dd0:	4909      	ldr	r1, [pc, #36]	; (14df8 <prov_invite+0xc0>)
   14dd2:	4b0a      	ldr	r3, [pc, #40]	; (14dfc <prov_invite+0xc4>)
		BT_ERR("Failed to send capabilities");
   14dd4:	480a      	ldr	r0, [pc, #40]	; (14e00 <prov_invite+0xc8>)
   14dd6:	1ac9      	subs	r1, r1, r3
   14dd8:	08c9      	lsrs	r1, r1, #3
   14dda:	0189      	lsls	r1, r1, #6
   14ddc:	f041 0101 	orr.w	r1, r1, #1
   14de0:	f00e fae4 	bl	233ac <log_0>
}
   14de4:	b009      	add	sp, #36	; 0x24
   14de6:	bd30      	pop	{r4, r5, pc}
	link.expect = PROV_START;
   14de8:	2302      	movs	r3, #2
   14dea:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
   14dee:	e7f9      	b.n	14de4 <prov_invite+0xac>
   14df0:	200009cc 	.word	0x200009cc
   14df4:	20000aec 	.word	0x20000aec
   14df8:	000289a8 	.word	0x000289a8
   14dfc:	00028868 	.word	0x00028868
   14e00:	0002dfb1 	.word	0x0002dfb1

00014e04 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14e04:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   14e06:	b570      	push	{r4, r5, r6, lr}
   14e08:	4604      	mov	r4, r0
   14e0a:	460d      	mov	r5, r1
   14e0c:	f101 0620 	add.w	r6, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14e10:	d919      	bls.n	14e46 <sys_memcpy_swap.constprop.0+0x42>
   14e12:	42b0      	cmp	r0, r6
   14e14:	d20e      	bcs.n	14e34 <sys_memcpy_swap.constprop.0+0x30>
   14e16:	490e      	ldr	r1, [pc, #56]	; (14e50 <sys_memcpy_swap.constprop.0+0x4c>)
   14e18:	4a0e      	ldr	r2, [pc, #56]	; (14e54 <sys_memcpy_swap.constprop.0+0x50>)
   14e1a:	480f      	ldr	r0, [pc, #60]	; (14e58 <sys_memcpy_swap.constprop.0+0x54>)
   14e1c:	f240 2317 	movw	r3, #535	; 0x217
   14e20:	f00e fa53 	bl	232ca <printk>
   14e24:	480d      	ldr	r0, [pc, #52]	; (14e5c <sys_memcpy_swap.constprop.0+0x58>)
   14e26:	f00e fa50 	bl	232ca <printk>
   14e2a:	480a      	ldr	r0, [pc, #40]	; (14e54 <sys_memcpy_swap.constprop.0+0x50>)
   14e2c:	f240 2117 	movw	r1, #535	; 0x217
   14e30:	f00e fa8e 	bl	23350 <assert_post_action>
	for (; length > 0; length--) {
   14e34:	4633      	mov	r3, r6
   14e36:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   14e38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   14e3c:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   14e40:	42ab      	cmp	r3, r5
   14e42:	d1f9      	bne.n	14e38 <sys_memcpy_swap.constprop.0+0x34>
}
   14e44:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14e46:	d0e6      	beq.n	14e16 <sys_memcpy_swap.constprop.0+0x12>
   14e48:	f100 0320 	add.w	r3, r0, #32
   14e4c:	4299      	cmp	r1, r3
   14e4e:	e7e1      	b.n	14e14 <sys_memcpy_swap.constprop.0+0x10>
   14e50:	0002a7d2 	.word	0x0002a7d2
   14e54:	0002a7ab 	.word	0x0002a7ab
   14e58:	000297e6 	.word	0x000297e6
   14e5c:	0002a829 	.word	0x0002a829

00014e60 <atomic_get.constprop.0>:
   14e60:	4b03      	ldr	r3, [pc, #12]	; (14e70 <atomic_get.constprop.0+0x10>)
   14e62:	f3bf 8f5b 	dmb	ish
   14e66:	6818      	ldr	r0, [r3, #0]
   14e68:	f3bf 8f5b 	dmb	ish
}
   14e6c:	4770      	bx	lr
   14e6e:	bf00      	nop
   14e70:	200009cc 	.word	0x200009cc

00014e74 <prov_link_opened>:
{
   14e74:	b530      	push	{r4, r5, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14e76:	2102      	movs	r1, #2
   14e78:	b087      	sub	sp, #28
   14e7a:	4605      	mov	r5, r0
   14e7c:	481b      	ldr	r0, [pc, #108]	; (14eec <prov_link_opened+0x78>)
   14e7e:	f012 f8c3 	bl	27008 <atomic_or>
	if (prov->link_open) {
   14e82:	4b1b      	ldr	r3, [pc, #108]	; (14ef0 <prov_link_opened+0x7c>)
   14e84:	681b      	ldr	r3, [r3, #0]
   14e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14e88:	b10b      	cbz	r3, 14e8e <prov_link_opened+0x1a>
		prov->link_open(bearer->type);
   14e8a:	7828      	ldrb	r0, [r5, #0]
   14e8c:	4798      	blx	r3
	link.bearer = bearer;
   14e8e:	4c17      	ldr	r4, [pc, #92]	; (14eec <prov_link_opened+0x78>)
   14e90:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14e94:	f7ff ffe4 	bl	14e60 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, PROVISIONER)) {
   14e98:	0682      	lsls	r2, r0, #26
   14e9a:	f3c0 1340 	ubfx	r3, r0, #5, #1
   14e9e:	d521      	bpl.n	14ee4 <prov_link_opened+0x70>
	PROV_BUF(inv, 2);
   14ea0:	ab01      	add	r3, sp, #4
   14ea2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
	prov_buf_init(&inv, PROV_INVITE);
   14ea6:	2100      	movs	r1, #0
   14ea8:	a803      	add	r0, sp, #12
	PROV_BUF(inv, 2);
   14eaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
   14eae:	9303      	str	r3, [sp, #12]
	prov_buf_init(&inv, PROV_INVITE);
   14eb0:	f012 f89e 	bl	26ff0 <prov_buf_init>
	net_buf_simple_add_u8(&inv, link.provisioner->attention_duration);
   14eb4:	7b21      	ldrb	r1, [r4, #12]
   14eb6:	a803      	add	r0, sp, #12
   14eb8:	f013 f824 	bl	27f04 <net_buf_simple_add_u8>
	link.conf_inputs[0] = link.provisioner->attention_duration;
   14ebc:	7b23      	ldrb	r3, [r4, #12]
   14ebe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	if (prov_send(&inv, NULL)) {
   14ec2:	a803      	add	r0, sp, #12
   14ec4:	f7ff ff2e 	bl	14d24 <prov_send.constprop.0>
   14ec8:	b158      	cbz	r0, 14ee2 <prov_link_opened+0x6e>
   14eca:	490a      	ldr	r1, [pc, #40]	; (14ef4 <prov_link_opened+0x80>)
   14ecc:	4b0a      	ldr	r3, [pc, #40]	; (14ef8 <prov_link_opened+0x84>)
		BT_ERR("Failed to send invite");
   14ece:	480b      	ldr	r0, [pc, #44]	; (14efc <prov_link_opened+0x88>)
   14ed0:	1ac9      	subs	r1, r1, r3
   14ed2:	08c9      	lsrs	r1, r1, #3
   14ed4:	0189      	lsls	r1, r1, #6
   14ed6:	f041 0101 	orr.w	r1, r1, #1
   14eda:	f00e fa67 	bl	233ac <log_0>
}
   14ede:	b007      	add	sp, #28
   14ee0:	bd30      	pop	{r4, r5, pc}
	link.expect = PROV_CAPABILITIES;
   14ee2:	2301      	movs	r3, #1
		link.expect = PROV_INVITE;
   14ee4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
   14ee8:	e7f9      	b.n	14ede <prov_link_opened+0x6a>
   14eea:	bf00      	nop
   14eec:	200009cc 	.word	0x200009cc
   14ef0:	20000aec 	.word	0x20000aec
   14ef4:	000289a8 	.word	0x000289a8
   14ef8:	00028868 	.word	0x00028868
   14efc:	0002dfcd 	.word	0x0002dfcd

00014f00 <send_random>:
{
   14f00:	b500      	push	{lr}
   14f02:	b08b      	sub	sp, #44	; 0x2c
	PROV_BUF(rnd, 17);
   14f04:	ab04      	add	r3, sp, #16
   14f06:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
	prov_buf_init(&rnd, PROV_RANDOM);
   14f0a:	2106      	movs	r1, #6
   14f0c:	a801      	add	r0, sp, #4
	PROV_BUF(rnd, 17);
   14f0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   14f12:	9301      	str	r3, [sp, #4]
	prov_buf_init(&rnd, PROV_RANDOM);
   14f14:	f012 f86c 	bl	26ff0 <prov_buf_init>
	net_buf_simple_add_mem(&rnd, link.rand, 16);
   14f18:	4910      	ldr	r1, [pc, #64]	; (14f5c <send_random+0x5c>)
   14f1a:	2210      	movs	r2, #16
   14f1c:	a801      	add	r0, sp, #4
   14f1e:	f012 ffe5 	bl	27eec <net_buf_simple_add_mem>
	if (prov_send(&rnd, NULL)) {
   14f22:	a801      	add	r0, sp, #4
   14f24:	f7ff fefe 	bl	14d24 <prov_send.constprop.0>
   14f28:	b160      	cbz	r0, 14f44 <send_random+0x44>
   14f2a:	490d      	ldr	r1, [pc, #52]	; (14f60 <send_random+0x60>)
   14f2c:	4b0d      	ldr	r3, [pc, #52]	; (14f64 <send_random+0x64>)
		BT_ERR("Failed to send Provisioning Random");
   14f2e:	480e      	ldr	r0, [pc, #56]	; (14f68 <send_random+0x68>)
   14f30:	1ac9      	subs	r1, r1, r3
   14f32:	08c9      	lsrs	r1, r1, #3
   14f34:	0189      	lsls	r1, r1, #6
   14f36:	f041 0101 	orr.w	r1, r1, #1
   14f3a:	f00e fa37 	bl	233ac <log_0>
}
   14f3e:	b00b      	add	sp, #44	; 0x2c
   14f40:	f85d fb04 	ldr.w	pc, [sp], #4
   14f44:	f7ff ff8c 	bl	14e60 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14f48:	4b08      	ldr	r3, [pc, #32]	; (14f6c <send_random+0x6c>)
	if (atomic_test_bit(link.flags, PROVISIONER)) {
   14f4a:	f010 0f20 	tst.w	r0, #32
		link.expect = PROV_DATA;
   14f4e:	bf14      	ite	ne
   14f50:	2206      	movne	r2, #6
   14f52:	2207      	moveq	r2, #7
   14f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   14f58:	e7f1      	b.n	14f3e <send_random+0x3e>
   14f5a:	bf00      	nop
   14f5c:	20000a04 	.word	0x20000a04
   14f60:	000289a8 	.word	0x000289a8
   14f64:	00028868 	.word	0x00028868
   14f68:	0002dfe3 	.word	0x0002dfe3
   14f6c:	200009cc 	.word	0x200009cc

00014f70 <prov_fail>:
{
   14f70:	b510      	push	{r4, lr}
   14f72:	b086      	sub	sp, #24
   14f74:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14f76:	f7ff ff73 	bl	14e60 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, PROVISIONER)) {
   14f7a:	f010 0f20 	tst.w	r0, #32
   14f7e:	4b16      	ldr	r3, [pc, #88]	; (14fd8 <prov_fail+0x68>)
   14f80:	d009      	beq.n	14f96 <prov_fail+0x26>
	link.expect = PROV_NO_PDU;
   14f82:	22ff      	movs	r2, #255	; 0xff
   14f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	link.bearer->link_close(status);
   14f88:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   14f8c:	2002      	movs	r0, #2
   14f8e:	695b      	ldr	r3, [r3, #20]
   14f90:	4798      	blx	r3
}
   14f92:	b006      	add	sp, #24
   14f94:	bd10      	pop	{r4, pc}
	PROV_BUF(buf, 2);
   14f96:	aa01      	add	r2, sp, #4
   14f98:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
   14f9c:	e9cd 1204 	strd	r1, r2, [sp, #16]
   14fa0:	9203      	str	r2, [sp, #12]
	prov_buf_init(&buf, PROV_FAILED);
   14fa2:	2109      	movs	r1, #9
	link.expect = PROV_NO_PDU;
   14fa4:	22ff      	movs	r2, #255	; 0xff
	prov_buf_init(&buf, PROV_FAILED);
   14fa6:	a803      	add	r0, sp, #12
	link.expect = PROV_NO_PDU;
   14fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	prov_buf_init(&buf, PROV_FAILED);
   14fac:	f012 f820 	bl	26ff0 <prov_buf_init>
	net_buf_simple_add_u8(&buf, err);
   14fb0:	4621      	mov	r1, r4
   14fb2:	a803      	add	r0, sp, #12
   14fb4:	f012 ffa6 	bl	27f04 <net_buf_simple_add_u8>
	if (prov_send(&buf, NULL)) {
   14fb8:	a803      	add	r0, sp, #12
   14fba:	f7ff feb3 	bl	14d24 <prov_send.constprop.0>
   14fbe:	2800      	cmp	r0, #0
   14fc0:	d0e7      	beq.n	14f92 <prov_fail+0x22>
   14fc2:	4b06      	ldr	r3, [pc, #24]	; (14fdc <prov_fail+0x6c>)
   14fc4:	4906      	ldr	r1, [pc, #24]	; (14fe0 <prov_fail+0x70>)
		BT_ERR("Failed to send Provisioning Failed message");
   14fc6:	4807      	ldr	r0, [pc, #28]	; (14fe4 <prov_fail+0x74>)
   14fc8:	1ac9      	subs	r1, r1, r3
   14fca:	08c9      	lsrs	r1, r1, #3
   14fcc:	0189      	lsls	r1, r1, #6
   14fce:	f041 0101 	orr.w	r1, r1, #1
   14fd2:	f00e f9eb 	bl	233ac <log_0>
}
   14fd6:	e7dc      	b.n	14f92 <prov_fail+0x22>
   14fd8:	200009cc 	.word	0x200009cc
   14fdc:	00028868 	.word	0x00028868
   14fe0:	000289a8 	.word	0x000289a8
   14fe4:	0002e006 	.word	0x0002e006

00014fe8 <prov_recv>:
{
   14fe8:	b510      	push	{r4, lr}
	u8_t type = buf->data[0];
   14fea:	6810      	ldr	r0, [r2, #0]
   14fec:	7804      	ldrb	r4, [r0, #0]
	if (type != PROV_FAILED && type != link.expect) {
   14fee:	2c09      	cmp	r4, #9
   14ff0:	d023      	beq.n	1503a <prov_recv+0x52>
   14ff2:	4b1f      	ldr	r3, [pc, #124]	; (15070 <prov_recv+0x88>)
   14ff4:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   14ff8:	42a1      	cmp	r1, r4
   14ffa:	d010      	beq.n	1501e <prov_recv+0x36>
   14ffc:	4a1d      	ldr	r2, [pc, #116]	; (15074 <prov_recv+0x8c>)
   14ffe:	4b1e      	ldr	r3, [pc, #120]	; (15078 <prov_recv+0x90>)
		BT_WARN("Unexpected msg 0x%02x != 0x%02x", type, link.expect);
   15000:	481e      	ldr	r0, [pc, #120]	; (1507c <prov_recv+0x94>)
   15002:	1a9b      	subs	r3, r3, r2
   15004:	08db      	lsrs	r3, r3, #3
   15006:	019b      	lsls	r3, r3, #6
   15008:	460a      	mov	r2, r1
   1500a:	f043 0302 	orr.w	r3, r3, #2
   1500e:	4621      	mov	r1, r4
   15010:	f00e f9ed 	bl	233ee <log_2>
		prov_fail(PROV_ERR_UNEXP_PDU);
   15014:	2003      	movs	r0, #3
}
   15016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov_fail(PROV_ERR_NVAL_PDU);
   1501a:	f7ff bfa9 	b.w	14f70 <prov_fail>
	if (type >= ARRAY_SIZE(prov_handlers)) {
   1501e:	2909      	cmp	r1, #9
   15020:	d90b      	bls.n	1503a <prov_recv+0x52>
   15022:	4b14      	ldr	r3, [pc, #80]	; (15074 <prov_recv+0x8c>)
   15024:	4a14      	ldr	r2, [pc, #80]	; (15078 <prov_recv+0x90>)
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
   15026:	4816      	ldr	r0, [pc, #88]	; (15080 <prov_recv+0x98>)
   15028:	1ad2      	subs	r2, r2, r3
   1502a:	08d2      	lsrs	r2, r2, #3
   1502c:	0192      	lsls	r2, r2, #6
   1502e:	f042 0201 	orr.w	r2, r2, #1
   15032:	f00e f9c8 	bl	233c6 <log_1>
		prov_fail(PROV_ERR_NVAL_PDU);
   15036:	2001      	movs	r0, #1
   15038:	e7ed      	b.n	15016 <prov_recv+0x2e>
	if (1 + prov_handlers[type].len != buf->len) {
   1503a:	8891      	ldrh	r1, [r2, #4]
   1503c:	4a11      	ldr	r2, [pc, #68]	; (15084 <prov_recv+0x9c>)
   1503e:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
   15042:	889b      	ldrh	r3, [r3, #4]
   15044:	3301      	adds	r3, #1
   15046:	428b      	cmp	r3, r1
   15048:	d00c      	beq.n	15064 <prov_recv+0x7c>
   1504a:	4a0a      	ldr	r2, [pc, #40]	; (15074 <prov_recv+0x8c>)
   1504c:	4b0a      	ldr	r3, [pc, #40]	; (15078 <prov_recv+0x90>)
		BT_ERR("Invalid length %u for type 0x%02x", buf->len, type);
   1504e:	480e      	ldr	r0, [pc, #56]	; (15088 <prov_recv+0xa0>)
   15050:	1a9b      	subs	r3, r3, r2
   15052:	08db      	lsrs	r3, r3, #3
   15054:	019b      	lsls	r3, r3, #6
   15056:	f043 0301 	orr.w	r3, r3, #1
   1505a:	4622      	mov	r2, r4
   1505c:	f00e f9c7 	bl	233ee <log_2>
		prov_fail(PROV_ERR_NVAL_FMT);
   15060:	2002      	movs	r0, #2
   15062:	e7d8      	b.n	15016 <prov_recv+0x2e>
	prov_handlers[type].func(&buf->data[1]);
   15064:	f852 3034 	ldr.w	r3, [r2, r4, lsl #3]
   15068:	3001      	adds	r0, #1
}
   1506a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prov_handlers[type].func(&buf->data[1]);
   1506e:	4718      	bx	r3
   15070:	200009cc 	.word	0x200009cc
   15074:	00028868 	.word	0x00028868
   15078:	000289a8 	.word	0x000289a8
   1507c:	0002e031 	.word	0x0002e031
   15080:	0002e051 	.word	0x0002e051
   15084:	000293d0 	.word	0x000293d0
   15088:	0002e076 	.word	0x0002e076

0001508c <send_pub_key>:
{
   1508c:	b510      	push	{r4, lr}
   1508e:	b096      	sub	sp, #88	; 0x58
	PROV_BUF(buf, 65);
   15090:	ab04      	add	r3, sp, #16
   15092:	f44f 028c 	mov.w	r2, #4587520	; 0x460000
   15096:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1509a:	9301      	str	r3, [sp, #4]
	key = bt_pub_key_get();
   1509c:	f7f3 fbea 	bl	8874 <bt_pub_key_get>
	if (!key) {
   150a0:	4604      	mov	r4, r0
   150a2:	b970      	cbnz	r0, 150c2 <send_pub_key+0x36>
   150a4:	4b29      	ldr	r3, [pc, #164]	; (1514c <send_pub_key+0xc0>)
   150a6:	492a      	ldr	r1, [pc, #168]	; (15150 <send_pub_key+0xc4>)
		BT_ERR("No public key available");
   150a8:	482a      	ldr	r0, [pc, #168]	; (15154 <send_pub_key+0xc8>)
   150aa:	1ac9      	subs	r1, r1, r3
   150ac:	08c9      	lsrs	r1, r1, #3
   150ae:	0189      	lsls	r1, r1, #6
   150b0:	f041 0101 	orr.w	r1, r1, #1
   150b4:	f00e f97a 	bl	233ac <log_0>
		prov_fail(PROV_ERR_UNEXP_ERR);
   150b8:	2007      	movs	r0, #7
   150ba:	f7ff ff59 	bl	14f70 <prov_fail>
}
   150be:	b016      	add	sp, #88	; 0x58
   150c0:	bd10      	pop	{r4, pc}
	prov_buf_init(&buf, PROV_PUB_KEY);
   150c2:	2103      	movs	r1, #3
   150c4:	a801      	add	r0, sp, #4
   150c6:	f011 ff93 	bl	26ff0 <prov_buf_init>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), key, 32);
   150ca:	2120      	movs	r1, #32
   150cc:	a801      	add	r0, sp, #4
   150ce:	f009 faa5 	bl	1e61c <net_buf_simple_add>
   150d2:	4621      	mov	r1, r4
   150d4:	f7ff fe96 	bl	14e04 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), &key[32], 32);
   150d8:	2120      	movs	r1, #32
   150da:	a801      	add	r0, sp, #4
   150dc:	f009 fa9e 	bl	1e61c <net_buf_simple_add>
   150e0:	f104 0120 	add.w	r1, r4, #32
   150e4:	f7ff fe8e 	bl	14e04 <sys_memcpy_swap.constprop.0>
   150e8:	f7ff feba 	bl	14e60 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   150ec:	9901      	ldr	r1, [sp, #4]
	if (atomic_test_bit(link.flags, PROVISIONER)) {
   150ee:	f010 0f20 	tst.w	r0, #32
		memcpy(&link.conf_inputs[17], &buf.data[1], 64);
   150f2:	bf14      	ite	ne
   150f4:	4818      	ldrne	r0, [pc, #96]	; (15158 <send_pub_key+0xcc>)
		memcpy(&link.conf_inputs[81], &buf.data[1], 64);
   150f6:	4819      	ldreq	r0, [pc, #100]	; (1515c <send_pub_key+0xd0>)
		memcpy(&link.conf_inputs[17], &buf.data[1], 64);
   150f8:	2240      	movs	r2, #64	; 0x40
   150fa:	3101      	adds	r1, #1
		memcpy(&link.conf_inputs[81], &buf.data[1], 64);
   150fc:	f00f ffc8 	bl	25090 <memcpy>
	if (prov_send(&buf, NULL)) {
   15100:	a801      	add	r0, sp, #4
   15102:	f7ff fe0f 	bl	14d24 <prov_send.constprop.0>
   15106:	b150      	cbz	r0, 1511e <send_pub_key+0x92>
   15108:	4b10      	ldr	r3, [pc, #64]	; (1514c <send_pub_key+0xc0>)
   1510a:	4911      	ldr	r1, [pc, #68]	; (15150 <send_pub_key+0xc4>)
		BT_ERR("Failed to send Public Key");
   1510c:	4814      	ldr	r0, [pc, #80]	; (15160 <send_pub_key+0xd4>)
   1510e:	1ac9      	subs	r1, r1, r3
   15110:	08c9      	lsrs	r1, r1, #3
   15112:	0189      	lsls	r1, r1, #6
   15114:	f041 0101 	orr.w	r1, r1, #1
   15118:	f00e f948 	bl	233ac <log_0>
		return;
   1511c:	e7cf      	b.n	150be <send_pub_key+0x32>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1511e:	f7ff fe9f 	bl	14e60 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, PROVISIONER)) {
   15122:	f010 0f20 	tst.w	r0, #32
   15126:	4a0f      	ldr	r2, [pc, #60]	; (15164 <send_pub_key+0xd8>)
   15128:	d003      	beq.n	15132 <send_pub_key+0xa6>
		link.expect = PROV_PUB_KEY;
   1512a:	2303      	movs	r3, #3
			link.expect = PROV_CONFIRM;
   1512c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   15130:	e7c5      	b.n	150be <send_pub_key+0x32>
   15132:	f7ff fe95 	bl	14e60 <atomic_get.constprop.0>
		if (atomic_test_bit(link.flags, WAIT_NUMBER) ||
   15136:	0741      	lsls	r1, r0, #29
   15138:	d501      	bpl.n	1513e <send_pub_key+0xb2>
			link.expect = PROV_NO_PDU; /* Wait for input */
   1513a:	23ff      	movs	r3, #255	; 0xff
   1513c:	e7f6      	b.n	1512c <send_pub_key+0xa0>
   1513e:	f7ff fe8f 	bl	14e60 <atomic_get.constprop.0>
		if (atomic_test_bit(link.flags, WAIT_NUMBER) ||
   15142:	0703      	lsls	r3, r0, #28
   15144:	d4f9      	bmi.n	1513a <send_pub_key+0xae>
			link.expect = PROV_CONFIRM;
   15146:	2305      	movs	r3, #5
   15148:	e7f0      	b.n	1512c <send_pub_key+0xa0>
   1514a:	bf00      	nop
   1514c:	00028868 	.word	0x00028868
   15150:	000289a8 	.word	0x000289a8
   15154:	0002e098 	.word	0x0002e098
   15158:	20000a55 	.word	0x20000a55
   1515c:	20000a95 	.word	0x20000a95
   15160:	0002e0b0 	.word	0x0002e0b0
   15164:	200009cc 	.word	0x200009cc

00015168 <prov_dh_key_gen>:
{
   15168:	b510      	push	{r4, lr}
   1516a:	b090      	sub	sp, #64	; 0x40
   1516c:	f7ff fe78 	bl	14e60 <atomic_get.constprop.0>
		remote_pk = &link.conf_inputs[17];
   15170:	4c11      	ldr	r4, [pc, #68]	; (151b8 <prov_dh_key_gen+0x50>)
   15172:	f010 0f20 	tst.w	r0, #32
   15176:	f1a4 0140 	sub.w	r1, r4, #64	; 0x40
   1517a:	bf08      	it	eq
   1517c:	460c      	moveq	r4, r1
	sys_memcpy_swap(remote_pk_le, remote_pk, 32);
   1517e:	4621      	mov	r1, r4
   15180:	4668      	mov	r0, sp
   15182:	f7ff fe3f 	bl	14e04 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&remote_pk_le[32], &remote_pk[32], 32);
   15186:	f104 0120 	add.w	r1, r4, #32
   1518a:	a808      	add	r0, sp, #32
   1518c:	f7ff fe3a 	bl	14e04 <sys_memcpy_swap.constprop.0>
	if (bt_dh_key_gen(remote_pk_le, prov_dh_key_cb)) {
   15190:	490a      	ldr	r1, [pc, #40]	; (151bc <prov_dh_key_gen+0x54>)
   15192:	4668      	mov	r0, sp
   15194:	f7f3 fb7c 	bl	8890 <bt_dh_key_gen>
   15198:	b160      	cbz	r0, 151b4 <prov_dh_key_gen+0x4c>
   1519a:	4b09      	ldr	r3, [pc, #36]	; (151c0 <prov_dh_key_gen+0x58>)
   1519c:	4909      	ldr	r1, [pc, #36]	; (151c4 <prov_dh_key_gen+0x5c>)
		BT_ERR("Failed to generate DHKey");
   1519e:	480a      	ldr	r0, [pc, #40]	; (151c8 <prov_dh_key_gen+0x60>)
   151a0:	1ac9      	subs	r1, r1, r3
   151a2:	08c9      	lsrs	r1, r1, #3
   151a4:	0189      	lsls	r1, r1, #6
   151a6:	f041 0101 	orr.w	r1, r1, #1
   151aa:	f00e f8ff 	bl	233ac <log_0>
		prov_fail(PROV_ERR_UNEXP_ERR);
   151ae:	2007      	movs	r0, #7
   151b0:	f7ff fede 	bl	14f70 <prov_fail>
}
   151b4:	b010      	add	sp, #64	; 0x40
   151b6:	bd10      	pop	{r4, pc}
   151b8:	20000a95 	.word	0x20000a95
   151bc:	00015349 	.word	0x00015349
   151c0:	00028868 	.word	0x00028868
   151c4:	000289a8 	.word	0x000289a8
   151c8:	0002e0ca 	.word	0x0002e0ca

000151cc <prov_pub_key>:
{
   151cc:	b510      	push	{r4, lr}
   151ce:	4601      	mov	r1, r0
   151d0:	f7ff fe46 	bl	14e60 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, PROVISIONER)) {
   151d4:	f010 0f20 	tst.w	r0, #32
   151d8:	4c15      	ldr	r4, [pc, #84]	; (15230 <prov_pub_key+0x64>)
		memcpy(&link.conf_inputs[81], data, 64);
   151da:	f04f 0240 	mov.w	r2, #64	; 0x40
	if (atomic_test_bit(link.flags, PROVISIONER)) {
   151de:	d00b      	beq.n	151f8 <prov_pub_key+0x2c>
		memcpy(&link.conf_inputs[81], data, 64);
   151e0:	f104 00c9 	add.w	r0, r4, #201	; 0xc9
   151e4:	f00f ff54 	bl	25090 <memcpy>
		link.bearer->clear_tx();
   151e8:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   151ec:	68db      	ldr	r3, [r3, #12]
   151ee:	4798      	blx	r3
}
   151f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prov_dh_key_gen();
   151f4:	f7ff bfb8 	b.w	15168 <prov_dh_key_gen>
		memcpy(&link.conf_inputs[17], data, 64);
   151f8:	f104 0089 	add.w	r0, r4, #137	; 0x89
   151fc:	f00f ff48 	bl	25090 <memcpy>
		if (!bt_pub_key_get()) {
   15200:	f7f3 fb38 	bl	8874 <bt_pub_key_get>
   15204:	2800      	cmp	r0, #0
   15206:	d1f3      	bne.n	151f0 <prov_pub_key+0x24>
			link.bearer->clear_tx();
   15208:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1520c:	68db      	ldr	r3, [r3, #12]
   1520e:	4798      	blx	r3
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15210:	2101      	movs	r1, #1
   15212:	4620      	mov	r0, r4
   15214:	f011 fef8 	bl	27008 <atomic_or>
   15218:	4906      	ldr	r1, [pc, #24]	; (15234 <prov_pub_key+0x68>)
   1521a:	4b07      	ldr	r3, [pc, #28]	; (15238 <prov_pub_key+0x6c>)
			BT_WARN("Waiting for local public key");
   1521c:	4807      	ldr	r0, [pc, #28]	; (1523c <prov_pub_key+0x70>)
   1521e:	1ac9      	subs	r1, r1, r3
   15220:	08c9      	lsrs	r1, r1, #3
   15222:	0189      	lsls	r1, r1, #6
}
   15224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			BT_WARN("Waiting for local public key");
   15228:	f041 0102 	orr.w	r1, r1, #2
   1522c:	f00e b8be 	b.w	233ac <log_0>
   15230:	200009cc 	.word	0x200009cc
   15234:	000289a8 	.word	0x000289a8
   15238:	00028868 	.word	0x00028868
   1523c:	0002e0e3 	.word	0x0002e0e3

00015240 <send_confirm>:
{
   15240:	b510      	push	{r4, lr}
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
   15242:	4938      	ldr	r1, [pc, #224]	; (15324 <send_confirm+0xe4>)
   15244:	4c38      	ldr	r4, [pc, #224]	; (15328 <send_confirm+0xe8>)
{
   15246:	b08a      	sub	sp, #40	; 0x28
	PROV_BUF(cfm, 17);
   15248:	ab04      	add	r3, sp, #16
   1524a:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
   1524e:	f101 0020 	add.w	r0, r1, #32
	PROV_BUF(cfm, 17);
   15252:	e9cd 2302 	strd	r2, r3, [sp, #8]
   15256:	9301      	str	r3, [sp, #4]
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
   15258:	f011 fb2e 	bl	268b8 <bt_mesh_prov_conf_salt>
   1525c:	b170      	cbz	r0, 1527c <send_confirm+0x3c>
   1525e:	4933      	ldr	r1, [pc, #204]	; (1532c <send_confirm+0xec>)
   15260:	4b33      	ldr	r3, [pc, #204]	; (15330 <send_confirm+0xf0>)
		BT_ERR("Unable to generate confirmation salt");
   15262:	4834      	ldr	r0, [pc, #208]	; (15334 <send_confirm+0xf4>)
   15264:	1ac9      	subs	r1, r1, r3
   15266:	08c9      	lsrs	r1, r1, #3
   15268:	0189      	lsls	r1, r1, #6
   1526a:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to generate confirmation value");
   1526e:	f00e f89d 	bl	233ac <log_0>
		prov_fail(PROV_ERR_UNEXP_ERR);
   15272:	2007      	movs	r0, #7
   15274:	f7ff fe7c 	bl	14f70 <prov_fail>
}
   15278:	b00a      	add	sp, #40	; 0x28
   1527a:	bd10      	pop	{r4, pc}
	if (bt_mesh_prov_conf_key(link.dhkey, link.conf_salt, link.conf_key)) {
   1527c:	f104 0268 	add.w	r2, r4, #104	; 0x68
   15280:	f104 0158 	add.w	r1, r4, #88	; 0x58
   15284:	1d20      	adds	r0, r4, #4
   15286:	f7fa f8d3 	bl	f430 <bt_mesh_prov_conf_key>
   1528a:	b140      	cbz	r0, 1529e <send_confirm+0x5e>
   1528c:	4927      	ldr	r1, [pc, #156]	; (1532c <send_confirm+0xec>)
   1528e:	4b28      	ldr	r3, [pc, #160]	; (15330 <send_confirm+0xf0>)
		BT_ERR("Unable to generate confirmation key");
   15290:	4829      	ldr	r0, [pc, #164]	; (15338 <send_confirm+0xf8>)
   15292:	1ac9      	subs	r1, r1, r3
   15294:	08c9      	lsrs	r1, r1, #3
   15296:	0189      	lsls	r1, r1, #6
   15298:	f041 0101 	orr.w	r1, r1, #1
   1529c:	e7e7      	b.n	1526e <send_confirm+0x2e>
	if (bt_rand(link.rand, 16)) {
   1529e:	2110      	movs	r1, #16
   152a0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   152a4:	f012 f916 	bl	274d4 <bt_rand>
   152a8:	b140      	cbz	r0, 152bc <send_confirm+0x7c>
   152aa:	4920      	ldr	r1, [pc, #128]	; (1532c <send_confirm+0xec>)
   152ac:	4b20      	ldr	r3, [pc, #128]	; (15330 <send_confirm+0xf0>)
		BT_ERR("Unable to generate random number");
   152ae:	4823      	ldr	r0, [pc, #140]	; (1533c <send_confirm+0xfc>)
   152b0:	1ac9      	subs	r1, r1, r3
   152b2:	08c9      	lsrs	r1, r1, #3
   152b4:	0189      	lsls	r1, r1, #6
   152b6:	f041 0101 	orr.w	r1, r1, #1
   152ba:	e7d8      	b.n	1526e <send_confirm+0x2e>
	prov_buf_init(&cfm, PROV_CONFIRM);
   152bc:	2105      	movs	r1, #5
   152be:	a801      	add	r0, sp, #4
   152c0:	f011 fe96 	bl	26ff0 <prov_buf_init>
			      net_buf_simple_add(&cfm, 16))) {
   152c4:	2110      	movs	r1, #16
   152c6:	a801      	add	r0, sp, #4
   152c8:	f009 f9a8 	bl	1e61c <net_buf_simple_add>
	if (bt_mesh_prov_conf(link.conf_key, link.rand, link.auth,
   152cc:	f104 0248 	add.w	r2, r4, #72	; 0x48
			      net_buf_simple_add(&cfm, 16))) {
   152d0:	4603      	mov	r3, r0
	if (bt_mesh_prov_conf(link.conf_key, link.rand, link.auth,
   152d2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   152d6:	f104 0068 	add.w	r0, r4, #104	; 0x68
   152da:	f011 fafc 	bl	268d6 <bt_mesh_prov_conf>
   152de:	b140      	cbz	r0, 152f2 <send_confirm+0xb2>
   152e0:	4912      	ldr	r1, [pc, #72]	; (1532c <send_confirm+0xec>)
   152e2:	4b13      	ldr	r3, [pc, #76]	; (15330 <send_confirm+0xf0>)
		BT_ERR("Unable to generate confirmation value");
   152e4:	4816      	ldr	r0, [pc, #88]	; (15340 <send_confirm+0x100>)
   152e6:	1ac9      	subs	r1, r1, r3
   152e8:	08c9      	lsrs	r1, r1, #3
   152ea:	0189      	lsls	r1, r1, #6
   152ec:	f041 0101 	orr.w	r1, r1, #1
   152f0:	e7bd      	b.n	1526e <send_confirm+0x2e>
	if (prov_send(&cfm, NULL)) {
   152f2:	a801      	add	r0, sp, #4
   152f4:	f7ff fd16 	bl	14d24 <prov_send.constprop.0>
   152f8:	b150      	cbz	r0, 15310 <send_confirm+0xd0>
   152fa:	4b0d      	ldr	r3, [pc, #52]	; (15330 <send_confirm+0xf0>)
   152fc:	490b      	ldr	r1, [pc, #44]	; (1532c <send_confirm+0xec>)
		BT_ERR("Failed to send Provisioning Confirm");
   152fe:	4811      	ldr	r0, [pc, #68]	; (15344 <send_confirm+0x104>)
   15300:	1ac9      	subs	r1, r1, r3
   15302:	08c9      	lsrs	r1, r1, #3
   15304:	0189      	lsls	r1, r1, #6
   15306:	f041 0101 	orr.w	r1, r1, #1
   1530a:	f00e f84f 	bl	233ac <log_0>
		return;
   1530e:	e7b3      	b.n	15278 <send_confirm+0x38>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15310:	f7ff fda6 	bl	14e60 <atomic_get.constprop.0>
		link.expect = PROV_RANDOM;
   15314:	f010 0f20 	tst.w	r0, #32
   15318:	bf14      	ite	ne
   1531a:	2305      	movne	r3, #5
   1531c:	2306      	moveq	r3, #6
   1531e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   15322:	e7a9      	b.n	15278 <send_confirm+0x38>
   15324:	20000a24 	.word	0x20000a24
   15328:	200009cc 	.word	0x200009cc
   1532c:	000289a8 	.word	0x000289a8
   15330:	00028868 	.word	0x00028868
   15334:	0002e100 	.word	0x0002e100
   15338:	0002e125 	.word	0x0002e125
   1533c:	0002e149 	.word	0x0002e149
   15340:	0002e16a 	.word	0x0002e16a
   15344:	0002e190 	.word	0x0002e190

00015348 <prov_dh_key_cb>:
{
   15348:	b508      	push	{r3, lr}
	if (!dhkey) {
   1534a:	4601      	mov	r1, r0
   1534c:	b970      	cbnz	r0, 1536c <prov_dh_key_cb+0x24>
   1534e:	4b0f      	ldr	r3, [pc, #60]	; (1538c <prov_dh_key_cb+0x44>)
   15350:	490f      	ldr	r1, [pc, #60]	; (15390 <prov_dh_key_cb+0x48>)
		BT_ERR("DHKey generation failed");
   15352:	4810      	ldr	r0, [pc, #64]	; (15394 <prov_dh_key_cb+0x4c>)
   15354:	1ac9      	subs	r1, r1, r3
   15356:	08c9      	lsrs	r1, r1, #3
   15358:	0189      	lsls	r1, r1, #6
   1535a:	f041 0101 	orr.w	r1, r1, #1
   1535e:	f00e f825 	bl	233ac <log_0>
}
   15362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		prov_fail(PROV_ERR_UNEXP_ERR);
   15366:	2007      	movs	r0, #7
   15368:	f7ff be02 	b.w	14f70 <prov_fail>
	sys_memcpy_swap(link.dhkey, dhkey, 32);
   1536c:	480a      	ldr	r0, [pc, #40]	; (15398 <prov_dh_key_cb+0x50>)
   1536e:	f7ff fd49 	bl	14e04 <sys_memcpy_swap.constprop.0>
   15372:	f7ff fd75 	bl	14e60 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, PROVISIONER)) {
   15376:	0683      	lsls	r3, r0, #26
   15378:	d503      	bpl.n	15382 <prov_dh_key_cb+0x3a>
}
   1537a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_confirm();
   1537e:	f7ff bf5f 	b.w	15240 <send_confirm>
}
   15382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_pub_key();
   15386:	f7ff be81 	b.w	1508c <send_pub_key>
   1538a:	bf00      	nop
   1538c:	00028868 	.word	0x00028868
   15390:	000289a8 	.word	0x000289a8
   15394:	0002e1b4 	.word	0x0002e1b4
   15398:	200009d0 	.word	0x200009d0

0001539c <prov_data>:
{
   1539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

static inline int bt_mesh_session_key(const u8_t dhkey[32],
				      const u8_t prov_salt[16],
				      u8_t session_key[16])
{
	return bt_mesh_k1(dhkey, 32, prov_salt, "prsk", session_key);
   153a0:	4c5f      	ldr	r4, [pc, #380]	; (15520 <prov_data+0x184>)
   153a2:	b09f      	sub	sp, #124	; 0x7c
	PROV_BUF(msg, 1);
   153a4:	ab06      	add	r3, sp, #24
   153a6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   153aa:	af0f      	add	r7, sp, #60	; 0x3c
   153ac:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
{
   153b0:	4605      	mov	r5, r0
	PROV_BUF(msg, 1);
   153b2:	9308      	str	r3, [sp, #32]
   153b4:	9700      	str	r7, [sp, #0]
   153b6:	4b5b      	ldr	r3, [pc, #364]	; (15524 <prov_data+0x188>)
   153b8:	f204 1209 	addw	r2, r4, #265	; 0x109
   153bc:	2120      	movs	r1, #32
   153be:	1d20      	adds	r0, r4, #4
   153c0:	f011 f930 	bl	26624 <bt_mesh_k1>
	if (err) {
   153c4:	b158      	cbz	r0, 153de <prov_data+0x42>
   153c6:	4958      	ldr	r1, [pc, #352]	; (15528 <prov_data+0x18c>)
   153c8:	4b58      	ldr	r3, [pc, #352]	; (1552c <prov_data+0x190>)
		BT_ERR("Unable to generate session key");
   153ca:	4859      	ldr	r0, [pc, #356]	; (15530 <prov_data+0x194>)
   153cc:	1ac9      	subs	r1, r1, r3
   153ce:	08c9      	lsrs	r1, r1, #3
   153d0:	0189      	lsls	r1, r1, #6
   153d2:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to generate session nonce");
   153d6:	f00d ffe9 	bl	233ac <log_0>
		prov_fail(PROV_ERR_UNEXP_ERR);
   153da:	2007      	movs	r0, #7
   153dc:	e023      	b.n	15426 <prov_data+0x8a>
				      u8_t nonce[13])
{
	u8_t tmp[16];
	int err;

	err = bt_mesh_k1(dhkey, 32, prov_salt, "prsn", tmp);
   153de:	ae17      	add	r6, sp, #92	; 0x5c
   153e0:	4b54      	ldr	r3, [pc, #336]	; (15534 <prov_data+0x198>)
   153e2:	9600      	str	r6, [sp, #0]
   153e4:	f204 1209 	addw	r2, r4, #265	; 0x109
   153e8:	2120      	movs	r1, #32
   153ea:	1d20      	adds	r0, r4, #4
   153ec:	f011 f91a 	bl	26624 <bt_mesh_k1>
	if (!err) {
   153f0:	2800      	cmp	r0, #0
   153f2:	f040 808b 	bne.w	1550c <prov_data+0x170>
		memcpy(nonce, tmp + 3, 13);
   153f6:	220d      	movs	r2, #13
   153f8:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
   153fc:	a80b      	add	r0, sp, #44	; 0x2c
   153fe:	f00f fe47 	bl	25090 <memcpy>
	err = bt_mesh_prov_decrypt(session_key, nonce, data, pdu);
   15402:	4633      	mov	r3, r6
   15404:	462a      	mov	r2, r5
   15406:	a90b      	add	r1, sp, #44	; 0x2c
   15408:	4638      	mov	r0, r7
   1540a:	f011 fa71 	bl	268f0 <bt_mesh_prov_decrypt>
	if (err) {
   1540e:	b168      	cbz	r0, 1542c <prov_data+0x90>
   15410:	4b46      	ldr	r3, [pc, #280]	; (1552c <prov_data+0x190>)
   15412:	4945      	ldr	r1, [pc, #276]	; (15528 <prov_data+0x18c>)
		BT_ERR("Unable to decrypt provisioning data");
   15414:	4848      	ldr	r0, [pc, #288]	; (15538 <prov_data+0x19c>)
   15416:	1ac9      	subs	r1, r1, r3
   15418:	08c9      	lsrs	r1, r1, #3
   1541a:	0189      	lsls	r1, r1, #6
   1541c:	f041 0101 	orr.w	r1, r1, #1
   15420:	f00d ffc4 	bl	233ac <log_0>
		prov_fail(PROV_ERR_DECRYPT);
   15424:	2006      	movs	r0, #6
		prov_fail(PROV_ERR_UNEXP_ERR);
   15426:	f7ff fda3 	bl	14f70 <prov_fail>
		return;
   1542a:	e03d      	b.n	154a8 <prov_data+0x10c>

static inline int bt_mesh_dev_key(const u8_t dhkey[32],
				  const u8_t prov_salt[16],
				  u8_t dev_key[16])
{
	return bt_mesh_k1(dhkey, 32, prov_salt, "prdk", dev_key);
   1542c:	ab13      	add	r3, sp, #76	; 0x4c
   1542e:	9300      	str	r3, [sp, #0]
   15430:	f204 1209 	addw	r2, r4, #265	; 0x109
   15434:	4b41      	ldr	r3, [pc, #260]	; (1553c <prov_data+0x1a0>)
   15436:	2120      	movs	r1, #32
   15438:	1d20      	adds	r0, r4, #4
   1543a:	f011 f8f3 	bl	26624 <bt_mesh_k1>
	if (err) {
   1543e:	b140      	cbz	r0, 15452 <prov_data+0xb6>
   15440:	4939      	ldr	r1, [pc, #228]	; (15528 <prov_data+0x18c>)
   15442:	4b3a      	ldr	r3, [pc, #232]	; (1552c <prov_data+0x190>)
		BT_ERR("Unable to generate device key");
   15444:	483e      	ldr	r0, [pc, #248]	; (15540 <prov_data+0x1a4>)
   15446:	1ac9      	subs	r1, r1, r3
   15448:	08c9      	lsrs	r1, r1, #3
   1544a:	0189      	lsls	r1, r1, #6
   1544c:	f041 0101 	orr.w	r1, r1, #1
   15450:	e7c1      	b.n	153d6 <prov_data+0x3a>
	return ((u16_t)src[0] << 8) | src[1];
   15452:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
   15456:	9305      	str	r3, [sp, #20]
   15458:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
   1545c:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   15460:	9303      	str	r3, [sp, #12]
	prov_buf_init(&msg, PROV_COMPLETE);
   15462:	2108      	movs	r1, #8
   15464:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
   15468:	9204      	str	r2, [sp, #16]
   1546a:	a808      	add	r0, sp, #32
   1546c:	9302      	str	r3, [sp, #8]
   1546e:	f89d a06c 	ldrb.w	sl, [sp, #108]	; 0x6c
   15472:	f89d 906d 	ldrb.w	r9, [sp, #109]	; 0x6d
	flags = pdu[18];
   15476:	f89d b06e 	ldrb.w	fp, [sp, #110]	; 0x6e
   1547a:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
   1547e:	f89d 7072 	ldrb.w	r7, [sp, #114]	; 0x72
	prov_buf_init(&msg, PROV_COMPLETE);
   15482:	f011 fdb5 	bl	26ff0 <prov_buf_init>
	if (prov_send(&msg, NULL)) {
   15486:	a808      	add	r0, sp, #32
   15488:	f7ff fc4c 	bl	14d24 <prov_send.constprop.0>
   1548c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   15490:	4605      	mov	r5, r0
   15492:	b160      	cbz	r0, 154ae <prov_data+0x112>
   15494:	4924      	ldr	r1, [pc, #144]	; (15528 <prov_data+0x18c>)
   15496:	4b25      	ldr	r3, [pc, #148]	; (1552c <prov_data+0x190>)
		BT_ERR("Failed to send Provisioning Complete");
   15498:	482a      	ldr	r0, [pc, #168]	; (15544 <prov_data+0x1a8>)
   1549a:	1ac9      	subs	r1, r1, r3
   1549c:	08c9      	lsrs	r1, r1, #3
   1549e:	0189      	lsls	r1, r1, #6
   154a0:	f041 0101 	orr.w	r1, r1, #1
   154a4:	f00d ff82 	bl	233ac <log_0>
}
   154a8:	b01f      	add	sp, #124	; 0x7c
   154aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	link.expect = PROV_NO_PDU;
   154ae:	21ff      	movs	r1, #255	; 0xff
   154b0:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	return link.bearer && link.bearer->type == BT_MESH_PROV_GATT;
   154b4:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
   154b8:	b119      	cbz	r1, 154c2 <prov_data+0x126>
   154ba:	780d      	ldrb	r5, [r1, #0]
   154bc:	1ea9      	subs	r1, r5, #2
   154be:	424d      	negs	r5, r1
   154c0:	414d      	adcs	r5, r1
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   154c2:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
	err = bt_mesh_provision(pdu, net_idx, flags, iv_index, addr, dev_key);
   154c6:	aa13      	add	r2, sp, #76	; 0x4c
   154c8:	9201      	str	r2, [sp, #4]
   154ca:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   154ce:	ea48 2303 	orr.w	r3, r8, r3, lsl #8
   154d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   154d6:	9200      	str	r2, [sp, #0]
   154d8:	ea49 210a 	orr.w	r1, r9, sl, lsl #8
   154dc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   154e0:	465a      	mov	r2, fp
   154e2:	4630      	mov	r0, r6
   154e4:	f7f6 fb36 	bl	bb54 <bt_mesh_provision>
	if (err) {
   154e8:	4601      	mov	r1, r0
   154ea:	b150      	cbz	r0, 15502 <prov_data+0x166>
   154ec:	4b0f      	ldr	r3, [pc, #60]	; (1552c <prov_data+0x190>)
   154ee:	4a0e      	ldr	r2, [pc, #56]	; (15528 <prov_data+0x18c>)
		BT_ERR("Failed to provision (err %d)", err);
   154f0:	4815      	ldr	r0, [pc, #84]	; (15548 <prov_data+0x1ac>)
   154f2:	1ad2      	subs	r2, r2, r3
   154f4:	08d2      	lsrs	r2, r2, #3
   154f6:	0192      	lsls	r2, r2, #6
   154f8:	f042 0201 	orr.w	r2, r2, #1
   154fc:	f00d ff63 	bl	233c6 <log_1>
		return;
   15500:	e7d2      	b.n	154a8 <prov_data+0x10c>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) && identity_enable) {
   15502:	2d00      	cmp	r5, #0
   15504:	d0d0      	beq.n	154a8 <prov_data+0x10c>
		bt_mesh_proxy_identity_enable();
   15506:	f001 fc7d 	bl	16e04 <bt_mesh_proxy_identity_enable>
   1550a:	e7cd      	b.n	154a8 <prov_data+0x10c>
   1550c:	4906      	ldr	r1, [pc, #24]	; (15528 <prov_data+0x18c>)
   1550e:	4b07      	ldr	r3, [pc, #28]	; (1552c <prov_data+0x190>)
		BT_ERR("Unable to generate session nonce");
   15510:	480e      	ldr	r0, [pc, #56]	; (1554c <prov_data+0x1b0>)
   15512:	1ac9      	subs	r1, r1, r3
   15514:	08c9      	lsrs	r1, r1, #3
   15516:	0189      	lsls	r1, r1, #6
   15518:	f041 0101 	orr.w	r1, r1, #1
   1551c:	e75b      	b.n	153d6 <prov_data+0x3a>
   1551e:	bf00      	nop
   15520:	200009cc 	.word	0x200009cc
   15524:	0002e1cc 	.word	0x0002e1cc
   15528:	000289a8 	.word	0x000289a8
   1552c:	00028868 	.word	0x00028868
   15530:	0002e1d1 	.word	0x0002e1d1
   15534:	0002e1f0 	.word	0x0002e1f0
   15538:	0002e1f5 	.word	0x0002e1f5
   1553c:	0002e219 	.word	0x0002e219
   15540:	0002e21e 	.word	0x0002e21e
   15544:	0002e23c 	.word	0x0002e23c
   15548:	0002e261 	.word	0x0002e261
   1554c:	0002e27e 	.word	0x0002e27e

00015550 <prov_random>:
{
   15550:	b510      	push	{r4, lr}
	if (bt_mesh_prov_conf(link.conf_key, data, link.auth, conf_verify)) {
   15552:	4a29      	ldr	r2, [pc, #164]	; (155f8 <prov_random+0xa8>)
{
   15554:	b08e      	sub	sp, #56	; 0x38
   15556:	4604      	mov	r4, r0
	if (bt_mesh_prov_conf(link.conf_key, data, link.auth, conf_verify)) {
   15558:	4601      	mov	r1, r0
   1555a:	466b      	mov	r3, sp
   1555c:	f102 0020 	add.w	r0, r2, #32
   15560:	f011 f9b9 	bl	268d6 <bt_mesh_prov_conf>
   15564:	b158      	cbz	r0, 1557e <prov_random+0x2e>
   15566:	4925      	ldr	r1, [pc, #148]	; (155fc <prov_random+0xac>)
   15568:	4b25      	ldr	r3, [pc, #148]	; (15600 <prov_random+0xb0>)
		BT_ERR("Unable to calculate confirmation verification");
   1556a:	4826      	ldr	r0, [pc, #152]	; (15604 <prov_random+0xb4>)
   1556c:	1ac9      	subs	r1, r1, r3
   1556e:	08c9      	lsrs	r1, r1, #3
   15570:	0189      	lsls	r1, r1, #6
   15572:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Failed to generate provisioning salt");
   15576:	f00d ff19 	bl	233ac <log_0>
		prov_fail(PROV_ERR_UNEXP_ERR);
   1557a:	2007      	movs	r0, #7
   1557c:	e010      	b.n	155a0 <prov_random+0x50>
	if (memcmp(conf_verify, link.conf, 16)) {
   1557e:	4922      	ldr	r1, [pc, #136]	; (15608 <prov_random+0xb8>)
   15580:	2210      	movs	r2, #16
   15582:	4668      	mov	r0, sp
   15584:	f00f fd74 	bl	25070 <memcmp>
   15588:	b170      	cbz	r0, 155a8 <prov_random+0x58>
   1558a:	4b1d      	ldr	r3, [pc, #116]	; (15600 <prov_random+0xb0>)
   1558c:	491b      	ldr	r1, [pc, #108]	; (155fc <prov_random+0xac>)
		BT_ERR("Invalid confirmation value");
   1558e:	481f      	ldr	r0, [pc, #124]	; (1560c <prov_random+0xbc>)
   15590:	1ac9      	subs	r1, r1, r3
   15592:	08c9      	lsrs	r1, r1, #3
   15594:	0189      	lsls	r1, r1, #6
   15596:	f041 0101 	orr.w	r1, r1, #1
   1559a:	f00d ff07 	bl	233ac <log_0>
		prov_fail(PROV_ERR_CFM_FAILED);
   1559e:	2004      	movs	r0, #4
		prov_fail(PROV_ERR_UNEXP_ERR);
   155a0:	f7ff fce6 	bl	14f70 <prov_fail>
}
   155a4:	b00e      	add	sp, #56	; 0x38
   155a6:	bd10      	pop	{r4, pc}
   155a8:	f7ff fc5a 	bl	14e60 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, PROVISIONER)) {
   155ac:	0683      	lsls	r3, r0, #26
static inline int bt_mesh_prov_salt(const u8_t conf_salt[16],
				    const u8_t prov_rand[16],
				    const u8_t dev_rand[16],
				    u8_t prov_salt[16])
{
	const u8_t prov_salt_key[16] = { 0 };
   155ae:	f04f 0300 	mov.w	r3, #0
		prov_rand = data;
   155b2:	bf56      	itet	pl
   155b4:	4621      	movpl	r1, r4
		prov_rand = link.rand;
   155b6:	4916      	ldrmi	r1, [pc, #88]	; (15610 <prov_random+0xc0>)
		dev_rand = link.rand;
   155b8:	4c15      	ldrpl	r4, [pc, #84]	; (15610 <prov_random+0xc0>)
   155ba:	e9cd 3304 	strd	r3, r3, [sp, #16]
   155be:	e9cd 3306 	strd	r3, r3, [sp, #24]
	struct bt_mesh_sg sg[] = {
   155c2:	4b14      	ldr	r3, [pc, #80]	; (15614 <prov_random+0xc4>)
   155c4:	9308      	str	r3, [sp, #32]
   155c6:	2210      	movs	r2, #16
   155c8:	e9cd 2109 	strd	r2, r1, [sp, #36]	; 0x24
   155cc:	e9cd 240b 	strd	r2, r4, [sp, #44]	; 0x2c
   155d0:	920d      	str	r2, [sp, #52]	; 0x34
		{ conf_salt, 16 },
		{ prov_rand, 16 },
		{ dev_rand, 16 },
	};

	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   155d2:	33b1      	adds	r3, #177	; 0xb1
   155d4:	2203      	movs	r2, #3
   155d6:	a908      	add	r1, sp, #32
   155d8:	a804      	add	r0, sp, #16
   155da:	f010 ffe1 	bl	265a0 <bt_mesh_aes_cmac>
	if (bt_mesh_prov_salt(link.conf_salt, prov_rand, dev_rand,
   155de:	b140      	cbz	r0, 155f2 <prov_random+0xa2>
   155e0:	4906      	ldr	r1, [pc, #24]	; (155fc <prov_random+0xac>)
   155e2:	4b07      	ldr	r3, [pc, #28]	; (15600 <prov_random+0xb0>)
		BT_ERR("Failed to generate provisioning salt");
   155e4:	480c      	ldr	r0, [pc, #48]	; (15618 <prov_random+0xc8>)
   155e6:	1ac9      	subs	r1, r1, r3
   155e8:	08c9      	lsrs	r1, r1, #3
   155ea:	0189      	lsls	r1, r1, #6
   155ec:	f041 0101 	orr.w	r1, r1, #1
   155f0:	e7c1      	b.n	15576 <prov_random+0x26>
		send_random();
   155f2:	f7ff fc85 	bl	14f00 <send_random>
   155f6:	e7d5      	b.n	155a4 <prov_random+0x54>
   155f8:	20000a14 	.word	0x20000a14
   155fc:	000289a8 	.word	0x000289a8
   15600:	00028868 	.word	0x00028868
   15604:	0002e29f 	.word	0x0002e29f
   15608:	200009f4 	.word	0x200009f4
   1560c:	0002e2cd 	.word	0x0002e2cd
   15610:	20000a04 	.word	0x20000a04
   15614:	20000a24 	.word	0x20000a24
   15618:	0002e2e8 	.word	0x0002e2e8

0001561c <prov_start>:
{
   1561c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (data[0] != PROV_ALG_P256) {
   15620:	7801      	ldrb	r1, [r0, #0]
{
   15622:	b08c      	sub	sp, #48	; 0x30
   15624:	4606      	mov	r6, r0
	if (data[0] != PROV_ALG_P256) {
   15626:	b169      	cbz	r1, 15644 <prov_start+0x28>
   15628:	4a72      	ldr	r2, [pc, #456]	; (157f4 <prov_start+0x1d8>)
   1562a:	4b73      	ldr	r3, [pc, #460]	; (157f8 <prov_start+0x1dc>)
		BT_ERR("Unknown algorithm 0x%02x", data[0]);
   1562c:	4873      	ldr	r0, [pc, #460]	; (157fc <prov_start+0x1e0>)
   1562e:	1ad2      	subs	r2, r2, r3
   15630:	08d2      	lsrs	r2, r2, #3
   15632:	0192      	lsls	r2, r2, #6
   15634:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("Invalid public key type: 0x%02x", data[1]);
   15638:	f00d fec5 	bl	233c6 <log_1>
		prov_fail(PROV_ERR_NVAL_FMT);
   1563c:	2002      	movs	r0, #2
   1563e:	f7ff fc97 	bl	14f70 <prov_fail>
   15642:	e024      	b.n	1568e <prov_start+0x72>
	if (data[1] != PUB_KEY_NO_OOB) {
   15644:	7841      	ldrb	r1, [r0, #1]
   15646:	b141      	cbz	r1, 1565a <prov_start+0x3e>
   15648:	4a6a      	ldr	r2, [pc, #424]	; (157f4 <prov_start+0x1d8>)
   1564a:	4b6b      	ldr	r3, [pc, #428]	; (157f8 <prov_start+0x1dc>)
		BT_ERR("Invalid public key type: 0x%02x", data[1]);
   1564c:	486c      	ldr	r0, [pc, #432]	; (15800 <prov_start+0x1e4>)
   1564e:	1ad2      	subs	r2, r2, r3
   15650:	08d2      	lsrs	r2, r2, #3
   15652:	0192      	lsls	r2, r2, #6
   15654:	f042 0201 	orr.w	r2, r2, #1
   15658:	e7ee      	b.n	15638 <prov_start+0x1c>
	memcpy(&link.conf_inputs[12], data, 5);
   1565a:	4d6a      	ldr	r5, [pc, #424]	; (15804 <prov_start+0x1e8>)
   1565c:	4601      	mov	r1, r0
   1565e:	2205      	movs	r2, #5
   15660:	f105 0084 	add.w	r0, r5, #132	; 0x84
   15664:	f00f fd14 	bl	25090 <memcpy>
	link.expect = PROV_PUB_KEY;
   15668:	2303      	movs	r3, #3
   1566a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	if (prov_auth(data[2], data[3], data[4]) < 0) {
   1566e:	78b3      	ldrb	r3, [r6, #2]
   15670:	78f1      	ldrb	r1, [r6, #3]
   15672:	7934      	ldrb	r4, [r6, #4]
	switch (method) {
   15674:	46a8      	mov	r8, r5
   15676:	2b03      	cmp	r3, #3
   15678:	d85c      	bhi.n	15734 <prov_start+0x118>
   1567a:	e8df f003 	tbb	[pc, r3]
   1567e:	0b02      	.short	0x0b02
   15680:	a11e      	.short	0xa11e
		if (action || size) {
   15682:	4321      	orrs	r1, r4
   15684:	d156      	bne.n	15734 <prov_start+0x118>
		(void)memset(link.auth, 0, sizeof(link.auth));
   15686:	4860      	ldr	r0, [pc, #384]	; (15808 <prov_start+0x1ec>)
   15688:	2210      	movs	r2, #16
		(void)memset(link.auth, 0,
   1568a:	f00f fd2c 	bl	250e6 <memset>
}
   1568e:	b00c      	add	sp, #48	; 0x30
   15690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (action || size) {
   15694:	430c      	orrs	r4, r1
   15696:	d14d      	bne.n	15734 <prov_start+0x118>
		memcpy(link.auth + 16 - prov->static_val_len,
   15698:	4e5c      	ldr	r6, [pc, #368]	; (1580c <prov_start+0x1f0>)
   1569a:	4d5b      	ldr	r5, [pc, #364]	; (15808 <prov_start+0x1ec>)
   1569c:	6833      	ldr	r3, [r6, #0]
   1569e:	7c1a      	ldrb	r2, [r3, #16]
   156a0:	68d9      	ldr	r1, [r3, #12]
   156a2:	f1c2 0010 	rsb	r0, r2, #16
   156a6:	4428      	add	r0, r5
   156a8:	f00f fcf2 	bl	25090 <memcpy>
			     sizeof(link.auth) - prov->static_val_len);
   156ac:	6833      	ldr	r3, [r6, #0]
   156ae:	7c1a      	ldrb	r2, [r3, #16]
		(void)memset(link.auth, 0,
   156b0:	4621      	mov	r1, r4
   156b2:	f1c2 0210 	rsb	r2, r2, #16
   156b6:	4628      	mov	r0, r5
   156b8:	e7e7      	b.n	1568a <prov_start+0x6e>
	switch (action) {
   156ba:	2904      	cmp	r1, #4
   156bc:	d83a      	bhi.n	15734 <prov_start+0x118>
   156be:	4b54      	ldr	r3, [pc, #336]	; (15810 <prov_start+0x1f4>)
   156c0:	f813 9001 	ldrb.w	r9, [r3, r1]
		if (!output) {
   156c4:	f1b9 0f00 	cmp.w	r9, #0
   156c8:	d034      	beq.n	15734 <prov_start+0x118>
		if (!(prov->output_actions & output)) {
   156ca:	f8df a140 	ldr.w	sl, [pc, #320]	; 1580c <prov_start+0x1f0>
   156ce:	f8da 3000 	ldr.w	r3, [sl]
   156d2:	8a5a      	ldrh	r2, [r3, #18]
   156d4:	ea12 0f09 	tst.w	r2, r9
   156d8:	4655      	mov	r5, sl
   156da:	d02b      	beq.n	15734 <prov_start+0x118>
		if (size > prov->output_size) {
   156dc:	7c5b      	ldrb	r3, [r3, #17]
   156de:	42a3      	cmp	r3, r4
   156e0:	d328      	bcc.n	15734 <prov_start+0x118>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   156e2:	4848      	ldr	r0, [pc, #288]	; (15804 <prov_start+0x1e8>)
   156e4:	2110      	movs	r1, #16
   156e6:	f011 fc8f 	bl	27008 <atomic_or>
		if (output == BT_MESH_DISPLAY_STRING) {
   156ea:	f1b9 0f10 	cmp.w	r9, #16
   156ee:	d141      	bne.n	15774 <prov_start+0x158>
			bt_rand(str, size);
   156f0:	4621      	mov	r1, r4
   156f2:	a804      	add	r0, sp, #16
   156f4:	f011 feee 	bl	274d4 <bt_rand>
			for (i = 0U; i < size; i++) {
   156f8:	a904      	add	r1, sp, #16
   156fa:	2200      	movs	r2, #0
				str[i] %= 36;
   156fc:	2024      	movs	r0, #36	; 0x24
			for (i = 0U; i < size; i++) {
   156fe:	b2d3      	uxtb	r3, r2
   15700:	429c      	cmp	r4, r3
   15702:	d827      	bhi.n	15754 <prov_start+0x138>
			memcpy(link.auth, str, size);
   15704:	4f40      	ldr	r7, [pc, #256]	; (15808 <prov_start+0x1ec>)
			str[size] = '\0';
   15706:	ab0c      	add	r3, sp, #48	; 0x30
   15708:	4423      	add	r3, r4
   1570a:	f04f 0800 	mov.w	r8, #0
			memcpy(link.auth, str, size);
   1570e:	4622      	mov	r2, r4
   15710:	a904      	add	r1, sp, #16
   15712:	4638      	mov	r0, r7
			str[size] = '\0';
   15714:	f803 8c20 	strb.w	r8, [r3, #-32]
			memcpy(link.auth, str, size);
   15718:	f00f fcba 	bl	25090 <memcpy>
			(void)memset(link.auth + size, 0,
   1571c:	f1c4 0210 	rsb	r2, r4, #16
   15720:	4641      	mov	r1, r8
   15722:	1938      	adds	r0, r7, r4
   15724:	f00f fcdf 	bl	250e6 <memset>
			return prov->output_string((char *)str);
   15728:	682b      	ldr	r3, [r5, #0]
   1572a:	a804      	add	r0, sp, #16
   1572c:	69db      	ldr	r3, [r3, #28]
   1572e:	4798      	blx	r3
	if (prov_auth(data[2], data[3], data[4]) < 0) {
   15730:	2800      	cmp	r0, #0
   15732:	daac      	bge.n	1568e <prov_start+0x72>
   15734:	4a30      	ldr	r2, [pc, #192]	; (157f8 <prov_start+0x1dc>)
   15736:	4b2f      	ldr	r3, [pc, #188]	; (157f4 <prov_start+0x1d8>)
		BT_ERR("Invalid authentication method: 0x%02x; "
   15738:	4836      	ldr	r0, [pc, #216]	; (15814 <prov_start+0x1f8>)
   1573a:	1a9b      	subs	r3, r3, r2
   1573c:	08db      	lsrs	r3, r3, #3
   1573e:	019b      	lsls	r3, r3, #6
   15740:	f043 0301 	orr.w	r3, r3, #1
   15744:	f8ad 3000 	strh.w	r3, [sp]
   15748:	7933      	ldrb	r3, [r6, #4]
   1574a:	78f2      	ldrb	r2, [r6, #3]
   1574c:	78b1      	ldrb	r1, [r6, #2]
   1574e:	f00d fe67 	bl	23420 <log_3>
   15752:	e773      	b.n	1563c <prov_start+0x20>
				str[i] %= 36;
   15754:	780f      	ldrb	r7, [r1, #0]
   15756:	fbb7 f3f0 	udiv	r3, r7, r0
   1575a:	fb00 7313 	mls	r3, r0, r3, r7
   1575e:	b2df      	uxtb	r7, r3
				if (str[i] < 10) {
   15760:	2f09      	cmp	r7, #9
					str[i] += '0';
   15762:	b25b      	sxtb	r3, r3
   15764:	bf94      	ite	ls
   15766:	3330      	addls	r3, #48	; 0x30
					str[i] += 'A' - 10;
   15768:	3337      	addhi	r3, #55	; 0x37
   1576a:	b2db      	uxtb	r3, r3
   1576c:	f801 3b01 	strb.w	r3, [r1], #1
			for (i = 0U; i < size; i++) {
   15770:	3201      	adds	r2, #1
   15772:	e7c4      	b.n	156fe <prov_start+0xe2>
			u32_t div[8] = { 10, 100, 1000, 10000, 100000,
   15774:	4f28      	ldr	r7, [pc, #160]	; (15818 <prov_start+0x1fc>)
   15776:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   15778:	ad04      	add	r5, sp, #16
   1577a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1577c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   15780:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			bt_rand(&num, sizeof(num));
   15784:	2104      	movs	r1, #4
   15786:	a803      	add	r0, sp, #12
   15788:	f011 fea4 	bl	274d4 <bt_rand>
			num %= div[size - 1];
   1578c:	ab0c      	add	r3, sp, #48	; 0x30
   1578e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   15792:	9803      	ldr	r0, [sp, #12]
   15794:	f854 2c24 	ldr.w	r2, [r4, #-36]
   15798:	fbb0 f3f2 	udiv	r3, r0, r2
   1579c:	fb02 0313 	mls	r3, r2, r3, r0
   157a0:	9303      	str	r3, [sp, #12]
	dst[1] = val;
   157a2:	ba1b      	rev	r3, r3
	dst[0] = val >> 8;
   157a4:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
			(void)memset(link.auth, 0, 12);
   157a8:	220c      	movs	r2, #12
   157aa:	2100      	movs	r1, #0
   157ac:	4816      	ldr	r0, [pc, #88]	; (15808 <prov_start+0x1ec>)
   157ae:	f00f fc9a 	bl	250e6 <memset>
			return prov->output_number(output, num);
   157b2:	f8da 3000 	ldr.w	r3, [sl]
   157b6:	9903      	ldr	r1, [sp, #12]
   157b8:	699b      	ldr	r3, [r3, #24]
   157ba:	4648      	mov	r0, r9
   157bc:	4798      	blx	r3
   157be:	e7b7      	b.n	15730 <prov_start+0x114>
	switch (action) {
   157c0:	2903      	cmp	r1, #3
   157c2:	d8b7      	bhi.n	15734 <prov_start+0x118>
   157c4:	4b15      	ldr	r3, [pc, #84]	; (1581c <prov_start+0x200>)
   157c6:	5c5d      	ldrb	r5, [r3, r1]
		if (!input) {
   157c8:	2d00      	cmp	r5, #0
   157ca:	d0b3      	beq.n	15734 <prov_start+0x118>
		if (!(prov->input_actions & input)) {
   157cc:	4b0f      	ldr	r3, [pc, #60]	; (1580c <prov_start+0x1f0>)
   157ce:	681f      	ldr	r7, [r3, #0]
   157d0:	8afb      	ldrh	r3, [r7, #22]
   157d2:	422b      	tst	r3, r5
   157d4:	d0ae      	beq.n	15734 <prov_start+0x118>
		if (size > prov->input_size) {
   157d6:	7d3b      	ldrb	r3, [r7, #20]
   157d8:	42a3      	cmp	r3, r4
   157da:	d3ab      	bcc.n	15734 <prov_start+0x118>
		if (input == BT_MESH_ENTER_STRING) {
   157dc:	2d08      	cmp	r5, #8
   157de:	bf0c      	ite	eq
   157e0:	4629      	moveq	r1, r5
   157e2:	2104      	movne	r1, #4
   157e4:	4807      	ldr	r0, [pc, #28]	; (15804 <prov_start+0x1e8>)
   157e6:	f011 fc0f 	bl	27008 <atomic_or>
		return prov->input(input, size);
   157ea:	6a3b      	ldr	r3, [r7, #32]
   157ec:	4621      	mov	r1, r4
   157ee:	4628      	mov	r0, r5
   157f0:	4798      	blx	r3
   157f2:	e79d      	b.n	15730 <prov_start+0x114>
   157f4:	000289a8 	.word	0x000289a8
   157f8:	00028868 	.word	0x00028868
   157fc:	0002e30d 	.word	0x0002e30d
   15800:	0002e326 	.word	0x0002e326
   15804:	200009cc 	.word	0x200009cc
   15808:	20000a14 	.word	0x20000a14
   1580c:	20000aec 	.word	0x20000aec
   15810:	0002e3e1 	.word	0x0002e3e1
   15814:	0002e346 	.word	0x0002e346
   15818:	00028aa4 	.word	0x00028aa4
   1581c:	0002e3e6 	.word	0x0002e3e6

00015820 <pub_key_ready>:
{
   15820:	b508      	push	{r3, lr}
	if (!pkey) {
   15822:	b958      	cbnz	r0, 1583c <pub_key_ready+0x1c>
   15824:	4b13      	ldr	r3, [pc, #76]	; (15874 <pub_key_ready+0x54>)
   15826:	4914      	ldr	r1, [pc, #80]	; (15878 <pub_key_ready+0x58>)
		BT_WARN("Public key not available");
   15828:	4814      	ldr	r0, [pc, #80]	; (1587c <pub_key_ready+0x5c>)
   1582a:	1ac9      	subs	r1, r1, r3
   1582c:	08c9      	lsrs	r1, r1, #3
   1582e:	0189      	lsls	r1, r1, #6
}
   15830:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Public key not available");
   15834:	f041 0102 	orr.w	r1, r1, #2
   15838:	f00d bdb8 	b.w	233ac <log_0>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1583c:	4b10      	ldr	r3, [pc, #64]	; (15880 <pub_key_ready+0x60>)
   1583e:	f3bf 8f5b 	dmb	ish
   15842:	e853 2f00 	ldrex	r2, [r3]
   15846:	f022 0101 	bic.w	r1, r2, #1
   1584a:	e843 1000 	strex	r0, r1, [r3]
   1584e:	2800      	cmp	r0, #0
   15850:	d1f7      	bne.n	15842 <pub_key_ready+0x22>
   15852:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(link.flags, WAIT_PUB_KEY)) {
   15856:	07d2      	lsls	r2, r2, #31
   15858:	d50b      	bpl.n	15872 <pub_key_ready+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1585a:	f7ff fb01 	bl	14e60 <atomic_get.constprop.0>
		if (atomic_test_bit(link.flags, PROVISIONER)) {
   1585e:	0683      	lsls	r3, r0, #26
   15860:	d503      	bpl.n	1586a <pub_key_ready+0x4a>
}
   15862:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			send_pub_key();
   15866:	f7ff bc11 	b.w	1508c <send_pub_key>
}
   1586a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			prov_dh_key_gen();
   1586e:	f7ff bc7b 	b.w	15168 <prov_dh_key_gen>
}
   15872:	bd08      	pop	{r3, pc}
   15874:	00028868 	.word	0x00028868
   15878:	000289a8 	.word	0x000289a8
   1587c:	0002e38a 	.word	0x0002e38a
   15880:	200009cc 	.word	0x200009cc

00015884 <notify_input_complete>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15884:	4b0a      	ldr	r3, [pc, #40]	; (158b0 <notify_input_complete+0x2c>)
   15886:	f3bf 8f5b 	dmb	ish
   1588a:	e853 2f00 	ldrex	r2, [r3]
   1588e:	f022 0110 	bic.w	r1, r2, #16
   15892:	e843 1000 	strex	r0, r1, [r3]
   15896:	2800      	cmp	r0, #0
   15898:	d1f7      	bne.n	1588a <notify_input_complete+0x6>
   1589a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(link.flags, NOTIFY_INPUT_COMPLETE) &&
   1589e:	06d3      	lsls	r3, r2, #27
   158a0:	d504      	bpl.n	158ac <notify_input_complete+0x28>
	    prov->input_complete) {
   158a2:	4b04      	ldr	r3, [pc, #16]	; (158b4 <notify_input_complete+0x30>)
   158a4:	681b      	ldr	r3, [r3, #0]
   158a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	if (atomic_test_and_clear_bit(link.flags, NOTIFY_INPUT_COMPLETE) &&
   158a8:	b103      	cbz	r3, 158ac <notify_input_complete+0x28>
		prov->input_complete();
   158aa:	4718      	bx	r3
}
   158ac:	4770      	bx	lr
   158ae:	bf00      	nop
   158b0:	200009cc 	.word	0x200009cc
   158b4:	20000aec 	.word	0x20000aec

000158b8 <prov_confirm>:
{
   158b8:	b508      	push	{r3, lr}
   158ba:	4601      	mov	r1, r0
	memcpy(link.conf, data, 16);
   158bc:	2210      	movs	r2, #16
   158be:	4808      	ldr	r0, [pc, #32]	; (158e0 <prov_confirm+0x28>)
   158c0:	f00f fbe6 	bl	25090 <memcpy>
	notify_input_complete();
   158c4:	f7ff ffde 	bl	15884 <notify_input_complete>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   158c8:	f7ff faca 	bl	14e60 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, PROVISIONER)) {
   158cc:	0683      	lsls	r3, r0, #26
   158ce:	d503      	bpl.n	158d8 <prov_confirm+0x20>
}
   158d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_random();
   158d4:	f7ff bb14 	b.w	14f00 <send_random>
}
   158d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_confirm();
   158dc:	f7ff bcb0 	b.w	15240 <send_confirm>
   158e0:	200009f4 	.word	0x200009f4

000158e4 <bt_mesh_prov_get>:
#endif

const struct bt_mesh_prov *bt_mesh_prov_get(void)
{
	return prov;
}
   158e4:	4b01      	ldr	r3, [pc, #4]	; (158ec <bt_mesh_prov_get+0x8>)
   158e6:	6818      	ldr	r0, [r3, #0]
   158e8:	4770      	bx	lr
   158ea:	bf00      	nop
   158ec:	20000aec 	.word	0x20000aec

000158f0 <bt_mesh_prov_init>:
{
	return atomic_test_bit(link.flags, LINK_ACTIVE);
}

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
   158f0:	b508      	push	{r3, lr}
	if (!prov_info) {
   158f2:	b148      	cbz	r0, 15908 <bt_mesh_prov_init+0x18>
		BT_ERR("No provisioning context provided");
		return -EINVAL;
	}

	prov = prov_info;
   158f4:	4b0b      	ldr	r3, [pc, #44]	; (15924 <bt_mesh_prov_init+0x34>)
   158f6:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_init();
   158f8:	f000 fdfa 	bl	164f0 <pb_adv_init>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_init();
   158fc:	f000 fee4 	bl	166c8 <pb_gatt_init>
	}

	return reset_state();
}
   15900:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return reset_state();
   15904:	f7ff b9bc 	b.w	14c80 <reset_state>
   15908:	4b07      	ldr	r3, [pc, #28]	; (15928 <bt_mesh_prov_init+0x38>)
   1590a:	4908      	ldr	r1, [pc, #32]	; (1592c <bt_mesh_prov_init+0x3c>)
		BT_ERR("No provisioning context provided");
   1590c:	4808      	ldr	r0, [pc, #32]	; (15930 <bt_mesh_prov_init+0x40>)
   1590e:	1ac9      	subs	r1, r1, r3
   15910:	08c9      	lsrs	r1, r1, #3
   15912:	0189      	lsls	r1, r1, #6
   15914:	f041 0101 	orr.w	r1, r1, #1
   15918:	f00d fd48 	bl	233ac <log_0>
}
   1591c:	f06f 0015 	mvn.w	r0, #21
   15920:	bd08      	pop	{r3, pc}
   15922:	bf00      	nop
   15924:	20000aec 	.word	0x20000aec
   15928:	00028868 	.word	0x00028868
   1592c:	000289a8 	.word	0x000289a8
   15930:	0002e3a3 	.word	0x0002e3a3

00015934 <bt_mesh_prov_enable>:

int bt_mesh_prov_enable(bt_mesh_prov_bearer_t bearers)
{
   15934:	b570      	push	{r4, r5, r6, lr}
   15936:	b086      	sub	sp, #24
   15938:	4604      	mov	r4, r0
	if (bt_mesh_is_provisioned()) {
   1593a:	f7f6 f8f3 	bl	bb24 <bt_mesh_is_provisioned>
   1593e:	4606      	mov	r6, r0
   15940:	2800      	cmp	r0, #0
   15942:	d132      	bne.n	159aa <bt_mesh_prov_enable+0x76>
	return prov;
   15944:	4b1a      	ldr	r3, [pc, #104]	; (159b0 <bt_mesh_prov_enable+0x7c>)
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_DEBUG)) {
		const struct bt_mesh_prov *prov = bt_mesh_prov_get();
		struct bt_uuid_128 uuid = { .uuid = { BT_UUID_TYPE_128 } };
   15946:	4601      	mov	r1, r0
   15948:	2211      	movs	r2, #17
   1594a:	a801      	add	r0, sp, #4
	return prov;
   1594c:	681d      	ldr	r5, [r3, #0]
		struct bt_uuid_128 uuid = { .uuid = { BT_UUID_TYPE_128 } };
   1594e:	f00f fbca 	bl	250e6 <memset>
   15952:	2302      	movs	r3, #2
   15954:	f88d 3004 	strb.w	r3, [sp, #4]

		memcpy(uuid.val, prov->uuid, 16);
   15958:	6829      	ldr	r1, [r5, #0]
   1595a:	4d16      	ldr	r5, [pc, #88]	; (159b4 <bt_mesh_prov_enable+0x80>)
   1595c:	2210      	movs	r2, #16
   1595e:	f10d 0005 	add.w	r0, sp, #5
   15962:	f00f fb95 	bl	25090 <memcpy>
   15966:	4a14      	ldr	r2, [pc, #80]	; (159b8 <bt_mesh_prov_enable+0x84>)
		BT_INFO("Device UUID: %s", bt_uuid_str(&uuid.uuid));
   15968:	a801      	add	r0, sp, #4
   1596a:	1aad      	subs	r5, r5, r2
   1596c:	f7f0 f9e8 	bl	5d40 <bt_uuid_str_real>
   15970:	f7ec fce6 	bl	2340 <log_strdup>
   15974:	08ed      	lsrs	r5, r5, #3
   15976:	01ad      	lsls	r5, r5, #6
   15978:	f045 0503 	orr.w	r5, r5, #3
   1597c:	4601      	mov	r1, r0
   1597e:	462a      	mov	r2, r5
   15980:	480e      	ldr	r0, [pc, #56]	; (159bc <bt_mesh_prov_enable+0x88>)
   15982:	f00d fd20 	bl	233c6 <log_1>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) &&
   15986:	07e3      	lsls	r3, r4, #31
   15988:	d504      	bpl.n	15994 <bt_mesh_prov_enable+0x60>
	    (bearers & BT_MESH_PROV_ADV)) {
		pb_adv.link_accept(&prov_bearer_cb, NULL);
   1598a:	4b0d      	ldr	r3, [pc, #52]	; (159c0 <bt_mesh_prov_enable+0x8c>)
   1598c:	480d      	ldr	r0, [pc, #52]	; (159c4 <bt_mesh_prov_enable+0x90>)
   1598e:	685b      	ldr	r3, [r3, #4]
   15990:	4631      	mov	r1, r6
   15992:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   15994:	f014 0002 	ands.w	r0, r4, #2
   15998:	d005      	beq.n	159a6 <bt_mesh_prov_enable+0x72>
	    (bearers & BT_MESH_PROV_GATT)) {
		pb_gatt.link_accept(&prov_bearer_cb, NULL);
   1599a:	4b0b      	ldr	r3, [pc, #44]	; (159c8 <bt_mesh_prov_enable+0x94>)
   1599c:	4809      	ldr	r0, [pc, #36]	; (159c4 <bt_mesh_prov_enable+0x90>)
   1599e:	685b      	ldr	r3, [r3, #4]
   159a0:	2100      	movs	r1, #0
   159a2:	4798      	blx	r3
	}

	return 0;
   159a4:	2000      	movs	r0, #0
}
   159a6:	b006      	add	sp, #24
   159a8:	bd70      	pop	{r4, r5, r6, pc}
		return -EALREADY;
   159aa:	f06f 0044 	mvn.w	r0, #68	; 0x44
   159ae:	e7fa      	b.n	159a6 <bt_mesh_prov_enable+0x72>
   159b0:	20000aec 	.word	0x20000aec
   159b4:	000289a8 	.word	0x000289a8
   159b8:	00028868 	.word	0x00028868
   159bc:	0002e3c4 	.word	0x0002e3c4
   159c0:	00029448 	.word	0x00029448
   159c4:	000293c0 	.word	0x000293c0
   159c8:	00029460 	.word	0x00029460

000159cc <bt_mesh_prov_complete>:
	return 0;
}

void bt_mesh_prov_complete(u16_t net_idx, u16_t addr)
{
	if (prov->complete) {
   159cc:	4b02      	ldr	r3, [pc, #8]	; (159d8 <bt_mesh_prov_complete+0xc>)
   159ce:	681b      	ldr	r3, [r3, #0]
   159d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   159d2:	b103      	cbz	r3, 159d6 <bt_mesh_prov_complete+0xa>
		prov->complete(net_idx, addr);
   159d4:	4718      	bx	r3
	}
}
   159d6:	4770      	bx	lr
   159d8:	20000aec 	.word	0x20000aec

000159dc <bt_mesh_prov_reset>:

void bt_mesh_prov_reset(void)
{
	if (prov->reset) {
   159dc:	4b02      	ldr	r3, [pc, #8]	; (159e8 <bt_mesh_prov_reset+0xc>)
   159de:	681b      	ldr	r3, [r3, #0]
   159e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   159e2:	b103      	cbz	r3, 159e6 <bt_mesh_prov_reset+0xa>
		prov->reset();
   159e4:	4718      	bx	r3
	}
}
   159e6:	4770      	bx	lr
   159e8:	20000aec 	.word	0x20000aec

000159ec <free_segments>:

	return 1 + (len / CONT_PAYLOAD_MAX);
}

static void free_segments(void)
{
   159ec:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   159ee:	2400      	movs	r4, #0
   159f0:	4d08      	ldr	r5, [pc, #32]	; (15a14 <free_segments+0x28>)

		if (!buf) {
			break;
		}

		link.tx.buf[i] = NULL;
   159f2:	4626      	mov	r6, r4
		struct net_buf *buf = link.tx.buf[i];
   159f4:	f855 0b04 	ldr.w	r0, [r5], #4
		if (!buf) {
   159f8:	b158      	cbz	r0, 15a12 <free_segments+0x26>
		/* Mark as canceled */
		BT_MESH_ADV(buf)->busy = 0U;
   159fa:	6943      	ldr	r3, [r0, #20]
		link.tx.buf[i] = NULL;
   159fc:	f845 6c04 	str.w	r6, [r5, #-4]
		BT_MESH_ADV(buf)->busy = 0U;
   15a00:	7a1a      	ldrb	r2, [r3, #8]
   15a02:	f366 0282 	bfi	r2, r6, #2, #1
   15a06:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   15a08:	3401      	adds	r4, #1
		net_buf_unref(buf);
   15a0a:	f008 fd41 	bl	1e490 <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   15a0e:	2c03      	cmp	r4, #3
   15a10:	d1f0      	bne.n	159f4 <free_segments+0x8>
	}
}
   15a12:	bd70      	pop	{r4, r5, r6, pc}
   15a14:	2000690c 	.word	0x2000690c

00015a18 <prov_clear_tx>:
{
	return (((id + 1) & 0x7f) | (id & 0x80));
}

static void prov_clear_tx(void)
{
   15a18:	b508      	push	{r3, lr}
	BT_DBG("");

	k_delayed_work_cancel(&link.tx.retransmit);
   15a1a:	4803      	ldr	r0, [pc, #12]	; (15a28 <prov_clear_tx+0x10>)
   15a1c:	f00c fb24 	bl	22068 <k_delayed_work_cancel>

	free_segments();
}
   15a20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
   15a24:	f7ff bfe2 	b.w	159ec <free_segments>
   15a28:	20006920 	.word	0x20006920

00015a2c <close_link>:
	link.rx.buf = &rx_buf;
	net_buf_simple_reset(link.rx.buf);
}

static void close_link(enum prov_bearer_link_status reason)
{
   15a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct prov_bearer_cb *cb = link.cb;
   15a30:	4c0f      	ldr	r4, [pc, #60]	; (15a70 <close_link+0x44>)
{
   15a32:	4605      	mov	r5, r0
	void *cb_data = link.cb_data;
   15a34:	e9d4 7602 	ldrd	r7, r6, [r4, #8]
	prov_clear_tx();
   15a38:	f7ff ffee 	bl	15a18 <prov_clear_tx>
	k_delayed_work_cancel(&link.prot_timer);
   15a3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15a40:	f00c fb12 	bl	22068 <k_delayed_work_cancel>
	(void)memset(&link, 0, offsetof(struct pb_adv, tx.retransmit));
   15a44:	2238      	movs	r2, #56	; 0x38
   15a46:	2100      	movs	r1, #0
   15a48:	4620      	mov	r0, r4
   15a4a:	f00f fb4c 	bl	250e6 <memset>
	link.rx.id = XACT_NVAL;
   15a4e:	23ff      	movs	r3, #255	; 0xff
   15a50:	7423      	strb	r3, [r4, #16]
	link.tx.pending_ack = XACT_NVAL;
   15a52:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	link.rx.buf = &rx_buf;
   15a56:	4b07      	ldr	r3, [pc, #28]	; (15a74 <close_link+0x48>)
   15a58:	6163      	str	r3, [r4, #20]
	buf->len  = 0U;
   15a5a:	2200      	movs	r2, #0
   15a5c:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   15a5e:	689a      	ldr	r2, [r3, #8]
   15a60:	601a      	str	r2, [r3, #0]

	reset_adv_link();
	cb->link_closed(&pb_adv, cb_data, reason);
   15a62:	4631      	mov	r1, r6
   15a64:	687b      	ldr	r3, [r7, #4]
   15a66:	4804      	ldr	r0, [pc, #16]	; (15a78 <close_link+0x4c>)
   15a68:	462a      	mov	r2, r5
}
   15a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	cb->link_closed(&pb_adv, cb_data, reason);
   15a6e:	4718      	bx	r3
   15a70:	200068e8 	.word	0x200068e8
   15a74:	20006dd4 	.word	0x20006dd4
   15a78:	00029448 	.word	0x00029448

00015a7c <protocol_timeout>:

static void protocol_timeout(struct k_work *work)
{
	BT_DBG("");

	link.rx.seg = 0U;
   15a7c:	4b02      	ldr	r3, [pc, #8]	; (15a88 <protocol_timeout+0xc>)
   15a7e:	2200      	movs	r2, #0
	close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   15a80:	2001      	movs	r0, #1
	link.rx.seg = 0U;
   15a82:	745a      	strb	r2, [r3, #17]
	close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   15a84:	f7ff bfd2 	b.w	15a2c <close_link>
   15a88:	200068e8 	.word	0x200068e8

00015a8c <adv_buf_create>:
{
   15a8c:	b510      	push	{r4, lr}
	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV,
   15a8e:	f040 0108 	orr.w	r1, r0, #8
   15a92:	f44f 72c8 	mov.w	r2, #400	; 0x190
   15a96:	2000      	movs	r0, #0
   15a98:	f7f6 fa12 	bl	bec0 <bt_mesh_adv_create>
	if (!buf) {
   15a9c:	4604      	mov	r4, r0
   15a9e:	b948      	cbnz	r0, 15ab4 <adv_buf_create+0x28>
   15aa0:	4905      	ldr	r1, [pc, #20]	; (15ab8 <adv_buf_create+0x2c>)
   15aa2:	4b06      	ldr	r3, [pc, #24]	; (15abc <adv_buf_create+0x30>)
		BT_ERR("Out of provisioning buffers");
   15aa4:	4806      	ldr	r0, [pc, #24]	; (15ac0 <adv_buf_create+0x34>)
   15aa6:	1ac9      	subs	r1, r1, r3
   15aa8:	08c9      	lsrs	r1, r1, #3
   15aaa:	0189      	lsls	r1, r1, #6
   15aac:	f041 0101 	orr.w	r1, r1, #1
   15ab0:	f00d fc7c 	bl	233ac <log_0>
}
   15ab4:	4620      	mov	r0, r4
   15ab6:	bd10      	pop	{r4, pc}
   15ab8:	00028998 	.word	0x00028998
   15abc:	00028868 	.word	0x00028868
   15ac0:	0002e3ea 	.word	0x0002e3ea

00015ac4 <ack_complete>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15ac4:	4b06      	ldr	r3, [pc, #24]	; (15ae0 <ack_complete+0x1c>)
   15ac6:	f3bf 8f5b 	dmb	ish
   15aca:	e853 2f00 	ldrex	r2, [r3]
   15ace:	f022 0210 	bic.w	r2, r2, #16
   15ad2:	e843 2100 	strex	r1, r2, [r3]
   15ad6:	2900      	cmp	r1, #0
   15ad8:	d1f7      	bne.n	15aca <ack_complete+0x6>
   15ada:	f3bf 8f5b 	dmb	ish
}
   15ade:	4770      	bx	lr
   15ae0:	200068ec 	.word	0x200068ec

00015ae4 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15ae4:	4b03      	ldr	r3, [pc, #12]	; (15af4 <atomic_get.constprop.0+0x10>)
   15ae6:	f3bf 8f5b 	dmb	ish
   15aea:	6858      	ldr	r0, [r3, #4]
   15aec:	f3bf 8f5b 	dmb	ish
}
   15af0:	4770      	bx	lr
   15af2:	bf00      	nop
   15af4:	200068e8 	.word	0x200068e8

00015af8 <prov_link_accept>:

	return 0;
}

static int prov_link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
   15af8:	b510      	push	{r4, lr}
   15afa:	4602      	mov	r2, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15afc:	f7ff fff2 	bl	15ae4 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, LINK_ACTIVE)) {
   15b00:	f010 0401 	ands.w	r4, r0, #1
   15b04:	d10d      	bne.n	15b22 <prov_link_accept+0x2a>
		return -EBUSY;
	}

	link.rx.id = 0x7F;
   15b06:	4b08      	ldr	r3, [pc, #32]	; (15b28 <prov_link_accept+0x30>)
   15b08:	207f      	movs	r0, #127	; 0x7f
   15b0a:	7418      	strb	r0, [r3, #16]
	link.tx.id = 0xFF;
   15b0c:	20ff      	movs	r0, #255	; 0xff
	link.cb = cb;
	link.cb_data = cb_data;
   15b0e:	e9c3 2102 	strd	r2, r1, [r3, #8]
	link.tx.id = 0xFF;
   15b12:	f883 0020 	strb.w	r0, [r3, #32]

	/* Make sure we're scanning for provisioning inviations */
	bt_mesh_scan_enable();
   15b16:	f7f6 fa19 	bl	bf4c <bt_mesh_scan_enable>
	/* Enable unprovisioned beacon sending */
	bt_mesh_beacon_enable();
   15b1a:	f7f6 fd21 	bl	c560 <bt_mesh_beacon_enable>

	return 0;
   15b1e:	4620      	mov	r0, r4
}
   15b20:	bd10      	pop	{r4, pc}
		return -EBUSY;
   15b22:	f06f 000f 	mvn.w	r0, #15
   15b26:	e7fb      	b.n	15b20 <prov_link_accept+0x28>
   15b28:	200068e8 	.word	0x200068e8

00015b2c <prov_retransmit>:
{
   15b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15b2e:	f7ff ffd9 	bl	15ae4 <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
   15b32:	07c2      	lsls	r2, r0, #31
   15b34:	d40b      	bmi.n	15b4e <prov_retransmit+0x22>
   15b36:	4b2f      	ldr	r3, [pc, #188]	; (15bf4 <prov_retransmit+0xc8>)
   15b38:	492f      	ldr	r1, [pc, #188]	; (15bf8 <prov_retransmit+0xcc>)
		BT_WARN("Link not active");
   15b3a:	4830      	ldr	r0, [pc, #192]	; (15bfc <prov_retransmit+0xd0>)
   15b3c:	1ac9      	subs	r1, r1, r3
   15b3e:	08c9      	lsrs	r1, r1, #3
   15b40:	0189      	lsls	r1, r1, #6
}
   15b42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Link not active");
   15b46:	f041 0102 	orr.w	r1, r1, #2
   15b4a:	f00d bc2f 	b.w	233ac <log_0>
   15b4e:	f7ff ffc9 	bl	15ae4 <atomic_get.constprop.0>
		timeout = TRANSACTION_TIMEOUT;
   15b52:	f640 32b8 	movw	r2, #3000	; 0xbb8
   15b56:	f010 0f04 	tst.w	r0, #4
   15b5a:	f247 5330 	movw	r3, #30000	; 0x7530
   15b5e:	bf14      	ite	ne
   15b60:	4615      	movne	r5, r2
   15b62:	461d      	moveq	r5, r3
   15b64:	f012 fc9c 	bl	284a0 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   15b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15b6c:	460a      	mov	r2, r1
	if (k_uptime_get() - link.tx.start > timeout) {
   15b6e:	4c24      	ldr	r4, [pc, #144]	; (15c00 <prov_retransmit+0xd4>)
   15b70:	fba0 0103 	umull	r0, r1, r0, r3
   15b74:	fb03 1102 	mla	r1, r3, r2, r1
   15b78:	0bc3      	lsrs	r3, r0, #15
   15b7a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   15b7e:	0bca      	lsrs	r2, r1, #15
   15b80:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
   15b84:	1a5e      	subs	r6, r3, r1
   15b86:	eb62 0700 	sbc.w	r7, r2, r0
   15b8a:	17eb      	asrs	r3, r5, #31
   15b8c:	42b5      	cmp	r5, r6
   15b8e:	41bb      	sbcs	r3, r7
   15b90:	da14      	bge.n	15bbc <prov_retransmit+0x90>
   15b92:	f7ff ffa7 	bl	15ae4 <atomic_get.constprop.0>
		if (atomic_test_bit(link.flags, LINK_CLOSING)) {
   15b96:	0743      	lsls	r3, r0, #29
   15b98:	d504      	bpl.n	15ba4 <prov_retransmit+0x78>
			close_link(PROV_BEARER_LINK_STATUS_SUCCESS);
   15b9a:	2000      	movs	r0, #0
}
   15b9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   15ba0:	f7ff bf44 	b.w	15a2c <close_link>
   15ba4:	4b13      	ldr	r3, [pc, #76]	; (15bf4 <prov_retransmit+0xc8>)
   15ba6:	4914      	ldr	r1, [pc, #80]	; (15bf8 <prov_retransmit+0xcc>)
			BT_WARN("Giving up transaction");
   15ba8:	4816      	ldr	r0, [pc, #88]	; (15c04 <prov_retransmit+0xd8>)
   15baa:	1ac9      	subs	r1, r1, r3
   15bac:	08c9      	lsrs	r1, r1, #3
   15bae:	0189      	lsls	r1, r1, #6
   15bb0:	f041 0102 	orr.w	r1, r1, #2
   15bb4:	f00d fbfa 	bl	233ac <log_0>
			close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   15bb8:	2001      	movs	r0, #1
   15bba:	e7ef      	b.n	15b9c <prov_retransmit+0x70>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   15bbc:	4e12      	ldr	r6, [pc, #72]	; (15c08 <prov_retransmit+0xdc>)
   15bbe:	3424      	adds	r4, #36	; 0x24
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   15bc0:	2500      	movs	r5, #0
		struct net_buf *buf = link.tx.buf[i];
   15bc2:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   15bc6:	b1a0      	cbz	r0, 15bf2 <prov_retransmit+0xc6>
		if (BT_MESH_ADV(buf)->busy) {
   15bc8:	6943      	ldr	r3, [r0, #20]
   15bca:	7a1a      	ldrb	r2, [r3, #8]
   15bcc:	f012 0204 	ands.w	r2, r2, #4
   15bd0:	f105 0501 	add.w	r5, r5, #1
   15bd4:	d10b      	bne.n	15bee <prov_retransmit+0xc2>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   15bd6:	2d03      	cmp	r5, #3
   15bd8:	d005      	beq.n	15be6 <prov_retransmit+0xba>
   15bda:	6823      	ldr	r3, [r4, #0]
   15bdc:	b11b      	cbz	r3, 15be6 <prov_retransmit+0xba>
			bt_mesh_adv_send(buf, NULL, NULL);
   15bde:	4611      	mov	r1, r2
   15be0:	f7f6 f97e 	bl	bee0 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   15be4:	e7ed      	b.n	15bc2 <prov_retransmit+0x96>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   15be6:	2200      	movs	r2, #0
   15be8:	4631      	mov	r1, r6
   15bea:	f7f6 f979 	bl	bee0 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   15bee:	2d03      	cmp	r5, #3
   15bf0:	d1e7      	bne.n	15bc2 <prov_retransmit+0x96>
}
   15bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15bf4:	00028868 	.word	0x00028868
   15bf8:	00028998 	.word	0x00028998
   15bfc:	0002e406 	.word	0x0002e406
   15c00:	200068e8 	.word	0x200068e8
   15c04:	0002e416 	.word	0x0002e416
   15c08:	20006dcc 	.word	0x20006dcc

00015c0c <gen_prov_ack>:
{
   15c0c:	b510      	push	{r4, lr}
	if (!link.tx.buf[0]) {
   15c0e:	4c0b      	ldr	r4, [pc, #44]	; (15c3c <gen_prov_ack+0x30>)
   15c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15c12:	b18b      	cbz	r3, 15c38 <gen_prov_ack+0x2c>
	if (rx->xact_id == link.tx.id) {
   15c14:	7902      	ldrb	r2, [r0, #4]
   15c16:	f894 3020 	ldrb.w	r3, [r4, #32]
   15c1a:	429a      	cmp	r2, r3
   15c1c:	d10c      	bne.n	15c38 <gen_prov_ack+0x2c>
   15c1e:	f7ff ff61 	bl	15ae4 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, LINK_CLOSING)) {
   15c22:	0743      	lsls	r3, r0, #29
   15c24:	d401      	bmi.n	15c2a <gen_prov_ack+0x1e>
			prov_clear_tx();
   15c26:	f7ff fef7 	bl	15a18 <prov_clear_tx>
		if (link.tx.cb && link.tx.cb) {
   15c2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15c2c:	b123      	cbz	r3, 15c38 <gen_prov_ack+0x2c>
			link.tx.cb(0, link.tx.cb_data);
   15c2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   15c30:	2000      	movs	r0, #0
}
   15c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			link.tx.cb(0, link.tx.cb_data);
   15c36:	4718      	bx	r3
}
   15c38:	bd10      	pop	{r4, pc}
   15c3a:	bf00      	nop
   15c3c:	200068e8 	.word	0x200068e8

00015c40 <buf_sent>:
	if (!link.tx.buf[0]) {
   15c40:	4904      	ldr	r1, [pc, #16]	; (15c54 <buf_sent+0x14>)
   15c42:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   15c44:	b12b      	cbz	r3, 15c52 <buf_sent+0x12>
   15c46:	4804      	ldr	r0, [pc, #16]	; (15c58 <buf_sent+0x18>)
   15c48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   15c4c:	3138      	adds	r1, #56	; 0x38
   15c4e:	f00c b97b 	b.w	21f48 <k_delayed_work_submit_to_queue>
}
   15c52:	4770      	bx	lr
   15c54:	200068e8 	.word	0x200068e8
   15c58:	20001c08 	.word	0x20001c08

00015c5c <prov_failed>:
{
   15c5c:	b510      	push	{r4, lr}
	link.cb->error(&pb_adv, link.cb_data, err);
   15c5e:	4c0a      	ldr	r4, [pc, #40]	; (15c88 <prov_failed+0x2c>)
   15c60:	68a3      	ldr	r3, [r4, #8]
   15c62:	68e1      	ldr	r1, [r4, #12]
   15c64:	689b      	ldr	r3, [r3, #8]
{
   15c66:	4602      	mov	r2, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15c68:	3404      	adds	r4, #4
	link.cb->error(&pb_adv, link.cb_data, err);
   15c6a:	4808      	ldr	r0, [pc, #32]	; (15c8c <prov_failed+0x30>)
   15c6c:	4798      	blx	r3
   15c6e:	f3bf 8f5b 	dmb	ish
   15c72:	e854 3f00 	ldrex	r3, [r4]
   15c76:	f043 0308 	orr.w	r3, r3, #8
   15c7a:	e844 3200 	strex	r2, r3, [r4]
   15c7e:	2a00      	cmp	r2, #0
   15c80:	d1f7      	bne.n	15c72 <prov_failed+0x16>
   15c82:	f3bf 8f5b 	dmb	ish
}
   15c86:	bd10      	pop	{r4, pc}
   15c88:	200068e8 	.word	0x200068e8
   15c8c:	00029448 	.word	0x00029448

00015c90 <gen_prov_ack_send>:
{
   15c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c94:	4e25      	ldr	r6, [pc, #148]	; (15d2c <gen_prov_ack_send+0x9c>)
   15c96:	f3bf 8f5b 	dmb	ish
   15c9a:	4607      	mov	r7, r0
   15c9c:	1d33      	adds	r3, r6, #4
   15c9e:	e853 2f00 	ldrex	r2, [r3]
   15ca2:	f042 0110 	orr.w	r1, r2, #16
   15ca6:	e843 1000 	strex	r0, r1, [r3]
   15caa:	2800      	cmp	r0, #0
   15cac:	d1f7      	bne.n	15c9e <gen_prov_ack_send+0xe>
   15cae:	f3bf 8f5b 	dmb	ish
	if (pending && link.tx.pending_ack == xact_id) {
   15cb2:	f012 0810 	ands.w	r8, r2, #16
   15cb6:	461c      	mov	r4, r3
   15cb8:	d003      	beq.n	15cc2 <gen_prov_ack_send+0x32>
   15cba:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   15cbe:	42bb      	cmp	r3, r7
   15cc0:	d010      	beq.n	15ce4 <gen_prov_ack_send+0x54>
	buf = adv_buf_create(RETRANSMITS_ACK);
   15cc2:	2002      	movs	r0, #2
   15cc4:	f7ff fee2 	bl	15a8c <adv_buf_create>
	if (!buf) {
   15cc8:	4605      	mov	r5, r0
   15cca:	b968      	cbnz	r0, 15ce8 <gen_prov_ack_send+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15ccc:	f3bf 8f5b 	dmb	ish
   15cd0:	e854 3f00 	ldrex	r3, [r4]
   15cd4:	f023 0310 	bic.w	r3, r3, #16
   15cd8:	e844 3200 	strex	r2, r3, [r4]
   15cdc:	2a00      	cmp	r2, #0
   15cde:	d1f7      	bne.n	15cd0 <gen_prov_ack_send+0x40>
   15ce0:	f3bf 8f5b 	dmb	ish
}
   15ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pending) {
   15ce8:	f1b8 0f00 	cmp.w	r8, #0
   15cec:	d11b      	bne.n	15d26 <gen_prov_ack_send+0x96>
		complete = &cb;
   15cee:	f8df 8040 	ldr.w	r8, [pc, #64]	; 15d30 <gen_prov_ack_send+0xa0>
		link.tx.pending_ack = xact_id;
   15cf2:	f886 7021 	strb.w	r7, [r6, #33]	; 0x21
	net_buf_add_be32(buf, link.id);
   15cf6:	f105 0408 	add.w	r4, r5, #8
   15cfa:	6831      	ldr	r1, [r6, #0]
   15cfc:	4620      	mov	r0, r4
   15cfe:	f012 f926 	bl	27f4e <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
   15d02:	4639      	mov	r1, r7
   15d04:	4620      	mov	r0, r4
   15d06:	f012 f8fd 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_ACK);
   15d0a:	2101      	movs	r1, #1
   15d0c:	4620      	mov	r0, r4
   15d0e:	f012 f8f9 	bl	27f04 <net_buf_simple_add_u8>
	bt_mesh_adv_send(buf, complete, NULL);
   15d12:	4628      	mov	r0, r5
   15d14:	4641      	mov	r1, r8
   15d16:	2200      	movs	r2, #0
   15d18:	f7f6 f8e2 	bl	bee0 <bt_mesh_adv_send>
	net_buf_unref(buf);
   15d1c:	4628      	mov	r0, r5
}
   15d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	net_buf_unref(buf);
   15d22:	f008 bbb5 	b.w	1e490 <net_buf_unref>
		complete = NULL;
   15d26:	f04f 0800 	mov.w	r8, #0
   15d2a:	e7e4      	b.n	15cf6 <gen_prov_ack_send+0x66>
   15d2c:	200068e8 	.word	0x200068e8
   15d30:	00029420 	.word	0x00029420

00015d34 <prov_msg_recv>:
{
   15d34:	b510      	push	{r4, lr}
   15d36:	4c1d      	ldr	r4, [pc, #116]	; (15dac <prov_msg_recv+0x78>)
   15d38:	481d      	ldr	r0, [pc, #116]	; (15db0 <prov_msg_recv+0x7c>)
   15d3a:	f104 0158 	add.w	r1, r4, #88	; 0x58
   15d3e:	f64e 2260 	movw	r2, #60000	; 0xea60
   15d42:	f00c f901 	bl	21f48 <k_delayed_work_submit_to_queue>
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   15d46:	7ce1      	ldrb	r1, [r4, #19]
   15d48:	6960      	ldr	r0, [r4, #20]
   15d4a:	f7f9 fb37 	bl	f3bc <bt_mesh_fcs_check>
   15d4e:	b958      	cbnz	r0, 15d68 <prov_msg_recv+0x34>
   15d50:	4918      	ldr	r1, [pc, #96]	; (15db4 <prov_msg_recv+0x80>)
   15d52:	4b19      	ldr	r3, [pc, #100]	; (15db8 <prov_msg_recv+0x84>)
		BT_ERR("Incorrect FCS");
   15d54:	4819      	ldr	r0, [pc, #100]	; (15dbc <prov_msg_recv+0x88>)
   15d56:	1ac9      	subs	r1, r1, r3
   15d58:	08c9      	lsrs	r1, r1, #3
   15d5a:	0189      	lsls	r1, r1, #6
}
   15d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Incorrect FCS");
   15d60:	f041 0101 	orr.w	r1, r1, #1
   15d64:	f00d bb22 	b.w	233ac <log_0>
	gen_prov_ack_send(link.rx.id);
   15d68:	7c20      	ldrb	r0, [r4, #16]
   15d6a:	f7ff ff91 	bl	15c90 <gen_prov_ack_send>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15d6e:	f7ff feb9 	bl	15ae4 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, LINK_INVALID)) {
   15d72:	0703      	lsls	r3, r0, #28
   15d74:	d511      	bpl.n	15d9a <prov_msg_recv+0x66>
   15d76:	4b10      	ldr	r3, [pc, #64]	; (15db8 <prov_msg_recv+0x84>)
   15d78:	4a0e      	ldr	r2, [pc, #56]	; (15db4 <prov_msg_recv+0x80>)
		BT_WARN("Unexpected msg 0x%02x on invalidated link",
   15d7a:	4811      	ldr	r0, [pc, #68]	; (15dc0 <prov_msg_recv+0x8c>)
   15d7c:	1ad2      	subs	r2, r2, r3
   15d7e:	6963      	ldr	r3, [r4, #20]
   15d80:	08d2      	lsrs	r2, r2, #3
   15d82:	681b      	ldr	r3, [r3, #0]
   15d84:	0192      	lsls	r2, r2, #6
   15d86:	7819      	ldrb	r1, [r3, #0]
   15d88:	f042 0202 	orr.w	r2, r2, #2
   15d8c:	f00d fb1b 	bl	233c6 <log_1>
}
   15d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov_failed(PROV_ERR_UNEXP_PDU);
   15d94:	2003      	movs	r0, #3
   15d96:	f7ff bf61 	b.w	15c5c <prov_failed>
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   15d9a:	68a3      	ldr	r3, [r4, #8]
   15d9c:	6962      	ldr	r2, [r4, #20]
   15d9e:	68e1      	ldr	r1, [r4, #12]
   15da0:	68db      	ldr	r3, [r3, #12]
   15da2:	4808      	ldr	r0, [pc, #32]	; (15dc4 <prov_msg_recv+0x90>)
}
   15da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   15da8:	4718      	bx	r3
   15daa:	bf00      	nop
   15dac:	200068e8 	.word	0x200068e8
   15db0:	20001c08 	.word	0x20001c08
   15db4:	00028998 	.word	0x00028998
   15db8:	00028868 	.word	0x00028868
   15dbc:	0002e42c 	.word	0x0002e42c
   15dc0:	0002e43a 	.word	0x0002e43a
   15dc4:	00029448 	.word	0x00029448

00015dc8 <gen_prov_start>:
{
   15dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t expected_id = next_transaction_id(link.rx.id);
   15dcc:	4d49      	ldr	r5, [pc, #292]	; (15ef4 <gen_prov_start+0x12c>)
{
   15dce:	4604      	mov	r4, r0
   15dd0:	460e      	mov	r6, r1
   15dd2:	7901      	ldrb	r1, [r0, #4]
	if (link.rx.seg) {
   15dd4:	7c68      	ldrb	r0, [r5, #17]
	u8_t expected_id = next_transaction_id(link.rx.id);
   15dd6:	7c2a      	ldrb	r2, [r5, #16]
	if (link.rx.seg) {
   15dd8:	462f      	mov	r7, r5
   15dda:	b170      	cbz	r0, 15dfa <gen_prov_start+0x32>
		if (rx->xact_id != link.rx.id) {
   15ddc:	428a      	cmp	r2, r1
   15dde:	f000 8086 	beq.w	15eee <gen_prov_start+0x126>
   15de2:	4945      	ldr	r1, [pc, #276]	; (15ef8 <gen_prov_start+0x130>)
   15de4:	4b45      	ldr	r3, [pc, #276]	; (15efc <gen_prov_start+0x134>)
			BT_WARN("Got Start while there are unreceived "
   15de6:	4846      	ldr	r0, [pc, #280]	; (15f00 <gen_prov_start+0x138>)
   15de8:	1ac9      	subs	r1, r1, r3
   15dea:	08c9      	lsrs	r1, r1, #3
   15dec:	0189      	lsls	r1, r1, #6
}
   15dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("Got Start while there are unreceived "
   15df2:	f041 0102 	orr.w	r1, r1, #2
   15df6:	f00d bad9 	b.w	233ac <log_0>
	if (rx->xact_id == link.rx.id) {
   15dfa:	428a      	cmp	r2, r1
   15dfc:	d108      	bne.n	15e10 <gen_prov_start+0x48>
   15dfe:	f7ff fe71 	bl	15ae4 <atomic_get.constprop.0>
		if (!ack_pending()) {
   15e02:	06c3      	lsls	r3, r0, #27
   15e04:	d473      	bmi.n	15eee <gen_prov_start+0x126>
			gen_prov_ack_send(rx->xact_id);
   15e06:	7920      	ldrb	r0, [r4, #4]
}
   15e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			gen_prov_ack_send(rx->xact_id);
   15e0c:	f7ff bf40 	b.w	15c90 <gen_prov_ack_send>
	return (((id + 1) & 0x7f) | (id & 0x80));
   15e10:	b252      	sxtb	r2, r2
   15e12:	1c53      	adds	r3, r2, #1
   15e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15e18:	f002 0280 	and.w	r2, r2, #128	; 0x80
   15e1c:	431a      	orrs	r2, r3
	if (rx->xact_id != expected_id) {
   15e1e:	4291      	cmp	r1, r2
   15e20:	d00b      	beq.n	15e3a <gen_prov_start+0x72>
   15e22:	4836      	ldr	r0, [pc, #216]	; (15efc <gen_prov_start+0x134>)
   15e24:	4b34      	ldr	r3, [pc, #208]	; (15ef8 <gen_prov_start+0x130>)
   15e26:	1a1b      	subs	r3, r3, r0
   15e28:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
   15e2a:	019b      	lsls	r3, r3, #6
}
   15e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
   15e30:	4834      	ldr	r0, [pc, #208]	; (15f04 <gen_prov_start+0x13c>)
   15e32:	f043 0302 	orr.w	r3, r3, #2
   15e36:	f00d bada 	b.w	233ee <log_2>
	net_buf_simple_reset(link.rx.buf);
   15e3a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   15e3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
	buf->len  = 0U;
   15e42:	f8a8 0004 	strh.w	r0, [r8, #4]
	buf->data = buf->__buf;
   15e46:	f8c8 3000 	str.w	r3, [r8]
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
   15e4a:	4630      	mov	r0, r6
   15e4c:	f012 f82e 	bl	27eac <net_buf_simple_pull_be16>
   15e50:	f8a8 0004 	strh.w	r0, [r8, #4]
	link.rx.id = rx->xact_id;
   15e54:	7923      	ldrb	r3, [r4, #4]
   15e56:	742b      	strb	r3, [r5, #16]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   15e58:	4630      	mov	r0, r6
   15e5a:	f012 f817 	bl	27e8c <net_buf_simple_pull_u8>
	if (link.rx.buf->len < 1) {
   15e5e:	696b      	ldr	r3, [r5, #20]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   15e60:	74e8      	strb	r0, [r5, #19]
	if (link.rx.buf->len < 1) {
   15e62:	8899      	ldrh	r1, [r3, #4]
   15e64:	b951      	cbnz	r1, 15e7c <gen_prov_start+0xb4>
   15e66:	4924      	ldr	r1, [pc, #144]	; (15ef8 <gen_prov_start+0x130>)
   15e68:	4b24      	ldr	r3, [pc, #144]	; (15efc <gen_prov_start+0x134>)
		BT_ERR("Ignoring zero-length provisioning PDU");
   15e6a:	4827      	ldr	r0, [pc, #156]	; (15f08 <gen_prov_start+0x140>)
   15e6c:	1ac9      	subs	r1, r1, r3
   15e6e:	08c9      	lsrs	r1, r1, #3
   15e70:	0189      	lsls	r1, r1, #6
   15e72:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Too small total length for multi-segment PDU");
   15e76:	f00d fa99 	bl	233ac <log_0>
		prov_failed(PROV_ERR_NVAL_FMT);
   15e7a:	e00c      	b.n	15e96 <gen_prov_start+0xce>
	if (link.rx.buf->len > link.rx.buf->size) {
   15e7c:	88db      	ldrh	r3, [r3, #6]
   15e7e:	428b      	cmp	r3, r1
   15e80:	d20e      	bcs.n	15ea0 <gen_prov_start+0xd8>
   15e82:	4a1d      	ldr	r2, [pc, #116]	; (15ef8 <gen_prov_start+0x130>)
   15e84:	4b1d      	ldr	r3, [pc, #116]	; (15efc <gen_prov_start+0x134>)
		BT_ERR("Too large provisioning PDU (%u bytes)",
   15e86:	4821      	ldr	r0, [pc, #132]	; (15f0c <gen_prov_start+0x144>)
   15e88:	1ad2      	subs	r2, r2, r3
   15e8a:	08d2      	lsrs	r2, r2, #3
   15e8c:	0192      	lsls	r2, r2, #6
   15e8e:	f042 0201 	orr.w	r2, r2, #1
   15e92:	f00d fa98 	bl	233c6 <log_1>
}
   15e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_failed(PROV_ERR_NVAL_FMT);
   15e9a:	2002      	movs	r0, #2
   15e9c:	f7ff bede 	b.w	15c5c <prov_failed>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20U) {
   15ea0:	7963      	ldrb	r3, [r4, #5]
   15ea2:	089b      	lsrs	r3, r3, #2
   15ea4:	d00a      	beq.n	15ebc <gen_prov_start+0xf4>
   15ea6:	2914      	cmp	r1, #20
   15ea8:	d808      	bhi.n	15ebc <gen_prov_start+0xf4>
   15eaa:	4913      	ldr	r1, [pc, #76]	; (15ef8 <gen_prov_start+0x130>)
   15eac:	4b13      	ldr	r3, [pc, #76]	; (15efc <gen_prov_start+0x134>)
		BT_ERR("Too small total length for multi-segment PDU");
   15eae:	4818      	ldr	r0, [pc, #96]	; (15f10 <gen_prov_start+0x148>)
   15eb0:	1ac9      	subs	r1, r1, r3
   15eb2:	08c9      	lsrs	r1, r1, #3
   15eb4:	0189      	lsls	r1, r1, #6
   15eb6:	f041 0101 	orr.w	r1, r1, #1
   15eba:	e7dc      	b.n	15e76 <gen_prov_start+0xae>
	prov_clear_tx();
   15ebc:	f7ff fdac 	bl	15a18 <prov_clear_tx>
	link.rx.seg = (1 << (START_LAST_SEG(rx->gpc) + 1)) - 1;
   15ec0:	7962      	ldrb	r2, [r4, #5]
   15ec2:	0892      	lsrs	r2, r2, #2
   15ec4:	1c51      	adds	r1, r2, #1
   15ec6:	2301      	movs	r3, #1
   15ec8:	408b      	lsls	r3, r1
   15eca:	3b01      	subs	r3, #1
   15ecc:	747b      	strb	r3, [r7, #17]
	memcpy(link.rx.buf->data, buf->data, buf->len);
   15ece:	697b      	ldr	r3, [r7, #20]
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   15ed0:	74ba      	strb	r2, [r7, #18]
	memcpy(link.rx.buf->data, buf->data, buf->len);
   15ed2:	6818      	ldr	r0, [r3, #0]
   15ed4:	88b2      	ldrh	r2, [r6, #4]
   15ed6:	6831      	ldr	r1, [r6, #0]
   15ed8:	f00f f8da 	bl	25090 <memcpy>
	XACT_SEG_RECV(0);
   15edc:	7c7b      	ldrb	r3, [r7, #17]
   15ede:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   15ee2:	747b      	strb	r3, [r7, #17]
	if (!link.rx.seg) {
   15ee4:	b91b      	cbnz	r3, 15eee <gen_prov_start+0x126>
}
   15ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
   15eea:	f7ff bf23 	b.w	15d34 <prov_msg_recv>
}
   15eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15ef2:	bf00      	nop
   15ef4:	200068e8 	.word	0x200068e8
   15ef8:	00028998 	.word	0x00028998
   15efc:	00028868 	.word	0x00028868
   15f00:	0002e464 	.word	0x0002e464
   15f04:	0002e492 	.word	0x0002e492
   15f08:	0002e4b6 	.word	0x0002e4b6
   15f0c:	0002e4dc 	.word	0x0002e4dc
   15f10:	0002e502 	.word	0x0002e502

00015f14 <send_reliable>:
{
   15f14:	b570      	push	{r4, r5, r6, lr}
   15f16:	f012 fac3 	bl	284a0 <z_impl_k_uptime_ticks>
   15f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15f1e:	460a      	mov	r2, r1
   15f20:	fba0 0103 	umull	r0, r1, r0, r3
   15f24:	fb03 1102 	mla	r1, r3, r2, r1
	link.tx.start = k_uptime_get();
   15f28:	4c0e      	ldr	r4, [pc, #56]	; (15f64 <send_reliable+0x50>)
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   15f2a:	4e0f      	ldr	r6, [pc, #60]	; (15f68 <send_reliable+0x54>)
   15f2c:	0bc3      	lsrs	r3, r0, #15
   15f2e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   15f32:	0bca      	lsrs	r2, r1, #15
	link.tx.start = k_uptime_get();
   15f34:	e9c4 3206 	strd	r3, r2, [r4, #24]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   15f38:	2500      	movs	r5, #0
   15f3a:	3424      	adds	r4, #36	; 0x24
		struct net_buf *buf = link.tx.buf[i];
   15f3c:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   15f40:	b178      	cbz	r0, 15f62 <send_reliable+0x4e>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   15f42:	3501      	adds	r5, #1
   15f44:	2d03      	cmp	r5, #3
			bt_mesh_adv_send(buf, NULL, NULL);
   15f46:	f04f 0200 	mov.w	r2, #0
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   15f4a:	d005      	beq.n	15f58 <send_reliable+0x44>
   15f4c:	6823      	ldr	r3, [r4, #0]
   15f4e:	b11b      	cbz	r3, 15f58 <send_reliable+0x44>
			bt_mesh_adv_send(buf, NULL, NULL);
   15f50:	4611      	mov	r1, r2
   15f52:	f7f5 ffc5 	bl	bee0 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   15f56:	e7f1      	b.n	15f3c <send_reliable+0x28>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   15f58:	4631      	mov	r1, r6
   15f5a:	f7f5 ffc1 	bl	bee0 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   15f5e:	2d03      	cmp	r5, #3
   15f60:	d1ec      	bne.n	15f3c <send_reliable+0x28>
}
   15f62:	bd70      	pop	{r4, r5, r6, pc}
   15f64:	200068e8 	.word	0x200068e8
   15f68:	20006dcc 	.word	0x20006dcc

00015f6c <bearer_ctl_send>:
{
   15f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15f70:	461c      	mov	r4, r3
   15f72:	4605      	mov	r5, r0
   15f74:	4688      	mov	r8, r1
   15f76:	4691      	mov	r9, r2
	prov_clear_tx();
   15f78:	f7ff fd4e 	bl	15a18 <prov_clear_tx>
	buf = adv_buf_create(reliable ? RETRANSMITS_RELIABLE :
   15f7c:	2c00      	cmp	r4, #0
   15f7e:	bf0c      	ite	eq
   15f80:	2002      	moveq	r0, #2
   15f82:	2000      	movne	r0, #0
   15f84:	f7ff fd82 	bl	15a8c <adv_buf_create>
	if (!buf) {
   15f88:	4607      	mov	r7, r0
   15f8a:	b330      	cbz	r0, 15fda <bearer_ctl_send+0x6e>
	net_buf_add_be32(buf, link.id);
   15f8c:	f8df a054 	ldr.w	sl, [pc, #84]	; 15fe4 <bearer_ctl_send+0x78>
   15f90:	f100 0608 	add.w	r6, r0, #8
   15f94:	f8da 1000 	ldr.w	r1, [sl]
   15f98:	4630      	mov	r0, r6
	net_buf_add_u8(buf, GPC_CTL(op));
   15f9a:	00ad      	lsls	r5, r5, #2
	net_buf_add_be32(buf, link.id);
   15f9c:	f011 ffd7 	bl	27f4e <net_buf_simple_add_be32>
	net_buf_add_u8(buf, GPC_CTL(op));
   15fa0:	f045 0503 	orr.w	r5, r5, #3
	net_buf_add_u8(buf, 0x00);
   15fa4:	2100      	movs	r1, #0
   15fa6:	4630      	mov	r0, r6
   15fa8:	f011 ffac 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_CTL(op));
   15fac:	b2e9      	uxtb	r1, r5
   15fae:	4630      	mov	r0, r6
   15fb0:	f011 ffa8 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, data, data_len);
   15fb4:	464a      	mov	r2, r9
   15fb6:	4641      	mov	r1, r8
   15fb8:	4630      	mov	r0, r6
   15fba:	f011 ff97 	bl	27eec <net_buf_simple_add_mem>
	if (reliable) {
   15fbe:	b134      	cbz	r4, 15fce <bearer_ctl_send+0x62>
		link.tx.buf[0] = buf;
   15fc0:	f8ca 7024 	str.w	r7, [sl, #36]	; 0x24
		send_reliable();
   15fc4:	f7ff ffa6 	bl	15f14 <send_reliable>
	return 0;
   15fc8:	2000      	movs	r0, #0
}
   15fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   15fce:	4904      	ldr	r1, [pc, #16]	; (15fe0 <bearer_ctl_send+0x74>)
   15fd0:	4622      	mov	r2, r4
   15fd2:	4638      	mov	r0, r7
   15fd4:	f7f5 ff84 	bl	bee0 <bt_mesh_adv_send>
   15fd8:	e7f6      	b.n	15fc8 <bearer_ctl_send+0x5c>
		return -ENOBUFS;
   15fda:	f06f 0036 	mvn.w	r0, #54	; 0x36
   15fde:	e7f4      	b.n	15fca <bearer_ctl_send+0x5e>
   15fe0:	20006dcc 	.word	0x20006dcc
   15fe4:	200068e8 	.word	0x200068e8

00015fe8 <gen_prov_ctl>:
{
   15fe8:	b570      	push	{r4, r5, r6, lr}
	switch (BEARER_CTL(rx->gpc)) {
   15fea:	7944      	ldrb	r4, [r0, #5]
   15fec:	08a4      	lsrs	r4, r4, #2
   15fee:	2c01      	cmp	r4, #1
{
   15ff0:	4605      	mov	r5, r0
   15ff2:	460a      	mov	r2, r1
	switch (BEARER_CTL(rx->gpc)) {
   15ff4:	d053      	beq.n	1609e <gen_prov_ctl+0xb6>
   15ff6:	2c02      	cmp	r4, #2
   15ff8:	d06c      	beq.n	160d4 <gen_prov_ctl+0xec>
   15ffa:	2c00      	cmp	r4, #0
   15ffc:	d178      	bne.n	160f0 <gen_prov_ctl+0x108>
	if (buf->len < 16) {
   15ffe:	8889      	ldrh	r1, [r1, #4]
   16000:	290f      	cmp	r1, #15
   16002:	d80b      	bhi.n	1601c <gen_prov_ctl+0x34>
   16004:	4a40      	ldr	r2, [pc, #256]	; (16108 <gen_prov_ctl+0x120>)
   16006:	4b41      	ldr	r3, [pc, #260]	; (1610c <gen_prov_ctl+0x124>)
		BT_ERR("Too short bearer open message (len %u)", buf->len);
   16008:	4841      	ldr	r0, [pc, #260]	; (16110 <gen_prov_ctl+0x128>)
   1600a:	1ad2      	subs	r2, r2, r3
   1600c:	08d2      	lsrs	r2, r2, #3
   1600e:	0192      	lsls	r2, r2, #6
   16010:	f042 0201 	orr.w	r2, r2, #1
}
   16014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   16018:	f00d b9d5 	b.w	233c6 <log_1>
   1601c:	f7ff fd62 	bl	15ae4 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, LINK_ACTIVE)) {
   16020:	07c6      	lsls	r6, r0, #31
   16022:	d510      	bpl.n	16046 <gen_prov_ctl+0x5e>
		if (link.id == rx->link_id && link.tx.id == 0x7F) {
   16024:	4b3b      	ldr	r3, [pc, #236]	; (16114 <gen_prov_ctl+0x12c>)
   16026:	682a      	ldr	r2, [r5, #0]
   16028:	6819      	ldr	r1, [r3, #0]
   1602a:	4291      	cmp	r1, r2
   1602c:	d16a      	bne.n	16104 <gen_prov_ctl+0x11c>
   1602e:	f893 3020 	ldrb.w	r3, [r3, #32]
   16032:	2b7f      	cmp	r3, #127	; 0x7f
   16034:	d166      	bne.n	16104 <gen_prov_ctl+0x11c>
			bearer_ctl_send(LINK_ACK, NULL, 0, false);
   16036:	4623      	mov	r3, r4
   16038:	4622      	mov	r2, r4
   1603a:	4621      	mov	r1, r4
   1603c:	2001      	movs	r0, #1
}
   1603e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bearer_ctl_send(LINK_ACK, NULL, 0, false);
   16042:	f7ff bf93 	b.w	15f6c <bearer_ctl_send>
	if (memcmp(buf->data, bt_mesh_prov_get()->uuid, 16)) {
   16046:	6814      	ldr	r4, [r2, #0]
   16048:	f7ff fc4c 	bl	158e4 <bt_mesh_prov_get>
   1604c:	2210      	movs	r2, #16
   1604e:	6801      	ldr	r1, [r0, #0]
   16050:	4620      	mov	r0, r4
   16052:	f00f f80d 	bl	25070 <memcmp>
   16056:	4603      	mov	r3, r0
   16058:	2800      	cmp	r0, #0
   1605a:	d153      	bne.n	16104 <gen_prov_ctl+0x11c>
	link.id = rx->link_id;
   1605c:	4c2d      	ldr	r4, [pc, #180]	; (16114 <gen_prov_ctl+0x12c>)
   1605e:	6829      	ldr	r1, [r5, #0]
   16060:	4622      	mov	r2, r4
   16062:	f842 1b04 	str.w	r1, [r2], #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16066:	f3bf 8f5b 	dmb	ish
   1606a:	e852 1f00 	ldrex	r1, [r2]
   1606e:	f041 0101 	orr.w	r1, r1, #1
   16072:	e842 1000 	strex	r0, r1, [r2]
   16076:	2800      	cmp	r0, #0
   16078:	d1f7      	bne.n	1606a <gen_prov_ctl+0x82>
   1607a:	f3bf 8f5b 	dmb	ish
	net_buf_simple_reset(link.rx.buf);
   1607e:	6962      	ldr	r2, [r4, #20]
   16080:	6891      	ldr	r1, [r2, #8]
   16082:	6011      	str	r1, [r2, #0]
	buf->len  = 0U;
   16084:	8093      	strh	r3, [r2, #4]
	bearer_ctl_send(LINK_ACK, NULL, 0, false);
   16086:	4619      	mov	r1, r3
   16088:	461a      	mov	r2, r3
   1608a:	2001      	movs	r0, #1
   1608c:	f7ff ff6e 	bl	15f6c <bearer_ctl_send>
		link.cb->link_opened(&pb_adv, link.cb_data);
   16090:	68a3      	ldr	r3, [r4, #8]
   16092:	68e1      	ldr	r1, [r4, #12]
   16094:	681b      	ldr	r3, [r3, #0]
   16096:	4820      	ldr	r0, [pc, #128]	; (16118 <gen_prov_ctl+0x130>)
}
   16098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		link.cb->link_opened(&pb_adv, link.cb_data);
   1609c:	4718      	bx	r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1609e:	f7ff fd21 	bl	15ae4 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
   160a2:	07c0      	lsls	r0, r0, #31
   160a4:	d52e      	bpl.n	16104 <gen_prov_ctl+0x11c>
   160a6:	f7ff fd1d 	bl	15ae4 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, PROVISIONER)) {
   160aa:	0681      	lsls	r1, r0, #26
   160ac:	d52a      	bpl.n	16104 <gen_prov_ctl+0x11c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   160ae:	f3bf 8f5b 	dmb	ish
   160b2:	4c18      	ldr	r4, [pc, #96]	; (16114 <gen_prov_ctl+0x12c>)
   160b4:	1d23      	adds	r3, r4, #4
   160b6:	e853 2f00 	ldrex	r2, [r3]
   160ba:	f042 0102 	orr.w	r1, r2, #2
   160be:	e843 1000 	strex	r0, r1, [r3]
   160c2:	2800      	cmp	r0, #0
   160c4:	d1f7      	bne.n	160b6 <gen_prov_ctl+0xce>
   160c6:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_set_bit(link.flags, LINK_ACK_RECVD)) {
   160ca:	0792      	lsls	r2, r2, #30
   160cc:	d41a      	bmi.n	16104 <gen_prov_ctl+0x11c>
		prov_clear_tx();
   160ce:	f7ff fca3 	bl	15a18 <prov_clear_tx>
   160d2:	e7dd      	b.n	16090 <gen_prov_ctl+0xa8>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   160d4:	f7ff fd06 	bl	15ae4 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
   160d8:	07c3      	lsls	r3, r0, #31
   160da:	d513      	bpl.n	16104 <gen_prov_ctl+0x11c>
	if (buf->len != 1) {
   160dc:	888b      	ldrh	r3, [r1, #4]
   160de:	2b01      	cmp	r3, #1
   160e0:	d110      	bne.n	16104 <gen_prov_ctl+0x11c>
	close_link(net_buf_simple_pull_u8(buf));
   160e2:	4608      	mov	r0, r1
   160e4:	f011 fed2 	bl	27e8c <net_buf_simple_pull_u8>
}
   160e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	close_link(net_buf_simple_pull_u8(buf));
   160ec:	f7ff bc9e 	b.w	15a2c <close_link>
   160f0:	4a05      	ldr	r2, [pc, #20]	; (16108 <gen_prov_ctl+0x120>)
   160f2:	4b06      	ldr	r3, [pc, #24]	; (1610c <gen_prov_ctl+0x124>)
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   160f4:	4809      	ldr	r0, [pc, #36]	; (1611c <gen_prov_ctl+0x134>)
   160f6:	1ad2      	subs	r2, r2, r3
   160f8:	08d2      	lsrs	r2, r2, #3
   160fa:	0192      	lsls	r2, r2, #6
   160fc:	f042 0201 	orr.w	r2, r2, #1
   16100:	4621      	mov	r1, r4
   16102:	e787      	b.n	16014 <gen_prov_ctl+0x2c>
}
   16104:	bd70      	pop	{r4, r5, r6, pc}
   16106:	bf00      	nop
   16108:	00028998 	.word	0x00028998
   1610c:	00028868 	.word	0x00028868
   16110:	0002e52f 	.word	0x0002e52f
   16114:	200068e8 	.word	0x200068e8
   16118:	00029448 	.word	0x00029448
   1611c:	0002e556 	.word	0x0002e556

00016120 <prov_link_close>:

static void prov_link_close(enum prov_bearer_link_status status)
{
   16120:	b507      	push	{r0, r1, r2, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16122:	4b0d      	ldr	r3, [pc, #52]	; (16158 <prov_link_close+0x38>)
   16124:	f88d 0007 	strb.w	r0, [sp, #7]
   16128:	f3bf 8f5b 	dmb	ish
   1612c:	e853 2f00 	ldrex	r2, [r3]
   16130:	f042 0104 	orr.w	r1, r2, #4
   16134:	e843 1000 	strex	r0, r1, [r3]
   16138:	2800      	cmp	r0, #0
   1613a:	d1f7      	bne.n	1612c <prov_link_close+0xc>
   1613c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(link.flags, LINK_CLOSING)) {
   16140:	0753      	lsls	r3, r2, #29
   16142:	d406      	bmi.n	16152 <prov_link_close+0x32>
		return;
	}

	bearer_ctl_send(LINK_CLOSE, &status, 1, true);
   16144:	2301      	movs	r3, #1
   16146:	461a      	mov	r2, r3
   16148:	f10d 0107 	add.w	r1, sp, #7
   1614c:	2002      	movs	r0, #2
   1614e:	f7ff ff0d 	bl	15f6c <bearer_ctl_send>
}
   16152:	b003      	add	sp, #12
   16154:	f85d fb04 	ldr.w	pc, [sp], #4
   16158:	200068ec 	.word	0x200068ec

0001615c <prov_link_open>:
{
   1615c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16160:	4d1d      	ldr	r5, [pc, #116]	; (161d8 <prov_link_open+0x7c>)
   16162:	f3bf 8f5b 	dmb	ish
   16166:	4606      	mov	r6, r0
   16168:	4690      	mov	r8, r2
   1616a:	461f      	mov	r7, r3
   1616c:	1d29      	adds	r1, r5, #4
   1616e:	e851 4f00 	ldrex	r4, [r1]
   16172:	f044 0301 	orr.w	r3, r4, #1
   16176:	e841 3200 	strex	r2, r3, [r1]
   1617a:	2a00      	cmp	r2, #0
   1617c:	d1f7      	bne.n	1616e <prov_link_open+0x12>
   1617e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(link.flags, LINK_ACTIVE)) {
   16182:	f014 0401 	ands.w	r4, r4, #1
   16186:	d123      	bne.n	161d0 <prov_link_open+0x74>
   16188:	f3bf 8f5b 	dmb	ish
   1618c:	e851 3f00 	ldrex	r3, [r1]
   16190:	f043 0320 	orr.w	r3, r3, #32
   16194:	e841 3200 	strex	r2, r3, [r1]
   16198:	2a00      	cmp	r2, #0
   1619a:	d1f7      	bne.n	1618c <prov_link_open+0x30>
   1619c:	f3bf 8f5b 	dmb	ish
	bt_rand(&link.id, sizeof(link.id));
   161a0:	2104      	movs	r1, #4
   161a2:	4628      	mov	r0, r5
   161a4:	f011 f996 	bl	274d4 <bt_rand>
	link.tx.id = 0x7F;
   161a8:	237f      	movs	r3, #127	; 0x7f
   161aa:	f885 3020 	strb.w	r3, [r5, #32]
	link.rx.id = 0xFF;
   161ae:	23ff      	movs	r3, #255	; 0xff
   161b0:	742b      	strb	r3, [r5, #16]
	net_buf_simple_reset(link.rx.buf);
   161b2:	696b      	ldr	r3, [r5, #20]
	buf->data = buf->__buf;
   161b4:	689a      	ldr	r2, [r3, #8]
	link.cb_data = cb_data;
   161b6:	e9c5 8702 	strd	r8, r7, [r5, #8]
	bearer_ctl_send(LINK_OPEN, uuid, 16, true);
   161ba:	4631      	mov	r1, r6
   161bc:	601a      	str	r2, [r3, #0]
	buf->len  = 0U;
   161be:	809c      	strh	r4, [r3, #4]
   161c0:	2210      	movs	r2, #16
   161c2:	2301      	movs	r3, #1
   161c4:	4620      	mov	r0, r4
   161c6:	f7ff fed1 	bl	15f6c <bearer_ctl_send>
}
   161ca:	4620      	mov	r0, r4
   161cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EBUSY;
   161d0:	f06f 040f 	mvn.w	r4, #15
   161d4:	e7f9      	b.n	161ca <prov_link_open+0x6e>
   161d6:	bf00      	nop
   161d8:	200068e8 	.word	0x200068e8

000161dc <prov_send_adv>:
{
   161dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   161e0:	4d50      	ldr	r5, [pc, #320]	; (16324 <prov_send_adv+0x148>)
   161e2:	4604      	mov	r4, r0
   161e4:	460f      	mov	r7, r1
   161e6:	4616      	mov	r6, r2
	prov_clear_tx();
   161e8:	f7ff fc16 	bl	15a18 <prov_clear_tx>
   161ec:	f64e 2260 	movw	r2, #60000	; 0xea60
   161f0:	f105 0158 	add.w	r1, r5, #88	; 0x58
   161f4:	484c      	ldr	r0, [pc, #304]	; (16328 <prov_send_adv+0x14c>)
   161f6:	f00b fea7 	bl	21f48 <k_delayed_work_submit_to_queue>
	start = adv_buf_create(RETRANSMITS_RELIABLE);
   161fa:	2000      	movs	r0, #0
   161fc:	f7ff fc46 	bl	15a8c <adv_buf_create>
	if (!start) {
   16200:	4681      	mov	r9, r0
   16202:	2800      	cmp	r0, #0
   16204:	d066      	beq.n	162d4 <prov_send_adv+0xf8>
	return (((id + 1) & 0x7f) | (id & 0x80));
   16206:	f995 2020 	ldrsb.w	r2, [r5, #32]
	net_buf_add_be32(start, link.id);
   1620a:	6829      	ldr	r1, [r5, #0]
	return (((id + 1) & 0x7f) | (id & 0x80));
   1620c:	1c53      	adds	r3, r2, #1
	net_buf_add_be32(start, link.id);
   1620e:	f100 0808 	add.w	r8, r0, #8
	return (((id + 1) & 0x7f) | (id & 0x80));
   16212:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   16216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1621a:	4313      	orrs	r3, r2
	net_buf_add_be32(start, link.id);
   1621c:	4640      	mov	r0, r8
	link.tx.id = next_transaction_id(link.tx.id);
   1621e:	f885 3020 	strb.w	r3, [r5, #32]
	net_buf_add_be32(start, link.id);
   16222:	f011 fe94 	bl	27f4e <net_buf_simple_add_be32>
	net_buf_add_u8(start, link.tx.id);
   16226:	f895 1020 	ldrb.w	r1, [r5, #32]
   1622a:	4640      	mov	r0, r8
   1622c:	f011 fe6a 	bl	27f04 <net_buf_simple_add_u8>
	if (len <= START_PAYLOAD_MAX) {
   16230:	7922      	ldrb	r2, [r4, #4]
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   16232:	88a3      	ldrh	r3, [r4, #4]
	if (len <= START_PAYLOAD_MAX) {
   16234:	2a14      	cmp	r2, #20
	len -= START_PAYLOAD_MAX;
   16236:	bf81      	itttt	hi
   16238:	3b14      	subhi	r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
   1623a:	b2db      	uxtbhi	r3, r3
   1623c:	2117      	movhi	r1, #23
   1623e:	fbb3 f3f1 	udivhi	r3, r3, r1
   16242:	bf86      	itte	hi
   16244:	3301      	addhi	r3, #1
   16246:	b2db      	uxtbhi	r3, r3
		return 0;
   16248:	2300      	movls	r3, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   1624a:	009b      	lsls	r3, r3, #2
   1624c:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
   16250:	4640      	mov	r0, r8
   16252:	f011 fe57 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_add_be16(start, msg->len);
   16256:	4640      	mov	r0, r8
   16258:	88a1      	ldrh	r1, [r4, #4]
   1625a:	f011 fe63 	bl	27f24 <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
   1625e:	7921      	ldrb	r1, [r4, #4]
   16260:	6820      	ldr	r0, [r4, #0]
   16262:	f7f9 f89b 	bl	f39c <bt_mesh_fcs_calc>
   16266:	4601      	mov	r1, r0
   16268:	4640      	mov	r0, r8
   1626a:	f011 fe4b 	bl	27f04 <net_buf_simple_add_u8>
	link.tx.cb_data = cb_data;
   1626e:	e9c5 760c 	strd	r7, r6, [r5, #48]	; 0x30
	seg_len = MIN(msg->len, START_PAYLOAD_MAX);
   16272:	88a6      	ldrh	r6, [r4, #4]
	net_buf_add_mem(start, msg->data, seg_len);
   16274:	6821      	ldr	r1, [r4, #0]
	link.tx.buf[0] = start;
   16276:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
	net_buf_add_mem(start, msg->data, seg_len);
   1627a:	2e14      	cmp	r6, #20
   1627c:	bf28      	it	cs
   1627e:	2614      	movcs	r6, #20
   16280:	4632      	mov	r2, r6
   16282:	4640      	mov	r0, r8
   16284:	f011 fe32 	bl	27eec <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
   16288:	4631      	mov	r1, r6
   1628a:	4620      	mov	r0, r4
   1628c:	f008 f984 	bl	1e598 <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   16290:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 16338 <prov_send_adv+0x15c>
   16294:	2700      	movs	r7, #0
   16296:	88a6      	ldrh	r6, [r4, #4]
   16298:	b91e      	cbnz	r6, 162a2 <prov_send_adv+0xc6>
	send_reliable();
   1629a:	f7ff fe3b 	bl	15f14 <send_reliable>
	return 0;
   1629e:	4630      	mov	r0, r6
   162a0:	e00f      	b.n	162c2 <prov_send_adv+0xe6>
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
   162a2:	2f08      	cmp	r7, #8
   162a4:	d10f      	bne.n	162c6 <prov_send_adv+0xea>
   162a6:	4b21      	ldr	r3, [pc, #132]	; (1632c <prov_send_adv+0x150>)
   162a8:	4921      	ldr	r1, [pc, #132]	; (16330 <prov_send_adv+0x154>)
			BT_ERR("Too big message");
   162aa:	4822      	ldr	r0, [pc, #136]	; (16334 <prov_send_adv+0x158>)
   162ac:	1ac9      	subs	r1, r1, r3
   162ae:	08c9      	lsrs	r1, r1, #3
   162b0:	0189      	lsls	r1, r1, #6
   162b2:	f041 0101 	orr.w	r1, r1, #1
   162b6:	f00d f879 	bl	233ac <log_0>
			free_segments();
   162ba:	f7ff fb97 	bl	159ec <free_segments>
			return -E2BIG;
   162be:	f06f 0006 	mvn.w	r0, #6
}
   162c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		buf = adv_buf_create(RETRANSMITS_RELIABLE);
   162c6:	2000      	movs	r0, #0
   162c8:	f7ff fbe0 	bl	15a8c <adv_buf_create>
		if (!buf) {
   162cc:	3704      	adds	r7, #4
   162ce:	b920      	cbnz	r0, 162da <prov_send_adv+0xfe>
			free_segments();
   162d0:	f7ff fb8c 	bl	159ec <free_segments>
		return -ENOBUFS;
   162d4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   162d8:	e7f3      	b.n	162c2 <prov_send_adv+0xe6>
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   162da:	f8b4 9004 	ldrh.w	r9, [r4, #4]
		link.tx.buf[seg_id] = buf;
   162de:	f848 0b04 	str.w	r0, [r8], #4
		net_buf_add_be32(buf, link.id);
   162e2:	f100 0608 	add.w	r6, r0, #8
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   162e6:	f1b9 0f17 	cmp.w	r9, #23
		net_buf_add_be32(buf, link.id);
   162ea:	6829      	ldr	r1, [r5, #0]
   162ec:	4630      	mov	r0, r6
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   162ee:	bf28      	it	cs
   162f0:	f04f 0917 	movcs.w	r9, #23
		net_buf_add_be32(buf, link.id);
   162f4:	f011 fe2b 	bl	27f4e <net_buf_simple_add_be32>
		net_buf_add_u8(buf, link.tx.id);
   162f8:	f895 1020 	ldrb.w	r1, [r5, #32]
   162fc:	4630      	mov	r0, r6
   162fe:	f011 fe01 	bl	27f04 <net_buf_simple_add_u8>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
   16302:	f047 0102 	orr.w	r1, r7, #2
   16306:	b2c9      	uxtb	r1, r1
   16308:	4630      	mov	r0, r6
   1630a:	f011 fdfb 	bl	27f04 <net_buf_simple_add_u8>
		net_buf_add_mem(buf, msg->data, seg_len);
   1630e:	6821      	ldr	r1, [r4, #0]
   16310:	464a      	mov	r2, r9
   16312:	4630      	mov	r0, r6
   16314:	f011 fdea 	bl	27eec <net_buf_simple_add_mem>
		net_buf_simple_pull(msg, seg_len);
   16318:	4649      	mov	r1, r9
   1631a:	4620      	mov	r0, r4
   1631c:	f008 f93c 	bl	1e598 <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   16320:	e7b9      	b.n	16296 <prov_send_adv+0xba>
   16322:	bf00      	nop
   16324:	200068e8 	.word	0x200068e8
   16328:	20001c08 	.word	0x20001c08
   1632c:	00028868 	.word	0x00028868
   16330:	00028998 	.word	0x00028998
   16334:	0002c810 	.word	0x0002c810
   16338:	20006910 	.word	0x20006910

0001633c <gen_prov_cont>:
{
   1633c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   16340:	4f35      	ldr	r7, [pc, #212]	; (16418 <gen_prov_cont+0xdc>)
{
   16342:	4604      	mov	r4, r0
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   16344:	7c78      	ldrb	r0, [r7, #17]
   16346:	7c3a      	ldrb	r2, [r7, #16]
{
   16348:	460e      	mov	r6, r1
   1634a:	463d      	mov	r5, r7
   1634c:	7921      	ldrb	r1, [r4, #4]
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   1634e:	b950      	cbnz	r0, 16366 <gen_prov_cont+0x2a>
   16350:	428a      	cmp	r2, r1
   16352:	d10a      	bne.n	1636a <gen_prov_cont+0x2e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16354:	f7ff fbc6 	bl	15ae4 <atomic_get.constprop.0>
		if (!ack_pending()) {
   16358:	06c2      	lsls	r2, r0, #27
   1635a:	d45a      	bmi.n	16412 <gen_prov_cont+0xd6>
			gen_prov_ack_send(rx->xact_id);
   1635c:	7920      	ldrb	r0, [r4, #4]
}
   1635e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			gen_prov_ack_send(rx->xact_id);
   16362:	f7ff bc95 	b.w	15c90 <gen_prov_ack_send>
	if (rx->xact_id != link.rx.id) {
   16366:	428a      	cmp	r2, r1
   16368:	d00b      	beq.n	16382 <gen_prov_cont+0x46>
   1636a:	482c      	ldr	r0, [pc, #176]	; (1641c <gen_prov_cont+0xe0>)
   1636c:	4b2c      	ldr	r3, [pc, #176]	; (16420 <gen_prov_cont+0xe4>)
   1636e:	1a1b      	subs	r3, r3, r0
   16370:	08db      	lsrs	r3, r3, #3
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
   16372:	019b      	lsls	r3, r3, #6
}
   16374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
   16378:	482a      	ldr	r0, [pc, #168]	; (16424 <gen_prov_cont+0xe8>)
   1637a:	f043 0302 	orr.w	r3, r3, #2
   1637e:	f00d b836 	b.w	233ee <log_2>
	u8_t seg = CONT_SEG_INDEX(rx->gpc);
   16382:	7964      	ldrb	r4, [r4, #5]
	if (seg > link.rx.last_seg) {
   16384:	7cbb      	ldrb	r3, [r7, #18]
	u8_t seg = CONT_SEG_INDEX(rx->gpc);
   16386:	08a4      	lsrs	r4, r4, #2
	if (seg > link.rx.last_seg) {
   16388:	42a3      	cmp	r3, r4
   1638a:	d20f      	bcs.n	163ac <gen_prov_cont+0x70>
   1638c:	4a24      	ldr	r2, [pc, #144]	; (16420 <gen_prov_cont+0xe4>)
   1638e:	4b23      	ldr	r3, [pc, #140]	; (1641c <gen_prov_cont+0xe0>)
		BT_ERR("Invalid segment index %u", seg);
   16390:	4825      	ldr	r0, [pc, #148]	; (16428 <gen_prov_cont+0xec>)
   16392:	1ad2      	subs	r2, r2, r3
   16394:	08d2      	lsrs	r2, r2, #3
   16396:	0192      	lsls	r2, r2, #6
   16398:	f042 0201 	orr.w	r2, r2, #1
   1639c:	4621      	mov	r1, r4
   1639e:	f00d f812 	bl	233c6 <log_1>
}
   163a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			prov_failed(PROV_ERR_NVAL_FMT);
   163a6:	2002      	movs	r0, #2
   163a8:	f7ff bc58 	b.w	15c5c <prov_failed>
	} else if (seg == link.rx.last_seg) {
   163ac:	d118      	bne.n	163e0 <gen_prov_cont+0xa4>
		expect_len = (link.rx.buf->len - 20U -
   163ae:	6979      	ldr	r1, [r7, #20]
   163b0:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
   163b4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   163b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   163bc:	790a      	ldrb	r2, [r1, #4]
   163be:	3303      	adds	r3, #3
   163c0:	4413      	add	r3, r2
		if (expect_len != buf->len) {
   163c2:	88b2      	ldrh	r2, [r6, #4]
		expect_len = (link.rx.buf->len - 20U -
   163c4:	b2d9      	uxtb	r1, r3
		if (expect_len != buf->len) {
   163c6:	4291      	cmp	r1, r2
   163c8:	d00a      	beq.n	163e0 <gen_prov_cont+0xa4>
   163ca:	4814      	ldr	r0, [pc, #80]	; (1641c <gen_prov_cont+0xe0>)
   163cc:	4b14      	ldr	r3, [pc, #80]	; (16420 <gen_prov_cont+0xe4>)
   163ce:	1a1b      	subs	r3, r3, r0
   163d0:	08db      	lsrs	r3, r3, #3
			BT_ERR("Incorrect last seg len: %u != %u", expect_len,
   163d2:	019b      	lsls	r3, r3, #6
   163d4:	4815      	ldr	r0, [pc, #84]	; (1642c <gen_prov_cont+0xf0>)
   163d6:	f043 0301 	orr.w	r3, r3, #1
   163da:	f00d f808 	bl	233ee <log_2>
   163de:	e7e0      	b.n	163a2 <gen_prov_cont+0x66>
	if (!(link.rx.seg & BIT(seg))) {
   163e0:	40e0      	lsrs	r0, r4
   163e2:	07c3      	lsls	r3, r0, #31
   163e4:	d515      	bpl.n	16412 <gen_prov_cont+0xd6>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
   163e6:	696a      	ldr	r2, [r5, #20]
   163e8:	6831      	ldr	r1, [r6, #0]
   163ea:	1e60      	subs	r0, r4, #1
   163ec:	2317      	movs	r3, #23
   163ee:	4343      	muls	r3, r0
   163f0:	6810      	ldr	r0, [r2, #0]
   163f2:	88b2      	ldrh	r2, [r6, #4]
   163f4:	3314      	adds	r3, #20
   163f6:	4418      	add	r0, r3
   163f8:	f00e fe4a 	bl	25090 <memcpy>
	XACT_SEG_RECV(seg);
   163fc:	2301      	movs	r3, #1
   163fe:	40a3      	lsls	r3, r4
   16400:	7c6c      	ldrb	r4, [r5, #17]
   16402:	ea24 0403 	bic.w	r4, r4, r3
   16406:	746c      	strb	r4, [r5, #17]
	if (!link.rx.seg) {
   16408:	b91c      	cbnz	r4, 16412 <gen_prov_cont+0xd6>
}
   1640a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
   1640e:	f7ff bc91 	b.w	15d34 <prov_msg_recv>
}
   16412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16416:	bf00      	nop
   16418:	200068e8 	.word	0x200068e8
   1641c:	00028868 	.word	0x00028868
   16420:	00028998 	.word	0x00028998
   16424:	0002e574 	.word	0x0002e574
   16428:	0002e5a0 	.word	0x0002e5a0
   1642c:	0002e5b9 	.word	0x0002e5b9

00016430 <bt_mesh_pb_adv_recv>:
{
   16430:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!link.cb) {
   16432:	4d29      	ldr	r5, [pc, #164]	; (164d8 <bt_mesh_pb_adv_recv+0xa8>)
   16434:	68ab      	ldr	r3, [r5, #8]
{
   16436:	4604      	mov	r4, r0
	if (!link.cb) {
   16438:	b163      	cbz	r3, 16454 <bt_mesh_pb_adv_recv+0x24>
	if (buf->len < 6) {
   1643a:	8881      	ldrh	r1, [r0, #4]
   1643c:	2905      	cmp	r1, #5
   1643e:	d80b      	bhi.n	16458 <bt_mesh_pb_adv_recv+0x28>
   16440:	4a26      	ldr	r2, [pc, #152]	; (164dc <bt_mesh_pb_adv_recv+0xac>)
   16442:	4b27      	ldr	r3, [pc, #156]	; (164e0 <bt_mesh_pb_adv_recv+0xb0>)
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   16444:	4827      	ldr	r0, [pc, #156]	; (164e4 <bt_mesh_pb_adv_recv+0xb4>)
   16446:	1ad2      	subs	r2, r2, r3
   16448:	08d2      	lsrs	r2, r2, #3
   1644a:	0192      	lsls	r2, r2, #6
   1644c:	f042 0202 	orr.w	r2, r2, #2
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   16450:	f00c ffb9 	bl	233c6 <log_1>
}
   16454:	b003      	add	sp, #12
   16456:	bd30      	pop	{r4, r5, pc}
	rx.link_id = net_buf_simple_pull_be32(buf);
   16458:	f011 fd33 	bl	27ec2 <net_buf_simple_pull_be32>
   1645c:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
   1645e:	4620      	mov	r0, r4
   16460:	f011 fd14 	bl	27e8c <net_buf_simple_pull_u8>
   16464:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
   16468:	4620      	mov	r0, r4
   1646a:	f011 fd0f 	bl	27e8c <net_buf_simple_pull_u8>
   1646e:	f88d 0005 	strb.w	r0, [sp, #5]
   16472:	f7ff fb37 	bl	15ae4 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, LINK_ACTIVE) && link.id != rx.link_id) {
   16476:	07c3      	lsls	r3, r0, #31
   16478:	d503      	bpl.n	16482 <bt_mesh_pb_adv_recv+0x52>
   1647a:	682a      	ldr	r2, [r5, #0]
   1647c:	9b00      	ldr	r3, [sp, #0]
   1647e:	429a      	cmp	r2, r3
   16480:	d1e8      	bne.n	16454 <bt_mesh_pb_adv_recv+0x24>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
   16482:	f89d 1005 	ldrb.w	r1, [sp, #5]
   16486:	4a18      	ldr	r2, [pc, #96]	; (164e8 <bt_mesh_pb_adv_recv+0xb8>)
   16488:	88a0      	ldrh	r0, [r4, #4]
   1648a:	f001 0103 	and.w	r1, r1, #3
   1648e:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
   16492:	795b      	ldrb	r3, [r3, #5]
   16494:	4298      	cmp	r0, r3
   16496:	d208      	bcs.n	164aa <bt_mesh_pb_adv_recv+0x7a>
   16498:	4a10      	ldr	r2, [pc, #64]	; (164dc <bt_mesh_pb_adv_recv+0xac>)
   1649a:	4b11      	ldr	r3, [pc, #68]	; (164e0 <bt_mesh_pb_adv_recv+0xb0>)
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   1649c:	4813      	ldr	r0, [pc, #76]	; (164ec <bt_mesh_pb_adv_recv+0xbc>)
   1649e:	1ad2      	subs	r2, r2, r3
   164a0:	08d2      	lsrs	r2, r2, #3
   164a2:	0192      	lsls	r2, r2, #6
   164a4:	f042 0201 	orr.w	r2, r2, #1
   164a8:	e7d2      	b.n	16450 <bt_mesh_pb_adv_recv+0x20>
   164aa:	f7ff fb1b 	bl	15ae4 <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, LINK_ACTIVE) &&
   164ae:	f010 0f01 	tst.w	r0, #1
   164b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   164b6:	d106      	bne.n	164c6 <bt_mesh_pb_adv_recv+0x96>
	    gen_prov[GPCF(rx->gpc)].require_link) {
   164b8:	f003 0103 	and.w	r1, r3, #3
   164bc:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
	if (!atomic_test_bit(link.flags, LINK_ACTIVE) &&
   164c0:	7909      	ldrb	r1, [r1, #4]
   164c2:	2900      	cmp	r1, #0
   164c4:	d1c6      	bne.n	16454 <bt_mesh_pb_adv_recv+0x24>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
   164c6:	f003 0303 	and.w	r3, r3, #3
   164ca:	4621      	mov	r1, r4
   164cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   164d0:	4668      	mov	r0, sp
   164d2:	4798      	blx	r3
   164d4:	e7be      	b.n	16454 <bt_mesh_pb_adv_recv+0x24>
   164d6:	bf00      	nop
   164d8:	200068e8 	.word	0x200068e8
   164dc:	00028998 	.word	0x00028998
   164e0:	00028868 	.word	0x00028868
   164e4:	0002e5da 	.word	0x0002e5da
   164e8:	00029428 	.word	0x00029428
   164ec:	0002e601 	.word	0x0002e601

000164f0 <pb_adv_init>:

void pb_adv_init(void)
{
   164f0:	b510      	push	{r4, lr}
	k_delayed_work_init(&link.prot_timer, protocol_timeout);
   164f2:	4c06      	ldr	r4, [pc, #24]	; (1650c <pb_adv_init+0x1c>)
   164f4:	4906      	ldr	r1, [pc, #24]	; (16510 <pb_adv_init+0x20>)
   164f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   164fa:	f011 ffc5 	bl	28488 <k_delayed_work_init>
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
   164fe:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16502:	4904      	ldr	r1, [pc, #16]	; (16514 <pb_adv_init+0x24>)
}
   16504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
   16508:	f011 bfbe 	b.w	28488 <k_delayed_work_init>
   1650c:	200068e8 	.word	0x200068e8
   16510:	00015a7d 	.word	0x00015a7d
   16514:	00015b2d 	.word	0x00015b2d

00016518 <reset_state>:
};

static struct prov_link link;

static void reset_state(void)
{
   16518:	b510      	push	{r4, lr}
	if (link.conn) {
   1651a:	4c08      	ldr	r4, [pc, #32]	; (1653c <reset_state+0x24>)
   1651c:	6820      	ldr	r0, [r4, #0]
   1651e:	b108      	cbz	r0, 16524 <reset_state+0xc>
		bt_conn_unref(link.conn);
   16520:	f00f fa3d 	bl	2599e <bt_conn_unref>
	}

	k_delayed_work_cancel(&link.prot_timer);
   16524:	4806      	ldr	r0, [pc, #24]	; (16540 <reset_state+0x28>)
   16526:	f00b fd9f 	bl	22068 <k_delayed_work_cancel>
	memset(&link, 0, offsetof(struct prov_link, prot_timer));
   1652a:	2210      	movs	r2, #16
   1652c:	2100      	movs	r1, #0
   1652e:	4803      	ldr	r0, [pc, #12]	; (1653c <reset_state+0x24>)
   16530:	f00e fdd9 	bl	250e6 <memset>

	link.rx_buf = bt_mesh_proxy_get_buf();
   16534:	f000 fc98 	bl	16e68 <bt_mesh_proxy_get_buf>
   16538:	60e0      	str	r0, [r4, #12]
}
   1653a:	bd10      	pop	{r4, pc}
   1653c:	20000af0 	.word	0x20000af0
   16540:	20000b00 	.word	0x20000b00

00016544 <link_accept>:

	return 0;
}

static int link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
   16544:	b538      	push	{r3, r4, r5, lr}
   16546:	460c      	mov	r4, r1
   16548:	4605      	mov	r5, r0
	bt_mesh_proxy_prov_enable();
   1654a:	f000 fc97 	bl	16e7c <bt_mesh_proxy_prov_enable>
	bt_mesh_adv_update();
   1654e:	f7f5 fc77 	bl	be40 <bt_mesh_adv_update>

	link.cb = cb;
   16552:	4b02      	ldr	r3, [pc, #8]	; (1655c <link_accept+0x18>)
	link.cb_data = cb_data;

	return 0;
}
   16554:	2000      	movs	r0, #0
	link.cb_data = cb_data;
   16556:	e9c3 5401 	strd	r5, r4, [r3, #4]
}
   1655a:	bd38      	pop	{r3, r4, r5, pc}
   1655c:	20000af0 	.word	0x20000af0

00016560 <buf_send>:

static int buf_send(struct net_buf_simple *buf, prov_bearer_send_complete_t cb,
		    void *cb_data)
{
   16560:	b538      	push	{r3, r4, r5, lr}
	if (!link.conn) {
   16562:	4c0a      	ldr	r4, [pc, #40]	; (1658c <buf_send+0x2c>)
   16564:	6823      	ldr	r3, [r4, #0]
{
   16566:	4605      	mov	r5, r0
	if (!link.conn) {
   16568:	b16b      	cbz	r3, 16586 <buf_send+0x26>
   1656a:	f104 0110 	add.w	r1, r4, #16
   1656e:	f64e 2260 	movw	r2, #60000	; 0xea60
   16572:	4807      	ldr	r0, [pc, #28]	; (16590 <buf_send+0x30>)
   16574:	f00b fce8 	bl	21f48 <k_delayed_work_submit_to_queue>
		return -ENOTCONN;
	}

	k_delayed_work_submit(&link.prot_timer, PROTOCOL_TIMEOUT);

	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, buf);
   16578:	6820      	ldr	r0, [r4, #0]
   1657a:	462a      	mov	r2, r5
   1657c:	2103      	movs	r1, #3
}
   1657e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, buf);
   16582:	f000 bd0f 	b.w	16fa4 <bt_mesh_proxy_send>
}
   16586:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1658a:	bd38      	pop	{r3, r4, r5, pc}
   1658c:	20000af0 	.word	0x20000af0
   16590:	20001c08 	.word	0x20001c08

00016594 <bt_mesh_pb_gatt_recv>:
{
   16594:	b538      	push	{r3, r4, r5, lr}
	if (link.conn != conn || !link.cb) {
   16596:	4c19      	ldr	r4, [pc, #100]	; (165fc <bt_mesh_pb_gatt_recv+0x68>)
   16598:	6823      	ldr	r3, [r4, #0]
   1659a:	4283      	cmp	r3, r0
{
   1659c:	460d      	mov	r5, r1
	if (link.conn != conn || !link.cb) {
   1659e:	d101      	bne.n	165a4 <bt_mesh_pb_gatt_recv+0x10>
   165a0:	6863      	ldr	r3, [r4, #4]
   165a2:	b963      	cbnz	r3, 165be <bt_mesh_pb_gatt_recv+0x2a>
   165a4:	4b16      	ldr	r3, [pc, #88]	; (16600 <bt_mesh_pb_gatt_recv+0x6c>)
   165a6:	4917      	ldr	r1, [pc, #92]	; (16604 <bt_mesh_pb_gatt_recv+0x70>)
		BT_WARN("Data for unexpected connection");
   165a8:	4817      	ldr	r0, [pc, #92]	; (16608 <bt_mesh_pb_gatt_recv+0x74>)
   165aa:	1ac9      	subs	r1, r1, r3
   165ac:	08c9      	lsrs	r1, r1, #3
   165ae:	0189      	lsls	r1, r1, #6
   165b0:	f041 0102 	orr.w	r1, r1, #2
   165b4:	f00c fefa 	bl	233ac <log_0>
		return -ENOTCONN;
   165b8:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   165bc:	bd38      	pop	{r3, r4, r5, pc}
	if (buf->len < 1) {
   165be:	8889      	ldrh	r1, [r1, #4]
   165c0:	b961      	cbnz	r1, 165dc <bt_mesh_pb_gatt_recv+0x48>
   165c2:	4b0f      	ldr	r3, [pc, #60]	; (16600 <bt_mesh_pb_gatt_recv+0x6c>)
   165c4:	4a0f      	ldr	r2, [pc, #60]	; (16604 <bt_mesh_pb_gatt_recv+0x70>)
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   165c6:	4811      	ldr	r0, [pc, #68]	; (1660c <bt_mesh_pb_gatt_recv+0x78>)
   165c8:	1ad2      	subs	r2, r2, r3
   165ca:	08d2      	lsrs	r2, r2, #3
   165cc:	0192      	lsls	r2, r2, #6
   165ce:	f042 0202 	orr.w	r2, r2, #2
   165d2:	f00c fef8 	bl	233c6 <log_1>
		return -EINVAL;
   165d6:	f06f 0015 	mvn.w	r0, #21
   165da:	e7ef      	b.n	165bc <bt_mesh_pb_gatt_recv+0x28>
   165dc:	f64e 2260 	movw	r2, #60000	; 0xea60
   165e0:	f104 0110 	add.w	r1, r4, #16
   165e4:	480a      	ldr	r0, [pc, #40]	; (16610 <bt_mesh_pb_gatt_recv+0x7c>)
   165e6:	f00b fcaf 	bl	21f48 <k_delayed_work_submit_to_queue>
	link.cb->recv(&pb_gatt, link.cb_data, buf);
   165ea:	6863      	ldr	r3, [r4, #4]
   165ec:	4809      	ldr	r0, [pc, #36]	; (16614 <bt_mesh_pb_gatt_recv+0x80>)
   165ee:	68db      	ldr	r3, [r3, #12]
   165f0:	68a1      	ldr	r1, [r4, #8]
   165f2:	462a      	mov	r2, r5
   165f4:	4798      	blx	r3
	return 0;
   165f6:	2000      	movs	r0, #0
   165f8:	e7e0      	b.n	165bc <bt_mesh_pb_gatt_recv+0x28>
   165fa:	bf00      	nop
   165fc:	20000af0 	.word	0x20000af0
   16600:	00028868 	.word	0x00028868
   16604:	000289a0 	.word	0x000289a0
   16608:	0002e62e 	.word	0x0002e62e
   1660c:	0002e5da 	.word	0x0002e5da
   16610:	20001c08 	.word	0x20001c08
   16614:	00029460 	.word	0x00029460

00016618 <bt_mesh_pb_gatt_open>:
{
   16618:	b538      	push	{r3, r4, r5, lr}
	if (link.conn) {
   1661a:	4d0b      	ldr	r5, [pc, #44]	; (16648 <bt_mesh_pb_gatt_open+0x30>)
   1661c:	682c      	ldr	r4, [r5, #0]
   1661e:	b984      	cbnz	r4, 16642 <bt_mesh_pb_gatt_open+0x2a>
	link.conn = bt_conn_ref(conn);
   16620:	f00f f9b6 	bl	25990 <bt_conn_ref>
   16624:	4629      	mov	r1, r5
   16626:	f64e 2260 	movw	r2, #60000	; 0xea60
   1662a:	f841 0b10 	str.w	r0, [r1], #16
   1662e:	4807      	ldr	r0, [pc, #28]	; (1664c <bt_mesh_pb_gatt_open+0x34>)
   16630:	f00b fc8a 	bl	21f48 <k_delayed_work_submit_to_queue>
	link.cb->link_opened(&pb_gatt, link.cb_data);
   16634:	686b      	ldr	r3, [r5, #4]
   16636:	4806      	ldr	r0, [pc, #24]	; (16650 <bt_mesh_pb_gatt_open+0x38>)
   16638:	681b      	ldr	r3, [r3, #0]
   1663a:	68a9      	ldr	r1, [r5, #8]
   1663c:	4798      	blx	r3
	return 0;
   1663e:	4620      	mov	r0, r4
}
   16640:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
   16642:	f06f 000f 	mvn.w	r0, #15
   16646:	e7fb      	b.n	16640 <bt_mesh_pb_gatt_open+0x28>
   16648:	20000af0 	.word	0x20000af0
   1664c:	20001c08 	.word	0x20001c08
   16650:	00029460 	.word	0x00029460

00016654 <bt_mesh_pb_gatt_close>:
	if (link.conn != conn) {
   16654:	4b0d      	ldr	r3, [pc, #52]	; (1668c <bt_mesh_pb_gatt_close+0x38>)
   16656:	681a      	ldr	r2, [r3, #0]
   16658:	4282      	cmp	r2, r0
{
   1665a:	b510      	push	{r4, lr}
	if (link.conn != conn) {
   1665c:	d00c      	beq.n	16678 <bt_mesh_pb_gatt_close+0x24>
   1665e:	4b0c      	ldr	r3, [pc, #48]	; (16690 <bt_mesh_pb_gatt_close+0x3c>)
   16660:	490c      	ldr	r1, [pc, #48]	; (16694 <bt_mesh_pb_gatt_close+0x40>)
		BT_ERR("Not connected");
   16662:	480d      	ldr	r0, [pc, #52]	; (16698 <bt_mesh_pb_gatt_close+0x44>)
   16664:	1ac9      	subs	r1, r1, r3
   16666:	08c9      	lsrs	r1, r1, #3
   16668:	0189      	lsls	r1, r1, #6
   1666a:	f041 0101 	orr.w	r1, r1, #1
   1666e:	f00c fe9d 	bl	233ac <log_0>
		return -ENOTCONN;
   16672:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   16676:	bd10      	pop	{r4, pc}
	link.cb->link_closed(&pb_gatt, link.cb_data,
   16678:	685a      	ldr	r2, [r3, #4]
   1667a:	4808      	ldr	r0, [pc, #32]	; (1669c <bt_mesh_pb_gatt_close+0x48>)
   1667c:	6854      	ldr	r4, [r2, #4]
   1667e:	6899      	ldr	r1, [r3, #8]
   16680:	2200      	movs	r2, #0
   16682:	47a0      	blx	r4
	reset_state();
   16684:	f7ff ff48 	bl	16518 <reset_state>
	return 0;
   16688:	2000      	movs	r0, #0
   1668a:	e7f4      	b.n	16676 <bt_mesh_pb_gatt_close+0x22>
   1668c:	20000af0 	.word	0x20000af0
   16690:	00028868 	.word	0x00028868
   16694:	000289a0 	.word	0x000289a0
   16698:	0002b7a2 	.word	0x0002b7a2
   1669c:	00029460 	.word	0x00029460

000166a0 <protocol_timeout>:
{
   166a0:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
   166a2:	4c07      	ldr	r4, [pc, #28]	; (166c0 <protocol_timeout+0x20>)
	if (link.conn) {
   166a4:	e9d4 0500 	ldrd	r0, r5, [r4]
   166a8:	b108      	cbz	r0, 166ae <protocol_timeout+0xe>
		bt_mesh_pb_gatt_close(link.conn);
   166aa:	f7ff ffd3 	bl	16654 <bt_mesh_pb_gatt_close>
	reset_state();
   166ae:	f7ff ff33 	bl	16518 <reset_state>
	cb->link_closed(&pb_gatt, link.cb_data,
   166b2:	686b      	ldr	r3, [r5, #4]
   166b4:	68a1      	ldr	r1, [r4, #8]
   166b6:	4803      	ldr	r0, [pc, #12]	; (166c4 <protocol_timeout+0x24>)
}
   166b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_gatt, link.cb_data,
   166bc:	2201      	movs	r2, #1
   166be:	4718      	bx	r3
   166c0:	20000af0 	.word	0x20000af0
   166c4:	00029460 	.word	0x00029460

000166c8 <pb_gatt_init>:
	/* No action */
}

void pb_gatt_init(void)
{
	k_delayed_work_init(&link.prot_timer, protocol_timeout);
   166c8:	4901      	ldr	r1, [pc, #4]	; (166d0 <pb_gatt_init+0x8>)
   166ca:	4802      	ldr	r0, [pc, #8]	; (166d4 <pb_gatt_init+0xc>)
   166cc:	f011 bedc 	b.w	28488 <k_delayed_work_init>
   166d0:	000166a1 	.word	0x000166a1
   166d4:	20000b00 	.word	0x20000b00

000166d8 <proxy_sar_timeout>:
   166d8:	4b0a      	ldr	r3, [pc, #40]	; (16704 <proxy_sar_timeout+0x2c>)
   166da:	490b      	ldr	r1, [pc, #44]	; (16708 <proxy_sar_timeout+0x30>)
   166dc:	1ac9      	subs	r1, r1, r3
   166de:	08c9      	lsrs	r1, r1, #3

	return NULL;
}

static void proxy_sar_timeout(struct k_work *work)
{
   166e0:	b510      	push	{r4, lr}
	struct bt_mesh_proxy_client *client;

	BT_WARN("Proxy SAR timeout");
   166e2:	0189      	lsls	r1, r1, #6
{
   166e4:	4604      	mov	r4, r0
	BT_WARN("Proxy SAR timeout");
   166e6:	f041 0102 	orr.w	r1, r1, #2
   166ea:	4808      	ldr	r0, [pc, #32]	; (1670c <proxy_sar_timeout+0x34>)
   166ec:	f00c fe5e 	bl	233ac <log_0>

	client = CONTAINER_OF(work, struct bt_mesh_proxy_client, sar_timer);
	if (client->conn) {
   166f0:	f854 0c18 	ldr.w	r0, [r4, #-24]
   166f4:	b120      	cbz	r0, 16700 <proxy_sar_timeout+0x28>
		bt_conn_disconnect(client->conn,
				   BT_HCI_ERR_REMOTE_USER_TERM_CONN);
	}
}
   166f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(client->conn,
   166fa:	2113      	movs	r1, #19
   166fc:	f00f b952 	b.w	259a4 <bt_conn_disconnect>
}
   16700:	bd10      	pop	{r4, pc}
   16702:	bf00      	nop
   16704:	00028868 	.word	0x00028868
   16708:	000289b0 	.word	0x000289b0
   1670c:	0002e65d 	.word	0x0002e65d

00016710 <proxy_disconnected>:
{
	int i;

	BT_DBG("conn %p reason 0x%02x", conn, reason);

	conn_count--;
   16710:	4a0c      	ldr	r2, [pc, #48]	; (16744 <proxy_disconnected+0x34>)
   16712:	6813      	ldr	r3, [r2, #0]
{
   16714:	b510      	push	{r4, lr}

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		if (client->conn == conn) {
   16716:	4c0c      	ldr	r4, [pc, #48]	; (16748 <proxy_disconnected+0x38>)
	conn_count--;
   16718:	3b01      	subs	r3, #1
   1671a:	6013      	str	r3, [r2, #0]
		if (client->conn == conn) {
   1671c:	6823      	ldr	r3, [r4, #0]
   1671e:	4283      	cmp	r3, r0
   16720:	d10c      	bne.n	1673c <proxy_disconnected+0x2c>
			if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   16722:	7aa3      	ldrb	r3, [r4, #10]
   16724:	2b03      	cmp	r3, #3
   16726:	d101      	bne.n	1672c <proxy_disconnected+0x1c>
			    client->filter_type == PROV) {
				bt_mesh_pb_gatt_close(conn);
   16728:	f7ff ff94 	bl	16654 <bt_mesh_pb_gatt_close>
			}

			k_delayed_work_cancel(&client->sar_timer);
   1672c:	4807      	ldr	r0, [pc, #28]	; (1674c <proxy_disconnected+0x3c>)
   1672e:	f00b fc9b 	bl	22068 <k_delayed_work_cancel>
			bt_conn_unref(client->conn);
   16732:	6820      	ldr	r0, [r4, #0]
   16734:	f00f f933 	bl	2599e <bt_conn_unref>
			client->conn = NULL;
   16738:	2300      	movs	r3, #0
   1673a:	6023      	str	r3, [r4, #0]
			break;
		}
	}

	bt_mesh_adv_update();
}
   1673c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_update();
   16740:	f7f5 bb7e 	b.w	be40 <bt_mesh_adv_update>
   16744:	20000b20 	.word	0x20000b20
   16748:	20006e00 	.word	0x20006e00
   1674c:	20006e18 	.word	0x20006e18

00016750 <prov_ccc_write.part.0>:
static void prov_ccc_changed(const struct bt_gatt_attr *attr, u16_t value)
{
	BT_DBG("value 0x%04x", value);
}

static ssize_t prov_ccc_write(struct bt_conn *conn,
   16750:	b508      	push	{r3, lr}
   16752:	4a07      	ldr	r2, [pc, #28]	; (16770 <prov_ccc_write.part.0+0x20>)
   16754:	4b07      	ldr	r3, [pc, #28]	; (16774 <prov_ccc_write.part.0+0x24>)
   16756:	1ad2      	subs	r2, r2, r3
   16758:	08d2      	lsrs	r2, r2, #3
	struct bt_mesh_proxy_client *client;

	BT_DBG("value 0x%04x", value);

	if (value != BT_GATT_CCC_NOTIFY) {
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
   1675a:	0192      	lsls	r2, r2, #6
static ssize_t prov_ccc_write(struct bt_conn *conn,
   1675c:	4601      	mov	r1, r0
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
   1675e:	f042 0202 	orr.w	r2, r2, #2
   16762:	4805      	ldr	r0, [pc, #20]	; (16778 <prov_ccc_write.part.0+0x28>)
   16764:	f00c fe2f 	bl	233c6 <log_1>
		client->filter_type = PROV;
		bt_mesh_pb_gatt_open(conn);
	}

	return sizeof(value);
}
   16768:	f06f 0012 	mvn.w	r0, #18
   1676c:	bd08      	pop	{r3, pc}
   1676e:	bf00      	nop
   16770:	000289b0 	.word	0x000289b0
   16774:	00028868 	.word	0x00028868
   16778:	0002e66f 	.word	0x0002e66f

0001677c <proxy_connected>:
	conn_count++;
   1677c:	4a14      	ldr	r2, [pc, #80]	; (167d0 <proxy_connected+0x54>)
   1677e:	6813      	ldr	r3, [r2, #0]
   16780:	3301      	adds	r3, #1
{
   16782:	b570      	push	{r4, r5, r6, lr}
	proxy_adv_enabled = false;
   16784:	2100      	movs	r1, #0
	conn_count++;
   16786:	6013      	str	r3, [r2, #0]
	proxy_adv_enabled = false;
   16788:	4a12      	ldr	r2, [pc, #72]	; (167d4 <proxy_connected+0x58>)
	if (conn_count < CONFIG_BT_MAX_CONN) {
   1678a:	428b      	cmp	r3, r1
{
   1678c:	4606      	mov	r6, r0
	proxy_adv_enabled = false;
   1678e:	7011      	strb	r1, [r2, #0]
	if (conn_count < CONFIG_BT_MAX_CONN) {
   16790:	dc01      	bgt.n	16796 <proxy_connected+0x1a>
		bt_mesh_adv_update();
   16792:	f7f5 fb55 	bl	be40 <bt_mesh_adv_update>
		if (!clients[i].conn) {
   16796:	4c10      	ldr	r4, [pc, #64]	; (167d8 <proxy_connected+0x5c>)
   16798:	6825      	ldr	r5, [r4, #0]
   1679a:	b15d      	cbz	r5, 167b4 <proxy_connected+0x38>
   1679c:	490f      	ldr	r1, [pc, #60]	; (167dc <proxy_connected+0x60>)
   1679e:	4b10      	ldr	r3, [pc, #64]	; (167e0 <proxy_connected+0x64>)
		BT_ERR("No free Proxy Client objects");
   167a0:	4810      	ldr	r0, [pc, #64]	; (167e4 <proxy_connected+0x68>)
   167a2:	1ac9      	subs	r1, r1, r3
   167a4:	08c9      	lsrs	r1, r1, #3
   167a6:	0189      	lsls	r1, r1, #6
}
   167a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("No free Proxy Client objects");
   167ac:	f041 0101 	orr.w	r1, r1, #1
   167b0:	f00c bdfc 	b.w	233ac <log_0>
	client->conn = bt_conn_ref(conn);
   167b4:	4630      	mov	r0, r6
   167b6:	f00f f8eb 	bl	25990 <bt_conn_ref>
	(void)memset(client->filter, 0, sizeof(client->filter));
   167ba:	2206      	movs	r2, #6
	client->conn = bt_conn_ref(conn);
   167bc:	6020      	str	r0, [r4, #0]
	(void)memset(client->filter, 0, sizeof(client->filter));
   167be:	4629      	mov	r1, r5
   167c0:	1d20      	adds	r0, r4, #4
	client->filter_type = NONE;
   167c2:	72a5      	strb	r5, [r4, #10]
	(void)memset(client->filter, 0, sizeof(client->filter));
   167c4:	f00e fc8f 	bl	250e6 <memset>
	buf->data = buf->__buf;
   167c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
	buf->len  = 0U;
   167ca:	87a5      	strh	r5, [r4, #60]	; 0x3c
	buf->data = buf->__buf;
   167cc:	63a3      	str	r3, [r4, #56]	; 0x38
}
   167ce:	bd70      	pop	{r4, r5, r6, pc}
   167d0:	20000b20 	.word	0x20000b20
   167d4:	2000230d 	.word	0x2000230d
   167d8:	20006e00 	.word	0x20006e00
   167dc:	000289b0 	.word	0x000289b0
   167e0:	00028868 	.word	0x00028868
   167e4:	0002e69b 	.word	0x0002e69b

000167e8 <proxy_send>:
}

#endif /* CONFIG_BT_MESH_GATT_PROXY */

static int proxy_send(struct bt_conn *conn, const void *data, u16_t len)
{
   167e8:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("%u bytes: %s", len, bt_hex(data, len));

#if defined(CONFIG_BT_MESH_GATT_PROXY)
	if (gatt_svc == MESH_GATT_PROXY) {
   167ea:	4b11      	ldr	r3, [pc, #68]	; (16830 <proxy_send+0x48>)
   167ec:	781b      	ldrb	r3, [r3, #0]
   167ee:	2b02      	cmp	r3, #2
{
   167f0:	b086      	sub	sp, #24
   167f2:	4604      	mov	r4, r0
   167f4:	460e      	mov	r6, r1
   167f6:	4615      	mov	r5, r2
	if (gatt_svc == MESH_GATT_PROXY) {
   167f8:	d10f      	bne.n	1681a <proxy_send+0x32>
				 const struct bt_gatt_attr *attr,
				 const void *data, u16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   167fa:	2218      	movs	r2, #24
   167fc:	2100      	movs	r1, #0
   167fe:	4668      	mov	r0, sp
   16800:	f00e fc71 	bl	250e6 <memset>

	params.attr = attr;
   16804:	4b0b      	ldr	r3, [pc, #44]	; (16834 <proxy_send+0x4c>)
	params.data = data;
	params.len = len;
   16806:	f8ad 500c 	strh.w	r5, [sp, #12]

	return bt_gatt_notify_cb(conn, &params);
   1680a:	4669      	mov	r1, sp
   1680c:	4620      	mov	r0, r4
	params.data = data;
   1680e:	e9cd 3601 	strd	r3, r6, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
   16812:	f7f4 fe7b 	bl	b50c <bt_gatt_notify_cb>
		return bt_gatt_notify(conn, &prov_attrs[3], data, len);
	}
#endif

	return 0;
}
   16816:	b006      	add	sp, #24
   16818:	bd70      	pop	{r4, r5, r6, pc}
	if (gatt_svc == MESH_GATT_PROV) {
   1681a:	2b01      	cmp	r3, #1
   1681c:	d106      	bne.n	1682c <proxy_send+0x44>
	memset(&params, 0, sizeof(params));
   1681e:	2218      	movs	r2, #24
   16820:	2100      	movs	r1, #0
   16822:	4668      	mov	r0, sp
   16824:	f00e fc5f 	bl	250e6 <memset>
	params.attr = attr;
   16828:	4b03      	ldr	r3, [pc, #12]	; (16838 <proxy_send+0x50>)
   1682a:	e7ec      	b.n	16806 <proxy_send+0x1e>
	return 0;
   1682c:	2000      	movs	r0, #0
   1682e:	e7f2      	b.n	16816 <proxy_send+0x2e>
   16830:	2000230b 	.word	0x2000230b
   16834:	20006f30 	.word	0x20006f30
   16838:	20006e94 	.word	0x20006e94

0001683c <proxy_send_beacons>:
{
   1683c:	b538      	push	{r3, r4, r5, lr}
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   1683e:	4c0e      	ldr	r4, [pc, #56]	; (16878 <proxy_send_beacons+0x3c>)
   16840:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
   16844:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16848:	429a      	cmp	r2, r3
{
   1684a:	4605      	mov	r5, r0
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   1684c:	d005      	beq.n	1685a <proxy_send_beacons+0x1e>
			beacon_send(client->conn, sub);
   1684e:	f850 0c0c 	ldr.w	r0, [r0, #-12]
   16852:	f104 01f4 	add.w	r1, r4, #244	; 0xf4
   16856:	f010 fc53 	bl	27100 <beacon_send>
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   1685a:	f8b4 21f4 	ldrh.w	r2, [r4, #500]	; 0x1f4
   1685e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16862:	429a      	cmp	r2, r3
   16864:	d006      	beq.n	16874 <proxy_send_beacons+0x38>
			beacon_send(client->conn, sub);
   16866:	f855 0c0c 	ldr.w	r0, [r5, #-12]
   1686a:	4904      	ldr	r1, [pc, #16]	; (1687c <proxy_send_beacons+0x40>)
}
   1686c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			beacon_send(client->conn, sub);
   16870:	f010 bc46 	b.w	27100 <beacon_send>
}
   16874:	bd38      	pop	{r3, r4, r5, pc}
   16876:	bf00      	nop
   16878:	20006ab8 	.word	0x20006ab8
   1687c:	20006c90 	.word	0x20006c90

00016880 <send_filter_status>:
{
   16880:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_net_tx tx = {
   16882:	f851 3b04 	ldr.w	r3, [r1], #4
   16886:	2600      	movs	r6, #0
{
   16888:	4614      	mov	r4, r2
   1688a:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
   1688c:	e9cd 3101 	strd	r3, r1, [sp, #4]
   16890:	9603      	str	r6, [sp, #12]
		.src = bt_mesh_primary_addr(),
   16892:	f7f8 ffaf 	bl	f7f4 <bt_mesh_primary_addr>
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   16896:	9b02      	ldr	r3, [sp, #8]
	struct bt_mesh_net_tx tx = {
   16898:	f8ad 000c 	strh.w	r0, [sp, #12]
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   1689c:	809e      	strh	r6, [r3, #4]
   1689e:	68a3      	ldr	r3, [r4, #8]
   168a0:	6023      	str	r3, [r4, #0]
	net_buf_simple_reserve(buf, 10);
   168a2:	210a      	movs	r1, #10
   168a4:	4620      	mov	r0, r4
	buf->len  = 0U;
   168a6:	80a6      	strh	r6, [r4, #4]
   168a8:	f007 fcee 	bl	1e288 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, CFG_FILTER_STATUS);
   168ac:	2103      	movs	r1, #3
   168ae:	4620      	mov	r0, r4
   168b0:	f011 fb28 	bl	27f04 <net_buf_simple_add_u8>
	if (client->filter_type == WHITELIST) {
   168b4:	7aab      	ldrb	r3, [r5, #10]
   168b6:	2b01      	cmp	r3, #1
		net_buf_simple_add_u8(buf, 0x00);
   168b8:	bf0c      	ite	eq
   168ba:	4631      	moveq	r1, r6
		net_buf_simple_add_u8(buf, 0x01);
   168bc:	2101      	movne	r1, #1
   168be:	4620      	mov	r0, r4
   168c0:	f011 fb20 	bl	27f04 <net_buf_simple_add_u8>
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   168c4:	88a9      	ldrh	r1, [r5, #4]
   168c6:	88eb      	ldrh	r3, [r5, #6]
	for (filter_size = 0U, i = 0; i < ARRAY_SIZE(client->filter); i++) {
   168c8:	3900      	subs	r1, #0
   168ca:	bf18      	it	ne
   168cc:	2101      	movne	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   168ce:	b103      	cbz	r3, 168d2 <send_filter_status+0x52>
			filter_size++;
   168d0:	3101      	adds	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   168d2:	892b      	ldrh	r3, [r5, #8]
   168d4:	b10b      	cbz	r3, 168da <send_filter_status+0x5a>
			filter_size++;
   168d6:	3101      	adds	r1, #1
   168d8:	b289      	uxth	r1, r1
	net_buf_simple_add_be16(buf, filter_size);
   168da:	4620      	mov	r0, r4
   168dc:	f011 fb22 	bl	27f24 <net_buf_simple_add_be16>
	err = bt_mesh_net_encode(&tx, buf, true);
   168e0:	4621      	mov	r1, r4
   168e2:	2201      	movs	r2, #1
   168e4:	a801      	add	r0, sp, #4
   168e6:	f7f6 fb57 	bl	cf98 <bt_mesh_net_encode>
	if (err) {
   168ea:	4601      	mov	r1, r0
   168ec:	b158      	cbz	r0, 16906 <send_filter_status+0x86>
   168ee:	4a0e      	ldr	r2, [pc, #56]	; (16928 <send_filter_status+0xa8>)
   168f0:	4b0e      	ldr	r3, [pc, #56]	; (1692c <send_filter_status+0xac>)
		BT_ERR("Encoding Proxy cfg message failed (err %d)", err);
   168f2:	480f      	ldr	r0, [pc, #60]	; (16930 <send_filter_status+0xb0>)
   168f4:	1ad2      	subs	r2, r2, r3
   168f6:	08d2      	lsrs	r2, r2, #3
   168f8:	0192      	lsls	r2, r2, #6
   168fa:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
   168fe:	f00c fd62 	bl	233c6 <log_1>
}
   16902:	b004      	add	sp, #16
   16904:	bd70      	pop	{r4, r5, r6, pc}
	err = proxy_segment_and_send(client->conn, BT_MESH_PROXY_CONFIG, buf);
   16906:	2102      	movs	r1, #2
   16908:	6828      	ldr	r0, [r5, #0]
   1690a:	4622      	mov	r2, r4
   1690c:	f010 fbaf 	bl	2706e <proxy_segment_and_send>
	if (err) {
   16910:	4601      	mov	r1, r0
   16912:	2800      	cmp	r0, #0
   16914:	d0f5      	beq.n	16902 <send_filter_status+0x82>
   16916:	4a04      	ldr	r2, [pc, #16]	; (16928 <send_filter_status+0xa8>)
   16918:	4b04      	ldr	r3, [pc, #16]	; (1692c <send_filter_status+0xac>)
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
   1691a:	4806      	ldr	r0, [pc, #24]	; (16934 <send_filter_status+0xb4>)
   1691c:	1ad2      	subs	r2, r2, r3
   1691e:	08d2      	lsrs	r2, r2, #3
   16920:	0192      	lsls	r2, r2, #6
   16922:	f042 0201 	orr.w	r2, r2, #1
   16926:	e7ea      	b.n	168fe <send_filter_status+0x7e>
   16928:	000289b0 	.word	0x000289b0
   1692c:	00028868 	.word	0x00028868
   16930:	0002e6b8 	.word	0x0002e6b8
   16934:	0002e6e3 	.word	0x0002e6e3

00016938 <proxy_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   16938:	2a01      	cmp	r2, #1
{
   1693a:	b508      	push	{r3, lr}
   1693c:	4603      	mov	r3, r0
   1693e:	4610      	mov	r0, r2
	if (value != BT_GATT_CCC_NOTIFY) {
   16940:	d115      	bne.n	1696e <proxy_ccc_write+0x36>
		if (clients[i].conn == conn) {
   16942:	491a      	ldr	r1, [pc, #104]	; (169ac <proxy_ccc_write+0x74>)
   16944:	680a      	ldr	r2, [r1, #0]
   16946:	4293      	cmp	r3, r2
   16948:	d015      	beq.n	16976 <proxy_ccc_write+0x3e>
	__ASSERT(client, "No client for connection");
   1694a:	4a19      	ldr	r2, [pc, #100]	; (169b0 <proxy_ccc_write+0x78>)
   1694c:	4919      	ldr	r1, [pc, #100]	; (169b4 <proxy_ccc_write+0x7c>)
   1694e:	481a      	ldr	r0, [pc, #104]	; (169b8 <proxy_ccc_write+0x80>)
   16950:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   16954:	f00c fcb9 	bl	232ca <printk>
   16958:	4818      	ldr	r0, [pc, #96]	; (169bc <proxy_ccc_write+0x84>)
   1695a:	f00c fcb6 	bl	232ca <printk>
   1695e:	4814      	ldr	r0, [pc, #80]	; (169b0 <proxy_ccc_write+0x78>)
   16960:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   16964:	f00c fcf4 	bl	23350 <assert_post_action>
	if (client->filter_type == NONE) {
   16968:	2300      	movs	r3, #0
   1696a:	7a9b      	ldrb	r3, [r3, #10]
   1696c:	deff      	udf	#255	; 0xff
}
   1696e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   16972:	f7ff beed 	b.w	16750 <prov_ccc_write.part.0>
	if (client->filter_type == NONE) {
   16976:	7a8b      	ldrb	r3, [r1, #10]
   16978:	b9ab      	cbnz	r3, 169a6 <proxy_ccc_write+0x6e>
		client->filter_type = WHITELIST;
   1697a:	7288      	strb	r0, [r1, #10]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1697c:	f101 0314 	add.w	r3, r1, #20
   16980:	f3bf 8f5b 	dmb	ish
   16984:	e853 2f00 	ldrex	r2, [r3]
   16988:	f042 0001 	orr.w	r0, r2, #1
   1698c:	e843 0c00 	strex	ip, r0, [r3]
   16990:	f1bc 0f00 	cmp.w	ip, #0
   16994:	d1f6      	bne.n	16984 <proxy_ccc_write+0x4c>
   16996:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1699a:	07d3      	lsls	r3, r2, #31
   1699c:	d403      	bmi.n	169a6 <proxy_ccc_write+0x6e>
		k_queue_append(&work_q->queue, work);
   1699e:	4808      	ldr	r0, [pc, #32]	; (169c0 <proxy_ccc_write+0x88>)
   169a0:	310c      	adds	r1, #12
   169a2:	f011 fc9d 	bl	282e0 <k_queue_append>
}
   169a6:	2002      	movs	r0, #2
   169a8:	bd08      	pop	{r3, pc}
   169aa:	bf00      	nop
   169ac:	20006e00 	.word	0x20006e00
   169b0:	0002e70d 	.word	0x0002e70d
   169b4:	0002e73e 	.word	0x0002e73e
   169b8:	000297e6 	.word	0x000297e6
   169bc:	0002e745 	.word	0x0002e745
   169c0:	20001c08 	.word	0x20001c08

000169c4 <prov_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   169c4:	2a01      	cmp	r2, #1
{
   169c6:	b508      	push	{r3, lr}
	if (value != BT_GATT_CCC_NOTIFY) {
   169c8:	d115      	bne.n	169f6 <prov_ccc_write+0x32>
		if (clients[i].conn == conn) {
   169ca:	4b11      	ldr	r3, [pc, #68]	; (16a10 <prov_ccc_write+0x4c>)
   169cc:	681a      	ldr	r2, [r3, #0]
   169ce:	4290      	cmp	r0, r2
   169d0:	d016      	beq.n	16a00 <prov_ccc_write+0x3c>
	__ASSERT(client, "No client for connection");
   169d2:	4a10      	ldr	r2, [pc, #64]	; (16a14 <prov_ccc_write+0x50>)
   169d4:	4910      	ldr	r1, [pc, #64]	; (16a18 <prov_ccc_write+0x54>)
   169d6:	4811      	ldr	r0, [pc, #68]	; (16a1c <prov_ccc_write+0x58>)
   169d8:	f240 2375 	movw	r3, #629	; 0x275
   169dc:	f00c fc75 	bl	232ca <printk>
   169e0:	480f      	ldr	r0, [pc, #60]	; (16a20 <prov_ccc_write+0x5c>)
   169e2:	f00c fc72 	bl	232ca <printk>
   169e6:	480b      	ldr	r0, [pc, #44]	; (16a14 <prov_ccc_write+0x50>)
   169e8:	f240 2175 	movw	r1, #629	; 0x275
   169ec:	f00c fcb0 	bl	23350 <assert_post_action>
	if (client->filter_type == NONE) {
   169f0:	2300      	movs	r3, #0
   169f2:	7a9b      	ldrb	r3, [r3, #10]
   169f4:	deff      	udf	#255	; 0xff
}
   169f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   169fa:	4610      	mov	r0, r2
   169fc:	f7ff bea8 	b.w	16750 <prov_ccc_write.part.0>
	if (client->filter_type == NONE) {
   16a00:	7a9a      	ldrb	r2, [r3, #10]
   16a02:	b91a      	cbnz	r2, 16a0c <prov_ccc_write+0x48>
		client->filter_type = PROV;
   16a04:	2203      	movs	r2, #3
   16a06:	729a      	strb	r2, [r3, #10]
		bt_mesh_pb_gatt_open(conn);
   16a08:	f7ff fe06 	bl	16618 <bt_mesh_pb_gatt_open>
}
   16a0c:	2002      	movs	r0, #2
   16a0e:	bd08      	pop	{r3, pc}
   16a10:	20006e00 	.word	0x20006e00
   16a14:	0002e70d 	.word	0x0002e70d
   16a18:	0002e73e 	.word	0x0002e73e
   16a1c:	000297e6 	.word	0x000297e6
   16a20:	0002e745 	.word	0x0002e745

00016a24 <proxy_complete_pdu>:
{
   16a24:	b570      	push	{r4, r5, r6, lr}
	switch (client->msg_type) {
   16a26:	7ac1      	ldrb	r1, [r0, #11]
{
   16a28:	b092      	sub	sp, #72	; 0x48
   16a2a:	4604      	mov	r4, r0
   16a2c:	2903      	cmp	r1, #3
   16a2e:	f200 80b2 	bhi.w	16b96 <proxy_complete_pdu+0x172>
   16a32:	e8df f001 	tbb	[pc, r1]
   16a36:	0d02      	.short	0x0d02
   16a38:	aa11      	.short	0xaa11
		bt_mesh_net_recv(&client->buf, 0, BT_MESH_NET_IF_PROXY);
   16a3a:	2202      	movs	r2, #2
   16a3c:	2100      	movs	r1, #0
   16a3e:	3038      	adds	r0, #56	; 0x38
   16a40:	f7f6 fdda 	bl	d5f8 <bt_mesh_net_recv>
   16a44:	2300      	movs	r3, #0
   16a46:	87a3      	strh	r3, [r4, #60]	; 0x3c
	buf->data = buf->__buf;
   16a48:	6c23      	ldr	r3, [r4, #64]	; 0x40
   16a4a:	63a3      	str	r3, [r4, #56]	; 0x38
}
   16a4c:	b012      	add	sp, #72	; 0x48
   16a4e:	bd70      	pop	{r4, r5, r6, pc}
		bt_mesh_beacon_recv(&client->buf);
   16a50:	3038      	adds	r0, #56	; 0x38
   16a52:	f7f5 fc79 	bl	c348 <bt_mesh_beacon_recv>
		break;
   16a56:	e7f5      	b.n	16a44 <proxy_complete_pdu+0x20>
	NET_BUF_SIMPLE_DEFINE(buf, 29);
   16a58:	ab0a      	add	r3, sp, #40	; 0x28
   16a5a:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
   16a5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   16a62:	9301      	str	r3, [sp, #4]
	err = bt_mesh_net_decode(&client->buf, BT_MESH_NET_IF_PROXY_CFG,
   16a64:	aa04      	add	r2, sp, #16
   16a66:	ab01      	add	r3, sp, #4
   16a68:	2103      	movs	r1, #3
   16a6a:	3038      	adds	r0, #56	; 0x38
   16a6c:	f7f6 fc28 	bl	d2c0 <bt_mesh_net_decode>
	if (err) {
   16a70:	4606      	mov	r6, r0
   16a72:	b158      	cbz	r0, 16a8c <proxy_complete_pdu+0x68>
   16a74:	4a4c      	ldr	r2, [pc, #304]	; (16ba8 <proxy_complete_pdu+0x184>)
   16a76:	4b4d      	ldr	r3, [pc, #308]	; (16bac <proxy_complete_pdu+0x188>)
   16a78:	1ad2      	subs	r2, r2, r3
   16a7a:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to decode Proxy Configuration (err %d)", err);
   16a7c:	0192      	lsls	r2, r2, #6
   16a7e:	4601      	mov	r1, r0
   16a80:	484b      	ldr	r0, [pc, #300]	; (16bb0 <proxy_complete_pdu+0x18c>)
   16a82:	f042 0201 	orr.w	r2, r2, #1
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
   16a86:	f00c fc9e 	bl	233c6 <log_1>
   16a8a:	e7db      	b.n	16a44 <proxy_complete_pdu+0x20>
	net_buf_simple_pull(&buf, BT_MESH_NET_HDR_LEN);
   16a8c:	2109      	movs	r1, #9
   16a8e:	a801      	add	r0, sp, #4
   16a90:	f007 fd82 	bl	1e598 <net_buf_simple_pull>
	if (buf.len < 1) {
   16a94:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   16a98:	b953      	cbnz	r3, 16ab0 <proxy_complete_pdu+0x8c>
   16a9a:	4b44      	ldr	r3, [pc, #272]	; (16bac <proxy_complete_pdu+0x188>)
   16a9c:	4942      	ldr	r1, [pc, #264]	; (16ba8 <proxy_complete_pdu+0x184>)
		BT_WARN("Too short proxy configuration PDU");
   16a9e:	4845      	ldr	r0, [pc, #276]	; (16bb4 <proxy_complete_pdu+0x190>)
   16aa0:	1ac9      	subs	r1, r1, r3
   16aa2:	08c9      	lsrs	r1, r1, #3
   16aa4:	0189      	lsls	r1, r1, #6
   16aa6:	f041 0102 	orr.w	r1, r1, #2
   16aaa:	f00c fc7f 	bl	233ac <log_0>
		return;
   16aae:	e7c9      	b.n	16a44 <proxy_complete_pdu+0x20>
	opcode = net_buf_simple_pull_u8(&buf);
   16ab0:	a801      	add	r0, sp, #4
   16ab2:	f011 f9eb 	bl	27e8c <net_buf_simple_pull_u8>
	switch (opcode) {
   16ab6:	2801      	cmp	r0, #1
	opcode = net_buf_simple_pull_u8(&buf);
   16ab8:	4605      	mov	r5, r0
	switch (opcode) {
   16aba:	d03d      	beq.n	16b38 <proxy_complete_pdu+0x114>
   16abc:	2802      	cmp	r0, #2
   16abe:	d051      	beq.n	16b64 <proxy_complete_pdu+0x140>
   16ac0:	2800      	cmp	r0, #0
   16ac2:	d158      	bne.n	16b76 <proxy_complete_pdu+0x152>
	if (buf->len < 1) {
   16ac4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   16ac8:	b97b      	cbnz	r3, 16aea <proxy_complete_pdu+0xc6>
   16aca:	4937      	ldr	r1, [pc, #220]	; (16ba8 <proxy_complete_pdu+0x184>)
   16acc:	4b37      	ldr	r3, [pc, #220]	; (16bac <proxy_complete_pdu+0x188>)
		BT_WARN("Too short Filter Set message");
   16ace:	483a      	ldr	r0, [pc, #232]	; (16bb8 <proxy_complete_pdu+0x194>)
   16ad0:	1ac9      	subs	r1, r1, r3
   16ad2:	08c9      	lsrs	r1, r1, #3
   16ad4:	0189      	lsls	r1, r1, #6
   16ad6:	f041 0102 	orr.w	r1, r1, #2
   16ada:	f00c fc67 	bl	233ac <log_0>
		send_filter_status(client, &rx, &buf);
   16ade:	aa01      	add	r2, sp, #4
   16ae0:	a904      	add	r1, sp, #16
   16ae2:	4620      	mov	r0, r4
   16ae4:	f7ff fecc 	bl	16880 <send_filter_status>
		break;
   16ae8:	e7ac      	b.n	16a44 <proxy_complete_pdu+0x20>
	type = net_buf_simple_pull_u8(buf);
   16aea:	a801      	add	r0, sp, #4
   16aec:	f011 f9ce 	bl	27e8c <net_buf_simple_pull_u8>
	switch (type) {
   16af0:	4601      	mov	r1, r0
   16af2:	b160      	cbz	r0, 16b0e <proxy_complete_pdu+0xea>
   16af4:	2801      	cmp	r0, #1
   16af6:	d011      	beq.n	16b1c <proxy_complete_pdu+0xf8>
   16af8:	4b2c      	ldr	r3, [pc, #176]	; (16bac <proxy_complete_pdu+0x188>)
   16afa:	4a2b      	ldr	r2, [pc, #172]	; (16ba8 <proxy_complete_pdu+0x184>)
		BT_WARN("Prohibited Filter Type 0x%02x", type);
   16afc:	482f      	ldr	r0, [pc, #188]	; (16bbc <proxy_complete_pdu+0x198>)
   16afe:	1ad2      	subs	r2, r2, r3
   16b00:	08d2      	lsrs	r2, r2, #3
   16b02:	0192      	lsls	r2, r2, #6
   16b04:	f042 0202 	orr.w	r2, r2, #2
   16b08:	f00c fc5d 	bl	233c6 <log_1>
		return -EINVAL;
   16b0c:	e7e7      	b.n	16ade <proxy_complete_pdu+0xba>
		(void)memset(client->filter, 0, sizeof(client->filter));
   16b0e:	2206      	movs	r2, #6
   16b10:	1d20      	adds	r0, r4, #4
   16b12:	f00e fae8 	bl	250e6 <memset>
		client->filter_type = WHITELIST;
   16b16:	2301      	movs	r3, #1
		client->filter_type = BLACKLIST;
   16b18:	72a3      	strb	r3, [r4, #10]
		break;
   16b1a:	e7e0      	b.n	16ade <proxy_complete_pdu+0xba>
		(void)memset(client->filter, 0, sizeof(client->filter));
   16b1c:	2206      	movs	r2, #6
   16b1e:	4629      	mov	r1, r5
   16b20:	1d20      	adds	r0, r4, #4
   16b22:	f00e fae0 	bl	250e6 <memset>
		client->filter_type = BLACKLIST;
   16b26:	2302      	movs	r3, #2
   16b28:	e7f6      	b.n	16b18 <proxy_complete_pdu+0xf4>
			addr = net_buf_simple_pull_be16(&buf);
   16b2a:	a801      	add	r0, sp, #4
   16b2c:	f011 f9be 	bl	27eac <net_buf_simple_pull_be16>
   16b30:	4601      	mov	r1, r0
			filter_add(client, addr);
   16b32:	4620      	mov	r0, r4
   16b34:	f010 fa85 	bl	27042 <filter_add>
		while (buf.len >= 2) {
   16b38:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   16b3c:	2b01      	cmp	r3, #1
   16b3e:	d8f4      	bhi.n	16b2a <proxy_complete_pdu+0x106>
   16b40:	e7cd      	b.n	16ade <proxy_complete_pdu+0xba>
			addr = net_buf_simple_pull_be16(&buf);
   16b42:	a801      	add	r0, sp, #4
   16b44:	f011 f9b2 	bl	27eac <net_buf_simple_pull_be16>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   16b48:	b160      	cbz	r0, 16b64 <proxy_complete_pdu+0x140>
		if (client->filter[i] == addr) {
   16b4a:	88a3      	ldrh	r3, [r4, #4]
   16b4c:	4283      	cmp	r3, r0
   16b4e:	d00e      	beq.n	16b6e <proxy_complete_pdu+0x14a>
   16b50:	88e3      	ldrh	r3, [r4, #6]
   16b52:	4283      	cmp	r3, r0
   16b54:	d00d      	beq.n	16b72 <proxy_complete_pdu+0x14e>
   16b56:	8923      	ldrh	r3, [r4, #8]
   16b58:	4283      	cmp	r3, r0
   16b5a:	d103      	bne.n	16b64 <proxy_complete_pdu+0x140>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   16b5c:	2302      	movs	r3, #2
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   16b5e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   16b62:	809e      	strh	r6, [r3, #4]
		while (buf.len >= 2) {
   16b64:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   16b68:	2b01      	cmp	r3, #1
   16b6a:	d8ea      	bhi.n	16b42 <proxy_complete_pdu+0x11e>
   16b6c:	e7b7      	b.n	16ade <proxy_complete_pdu+0xba>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   16b6e:	2300      	movs	r3, #0
   16b70:	e7f5      	b.n	16b5e <proxy_complete_pdu+0x13a>
   16b72:	2301      	movs	r3, #1
   16b74:	e7f3      	b.n	16b5e <proxy_complete_pdu+0x13a>
   16b76:	4a0c      	ldr	r2, [pc, #48]	; (16ba8 <proxy_complete_pdu+0x184>)
   16b78:	4b0c      	ldr	r3, [pc, #48]	; (16bac <proxy_complete_pdu+0x188>)
   16b7a:	1ad2      	subs	r2, r2, r3
   16b7c:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Unhandled configuration OpCode 0x%02x", opcode);
   16b7e:	0192      	lsls	r2, r2, #6
   16b80:	4601      	mov	r1, r0
   16b82:	f042 0202 	orr.w	r2, r2, #2
   16b86:	480e      	ldr	r0, [pc, #56]	; (16bc0 <proxy_complete_pdu+0x19c>)
   16b88:	e77d      	b.n	16a86 <proxy_complete_pdu+0x62>
		bt_mesh_pb_gatt_recv(client->conn, &client->buf);
   16b8a:	f100 0138 	add.w	r1, r0, #56	; 0x38
   16b8e:	6800      	ldr	r0, [r0, #0]
   16b90:	f7ff fd00 	bl	16594 <bt_mesh_pb_gatt_recv>
		break;
   16b94:	e756      	b.n	16a44 <proxy_complete_pdu+0x20>
   16b96:	4a04      	ldr	r2, [pc, #16]	; (16ba8 <proxy_complete_pdu+0x184>)
   16b98:	4b04      	ldr	r3, [pc, #16]	; (16bac <proxy_complete_pdu+0x188>)
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
   16b9a:	480a      	ldr	r0, [pc, #40]	; (16bc4 <proxy_complete_pdu+0x1a0>)
   16b9c:	1ad2      	subs	r2, r2, r3
   16b9e:	08d2      	lsrs	r2, r2, #3
   16ba0:	0192      	lsls	r2, r2, #6
   16ba2:	f042 0202 	orr.w	r2, r2, #2
   16ba6:	e76e      	b.n	16a86 <proxy_complete_pdu+0x62>
   16ba8:	000289b0 	.word	0x000289b0
   16bac:	00028868 	.word	0x00028868
   16bb0:	0002e760 	.word	0x0002e760
   16bb4:	0002e78e 	.word	0x0002e78e
   16bb8:	0002e7b0 	.word	0x0002e7b0
   16bbc:	0002e7cd 	.word	0x0002e7cd
   16bc0:	0002e7eb 	.word	0x0002e7eb
   16bc4:	0002e811 	.word	0x0002e811

00016bc8 <proxy_recv>:
{
   16bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (clients[i].conn == conn) {
   16bca:	4d5c      	ldr	r5, [pc, #368]	; (16d3c <proxy_recv+0x174>)
{
   16bcc:	461c      	mov	r4, r3
		if (clients[i].conn == conn) {
   16bce:	682b      	ldr	r3, [r5, #0]
   16bd0:	4283      	cmp	r3, r0
{
   16bd2:	4616      	mov	r6, r2
		if (clients[i].conn == conn) {
   16bd4:	f040 80af 	bne.w	16d36 <proxy_recv+0x16e>
	if (len < 1) {
   16bd8:	b964      	cbnz	r4, 16bf4 <proxy_recv+0x2c>
   16bda:	4959      	ldr	r1, [pc, #356]	; (16d40 <proxy_recv+0x178>)
   16bdc:	4b59      	ldr	r3, [pc, #356]	; (16d44 <proxy_recv+0x17c>)
		BT_WARN("Too small Proxy PDU");
   16bde:	485a      	ldr	r0, [pc, #360]	; (16d48 <proxy_recv+0x180>)
   16be0:	1ac9      	subs	r1, r1, r3
   16be2:	08c9      	lsrs	r1, r1, #3
   16be4:	0189      	lsls	r1, r1, #6
   16be6:	f041 0102 	orr.w	r1, r1, #2
			BT_WARN("Unexpected message type in last SAR PDU");
   16bea:	f00c fbdf 	bl	233ac <log_0>
			return -EINVAL;
   16bee:	f06f 0415 	mvn.w	r4, #21
   16bf2:	e05f      	b.n	16cb4 <proxy_recv+0xec>
	if (ATTR_IS_PROV(attr) != (PDU_TYPE(data) == BT_MESH_PROXY_PROV)) {
   16bf4:	7812      	ldrb	r2, [r2, #0]
   16bf6:	68cb      	ldr	r3, [r1, #12]
   16bf8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   16bfc:	3b00      	subs	r3, #0
   16bfe:	f1a2 0103 	sub.w	r1, r2, #3
   16c02:	bf18      	it	ne
   16c04:	2301      	movne	r3, #1
   16c06:	424a      	negs	r2, r1
   16c08:	414a      	adcs	r2, r1
   16c0a:	4293      	cmp	r3, r2
   16c0c:	d008      	beq.n	16c20 <proxy_recv+0x58>
   16c0e:	494c      	ldr	r1, [pc, #304]	; (16d40 <proxy_recv+0x178>)
   16c10:	4b4c      	ldr	r3, [pc, #304]	; (16d44 <proxy_recv+0x17c>)
		BT_WARN("Proxy PDU type doesn't match GATT service");
   16c12:	484e      	ldr	r0, [pc, #312]	; (16d4c <proxy_recv+0x184>)
   16c14:	1ac9      	subs	r1, r1, r3
   16c16:	08c9      	lsrs	r1, r1, #3
   16c18:	0189      	lsls	r1, r1, #6
   16c1a:	f041 0102 	orr.w	r1, r1, #2
   16c1e:	e7e4      	b.n	16bea <proxy_recv+0x22>
	if (len - 1 > net_buf_simple_tailroom(&client->buf)) {
   16c20:	f105 0038 	add.w	r0, r5, #56	; 0x38
   16c24:	f011 f95a 	bl	27edc <net_buf_simple_tailroom>
   16c28:	1e67      	subs	r7, r4, #1
   16c2a:	4287      	cmp	r7, r0
   16c2c:	d908      	bls.n	16c40 <proxy_recv+0x78>
   16c2e:	4944      	ldr	r1, [pc, #272]	; (16d40 <proxy_recv+0x178>)
   16c30:	4b44      	ldr	r3, [pc, #272]	; (16d44 <proxy_recv+0x17c>)
		BT_WARN("Too big proxy PDU");
   16c32:	4847      	ldr	r0, [pc, #284]	; (16d50 <proxy_recv+0x188>)
   16c34:	1ac9      	subs	r1, r1, r3
   16c36:	08c9      	lsrs	r1, r1, #3
   16c38:	0189      	lsls	r1, r1, #6
   16c3a:	f041 0102 	orr.w	r1, r1, #2
   16c3e:	e7d4      	b.n	16bea <proxy_recv+0x22>
	switch (PDU_SAR(data)) {
   16c40:	7833      	ldrb	r3, [r6, #0]
   16c42:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
   16c44:	0999      	lsrs	r1, r3, #6
   16c46:	2902      	cmp	r1, #2
   16c48:	d036      	beq.n	16cb8 <proxy_recv+0xf0>
   16c4a:	2903      	cmp	r1, #3
   16c4c:	d056      	beq.n	16cfc <proxy_recv+0x134>
   16c4e:	2901      	cmp	r1, #1
   16c50:	d014      	beq.n	16c7c <proxy_recv+0xb4>
		if (client->buf.len) {
   16c52:	b142      	cbz	r2, 16c66 <proxy_recv+0x9e>
   16c54:	493a      	ldr	r1, [pc, #232]	; (16d40 <proxy_recv+0x178>)
   16c56:	4b3b      	ldr	r3, [pc, #236]	; (16d44 <proxy_recv+0x17c>)
			BT_WARN("Complete PDU while a pending incomplete one");
   16c58:	483e      	ldr	r0, [pc, #248]	; (16d54 <proxy_recv+0x18c>)
   16c5a:	1ac9      	subs	r1, r1, r3
   16c5c:	08c9      	lsrs	r1, r1, #3
   16c5e:	0189      	lsls	r1, r1, #6
   16c60:	f041 0102 	orr.w	r1, r1, #2
   16c64:	e7c1      	b.n	16bea <proxy_recv+0x22>
		client->msg_type = PDU_TYPE(data);
   16c66:	72eb      	strb	r3, [r5, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   16c68:	463a      	mov	r2, r7
   16c6a:	1c71      	adds	r1, r6, #1
   16c6c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   16c70:	f011 f93c 	bl	27eec <net_buf_simple_add_mem>
		proxy_complete_pdu(client);
   16c74:	4628      	mov	r0, r5
   16c76:	f7ff fed5 	bl	16a24 <proxy_complete_pdu>
		break;
   16c7a:	e01b      	b.n	16cb4 <proxy_recv+0xec>
		if (client->buf.len) {
   16c7c:	b142      	cbz	r2, 16c90 <proxy_recv+0xc8>
   16c7e:	4930      	ldr	r1, [pc, #192]	; (16d40 <proxy_recv+0x178>)
   16c80:	4b30      	ldr	r3, [pc, #192]	; (16d44 <proxy_recv+0x17c>)
			BT_WARN("First PDU while a pending incomplete one");
   16c82:	4835      	ldr	r0, [pc, #212]	; (16d58 <proxy_recv+0x190>)
   16c84:	1ac9      	subs	r1, r1, r3
   16c86:	08c9      	lsrs	r1, r1, #3
   16c88:	0189      	lsls	r1, r1, #6
   16c8a:	f041 0102 	orr.w	r1, r1, #2
   16c8e:	e7ac      	b.n	16bea <proxy_recv+0x22>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16c90:	f644 6220 	movw	r2, #20000	; 0x4e20
   16c94:	f105 0118 	add.w	r1, r5, #24
   16c98:	4830      	ldr	r0, [pc, #192]	; (16d5c <proxy_recv+0x194>)
   16c9a:	f00b f955 	bl	21f48 <k_delayed_work_submit_to_queue>
		client->msg_type = PDU_TYPE(data);
   16c9e:	4631      	mov	r1, r6
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   16ca0:	463a      	mov	r2, r7
		client->msg_type = PDU_TYPE(data);
   16ca2:	f811 3b01 	ldrb.w	r3, [r1], #1
   16ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16caa:	72eb      	strb	r3, [r5, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   16cac:	f105 0038 	add.w	r0, r5, #56	; 0x38
   16cb0:	f011 f91c 	bl	27eec <net_buf_simple_add_mem>
}
   16cb4:	4620      	mov	r0, r4
   16cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!client->buf.len) {
   16cb8:	b942      	cbnz	r2, 16ccc <proxy_recv+0x104>
   16cba:	4921      	ldr	r1, [pc, #132]	; (16d40 <proxy_recv+0x178>)
   16cbc:	4b21      	ldr	r3, [pc, #132]	; (16d44 <proxy_recv+0x17c>)
			BT_WARN("Continuation with no prior data");
   16cbe:	4828      	ldr	r0, [pc, #160]	; (16d60 <proxy_recv+0x198>)
   16cc0:	1ac9      	subs	r1, r1, r3
   16cc2:	08c9      	lsrs	r1, r1, #3
   16cc4:	0189      	lsls	r1, r1, #6
   16cc6:	f041 0102 	orr.w	r1, r1, #2
   16cca:	e78e      	b.n	16bea <proxy_recv+0x22>
		if (client->msg_type != PDU_TYPE(data)) {
   16ccc:	7aea      	ldrb	r2, [r5, #11]
   16cce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16cd2:	429a      	cmp	r2, r3
   16cd4:	d008      	beq.n	16ce8 <proxy_recv+0x120>
   16cd6:	491a      	ldr	r1, [pc, #104]	; (16d40 <proxy_recv+0x178>)
   16cd8:	4b1a      	ldr	r3, [pc, #104]	; (16d44 <proxy_recv+0x17c>)
			BT_WARN("Unexpected message type in continuation");
   16cda:	4822      	ldr	r0, [pc, #136]	; (16d64 <proxy_recv+0x19c>)
   16cdc:	1ac9      	subs	r1, r1, r3
   16cde:	08c9      	lsrs	r1, r1, #3
   16ce0:	0189      	lsls	r1, r1, #6
   16ce2:	f041 0102 	orr.w	r1, r1, #2
   16ce6:	e780      	b.n	16bea <proxy_recv+0x22>
   16ce8:	f644 6220 	movw	r2, #20000	; 0x4e20
   16cec:	f105 0118 	add.w	r1, r5, #24
   16cf0:	481a      	ldr	r0, [pc, #104]	; (16d5c <proxy_recv+0x194>)
   16cf2:	f00b f929 	bl	21f48 <k_delayed_work_submit_to_queue>
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   16cf6:	463a      	mov	r2, r7
   16cf8:	1c71      	adds	r1, r6, #1
   16cfa:	e7d7      	b.n	16cac <proxy_recv+0xe4>
		if (!client->buf.len) {
   16cfc:	b942      	cbnz	r2, 16d10 <proxy_recv+0x148>
   16cfe:	4910      	ldr	r1, [pc, #64]	; (16d40 <proxy_recv+0x178>)
   16d00:	4b10      	ldr	r3, [pc, #64]	; (16d44 <proxy_recv+0x17c>)
			BT_WARN("Last SAR PDU with no prior data");
   16d02:	4819      	ldr	r0, [pc, #100]	; (16d68 <proxy_recv+0x1a0>)
   16d04:	1ac9      	subs	r1, r1, r3
   16d06:	08c9      	lsrs	r1, r1, #3
   16d08:	0189      	lsls	r1, r1, #6
   16d0a:	f041 0102 	orr.w	r1, r1, #2
   16d0e:	e76c      	b.n	16bea <proxy_recv+0x22>
		if (client->msg_type != PDU_TYPE(data)) {
   16d10:	7aea      	ldrb	r2, [r5, #11]
   16d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16d16:	429a      	cmp	r2, r3
   16d18:	d008      	beq.n	16d2c <proxy_recv+0x164>
   16d1a:	4909      	ldr	r1, [pc, #36]	; (16d40 <proxy_recv+0x178>)
   16d1c:	4b09      	ldr	r3, [pc, #36]	; (16d44 <proxy_recv+0x17c>)
			BT_WARN("Unexpected message type in last SAR PDU");
   16d1e:	4813      	ldr	r0, [pc, #76]	; (16d6c <proxy_recv+0x1a4>)
   16d20:	1ac9      	subs	r1, r1, r3
   16d22:	08c9      	lsrs	r1, r1, #3
   16d24:	0189      	lsls	r1, r1, #6
   16d26:	f041 0102 	orr.w	r1, r1, #2
   16d2a:	e75e      	b.n	16bea <proxy_recv+0x22>
		k_delayed_work_cancel(&client->sar_timer);
   16d2c:	f105 0018 	add.w	r0, r5, #24
   16d30:	f00b f99a 	bl	22068 <k_delayed_work_cancel>
   16d34:	e798      	b.n	16c68 <proxy_recv+0xa0>
		return -ENOTCONN;
   16d36:	f06f 0438 	mvn.w	r4, #56	; 0x38
   16d3a:	e7bb      	b.n	16cb4 <proxy_recv+0xec>
   16d3c:	20006e00 	.word	0x20006e00
   16d40:	000289b0 	.word	0x000289b0
   16d44:	00028868 	.word	0x00028868
   16d48:	0002e82f 	.word	0x0002e82f
   16d4c:	0002e843 	.word	0x0002e843
   16d50:	0002e86d 	.word	0x0002e86d
   16d54:	0002e87f 	.word	0x0002e87f
   16d58:	0002e8ab 	.word	0x0002e8ab
   16d5c:	20001c08 	.word	0x20001c08
   16d60:	0002e8d4 	.word	0x0002e8d4
   16d64:	0002e8f4 	.word	0x0002e8f4
   16d68:	0002e91c 	.word	0x0002e91c
   16d6c:	0002e93c 	.word	0x0002e93c

00016d70 <bt_mesh_proxy_beacon_send>:
{
   16d70:	b538      	push	{r3, r4, r5, lr}
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   16d72:	4c0f      	ldr	r4, [pc, #60]	; (16db0 <bt_mesh_proxy_beacon_send+0x40>)
{
   16d74:	4601      	mov	r1, r0
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
   16d76:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
	if (!sub) {
   16d7a:	b981      	cbnz	r1, 16d9e <bt_mesh_proxy_beacon_send+0x2e>
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   16d7c:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
   16d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16d84:	429a      	cmp	r2, r3
   16d86:	d002      	beq.n	16d8e <bt_mesh_proxy_beacon_send+0x1e>
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
   16d88:	4628      	mov	r0, r5
   16d8a:	f7ff fff1 	bl	16d70 <bt_mesh_proxy_beacon_send>
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   16d8e:	f8b4 21f4 	ldrh.w	r2, [r4, #500]	; 0x1f4
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
   16d92:	4908      	ldr	r1, [pc, #32]	; (16db4 <bt_mesh_proxy_beacon_send+0x44>)
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   16d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16d98:	429a      	cmp	r2, r3
   16d9a:	d1ee      	bne.n	16d7a <bt_mesh_proxy_beacon_send+0xa>
}
   16d9c:	bd38      	pop	{r3, r4, r5, pc}
		if (clients[i].conn) {
   16d9e:	4b06      	ldr	r3, [pc, #24]	; (16db8 <bt_mesh_proxy_beacon_send+0x48>)
   16da0:	6818      	ldr	r0, [r3, #0]
   16da2:	2800      	cmp	r0, #0
   16da4:	d0fa      	beq.n	16d9c <bt_mesh_proxy_beacon_send+0x2c>
}
   16da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			beacon_send(clients[i].conn, sub);
   16daa:	f010 b9a9 	b.w	27100 <beacon_send>
   16dae:	bf00      	nop
   16db0:	20006ab8 	.word	0x20006ab8
   16db4:	20006c90 	.word	0x20006c90
   16db8:	20006e00 	.word	0x20006e00

00016dbc <bt_mesh_proxy_identity_start>:
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   16dbc:	2301      	movs	r3, #1
{
   16dbe:	b510      	push	{r4, lr}
   16dc0:	4604      	mov	r4, r0
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   16dc2:	f880 3020 	strb.w	r3, [r0, #32]
   16dc6:	f011 fb6b 	bl	284a0 <z_impl_k_uptime_ticks>
   16dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16dce:	460a      	mov	r2, r1
   16dd0:	fba0 0103 	umull	r0, r1, r0, r3
   16dd4:	fb03 1102 	mla	r1, r3, r2, r1
   16dd8:	0bc3      	lsrs	r3, r0, #15
	next_idx = sub - bt_mesh.sub;
   16dda:	4808      	ldr	r0, [pc, #32]	; (16dfc <bt_mesh_proxy_identity_start+0x40>)
   16ddc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return (u32_t)k_uptime_get();
   16de0:	6263      	str	r3, [r4, #36]	; 0x24
   16de2:	1a24      	subs	r4, r4, r0
   16de4:	10a4      	asrs	r4, r4, #2
   16de6:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   16dea:	ebc4 2444 	rsb	r4, r4, r4, lsl #9
   16dee:	4b04      	ldr	r3, [pc, #16]	; (16e00 <bt_mesh_proxy_identity_start+0x44>)
   16df0:	eb04 4484 	add.w	r4, r4, r4, lsl #18
   16df4:	4264      	negs	r4, r4
   16df6:	601c      	str	r4, [r3, #0]
}
   16df8:	bd10      	pop	{r4, pc}
   16dfa:	bf00      	nop
   16dfc:	20006bac 	.word	0x20006bac
   16e00:	20000b24 	.word	0x20000b24

00016e04 <bt_mesh_proxy_identity_enable>:
{
   16e04:	b510      	push	{r4, lr}
	if (!bt_mesh_is_provisioned()) {
   16e06:	f7f4 fe8d 	bl	bb24 <bt_mesh_is_provisioned>
   16e0a:	b328      	cbz	r0, 16e58 <bt_mesh_proxy_identity_enable+0x54>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   16e0c:	4c14      	ldr	r4, [pc, #80]	; (16e60 <bt_mesh_proxy_identity_enable+0x5c>)
   16e0e:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
   16e12:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16e16:	429a      	cmp	r2, r3
   16e18:	d019      	beq.n	16e4e <bt_mesh_proxy_identity_enable+0x4a>
		if (sub->node_id == BT_MESH_NODE_IDENTITY_NOT_SUPPORTED) {
   16e1a:	f894 3114 	ldrb.w	r3, [r4, #276]	; 0x114
   16e1e:	2b02      	cmp	r3, #2
   16e20:	d015      	beq.n	16e4e <bt_mesh_proxy_identity_enable+0x4a>
		bt_mesh_proxy_identity_start(sub);
   16e22:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   16e26:	f7ff ffc9 	bl	16dbc <bt_mesh_proxy_identity_start>
		count++;
   16e2a:	2001      	movs	r0, #1
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   16e2c:	f8b4 21f4 	ldrh.w	r2, [r4, #500]	; 0x1f4
   16e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16e34:	429a      	cmp	r2, r3
   16e36:	d00c      	beq.n	16e52 <bt_mesh_proxy_identity_enable+0x4e>
		if (sub->node_id == BT_MESH_NODE_IDENTITY_NOT_SUPPORTED) {
   16e38:	f894 31f8 	ldrb.w	r3, [r4, #504]	; 0x1f8
   16e3c:	2b02      	cmp	r3, #2
   16e3e:	d008      	beq.n	16e52 <bt_mesh_proxy_identity_enable+0x4e>
		bt_mesh_proxy_identity_start(sub);
   16e40:	4808      	ldr	r0, [pc, #32]	; (16e64 <bt_mesh_proxy_identity_enable+0x60>)
   16e42:	f7ff ffbb 	bl	16dbc <bt_mesh_proxy_identity_start>
		bt_mesh_adv_update();
   16e46:	f7f4 fffb 	bl	be40 <bt_mesh_adv_update>
	return 0;
   16e4a:	2000      	movs	r0, #0
   16e4c:	e003      	b.n	16e56 <bt_mesh_proxy_identity_enable+0x52>
	int i, count = 0;
   16e4e:	2000      	movs	r0, #0
   16e50:	e7ec      	b.n	16e2c <bt_mesh_proxy_identity_enable+0x28>
	if (count) {
   16e52:	2800      	cmp	r0, #0
   16e54:	d1f7      	bne.n	16e46 <bt_mesh_proxy_identity_enable+0x42>
}
   16e56:	bd10      	pop	{r4, pc}
		return -EAGAIN;
   16e58:	f06f 000a 	mvn.w	r0, #10
   16e5c:	e7fb      	b.n	16e56 <bt_mesh_proxy_identity_enable+0x52>
   16e5e:	bf00      	nop
   16e60:	20006ab8 	.word	0x20006ab8
   16e64:	20006c90 	.word	0x20006c90

00016e68 <bt_mesh_proxy_get_buf>:
	buf->len  = 0U;
   16e68:	4803      	ldr	r0, [pc, #12]	; (16e78 <bt_mesh_proxy_get_buf+0x10>)
   16e6a:	2300      	movs	r3, #0
   16e6c:	8783      	strh	r3, [r0, #60]	; 0x3c
	buf->data = buf->__buf;
   16e6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   16e70:	f840 3f38 	str.w	r3, [r0, #56]!
}
   16e74:	4770      	bx	lr
   16e76:	bf00      	nop
   16e78:	20006e00 	.word	0x20006e00

00016e7c <bt_mesh_proxy_prov_enable>:
{
   16e7c:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_PROV) {
   16e7e:	4d0c      	ldr	r5, [pc, #48]	; (16eb0 <bt_mesh_proxy_prov_enable+0x34>)
   16e80:	782c      	ldrb	r4, [r5, #0]
   16e82:	2c01      	cmp	r4, #1
   16e84:	d00e      	beq.n	16ea4 <bt_mesh_proxy_prov_enable+0x28>
	if (gatt_svc != MESH_GATT_NONE) {
   16e86:	b984      	cbnz	r4, 16eaa <bt_mesh_proxy_prov_enable+0x2e>
	bt_gatt_service_register(&prov_svc);
   16e88:	480a      	ldr	r0, [pc, #40]	; (16eb4 <bt_mesh_proxy_prov_enable+0x38>)
   16e8a:	f7f4 f9b9 	bl	b200 <bt_gatt_service_register>
	prov_fast_adv = true;
   16e8e:	4a0a      	ldr	r2, [pc, #40]	; (16eb8 <bt_mesh_proxy_prov_enable+0x3c>)
	gatt_svc = MESH_GATT_PROV;
   16e90:	2301      	movs	r3, #1
   16e92:	702b      	strb	r3, [r5, #0]
	prov_fast_adv = true;
   16e94:	7013      	strb	r3, [r2, #0]
		if (clients[i].conn) {
   16e96:	4b09      	ldr	r3, [pc, #36]	; (16ebc <bt_mesh_proxy_prov_enable+0x40>)
   16e98:	6818      	ldr	r0, [r3, #0]
   16e9a:	b110      	cbz	r0, 16ea2 <bt_mesh_proxy_prov_enable+0x26>
			clients[i].filter_type = PROV;
   16e9c:	2203      	movs	r2, #3
   16e9e:	729a      	strb	r2, [r3, #10]
	return 0;
   16ea0:	4620      	mov	r0, r4
}
   16ea2:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   16ea4:	f06f 0044 	mvn.w	r0, #68	; 0x44
   16ea8:	e7fb      	b.n	16ea2 <bt_mesh_proxy_prov_enable+0x26>
		return -EBUSY;
   16eaa:	f06f 000f 	mvn.w	r0, #15
   16eae:	e7f8      	b.n	16ea2 <bt_mesh_proxy_prov_enable+0x26>
   16eb0:	2000230b 	.word	0x2000230b
   16eb4:	20006ee8 	.word	0x20006ee8
   16eb8:	2000230c 	.word	0x2000230c
   16ebc:	20006e00 	.word	0x20006e00

00016ec0 <bt_mesh_proxy_prov_disable>:
{
   16ec0:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   16ec2:	4d12      	ldr	r5, [pc, #72]	; (16f0c <bt_mesh_proxy_prov_disable+0x4c>)
   16ec4:	782b      	ldrb	r3, [r5, #0]
{
   16ec6:	4604      	mov	r4, r0
	if (gatt_svc == MESH_GATT_NONE) {
   16ec8:	b1cb      	cbz	r3, 16efe <bt_mesh_proxy_prov_disable+0x3e>
	if (gatt_svc != MESH_GATT_PROV) {
   16eca:	2b01      	cmp	r3, #1
   16ecc:	d11a      	bne.n	16f04 <bt_mesh_proxy_prov_disable+0x44>
	bt_gatt_service_unregister(&prov_svc);
   16ece:	4810      	ldr	r0, [pc, #64]	; (16f10 <bt_mesh_proxy_prov_disable+0x50>)
   16ed0:	f7f4 f86e 	bl	afb0 <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   16ed4:	2300      	movs	r3, #0
   16ed6:	702b      	strb	r3, [r5, #0]
		if (!client->conn || client->filter_type != PROV) {
   16ed8:	4d0e      	ldr	r5, [pc, #56]	; (16f14 <bt_mesh_proxy_prov_disable+0x54>)
   16eda:	6828      	ldr	r0, [r5, #0]
   16edc:	b110      	cbz	r0, 16ee4 <bt_mesh_proxy_prov_disable+0x24>
   16ede:	7aab      	ldrb	r3, [r5, #10]
   16ee0:	2b03      	cmp	r3, #3
   16ee2:	d003      	beq.n	16eec <bt_mesh_proxy_prov_disable+0x2c>
	bt_mesh_adv_update();
   16ee4:	f7f4 ffac 	bl	be40 <bt_mesh_adv_update>
	return 0;
   16ee8:	2000      	movs	r0, #0
}
   16eea:	bd38      	pop	{r3, r4, r5, pc}
		if (disconnect) {
   16eec:	b11c      	cbz	r4, 16ef6 <bt_mesh_proxy_prov_disable+0x36>
			bt_conn_disconnect(client->conn,
   16eee:	2113      	movs	r1, #19
   16ef0:	f00e fd58 	bl	259a4 <bt_conn_disconnect>
   16ef4:	e7f6      	b.n	16ee4 <bt_mesh_proxy_prov_disable+0x24>
			bt_mesh_pb_gatt_close(client->conn);
   16ef6:	f7ff fbad 	bl	16654 <bt_mesh_pb_gatt_close>
			client->filter_type = NONE;
   16efa:	72ac      	strb	r4, [r5, #10]
   16efc:	e7f2      	b.n	16ee4 <bt_mesh_proxy_prov_disable+0x24>
		return -EALREADY;
   16efe:	f06f 0044 	mvn.w	r0, #68	; 0x44
   16f02:	e7f2      	b.n	16eea <bt_mesh_proxy_prov_disable+0x2a>
		return -EBUSY;
   16f04:	f06f 000f 	mvn.w	r0, #15
   16f08:	e7ef      	b.n	16eea <bt_mesh_proxy_prov_disable+0x2a>
   16f0a:	bf00      	nop
   16f0c:	2000230b 	.word	0x2000230b
   16f10:	20006ee8 	.word	0x20006ee8
   16f14:	20006e00 	.word	0x20006e00

00016f18 <bt_mesh_proxy_gatt_enable>:
{
   16f18:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_PROXY) {
   16f1a:	4d0b      	ldr	r5, [pc, #44]	; (16f48 <bt_mesh_proxy_gatt_enable+0x30>)
   16f1c:	782c      	ldrb	r4, [r5, #0]
   16f1e:	2c02      	cmp	r4, #2
   16f20:	d00c      	beq.n	16f3c <bt_mesh_proxy_gatt_enable+0x24>
	if (gatt_svc != MESH_GATT_NONE) {
   16f22:	b974      	cbnz	r4, 16f42 <bt_mesh_proxy_gatt_enable+0x2a>
	bt_gatt_service_register(&proxy_svc);
   16f24:	4809      	ldr	r0, [pc, #36]	; (16f4c <bt_mesh_proxy_gatt_enable+0x34>)
   16f26:	f7f4 f96b 	bl	b200 <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROXY;
   16f2a:	2302      	movs	r3, #2
   16f2c:	702b      	strb	r3, [r5, #0]
		if (clients[i].conn) {
   16f2e:	4b08      	ldr	r3, [pc, #32]	; (16f50 <bt_mesh_proxy_gatt_enable+0x38>)
   16f30:	6818      	ldr	r0, [r3, #0]
   16f32:	b110      	cbz	r0, 16f3a <bt_mesh_proxy_gatt_enable+0x22>
			clients[i].filter_type = WHITELIST;
   16f34:	2201      	movs	r2, #1
   16f36:	729a      	strb	r2, [r3, #10]
	return 0;
   16f38:	4620      	mov	r0, r4
}
   16f3a:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   16f3c:	f06f 0044 	mvn.w	r0, #68	; 0x44
   16f40:	e7fb      	b.n	16f3a <bt_mesh_proxy_gatt_enable+0x22>
		return -EBUSY;
   16f42:	f06f 000f 	mvn.w	r0, #15
   16f46:	e7f8      	b.n	16f3a <bt_mesh_proxy_gatt_enable+0x22>
   16f48:	2000230b 	.word	0x2000230b
   16f4c:	20006f84 	.word	0x20006f84
   16f50:	20006e00 	.word	0x20006e00

00016f54 <bt_mesh_proxy_gatt_disconnect>:
		if (client->conn && (client->filter_type == WHITELIST ||
   16f54:	4b06      	ldr	r3, [pc, #24]	; (16f70 <bt_mesh_proxy_gatt_disconnect+0x1c>)
   16f56:	6818      	ldr	r0, [r3, #0]
   16f58:	b140      	cbz	r0, 16f6c <bt_mesh_proxy_gatt_disconnect+0x18>
   16f5a:	7a9a      	ldrb	r2, [r3, #10]
   16f5c:	3a01      	subs	r2, #1
   16f5e:	2a01      	cmp	r2, #1
   16f60:	d804      	bhi.n	16f6c <bt_mesh_proxy_gatt_disconnect+0x18>
			client->filter_type = NONE;
   16f62:	2200      	movs	r2, #0
   16f64:	729a      	strb	r2, [r3, #10]
			bt_conn_disconnect(client->conn,
   16f66:	2113      	movs	r1, #19
   16f68:	f00e bd1c 	b.w	259a4 <bt_conn_disconnect>
}
   16f6c:	4770      	bx	lr
   16f6e:	bf00      	nop
   16f70:	20006e00 	.word	0x20006e00

00016f74 <bt_mesh_proxy_gatt_disable>:
{
   16f74:	b510      	push	{r4, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   16f76:	4c09      	ldr	r4, [pc, #36]	; (16f9c <bt_mesh_proxy_gatt_disable+0x28>)
   16f78:	7823      	ldrb	r3, [r4, #0]
   16f7a:	b14b      	cbz	r3, 16f90 <bt_mesh_proxy_gatt_disable+0x1c>
	if (gatt_svc != MESH_GATT_PROXY) {
   16f7c:	2b02      	cmp	r3, #2
   16f7e:	d10a      	bne.n	16f96 <bt_mesh_proxy_gatt_disable+0x22>
	bt_mesh_proxy_gatt_disconnect();
   16f80:	f7ff ffe8 	bl	16f54 <bt_mesh_proxy_gatt_disconnect>
	bt_gatt_service_unregister(&proxy_svc);
   16f84:	4806      	ldr	r0, [pc, #24]	; (16fa0 <bt_mesh_proxy_gatt_disable+0x2c>)
   16f86:	f7f4 f813 	bl	afb0 <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   16f8a:	2000      	movs	r0, #0
   16f8c:	7020      	strb	r0, [r4, #0]
}
   16f8e:	bd10      	pop	{r4, pc}
		return -EALREADY;
   16f90:	f06f 0044 	mvn.w	r0, #68	; 0x44
   16f94:	e7fb      	b.n	16f8e <bt_mesh_proxy_gatt_disable+0x1a>
		return -EBUSY;
   16f96:	f06f 000f 	mvn.w	r0, #15
   16f9a:	e7f8      	b.n	16f8e <bt_mesh_proxy_gatt_disable+0x1a>
   16f9c:	2000230b 	.word	0x2000230b
   16fa0:	20006f84 	.word	0x20006f84

00016fa4 <bt_mesh_proxy_send>:
	return 0;
}

int bt_mesh_proxy_send(struct bt_conn *conn, u8_t type,
		       struct net_buf_simple *msg)
{
   16fa4:	b538      	push	{r3, r4, r5, lr}
		if (clients[i].conn == conn) {
   16fa6:	4c17      	ldr	r4, [pc, #92]	; (17004 <bt_mesh_proxy_send+0x60>)
   16fa8:	6825      	ldr	r5, [r4, #0]
   16faa:	4285      	cmp	r5, r0
   16fac:	d00c      	beq.n	16fc8 <bt_mesh_proxy_send+0x24>
   16fae:	4b16      	ldr	r3, [pc, #88]	; (17008 <bt_mesh_proxy_send+0x64>)
   16fb0:	4916      	ldr	r1, [pc, #88]	; (1700c <bt_mesh_proxy_send+0x68>)
	struct bt_mesh_proxy_client *client = find_client(conn);

	if (!client) {
		BT_ERR("No Proxy Client found");
   16fb2:	4817      	ldr	r0, [pc, #92]	; (17010 <bt_mesh_proxy_send+0x6c>)
   16fb4:	1ac9      	subs	r1, r1, r3
   16fb6:	08c9      	lsrs	r1, r1, #3
   16fb8:	0189      	lsls	r1, r1, #6
   16fba:	f041 0101 	orr.w	r1, r1, #1
   16fbe:	f00c f9f5 	bl	233ac <log_0>
		return -ENOTCONN;
   16fc2:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_ERR("Invalid PDU type for Proxy Client");
		return -EINVAL;
	}

	return proxy_segment_and_send(conn, type, msg);
}
   16fc6:	bd38      	pop	{r3, r4, r5, pc}
	if ((client->filter_type == PROV) != (type == BT_MESH_PROXY_PROV)) {
   16fc8:	7aa4      	ldrb	r4, [r4, #10]
   16fca:	1ee5      	subs	r5, r4, #3
   16fcc:	426c      	negs	r4, r5
   16fce:	f1a1 0c03 	sub.w	ip, r1, #3
   16fd2:	416c      	adcs	r4, r5
   16fd4:	f1dc 0300 	rsbs	r3, ip, #0
   16fd8:	eb43 030c 	adc.w	r3, r3, ip
   16fdc:	429c      	cmp	r4, r3
   16fde:	d00c      	beq.n	16ffa <bt_mesh_proxy_send+0x56>
   16fe0:	4b09      	ldr	r3, [pc, #36]	; (17008 <bt_mesh_proxy_send+0x64>)
   16fe2:	490a      	ldr	r1, [pc, #40]	; (1700c <bt_mesh_proxy_send+0x68>)
		BT_ERR("Invalid PDU type for Proxy Client");
   16fe4:	480b      	ldr	r0, [pc, #44]	; (17014 <bt_mesh_proxy_send+0x70>)
   16fe6:	1ac9      	subs	r1, r1, r3
   16fe8:	08c9      	lsrs	r1, r1, #3
   16fea:	0189      	lsls	r1, r1, #6
   16fec:	f041 0101 	orr.w	r1, r1, #1
   16ff0:	f00c f9dc 	bl	233ac <log_0>
		return -EINVAL;
   16ff4:	f06f 0015 	mvn.w	r0, #21
   16ff8:	e7e5      	b.n	16fc6 <bt_mesh_proxy_send+0x22>
}
   16ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return proxy_segment_and_send(conn, type, msg);
   16ffe:	f010 b836 	b.w	2706e <proxy_segment_and_send>
   17002:	bf00      	nop
   17004:	20006e00 	.word	0x20006e00
   17008:	00028868 	.word	0x00028868
   1700c:	000289b0 	.word	0x000289b0
   17010:	0002e964 	.word	0x0002e964
   17014:	0002e97a 	.word	0x0002e97a

00017018 <bt_mesh_proxy_relay>:
{
   17018:	b530      	push	{r4, r5, lr}
		if (!client->conn) {
   1701a:	4c1c      	ldr	r4, [pc, #112]	; (1708c <bt_mesh_proxy_relay+0x74>)
{
   1701c:	b08d      	sub	sp, #52	; 0x34
		NET_BUF_SIMPLE_DEFINE(msg, 32);
   1701e:	ab04      	add	r3, sp, #16
   17020:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   17024:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17028:	9301      	str	r3, [sp, #4]
		if (!client->conn) {
   1702a:	6823      	ldr	r3, [r4, #0]
{
   1702c:	4605      	mov	r5, r0
		if (!client->conn) {
   1702e:	b15b      	cbz	r3, 17048 <bt_mesh_proxy_relay+0x30>
	if (client->filter_type == BLACKLIST) {
   17030:	7aa3      	ldrb	r3, [r4, #10]
   17032:	2b02      	cmp	r3, #2
   17034:	d10a      	bne.n	1704c <bt_mesh_proxy_relay+0x34>
			if (client->filter[i] == addr) {
   17036:	88a3      	ldrh	r3, [r4, #4]
   17038:	428b      	cmp	r3, r1
   1703a:	d005      	beq.n	17048 <bt_mesh_proxy_relay+0x30>
   1703c:	88e3      	ldrh	r3, [r4, #6]
   1703e:	428b      	cmp	r3, r1
   17040:	d002      	beq.n	17048 <bt_mesh_proxy_relay+0x30>
   17042:	8923      	ldrh	r3, [r4, #8]
   17044:	428b      	cmp	r3, r1
   17046:	d110      	bne.n	1706a <bt_mesh_proxy_relay+0x52>
	bool relayed = false;
   17048:	2000      	movs	r0, #0
   1704a:	e01d      	b.n	17088 <bt_mesh_proxy_relay+0x70>
	if (addr == BT_MESH_ADDR_ALL_NODES) {
   1704c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17050:	4291      	cmp	r1, r2
   17052:	d00a      	beq.n	1706a <bt_mesh_proxy_relay+0x52>
	if (client->filter_type == WHITELIST) {
   17054:	2b01      	cmp	r3, #1
   17056:	d1f7      	bne.n	17048 <bt_mesh_proxy_relay+0x30>
			if (client->filter[i] == addr) {
   17058:	88a3      	ldrh	r3, [r4, #4]
   1705a:	428b      	cmp	r3, r1
   1705c:	d005      	beq.n	1706a <bt_mesh_proxy_relay+0x52>
   1705e:	88e3      	ldrh	r3, [r4, #6]
   17060:	428b      	cmp	r3, r1
   17062:	d002      	beq.n	1706a <bt_mesh_proxy_relay+0x52>
   17064:	8923      	ldrh	r3, [r4, #8]
   17066:	428b      	cmp	r3, r1
   17068:	d1ee      	bne.n	17048 <bt_mesh_proxy_relay+0x30>
		net_buf_simple_reserve(&msg, 1);
   1706a:	2101      	movs	r1, #1
   1706c:	a801      	add	r0, sp, #4
   1706e:	f007 f90b 	bl	1e288 <net_buf_simple_reserve>
		net_buf_simple_add_mem(&msg, buf->data, buf->len);
   17072:	88aa      	ldrh	r2, [r5, #4]
   17074:	6829      	ldr	r1, [r5, #0]
   17076:	a801      	add	r0, sp, #4
   17078:	f010 ff38 	bl	27eec <net_buf_simple_add_mem>
		bt_mesh_proxy_send(client->conn, BT_MESH_PROXY_NET_PDU, &msg);
   1707c:	6820      	ldr	r0, [r4, #0]
   1707e:	aa01      	add	r2, sp, #4
   17080:	2100      	movs	r1, #0
   17082:	f7ff ff8f 	bl	16fa4 <bt_mesh_proxy_send>
		relayed = true;
   17086:	2001      	movs	r0, #1
}
   17088:	b00d      	add	sp, #52	; 0x34
   1708a:	bd30      	pop	{r4, r5, pc}
   1708c:	20006e00 	.word	0x20006e00

00017090 <bt_mesh_proxy_adv_start>:
	return prov_sd_len;
}
#endif /* CONFIG_BT_MESH_PB_GATT */

s32_t bt_mesh_proxy_adv_start(void)
{
   17090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BT_DBG("");

	if (gatt_svc == MESH_GATT_NONE) {
   17094:	4bc0      	ldr	r3, [pc, #768]	; (17398 <bt_mesh_proxy_adv_start+0x308>)
   17096:	781b      	ldrb	r3, [r3, #0]
{
   17098:	b086      	sub	sp, #24
	if (gatt_svc == MESH_GATT_NONE) {
   1709a:	b913      	cbnz	r3, 170a2 <bt_mesh_proxy_adv_start+0x12>
		return remaining;
   1709c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   170a0:	e069      	b.n	17176 <bt_mesh_proxy_adv_start+0xe6>
		return K_FOREVER;
	}

#if defined(CONFIG_BT_MESH_PB_GATT)
	if (!bt_mesh_is_provisioned()) {
   170a2:	f7f4 fd3f 	bl	bb24 <bt_mesh_is_provisioned>
   170a6:	4681      	mov	r9, r0
   170a8:	2800      	cmp	r0, #0
   170aa:	d168      	bne.n	1717e <bt_mesh_proxy_adv_start+0xee>
		const struct bt_le_adv_param *param;
		struct bt_data prov_sd[2];
		size_t prov_sd_len;

		if (prov_fast_adv) {
   170ac:	4cbb      	ldr	r4, [pc, #748]	; (1739c <bt_mesh_proxy_adv_start+0x30c>)
			param = &fast_adv_param;
		} else {
			param = &slow_adv_param;
   170ae:	4bbc      	ldr	r3, [pc, #752]	; (173a0 <bt_mesh_proxy_adv_start+0x310>)
		if (prov_fast_adv) {
   170b0:	7822      	ldrb	r2, [r4, #0]
			param = &slow_adv_param;
   170b2:	4ebc      	ldr	r6, [pc, #752]	; (173a4 <bt_mesh_proxy_adv_start+0x314>)
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   170b4:	f8df 8328 	ldr.w	r8, [pc, #808]	; 173e0 <bt_mesh_proxy_adv_start+0x350>
			param = &slow_adv_param;
   170b8:	2a00      	cmp	r2, #0
   170ba:	bf08      	it	eq
   170bc:	461e      	moveq	r6, r3
	const struct bt_mesh_prov *prov = bt_mesh_prov_get();
   170be:	f7fe fc11 	bl	158e4 <bt_mesh_prov_get>
   170c2:	4682      	mov	sl, r0
	const char *name = bt_get_name();
   170c4:	f7f0 fe38 	bl	7d38 <bt_get_name>
   170c8:	4607      	mov	r7, r0
	size_t name_len = strlen(name);
   170ca:	f00d ffaf 	bl	2502c <strlen>
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   170ce:	2210      	movs	r2, #16
   170d0:	f8da 1000 	ldr.w	r1, [sl]
	size_t name_len = strlen(name);
   170d4:	4605      	mov	r5, r0
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   170d6:	f108 0002 	add.w	r0, r8, #2
   170da:	f00d ffd9 	bl	25090 <memcpy>
	sys_put_be16(prov->oob_info, prov_svc_data + 18);
   170de:	f8ba 3008 	ldrh.w	r3, [sl, #8]
	dst[1] = val;
   170e2:	f888 3013 	strb.w	r3, [r8, #19]
	dst[0] = val >> 8;
   170e6:	0a1a      	lsrs	r2, r3, #8
   170e8:	f888 2012 	strb.w	r2, [r8, #18]
	if (prov->uri) {
   170ec:	f8da 0004 	ldr.w	r0, [sl, #4]
   170f0:	f10d 0808 	add.w	r8, sp, #8
   170f4:	b170      	cbz	r0, 17114 <bt_mesh_proxy_adv_start+0x84>
		size_t uri_len = strlen(prov->uri);
   170f6:	f00d ff99 	bl	2502c <strlen>
		if (uri_len > 29) {
   170fa:	281d      	cmp	r0, #29
   170fc:	d90c      	bls.n	17118 <bt_mesh_proxy_adv_start+0x88>
   170fe:	4baa      	ldr	r3, [pc, #680]	; (173a8 <bt_mesh_proxy_adv_start+0x318>)
   17100:	49aa      	ldr	r1, [pc, #680]	; (173ac <bt_mesh_proxy_adv_start+0x31c>)
			BT_WARN("Too long URI to fit advertising packet");
   17102:	48ab      	ldr	r0, [pc, #684]	; (173b0 <bt_mesh_proxy_adv_start+0x320>)
   17104:	1ac9      	subs	r1, r1, r3
   17106:	08c9      	lsrs	r1, r1, #3
   17108:	0189      	lsls	r1, r1, #6
   1710a:	f041 0102 	orr.w	r1, r1, #2
   1710e:	f00c f94d 	bl	233ac <log_0>
	size_t prov_sd_len = 0;
   17112:	4648      	mov	r0, r9
	size_t sd_space = 31;
   17114:	221f      	movs	r2, #31
   17116:	e00d      	b.n	17134 <bt_mesh_proxy_adv_start+0xa4>
			prov_sd[0].type = BT_DATA_URI;
   17118:	2324      	movs	r3, #36	; 0x24
			prov_sd[0].data_len = uri_len;
   1711a:	f88d 0009 	strb.w	r0, [sp, #9]
			sd_space -= 2 + uri_len;
   1711e:	f1c0 021d 	rsb	r2, r0, #29
			prov_sd[0].type = BT_DATA_URI;
   17122:	f88d 3008 	strb.w	r3, [sp, #8]
			prov_sd[0].data = prov->uri;
   17126:	f8da 3004 	ldr.w	r3, [sl, #4]
   1712a:	9303      	str	r3, [sp, #12]
	if (sd_space > 2 && name_len > 0) {
   1712c:	2a02      	cmp	r2, #2
			prov_sd_len++;
   1712e:	f04f 0001 	mov.w	r0, #1
	if (sd_space > 2 && name_len > 0) {
   17132:	d910      	bls.n	17156 <bt_mesh_proxy_adv_start+0xc6>
   17134:	b17d      	cbz	r5, 17156 <bt_mesh_proxy_adv_start+0xc6>
		sd_space -= 2;
   17136:	3a02      	subs	r2, #2
		if (sd_space < name_len) {
   17138:	4295      	cmp	r5, r2
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   1713a:	eb08 03c0 	add.w	r3, r8, r0, lsl #3
   1713e:	bf8b      	itete	hi
   17140:	2108      	movhi	r1, #8
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   17142:	2209      	movls	r2, #9
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   17144:	f808 1030 	strbhi.w	r1, [r8, r0, lsl #3]
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   17148:	f808 2030 	strbls.w	r2, [r8, r0, lsl #3]
			prov_sd[prov_sd_len].data_len = sd_space;
   1714c:	bf8c      	ite	hi
   1714e:	705a      	strbhi	r2, [r3, #1]
			prov_sd[prov_sd_len].data_len = name_len;
   17150:	705d      	strbls	r5, [r3, #1]
		prov_sd[prov_sd_len].data = name;
   17152:	605f      	str	r7, [r3, #4]
		prov_sd_len++;
   17154:	3001      	adds	r0, #1
		}

		prov_sd_len = gatt_prov_adv_create(prov_sd);

		if (bt_le_adv_start(param, prov_ad, ARRAY_SIZE(prov_ad),
   17156:	9000      	str	r0, [sp, #0]
   17158:	4996      	ldr	r1, [pc, #600]	; (173b4 <bt_mesh_proxy_adv_start+0x324>)
   1715a:	4643      	mov	r3, r8
   1715c:	2203      	movs	r2, #3
   1715e:	4630      	mov	r0, r6
   17160:	f00e fb59 	bl	25816 <bt_le_adv_start>
   17164:	b958      	cbnz	r0, 1717e <bt_mesh_proxy_adv_start+0xee>
				    prov_sd, prov_sd_len) == 0) {
			proxy_adv_enabled = true;
   17166:	4b94      	ldr	r3, [pc, #592]	; (173b8 <bt_mesh_proxy_adv_start+0x328>)
   17168:	2201      	movs	r2, #1
   1716a:	701a      	strb	r2, [r3, #0]

			/* Advertise 60 seconds using fast interval */
			if (prov_fast_adv) {
   1716c:	7823      	ldrb	r3, [r4, #0]
   1716e:	b133      	cbz	r3, 1717e <bt_mesh_proxy_adv_start+0xee>
				prov_fast_adv = false;
   17170:	7020      	strb	r0, [r4, #0]
				return K_SECONDS(60);
   17172:	f64e 2560 	movw	r5, #60000	; 0xea60
		return gatt_proxy_advertise(next_sub());
	}
#endif /* GATT_PROXY */

	return K_FOREVER;
}
   17176:	4628      	mov	r0, r5
   17178:	b006      	add	sp, #24
   1717a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (bt_mesh_is_provisioned()) {
   1717e:	f7f4 fcd1 	bl	bb24 <bt_mesh_is_provisioned>
   17182:	2800      	cmp	r0, #0
   17184:	d08a      	beq.n	1709c <bt_mesh_proxy_adv_start+0xc>
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   17186:	4d8d      	ldr	r5, [pc, #564]	; (173bc <bt_mesh_proxy_adv_start+0x32c>)
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   17188:	4e8d      	ldr	r6, [pc, #564]	; (173c0 <bt_mesh_proxy_adv_start+0x330>)
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   1718a:	682c      	ldr	r4, [r5, #0]
   1718c:	2c00      	cmp	r4, #0
   1718e:	f004 0401 	and.w	r4, r4, #1
   17192:	bfb8      	it	lt
   17194:	4264      	neglt	r4, r4
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   17196:	23e4      	movs	r3, #228	; 0xe4
   17198:	fb03 6304 	mla	r3, r3, r4, r6
   1719c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   171a0:	f8b3 1110 	ldrh.w	r1, [r3, #272]	; 0x110
   171a4:	4291      	cmp	r1, r2
   171a6:	d007      	beq.n	171b8 <bt_mesh_proxy_adv_start+0x128>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   171a8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
   171ac:	2b01      	cmp	r3, #1
   171ae:	d016      	beq.n	171de <bt_mesh_proxy_adv_start+0x14e>
		bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED);
   171b0:	f7fb f894 	bl	122dc <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   171b4:	2802      	cmp	r0, #2
   171b6:	d112      	bne.n	171de <bt_mesh_proxy_adv_start+0x14e>
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   171b8:	682c      	ldr	r4, [r5, #0]
   171ba:	3401      	adds	r4, #1
   171bc:	f004 0401 	and.w	r4, r4, #1
   171c0:	bf48      	it	mi
   171c2:	4264      	negmi	r4, r4
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   171c4:	23e4      	movs	r3, #228	; 0xe4
   171c6:	fb03 6304 	mla	r3, r3, r4, r6
   171ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   171ce:	f8b3 1110 	ldrh.w	r1, [r3, #272]	; 0x110
   171d2:	4291      	cmp	r1, r2
   171d4:	d024      	beq.n	17220 <bt_mesh_proxy_adv_start+0x190>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   171d6:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
   171da:	2b01      	cmp	r3, #1
   171dc:	d11c      	bne.n	17218 <bt_mesh_proxy_adv_start+0x188>
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
   171de:	682b      	ldr	r3, [r5, #0]
   171e0:	3301      	adds	r3, #1
   171e2:	f003 0301 	and.w	r3, r3, #1
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   171e6:	f04f 01e4 	mov.w	r1, #228	; 0xe4
   171ea:	fb01 6404 	mla	r4, r1, r4, r6
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
   171ee:	bf48      	it	mi
   171f0:	425b      	negmi	r3, r3
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   171f2:	34f4      	adds	r4, #244	; 0xf4
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
   171f4:	602b      	str	r3, [r5, #0]
	if (conn_count == CONFIG_BT_MAX_CONN) {
   171f6:	4b73      	ldr	r3, [pc, #460]	; (173c4 <bt_mesh_proxy_adv_start+0x334>)
   171f8:	681b      	ldr	r3, [r3, #0]
   171fa:	2b01      	cmp	r3, #1
   171fc:	f43f af4e 	beq.w	1709c <bt_mesh_proxy_adv_start+0xc>
	if (!sub) {
   17200:	b984      	cbnz	r4, 17224 <bt_mesh_proxy_adv_start+0x194>
   17202:	4b69      	ldr	r3, [pc, #420]	; (173a8 <bt_mesh_proxy_adv_start+0x318>)
   17204:	4969      	ldr	r1, [pc, #420]	; (173ac <bt_mesh_proxy_adv_start+0x31c>)
		BT_WARN("No subnets to advertise on");
   17206:	4870      	ldr	r0, [pc, #448]	; (173c8 <bt_mesh_proxy_adv_start+0x338>)
   17208:	1ac9      	subs	r1, r1, r3
   1720a:	08c9      	lsrs	r1, r1, #3
   1720c:	0189      	lsls	r1, r1, #6
   1720e:	f041 0102 	orr.w	r1, r1, #2
   17212:	f00c f8cb 	bl	233ac <log_0>
   17216:	e741      	b.n	1709c <bt_mesh_proxy_adv_start+0xc>
		bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED);
   17218:	f7fb f860 	bl	122dc <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   1721c:	2802      	cmp	r0, #2
   1721e:	d1de      	bne.n	171de <bt_mesh_proxy_adv_start+0x14e>
	return NULL;
   17220:	2400      	movs	r4, #0
   17222:	e7e8      	b.n	171f6 <bt_mesh_proxy_adv_start+0x166>
	if (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING) {
   17224:	f894 8020 	ldrb.w	r8, [r4, #32]
   17228:	f1b8 0f01 	cmp.w	r8, #1
   1722c:	f040 80a5 	bne.w	1737a <bt_mesh_proxy_adv_start+0x2ea>
   17230:	f011 f936 	bl	284a0 <z_impl_k_uptime_ticks>
   17234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17238:	460d      	mov	r5, r1
   1723a:	fba0 0103 	umull	r0, r1, r0, r3
   1723e:	fb03 1105 	mla	r1, r3, r5, r1
   17242:	0bc3      	lsrs	r3, r0, #15
		u32_t active = k_uptime_get_32() - sub->node_id_start;
   17244:	6a65      	ldr	r5, [r4, #36]	; 0x24
   17246:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1724a:	1b58      	subs	r0, r3, r5
		if (active < NODE_ID_TIMEOUT) {
   1724c:	f242 710f 	movw	r1, #9999	; 0x270f
   17250:	4288      	cmp	r0, r1
   17252:	f04f 0200 	mov.w	r2, #0
   17256:	f200 808d 	bhi.w	17374 <bt_mesh_proxy_adv_start+0x2e4>
	proxy_svc_data[2] = ID_TYPE_NODE;
   1725a:	f8df 9178 	ldr.w	r9, [pc, #376]	; 173d4 <bt_mesh_proxy_adv_start+0x344>
			remaining = NODE_ID_TIMEOUT - active;
   1725e:	f505 551c 	add.w	r5, r5, #9984	; 0x2700
	err = bt_rand(proxy_svc_data + 11, 8);
   17262:	2108      	movs	r1, #8
			remaining = NODE_ID_TIMEOUT - active;
   17264:	3510      	adds	r5, #16
	err = bt_rand(proxy_svc_data + 11, 8);
   17266:	f109 000b 	add.w	r0, r9, #11
			remaining = NODE_ID_TIMEOUT - active;
   1726a:	1aed      	subs	r5, r5, r3
	proxy_svc_data[2] = ID_TYPE_NODE;
   1726c:	f889 8002 	strb.w	r8, [r9, #2]
	err = bt_rand(proxy_svc_data + 11, 8);
   17270:	f010 f930 	bl	274d4 <bt_rand>
	if (err) {
   17274:	4601      	mov	r1, r0
   17276:	2800      	cmp	r0, #0
   17278:	d134      	bne.n	172e4 <bt_mesh_proxy_adv_start+0x254>
	(void)memset(tmp, 0, 6);
   1727a:	2206      	movs	r2, #6
   1727c:	a802      	add	r0, sp, #8
   1727e:	f00d ff32 	bl	250e6 <memset>
	memcpy(tmp + 6, proxy_svc_data + 11, 8);
   17282:	2208      	movs	r2, #8
   17284:	f109 010b 	add.w	r1, r9, #11
   17288:	f10d 000e 	add.w	r0, sp, #14
   1728c:	f00d ff00 	bl	25090 <memcpy>
	sys_put_be16(bt_mesh_primary_addr(), tmp + 14);
   17290:	f7f8 fab0 	bl	f7f4 <bt_mesh_primary_addr>
	err = bt_encrypt_be(sub->keys[sub->kr_flag].identity, tmp, tmp);
   17294:	7fa3      	ldrb	r3, [r4, #30]
   17296:	ba40      	rev16	r0, r0
   17298:	f8ad 0016 	strh.w	r0, [sp, #22]
   1729c:	2059      	movs	r0, #89	; 0x59
   1729e:	fb03 0000 	mla	r0, r3, r0, r0
   172a2:	aa02      	add	r2, sp, #8
   172a4:	4611      	mov	r1, r2
   172a6:	4420      	add	r0, r4
   172a8:	f010 f916 	bl	274d8 <bt_encrypt_be>
	if (err) {
   172ac:	4607      	mov	r7, r0
   172ae:	b9c8      	cbnz	r0, 172e4 <bt_mesh_proxy_adv_start+0x254>
	memcpy(proxy_svc_data + 3, tmp + 8, 8);
   172b0:	2208      	movs	r2, #8
   172b2:	a904      	add	r1, sp, #16
   172b4:	f109 0003 	add.w	r0, r9, #3
   172b8:	f00d feea 	bl	25090 <memcpy>
	err = bt_le_adv_start(&fast_adv_param, node_id_ad,
   172bc:	4943      	ldr	r1, [pc, #268]	; (173cc <bt_mesh_proxy_adv_start+0x33c>)
   172be:	4839      	ldr	r0, [pc, #228]	; (173a4 <bt_mesh_proxy_adv_start+0x314>)
   172c0:	9700      	str	r7, [sp, #0]
   172c2:	463b      	mov	r3, r7
   172c4:	2203      	movs	r2, #3
   172c6:	f00e faa6 	bl	25816 <bt_le_adv_start>
	if (err) {
   172ca:	4601      	mov	r1, r0
   172cc:	2800      	cmp	r0, #0
   172ce:	d04d      	beq.n	1736c <bt_mesh_proxy_adv_start+0x2dc>
   172d0:	4a36      	ldr	r2, [pc, #216]	; (173ac <bt_mesh_proxy_adv_start+0x31c>)
   172d2:	4b35      	ldr	r3, [pc, #212]	; (173a8 <bt_mesh_proxy_adv_start+0x318>)
		BT_WARN("Failed to advertise using Node ID (err %d)", err);
   172d4:	483e      	ldr	r0, [pc, #248]	; (173d0 <bt_mesh_proxy_adv_start+0x340>)
   172d6:	1ad2      	subs	r2, r2, r3
   172d8:	08d2      	lsrs	r2, r2, #3
   172da:	0192      	lsls	r2, r2, #6
   172dc:	f042 0202 	orr.w	r2, r2, #2
   172e0:	f00c f871 	bl	233c6 <log_1>
	if (sub->node_id == BT_MESH_NODE_IDENTITY_STOPPED) {
   172e4:	f894 7020 	ldrb.w	r7, [r4, #32]
   172e8:	b9ef      	cbnz	r7, 17326 <bt_mesh_proxy_adv_start+0x296>
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
   172ea:	7fa1      	ldrb	r1, [r4, #30]
	proxy_svc_data[2] = ID_TYPE_NET;
   172ec:	4839      	ldr	r0, [pc, #228]	; (173d4 <bt_mesh_proxy_adv_start+0x344>)
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
   172ee:	2359      	movs	r3, #89	; 0x59
   172f0:	fb03 4101 	mla	r1, r3, r1, r4
	proxy_svc_data[2] = ID_TYPE_NET;
   172f4:	7087      	strb	r7, [r0, #2]
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
   172f6:	2208      	movs	r2, #8
   172f8:	3151      	adds	r1, #81	; 0x51
   172fa:	3003      	adds	r0, #3
   172fc:	f00d fec8 	bl	25090 <memcpy>
	err = bt_le_adv_start(&slow_adv_param, net_id_ad,
   17300:	4935      	ldr	r1, [pc, #212]	; (173d8 <bt_mesh_proxy_adv_start+0x348>)
   17302:	4827      	ldr	r0, [pc, #156]	; (173a0 <bt_mesh_proxy_adv_start+0x310>)
   17304:	9700      	str	r7, [sp, #0]
   17306:	463b      	mov	r3, r7
   17308:	2203      	movs	r2, #3
   1730a:	f00e fa84 	bl	25816 <bt_le_adv_start>
	if (err) {
   1730e:	4601      	mov	r1, r0
   17310:	b3b0      	cbz	r0, 17380 <bt_mesh_proxy_adv_start+0x2f0>
   17312:	4a26      	ldr	r2, [pc, #152]	; (173ac <bt_mesh_proxy_adv_start+0x31c>)
   17314:	4b24      	ldr	r3, [pc, #144]	; (173a8 <bt_mesh_proxy_adv_start+0x318>)
		BT_WARN("Failed to advertise using Network ID (err %d)", err);
   17316:	4831      	ldr	r0, [pc, #196]	; (173dc <bt_mesh_proxy_adv_start+0x34c>)
   17318:	1ad2      	subs	r2, r2, r3
   1731a:	08d2      	lsrs	r2, r2, #3
   1731c:	0192      	lsls	r2, r2, #6
   1731e:	f042 0202 	orr.w	r2, r2, #2
   17322:	f00c f850 	bl	233c6 <log_1>
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   17326:	f8b6 2110 	ldrh.w	r2, [r6, #272]	; 0x110
   1732a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1732e:	429a      	cmp	r2, r3
   17330:	d02a      	beq.n	17388 <bt_mesh_proxy_adv_start+0x2f8>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   17332:	f896 3114 	ldrb.w	r3, [r6, #276]	; 0x114
   17336:	2b01      	cmp	r3, #1
   17338:	d003      	beq.n	17342 <bt_mesh_proxy_adv_start+0x2b2>
		bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED);
   1733a:	f7fa ffcf 	bl	122dc <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   1733e:	2802      	cmp	r0, #2
   17340:	d022      	beq.n	17388 <bt_mesh_proxy_adv_start+0x2f8>
			count++;
   17342:	2401      	movs	r4, #1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   17344:	f8b6 21f4 	ldrh.w	r2, [r6, #500]	; 0x1f4
   17348:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1734c:	429a      	cmp	r2, r3
   1734e:	f43f af12 	beq.w	17176 <bt_mesh_proxy_adv_start+0xe6>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   17352:	f896 31f8 	ldrb.w	r3, [r6, #504]	; 0x1f8
   17356:	2b01      	cmp	r3, #1
   17358:	d118      	bne.n	1738c <bt_mesh_proxy_adv_start+0x2fc>
	if (subnet_count > 1) {
   1735a:	2c00      	cmp	r4, #0
   1735c:	f43f af0b 	beq.w	17176 <bt_mesh_proxy_adv_start+0xe6>
		if (remaining > max_timeout || remaining < 0) {
   17360:	f240 6382 	movw	r3, #1666	; 0x682
		max_timeout = MAX(max_timeout, K_SECONDS(1));
   17364:	429d      	cmp	r5, r3
   17366:	bf28      	it	cs
   17368:	461d      	movcs	r5, r3
   1736a:	e704      	b.n	17176 <bt_mesh_proxy_adv_start+0xe6>
	proxy_adv_enabled = true;
   1736c:	4b12      	ldr	r3, [pc, #72]	; (173b8 <bt_mesh_proxy_adv_start+0x328>)
   1736e:	f883 8000 	strb.w	r8, [r3]
	return 0;
   17372:	e7b7      	b.n	172e4 <bt_mesh_proxy_adv_start+0x254>
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   17374:	f884 2020 	strb.w	r2, [r4, #32]
	sub->node_id_start = 0U;
   17378:	6262      	str	r2, [r4, #36]	; 0x24
	s32_t remaining = K_FOREVER;
   1737a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1737e:	e7b1      	b.n	172e4 <bt_mesh_proxy_adv_start+0x254>
	proxy_adv_enabled = true;
   17380:	4b0d      	ldr	r3, [pc, #52]	; (173b8 <bt_mesh_proxy_adv_start+0x328>)
   17382:	2201      	movs	r2, #1
   17384:	701a      	strb	r2, [r3, #0]
	return 0;
   17386:	e7ce      	b.n	17326 <bt_mesh_proxy_adv_start+0x296>
		if (advertise_subnet(sub)) {
   17388:	2400      	movs	r4, #0
   1738a:	e7db      	b.n	17344 <bt_mesh_proxy_adv_start+0x2b4>
		bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED);
   1738c:	f7fa ffa6 	bl	122dc <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   17390:	2802      	cmp	r0, #2
   17392:	f43f aef0 	beq.w	17176 <bt_mesh_proxy_adv_start+0xe6>
   17396:	e7e0      	b.n	1735a <bt_mesh_proxy_adv_start+0x2ca>
   17398:	2000230b 	.word	0x2000230b
   1739c:	2000230c 	.word	0x2000230c
   173a0:	000294d0 	.word	0x000294d0
   173a4:	00029478 	.word	0x00029478
   173a8:	00028868 	.word	0x00028868
   173ac:	000289b0 	.word	0x000289b0
   173b0:	0002e99c 	.word	0x0002e99c
   173b4:	000294b8 	.word	0x000294b8
   173b8:	2000230d 	.word	0x2000230d
   173bc:	20000b24 	.word	0x20000b24
   173c0:	20006ab8 	.word	0x20006ab8
   173c4:	20000b20 	.word	0x20000b20
   173c8:	0002e9c3 	.word	0x0002e9c3
   173cc:	000294a0 	.word	0x000294a0
   173d0:	0002e9de 	.word	0x0002e9de
   173d4:	20007349 	.word	0x20007349
   173d8:	00029488 	.word	0x00029488
   173dc:	0002ea09 	.word	0x0002ea09
   173e0:	20007335 	.word	0x20007335

000173e4 <bt_mesh_proxy_adv_stop>:

void bt_mesh_proxy_adv_stop(void)
{
   173e4:	b510      	push	{r4, lr}
	int err;

	BT_DBG("adv_enabled %u", proxy_adv_enabled);

	if (!proxy_adv_enabled) {
   173e6:	4c0a      	ldr	r4, [pc, #40]	; (17410 <bt_mesh_proxy_adv_stop+0x2c>)
   173e8:	7823      	ldrb	r3, [r4, #0]
   173ea:	b183      	cbz	r3, 1740e <bt_mesh_proxy_adv_stop+0x2a>
		return;
	}

	err = bt_le_adv_stop();
   173ec:	f7f0 ff22 	bl	8234 <bt_le_adv_stop>
	if (err) {
   173f0:	4601      	mov	r1, r0
   173f2:	b158      	cbz	r0, 1740c <bt_mesh_proxy_adv_stop+0x28>
   173f4:	4a07      	ldr	r2, [pc, #28]	; (17414 <bt_mesh_proxy_adv_stop+0x30>)
   173f6:	4b08      	ldr	r3, [pc, #32]	; (17418 <bt_mesh_proxy_adv_stop+0x34>)
		BT_ERR("Failed to stop advertising (err %d)", err);
   173f8:	4808      	ldr	r0, [pc, #32]	; (1741c <bt_mesh_proxy_adv_stop+0x38>)
   173fa:	1ad2      	subs	r2, r2, r3
   173fc:	08d2      	lsrs	r2, r2, #3
   173fe:	0192      	lsls	r2, r2, #6
	} else {
		proxy_adv_enabled = false;
	}
}
   17400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to stop advertising (err %d)", err);
   17404:	f042 0201 	orr.w	r2, r2, #1
   17408:	f00b bfdd 	b.w	233c6 <log_1>
		proxy_adv_enabled = false;
   1740c:	7020      	strb	r0, [r4, #0]
}
   1740e:	bd10      	pop	{r4, pc}
   17410:	2000230d 	.word	0x2000230d
   17414:	000289b0 	.word	0x000289b0
   17418:	00028868 	.word	0x00028868
   1741c:	0002ea37 	.word	0x0002ea37

00017420 <bt_mesh_proxy_init>:
	.connected = proxy_connected,
	.disconnected = proxy_disconnected,
};

int bt_mesh_proxy_init(void)
{
   17420:	b508      	push	{r3, lr}

	/* Initialize the client receive buffers */
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		client->buf.size = CLIENT_BUF_SIZE;
   17422:	4807      	ldr	r0, [pc, #28]	; (17440 <bt_mesh_proxy_init+0x20>)
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);

		k_delayed_work_init(&client->sar_timer, proxy_sar_timeout);
   17424:	4907      	ldr	r1, [pc, #28]	; (17444 <bt_mesh_proxy_init+0x24>)
		client->buf.size = CLIENT_BUF_SIZE;
   17426:	2344      	movs	r3, #68	; 0x44
   17428:	87c3      	strh	r3, [r0, #62]	; 0x3e
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   1742a:	4b07      	ldr	r3, [pc, #28]	; (17448 <bt_mesh_proxy_init+0x28>)
   1742c:	6403      	str	r3, [r0, #64]	; 0x40
		k_delayed_work_init(&client->sar_timer, proxy_sar_timeout);
   1742e:	3018      	adds	r0, #24
   17430:	f011 f82a 	bl	28488 <k_delayed_work_init>
	}

	bt_conn_cb_register(&conn_callbacks);
   17434:	4805      	ldr	r0, [pc, #20]	; (1744c <bt_mesh_proxy_init+0x2c>)
   17436:	f7f1 fbd1 	bl	8bdc <bt_conn_cb_register>

	return 0;
}
   1743a:	2000      	movs	r0, #0
   1743c:	bd08      	pop	{r3, pc}
   1743e:	bf00      	nop
   17440:	20006e00 	.word	0x20006e00
   17444:	000166d9 	.word	0x000166d9
   17448:	2000673c 	.word	0x2000673c
   1744c:	20006e44 	.word	0x20006e44

00017450 <mayfly_init>:
#if defined(MAYFLY_UT)
static u8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   17450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
   17454:	4f11      	ldr	r7, [pc, #68]	; (1749c <mayfly_init+0x4c>)
   17456:	f8df a048 	ldr.w	sl, [pc, #72]	; 174a0 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
   1745a:	2404      	movs	r4, #4
	while (callee_id--) {
   1745c:	3c01      	subs	r4, #1
   1745e:	b2e4      	uxtb	r4, r4
   17460:	2cff      	cmp	r4, #255	; 0xff
   17462:	d018      	beq.n	17496 <mayfly_init+0x46>
   17464:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   17468:	ea4f 0984 	mov.w	r9, r4, lsl #2
   1746c:	0136      	lsls	r6, r6, #4
		caller_id = MAYFLY_CALLER_COUNT;
   1746e:	2504      	movs	r5, #4
   17470:	f04f 080c 	mov.w	r8, #12
   17474:	e00a      	b.n	1748c <mayfly_init+0x3c>
			memq_init(&mfl[callee_id][caller_id],
   17476:	fb18 6105 	smlabb	r1, r8, r5, r6
   1747a:	1d0a      	adds	r2, r1, #4
   1747c:	eb05 0009 	add.w	r0, r5, r9
   17480:	443a      	add	r2, r7
   17482:	4439      	add	r1, r7
   17484:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   17488:	f00f feed 	bl	27266 <memq_init>
		while (caller_id--) {
   1748c:	3d01      	subs	r5, #1
   1748e:	b2ed      	uxtb	r5, r5
   17490:	2dff      	cmp	r5, #255	; 0xff
   17492:	d1f0      	bne.n	17476 <mayfly_init+0x26>
   17494:	e7e2      	b.n	1745c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   17496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1749a:	bf00      	nop
   1749c:	20000ba8 	.word	0x20000ba8
   174a0:	20000b28 	.word	0x20000b28

000174a4 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
   174a4:	b4f0      	push	{r4, r5, r6, r7}
   174a6:	2630      	movs	r6, #48	; 0x30
   174a8:	240c      	movs	r4, #12
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   174aa:	434e      	muls	r6, r1
   174ac:	4b0f      	ldr	r3, [pc, #60]	; (174ec <mayfly_enable+0x48>)
{
   174ae:	460f      	mov	r7, r1
		if (mft[callee_id][caller_id].enable_req ==
   174b0:	fb04 6600 	mla	r6, r4, r0, r6
	if (enable) {
   174b4:	b152      	cbz	r2, 174cc <mayfly_enable+0x28>
		if (mft[callee_id][caller_id].enable_req ==
   174b6:	199c      	adds	r4, r3, r6
   174b8:	7a21      	ldrb	r1, [r4, #8]
   174ba:	7a63      	ldrb	r3, [r4, #9]
   174bc:	428b      	cmp	r3, r1
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   174be:	bf04      	itt	eq
   174c0:	3301      	addeq	r3, #1
   174c2:	7223      	strbeq	r3, [r4, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   174c4:	4639      	mov	r1, r7

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   174c6:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
   174c8:	f006 bcbe 	b.w	1de48 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   174cc:	4433      	add	r3, r6
   174ce:	7a9c      	ldrb	r4, [r3, #10]
   174d0:	7ada      	ldrb	r2, [r3, #11]
   174d2:	42a2      	cmp	r2, r4
   174d4:	d107      	bne.n	174e6 <mayfly_enable+0x42>
			mft[callee_id][caller_id].disable_req++;
   174d6:	3201      	adds	r2, #1
   174d8:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   174da:	4b05      	ldr	r3, [pc, #20]	; (174f0 <mayfly_enable+0x4c>)
   174dc:	2201      	movs	r2, #1
   174de:	545a      	strb	r2, [r3, r1]
}
   174e0:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
   174e2:	f006 bcf1 	b.w	1dec8 <mayfly_pend>
}
   174e6:	bcf0      	pop	{r4, r5, r6, r7}
   174e8:	4770      	bx	lr
   174ea:	bf00      	nop
   174ec:	20000ba8 	.word	0x20000ba8
   174f0:	2000230e 	.word	0x2000230e

000174f4 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
   174f4:	b570      	push	{r4, r5, r6, lr}
   174f6:	4606      	mov	r6, r0
   174f8:	460d      	mov	r5, r1
   174fa:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   174fc:	b1a2      	cbz	r2, 17528 <mayfly_enqueue+0x34>
   174fe:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
   17500:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   17502:	7820      	ldrb	r0, [r4, #0]
   17504:	1a80      	subs	r0, r0, r2
	if (state != 0U) {
   17506:	f010 0003 	ands.w	r0, r0, #3
   1750a:	d02c      	beq.n	17566 <mayfly_enqueue+0x72>
		if (chain) {
   1750c:	b31b      	cbz	r3, 17556 <mayfly_enqueue+0x62>
			if (state != 1U) {
   1750e:	2801      	cmp	r0, #1
   17510:	d028      	beq.n	17564 <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
   17512:	3201      	adds	r2, #1
   17514:	b2d2      	uxtb	r2, r2
   17516:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   17518:	4b1c      	ldr	r3, [pc, #112]	; (1758c <mayfly_enqueue+0x98>)
   1751a:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   1751c:	4629      	mov	r1, r5
   1751e:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   17520:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   17522:	f006 fcd1 	bl	1dec8 <mayfly_pend>
   17526:	e01c      	b.n	17562 <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   17528:	f010 fbc7 	bl	27cba <mayfly_prio_is_equal>
   1752c:	2800      	cmp	r0, #0
   1752e:	d0e6      	beq.n	174fe <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   17530:	4629      	mov	r1, r5
   17532:	4630      	mov	r0, r6
   17534:	f006 fca8 	bl	1de88 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   17538:	2800      	cmp	r0, #0
   1753a:	d0e0      	beq.n	174fe <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   1753c:	2330      	movs	r3, #48	; 0x30
   1753e:	220c      	movs	r2, #12
   17540:	436b      	muls	r3, r5
   17542:	fb02 3306 	mla	r3, r2, r6, r3
   17546:	4a12      	ldr	r2, [pc, #72]	; (17590 <mayfly_enqueue+0x9c>)
   17548:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
   1754a:	7a93      	ldrb	r3, [r2, #10]
   1754c:	7ad2      	ldrb	r2, [r2, #11]
   1754e:	1a9b      	subs	r3, r3, r2
   17550:	bf18      	it	ne
   17552:	2301      	movne	r3, #1
   17554:	e7d4      	b.n	17500 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
   17556:	3202      	adds	r2, #2
   17558:	b2d2      	uxtb	r2, r2
   1755a:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
   1755c:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   17560:	4798      	blx	r3

	return 0;
   17562:	2000      	movs	r0, #0
}
   17564:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
   17566:	2b00      	cmp	r3, #0
   17568:	d0f8      	beq.n	1755c <mayfly_enqueue+0x68>
	m->_req = ack + 1;
   1756a:	3201      	adds	r2, #1
   1756c:	b2d2      	uxtb	r2, r2
   1756e:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   17570:	2304      	movs	r3, #4
   17572:	2230      	movs	r2, #48	; 0x30
   17574:	fb12 3205 	smlabb	r2, r2, r5, r3
   17578:	230c      	movs	r3, #12
   1757a:	fb13 2306 	smlabb	r3, r3, r6, r2
   1757e:	4a04      	ldr	r2, [pc, #16]	; (17590 <mayfly_enqueue+0x9c>)
   17580:	6860      	ldr	r0, [r4, #4]
   17582:	441a      	add	r2, r3
   17584:	4621      	mov	r1, r4
   17586:	f00f fe7c 	bl	27282 <memq_enqueue>
   1758a:	e7c5      	b.n	17518 <mayfly_enqueue+0x24>
   1758c:	2000230e 	.word	0x2000230e
   17590:	20000ba8 	.word	0x20000ba8

00017594 <mayfly_run>:
		}
	}
}

void mayfly_run(u8_t callee_id)
{
   17594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t disable = 0U;
	u8_t enable = 0U;
	u8_t caller_id;

	if (!mfp[callee_id]) {
   17598:	4b5b      	ldr	r3, [pc, #364]	; (17708 <mayfly_run+0x174>)
   1759a:	5c1a      	ldrb	r2, [r3, r0]
{
   1759c:	b089      	sub	sp, #36	; 0x24
   1759e:	4604      	mov	r4, r0
	if (!mfp[callee_id]) {
   175a0:	2a00      	cmp	r2, #0
   175a2:	f000 80aa 	beq.w	176fa <mayfly_run+0x166>
		return;
	}
	mfp[callee_id] = 0U;
   175a6:	2700      	movs	r7, #0
   175a8:	541f      	strb	r7, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   175aa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   175ae:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   175b0:	f8df b158 	ldr.w	fp, [pc, #344]	; 1770c <mayfly_run+0x178>
   175b4:	9304      	str	r3, [sp, #16]
   175b6:	2504      	movs	r5, #4
   175b8:	233c      	movs	r3, #60	; 0x3c
   175ba:	fb13 5300 	smlabb	r3, r3, r0, r5
   175be:	445b      	add	r3, fp
   175c0:	9303      	str	r3, [sp, #12]
	u8_t disable = 0U;
   175c2:	9700      	str	r7, [sp, #0]
   175c4:	46da      	mov	sl, fp
	while (caller_id--) {
   175c6:	3d01      	subs	r5, #1
   175c8:	b2ed      	uxtb	r5, r5
   175ca:	2dff      	cmp	r5, #255	; 0xff
   175cc:	d10c      	bne.n	175e8 <mayfly_run+0x54>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   175ce:	9b00      	ldr	r3, [sp, #0]
   175d0:	2b00      	cmp	r3, #0
   175d2:	f000 8092 	beq.w	176fa <mayfly_run+0x166>
   175d6:	2f00      	cmp	r7, #0
   175d8:	f040 808f 	bne.w	176fa <mayfly_run+0x166>
		mayfly_enable_cb(callee_id, callee_id, 0);
   175dc:	463a      	mov	r2, r7
   175de:	4621      	mov	r1, r4
   175e0:	4620      	mov	r0, r4
   175e2:	f006 fc31 	bl	1de48 <mayfly_enable_cb>
   175e6:	e088      	b.n	176fa <mayfly_run+0x166>
		struct mayfly *m = 0;
   175e8:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   175ea:	f04f 080c 	mov.w	r8, #12
		struct mayfly *m = 0;
   175ee:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
   175f0:	fb08 f805 	mul.w	r8, r8, r5
   175f4:	2330      	movs	r3, #48	; 0x30
   175f6:	fb03 8304 	mla	r3, r3, r4, r8
   175fa:	eb0a 0103 	add.w	r1, sl, r3
   175fe:	f85a 0003 	ldr.w	r0, [sl, r3]
   17602:	6849      	ldr	r1, [r1, #4]
   17604:	aa07      	add	r2, sp, #28
   17606:	f00f fe43 	bl	27290 <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
   1760a:	9a04      	ldr	r2, [sp, #16]
   1760c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   17610:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   17614:	4453      	add	r3, sl
   17616:	e9cd 8301 	strd	r8, r3, [sp, #4]
		link = memq_peek(mft[callee_id][caller_id].head,
   1761a:	4606      	mov	r6, r0
		while (link) {
   1761c:	2e00      	cmp	r6, #0
   1761e:	d04e      	beq.n	176be <mayfly_run+0x12a>
			state = (m->_req - m->_ack) & 0x03;
   17620:	9b07      	ldr	r3, [sp, #28]
   17622:	f893 9000 	ldrb.w	r9, [r3]
   17626:	785a      	ldrb	r2, [r3, #1]
   17628:	eba9 0902 	sub.w	r9, r9, r2
   1762c:	f009 0903 	and.w	r9, r9, #3
			if (state == 1U) {
   17630:	f1b9 0f01 	cmp.w	r9, #1
   17634:	d104      	bne.n	17640 <mayfly_run+0xac>
				m->_ack--;
   17636:	3a01      	subs	r2, #1
   17638:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
   1763a:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
   1763e:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
   17640:	f8dd 801c 	ldr.w	r8, [sp, #28]
	req = m->_req;
   17644:	f898 2000 	ldrb.w	r2, [r8]
	if (((req - m->_ack) & 0x03) != 1U) {
   17648:	f898 1001 	ldrb.w	r1, [r8, #1]
	req = m->_req;
   1764c:	b2d3      	uxtb	r3, r2
	if (((req - m->_ack) & 0x03) != 1U) {
   1764e:	1a52      	subs	r2, r2, r1
   17650:	f002 0203 	and.w	r2, r2, #3
   17654:	2a01      	cmp	r2, #1
	req = m->_req;
   17656:	9305      	str	r3, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   17658:	d01f      	beq.n	1769a <mayfly_run+0x106>
		memq_dequeue(mft[callee_id][caller_id].tail,
   1765a:	9b01      	ldr	r3, [sp, #4]
   1765c:	9902      	ldr	r1, [sp, #8]
   1765e:	2030      	movs	r0, #48	; 0x30
   17660:	fb00 3004 	mla	r0, r0, r4, r3
   17664:	4b29      	ldr	r3, [pc, #164]	; (1770c <mayfly_run+0x178>)
   17666:	4418      	add	r0, r3
   17668:	2200      	movs	r2, #0
   1766a:	6840      	ldr	r0, [r0, #4]
   1766c:	f00f fe18 	bl	272a0 <memq_dequeue>
		m->_ack = req;
   17670:	9b05      	ldr	r3, [sp, #20]
		ack = m->_ack;
   17672:	f898 2001 	ldrb.w	r2, [r8, #1]
		m->_ack = req;
   17676:	f888 3001 	strb.w	r3, [r8, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   1767a:	f898 3000 	ldrb.w	r3, [r8]
		m->_link = link;
   1767e:	f8c8 6004 	str.w	r6, [r8, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   17682:	1a9b      	subs	r3, r3, r2
   17684:	f003 0303 	and.w	r3, r3, #3
   17688:	2b01      	cmp	r3, #1
   1768a:	d106      	bne.n	1769a <mayfly_run+0x106>
			m->_ack = ack;
   1768c:	f888 2001 	strb.w	r2, [r8, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   17690:	4641      	mov	r1, r8
   17692:	9a03      	ldr	r2, [sp, #12]
   17694:	4630      	mov	r0, r6
   17696:	f00f fdf4 	bl	27282 <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
   1769a:	9a01      	ldr	r2, [sp, #4]
   1769c:	2330      	movs	r3, #48	; 0x30
   1769e:	fb03 2304 	mla	r3, r3, r4, r2
   176a2:	eb0a 0103 	add.w	r1, sl, r3
   176a6:	f85a 0003 	ldr.w	r0, [sl, r3]
   176aa:	6849      	ldr	r1, [r1, #4]
   176ac:	aa07      	add	r2, sp, #28
   176ae:	f00f fdef 	bl	27290 <memq_peek>
			if (state == 1U) {
   176b2:	f1b9 0f01 	cmp.w	r9, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   176b6:	4606      	mov	r6, r0
			if (state == 1U) {
   176b8:	d1b0      	bne.n	1761c <mayfly_run+0x88>
				if (caller_id || link) {
   176ba:	b9bd      	cbnz	r5, 176ec <mayfly_run+0x158>
   176bc:	b9b0      	cbnz	r0, 176ec <mayfly_run+0x158>
		if (mft[callee_id][caller_id].disable_req !=
   176be:	2230      	movs	r2, #48	; 0x30
   176c0:	4912      	ldr	r1, [pc, #72]	; (1770c <mayfly_run+0x178>)
   176c2:	230c      	movs	r3, #12
   176c4:	4362      	muls	r2, r4
   176c6:	fb03 2205 	mla	r2, r3, r5, r2
   176ca:	440a      	add	r2, r1
   176cc:	7a91      	ldrb	r1, [r2, #10]
   176ce:	7ad0      	ldrb	r0, [r2, #11]
   176d0:	4288      	cmp	r0, r1
   176d2:	d115      	bne.n	17700 <mayfly_run+0x16c>
		if (mft[callee_id][caller_id].enable_req !=
   176d4:	2230      	movs	r2, #48	; 0x30
   176d6:	4362      	muls	r2, r4
   176d8:	fb03 2305 	mla	r3, r3, r5, r2
   176dc:	445b      	add	r3, fp
   176de:	7a1a      	ldrb	r2, [r3, #8]
   176e0:	7a59      	ldrb	r1, [r3, #9]
   176e2:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
   176e4:	bf1c      	itt	ne
   176e6:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
   176e8:	2701      	movne	r7, #1
   176ea:	e76c      	b.n	175c6 <mayfly_run+0x32>
					mfp[callee_id] = 1U;
   176ec:	4b06      	ldr	r3, [pc, #24]	; (17708 <mayfly_run+0x174>)
   176ee:	2201      	movs	r2, #1
					mayfly_pend(callee_id, callee_id);
   176f0:	4621      	mov	r1, r4
   176f2:	4620      	mov	r0, r4
					mfp[callee_id] = 1U;
   176f4:	551a      	strb	r2, [r3, r4]
					mayfly_pend(callee_id, callee_id);
   176f6:	f006 fbe7 	bl	1dec8 <mayfly_pend>
	}
}
   176fa:	b009      	add	sp, #36	; 0x24
   176fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
   17700:	72d1      	strb	r1, [r2, #11]
			disable = 1U;
   17702:	2201      	movs	r2, #1
   17704:	9200      	str	r2, [sp, #0]
   17706:	e7e5      	b.n	176d4 <mayfly_run+0x140>
   17708:	2000230e 	.word	0x2000230e
   1770c:	20000ba8 	.word	0x20000ba8

00017710 <util_rand>:

	return one_count;
}

int util_rand(void *buf, size_t len)
{
   17710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static struct device *dev;

	if (unlikely(!dev)) {
   17714:	4d18      	ldr	r5, [pc, #96]	; (17778 <util_rand+0x68>)
   17716:	682b      	ldr	r3, [r5, #0]
{
   17718:	4606      	mov	r6, r0
   1771a:	460c      	mov	r4, r1
	if (unlikely(!dev)) {
   1771c:	b993      	cbnz	r3, 17744 <util_rand+0x34>
   1771e:	4817      	ldr	r0, [pc, #92]	; (1777c <util_rand+0x6c>)
   17720:	f008 f810 	bl	1f744 <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
   17724:	6028      	str	r0, [r5, #0]
		__ASSERT((dev != NULL),
   17726:	b968      	cbnz	r0, 17744 <util_rand+0x34>
   17728:	4a15      	ldr	r2, [pc, #84]	; (17780 <util_rand+0x70>)
   1772a:	4916      	ldr	r1, [pc, #88]	; (17784 <util_rand+0x74>)
   1772c:	4816      	ldr	r0, [pc, #88]	; (17788 <util_rand+0x78>)
   1772e:	2332      	movs	r3, #50	; 0x32
   17730:	f00b fdcb 	bl	232ca <printk>
   17734:	4911      	ldr	r1, [pc, #68]	; (1777c <util_rand+0x6c>)
   17736:	4815      	ldr	r0, [pc, #84]	; (1778c <util_rand+0x7c>)
   17738:	f00b fdc7 	bl	232ca <printk>
   1773c:	4810      	ldr	r0, [pc, #64]	; (17780 <util_rand+0x70>)
   1773e:	2132      	movs	r1, #50	; 0x32
   17740:	f00b fe06 	bl	23350 <assert_post_action>
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
	}

	return entropy_get_entropy(dev, (u8_t *)buf, len);
   17744:	682d      	ldr	r5, [r5, #0]
   17746:	b2a4      	uxth	r4, r4

static inline int z_impl_entropy_get_entropy(struct device *dev,
					    u8_t *buffer,
					    u16_t length)
{
	const struct entropy_driver_api *api =
   17748:	686f      	ldr	r7, [r5, #4]
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
   1774a:	683b      	ldr	r3, [r7, #0]
   1774c:	b963      	cbnz	r3, 17768 <util_rand+0x58>
   1774e:	4910      	ldr	r1, [pc, #64]	; (17790 <util_rand+0x80>)
   17750:	4a10      	ldr	r2, [pc, #64]	; (17794 <util_rand+0x84>)
   17752:	480d      	ldr	r0, [pc, #52]	; (17788 <util_rand+0x78>)
   17754:	234b      	movs	r3, #75	; 0x4b
   17756:	f00b fdb8 	bl	232ca <printk>
   1775a:	480f      	ldr	r0, [pc, #60]	; (17798 <util_rand+0x88>)
   1775c:	f00b fdb5 	bl	232ca <printk>
   17760:	480c      	ldr	r0, [pc, #48]	; (17794 <util_rand+0x84>)
   17762:	214b      	movs	r1, #75	; 0x4b
   17764:	f00b fdf4 	bl	23350 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   17768:	683b      	ldr	r3, [r7, #0]
   1776a:	4622      	mov	r2, r4
   1776c:	4631      	mov	r1, r6
   1776e:	4628      	mov	r0, r5
}
   17770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17774:	4718      	bx	r3
   17776:	bf00      	nop
   17778:	20000c68 	.word	0x20000c68
   1777c:	0002ea8c 	.word	0x0002ea8c
   17780:	0002ea96 	.word	0x0002ea96
   17784:	0002ead1 	.word	0x0002ead1
   17788:	000297e6 	.word	0x000297e6
   1778c:	0002eae6 	.word	0x0002eae6
   17790:	0002eb67 	.word	0x0002eb67
   17794:	0002eb3e 	.word	0x0002eb3e
   17798:	0002eb87 	.word	0x0002eb87

0001779c <ticker_job_list_insert>:
 *                    handle user operation inserts
 * @internal
 */
static inline void ticker_job_list_insert(struct ticker_instance *instance,
					  u8_t insert_head)
{
   1779c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177a0:	b08f      	sub	sp, #60	; 0x3c
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	node = &instance->nodes[0];
   177a2:	6803      	ldr	r3, [r0, #0]
   177a4:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   177a6:	6843      	ldr	r3, [r0, #4]
   177a8:	930c      	str	r3, [sp, #48]	; 0x30
	count_user = instance->count_user;
   177aa:	7a43      	ldrb	r3, [r0, #9]
   177ac:	9301      	str	r3, [sp, #4]
{
   177ae:	4681      	mov	r9, r0
   177b0:	468b      	mov	fp, r1

	/* Iterate through all user ids */
	while (count_user--) {
   177b2:	9b01      	ldr	r3, [sp, #4]
   177b4:	3b01      	subs	r3, #1
   177b6:	b2db      	uxtb	r3, r3
   177b8:	2bff      	cmp	r3, #255	; 0xff
   177ba:	9301      	str	r3, [sp, #4]
   177bc:	d102      	bne.n	177c4 <ticker_job_list_insert+0x28>
			if (user_op) {
				ticker_job_op_cb(user_op, status);
			}
		}
	}
}
   177be:	b00f      	add	sp, #60	; 0x3c
   177c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		user = &users[count_user];
   177c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   177c6:	9a01      	ldr	r2, [sp, #4]
   177c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   177cc:	9302      	str	r3, [sp, #8]
		user_ops = (void *)&user->user_op[0];
   177ce:	685b      	ldr	r3, [r3, #4]
   177d0:	9305      	str	r3, [sp, #20]
		user_ops_first = user->first;
   177d2:	9b02      	ldr	r3, [sp, #8]
   177d4:	f893 a001 	ldrb.w	sl, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
   177d8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   177dc:	d044      	beq.n	17868 <ticker_job_list_insert+0xcc>
				ticker = &node[id_insert];
   177de:	fa0f f38b 	sxth.w	r3, fp
   177e2:	9a03      	ldr	r2, [sp, #12]
   177e4:	f8cd b000 	str.w	fp, [sp]
   177e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   177ec:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				insert_head = ticker->next;
   177f0:	f812 b033 	ldrb.w	fp, [r2, r3, lsl #3]
				user_op = NULL;
   177f4:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->nodes[0];
   177f6:	f8d9 3000 	ldr.w	r3, [r9]
   177fa:	9306      	str	r3, [sp, #24]
	ticker->next = TICKER_NULL;
   177fc:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
   177fe:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
   17800:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   17802:	8be3      	ldrh	r3, [r4, #30]
   17804:	4293      	cmp	r3, r2
   17806:	f240 8092 	bls.w	1792e <ticker_job_list_insert+0x192>
		skip = ticker->lazy_current -
   1780a:	1a9b      	subs	r3, r3, r2
   1780c:	b29b      	uxth	r3, r3
		skip = 0U;
   1780e:	9307      	str	r3, [sp, #28]
	ticker_new = &node[id];
   17810:	f9bd 3000 	ldrsh.w	r3, [sp]
   17814:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   17818:	00db      	lsls	r3, r3, #3
   1781a:	930d      	str	r3, [sp, #52]	; 0x34
   1781c:	e0e8      	b.n	179f0 <ticker_job_list_insert+0x254>
				user_op = &user_ops[user_ops_first];
   1781e:	9a05      	ldr	r2, [sp, #20]
   17820:	eb0a 054a 	add.w	r5, sl, sl, lsl #1
   17824:	012b      	lsls	r3, r5, #4
   17826:	eb02 1505 	add.w	r5, r2, r5, lsl #4
				first = user_ops_first + 1;
   1782a:	f10a 0201 	add.w	r2, sl, #1
   1782e:	fa5f fa82 	uxtb.w	sl, r2
				if (first == user->count_user_op) {
   17832:	9a02      	ldr	r2, [sp, #8]
   17834:	7812      	ldrb	r2, [r2, #0]
					first = 0U;
   17836:	4552      	cmp	r2, sl
   17838:	bf08      	it	eq
   1783a:	f04f 0a00 	moveq.w	sl, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1783e:	9a05      	ldr	r2, [sp, #20]
   17840:	5cd3      	ldrb	r3, [r2, r3]
   17842:	2b04      	cmp	r3, #4
   17844:	d110      	bne.n	17868 <ticker_job_list_insert+0xcc>
				id_insert = user_op->id;
   17846:	786b      	ldrb	r3, [r5, #1]
   17848:	9300      	str	r3, [sp, #0]
				ticker = &node[id_insert];
   1784a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   1784e:	9b03      	ldr	r3, [sp, #12]
   17850:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req -
   17854:	7863      	ldrb	r3, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   17856:	78a2      	ldrb	r2, [r4, #2]
				if (((ticker->req -
   17858:	1a9b      	subs	r3, r3, r2
   1785a:	f013 0fff 	tst.w	r3, #255	; 0xff
   1785e:	d008      	beq.n	17872 <ticker_job_list_insert+0xd6>
					ticker_job_op_cb(user_op,
   17860:	2101      	movs	r1, #1
   17862:	4628      	mov	r0, r5
   17864:	f00f fd88 	bl	27378 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   17868:	9b02      	ldr	r3, [sp, #8]
   1786a:	789b      	ldrb	r3, [r3, #2]
   1786c:	4553      	cmp	r3, sl
   1786e:	d1d6      	bne.n	1781e <ticker_job_list_insert+0x82>
   17870:	e79f      	b.n	177b2 <ticker_job_list_insert+0x16>
	LL_ASSERT(start->lazy != TICKER_LAZY_MUST_EXPIRE);
   17872:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   17874:	f8d9 6014 	ldr.w	r6, [r9, #20]
	LL_ASSERT(start->lazy != TICKER_LAZY_MUST_EXPIRE);
   17878:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1787c:	429a      	cmp	r2, r3
   1787e:	d10c      	bne.n	1789a <ticker_job_list_insert+0xfe>
   17880:	4a7c      	ldr	r2, [pc, #496]	; (17a74 <ticker_job_list_insert+0x2d8>)
   17882:	497d      	ldr	r1, [pc, #500]	; (17a78 <ticker_job_list_insert+0x2dc>)
   17884:	487d      	ldr	r0, [pc, #500]	; (17a7c <ticker_job_list_insert+0x2e0>)
   17886:	f44f 63bb 	mov.w	r3, #1496	; 0x5d8
   1788a:	f00b fd1e 	bl	232ca <printk>
   1788e:	4040      	eors	r0, r0
   17890:	f380 8811 	msr	BASEPRI, r0
   17894:	f04f 0003 	mov.w	r0, #3
   17898:	df02      	svc	2
	ticker->ticks_periodic = start->ticks_periodic;
   1789a:	68eb      	ldr	r3, [r5, #12]
   1789c:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1789e:	692b      	ldr	r3, [r5, #16]
   178a0:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   178a2:	8aab      	ldrh	r3, [r5, #20]
   178a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   178a8:	4293      	cmp	r3, r2
   178aa:	bf08      	it	eq
   178ac:	2300      	moveq	r3, #0
   178ae:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   178b0:	69ab      	ldr	r3, [r5, #24]
   178b2:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   178b4:	69eb      	ldr	r3, [r5, #28]
   178b6:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   178b8:	6a2b      	ldr	r3, [r5, #32]
   178ba:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0U;
   178bc:	2700      	movs	r7, #0
	ticker->ticks_to_expire = start->ticks_first;
   178be:	68ab      	ldr	r3, [r5, #8]
   178c0:	60a3      	str	r3, [r4, #8]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   178c2:	686a      	ldr	r2, [r5, #4]
	ticker->ticks_to_expire_minus = 0U;
   178c4:	6167      	str	r7, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   178c6:	4631      	mov	r1, r6
   178c8:	4620      	mov	r0, r4
   178ca:	f00f fd37 	bl	2733c <ticks_to_expire_prep>
	ticker->force = 1U;
   178ce:	2301      	movs	r3, #1
	ticker->remainder_current = 0U;
   178d0:	6267      	str	r7, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   178d2:	83e7      	strh	r7, [r4, #30]
	ticker->force = 1U;
   178d4:	70e3      	strb	r3, [r4, #3]
}
   178d6:	e78e      	b.n	177f6 <ticker_job_list_insert+0x5a>
		if (ticker->ticks_periodic != 0U) {
   178d8:	6860      	ldr	r0, [r4, #4]
   178da:	2800      	cmp	r0, #0
   178dc:	f000 80c7 	beq.w	17a6e <ticker_job_list_insert+0x2d2>
	ticker->remainder_current += ticker->remainder_periodic;
   178e0:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
   178e4:	4b66      	ldr	r3, [pc, #408]	; (17a80 <ticker_job_list_insert+0x2e4>)
	ticker->remainder_current += ticker->remainder_periodic;
   178e6:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   178e8:	4966      	ldr	r1, [pc, #408]	; (17a84 <ticker_job_list_insert+0x2e8>)
   178ea:	18d3      	adds	r3, r2, r3
   178ec:	428b      	cmp	r3, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   178ee:	bf9c      	itt	ls
   178f0:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   178f4:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
   178f8:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
   178fa:	bf8b      	itete	hi
   178fc:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   178fe:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
   17902:	2200      	movhi	r2, #0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   17904:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
   17906:	4403      	add	r3, r0
		return 1;
   17908:	bf98      	it	ls
   1790a:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
   1790c:	4413      	add	r3, r2
			ticker->lazy_current++;
   1790e:	8be2      	ldrh	r2, [r4, #30]
   17910:	3201      	adds	r2, #1
   17912:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
   17914:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
   17916:	4293      	cmp	r3, r2
   17918:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
   1791c:	bf89      	itett	hi
   1791e:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
   17920:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
   17922:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0U;
   17924:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
   17926:	bf9c      	itt	ls
   17928:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0U;
   1792a:	60a1      	strls	r1, [r4, #8]
   1792c:	e060      	b.n	179f0 <ticker_job_list_insert+0x254>
		skip = 0U;
   1792e:	2300      	movs	r3, #0
   17930:	e76d      	b.n	1780e <ticker_job_list_insert+0x72>
		if (ticker_current->ticks_slot != 0U) {
   17932:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
   17934:	1a40      	subs	r0, r0, r1
		if (ticker_current->ticks_slot != 0U) {
   17936:	b946      	cbnz	r6, 1794a <ticker_job_list_insert+0x1ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
   17938:	4571      	cmp	r1, lr
   1793a:	d201      	bcs.n	17940 <ticker_job_list_insert+0x1a4>
				ticks_slot_previous -= ticks_to_expire_current;
   1793c:	ebae 0601 	sub.w	r6, lr, r1
		current = ticker_current->next;
   17940:	9304      	str	r3, [sp, #16]
   17942:	46b6      	mov	lr, r6
   17944:	f812 3038 	ldrb.w	r3, [r2, r8, lsl #3]
   17948:	e05f      	b.n	17a0a <ticker_job_list_insert+0x26e>
   1794a:	461f      	mov	r7, r3
   1794c:	e7f8      	b.n	17940 <ticker_job_list_insert+0x1a4>
		ticker = &node[ticker_id_head];
   1794e:	b20e      	sxth	r6, r1
   17950:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   17954:	960b      	str	r6, [sp, #44]	; 0x2c
   17956:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   1795a:	9609      	str	r6, [sp, #36]	; 0x24
		ticks_to_expire = ticker->ticks_to_expire;
   1795c:	68b6      	ldr	r6, [r6, #8]
   1795e:	960a      	str	r6, [sp, #40]	; 0x28
		if (ticks_slot <= ticks_to_expire) {
   17960:	4546      	cmp	r6, r8
   17962:	d20a      	bcs.n	1797a <ticker_job_list_insert+0x1de>
		if (ticker->ticks_slot) {
   17964:	9e09      	ldr	r6, [sp, #36]	; 0x24
   17966:	69b6      	ldr	r6, [r6, #24]
   17968:	2e00      	cmp	r6, #0
   1796a:	d15f      	bne.n	17a2c <ticker_job_list_insert+0x290>
		ticks_slot -= ticks_to_expire;
   1796c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1796e:	eba8 0801 	sub.w	r8, r8, r1
		ticker_id_head = ticker->next;
   17972:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17974:	f812 1031 	ldrb.w	r1, [r2, r1, lsl #3]
   17978:	e056      	b.n	17a28 <ticker_job_list_insert+0x28c>
			return TICKER_NULL;
   1797a:	21ff      	movs	r1, #255	; 0xff
   1797c:	e056      	b.n	17a2c <ticker_job_list_insert+0x290>
	if ((ticker_new->ticks_slot == 0U) ||
   1797e:	4570      	cmp	r0, lr
   17980:	d30d      	bcc.n	1799e <ticker_job_list_insert+0x202>
	    ((ticks_slot_previous <= ticks_to_expire) &&
   17982:	29ff      	cmp	r1, #255	; 0xff
   17984:	d055      	beq.n	17a32 <ticker_job_list_insert+0x296>
	while (id_insert !=
   17986:	9b00      	ldr	r3, [sp, #0]
   17988:	428b      	cmp	r3, r1
   1798a:	d10e      	bne.n	179aa <ticker_job_list_insert+0x20e>
   1798c:	e064      	b.n	17a58 <ticker_job_list_insert+0x2bc>
			node[previous].next = id;
   1798e:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
   17992:	9e00      	ldr	r6, [sp, #0]
   17994:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   17998:	f802 6031 	strb.w	r6, [r2, r1, lsl #3]
   1799c:	e053      	b.n	17a46 <ticker_job_list_insert+0x2aa>
	while (id_insert !=
   1799e:	9b00      	ldr	r3, [sp, #0]
   179a0:	42bb      	cmp	r3, r7
   179a2:	d059      	beq.n	17a58 <ticker_job_list_insert+0x2bc>
		if (id_collide != TICKER_NULL) {
   179a4:	2fff      	cmp	r7, #255	; 0xff
   179a6:	d097      	beq.n	178d8 <ticker_job_list_insert+0x13c>
   179a8:	4639      	mov	r1, r7
			struct ticker_node *ticker_collide = &node[id_collide];
   179aa:	9b06      	ldr	r3, [sp, #24]
   179ac:	b20f      	sxth	r7, r1
   179ae:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   179b2:	eb03 06c7 	add.w	r6, r3, r7, lsl #3
			if (ticker_collide->lazy_current >
   179b6:	8bf2      	ldrh	r2, [r6, #30]
			    ticker_collide->lazy_periodic) {
   179b8:	8bb3      	ldrh	r3, [r6, #28]
			if (ticker_collide->lazy_current >
   179ba:	429a      	cmp	r2, r3
				skip_collide = ticker_collide->lazy_current -
   179bc:	bf88      	it	hi
   179be:	1ad2      	subhi	r2, r2, r3
			if (ticker_collide->ticks_periodic &&
   179c0:	6873      	ldr	r3, [r6, #4]
				skip_collide = ticker_collide->lazy_current -
   179c2:	bf8c      	ite	hi
   179c4:	b292      	uxthhi	r2, r2
				skip_collide = 0U;
   179c6:	2200      	movls	r2, #0
			if (ticker_collide->ticks_periodic &&
   179c8:	2b00      	cmp	r3, #0
   179ca:	d085      	beq.n	178d8 <ticker_job_list_insert+0x13c>
   179cc:	9b07      	ldr	r3, [sp, #28]
   179ce:	429a      	cmp	r2, r3
   179d0:	d882      	bhi.n	178d8 <ticker_job_list_insert+0x13c>
			    skip_collide <= skip &&
   179d2:	78f2      	ldrb	r2, [r6, #3]
   179d4:	78e3      	ldrb	r3, [r4, #3]
   179d6:	429a      	cmp	r2, r3
   179d8:	f4bf af7e 	bcs.w	178d8 <ticker_job_list_insert+0x13c>
					ticker_dequeue(instance, id_collide);
   179dc:	4648      	mov	r0, r9
   179de:	f00f fc81 	bl	272e4 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
   179e2:	78b3      	ldrb	r3, [r6, #2]
   179e4:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
   179e6:	9b06      	ldr	r3, [sp, #24]
				ticker_collide->ticks_to_expire =
   179e8:	60b0      	str	r0, [r6, #8]
				ticker_collide->next = *insert_head;
   179ea:	f803 b037 	strb.w	fp, [r3, r7, lsl #3]
				continue;
   179ee:	468b      	mov	fp, r1
	ticker_new = &node[id];
   179f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	node = &instance->nodes[0];
   179f2:	f8d9 2000 	ldr.w	r2, [r9]
	ticks_slot_previous = instance->ticks_slot_previous;
   179f6:	f8d9 e018 	ldr.w	lr, [r9, #24]
	ticker_new = &node[id];
   179fa:	eb02 0c03 	add.w	ip, r2, r3
	current = instance->ticker_id_head;
   179fe:	f899 301d 	ldrb.w	r3, [r9, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
   17a02:	f8dc 0008 	ldr.w	r0, [ip, #8]
	previous = current;
   17a06:	9304      	str	r3, [sp, #16]
	collide = ticker_id_slot_previous = TICKER_NULL;
   17a08:	27ff      	movs	r7, #255	; 0xff
	while ((current != TICKER_NULL) &&
   17a0a:	2bff      	cmp	r3, #255	; 0xff
   17a0c:	d006      	beq.n	17a1c <ticker_job_list_insert+0x280>
		 (ticker_current = &node[current])->ticks_to_expire))) {
   17a0e:	eb03 0883 	add.w	r8, r3, r3, lsl #2
   17a12:	eb02 06c8 	add.w	r6, r2, r8, lsl #3
		(ticks_to_expire_current =
   17a16:	68b1      	ldr	r1, [r6, #8]
	while ((current != TICKER_NULL) &&
   17a18:	4288      	cmp	r0, r1
   17a1a:	d88a      	bhi.n	17932 <ticker_job_list_insert+0x196>
				     ticks_to_expire + ticker_new->ticks_slot);
   17a1c:	f8dc 1018 	ldr.w	r1, [ip, #24]
   17a20:	9108      	str	r1, [sp, #32]
	collide = ticker_by_slot_get(&node[0], current,
   17a22:	eb00 0801 	add.w	r8, r0, r1
	while (ticker_id_head != TICKER_NULL) {
   17a26:	4619      	mov	r1, r3
   17a28:	29ff      	cmp	r1, #255	; 0xff
   17a2a:	d190      	bne.n	1794e <ticker_job_list_insert+0x1b2>
	if ((ticker_new->ticks_slot == 0U) ||
   17a2c:	9e08      	ldr	r6, [sp, #32]
   17a2e:	2e00      	cmp	r6, #0
   17a30:	d1a5      	bne.n	1797e <ticker_job_list_insert+0x1e2>
		if (previous == current) {
   17a32:	9904      	ldr	r1, [sp, #16]
		ticker_new->ticks_to_expire = ticks_to_expire;
   17a34:	f8cc 0008 	str.w	r0, [ip, #8]
		if (previous == current) {
   17a38:	428b      	cmp	r3, r1
		ticker_new->next = current;
   17a3a:	f88c 3000 	strb.w	r3, [ip]
		if (previous == current) {
   17a3e:	d1a6      	bne.n	1798e <ticker_job_list_insert+0x1f2>
			instance->ticker_id_head = id;
   17a40:	9900      	ldr	r1, [sp, #0]
   17a42:	f889 101d 	strb.w	r1, [r9, #29]
		if (current != TICKER_NULL) {
   17a46:	2bff      	cmp	r3, #255	; 0xff
   17a48:	d006      	beq.n	17a58 <ticker_job_list_insert+0x2bc>
			node[current].ticks_to_expire -= ticks_to_expire;
   17a4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   17a4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   17a52:	689a      	ldr	r2, [r3, #8]
   17a54:	1a10      	subs	r0, r2, r0
   17a56:	6098      	str	r0, [r3, #8]
	ticker->req = ticker->ack + 1;
   17a58:	78a3      	ldrb	r3, [r4, #2]
   17a5a:	3301      	adds	r3, #1
   17a5c:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   17a5e:	2100      	movs	r1, #0
			if (user_op) {
   17a60:	2d00      	cmp	r5, #0
   17a62:	f43f aeb9 	beq.w	177d8 <ticker_job_list_insert+0x3c>
				ticker_job_op_cb(user_op, status);
   17a66:	4628      	mov	r0, r5
   17a68:	f00f fc86 	bl	27378 <ticker_job_op_cb>
   17a6c:	e6b4      	b.n	177d8 <ticker_job_list_insert+0x3c>
			return TICKER_STATUS_FAILURE;
   17a6e:	2101      	movs	r1, #1
   17a70:	e7f6      	b.n	17a60 <ticker_job_list_insert+0x2c4>
   17a72:	bf00      	nop
   17a74:	0002ebad 	.word	0x0002ebad
   17a78:	0002ebec 	.word	0x0002ebec
   17a7c:	000297e6 	.word	0x000297e6
   17a80:	ff172b5a 	.word	0xff172b5a
   17a84:	7f172b59 	.word	0x7f172b59

00017a88 <ticker_job>:
 * @param param Pointer to ticker instance
 *
 * @internal
 */
void ticker_job(void *param)
{
   17a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
   17a8c:	7fc2      	ldrb	r2, [r0, #31]
{
   17a8e:	b08b      	sub	sp, #44	; 0x2c
   17a90:	4604      	mov	r4, r0
	if (instance->worker_trigger) {
   17a92:	2a00      	cmp	r2, #0
   17a94:	f040 826c 	bne.w	17f70 <ticker_job+0x4e8>
		return;
	}
	instance->job_guard = 1U;

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
   17a98:	6943      	ldr	r3, [r0, #20]
   17a9a:	9304      	str	r3, [sp, #16]
	instance->job_guard = 1U;
   17a9c:	2101      	movs	r1, #1

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   17a9e:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
   17aa0:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   17aa2:	7ac0      	ldrb	r0, [r0, #11]
   17aa4:	4298      	cmp	r0, r3
   17aa6:	d06d      	beq.n	17b84 <ticker_job+0xfc>
	u8_t idx = *ticks_elapsed_index + 1;
   17aa8:	440b      	add	r3, r1
   17aaa:	b2db      	uxtb	r3, r3
		idx = 0U;
   17aac:	2b02      	cmp	r3, #2
   17aae:	bf08      	it	eq
   17ab0:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   17ab2:	72a3      	strb	r3, [r4, #10]
		ticker_next_elapsed(&instance->ticks_elapsed_first);

		ticks_elapsed =
   17ab4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;

		flag_elapsed = 1U;
   17ab8:	9100      	str	r1, [sp, #0]
		ticks_elapsed =
   17aba:	68df      	ldr	r7, [r3, #12]
		instance->ticks_current += ticks_elapsed;
   17abc:	9b04      	ldr	r3, [sp, #16]
   17abe:	443b      	add	r3, r7
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   17ac0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   17ac4:	6163      	str	r3, [r4, #20]
	flag_compare_update = 0U;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
   17ac6:	7f63      	ldrb	r3, [r4, #29]
   17ac8:	9301      	str	r3, [sp, #4]
	node = &instance->nodes[0];
   17aca:	6823      	ldr	r3, [r4, #0]
   17acc:	9305      	str	r3, [sp, #20]
	users = &instance->users[0];
   17ace:	6863      	ldr	r3, [r4, #4]
   17ad0:	9309      	str	r3, [sp, #36]	; 0x24
	count_user = instance->count_user;
   17ad2:	7a63      	ldrb	r3, [r4, #9]
   17ad4:	9302      	str	r3, [sp, #8]
	pending = 0U;
   17ad6:	2300      	movs	r3, #0
   17ad8:	9303      	str	r3, [sp, #12]
	insert_head = TICKER_NULL;
   17ada:	f04f 0bff 	mov.w	fp, #255	; 0xff
	while (count_user--) {
   17ade:	9b02      	ldr	r3, [sp, #8]
   17ae0:	3b01      	subs	r3, #1
   17ae2:	b2db      	uxtb	r3, r3
   17ae4:	2bff      	cmp	r3, #255	; 0xff
   17ae6:	9302      	str	r3, [sp, #8]
   17ae8:	d14f      	bne.n	17b8a <ticker_job+0x102>

	/* Manage user operations (updates and deletions) in ticker list */
	pending = ticker_job_list_manage(instance, ticks_elapsed, &insert_head);

	/* Detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
   17aea:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
   17aec:	9a01      	ldr	r2, [sp, #4]
   17aee:	ebb3 0802 	subs.w	r8, r3, r2
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
   17af2:	9b00      	ldr	r3, [sp, #0]
		flag_compare_update = 1U;
   17af4:	bf18      	it	ne
   17af6:	f04f 0801 	movne.w	r8, #1
	if (flag_elapsed) {
   17afa:	b1bb      	cbz	r3, 17b2c <ticker_job+0xa4>
	node = &instance->nodes[0];
   17afc:	6823      	ldr	r3, [r4, #0]
   17afe:	9302      	str	r3, [sp, #8]
	ticks_expired = 0U;
   17b00:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
   17b04:	7f65      	ldrb	r5, [r4, #29]
   17b06:	2dff      	cmp	r5, #255	; 0xff
   17b08:	d00b      	beq.n	17b22 <ticker_job+0x9a>
		ticker = &node[id_expired];
   17b0a:	9b02      	ldr	r3, [sp, #8]
   17b0c:	b22e      	sxth	r6, r5
   17b0e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   17b12:	eb03 00c6 	add.w	r0, r3, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
   17b16:	6883      	ldr	r3, [r0, #8]
		if (ticks_elapsed < ticks_to_expire) {
   17b18:	42bb      	cmp	r3, r7
   17b1a:	f240 813c 	bls.w	17d96 <ticker_job+0x30e>
			ticker->ticks_to_expire -= ticks_elapsed;
   17b1e:	1bdf      	subs	r7, r3, r7
   17b20:	6087      	str	r7, [r0, #8]
		ticker_job_worker_bh(instance, ticks_previous, ticks_elapsed,
				     &insert_head);

		/* Detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
			flag_compare_update = 1U;
   17b22:	e9dd 3200 	ldrd	r3, r2, [sp]
   17b26:	4295      	cmp	r5, r2
   17b28:	bf18      	it	ne
   17b2a:	4698      	movne	r8, r3
			flag_compare_update = 1U;
		}
#endif /* CONFIG_BT_TICKER_EXT */
	} else {
		/* Handle insertions */
		ticker_job_list_insert(instance, insert_head);
   17b2c:	4659      	mov	r1, fp
   17b2e:	4620      	mov	r0, r4
   17b30:	f7ff fe34 	bl	1779c <ticker_job_list_insert>
	}

	/* Detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
   17b34:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
   17b36:	9a01      	ldr	r2, [sp, #4]
   17b38:	4293      	cmp	r3, r2
   17b3a:	bf18      	it	ne
   17b3c:	f04f 0801 	movne.w	r8, #1
	}

	/* Process any list inquiries */
	if (!pending) {
   17b40:	9b03      	ldr	r3, [sp, #12]
   17b42:	2b00      	cmp	r3, #0
   17b44:	f000 8173 	beq.w	17e2e <ticker_job+0x3a6>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0U;
   17b48:	2300      	movs	r3, #0
   17b4a:	77a3      	strb	r3, [r4, #30]

	/* update compare if head changed */
	if (flag_compare_update) {
   17b4c:	f1b8 0f00 	cmp.w	r8, #0
   17b50:	d00a      	beq.n	17b68 <ticker_job+0xe0>
	if (instance->ticker_id_head == TICKER_NULL) {
   17b52:	7f63      	ldrb	r3, [r4, #29]
   17b54:	2bff      	cmp	r3, #255	; 0xff
   17b56:	f040 81c2 	bne.w	17ede <ticker_job+0x456>
		if (cntr_stop() == 0) {
   17b5a:	f005 fdc9 	bl	1d6f0 <cntr_stop>
   17b5e:	b918      	cbnz	r0, 17b68 <ticker_job+0xe0>
			instance->ticks_slot_previous = 0U;
   17b60:	61a0      	str	r0, [r4, #24]
			instance->ticks_current = cntr_cnt_get();
   17b62:	f005 fdeb 	bl	1d73c <cntr_cnt_get>
   17b66:	6160      	str	r0, [r4, #20]
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
   17b68:	7fe3      	ldrb	r3, [r4, #31]
   17b6a:	2b00      	cmp	r3, #0
   17b6c:	f000 8200 	beq.w	17f70 <ticker_job+0x4e8>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   17b70:	6a65      	ldr	r5, [r4, #36]	; 0x24
   17b72:	4623      	mov	r3, r4
   17b74:	2201      	movs	r2, #1
   17b76:	2103      	movs	r1, #3
   17b78:	2004      	movs	r0, #4
   17b7a:	46ac      	mov	ip, r5
				   instance);
	}

	DEBUG_TICKER_JOB(0);
}
   17b7c:	b00b      	add	sp, #44	; 0x2c
   17b7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   17b82:	4760      	bx	ip
		flag_elapsed = 0U;
   17b84:	9200      	str	r2, [sp, #0]
		ticks_elapsed = 0U;
   17b86:	4617      	mov	r7, r2
   17b88:	e79d      	b.n	17ac6 <ticker_job+0x3e>
		user = &users[count_user];
   17b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17b8c:	9a02      	ldr	r2, [sp, #8]
   17b8e:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   17b92:	f8da 3004 	ldr.w	r3, [sl, #4]
   17b96:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
   17b98:	f89a 1003 	ldrb.w	r1, [sl, #3]
   17b9c:	f89a 8002 	ldrb.w	r8, [sl, #2]
   17ba0:	4588      	cmp	r8, r1
   17ba2:	d09c      	beq.n	17ade <ticker_job+0x56>
			user_op = &user_ops[user->middle];
   17ba4:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
   17ba6:	f89a 0000 	ldrb.w	r0, [sl]
			user_op = &user_ops[user->middle];
   17baa:	eb08 0648 	add.w	r6, r8, r8, lsl #1
   17bae:	0132      	lsls	r2, r6, #4
   17bb0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
			middle = user->middle + 1;
   17bb4:	f108 0301 	add.w	r3, r8, #1
   17bb8:	b2db      	uxtb	r3, r3
				middle = 0U;
   17bba:	4298      	cmp	r0, r3
   17bbc:	bf08      	it	eq
   17bbe:	2300      	moveq	r3, #0
			user->middle = middle;
   17bc0:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   17bc4:	9b06      	ldr	r3, [sp, #24]
   17bc6:	5c9a      	ldrb	r2, [r3, r2]
   17bc8:	2a04      	cmp	r2, #4
   17bca:	d9e7      	bls.n	17b9c <ticker_job+0x114>
			ticker = &node[user_op->id];
   17bcc:	7871      	ldrb	r1, [r6, #1]
   17bce:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   17bd2:	9308      	str	r3, [sp, #32]
   17bd4:	9808      	ldr	r0, [sp, #32]
   17bd6:	9b05      	ldr	r3, [sp, #20]
   17bd8:	eb03 05c0 	add.w	r5, r3, r0, lsl #3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   17bdc:	2a07      	cmp	r2, #7
			state = (ticker->req - ticker->ack) & 0xff;
   17bde:	786b      	ldrb	r3, [r5, #1]
   17be0:	78a8      	ldrb	r0, [r5, #2]
   17be2:	eba3 0300 	sub.w	r3, r3, r0
   17be6:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   17be8:	d80e      	bhi.n	17c08 <ticker_job+0x180>
   17bea:	b16b      	cbz	r3, 17c08 <ticker_job+0x180>
			    (state == 0U) ||
   17bec:	2a05      	cmp	r2, #5
   17bee:	d110      	bne.n	17c12 <ticker_job+0x18a>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   17bf0:	6872      	ldr	r2, [r6, #4]
   17bf2:	b972      	cbnz	r2, 17c12 <ticker_job+0x18a>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   17bf4:	68b2      	ldr	r2, [r6, #8]
   17bf6:	b962      	cbnz	r2, 17c12 <ticker_job+0x18a>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   17bf8:	68f2      	ldr	r2, [r6, #12]
   17bfa:	b952      	cbnz	r2, 17c12 <ticker_job+0x18a>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   17bfc:	6932      	ldr	r2, [r6, #16]
   17bfe:	b942      	cbnz	r2, 17c12 <ticker_job+0x18a>
			     (user_op->params.update.lazy == 0U) &&
   17c00:	6972      	ldr	r2, [r6, #20]
   17c02:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   17c06:	d104      	bne.n	17c12 <ticker_job+0x18a>
				ticker_job_op_cb(user_op,
   17c08:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   17c0a:	4630      	mov	r0, r6
   17c0c:	f00f fbb4 	bl	27378 <ticker_job_op_cb>
}
   17c10:	e7c2      	b.n	17b98 <ticker_job+0x110>
			if (state == 1U) {
   17c12:	2b01      	cmp	r3, #1
   17c14:	f040 80b4 	bne.w	17d80 <ticker_job+0x2f8>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   17c18:	4620      	mov	r0, r4
   17c1a:	f00f fb63 	bl	272e4 <ticker_dequeue>
   17c1e:	60a8      	str	r0, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   17c20:	7833      	ldrb	r3, [r6, #0]
   17c22:	2b05      	cmp	r3, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   17c24:	4681      	mov	r9, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   17c26:	f040 8089 	bne.w	17d3c <ticker_job+0x2b4>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   17c2a:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ticks_now = cntr_cnt_get();
   17c2e:	f005 fd85 	bl	1d73c <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   17c32:	eba0 0308 	sub.w	r3, r0, r8
   17c36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   17c3a:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
   17c3c:	4599      	cmp	r9, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
   17c3e:	bf98      	it	ls
   17c40:	6969      	ldrls	r1, [r5, #20]
	ticks_now = cntr_cnt_get();
   17c42:	9007      	str	r0, [sp, #28]
		ticker->ticks_to_expire_minus += ticks_elapsed -
   17c44:	bf98      	it	ls
   17c46:	eba1 0109 	subls.w	r1, r1, r9
	if ((ticker->ticks_periodic != 0U) &&
   17c4a:	6868      	ldr	r0, [r5, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
   17c4c:	bf9b      	ittet	ls
   17c4e:	185b      	addls	r3, r3, r1
   17c50:	616b      	strls	r3, [r5, #20]
		ticks_to_expire -= ticks_elapsed;
   17c52:	eba9 0303 	subhi.w	r3, r9, r3
		ticks_to_expire = 0U;
   17c56:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0U) &&
   17c58:	b198      	cbz	r0, 17c82 <ticker_job+0x1fa>
	    (user_op->params.update.lazy != 0U)) {
   17c5a:	8ab1      	ldrh	r1, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
   17c5c:	b189      	cbz	r1, 17c82 <ticker_job+0x1fa>
		user_op->params.update.lazy--;
   17c5e:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   17c62:	fa1f fc8c 	uxth.w	ip, ip
   17c66:	f8a6 c014 	strh.w	ip, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   17c6a:	4298      	cmp	r0, r3
   17c6c:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   17c70:	d201      	bcs.n	17c76 <ticker_job+0x1ee>
   17c72:	45f4      	cmp	ip, lr
   17c74:	d328      	bcc.n	17cc8 <ticker_job+0x240>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   17c76:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   17c7a:	45f4      	cmp	ip, lr
   17c7c:	d843      	bhi.n	17d06 <ticker_job+0x27e>
		ticker->lazy_periodic = user_op->params.update.lazy;
   17c7e:	f8a5 c01c 	strh.w	ip, [r5, #28]
	ticker->ticks_to_expire = ticks_to_expire +
   17c82:	6870      	ldr	r0, [r6, #4]
	ticker->ticks_to_expire_minus +=
   17c84:	68b1      	ldr	r1, [r6, #8]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   17c86:	9a07      	ldr	r2, [sp, #28]
	ticker->ticks_to_expire = ticks_to_expire +
   17c88:	4403      	add	r3, r0
   17c8a:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus +=
   17c8c:	696b      	ldr	r3, [r5, #20]
   17c8e:	440b      	add	r3, r1
   17c90:	616b      	str	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   17c92:	4641      	mov	r1, r8
   17c94:	4628      	mov	r0, r5
   17c96:	f00f fb51 	bl	2733c <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   17c9a:	68f2      	ldr	r2, [r6, #12]
   17c9c:	69ab      	ldr	r3, [r5, #24]
   17c9e:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   17ca0:	6932      	ldr	r2, [r6, #16]
   17ca2:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   17ca4:	bf8c      	ite	hi
   17ca6:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   17ca8:	2300      	movls	r3, #0
   17caa:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   17cac:	7db3      	ldrb	r3, [r6, #22]
   17cae:	b103      	cbz	r3, 17cb2 <ticker_job+0x22a>
		ticker->force = user_op->params.update.force;
   17cb0:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
   17cb2:	9b05      	ldr	r3, [sp, #20]
   17cb4:	9a08      	ldr	r2, [sp, #32]
   17cb6:	f803 b032 	strb.w	fp, [r3, r2, lsl #3]
		ticker->req++;
   17cba:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
   17cbc:	f896 b001 	ldrb.w	fp, [r6, #1]
		ticker->req++;
   17cc0:	3301      	adds	r3, #1
   17cc2:	706b      	strb	r3, [r5, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   17cc4:	2100      	movs	r1, #0
   17cc6:	e7a0      	b.n	17c0a <ticker_job+0x182>
	if ((ticker->remainder_current >= BIT(31)) ||
   17cc8:	6a69      	ldr	r1, [r5, #36]	; 0x24
   17cca:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 17f7c <ticker_job+0x4f4>
   17cce:	4aaa      	ldr	r2, [pc, #680]	; (17f78 <ticker_job+0x4f0>)
   17cd0:	4489      	add	r9, r1
   17cd2:	4591      	cmp	r9, r2
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   17cd4:	bf81      	itttt	hi
   17cd6:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   17cda:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   17cde:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
   17ce2:	6269      	strhi	r1, [r5, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
   17ce4:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
		decrement++;
   17ce8:	bf8c      	ite	hi
   17cea:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0U;
   17cee:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
   17cf2:	1a51      	subs	r1, r2, r1
			ticks_to_expire -= ticker->ticks_periodic +
   17cf4:	4481      	add	r9, r0
			ticker->lazy_current--;
   17cf6:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
   17cfa:	6269      	str	r1, [r5, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
   17cfc:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
   17d00:	f8a5 e01e 	strh.w	lr, [r5, #30]
   17d04:	e7b1      	b.n	17c6a <ticker_job+0x1e2>
	ticker->remainder_current += ticker->remainder_periodic;
   17d06:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
	if ((ticker->remainder_current < BIT(31)) &&
   17d0a:	f8df 9270 	ldr.w	r9, [pc, #624]	; 17f7c <ticker_job+0x4f4>
	ticker->remainder_current += ticker->remainder_periodic;
   17d0e:	4411      	add	r1, r2
	if ((ticker->remainder_current < BIT(31)) &&
   17d10:	4a99      	ldr	r2, [pc, #612]	; (17f78 <ticker_job+0x4f0>)
   17d12:	4489      	add	r9, r1
   17d14:	4591      	cmp	r9, r2
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   17d16:	bf9d      	ittte	ls
   17d18:	f1a1 71e8 	subls.w	r1, r1, #30408704	; 0x1d00000
   17d1c:	f5a1 31d4 	subls.w	r1, r1, #108544	; 0x1a800
   17d20:	f5a1 71a5 	subls.w	r1, r1, #330	; 0x14a
	ticker->remainder_current += ticker->remainder_periodic;
   17d24:	6269      	strhi	r1, [r5, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   17d26:	bf96      	itet	ls
   17d28:	6269      	strls	r1, [r5, #36]	; 0x24
	return 0;
   17d2a:	2100      	movhi	r1, #0
		return 1;
   17d2c:	2101      	movls	r1, #1
			ticks_to_expire += ticker->ticks_periodic +
   17d2e:	4401      	add	r1, r0
			ticker->lazy_current++;
   17d30:	f10e 0e01 	add.w	lr, lr, #1
			ticks_to_expire += ticker->ticks_periodic +
   17d34:	440b      	add	r3, r1
			ticker->lazy_current++;
   17d36:	f8a5 e01e 	strh.w	lr, [r5, #30]
   17d3a:	e79c      	b.n	17c76 <ticker_job+0x1ee>
		ticker->req = ticker->ack;
   17d3c:	78aa      	ldrb	r2, [r5, #2]
   17d3e:	706a      	strb	r2, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   17d40:	7f21      	ldrb	r1, [r4, #28]
   17d42:	7872      	ldrb	r2, [r6, #1]
   17d44:	4291      	cmp	r1, r2
   17d46:	d1bd      	bne.n	17cc4 <ticker_job+0x23c>
			instance->ticker_id_slot_previous = TICKER_NULL;
   17d48:	22ff      	movs	r2, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   17d4a:	2b07      	cmp	r3, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   17d4c:	7722      	strb	r2, [r4, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   17d4e:	d10c      	bne.n	17d6a <ticker_job+0x2e2>
				ticks_at_stop =
   17d50:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
   17d52:	6963      	ldr	r3, [r4, #20]
			if (!((ticks_at_stop - ticks_current) &
   17d54:	1ac2      	subs	r2, r0, r3
   17d56:	0211      	lsls	r1, r2, #8
   17d58:	d40a      	bmi.n	17d70 <ticker_job+0x2e8>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   17d5a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   17d5e:	443b      	add	r3, r7
			if (instance->ticks_slot_previous > ticks_used) {
   17d60:	69a2      	ldr	r2, [r4, #24]
   17d62:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   17d64:	bf88      	it	hi
   17d66:	61a3      	strhi	r3, [r4, #24]
   17d68:	e7ac      	b.n	17cc4 <ticker_job+0x23c>
				ticks_at_stop = cntr_cnt_get();
   17d6a:	f005 fce7 	bl	1d73c <cntr_cnt_get>
   17d6e:	e7f0      	b.n	17d52 <ticker_job+0x2ca>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   17d70:	1a1b      	subs	r3, r3, r0
   17d72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   17d76:	429f      	cmp	r7, r3
					ticks_used = ticks_elapsed -
   17d78:	bf8c      	ite	hi
   17d7a:	1afb      	subhi	r3, r7, r3
					ticks_used = 0;
   17d7c:	2300      	movls	r3, #0
   17d7e:	e7ef      	b.n	17d60 <ticker_job+0x2d8>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   17d80:	2104      	movs	r1, #4
   17d82:	4623      	mov	r3, r4
   17d84:	6a65      	ldr	r5, [r4, #36]	; 0x24
   17d86:	2201      	movs	r2, #1
   17d88:	4608      	mov	r0, r1
   17d8a:	47a8      	blx	r5
				pending = 1U;
   17d8c:	2301      	movs	r3, #1
				user->middle = prev;
   17d8e:	f88a 8002 	strb.w	r8, [sl, #2]
				pending = 1U;
   17d92:	9303      	str	r3, [sp, #12]
				break;
   17d94:	e6a3      	b.n	17ade <ticker_job+0x56>
			if (instance->ticks_slot_previous > ticks_to_expire) {
   17d96:	69a2      	ldr	r2, [r4, #24]
   17d98:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   17d9a:	eba7 0703 	sub.w	r7, r7, r3
		ticks_expired += ticks_to_expire;
   17d9e:	4499      	add	r9, r3
				instance->ticker_id_slot_previous = TICKER_NULL;
   17da0:	bf29      	itett	cs
   17da2:	23ff      	movcs	r3, #255	; 0xff
				instance->ticks_slot_previous -=
   17da4:	1ad3      	subcc	r3, r2, r3
				instance->ticker_id_slot_previous = TICKER_NULL;
   17da6:	7723      	strbcs	r3, [r4, #28]
				instance->ticks_slot_previous = 0U;
   17da8:	2300      	movcs	r3, #0
   17daa:	61a3      	str	r3, [r4, #24]
			    ticker->ticks_slot != 0U) {
   17dac:	6983      	ldr	r3, [r0, #24]
			if (!TICKER_RESCHEDULE_PENDING(ticker) &&
   17dae:	b10b      	cbz	r3, 17db4 <ticker_job+0x32c>
				instance->ticker_id_slot_previous =
   17db0:	7725      	strb	r5, [r4, #28]
				instance->ticks_slot_previous =
   17db2:	61a3      	str	r3, [r4, #24]
		instance->ticker_id_head = ticker->next;
   17db4:	9b02      	ldr	r3, [sp, #8]
		ticker->ticks_to_expire = 0U;
   17db6:	2100      	movs	r1, #0
   17db8:	6081      	str	r1, [r0, #8]
		instance->ticker_id_head = ticker->next;
   17dba:	f813 3036 	ldrb.w	r3, [r3, r6, lsl #3]
   17dbe:	7763      	strb	r3, [r4, #29]
		if ((ticker->ticks_periodic != 0U) ||
   17dc0:	f8d0 e004 	ldr.w	lr, [r0, #4]
   17dc4:	f1be 0f00 	cmp.w	lr, #0
   17dc8:	d02d      	beq.n	17e26 <ticker_job+0x39e>
			while (count--) {
   17dca:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
	if ((ticker->remainder_current < BIT(31)) &&
   17dce:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 17f78 <ticker_job+0x4f0>
	ticker->remainder_current += ticker->remainder_periodic;
   17dd2:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   17dd6:	4413      	add	r3, r2
	if ((ticker->remainder_current < BIT(31)) &&
   17dd8:	4a68      	ldr	r2, [pc, #416]	; (17f7c <ticker_job+0x4f4>)
   17dda:	189a      	adds	r2, r3, r2
   17ddc:	4552      	cmp	r2, sl
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   17dde:	bf9f      	itttt	ls
   17de0:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
   17de4:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
   17de8:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
   17dec:	6243      	strls	r3, [r0, #36]	; 0x24
		return 1;
   17dee:	bf92      	itee	ls
   17df0:	9b00      	ldrls	r3, [sp, #0]
	ticker->remainder_current += ticker->remainder_periodic;
   17df2:	6243      	strhi	r3, [r0, #36]	; 0x24
	return 0;
   17df4:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
   17df6:	4473      	add	r3, lr
			while (count--) {
   17df8:	f1bc 0c01 	subs.w	ip, ip, #1
				ticks_to_expire += ticker_remainder_inc(ticker);
   17dfc:	4419      	add	r1, r3
			while (count--) {
   17dfe:	d2e8      	bcs.n	17dd2 <ticker_job+0x34a>
			ticks_to_expire_prep(ticker, instance->ticks_current,
   17e00:	9b04      	ldr	r3, [sp, #16]
			ticker->ticks_to_expire = ticks_to_expire;
   17e02:	6081      	str	r1, [r0, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   17e04:	eb03 0209 	add.w	r2, r3, r9
   17e08:	6961      	ldr	r1, [r4, #20]
   17e0a:	f00f fa97 	bl	2733c <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   17e0e:	8b83      	ldrh	r3, [r0, #28]
   17e10:	83c3      	strh	r3, [r0, #30]
			ticker->force = 0U;
   17e12:	2300      	movs	r3, #0
   17e14:	70c3      	strb	r3, [r0, #3]
			ticker->next = *insert_head;
   17e16:	9b02      	ldr	r3, [sp, #8]
   17e18:	f803 b036 	strb.w	fp, [r3, r6, lsl #3]
			ticker->req++;
   17e1c:	7843      	ldrb	r3, [r0, #1]
   17e1e:	3301      	adds	r3, #1
   17e20:	7043      	strb	r3, [r0, #1]
			ticker->req = ticker->ack;
   17e22:	46ab      	mov	fp, r5
   17e24:	e66e      	b.n	17b04 <ticker_job+0x7c>
   17e26:	7883      	ldrb	r3, [r0, #2]
   17e28:	7043      	strb	r3, [r0, #1]
   17e2a:	465d      	mov	r5, fp
   17e2c:	e7f9      	b.n	17e22 <ticker_job+0x39a>
	users = &instance->users[0];
   17e2e:	6863      	ldr	r3, [r4, #4]
   17e30:	9300      	str	r3, [sp, #0]
	count_user = instance->count_user;
   17e32:	7a65      	ldrb	r5, [r4, #9]
		uop->status = TICKER_STATUS_SUCCESS;
   17e34:	9b03      	ldr	r3, [sp, #12]
   17e36:	9302      	str	r3, [sp, #8]
	while (count_user--) {
   17e38:	3d01      	subs	r5, #1
   17e3a:	b2ed      	uxtb	r5, r5
   17e3c:	2dff      	cmp	r5, #255	; 0xff
   17e3e:	f43f ae83 	beq.w	17b48 <ticker_job+0xc0>
		user = &users[count_user];
   17e42:	9b00      	ldr	r3, [sp, #0]
   17e44:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
		user_op = &user->user_op[0];
   17e48:	6877      	ldr	r7, [r6, #4]
		while (user->first != user->last) {
   17e4a:	7873      	ldrb	r3, [r6, #1]
   17e4c:	78f2      	ldrb	r2, [r6, #3]
   17e4e:	429a      	cmp	r2, r3
   17e50:	d0f2      	beq.n	17e38 <ticker_job+0x3b0>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   17e52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   17e56:	011a      	lsls	r2, r3, #4
   17e58:	eb07 1303 	add.w	r3, r7, r3, lsl #4
	switch (uop->op) {
   17e5c:	5cba      	ldrb	r2, [r7, r2]
   17e5e:	2a01      	cmp	r2, #1
   17e60:	d023      	beq.n	17eaa <ticker_job+0x422>
   17e62:	2a02      	cmp	r2, #2
   17e64:	d128      	bne.n	17eb8 <ticker_job+0x430>
		ticker_by_next_slot_get(instance,
   17e66:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
   17e6a:	f899 a000 	ldrb.w	sl, [r9]
		ticker_by_next_slot_get(instance,
   17e6e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->nodes;
   17e72:	f8d4 c000 	ldr.w	ip, [r4]
	if ((_ticker_id_head == TICKER_NULL) ||
   17e76:	6961      	ldr	r1, [r4, #20]
   17e78:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   17e7c:	d002      	beq.n	17e84 <ticker_job+0x3fc>
   17e7e:	6802      	ldr	r2, [r0, #0]
   17e80:	4291      	cmp	r1, r2
   17e82:	d022      	beq.n	17eca <ticker_job+0x442>
		_ticker_id_head = instance->ticker_id_head;
   17e84:	7f62      	ldrb	r2, [r4, #29]
		*ticks_current = instance->ticks_current;
   17e86:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
   17e88:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   17e8a:	2aff      	cmp	r2, #255	; 0xff
   17e8c:	d009      	beq.n	17ea2 <ticker_job+0x41a>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   17e8e:	eb02 0b82 	add.w	fp, r2, r2, lsl #2
   17e92:	eb0c 0acb 	add.w	sl, ip, fp, lsl #3
   17e96:	f8da 0008 	ldr.w	r0, [sl, #8]
   17e9a:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
   17e9c:	f8da 0018 	ldr.w	r0, [sl, #24]
   17ea0:	b1d0      	cbz	r0, 17ed8 <ticker_job+0x450>
	*ticker_id_head = _ticker_id_head;
   17ea2:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
   17ea6:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
   17eaa:	9a02      	ldr	r2, [sp, #8]
   17eac:	625a      	str	r2, [r3, #36]	; 0x24
		fp_op_func = uop->fp_op_func;
   17eae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (fp_op_func) {
   17eb0:	b112      	cbz	r2, 17eb8 <ticker_job+0x430>
		fp_op_func(uop->status, uop->op_context);
   17eb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   17eb4:	2000      	movs	r0, #0
   17eb6:	4790      	blx	r2
			first = user->first + 1;
   17eb8:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
   17eba:	7832      	ldrb	r2, [r6, #0]
			first = user->first + 1;
   17ebc:	3301      	adds	r3, #1
   17ebe:	b2db      	uxtb	r3, r3
				first = 0U;
   17ec0:	429a      	cmp	r2, r3
   17ec2:	bf08      	it	eq
   17ec4:	2300      	moveq	r3, #0
			user->first = first;
   17ec6:	7073      	strb	r3, [r6, #1]
   17ec8:	e7bf      	b.n	17e4a <ticker_job+0x3c2>
		ticker = &node[_ticker_id_head];
   17eca:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
	_ticks_to_expire = *ticks_to_expire;
   17ece:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
   17ed2:	f81c 2032 	ldrb.w	r2, [ip, r2, lsl #3]
   17ed6:	e7d8      	b.n	17e8a <ticker_job+0x402>
		_ticker_id_head = ticker->next;
   17ed8:	f81c 203b 	ldrb.w	r2, [ip, fp, lsl #3]
   17edc:	e7d5      	b.n	17e8a <ticker_job+0x402>
	if (ticker_id_old_head == TICKER_NULL) {
   17ede:	9b01      	ldr	r3, [sp, #4]
   17ee0:	2bff      	cmp	r3, #255	; 0xff
   17ee2:	d106      	bne.n	17ef2 <ticker_job+0x46a>
		ticks_current = cntr_cnt_get();
   17ee4:	f005 fc2a 	bl	1d73c <cntr_cnt_get>
   17ee8:	4605      	mov	r5, r0
		if (cntr_start() == 0) {
   17eea:	f005 fbf3 	bl	1d6d4 <cntr_start>
   17eee:	b900      	cbnz	r0, 17ef2 <ticker_job+0x46a>
			instance->ticks_current = ticks_current;
   17ef0:	6165      	str	r5, [r4, #20]
	ticker = &instance->nodes[instance->ticker_id_head];
   17ef2:	7f63      	ldrb	r3, [r4, #29]
	ticks_to_expire = ticker->ticks_to_expire;
   17ef4:	6822      	ldr	r2, [r4, #0]
		LL_ASSERT(i);
   17ef6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 17f80 <ticker_job+0x4f8>
   17efa:	f8df 9088 	ldr.w	r9, [pc, #136]	; 17f84 <ticker_job+0x4fc>
   17efe:	f8df a088 	ldr.w	sl, [pc, #136]	; 17f88 <ticker_job+0x500>
	ticker = &instance->nodes[instance->ticker_id_head];
   17f02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
   17f06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	i = 10U;
   17f0a:	260a      	movs	r6, #10
	ticks_to_expire = ticker->ticks_to_expire;
   17f0c:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
   17f0e:	f005 fc15 	bl	1d73c <cntr_cnt_get>
		cc = instance->ticks_current;
   17f12:	6965      	ldr	r5, [r4, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   17f14:	1b43      	subs	r3, r0, r5
   17f16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   17f1a:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   17f1c:	42bb      	cmp	r3, r7
   17f1e:	bf2c      	ite	cs
   17f20:	18ed      	addcs	r5, r5, r3
   17f22:	19ed      	addcc	r5, r5, r7
		cc &= HAL_TICKER_CNTR_MASK;
   17f24:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   17f28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		ctr = cntr_cnt_get();
   17f2a:	4683      	mov	fp, r0
		instance->trigger_set_cb(cc);
   17f2c:	4628      	mov	r0, r5
   17f2e:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   17f30:	f005 fc04 	bl	1d73c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   17f34:	eba0 030b 	sub.w	r3, r0, fp
   17f38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   17f3c:	eba5 050b 	sub.w	r5, r5, fp
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   17f40:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   17f42:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   17f46:	42ab      	cmp	r3, r5
		i--;
   17f48:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   17f4c:	f67f ae0c 	bls.w	17b68 <ticker_job+0xe0>
		LL_ASSERT(i);
   17f50:	2e00      	cmp	r6, #0
   17f52:	d1dc      	bne.n	17f0e <ticker_job+0x486>
   17f54:	f640 0342 	movw	r3, #2114	; 0x842
   17f58:	4642      	mov	r2, r8
   17f5a:	4649      	mov	r1, r9
   17f5c:	4650      	mov	r0, sl
   17f5e:	f00b f9b4 	bl	232ca <printk>
   17f62:	4040      	eors	r0, r0
   17f64:	f380 8811 	msr	BASEPRI, r0
   17f68:	f04f 0003 	mov.w	r0, #3
   17f6c:	df02      	svc	2
   17f6e:	e7ce      	b.n	17f0e <ticker_job+0x486>
}
   17f70:	b00b      	add	sp, #44	; 0x2c
   17f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f76:	bf00      	nop
   17f78:	7f172b59 	.word	0x7f172b59
   17f7c:	ff172b5a 	.word	0xff172b5a
   17f80:	0002ebad 	.word	0x0002ebad
   17f84:	0002eda0 	.word	0x0002eda0
   17f88:	000297e6 	.word	0x000297e6

00017f8c <ticker_init>:
{
   17f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f8e:	9d05      	ldr	r5, [sp, #20]
   17f90:	f89d 4018 	ldrb.w	r4, [sp, #24]
   17f94:	9e07      	ldr	r6, [sp, #28]
   17f96:	4617      	mov	r7, r2
	if (instance_index >= TICKER_INSTANCE_MAX) {
   17f98:	b108      	cbz	r0, 17f9e <ticker_init+0x12>
		return TICKER_STATUS_FAILURE;
   17f9a:	2001      	movs	r0, #1
}
   17f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	instance->count_node = count_node;
   17f9e:	4a12      	ldr	r2, [pc, #72]	; (17fe8 <ticker_init+0x5c>)
   17fa0:	7211      	strb	r1, [r2, #8]
	instance->nodes = node;
   17fa2:	6017      	str	r7, [r2, #0]
	instance->count_user = count_user;
   17fa4:	7253      	strb	r3, [r2, #9]
	instance->users = user;
   17fa6:	6055      	str	r5, [r2, #4]
	while (count_user--) {
   17fa8:	3b01      	subs	r3, #1
   17faa:	b2db      	uxtb	r3, r3
   17fac:	2bff      	cmp	r3, #255	; 0xff
   17fae:	d10f      	bne.n	17fd0 <ticker_init+0x44>
	if (count_op) {
   17fb0:	2c00      	cmp	r4, #0
   17fb2:	d1f2      	bne.n	17f9a <ticker_init+0xe>
	instance->caller_id_get_cb = caller_id_get_cb;
   17fb4:	9b08      	ldr	r3, [sp, #32]
   17fb6:	6213      	str	r3, [r2, #32]
	instance->sched_cb = sched_cb;
   17fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17fba:	6253      	str	r3, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
   17fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17fbe:	6293      	str	r3, [r2, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   17fc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
   17fc4:	e9c2 4405 	strd	r4, r4, [r2, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   17fc8:	8393      	strh	r3, [r2, #28]
	instance->ticks_elapsed_first = 0U;
   17fca:	8154      	strh	r4, [r2, #10]
	return TICKER_STATUS_SUCCESS;
   17fcc:	4620      	mov	r0, r4
   17fce:	e7e5      	b.n	17f9c <ticker_init+0x10>
		users[count_user].user_op = user_op_;
   17fd0:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
   17fd4:	604e      	str	r6, [r1, #4]
		user_op_ += users[count_user].count_user_op;
   17fd6:	f815 0033 	ldrb.w	r0, [r5, r3, lsl #3]
   17fda:	eb00 0140 	add.w	r1, r0, r0, lsl #1
		count_op -= users[count_user].count_user_op;
   17fde:	1a20      	subs	r0, r4, r0
		user_op_ += users[count_user].count_user_op;
   17fe0:	eb06 1601 	add.w	r6, r6, r1, lsl #4
		count_op -= users[count_user].count_user_op;
   17fe4:	b2c4      	uxtb	r4, r0
   17fe6:	e7df      	b.n	17fa8 <ticker_init+0x1c>
   17fe8:	20000c6c 	.word	0x20000c6c

00017fec <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   17fec:	4b04      	ldr	r3, [pc, #16]	; (18000 <ticker_is_initialized+0x14>)
   17fee:	222c      	movs	r2, #44	; 0x2c
   17ff0:	fb02 3000 	mla	r0, r2, r0, r3
   17ff4:	7a00      	ldrb	r0, [r0, #8]
}
   17ff6:	3800      	subs	r0, #0
   17ff8:	bf18      	it	ne
   17ffa:	2001      	movne	r0, #1
   17ffc:	4770      	bx	lr
   17ffe:	bf00      	nop
   18000:	20000c6c 	.word	0x20000c6c

00018004 <ticker_trigger>:
	if (instance->sched_cb) {
   18004:	4b07      	ldr	r3, [pc, #28]	; (18024 <ticker_trigger+0x20>)
   18006:	222c      	movs	r2, #44	; 0x2c
   18008:	fb02 3100 	mla	r1, r2, r0, r3
{
   1800c:	b410      	push	{r4}
	if (instance->sched_cb) {
   1800e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   18010:	b134      	cbz	r4, 18020 <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   18012:	460b      	mov	r3, r1
   18014:	46a4      	mov	ip, r4
   18016:	2201      	movs	r2, #1
}
   18018:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1801a:	2103      	movs	r1, #3
   1801c:	2002      	movs	r0, #2
   1801e:	4760      	bx	ip
}
   18020:	bc10      	pop	{r4}
   18022:	4770      	bx	lr
   18024:	20000c6c 	.word	0x20000c6c

00018028 <ticker_start>:
{
   18028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1802c:	4694      	mov	ip, r2
   1802e:	461a      	mov	r2, r3
	struct ticker_instance *instance = &_instance[instance_index];
   18030:	4b21      	ldr	r3, [pc, #132]	; (180b8 <ticker_start+0x90>)
{
   18032:	4605      	mov	r5, r0
   18034:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   18036:	212c      	movs	r1, #44	; 0x2c
   18038:	fb05 3801 	mla	r8, r5, r1, r3
	user = &instance->users[user_id];
   1803c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   18040:	eb03 07c0 	add.w	r7, r3, r0, lsl #3
	if (last >= user->count_user_op) {
   18044:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
	last = user->last + 1;
   18048:	78fc      	ldrb	r4, [r7, #3]
   1804a:	1c66      	adds	r6, r4, #1
   1804c:	b2f6      	uxtb	r6, r6
		last = 0U;
   1804e:	42b3      	cmp	r3, r6
   18050:	bf98      	it	ls
   18052:	2600      	movls	r6, #0
	if (last == user->first) {
   18054:	787b      	ldrb	r3, [r7, #1]
   18056:	42b3      	cmp	r3, r6
   18058:	d02c      	beq.n	180b4 <ticker_start+0x8c>
	user_op = &user->user_op[user->last];
   1805a:	687b      	ldr	r3, [r7, #4]
   1805c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   18060:	0121      	lsls	r1, r4, #4
	user_op->op = TICKER_USER_OP_TYPE_START;
   18062:	f04f 0904 	mov.w	r9, #4
	user_op = &user->user_op[user->last];
   18066:	eb03 1404 	add.w	r4, r3, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_START;
   1806a:	f803 9001 	strb.w	r9, [r3, r1]
	user_op->params.start.ticks_first = ticks_first;
   1806e:	9b08      	ldr	r3, [sp, #32]
   18070:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   18072:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18074:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   18076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18078:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   1807a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1807c:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
   1807e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   18082:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   18084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18086:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   18088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1808a:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
   1808c:	2302      	movs	r3, #2
   1808e:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
   18090:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18092:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   18094:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   18096:	f884 c001 	strb.w	ip, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
   1809a:	6062      	str	r2, [r4, #4]
	user_op->op_context = op_context;
   1809c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
   1809e:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   180a0:	e9d8 3608 	ldrd	r3, r6, [r8, #32]
   180a4:	4798      	blx	r3
   180a6:	4643      	mov	r3, r8
   180a8:	2200      	movs	r2, #0
   180aa:	4649      	mov	r1, r9
   180ac:	47b0      	blx	r6
	return user_op->status;
   180ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
   180b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   180b4:	2001      	movs	r0, #1
   180b6:	e7fb      	b.n	180b0 <ticker_start+0x88>
   180b8:	20000c6c 	.word	0x20000c6c

000180bc <ticker_update>:
{
   180bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   180c0:	4605      	mov	r5, r0
   180c2:	4608      	mov	r0, r1
   180c4:	4619      	mov	r1, r3
	struct ticker_instance *instance = &_instance[instance_index];
   180c6:	4b1f      	ldr	r3, [pc, #124]	; (18144 <ticker_update+0x88>)
   180c8:	242c      	movs	r4, #44	; 0x2c
   180ca:	fb05 3804 	mla	r8, r5, r4, r3
	user = &instance->users[user_id];
   180ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
   180d2:	eb03 07c0 	add.w	r7, r3, r0, lsl #3
	if (last >= user->count_user_op) {
   180d6:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
	last = user->last + 1;
   180da:	78fc      	ldrb	r4, [r7, #3]
   180dc:	1c66      	adds	r6, r4, #1
   180de:	b2f6      	uxtb	r6, r6
		last = 0U;
   180e0:	42b3      	cmp	r3, r6
   180e2:	bf98      	it	ls
   180e4:	2600      	movls	r6, #0
	if (last == user->first) {
   180e6:	787b      	ldrb	r3, [r7, #1]
   180e8:	42b3      	cmp	r3, r6
   180ea:	d029      	beq.n	18140 <ticker_update+0x84>
	user_op = &user->user_op[user->last];
   180ec:	687b      	ldr	r3, [r7, #4]
   180ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   180f2:	ea4f 1c04 	mov.w	ip, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   180f6:	f04f 0e05 	mov.w	lr, #5
	user_op = &user->user_op[user->last];
   180fa:	eb03 1404 	add.w	r4, r3, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   180fe:	f803 e00c 	strb.w	lr, [r3, ip]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   18102:	9b06      	ldr	r3, [sp, #24]
   18104:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   18106:	9b07      	ldr	r3, [sp, #28]
   18108:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   1810a:	9b08      	ldr	r3, [sp, #32]
   1810c:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
   1810e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   18112:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
   18114:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   18118:	75a3      	strb	r3, [r4, #22]
	user_op->status = TICKER_STATUS_BUSY;
   1811a:	2302      	movs	r3, #2
   1811c:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
   1811e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18120:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   18122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	user_op->id = ticker_id;
   18124:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   18126:	6061      	str	r1, [r4, #4]
	user_op->op_context = op_context;
   18128:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
   1812a:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1812c:	e9d8 3608 	ldrd	r3, r6, [r8, #32]
   18130:	4798      	blx	r3
   18132:	4643      	mov	r3, r8
   18134:	2200      	movs	r2, #0
   18136:	2104      	movs	r1, #4
   18138:	47b0      	blx	r6
	return user_op->status;
   1813a:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
   1813c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   18140:	2001      	movs	r0, #1
   18142:	e7fb      	b.n	1813c <ticker_update+0x80>
   18144:	20000c6c 	.word	0x20000c6c

00018148 <ticker_stop>:
{
   18148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1814c:	4605      	mov	r5, r0
   1814e:	4608      	mov	r0, r1
   18150:	4619      	mov	r1, r3
	struct ticker_instance *instance = &_instance[instance_index];
   18152:	4b18      	ldr	r3, [pc, #96]	; (181b4 <ticker_stop+0x6c>)
   18154:	242c      	movs	r4, #44	; 0x2c
   18156:	fb05 3804 	mla	r8, r5, r4, r3
	user = &instance->users[user_id];
   1815a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1815e:	eb03 07c0 	add.w	r7, r3, r0, lsl #3
	if (last >= user->count_user_op) {
   18162:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
	last = user->last + 1;
   18166:	78fc      	ldrb	r4, [r7, #3]
   18168:	1c66      	adds	r6, r4, #1
   1816a:	b2f6      	uxtb	r6, r6
		last = 0U;
   1816c:	42b3      	cmp	r3, r6
   1816e:	bf98      	it	ls
   18170:	2600      	movls	r6, #0
	if (last == user->first) {
   18172:	787b      	ldrb	r3, [r7, #1]
   18174:	42b3      	cmp	r3, r6
   18176:	d01b      	beq.n	181b0 <ticker_stop+0x68>
	user_op = &user->user_op[user->last];
   18178:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1817c:	687b      	ldr	r3, [r7, #4]
   1817e:	ea4f 1c04 	mov.w	ip, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   18182:	f04f 0e06 	mov.w	lr, #6
   18186:	f803 e00c 	strb.w	lr, [r3, ip]
	user_op = &user->user_op[user->last];
   1818a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
	user_op->status = TICKER_STATUS_BUSY;
   1818e:	2302      	movs	r3, #2
	user_op->fp_op_func = fp_op_func;
   18190:	e9c4 3109 	strd	r3, r1, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   18194:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
   18196:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   18198:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
   1819a:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1819c:	e9d8 3608 	ldrd	r3, r6, [r8, #32]
   181a0:	4798      	blx	r3
   181a2:	4643      	mov	r3, r8
   181a4:	2200      	movs	r2, #0
   181a6:	2104      	movs	r1, #4
   181a8:	47b0      	blx	r6
	return user_op->status;
   181aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
   181ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   181b0:	2001      	movs	r0, #1
   181b2:	e7fb      	b.n	181ac <ticker_stop+0x64>
   181b4:	20000c6c 	.word	0x20000c6c

000181b8 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
   181b8:	b508      	push	{r3, lr}
   181ba:	4603      	mov	r3, r0
	if (addr_type > 1) {
   181bc:	2b01      	cmp	r3, #1
{
   181be:	4608      	mov	r0, r1
	if (addr_type > 1) {
   181c0:	d80e      	bhi.n	181e0 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
   181c2:	b133      	cbz	r3, 181d2 <ll_addr_get+0x1a>
		if (bdaddr) {
   181c4:	b119      	cbz	r1, 181ce <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   181c6:	4907      	ldr	r1, [pc, #28]	; (181e4 <ll_addr_get+0x2c>)
   181c8:	2206      	movs	r2, #6
   181ca:	f00c ff61 	bl	25090 <memcpy>
		}

		return rnd_addr;
   181ce:	4805      	ldr	r0, [pc, #20]	; (181e4 <ll_addr_get+0x2c>)
   181d0:	e007      	b.n	181e2 <ll_addr_get+0x2a>
	}

	if (bdaddr) {
   181d2:	b119      	cbz	r1, 181dc <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   181d4:	4904      	ldr	r1, [pc, #16]	; (181e8 <ll_addr_get+0x30>)
   181d6:	2206      	movs	r2, #6
   181d8:	f00c ff5a 	bl	25090 <memcpy>
	}

	return pub_addr;
   181dc:	4802      	ldr	r0, [pc, #8]	; (181e8 <ll_addr_get+0x30>)
   181de:	e000      	b.n	181e2 <ll_addr_get+0x2a>
		return NULL;
   181e0:	2000      	movs	r0, #0
}
   181e2:	bd08      	pop	{r3, pc}
   181e4:	20002318 	.word	0x20002318
   181e8:	20002312 	.word	0x20002312

000181ec <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   181ec:	b570      	push	{r4, r5, r6, lr}
   181ee:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
	    ull_adv_is_enabled(0)) {
   181f0:	2000      	movs	r0, #0
{
   181f2:	460d      	mov	r5, r1
	    ull_adv_is_enabled(0)) {
   181f4:	f00f f9e0 	bl	275b8 <ull_adv_is_enabled>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
   181f8:	b110      	cbz	r0, 18200 <ll_addr_set+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   181fa:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
   181fc:	4620      	mov	r0, r4
   181fe:	bd70      	pop	{r4, r5, r6, pc}
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   18200:	f00f fa1d 	bl	2763e <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   18204:	f010 0406 	ands.w	r4, r0, #6
   18208:	d1f7      	bne.n	181fa <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   1820a:	2206      	movs	r2, #6
   1820c:	4629      	mov	r1, r5
	if (addr_type) {
   1820e:	b11e      	cbz	r6, 18218 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   18210:	4802      	ldr	r0, [pc, #8]	; (1821c <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   18212:	f00c ff3d 	bl	25090 <memcpy>
   18216:	e7f1      	b.n	181fc <ll_addr_set+0x10>
   18218:	4801      	ldr	r0, [pc, #4]	; (18220 <ll_addr_set+0x34>)
   1821a:	e7fa      	b.n	18212 <ll_addr_set+0x26>
   1821c:	20002318 	.word	0x20002318
   18220:	20002312 	.word	0x20002312

00018224 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(struct device *unused)
{
   18224:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   18226:	4802      	ldr	r0, [pc, #8]	; (18230 <hci_driver_init+0xc>)
   18228:	f7ef fa08 	bl	763c <bt_hci_driver_register>

	return 0;
}
   1822c:	2000      	movs	r0, #0
   1822e:	bd08      	pop	{r3, pc}
   18230:	000294e0 	.word	0x000294e0

00018234 <hci_driver_send>:
	if (!buf->len) {
   18234:	8983      	ldrh	r3, [r0, #12]
{
   18236:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18238:	4605      	mov	r5, r0
	if (!buf->len) {
   1823a:	b973      	cbnz	r3, 1825a <hci_driver_send+0x26>
   1823c:	4920      	ldr	r1, [pc, #128]	; (182c0 <hci_driver_send+0x8c>)
   1823e:	4b21      	ldr	r3, [pc, #132]	; (182c4 <hci_driver_send+0x90>)
		BT_ERR("Empty HCI packet");
   18240:	4821      	ldr	r0, [pc, #132]	; (182c8 <hci_driver_send+0x94>)
   18242:	1ac9      	subs	r1, r1, r3
   18244:	08c9      	lsrs	r1, r1, #3
   18246:	0189      	lsls	r1, r1, #6
   18248:	f041 0101 	orr.w	r1, r1, #1
   1824c:	f00b f8ae 	bl	233ac <log_0>
		return -EINVAL;
   18250:	f06f 0415 	mvn.w	r4, #21
}
   18254:	4620      	mov	r0, r4
   18256:	b003      	add	sp, #12
   18258:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
   1825a:	7d01      	ldrb	r1, [r0, #20]
	switch (type) {
   1825c:	b181      	cbz	r1, 18280 <hci_driver_send+0x4c>
   1825e:	2902      	cmp	r1, #2
   18260:	d122      	bne.n	182a8 <hci_driver_send+0x74>
	err = hci_acl_handle(buf, &evt);
   18262:	a901      	add	r1, sp, #4
   18264:	f000 fc74 	bl	18b50 <hci_acl_handle>
   18268:	4604      	mov	r4, r0
	if (evt) {
   1826a:	9801      	ldr	r0, [sp, #4]
   1826c:	b108      	cbz	r0, 18272 <hci_driver_send+0x3e>
		bt_recv_prio(evt);
   1826e:	f7ef f98f 	bl	7590 <bt_recv_prio>
	if (!err) {
   18272:	2c00      	cmp	r4, #0
   18274:	d1ee      	bne.n	18254 <hci_driver_send+0x20>
		net_buf_unref(buf);
   18276:	4628      	mov	r0, r5
   18278:	f006 f90a 	bl	1e490 <net_buf_unref>
   1827c:	2400      	movs	r4, #0
   1827e:	e7e9      	b.n	18254 <hci_driver_send+0x20>
	struct node_rx_pdu *node_rx = NULL;
   18280:	9101      	str	r1, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   18282:	a901      	add	r1, sp, #4
   18284:	f000 fa00 	bl	18688 <hci_cmd_handle>
	if (evt) {
   18288:	2800      	cmp	r0, #0
   1828a:	d0f4      	beq.n	18276 <hci_driver_send+0x42>
		bt_recv_prio(evt);
   1828c:	f7ef f980 	bl	7590 <bt_recv_prio>
		if (node_rx) {
   18290:	9c01      	ldr	r4, [sp, #4]
   18292:	2c00      	cmp	r4, #0
   18294:	d0ef      	beq.n	18276 <hci_driver_send+0x42>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   18296:	4620      	mov	r0, r4
   18298:	f000 fe86 	bl	18fa8 <hci_get_class>
   1829c:	7160      	strb	r0, [r4, #5]
			k_fifo_put(&recv_fifo, node_rx);
   1829e:	9901      	ldr	r1, [sp, #4]
   182a0:	480a      	ldr	r0, [pc, #40]	; (182cc <hci_driver_send+0x98>)
   182a2:	f010 f81d 	bl	282e0 <k_queue_append>
	if (!err) {
   182a6:	e7e6      	b.n	18276 <hci_driver_send+0x42>
   182a8:	4b06      	ldr	r3, [pc, #24]	; (182c4 <hci_driver_send+0x90>)
   182aa:	4a05      	ldr	r2, [pc, #20]	; (182c0 <hci_driver_send+0x8c>)
		BT_ERR("Unknown HCI type %u", type);
   182ac:	4808      	ldr	r0, [pc, #32]	; (182d0 <hci_driver_send+0x9c>)
   182ae:	1ad2      	subs	r2, r2, r3
   182b0:	08d2      	lsrs	r2, r2, #3
   182b2:	0192      	lsls	r2, r2, #6
   182b4:	f042 0201 	orr.w	r2, r2, #1
   182b8:	f00b f885 	bl	233c6 <log_1>
   182bc:	e7c8      	b.n	18250 <hci_driver_send+0x1c>
   182be:	bf00      	nop
   182c0:	000288b0 	.word	0x000288b0
   182c4:	00028868 	.word	0x00028868
   182c8:	0002ec11 	.word	0x0002ec11
   182cc:	20007548 	.word	0x20007548
   182d0:	0002ec22 	.word	0x0002ec22

000182d4 <recv_thread>:
{
   182d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   182d6:	4d27      	ldr	r5, [pc, #156]	; (18374 <recv_thread+0xa0>)
		LL_ASSERT(0);
   182d8:	4e27      	ldr	r6, [pc, #156]	; (18378 <recv_thread+0xa4>)
   182da:	4f28      	ldr	r7, [pc, #160]	; (1837c <recv_thread+0xa8>)
   182dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   182e0:	4628      	mov	r0, r5
   182e2:	f008 f87d 	bl	203e0 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   182e6:	b1e8      	cbz	r0, 18324 <recv_thread+0x50>
	u8_t class = node_rx->hdr.user_meta;
   182e8:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   182ea:	9001      	str	r0, [sp, #4]
	switch (class) {
   182ec:	2b04      	cmp	r3, #4
   182ee:	d81c      	bhi.n	1832a <recv_thread+0x56>
   182f0:	b1eb      	cbz	r3, 1832e <recv_thread+0x5a>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   182f2:	2b02      	cmp	r3, #2
   182f4:	d129      	bne.n	1834a <recv_thread+0x76>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   182f6:	2200      	movs	r2, #0
   182f8:	2101      	movs	r1, #1
   182fa:	4610      	mov	r0, r2
   182fc:	f7f0 fa42 	bl	8784 <bt_buf_get_evt>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   18300:	4604      	mov	r4, r0
		if (buf) {
   18302:	b118      	cbz	r0, 1830c <recv_thread+0x38>
			hci_evt_encode(node_rx, buf);
   18304:	4601      	mov	r1, r0
   18306:	9801      	ldr	r0, [sp, #4]
   18308:	f000 fcee 	bl	18ce8 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   1830c:	9b01      	ldr	r3, [sp, #4]
   1830e:	2200      	movs	r2, #0
   18310:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   18312:	a801      	add	r0, sp, #4
   18314:	f001 fa2c 	bl	19770 <ll_rx_mem_release>
		if (buf) {
   18318:	b124      	cbz	r4, 18324 <recv_thread+0x50>
			if (buf->len) {
   1831a:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   1831c:	4620      	mov	r0, r4
			if (buf->len) {
   1831e:	b32b      	cbz	r3, 1836c <recv_thread+0x98>
				bt_recv(buf);
   18320:	f7ef f88c 	bl	743c <bt_recv>
	z_impl_k_yield();
   18324:	f009 fa32 	bl	2178c <z_impl_k_yield>
}
   18328:	e7d8      	b.n	182dc <recv_thread+0x8>
	switch (class) {
   1832a:	2b05      	cmp	r3, #5
   1832c:	d013      	beq.n	18356 <recv_thread+0x82>
		LL_ASSERT(0);
   1832e:	4814      	ldr	r0, [pc, #80]	; (18380 <recv_thread+0xac>)
   18330:	23c3      	movs	r3, #195	; 0xc3
   18332:	4632      	mov	r2, r6
   18334:	4639      	mov	r1, r7
   18336:	f00a ffc8 	bl	232ca <printk>
   1833a:	4040      	eors	r0, r0
   1833c:	f380 8811 	msr	BASEPRI, r0
   18340:	f04f 0003 	mov.w	r0, #3
   18344:	df02      	svc	2
	struct net_buf *buf = NULL;
   18346:	2400      	movs	r4, #0
		break;
   18348:	e7e0      	b.n	1830c <recv_thread+0x38>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1834a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1834e:	2001      	movs	r0, #1
   18350:	f7f0 f9c4 	bl	86dc <bt_buf_get_rx>
   18354:	e7d4      	b.n	18300 <recv_thread+0x2c>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   18356:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1835a:	2003      	movs	r0, #3
   1835c:	f7f0 f9be 	bl	86dc <bt_buf_get_rx>
   18360:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   18362:	4601      	mov	r1, r0
   18364:	9801      	ldr	r0, [sp, #4]
   18366:	f000 fc81 	bl	18c6c <hci_acl_encode>
		break;
   1836a:	e7cf      	b.n	1830c <recv_thread+0x38>
				net_buf_unref(buf);
   1836c:	f006 f890 	bl	1e490 <net_buf_unref>
   18370:	e7d8      	b.n	18324 <recv_thread+0x50>
   18372:	bf00      	nop
   18374:	20007548 	.word	0x20007548
   18378:	0002ec36 	.word	0x0002ec36
   1837c:	0002d2c6 	.word	0x0002d2c6
   18380:	000297e6 	.word	0x000297e6

00018384 <prio_recv_thread>:
{
   18384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_sem_take(sem, timeout);
   18386:	4e17      	ldr	r6, [pc, #92]	; (183e4 <prio_recv_thread+0x60>)
				k_fifo_put(&recv_fifo, node_rx);
   18388:	4f17      	ldr	r7, [pc, #92]	; (183e8 <prio_recv_thread+0x64>)
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   1838a:	f10d 0102 	add.w	r1, sp, #2
   1838e:	a801      	add	r0, sp, #4
   18390:	f001 f8ea 	bl	19568 <ll_rx_get>
   18394:	4604      	mov	r4, r0
   18396:	b968      	cbnz	r0, 183b4 <prio_recv_thread+0x30>
		if (node_rx) {
   18398:	9b01      	ldr	r3, [sp, #4]
   1839a:	b1eb      	cbz	r3, 183d8 <prio_recv_thread+0x54>
			ll_rx_dequeue();
   1839c:	f001 f93c 	bl	19618 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   183a0:	9c01      	ldr	r4, [sp, #4]
   183a2:	4620      	mov	r0, r4
   183a4:	f000 fe00 	bl	18fa8 <hci_get_class>
				k_fifo_put(&recv_fifo, node_rx);
   183a8:	9901      	ldr	r1, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   183aa:	7160      	strb	r0, [r4, #5]
				k_fifo_put(&recv_fifo, node_rx);
   183ac:	4638      	mov	r0, r7
   183ae:	f00f ff97 	bl	282e0 <k_queue_append>
			continue;
   183b2:	e7ea      	b.n	1838a <prio_recv_thread+0x6>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   183b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   183b8:	2100      	movs	r1, #0
   183ba:	2013      	movs	r0, #19
   183bc:	f7f0 f9e2 	bl	8784 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   183c0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   183c4:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   183c6:	4622      	mov	r2, r4
   183c8:	f00f f870 	bl	274ac <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   183cc:	4628      	mov	r0, r5
   183ce:	f7ef f8df 	bl	7590 <bt_recv_prio>
	z_impl_k_yield();
   183d2:	f009 f9db 	bl	2178c <z_impl_k_yield>
}
   183d6:	e7d8      	b.n	1838a <prio_recv_thread+0x6>
	return z_impl_k_sem_take(sem, timeout);
   183d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   183dc:	4630      	mov	r0, r6
   183de:	f009 fb9f 	bl	21b20 <z_impl_k_sem_take>
		BT_DBG("sem taken");
   183e2:	e7d2      	b.n	1838a <prio_recv_thread+0x6>
   183e4:	200074cc 	.word	0x200074cc
   183e8:	20007548 	.word	0x20007548

000183ec <hci_driver_open>:
{
   183ec:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
   183ee:	481e      	ldr	r0, [pc, #120]	; (18468 <hci_driver_open+0x7c>)
{
   183f0:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
   183f2:	f000 ffcf 	bl	19394 <ll_init>
	if (err) {
   183f6:	4604      	mov	r4, r0
   183f8:	b168      	cbz	r0, 18416 <hci_driver_open+0x2a>
   183fa:	4a1c      	ldr	r2, [pc, #112]	; (1846c <hci_driver_open+0x80>)
   183fc:	4b1c      	ldr	r3, [pc, #112]	; (18470 <hci_driver_open+0x84>)
   183fe:	1ad2      	subs	r2, r2, r3
   18400:	08d2      	lsrs	r2, r2, #3
		BT_ERR("LL initialization failed: %u", err);
   18402:	0192      	lsls	r2, r2, #6
   18404:	4601      	mov	r1, r0
   18406:	f042 0201 	orr.w	r2, r2, #1
   1840a:	481a      	ldr	r0, [pc, #104]	; (18474 <hci_driver_open+0x88>)
   1840c:	f00a ffdb 	bl	233c6 <log_1>
}
   18410:	4620      	mov	r0, r4
   18412:	b006      	add	sp, #24
   18414:	bd10      	pop	{r4, pc}
	hci_init(NULL);
   18416:	f000 fddf 	bl	18fd8 <hci_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1841a:	f06f 0309 	mvn.w	r3, #9
   1841e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   18422:	e9cd 4404 	strd	r4, r4, [sp, #16]
   18426:	e9cd 4400 	strd	r4, r4, [sp]
   1842a:	4b13      	ldr	r3, [pc, #76]	; (18478 <hci_driver_open+0x8c>)
   1842c:	4913      	ldr	r1, [pc, #76]	; (1847c <hci_driver_open+0x90>)
   1842e:	4814      	ldr	r0, [pc, #80]	; (18480 <hci_driver_open+0x94>)
   18430:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   18434:	f009 fc4a 	bl	21ccc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   18438:	4912      	ldr	r1, [pc, #72]	; (18484 <hci_driver_open+0x98>)
   1843a:	4811      	ldr	r0, [pc, #68]	; (18480 <hci_driver_open+0x94>)
   1843c:	f009 fc0c 	bl	21c58 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18440:	f06f 0307 	mvn.w	r3, #7
   18444:	e9cd 4302 	strd	r4, r3, [sp, #8]
   18448:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1844c:	e9cd 4400 	strd	r4, r4, [sp]
   18450:	4b0d      	ldr	r3, [pc, #52]	; (18488 <hci_driver_open+0x9c>)
   18452:	490e      	ldr	r1, [pc, #56]	; (1848c <hci_driver_open+0xa0>)
   18454:	480e      	ldr	r0, [pc, #56]	; (18490 <hci_driver_open+0xa4>)
   18456:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1845a:	f009 fc37 	bl	21ccc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1845e:	490d      	ldr	r1, [pc, #52]	; (18494 <hci_driver_open+0xa8>)
   18460:	480b      	ldr	r0, [pc, #44]	; (18490 <hci_driver_open+0xa4>)
   18462:	f009 fbf9 	bl	21c58 <z_impl_k_thread_name_set>
	return 0;
   18466:	e7d3      	b.n	18410 <hci_driver_open+0x24>
   18468:	200074cc 	.word	0x200074cc
   1846c:	000288b0 	.word	0x000288b0
   18470:	00028868 	.word	0x00028868
   18474:	0002ec76 	.word	0x0002ec76
   18478:	00018385 	.word	0x00018385
   1847c:	200038c0 	.word	0x200038c0
   18480:	20000c98 	.word	0x20000c98
   18484:	0002ec93 	.word	0x0002ec93
   18488:	000182d5 	.word	0x000182d5
   1848c:	20003aa0 	.word	0x20003aa0
   18490:	20000d2c 	.word	0x20000d2c
   18494:	0002ec9d 	.word	0x0002ec9d

00018498 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
   18498:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1849a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1849e:	4605      	mov	r5, r0
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   184a0:	2100      	movs	r1, #0
   184a2:	200f      	movs	r0, #15
   184a4:	f7f0 f96e 	bl	8784 <bt_buf_get_evt>
	hci_evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   184a8:	2204      	movs	r2, #4
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   184aa:	4604      	mov	r4, r0
	hci_evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   184ac:	210f      	movs	r1, #15
   184ae:	f00e ffde 	bl	2746e <hci_evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
   184b2:	2104      	movs	r1, #4
   184b4:	f104 0008 	add.w	r0, r4, #8
   184b8:	f006 f8b0 	bl	1e61c <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1U;
   184bc:	2301      	movs	r3, #1
   184be:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
   184c0:	4b02      	ldr	r3, [pc, #8]	; (184cc <cmd_status+0x34>)
	cs->status = status;
   184c2:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
   184c4:	881b      	ldrh	r3, [r3, #0]
   184c6:	8043      	strh	r3, [r0, #2]

	return buf;
}
   184c8:	4620      	mov	r0, r4
   184ca:	bd38      	pop	{r3, r4, r5, pc}
   184cc:	20001d70 	.word	0x20001d70

000184d0 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
   184d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   184d2:	4604      	mov	r4, r0
   184d4:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   184d6:	4b13      	ldr	r3, [pc, #76]	; (18524 <le_remote_feat_complete+0x54>)
{
   184d8:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   184da:	6859      	ldr	r1, [r3, #4]
   184dc:	2500      	movs	r5, #0
{
   184de:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   184e0:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   184e4:	462a      	mov	r2, r5
   184e6:	4313      	orrs	r3, r2
   184e8:	d01a      	beq.n	18520 <le_remote_feat_complete+0x50>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   184ea:	4b0f      	ldr	r3, [pc, #60]	; (18528 <le_remote_feat_complete+0x58>)
   184ec:	6819      	ldr	r1, [r3, #0]
   184ee:	462b      	mov	r3, r5
   184f0:	f001 0208 	and.w	r2, r1, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   184f4:	4313      	orrs	r3, r2
   184f6:	d013      	beq.n	18520 <le_remote_feat_complete+0x50>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   184f8:	220b      	movs	r2, #11
   184fa:	2104      	movs	r1, #4
   184fc:	f00e ffc1 	bl	27482 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
   18500:	2208      	movs	r2, #8
	sep->status = status;
   18502:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   18504:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   18508:	3003      	adds	r0, #3
   1850a:	b924      	cbnz	r4, 18516 <le_remote_feat_complete+0x46>
		memcpy(&sep->features[0],
   1850c:	1d31      	adds	r1, r6, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   1850e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   18512:	f00c bdbd 	b.w	25090 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   18516:	4629      	mov	r1, r5
}
   18518:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   1851c:	f00c bde3 	b.w	250e6 <memset>
}
   18520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18522:	bf00      	nop
   18524:	20006960 	.word	0x20006960
   18528:	20006968 	.word	0x20006968

0001852c <hci_cmd_complete>:
{
   1852c:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
   1852e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   18532:	4604      	mov	r4, r0
   18534:	460d      	mov	r5, r1
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
   18536:	200e      	movs	r0, #14
   18538:	2100      	movs	r1, #0
   1853a:	f7f0 f923 	bl	8784 <bt_buf_get_evt>
	hci_evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1853e:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
   18540:	6020      	str	r0, [r4, #0]
	hci_evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   18542:	b2d2      	uxtb	r2, r2
   18544:	210e      	movs	r1, #14
   18546:	f00e ff92 	bl	2746e <hci_evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
   1854a:	6820      	ldr	r0, [r4, #0]
   1854c:	2103      	movs	r1, #3
   1854e:	3008      	adds	r0, #8
   18550:	f006 f864 	bl	1e61c <net_buf_simple_add>
	cc->ncmd = 1U;
   18554:	2301      	movs	r3, #1
   18556:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
   18558:	4b05      	ldr	r3, [pc, #20]	; (18570 <hci_cmd_complete+0x44>)
   1855a:	881b      	ldrh	r3, [r3, #0]
   1855c:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
   18560:	6820      	ldr	r0, [r4, #0]
   18562:	4629      	mov	r1, r5
   18564:	3008      	adds	r0, #8
}
   18566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
   1856a:	f006 b857 	b.w	1e61c <net_buf_simple_add>
   1856e:	bf00      	nop
   18570:	20001d70 	.word	0x20001d70

00018574 <hci_vendor_cmd_handle_common>:
{
   18574:	b5f0      	push	{r4, r5, r6, r7, lr}
   18576:	3801      	subs	r0, #1
   18578:	b087      	sub	sp, #28
   1857a:	4614      	mov	r4, r2
   1857c:	2809      	cmp	r0, #9
   1857e:	d87e      	bhi.n	1867e <hci_vendor_cmd_handle_common+0x10a>
   18580:	e8df f000 	tbb	[pc, r0]
   18584:	7d321b05 	.word	0x7d321b05
   18588:	3e7d597d 	.word	0x3e7d597d
   1858c:	7164      	.short	0x7164
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1858e:	210d      	movs	r1, #13
   18590:	4610      	mov	r0, r2
   18592:	f7ff ffcb 	bl	1852c <hci_cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   18596:	2302      	movs	r3, #2
	rp->status = 0x00;
   18598:	2100      	movs	r1, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   1859a:	7043      	strb	r3, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   1859c:	70c3      	strb	r3, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   1859e:	7183      	strb	r3, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   185a0:	71c3      	strb	r3, [r0, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   185a2:	2363      	movs	r3, #99	; 0x63
	rp->status = 0x00;
   185a4:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   185a6:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   185a8:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
   185aa:	7141      	strb	r1, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   185ac:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   185ae:	7243      	strb	r3, [r0, #9]
   185b0:	7281      	strb	r1, [r0, #10]
   185b2:	72c1      	strb	r1, [r0, #11]
   185b4:	7301      	strb	r1, [r0, #12]
	return 0;
   185b6:	460c      	mov	r4, r1
}
   185b8:	e013      	b.n	185e2 <hci_vendor_cmd_handle_common+0x6e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   185ba:	2141      	movs	r1, #65	; 0x41
   185bc:	4610      	mov	r0, r2
   185be:	f7ff ffb5 	bl	1852c <hci_cmd_complete>
	rp->status = 0x00;
   185c2:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   185c4:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   185c6:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   185c8:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   185cc:	4621      	mov	r1, r4
   185ce:	f00c fd8a 	bl	250e6 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   185d2:	786b      	ldrb	r3, [r5, #1]
   185d4:	f063 0358 	orn	r3, r3, #88	; 0x58
   185d8:	706b      	strb	r3, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   185da:	78ab      	ldrb	r3, [r5, #2]
   185dc:	f043 0303 	orr.w	r3, r3, #3
   185e0:	70ab      	strb	r3, [r5, #2]
}
   185e2:	4620      	mov	r0, r4
   185e4:	b007      	add	sp, #28
   185e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   185e8:	2109      	movs	r1, #9
   185ea:	4610      	mov	r0, r2
   185ec:	f7ff ff9e 	bl	1852c <hci_cmd_complete>
	rp->status = 0x00;
   185f0:	2400      	movs	r4, #0
   185f2:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   185f6:	2208      	movs	r2, #8
   185f8:	4621      	mov	r1, r4
   185fa:	f00c fd74 	bl	250e6 <memset>
}
   185fe:	e7f0      	b.n	185e2 <hci_vendor_cmd_handle_common+0x6e>
	const char build_info[] = HCI_VS_BUILD_INFO;
   18600:	4b20      	ldr	r3, [pc, #128]	; (18684 <hci_vendor_cmd_handle_common+0x110>)
   18602:	aa01      	add	r2, sp, #4
   18604:	f103 0710 	add.w	r7, r3, #16
   18608:	4616      	mov	r6, r2
   1860a:	6818      	ldr	r0, [r3, #0]
   1860c:	6859      	ldr	r1, [r3, #4]
   1860e:	4615      	mov	r5, r2
   18610:	c503      	stmia	r5!, {r0, r1}
   18612:	3308      	adds	r3, #8
   18614:	42bb      	cmp	r3, r7
   18616:	462a      	mov	r2, r5
   18618:	d1f7      	bne.n	1860a <hci_vendor_cmd_handle_common+0x96>
   1861a:	881b      	ldrh	r3, [r3, #0]
   1861c:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   1861e:	2113      	movs	r1, #19
   18620:	4620      	mov	r0, r4
   18622:	f7ff ff83 	bl	1852c <hci_cmd_complete>
	rp->status = 0x00;
   18626:	2400      	movs	r4, #0
   18628:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   1862c:	2212      	movs	r2, #18
   1862e:	4631      	mov	r1, r6
   18630:	f00c fd2e 	bl	25090 <memcpy>
}
   18634:	e7d5      	b.n	185e2 <hci_vendor_cmd_handle_common+0x6e>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   18636:	6889      	ldr	r1, [r1, #8]
   18638:	2000      	movs	r0, #0
   1863a:	f7ff fdd7 	bl	181ec <ll_addr_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   1863e:	2101      	movs	r1, #1
   18640:	4620      	mov	r0, r4
   18642:	f7ff ff73 	bl	1852c <hci_cmd_complete>
	ccst->status = 0x00;
   18646:	2100      	movs	r1, #0
   18648:	7001      	strb	r1, [r0, #0]
   1864a:	e7b4      	b.n	185b6 <hci_vendor_cmd_handle_common+0x42>
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   1864c:	2118      	movs	r1, #24
   1864e:	4610      	mov	r0, r2
   18650:	f7ff ff6c 	bl	1852c <hci_cmd_complete>
	rp->status = 0x00;
   18654:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   18656:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   18658:	2101      	movs	r1, #1
	rp->status = 0x00;
   1865a:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   1865e:	f00f fb52 	bl	27d06 <hci_vendor_read_static_addr>
   18662:	7068      	strb	r0, [r5, #1]
}
   18664:	e7bd      	b.n	185e2 <hci_vendor_cmd_handle_common+0x6e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   18666:	2121      	movs	r1, #33	; 0x21
   18668:	4610      	mov	r0, r2
   1866a:	f7ff ff5f 	bl	1852c <hci_cmd_complete>
	rp->status = 0x00;
   1866e:	4601      	mov	r1, r0
   18670:	2400      	movs	r4, #0
   18672:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   18676:	3001      	adds	r0, #1
   18678:	f00f fb9b 	bl	27db2 <hci_vendor_read_key_hierarchy_roots>
}
   1867c:	e7b1      	b.n	185e2 <hci_vendor_cmd_handle_common+0x6e>
	return 0;
   1867e:	f06f 0415 	mvn.w	r4, #21
   18682:	e7ae      	b.n	185e2 <hci_vendor_cmd_handle_common+0x6e>
   18684:	0002ecc1 	.word	0x0002ecc1

00018688 <hci_cmd_handle>:
{
   18688:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   1868a:	8983      	ldrh	r3, [r0, #12]
{
   1868c:	b08b      	sub	sp, #44	; 0x2c
	struct net_buf *evt = NULL;
   1868e:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   18690:	2b02      	cmp	r3, #2
{
   18692:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
   18694:	9505      	str	r5, [sp, #20]
	if (cmd->len < sizeof(*chdr)) {
   18696:	d80c      	bhi.n	186b2 <hci_cmd_handle+0x2a>
   18698:	49c8      	ldr	r1, [pc, #800]	; (189bc <hci_cmd_handle+0x334>)
   1869a:	4bc9      	ldr	r3, [pc, #804]	; (189c0 <hci_cmd_handle+0x338>)
		BT_ERR("No HCI Command header");
   1869c:	48c9      	ldr	r0, [pc, #804]	; (189c4 <hci_cmd_handle+0x33c>)
   1869e:	1ac9      	subs	r1, r1, r3
   186a0:	08c9      	lsrs	r1, r1, #3
   186a2:	0189      	lsls	r1, r1, #6
   186a4:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid HCI CMD packet length");
   186a8:	f00a fe80 	bl	233ac <log_0>
		return NULL;
   186ac:	4628      	mov	r0, r5
}
   186ae:	b00b      	add	sp, #44	; 0x2c
   186b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
   186b2:	2103      	movs	r1, #3
   186b4:	3008      	adds	r0, #8
   186b6:	f005 ff8f 	bl	1e5d8 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   186ba:	89a2      	ldrh	r2, [r4, #12]
   186bc:	7883      	ldrb	r3, [r0, #2]
   186be:	429a      	cmp	r2, r3
   186c0:	d208      	bcs.n	186d4 <hci_cmd_handle+0x4c>
   186c2:	49be      	ldr	r1, [pc, #760]	; (189bc <hci_cmd_handle+0x334>)
   186c4:	4bbe      	ldr	r3, [pc, #760]	; (189c0 <hci_cmd_handle+0x338>)
		BT_ERR("Invalid HCI CMD packet length");
   186c6:	48c0      	ldr	r0, [pc, #768]	; (189c8 <hci_cmd_handle+0x340>)
   186c8:	1ac9      	subs	r1, r1, r3
   186ca:	08c9      	lsrs	r1, r1, #3
   186cc:	0189      	lsls	r1, r1, #6
   186ce:	f041 0101 	orr.w	r1, r1, #1
   186d2:	e7e9      	b.n	186a8 <hci_cmd_handle+0x20>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   186d4:	8802      	ldrh	r2, [r0, #0]
   186d6:	4bbd      	ldr	r3, [pc, #756]	; (189cc <hci_cmd_handle+0x344>)
	switch (BT_OGF(_opcode)) {
   186d8:	f5b2 5f10 	cmp.w	r2, #9216	; 0x2400
	_opcode = sys_le16_to_cpu(chdr->opcode);
   186dc:	801a      	strh	r2, [r3, #0]
	ocf = BT_OCF(_opcode);
   186de:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   186e2:	ea4f 2392 	mov.w	r3, r2, lsr #10
   186e6:	d20d      	bcs.n	18704 <hci_cmd_handle+0x7c>
   186e8:	b17b      	cbz	r3, 1870a <hci_cmd_handle+0x82>
   186ea:	3b01      	subs	r3, #1
   186ec:	2b07      	cmp	r3, #7
   186ee:	d80c      	bhi.n	1870a <hci_cmd_handle+0x82>
   186f0:	e8df f013 	tbh	[pc, r3, lsl #1]
   186f4:	000b0011 	.word	0x000b0011
   186f8:	005d0024 	.word	0x005d0024
   186fc:	000b000b 	.word	0x000b000b
   18700:	00e4000b 	.word	0x00e4000b
   18704:	2b3f      	cmp	r3, #63	; 0x3f
   18706:	f000 821a 	beq.w	18b3e <hci_cmd_handle+0x4b6>
		ccst = hci_cmd_complete(&evt, sizeof(*ccst));
   1870a:	2101      	movs	r1, #1
   1870c:	a805      	add	r0, sp, #20
   1870e:	f7ff ff0d 	bl	1852c <hci_cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   18712:	2301      	movs	r3, #1
   18714:	e02f      	b.n	18776 <hci_cmd_handle+0xee>
	switch (ocf) {
   18716:	2d06      	cmp	r5, #6
   18718:	d006      	beq.n	18728 <hci_cmd_handle+0xa0>
   1871a:	2d1d      	cmp	r5, #29
   1871c:	d1f5      	bne.n	1870a <hci_cmd_handle+0x82>
	handle = sys_le16_to_cpu(cmd->handle);
   1871e:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   18720:	8818      	ldrh	r0, [r3, #0]
   18722:	f00f f8ad 	bl	27880 <ll_version_ind_send>
   18726:	e004      	b.n	18732 <hci_cmd_handle+0xaa>
		disconnect(cmd, evt);
   18728:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   1872a:	7899      	ldrb	r1, [r3, #2]
   1872c:	8818      	ldrh	r0, [r3, #0]
   1872e:	f00f f886 	bl	2783e <ll_terminate_ind_send>
	*evt = cmd_status(status);
   18732:	f7ff feb1 	bl	18498 <cmd_status>
   18736:	9005      	str	r0, [sp, #20]
	return evt;
   18738:	9805      	ldr	r0, [sp, #20]
   1873a:	e7b8      	b.n	186ae <hci_cmd_handle+0x26>
	switch (ocf) {
   1873c:	2d2d      	cmp	r5, #45	; 0x2d
   1873e:	d023      	beq.n	18788 <hci_cmd_handle+0x100>
   18740:	d812      	bhi.n	18768 <hci_cmd_handle+0xe0>
   18742:	2d01      	cmp	r5, #1
   18744:	d019      	beq.n	1877a <hci_cmd_handle+0xf2>
   18746:	2d03      	cmp	r5, #3
   18748:	d1df      	bne.n	1870a <hci_cmd_handle+0x82>
	event_mask = DEFAULT_EVENT_MASK;
   1874a:	4ba1      	ldr	r3, [pc, #644]	; (189d0 <hci_cmd_handle+0x348>)
   1874c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18750:	f641 71ff 	movw	r1, #8191	; 0x1fff
   18754:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   18758:	4b9e      	ldr	r3, [pc, #632]	; (189d4 <hci_cmd_handle+0x34c>)
   1875a:	201f      	movs	r0, #31
   1875c:	2100      	movs	r1, #0
   1875e:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   18762:	f000 fe7d 	bl	19460 <ll_reset>
   18766:	e001      	b.n	1876c <hci_cmd_handle+0xe4>
	switch (ocf) {
   18768:	2d63      	cmp	r5, #99	; 0x63
   1876a:	d1ce      	bne.n	1870a <hci_cmd_handle+0x82>
		ccst = hci_cmd_complete(evt, sizeof(*ccst));
   1876c:	2101      	movs	r1, #1
   1876e:	a805      	add	r0, sp, #20
   18770:	f7ff fedc 	bl	1852c <hci_cmd_complete>
		ccst->status = 0x00;
   18774:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   18776:	7003      	strb	r3, [r0, #0]
   18778:	e7de      	b.n	18738 <hci_cmd_handle+0xb0>
	event_mask = sys_get_le64(cmd->events);
   1877a:	68a0      	ldr	r0, [r4, #8]
   1877c:	f00e fe73 	bl	27466 <sys_get_le64>
   18780:	4b93      	ldr	r3, [pc, #588]	; (189d0 <hci_cmd_handle+0x348>)
	le_event_mask = sys_get_le64(cmd->events);
   18782:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   18786:	e7f1      	b.n	1876c <hci_cmd_handle+0xe4>
		read_tx_power_level(cmd, evt);
   18788:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1878a:	2104      	movs	r1, #4
   1878c:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   1878e:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   18790:	789f      	ldrb	r7, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   18792:	f7ff fecb 	bl	1852c <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   18796:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   18798:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   1879a:	1cc3      	adds	r3, r0, #3
   1879c:	463a      	mov	r2, r7
   1879e:	4631      	mov	r1, r6
   187a0:	2002      	movs	r0, #2
   187a2:	f00e fe4d 	bl	27440 <ll_tx_pwr_lvl_get>
	rp->status = status;
   187a6:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   187a8:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   187ac:	e7c4      	b.n	18738 <hci_cmd_handle+0xb0>
	switch (ocf) {
   187ae:	3d01      	subs	r5, #1
   187b0:	2d08      	cmp	r5, #8
   187b2:	d8aa      	bhi.n	1870a <hci_cmd_handle+0x82>
   187b4:	a301      	add	r3, pc, #4	; (adr r3, 187bc <hci_cmd_handle+0x134>)
   187b6:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   187ba:	bf00      	nop
   187bc:	000187e1 	.word	0x000187e1
   187c0:	0001880b 	.word	0x0001880b
   187c4:	0001888b 	.word	0x0001888b
   187c8:	0001870b 	.word	0x0001870b
   187cc:	0001870b 	.word	0x0001870b
   187d0:	0001870b 	.word	0x0001870b
   187d4:	0001870b 	.word	0x0001870b
   187d8:	0001870b 	.word	0x0001870b
   187dc:	000188a7 	.word	0x000188a7
	rp = hci_cmd_complete(evt, sizeof(*rp));
   187e0:	2109      	movs	r1, #9
   187e2:	a805      	add	r0, sp, #20
   187e4:	f7ff fea2 	bl	1852c <hci_cmd_complete>
	rp->status = 0x00;
   187e8:	2300      	movs	r3, #0
   187ea:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
   187ec:	7083      	strb	r3, [r0, #2]
   187ee:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   187f0:	f06f 030e 	mvn.w	r3, #14
	rp->hci_version = LL_VERSION_NUMBER;
   187f4:	220a      	movs	r2, #10
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   187f6:	7143      	strb	r3, [r0, #5]
   187f8:	2305      	movs	r3, #5
   187fa:	7183      	strb	r3, [r0, #6]
	rp->hci_version = LL_VERSION_NUMBER;
   187fc:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   187fe:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   18800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	dst[0] = val;
   18804:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   18806:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   18808:	e796      	b.n	18738 <hci_cmd_handle+0xb0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1880a:	2141      	movs	r1, #65	; 0x41
   1880c:	a805      	add	r0, sp, #20
   1880e:	f7ff fe8d 	bl	1852c <hci_cmd_complete>
	rp->status = 0x00;
   18812:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   18814:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   18816:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   18818:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1881c:	f00c fc63 	bl	250e6 <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
   18820:	79a3      	ldrb	r3, [r4, #6]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   18822:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[28] |= BIT(3);
   18824:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[5] |= BIT(6) | BIT(7);
   18826:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1882a:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
   1882c:	7ae3      	ldrb	r3, [r4, #11]
   1882e:	f043 0304 	orr.w	r3, r3, #4
   18832:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   18834:	7be3      	ldrb	r3, [r4, #15]
   18836:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1883a:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
   1883c:	7c23      	ldrb	r3, [r4, #16]
   1883e:	f043 0302 	orr.w	r3, r3, #2
   18842:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
   18844:	7de3      	ldrb	r3, [r4, #23]
   18846:	f043 0304 	orr.w	r3, r3, #4
   1884a:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(6) | BIT(7);
   1884c:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1884e:	f062 0208 	orn	r2, r2, #8
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   18852:	f063 030b 	orn	r3, r3, #11
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   18856:	76a2      	strb	r2, [r4, #26]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   18858:	7723      	strb	r3, [r4, #28]
	rp->commands[26] |= BIT(2) | BIT(3);
   1885a:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[33] |= BIT(4) | BIT(5);
   1885c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[26] |= BIT(2) | BIT(3);
   18860:	f042 020f 	orr.w	r2, r2, #15
	rp->commands[33] |= BIT(4) | BIT(5);
   18864:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	rp->commands[26] |= BIT(2) | BIT(3);
   18868:	76e2      	strb	r2, [r4, #27]
	rp->commands[33] |= BIT(4) | BIT(5);
   1886a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   1886e:	7862      	ldrb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   18870:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
   18874:	f041 0108 	orr.w	r1, r1, #8
	rp->commands[0] |= BIT(5);
   18878:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[38] |= BIT(7);
   1887c:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
   18880:	7761      	strb	r1, [r4, #29]
	rp->commands[0] |= BIT(5);
   18882:	7062      	strb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   18884:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   18888:	e756      	b.n	18738 <hci_cmd_handle+0xb0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1888a:	2109      	movs	r1, #9
   1888c:	a805      	add	r0, sp, #20
   1888e:	f7ff fe4d 	bl	1852c <hci_cmd_complete>
	rp->status = 0x00;
   18892:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   18894:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   18896:	2208      	movs	r2, #8
	rp->status = 0x00;
   18898:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1889c:	f00c fc23 	bl	250e6 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   188a0:	2360      	movs	r3, #96	; 0x60
   188a2:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   188a4:	e748      	b.n	18738 <hci_cmd_handle+0xb0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   188a6:	2107      	movs	r1, #7
   188a8:	a805      	add	r0, sp, #20
   188aa:	f7ff fe3f 	bl	1852c <hci_cmd_complete>
   188ae:	4601      	mov	r1, r0
	rp->status = 0x00;
   188b0:	2000      	movs	r0, #0
   188b2:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   188b6:	f7ff fc7f 	bl	181b8 <ll_addr_get>
	if (err == -EINVAL) {
   188ba:	e73d      	b.n	18738 <hci_cmd_handle+0xb0>
	switch (ocf) {
   188bc:	2d21      	cmp	r5, #33	; 0x21
   188be:	d84b      	bhi.n	18958 <hci_cmd_handle+0x2d0>
   188c0:	2d00      	cmp	r5, #0
   188c2:	f43f af22 	beq.w	1870a <hci_cmd_handle+0x82>
   188c6:	3d01      	subs	r5, #1
   188c8:	2d20      	cmp	r5, #32
   188ca:	f63f af1e 	bhi.w	1870a <hci_cmd_handle+0x82>
   188ce:	a301      	add	r3, pc, #4	; (adr r3, 188d4 <hci_cmd_handle+0x24c>)
   188d0:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   188d4:	00018977 	.word	0x00018977
   188d8:	00018981 	.word	0x00018981
   188dc:	00018999 	.word	0x00018999
   188e0:	0001870b 	.word	0x0001870b
   188e4:	000189d9 	.word	0x000189d9
   188e8:	00018a51 	.word	0x00018a51
   188ec:	00018a6d 	.word	0x00018a6d
   188f0:	00018a7d 	.word	0x00018a7d
   188f4:	00018a89 	.word	0x00018a89
   188f8:	00018a95 	.word	0x00018a95
   188fc:	00018a9f 	.word	0x00018a9f
   18900:	00018ab7 	.word	0x00018ab7
   18904:	0001870b 	.word	0x0001870b
   18908:	0001870b 	.word	0x0001870b
   1890c:	0001870b 	.word	0x0001870b
   18910:	0001870b 	.word	0x0001870b
   18914:	0001870b 	.word	0x0001870b
   18918:	0001870b 	.word	0x0001870b
   1891c:	00018ae5 	.word	0x00018ae5
   18920:	0001870b 	.word	0x0001870b
   18924:	00018ac1 	.word	0x00018ac1
   18928:	00018adb 	.word	0x00018adb
   1892c:	000189ef 	.word	0x000189ef
   18930:	00018a15 	.word	0x00018a15
   18934:	0001870b 	.word	0x0001870b
   18938:	0001870b 	.word	0x0001870b
   1893c:	0001870b 	.word	0x0001870b
   18940:	00018a2b 	.word	0x00018a2b
   18944:	0001870b 	.word	0x0001870b
   18948:	0001870b 	.word	0x0001870b
   1894c:	0001870b 	.word	0x0001870b
   18950:	00018b01 	.word	0x00018b01
   18954:	00018b2f 	.word	0x00018b2f
   18958:	2d4b      	cmp	r5, #75	; 0x4b
   1895a:	f47f aed6 	bne.w	1870a <hci_cmd_handle+0x82>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1895e:	2103      	movs	r1, #3
   18960:	a805      	add	r0, sp, #20
   18962:	f7ff fde3 	bl	1852c <hci_cmd_complete>
	rp->status = 0x00;
   18966:	4601      	mov	r1, r0
   18968:	2300      	movs	r3, #0
   1896a:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   1896e:	3001      	adds	r0, #1
   18970:	f00e fd75 	bl	2745e <ll_tx_pwr_get>
	if (err == -EINVAL) {
   18974:	e6e0      	b.n	18738 <hci_cmd_handle+0xb0>
	le_event_mask = sys_get_le64(cmd->events);
   18976:	68a0      	ldr	r0, [r4, #8]
   18978:	f00e fd75 	bl	27466 <sys_get_le64>
   1897c:	4b15      	ldr	r3, [pc, #84]	; (189d4 <hci_cmd_handle+0x34c>)
   1897e:	e700      	b.n	18782 <hci_cmd_handle+0xfa>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   18980:	2104      	movs	r1, #4
   18982:	a805      	add	r0, sp, #20
   18984:	f7ff fdd2 	bl	1852c <hci_cmd_complete>
	rp->status = 0x00;
   18988:	2300      	movs	r3, #0
   1898a:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   1898c:	221b      	movs	r2, #27
   1898e:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   18990:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   18992:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   18994:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
   18996:	e6cf      	b.n	18738 <hci_cmd_handle+0xb0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   18998:	2109      	movs	r1, #9
   1899a:	a805      	add	r0, sp, #20
   1899c:	f7ff fdc6 	bl	1852c <hci_cmd_complete>
	rp->status = 0x00;
   189a0:	2500      	movs	r5, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   189a2:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   189a4:	2208      	movs	r2, #8
	rp->status = 0x00;
   189a6:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   189aa:	4629      	mov	r1, r5
   189ac:	f00c fb9b 	bl	250e6 <memset>
	dst[0] = val;
   189b0:	2306      	movs	r3, #6
   189b2:	7063      	strb	r3, [r4, #1]
	dst[1] = val >> 8;
   189b4:	70a5      	strb	r5, [r4, #2]
	dst[2] = val >> 16;
   189b6:	70e5      	strb	r5, [r4, #3]
	if (err == -EINVAL) {
   189b8:	e6be      	b.n	18738 <hci_cmd_handle+0xb0>
   189ba:	bf00      	nop
   189bc:	000288a8 	.word	0x000288a8
   189c0:	00028868 	.word	0x00028868
   189c4:	0002ecd3 	.word	0x0002ecd3
   189c8:	0002ece9 	.word	0x0002ece9
   189cc:	20001d70 	.word	0x20001d70
   189d0:	20006960 	.word	0x20006960
   189d4:	20006968 	.word	0x20006968
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   189d8:	68a1      	ldr	r1, [r4, #8]
   189da:	2001      	movs	r0, #1
   189dc:	f7ff fc06 	bl	181ec <ll_addr_set>
	status = ll_scan_enable(cmd->enable);
   189e0:	4604      	mov	r4, r0
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   189e2:	2101      	movs	r1, #1
   189e4:	a805      	add	r0, sp, #20
   189e6:	f7ff fda1 	bl	1852c <hci_cmd_complete>
	ccst->status = status;
   189ea:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
   189ec:	e6a4      	b.n	18738 <hci_cmd_handle+0xb0>
		le_encrypt(cmd, evt);
   189ee:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   189f0:	aa06      	add	r2, sp, #24
   189f2:	2300      	movs	r3, #0
   189f4:	f100 0110 	add.w	r1, r0, #16
   189f8:	f00f f935 	bl	27c66 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   189fc:	2111      	movs	r1, #17
   189fe:	a805      	add	r0, sp, #20
   18a00:	f7ff fd94 	bl	1852c <hci_cmd_complete>
	rp->status = 0x00;
   18a04:	2300      	movs	r3, #0
   18a06:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   18a0a:	2210      	movs	r2, #16
   18a0c:	a906      	add	r1, sp, #24
   18a0e:	f00c fb3f 	bl	25090 <memcpy>
	if (err == -EINVAL) {
   18a12:	e691      	b.n	18738 <hci_cmd_handle+0xb0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   18a14:	2109      	movs	r1, #9
   18a16:	a805      	add	r0, sp, #20
   18a18:	f7ff fd88 	bl	1852c <hci_cmd_complete>
	rp->status = 0x00;
   18a1c:	2300      	movs	r3, #0
   18a1e:	f800 3b01 	strb.w	r3, [r0], #1
	util_rand(rp->rand, count);
   18a22:	2108      	movs	r1, #8
   18a24:	f7fe fe74 	bl	17710 <util_rand>
	if (err == -EINVAL) {
   18a28:	e686      	b.n	18738 <hci_cmd_handle+0xb0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   18a2a:	2109      	movs	r1, #9
   18a2c:	a805      	add	r0, sp, #20
   18a2e:	f7ff fd7d 	bl	1852c <hci_cmd_complete>
	dst[0] = val;
   18a32:	22bf      	movs	r2, #191	; 0xbf
   18a34:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
   18a36:	22ff      	movs	r2, #255	; 0xff
   18a38:	7082      	strb	r2, [r0, #2]
	dst[0] = val;
   18a3a:	2230      	movs	r2, #48	; 0x30
   18a3c:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   18a3e:	22ec      	movs	r2, #236	; 0xec
   18a40:	7102      	strb	r2, [r0, #4]
	dst[0] = val;
   18a42:	22c0      	movs	r2, #192	; 0xc0
	rp->status = 0x00;
   18a44:	2300      	movs	r3, #0
   18a46:	7142      	strb	r2, [r0, #5]
	dst[1] = val >> 8;
   18a48:	2201      	movs	r2, #1
   18a4a:	7003      	strb	r3, [r0, #0]
   18a4c:	7182      	strb	r2, [r0, #6]
   18a4e:	e6d9      	b.n	18804 <hci_cmd_handle+0x17c>
		le_set_adv_param(cmd, evt);
   18a50:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   18a52:	7ba5      	ldrb	r5, [r4, #14]
   18a54:	79a3      	ldrb	r3, [r4, #6]
   18a56:	7962      	ldrb	r2, [r4, #5]
   18a58:	7921      	ldrb	r1, [r4, #4]
   18a5a:	8820      	ldrh	r0, [r4, #0]
   18a5c:	9502      	str	r5, [sp, #8]
   18a5e:	7b65      	ldrb	r5, [r4, #13]
   18a60:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   18a62:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   18a64:	9400      	str	r4, [sp, #0]
   18a66:	f001 fc01 	bl	1a26c <ll_adv_params_set>
   18a6a:	e7b9      	b.n	189e0 <hci_cmd_handle+0x358>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   18a6c:	2102      	movs	r1, #2
   18a6e:	a805      	add	r0, sp, #20
   18a70:	f7ff fd5c 	bl	1852c <hci_cmd_complete>
	rp->status = 0x00;
   18a74:	2300      	movs	r3, #0
   18a76:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   18a78:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   18a7a:	e65d      	b.n	18738 <hci_cmd_handle+0xb0>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   18a7c:	68a1      	ldr	r1, [r4, #8]
   18a7e:	f811 0b01 	ldrb.w	r0, [r1], #1
   18a82:	f001 fc5b 	bl	1a33c <ll_adv_data_set>
   18a86:	e7ab      	b.n	189e0 <hci_cmd_handle+0x358>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   18a88:	68a1      	ldr	r1, [r4, #8]
   18a8a:	f811 0b01 	ldrb.w	r0, [r1], #1
   18a8e:	f001 fc93 	bl	1a3b8 <ll_adv_scan_rsp_set>
   18a92:	e7a5      	b.n	189e0 <hci_cmd_handle+0x358>
	status = ll_adv_enable(cmd->enable);
   18a94:	68a3      	ldr	r3, [r4, #8]
   18a96:	7818      	ldrb	r0, [r3, #0]
   18a98:	f7e7 fd02 	bl	4a0 <ll_adv_enable>
   18a9c:	e7a0      	b.n	189e0 <hci_cmd_handle+0x358>
		le_set_scan_param(cmd, evt);
   18a9e:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   18aa0:	7963      	ldrb	r3, [r4, #5]
   18aa2:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   18aa6:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   18aaa:	7820      	ldrb	r0, [r4, #0]
   18aac:	79a4      	ldrb	r4, [r4, #6]
   18aae:	9400      	str	r4, [sp, #0]
   18ab0:	f7e7 ff2e 	bl	910 <ll_scan_params_set>
   18ab4:	e794      	b.n	189e0 <hci_cmd_handle+0x358>
	status = ll_scan_enable(cmd->enable);
   18ab6:	68a3      	ldr	r3, [r4, #8]
   18ab8:	7818      	ldrb	r0, [r3, #0]
   18aba:	f00e fd9f 	bl	275fc <ll_scan_enable>
   18abe:	e78f      	b.n	189e0 <hci_cmd_handle+0x358>
	handle = sys_le16_to_cpu(cmd->handle);
   18ac0:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   18ac2:	2108      	movs	r1, #8
   18ac4:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   18ac6:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   18ac8:	f7ff fd30 	bl	1852c <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   18acc:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   18ace:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   18ad0:	1cc1      	adds	r1, r0, #3
   18ad2:	4630      	mov	r0, r6
   18ad4:	f00e fe9c 	bl	27810 <ll_chm_get>
   18ad8:	e665      	b.n	187a6 <hci_cmd_handle+0x11e>
	handle = sys_le16_to_cpu(cmd->handle);
   18ada:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   18adc:	8818      	ldrh	r0, [r3, #0]
   18ade:	f00e febe 	bl	2785e <ll_feature_req_send>
	*evt = cmd_status(status);
   18ae2:	e626      	b.n	18732 <hci_cmd_handle+0xaa>
		le_conn_update(cmd, evt);
   18ae4:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   18ae6:	8911      	ldrh	r1, [r2, #8]
   18ae8:	8853      	ldrh	r3, [r2, #2]
   18aea:	8810      	ldrh	r0, [r2, #0]
   18aec:	9102      	str	r1, [sp, #8]
   18aee:	88d1      	ldrh	r1, [r2, #6]
   18af0:	9101      	str	r1, [sp, #4]
   18af2:	8892      	ldrh	r2, [r2, #4]
   18af4:	9200      	str	r2, [sp, #0]
   18af6:	2200      	movs	r2, #0
   18af8:	4611      	mov	r1, r2
   18afa:	f00e fe0e 	bl	2771a <ll_conn_update>
	*evt = cmd_status(status);
   18afe:	e618      	b.n	18732 <hci_cmd_handle+0xaa>
		le_conn_param_req_reply(cmd, evt);
   18b00:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   18b02:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   18b04:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   18b06:	8853      	ldrh	r3, [r2, #2]
   18b08:	9102      	str	r1, [sp, #8]
   18b0a:	88d1      	ldrh	r1, [r2, #6]
   18b0c:	9101      	str	r1, [sp, #4]
   18b0e:	8892      	ldrh	r2, [r2, #4]
   18b10:	9200      	str	r2, [sp, #0]
   18b12:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   18b14:	2102      	movs	r1, #2
   18b16:	4628      	mov	r0, r5
   18b18:	f00e fdff 	bl	2771a <ll_conn_update>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   18b1c:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   18b1e:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   18b20:	a805      	add	r0, sp, #20
   18b22:	f7ff fd03 	bl	1852c <hci_cmd_complete>
	rp->status = status;
   18b26:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   18b28:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   18b2c:	e604      	b.n	18738 <hci_cmd_handle+0xb0>
		le_conn_param_req_neg_reply(cmd, evt);
   18b2e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   18b30:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   18b32:	789a      	ldrb	r2, [r3, #2]
   18b34:	2300      	movs	r3, #0
   18b36:	e9cd 3301 	strd	r3, r3, [sp, #4]
   18b3a:	9300      	str	r3, [sp, #0]
   18b3c:	e7ea      	b.n	18b14 <hci_cmd_handle+0x48c>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(u16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   18b3e:	aa05      	add	r2, sp, #20
   18b40:	4621      	mov	r1, r4
   18b42:	4628      	mov	r0, r5
   18b44:	f7ff fd16 	bl	18574 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   18b48:	3016      	adds	r0, #22
   18b4a:	f43f adde 	beq.w	1870a <hci_cmd_handle+0x82>
   18b4e:	e5f3      	b.n	18738 <hci_cmd_handle+0xb0>

00018b50 <hci_acl_handle>:
{
   18b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
   18b54:	2300      	movs	r3, #0
   18b56:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   18b58:	8983      	ldrh	r3, [r0, #12]
   18b5a:	2b03      	cmp	r3, #3
{
   18b5c:	4605      	mov	r5, r0
   18b5e:	460e      	mov	r6, r1
	if (buf->len < sizeof(*acl)) {
   18b60:	d80c      	bhi.n	18b7c <hci_acl_handle+0x2c>
   18b62:	493b      	ldr	r1, [pc, #236]	; (18c50 <hci_acl_handle+0x100>)
   18b64:	4b3b      	ldr	r3, [pc, #236]	; (18c54 <hci_acl_handle+0x104>)
		BT_ERR("No HCI ACL header");
   18b66:	483c      	ldr	r0, [pc, #240]	; (18c58 <hci_acl_handle+0x108>)
   18b68:	1ac9      	subs	r1, r1, r3
   18b6a:	08c9      	lsrs	r1, r1, #3
   18b6c:	0189      	lsls	r1, r1, #6
   18b6e:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid HCI ACL packet length");
   18b72:	f00a fc1b 	bl	233ac <log_0>
		return -EINVAL;
   18b76:	f06f 0015 	mvn.w	r0, #21
   18b7a:	e03d      	b.n	18bf8 <hci_acl_handle+0xa8>
	acl = net_buf_pull_mem(buf, sizeof(*acl));
   18b7c:	2104      	movs	r1, #4
   18b7e:	3008      	adds	r0, #8
   18b80:	f005 fd2a 	bl	1e5d8 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   18b84:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   18b86:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   18b8a:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   18b8e:	4543      	cmp	r3, r8
   18b90:	d208      	bcs.n	18ba4 <hci_acl_handle+0x54>
   18b92:	492f      	ldr	r1, [pc, #188]	; (18c50 <hci_acl_handle+0x100>)
   18b94:	4b2f      	ldr	r3, [pc, #188]	; (18c54 <hci_acl_handle+0x104>)
		BT_ERR("Invalid HCI ACL packet length");
   18b96:	4831      	ldr	r0, [pc, #196]	; (18c5c <hci_acl_handle+0x10c>)
   18b98:	1ac9      	subs	r1, r1, r3
   18b9a:	08c9      	lsrs	r1, r1, #3
   18b9c:	0189      	lsls	r1, r1, #6
   18b9e:	f041 0101 	orr.w	r1, r1, #1
   18ba2:	e7e6      	b.n	18b72 <hci_acl_handle+0x22>
	node_tx = ll_tx_mem_acquire();
   18ba4:	f001 ff7a 	bl	1aa9c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   18ba8:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
   18bac:	4604      	mov	r4, r0
   18bae:	bb28      	cbnz	r0, 18bfc <hci_acl_handle+0xac>
   18bb0:	4928      	ldr	r1, [pc, #160]	; (18c54 <hci_acl_handle+0x104>)
   18bb2:	4b27      	ldr	r3, [pc, #156]	; (18c50 <hci_acl_handle+0x100>)
		BT_ERR("Tx Buffer Overflow");
   18bb4:	482a      	ldr	r0, [pc, #168]	; (18c60 <hci_acl_handle+0x110>)
   18bb6:	1a5b      	subs	r3, r3, r1
   18bb8:	08db      	lsrs	r3, r3, #3
   18bba:	019b      	lsls	r3, r3, #6
   18bbc:	f043 0101 	orr.w	r1, r3, #1
   18bc0:	f00a fbf4 	bl	233ac <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   18bc4:	4b27      	ldr	r3, [pc, #156]	; (18c64 <hci_acl_handle+0x114>)
   18bc6:	6819      	ldr	r1, [r3, #0]
   18bc8:	4623      	mov	r3, r4
   18bca:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   18bce:	4313      	orrs	r3, r2
   18bd0:	d010      	beq.n	18bf4 <hci_acl_handle+0xa4>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   18bd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18bd6:	2001      	movs	r0, #1
   18bd8:	f7ef fd80 	bl	86dc <bt_buf_get_rx>
	hci_evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   18bdc:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   18bde:	6030      	str	r0, [r6, #0]
	hci_evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   18be0:	211a      	movs	r1, #26
   18be2:	f00e fc44 	bl	2746e <hci_evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
   18be6:	6830      	ldr	r0, [r6, #0]
   18be8:	2101      	movs	r1, #1
   18bea:	3008      	adds	r0, #8
   18bec:	f005 fd16 	bl	1e61c <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   18bf0:	2301      	movs	r3, #1
   18bf2:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
   18bf4:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   18bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   18bfc:	08bb      	lsrs	r3, r7, #2
   18bfe:	d1ba      	bne.n	18b76 <hci_acl_handle+0x26>
	switch (bt_acl_flags_pb(flags)) {
   18c00:	b12f      	cbz	r7, 18c0e <hci_acl_handle+0xbe>
   18c02:	2f01      	cmp	r7, #1
   18c04:	d1b7      	bne.n	18b76 <hci_acl_handle+0x26>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   18c06:	7903      	ldrb	r3, [r0, #4]
   18c08:	f367 0301 	bfi	r3, r7, #0, #2
   18c0c:	e003      	b.n	18c16 <hci_acl_handle+0xc6>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   18c0e:	7903      	ldrb	r3, [r0, #4]
   18c10:	2202      	movs	r2, #2
   18c12:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data->len = len;
   18c16:	f884 8005 	strb.w	r8, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   18c1a:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   18c1c:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   18c1e:	4642      	mov	r2, r8
   18c20:	1de0      	adds	r0, r4, #7
   18c22:	f00c fa35 	bl	25090 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   18c26:	4621      	mov	r1, r4
   18c28:	f3c9 000b 	ubfx	r0, r9, #0, #12
   18c2c:	f001 ff42 	bl	1aab4 <ll_tx_mem_enqueue>
   18c30:	2800      	cmp	r0, #0
   18c32:	d0e1      	beq.n	18bf8 <hci_acl_handle+0xa8>
   18c34:	4b07      	ldr	r3, [pc, #28]	; (18c54 <hci_acl_handle+0x104>)
   18c36:	4906      	ldr	r1, [pc, #24]	; (18c50 <hci_acl_handle+0x100>)
		BT_ERR("Invalid Tx Enqueue");
   18c38:	480b      	ldr	r0, [pc, #44]	; (18c68 <hci_acl_handle+0x118>)
   18c3a:	1ac9      	subs	r1, r1, r3
   18c3c:	08c9      	lsrs	r1, r1, #3
   18c3e:	0189      	lsls	r1, r1, #6
   18c40:	f041 0101 	orr.w	r1, r1, #1
   18c44:	f00a fbb2 	bl	233ac <log_0>
		ll_tx_mem_release(node_tx);
   18c48:	4620      	mov	r0, r4
   18c4a:	f001 ff2d 	bl	1aaa8 <ll_tx_mem_release>
		return -EINVAL;
   18c4e:	e792      	b.n	18b76 <hci_acl_handle+0x26>
   18c50:	000288a8 	.word	0x000288a8
   18c54:	00028868 	.word	0x00028868
   18c58:	0002ed07 	.word	0x0002ed07
   18c5c:	0002ed19 	.word	0x0002ed19
   18c60:	0002ed37 	.word	0x0002ed37
   18c64:	20006960 	.word	0x20006960
   18c68:	0002ed4a 	.word	0x0002ed4a

00018c6c <hci_acl_encode>:
	u16_t handle;
	u8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   18c6c:	f890 3020 	ldrb.w	r3, [r0, #32]
   18c70:	f003 0303 	and.w	r3, r3, #3
   18c74:	3b01      	subs	r3, #1
   18c76:	2b01      	cmp	r3, #1
{
   18c78:	b570      	push	{r4, r5, r6, lr}
   18c7a:	4604      	mov	r4, r0
	switch (pdu_data->ll_id) {
   18c7c:	d81f      	bhi.n	18cbe <hci_acl_encode+0x52>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   18c7e:	f101 0508 	add.w	r5, r1, #8
	handle = node_rx->hdr.handle;
   18c82:	88c6      	ldrh	r6, [r0, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   18c84:	2104      	movs	r1, #4
   18c86:	4628      	mov	r0, r5
   18c88:	f005 fcc8 	bl	1e61c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   18c8c:	f894 3020 	ldrb.w	r3, [r4, #32]
   18c90:	f003 0303 	and.w	r3, r3, #3
   18c94:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   18c96:	bf0c      	ite	eq
   18c98:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   18c9c:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
   18ca0:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   18ca2:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   18ca6:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   18ca8:	4628      	mov	r0, r5
   18caa:	f005 fcb7 	bl	1e61c <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   18cae:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   18cb2:	f104 0123 	add.w	r1, r4, #35	; 0x23

	default:
		LL_ASSERT(0);
		break;
	}
}
   18cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   18cba:	f00c b9e9 	b.w	25090 <memcpy>
		LL_ASSERT(0);
   18cbe:	4a07      	ldr	r2, [pc, #28]	; (18cdc <hci_acl_encode+0x70>)
   18cc0:	4907      	ldr	r1, [pc, #28]	; (18ce0 <hci_acl_encode+0x74>)
   18cc2:	4808      	ldr	r0, [pc, #32]	; (18ce4 <hci_acl_encode+0x78>)
   18cc4:	f640 5349 	movw	r3, #3401	; 0xd49
   18cc8:	f00a faff 	bl	232ca <printk>
   18ccc:	4040      	eors	r0, r0
   18cce:	f380 8811 	msr	BASEPRI, r0
   18cd2:	f04f 0003 	mov.w	r0, #3
   18cd6:	df02      	svc	2
}
   18cd8:	bd70      	pop	{r4, r5, r6, pc}
   18cda:	bf00      	nop
   18cdc:	0002ed5d 	.word	0x0002ed5d
   18ce0:	0002d2c6 	.word	0x0002d2c6
   18ce4:	000297e6 	.word	0x000297e6

00018ce8 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   18ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = PDU_DATA(node_rx);

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   18cec:	7903      	ldrb	r3, [r0, #4]
   18cee:	88c7      	ldrh	r7, [r0, #6]
   18cf0:	2b02      	cmp	r3, #2
{
   18cf2:	b086      	sub	sp, #24
   18cf4:	4604      	mov	r4, r0
   18cf6:	460e      	mov	r6, r1
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   18cf8:	f000 80ef 	beq.w	18eda <hci_evt_encode+0x1f2>
	switch (node_rx->hdr.type) {
   18cfc:	3b04      	subs	r3, #4
   18cfe:	2b06      	cmp	r3, #6
   18d00:	f200 80dd 	bhi.w	18ebe <hci_evt_encode+0x1d6>
   18d04:	e8df f013 	tbh	[pc, r3, lsl #1]
   18d08:	00db0007 	.word	0x00db0007
   18d0c:	00db00db 	.word	0x00db00db
   18d10:	009b0056 	.word	0x009b0056
   18d14:	00b8      	.short	0x00b8
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   18d16:	4b9a      	ldr	r3, [pc, #616]	; (18f80 <hci_evt_encode+0x298>)
		le_advertising_report(pdu_data, node_rx, buf);
   18d18:	7f07      	ldrb	r7, [r0, #28]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   18d1a:	889a      	ldrh	r2, [r3, #4]
   18d1c:	6818      	ldr	r0, [r3, #0]
   18d1e:	799b      	ldrb	r3, [r3, #6]
   18d20:	f88d 3016 	strb.w	r3, [sp, #22]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18d24:	4b97      	ldr	r3, [pc, #604]	; (18f84 <hci_evt_encode+0x29c>)
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   18d26:	f8ad 2014 	strh.w	r2, [sp, #20]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18d2a:	6859      	ldr	r1, [r3, #4]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   18d2c:	9004      	str	r0, [sp, #16]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18d2e:	2500      	movs	r5, #0
   18d30:	462a      	mov	r2, r5
   18d32:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   18d36:	4313      	orrs	r3, r2
   18d38:	d039      	beq.n	18dae <hci_evt_encode+0xc6>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   18d3a:	4b93      	ldr	r3, [pc, #588]	; (18f88 <hci_evt_encode+0x2a0>)
   18d3c:	6819      	ldr	r1, [r3, #0]
   18d3e:	462b      	mov	r3, r5
   18d40:	f001 0202 	and.w	r2, r1, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18d44:	4313      	orrs	r3, r2
   18d46:	d032      	beq.n	18dae <hci_evt_encode+0xc6>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   18d48:	f894 3020 	ldrb.w	r3, [r4, #32]
   18d4c:	f003 030f 	and.w	r3, r3, #15
   18d50:	2b01      	cmp	r3, #1
		data_len = (adv->len - BDADDR_SIZE);
   18d52:	bf1e      	ittt	ne
   18d54:	f894 5021 	ldrbne.w	r5, [r4, #33]	; 0x21
   18d58:	3d06      	subne	r5, #6
   18d5a:	b2ed      	uxtbne	r5, r5
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   18d5c:	f105 020b 	add.w	r2, r5, #11
   18d60:	b2d2      	uxtb	r2, r2
   18d62:	2102      	movs	r1, #2
   18d64:	4630      	mov	r0, r6
   18d66:	f00e fb8c 	bl	27482 <meta_evt>
	sep->num_reports = 1U;
   18d6a:	2301      	movs	r3, #1
   18d6c:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   18d6e:	f894 3020 	ldrb.w	r3, [r4, #32]
   18d72:	aa06      	add	r2, sp, #24
   18d74:	f003 030f 	and.w	r3, r3, #15
   18d78:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   18d7a:	4606      	mov	r6, r0
	adv_info->evt_type = c_adv_type[adv->type];
   18d7c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   18d80:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
   18d82:	f894 3020 	ldrb.w	r3, [r4, #32]
   18d86:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18d8a:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   18d8c:	2206      	movs	r2, #6
   18d8e:	f104 0122 	add.w	r1, r4, #34	; 0x22
   18d92:	3003      	adds	r0, #3
   18d94:	f00c f97c 	bl	25090 <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   18d98:	360a      	adds	r6, #10
	adv_info->length = data_len;
   18d9a:	f806 5c01 	strb.w	r5, [r6, #-1]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   18d9e:	462a      	mov	r2, r5
   18da0:	f104 0128 	add.w	r1, r4, #40	; 0x28
   18da4:	4630      	mov	r0, r6
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   18da6:	427f      	negs	r7, r7
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   18da8:	f00c f972 	bl	25090 <memcpy>
	*prssi = rssi;
   18dac:	5577      	strb	r7, [r6, r5]
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   18dae:	b006      	add	sp, #24
   18db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18db4:	4b73      	ldr	r3, [pc, #460]	; (18f84 <hci_evt_encode+0x29c>)
   18db6:	6858      	ldr	r0, [r3, #4]
   18db8:	2100      	movs	r1, #0
   18dba:	460a      	mov	r2, r1
   18dbc:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   18dc0:	4313      	orrs	r3, r2
   18dc2:	d0f4      	beq.n	18dae <hci_evt_encode+0xc6>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   18dc4:	4b70      	ldr	r3, [pc, #448]	; (18f88 <hci_evt_encode+0x2a0>)
   18dc6:	6818      	ldr	r0, [r3, #0]
   18dc8:	460b      	mov	r3, r1
   18dca:	f000 0201 	and.w	r2, r0, #1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18dce:	4313      	orrs	r3, r2
   18dd0:	d0ed      	beq.n	18dae <hci_evt_encode+0xc6>
	u8_t status = node_rx->status;
   18dd2:	f894 8020 	ldrb.w	r8, [r4, #32]
	if (!status) {
   18dd6:	f1b8 0f00 	cmp.w	r8, #0
   18dda:	d103      	bne.n	18de4 <hci_evt_encode+0xfc>
		conn_count++;
   18ddc:	4a6b      	ldr	r2, [pc, #428]	; (18f8c <hci_evt_encode+0x2a4>)
   18dde:	6813      	ldr	r3, [r2, #0]
   18de0:	3301      	adds	r3, #1
   18de2:	6013      	str	r3, [r2, #0]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   18de4:	2212      	movs	r2, #18
   18de6:	2101      	movs	r1, #1
   18de8:	4630      	mov	r0, r6
   18dea:	f00e fb4a 	bl	27482 <meta_evt>
   18dee:	4605      	mov	r5, r0
	if (status) {
   18df0:	f1b8 0f00 	cmp.w	r8, #0
   18df4:	d006      	beq.n	18e04 <hci_evt_encode+0x11c>
		(void)memset(lecc, 0x00, sizeof(*lecc));
   18df6:	2212      	movs	r2, #18
   18df8:	2100      	movs	r1, #0
   18dfa:	f00c f974 	bl	250e6 <memset>
		lecc->status = status;
   18dfe:	f885 8000 	strb.w	r8, [r5]
		return;
   18e02:	e7d4      	b.n	18dae <hci_evt_encode+0xc6>
	lecc->status = 0x00;
   18e04:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
   18e08:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = node_rx->role;
   18e0c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   18e10:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type;
   18e12:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   18e16:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
   18e18:	2206      	movs	r2, #6
   18e1a:	f104 0123 	add.w	r1, r4, #35	; 0x23
   18e1e:	3005      	adds	r0, #5
   18e20:	f00c f936 	bl	25090 <memcpy>
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   18e24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   18e26:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
   18e2a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   18e2c:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   18e30:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   18e32:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = node_rx->sca;
   18e36:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   18e3a:	746b      	strb	r3, [r5, #17]
   18e3c:	e7b7      	b.n	18dae <hci_evt_encode+0xc6>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   18e3e:	4b51      	ldr	r3, [pc, #324]	; (18f84 <hci_evt_encode+0x29c>)
   18e40:	6819      	ldr	r1, [r3, #0]
   18e42:	2500      	movs	r5, #0
   18e44:	f001 0210 	and.w	r2, r1, #16
   18e48:	462b      	mov	r3, r5
   18e4a:	4313      	orrs	r3, r2
   18e4c:	d0af      	beq.n	18dae <hci_evt_encode+0xc6>
	hci_evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
   18e4e:	2204      	movs	r2, #4
   18e50:	2105      	movs	r1, #5
   18e52:	4630      	mov	r0, r6
   18e54:	f00e fb0b 	bl	2746e <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   18e58:	2104      	movs	r1, #4
   18e5a:	f106 0008 	add.w	r0, r6, #8
   18e5e:	f005 fbdd 	bl	1e61c <net_buf_simple_add>
	conn_count--;
   18e62:	4a4a      	ldr	r2, [pc, #296]	; (18f8c <hci_evt_encode+0x2a4>)
	ep->status = 0x00;
   18e64:	7005      	strb	r5, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   18e66:	f8a0 7001 	strh.w	r7, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
   18e6a:	f894 3020 	ldrb.w	r3, [r4, #32]
   18e6e:	70c3      	strb	r3, [r0, #3]
	conn_count--;
   18e70:	6813      	ldr	r3, [r2, #0]
   18e72:	3b01      	subs	r3, #1
   18e74:	6013      	str	r3, [r2, #0]
   18e76:	e79a      	b.n	18dae <hci_evt_encode+0xc6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18e78:	4b42      	ldr	r3, [pc, #264]	; (18f84 <hci_evt_encode+0x29c>)
   18e7a:	6858      	ldr	r0, [r3, #4]
   18e7c:	2100      	movs	r1, #0
   18e7e:	460a      	mov	r2, r1
   18e80:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   18e84:	4313      	orrs	r3, r2
   18e86:	d092      	beq.n	18dae <hci_evt_encode+0xc6>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   18e88:	4b3f      	ldr	r3, [pc, #252]	; (18f88 <hci_evt_encode+0x2a0>)
   18e8a:	6818      	ldr	r0, [r3, #0]
   18e8c:	460b      	mov	r3, r1
   18e8e:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18e92:	4313      	orrs	r3, r2
   18e94:	d08b      	beq.n	18dae <hci_evt_encode+0xc6>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   18e96:	2209      	movs	r2, #9
   18e98:	2103      	movs	r1, #3
   18e9a:	4630      	mov	r0, r6
   18e9c:	f00e faf1 	bl	27482 <meta_evt>
	sep->status = cu->status;
   18ea0:	f894 3020 	ldrb.w	r3, [r4, #32]
   18ea4:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   18ea6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   18ea8:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   18eac:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   18eae:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   18eb2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
	sep->handle = sys_cpu_to_le16(handle);
   18eb4:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   18eb8:	f8a0 3007 	strh.w	r3, [r0, #7]
   18ebc:	e777      	b.n	18dae <hci_evt_encode+0xc6>
		LL_ASSERT(0);
   18ebe:	f640 4354 	movw	r3, #3156	; 0xc54
		LL_ASSERT(0);
   18ec2:	4a33      	ldr	r2, [pc, #204]	; (18f90 <hci_evt_encode+0x2a8>)
   18ec4:	4933      	ldr	r1, [pc, #204]	; (18f94 <hci_evt_encode+0x2ac>)
   18ec6:	4834      	ldr	r0, [pc, #208]	; (18f98 <hci_evt_encode+0x2b0>)
   18ec8:	f00a f9ff 	bl	232ca <printk>
   18ecc:	4040      	eors	r0, r0
   18ece:	f380 8811 	msr	BASEPRI, r0
   18ed2:	f04f 0003 	mov.w	r0, #3
   18ed6:	df02      	svc	2
}
   18ed8:	e769      	b.n	18dae <hci_evt_encode+0xc6>
	switch (pdu_data->llctrl.opcode) {
   18eda:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   18ede:	2b09      	cmp	r3, #9
   18ee0:	d00c      	beq.n	18efc <hci_evt_encode+0x214>
   18ee2:	2b0f      	cmp	r3, #15
   18ee4:	d014      	beq.n	18f10 <hci_evt_encode+0x228>
   18ee6:	2b07      	cmp	r3, #7
   18ee8:	d147      	bne.n	18f7a <hci_evt_encode+0x292>
		le_unknown_rsp(pdu_data, handle, buf);
   18eea:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
	switch (pdu_data->llctrl.unknown_rsp.type) {
   18eee:	290e      	cmp	r1, #14
   18ef0:	d136      	bne.n	18f60 <hci_evt_encode+0x278>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   18ef2:	4633      	mov	r3, r6
   18ef4:	463a      	mov	r2, r7
   18ef6:	2100      	movs	r1, #0
   18ef8:	201a      	movs	r0, #26
   18efa:	e004      	b.n	18f06 <hci_evt_encode+0x21e>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   18efc:	460b      	mov	r3, r1
   18efe:	463a      	mov	r2, r7
   18f00:	f100 0120 	add.w	r1, r0, #32
   18f04:	2000      	movs	r0, #0
}
   18f06:	b006      	add	sp, #24
   18f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   18f0c:	f7ff bae0 	b.w	184d0 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18f10:	4b1c      	ldr	r3, [pc, #112]	; (18f84 <hci_evt_encode+0x29c>)
   18f12:	6858      	ldr	r0, [r3, #4]
   18f14:	2100      	movs	r1, #0
   18f16:	460a      	mov	r2, r1
   18f18:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   18f1c:	4313      	orrs	r3, r2
   18f1e:	d006      	beq.n	18f2e <hci_evt_encode+0x246>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   18f20:	4b19      	ldr	r3, [pc, #100]	; (18f88 <hci_evt_encode+0x2a0>)
   18f22:	6818      	ldr	r0, [r3, #0]
   18f24:	460b      	mov	r3, r1
   18f26:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18f2a:	4313      	orrs	r3, r2
   18f2c:	d109      	bne.n	18f42 <hci_evt_encode+0x25a>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   18f2e:	2300      	movs	r3, #0
   18f30:	e9cd 3301 	strd	r3, r3, [sp, #4]
   18f34:	9300      	str	r3, [sp, #0]
   18f36:	221a      	movs	r2, #26
   18f38:	2102      	movs	r1, #2
   18f3a:	4638      	mov	r0, r7
   18f3c:	f00e fbed 	bl	2771a <ll_conn_update>
		return;
   18f40:	e735      	b.n	18dae <hci_evt_encode+0xc6>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   18f42:	220a      	movs	r2, #10
   18f44:	2106      	movs	r1, #6
   18f46:	4630      	mov	r0, r6
   18f48:	f00e fa9b 	bl	27482 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   18f4c:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   18f4e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   18f50:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   18f52:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   18f54:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   18f56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   18f58:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   18f5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   18f5c:	8103      	strh	r3, [r0, #8]
   18f5e:	e726      	b.n	18dae <hci_evt_encode+0xc6>
   18f60:	4b0e      	ldr	r3, [pc, #56]	; (18f9c <hci_evt_encode+0x2b4>)
   18f62:	4a0f      	ldr	r2, [pc, #60]	; (18fa0 <hci_evt_encode+0x2b8>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   18f64:	480f      	ldr	r0, [pc, #60]	; (18fa4 <hci_evt_encode+0x2bc>)
   18f66:	1ad2      	subs	r2, r2, r3
   18f68:	08d2      	lsrs	r2, r2, #3
   18f6a:	0192      	lsls	r2, r2, #6
   18f6c:	f042 0202 	orr.w	r2, r2, #2
}
   18f70:	b006      	add	sp, #24
   18f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   18f76:	f00a ba26 	b.w	233c6 <log_1>
		LL_ASSERT(0);
   18f7a:	f640 531d 	movw	r3, #3357	; 0xd1d
   18f7e:	e7a0      	b.n	18ec2 <hci_evt_encode+0x1da>
   18f80:	00028adf 	.word	0x00028adf
   18f84:	20006960 	.word	0x20006960
   18f88:	20006968 	.word	0x20006968
   18f8c:	20000dc0 	.word	0x20000dc0
   18f90:	0002ed5d 	.word	0x0002ed5d
   18f94:	0002d2c6 	.word	0x0002d2c6
   18f98:	000297e6 	.word	0x000297e6
   18f9c:	00028868 	.word	0x00028868
   18fa0:	000288a8 	.word	0x000288a8
   18fa4:	0002e339 	.word	0x0002e339

00018fa8 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = PDU_DATA(node_rx);
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   18fa8:	7903      	ldrb	r3, [r0, #4]
   18faa:	2b02      	cmp	r3, #2
   18fac:	d006      	beq.n	18fbc <hci_get_class+0x14>

		switch (node_rx->hdr.type) {
   18fae:	3b04      	subs	r3, #4
   18fb0:	b2db      	uxtb	r3, r3
   18fb2:	2b06      	cmp	r3, #6
   18fb4:	d80b      	bhi.n	18fce <hci_get_class+0x26>
   18fb6:	4a07      	ldr	r2, [pc, #28]	; (18fd4 <hci_get_class+0x2c>)
   18fb8:	5cd0      	ldrb	r0, [r2, r3]
   18fba:	4770      	bx	lr
		default:
			return HCI_CLASS_NONE;
		}

#if defined(CONFIG_BT_CONN)
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   18fbc:	f890 3020 	ldrb.w	r3, [r0, #32]
   18fc0:	f003 0303 	and.w	r3, r3, #3
   18fc4:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_LLCP;
	} else {
		return HCI_CLASS_ACL_DATA;
   18fc6:	bf0c      	ite	eq
   18fc8:	2004      	moveq	r0, #4
   18fca:	2005      	movne	r0, #5
   18fcc:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   18fce:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   18fd0:	4770      	bx	lr
   18fd2:	bf00      	nop
   18fd4:	0002eda2 	.word	0x0002eda2

00018fd8 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   18fd8:	4b06      	ldr	r3, [pc, #24]	; (18ff4 <hci_init+0x1c>)
   18fda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18fde:	f641 71ff 	movw	r1, #8191	; 0x1fff
   18fe2:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   18fe6:	4b04      	ldr	r3, [pc, #16]	; (18ff8 <hci_init+0x20>)
   18fe8:	201f      	movs	r0, #31
   18fea:	2100      	movs	r1, #0
   18fec:	e9c3 0100 	strd	r0, r1, [r3]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   18ff0:	4770      	bx	lr
   18ff2:	bf00      	nop
   18ff4:	20006960 	.word	0x20006960
   18ff8:	20006968 	.word	0x20006968

00018ffc <ll_rx_link_inc_quota>:
	rx_alloc(UINT8_MAX);
}

static inline void ll_rx_link_inc_quota(int8_t delta)
{
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   18ffc:	2801      	cmp	r0, #1
{
   18ffe:	b538      	push	{r3, r4, r5, lr}
   19000:	4d0b      	ldr	r5, [pc, #44]	; (19030 <ll_rx_link_inc_quota+0x34>)
   19002:	4604      	mov	r4, r0
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   19004:	d10f      	bne.n	19026 <ll_rx_link_inc_quota+0x2a>
   19006:	782b      	ldrb	r3, [r5, #0]
   19008:	2b05      	cmp	r3, #5
   1900a:	d90c      	bls.n	19026 <ll_rx_link_inc_quota+0x2a>
   1900c:	4a09      	ldr	r2, [pc, #36]	; (19034 <ll_rx_link_inc_quota+0x38>)
   1900e:	490a      	ldr	r1, [pc, #40]	; (19038 <ll_rx_link_inc_quota+0x3c>)
   19010:	480a      	ldr	r0, [pc, #40]	; (1903c <ll_rx_link_inc_quota+0x40>)
   19012:	f240 335d 	movw	r3, #861	; 0x35d
   19016:	f00a f958 	bl	232ca <printk>
   1901a:	4040      	eors	r0, r0
   1901c:	f380 8811 	msr	BASEPRI, r0
   19020:	f04f 0003 	mov.w	r0, #3
   19024:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   19026:	7828      	ldrb	r0, [r5, #0]
   19028:	4404      	add	r4, r0
   1902a:	702c      	strb	r4, [r5, #0]
}
   1902c:	bd38      	pop	{r3, r4, r5, pc}
   1902e:	bf00      	nop
   19030:	20000ebc 	.word	0x20000ebc
   19034:	0002edb8 	.word	0x0002edb8
   19038:	0002edf3 	.word	0x0002edf3
   1903c:	000297e6 	.word	0x000297e6

00019040 <rx_alloc>:

	return done;
}

static inline void rx_alloc(u8_t max)
{
   19040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u8_t idx;

#if defined(CONFIG_BT_CONN)
	while (mem_link_rx.quota_pdu &&
   19044:	4f34      	ldr	r7, [pc, #208]	; (19118 <rx_alloc+0xd8>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   19046:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 19124 <rx_alloc+0xe4>
{
   1904a:	4606      	mov	r6, r0
   1904c:	46b8      	mov	r8, r7
	while (mem_link_rx.quota_pdu &&
   1904e:	783b      	ldrb	r3, [r7, #0]
   19050:	b1cb      	cbz	r3, 19086 <rx_alloc+0x46>
 */
static inline bool mfifo_enqueue_idx_get(u8_t count, u8_t first, u8_t last,
					 u8_t *idx)
{
	/* Non-destructive: Advance write-index modulo 'count' */
	last = last + 1;
   19052:	f899 4003 	ldrb.w	r4, [r9, #3]
	if (last == count) {
   19056:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1905a:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   1905e:	3401      	adds	r4, #1
   19060:	b2e4      	uxtb	r4, r4
		last = 0U;
   19062:	42a2      	cmp	r2, r4
   19064:	bf08      	it	eq
   19066:	2400      	moveq	r4, #0
	 * We want to maintain the invariant of emptiness defined by
	 * first == last, but we just advanced a copy of the write-index before
	 * and may have wrapped. So if first == last the queue is full and we
	 * can not continue
	 */
	if (last == first) {
   19068:	42a3      	cmp	r3, r4
   1906a:	d00c      	beq.n	19086 <rx_alloc+0x46>
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(&mem_link_rx.free);
   1906c:	482b      	ldr	r0, [pc, #172]	; (1911c <rx_alloc+0xdc>)
   1906e:	f00e f8aa 	bl	271c6 <mem_acquire>
		if (!link) {
   19072:	4605      	mov	r5, r0
   19074:	b138      	cbz	r0, 19086 <rx_alloc+0x46>
			break;
		}

		rx = mem_acquire(&mem_pdu_rx.free);
   19076:	482a      	ldr	r0, [pc, #168]	; (19120 <rx_alloc+0xe0>)
   19078:	f00e f8a5 	bl	271c6 <mem_acquire>
		if (!rx) {
   1907c:	bb00      	cbnz	r0, 190c0 <rx_alloc+0x80>
			mem_release(link, &mem_link_rx.free);
   1907e:	4927      	ldr	r1, [pc, #156]	; (1911c <rx_alloc+0xdc>)
   19080:	4628      	mov	r0, r5
   19082:	f00e f8b9 	bl	271f8 <mem_release>

		ll_rx_link_inc_quota(-1);
	}
#endif /* CONFIG_BT_CONN */

	if (max > mem_link_rx.quota_pdu) {
   19086:	f898 0000 	ldrb.w	r0, [r8]

	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(&mem_link_rx.free);
   1908a:	4f24      	ldr	r7, [pc, #144]	; (1911c <rx_alloc+0xdc>)
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1908c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 19128 <rx_alloc+0xe8>
   19090:	4286      	cmp	r6, r0
   19092:	bf28      	it	cs
   19094:	4606      	movcs	r6, r0
   19096:	b18e      	cbz	r6, 190bc <rx_alloc+0x7c>
	last = last + 1;
   19098:	f898 4003 	ldrb.w	r4, [r8, #3]
	if (last == count) {
   1909c:	f898 2001 	ldrb.w	r2, [r8, #1]
   190a0:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   190a4:	3401      	adds	r4, #1
   190a6:	b2e4      	uxtb	r4, r4
		last = 0U;
   190a8:	42a2      	cmp	r2, r4
   190aa:	bf08      	it	eq
   190ac:	2400      	moveq	r4, #0
	if (last == first) {
   190ae:	42a3      	cmp	r3, r4
   190b0:	d004      	beq.n	190bc <rx_alloc+0x7c>
		link = mem_acquire(&mem_link_rx.free);
   190b2:	4638      	mov	r0, r7
   190b4:	f00e f887 	bl	271c6 <mem_acquire>
		if (!link) {
   190b8:	4605      	mov	r5, r0
   190ba:	b990      	cbnz	r0, 190e2 <rx_alloc+0xa2>

		MFIFO_BY_IDX_ENQUEUE(pdu_rx_free, idx, rx);

		ll_rx_link_inc_quota(-1);
	}
}
   190bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link->mem = NULL;
   190c0:	2300      	movs	r3, #0
   190c2:	606b      	str	r3, [r5, #4]
		rx->link = link;
   190c4:	6005      	str	r5, [r0, #0]
 */
static inline void mfifo_by_idx_enqueue(u8_t *fifo, u8_t size, u8_t idx,
					void *mem, u8_t *last)
{
	/* API 2: fifo is array of void-ptrs */
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   190c6:	f899 2003 	ldrb.w	r2, [r9, #3]
   190ca:	f899 3000 	ldrb.w	r3, [r9]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   190ce:	fb02 9303 	mla	r3, r2, r3, r9
   190d2:	6058      	str	r0, [r3, #4]
		ll_rx_link_inc_quota(-1);
   190d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

	*last = idx; /* Commit: Update write index */
   190d8:	f889 4003 	strb.w	r4, [r9, #3]
   190dc:	f7ff ff8e 	bl	18ffc <ll_rx_link_inc_quota>
   190e0:	e7b5      	b.n	1904e <rx_alloc+0xe>
		rx = mem_acquire(&mem_pdu_rx.free);
   190e2:	480f      	ldr	r0, [pc, #60]	; (19120 <rx_alloc+0xe0>)
   190e4:	f00e f86f 	bl	271c6 <mem_acquire>
		if (!rx) {
   190e8:	b928      	cbnz	r0, 190f6 <rx_alloc+0xb6>
			mem_release(link, &mem_link_rx.free);
   190ea:	4628      	mov	r0, r5
   190ec:	490b      	ldr	r1, [pc, #44]	; (1911c <rx_alloc+0xdc>)
}
   190ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &mem_link_rx.free);
   190f2:	f00e b881 	b.w	271f8 <mem_release>
		rx->link = link;
   190f6:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   190f8:	f898 2003 	ldrb.w	r2, [r8, #3]
   190fc:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   19100:	fb02 8303 	mla	r3, r2, r3, r8
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   19104:	3e01      	subs	r6, #1
   19106:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   19108:	f888 4003 	strb.w	r4, [r8, #3]
		ll_rx_link_inc_quota(-1);
   1910c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   19110:	b2f6      	uxtb	r6, r6
		ll_rx_link_inc_quota(-1);
   19112:	f7ff ff73 	bl	18ffc <ll_rx_link_inc_quota>
   19116:	e7be      	b.n	19096 <rx_alloc+0x56>
   19118:	20000ebc 	.word	0x20000ebc
   1911c:	20000ec0 	.word	0x20000ec0
   19120:	20000f0c 	.word	0x20000f0c
   19124:	20006fa4 	.word	0x20006fa4
   19128:	20006fb4 	.word	0x20006fb4

0001912c <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1912c:	4b3b      	ldr	r3, [pc, #236]	; (1921c <init_reset+0xf0>)
{
   1912e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   19132:	1d18      	adds	r0, r3, #4
   19134:	2203      	movs	r2, #3
   19136:	2138      	movs	r1, #56	; 0x38
   19138:	f00e f821 	bl	2717e <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   1913c:	4b38      	ldr	r3, [pc, #224]	; (19220 <init_reset+0xf4>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1913e:	4f39      	ldr	r7, [pc, #228]	; (19224 <init_reset+0xf8>)
		link = mem_acquire(&mem_link_done.free);
   19140:	4e37      	ldr	r6, [pc, #220]	; (19220 <init_reset+0xf4>)
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   19142:	2203      	movs	r2, #3
   19144:	2108      	movs	r1, #8
   19146:	1d18      	adds	r0, r3, #4
   19148:	f00e f819 	bl	2717e <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1914c:	46b8      	mov	r8, r7
	last = last + 1;
   1914e:	78fc      	ldrb	r4, [r7, #3]
	if (last == count) {
   19150:	787a      	ldrb	r2, [r7, #1]
   19152:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   19154:	3401      	adds	r4, #1
   19156:	b2e4      	uxtb	r4, r4
		last = 0U;
   19158:	42a2      	cmp	r2, r4
   1915a:	bf08      	it	eq
   1915c:	2400      	moveq	r4, #0
	if (last == first) {
   1915e:	429c      	cmp	r4, r3
   19160:	d00d      	beq.n	1917e <init_reset+0x52>
		link = mem_acquire(&mem_link_done.free);
   19162:	4630      	mov	r0, r6
   19164:	f00e f82f 	bl	271c6 <mem_acquire>
		if (!link) {
   19168:	4605      	mov	r5, r0
   1916a:	b140      	cbz	r0, 1917e <init_reset+0x52>
		rx = mem_acquire(&mem_done.free);
   1916c:	482b      	ldr	r0, [pc, #172]	; (1921c <init_reset+0xf0>)
   1916e:	f00e f82a 	bl	271c6 <mem_acquire>
		if (!rx) {
   19172:	2800      	cmp	r0, #0
   19174:	d146      	bne.n	19204 <init_reset+0xd8>
			mem_release(link, &mem_link_done.free);
   19176:	492a      	ldr	r1, [pc, #168]	; (19220 <init_reset+0xf4>)
   19178:	4628      	mov	r0, r5
   1917a:	f00e f83d 	bl	271f8 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   1917e:	4b2a      	ldr	r3, [pc, #168]	; (19228 <init_reset+0xfc>)
   19180:	2207      	movs	r2, #7
   19182:	1d18      	adds	r0, r3, #4
   19184:	2148      	movs	r1, #72	; 0x48
   19186:	f00d fffa 	bl	2717e <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   1918a:	4b28      	ldr	r3, [pc, #160]	; (1922c <init_reset+0x100>)
   1918c:	2209      	movs	r2, #9
   1918e:	1d18      	adds	r0, r3, #4
   19190:	2108      	movs	r1, #8
   19192:	f00d fff4 	bl	2717e <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   19196:	4825      	ldr	r0, [pc, #148]	; (1922c <init_reset+0x100>)
   19198:	f00e f815 	bl	271c6 <mem_acquire>
	LL_ASSERT(link);
   1919c:	4604      	mov	r4, r0
   1919e:	b960      	cbnz	r0, 191ba <init_reset+0x8e>
   191a0:	4a23      	ldr	r2, [pc, #140]	; (19230 <init_reset+0x104>)
   191a2:	4924      	ldr	r1, [pc, #144]	; (19234 <init_reset+0x108>)
   191a4:	4824      	ldr	r0, [pc, #144]	; (19238 <init_reset+0x10c>)
   191a6:	f240 43af 	movw	r3, #1199	; 0x4af
   191aa:	f00a f88e 	bl	232ca <printk>
   191ae:	4040      	eors	r0, r0
   191b0:	f380 8811 	msr	BASEPRI, r0
   191b4:	f04f 0003 	mov.w	r0, #3
   191b8:	df02      	svc	2
	MEMQ_INIT(ull_rx, link);
   191ba:	4a20      	ldr	r2, [pc, #128]	; (1923c <init_reset+0x110>)
   191bc:	4620      	mov	r0, r4
   191be:	1f11      	subs	r1, r2, #4
   191c0:	f00e f851 	bl	27266 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   191c4:	4819      	ldr	r0, [pc, #100]	; (1922c <init_reset+0x100>)
   191c6:	f00d fffe 	bl	271c6 <mem_acquire>
	LL_ASSERT(link);
   191ca:	4604      	mov	r4, r0
   191cc:	b960      	cbnz	r0, 191e8 <init_reset+0xbc>
   191ce:	4a18      	ldr	r2, [pc, #96]	; (19230 <init_reset+0x104>)
   191d0:	4918      	ldr	r1, [pc, #96]	; (19234 <init_reset+0x108>)
   191d2:	4819      	ldr	r0, [pc, #100]	; (19238 <init_reset+0x10c>)
   191d4:	f240 43b6 	movw	r3, #1206	; 0x4b6
   191d8:	f00a f877 	bl	232ca <printk>
   191dc:	4040      	eors	r0, r0
   191de:	f380 8811 	msr	BASEPRI, r0
   191e2:	f04f 0003 	mov.w	r0, #3
   191e6:	df02      	svc	2
	MEMQ_INIT(ll_rx, link);
   191e8:	4a15      	ldr	r2, [pc, #84]	; (19240 <init_reset+0x114>)
   191ea:	4620      	mov	r0, r4
   191ec:	1f11      	subs	r1, r2, #4
   191ee:	f00e f83a 	bl	27266 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   191f2:	4b14      	ldr	r3, [pc, #80]	; (19244 <init_reset+0x118>)
   191f4:	2206      	movs	r2, #6
	rx_alloc(UINT8_MAX);
   191f6:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   191f8:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   191fa:	f7ff ff21 	bl	19040 <rx_alloc>
}
   191fe:	2000      	movs	r0, #0
   19200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx->link = link;
   19204:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   19206:	f898 2003 	ldrb.w	r2, [r8, #3]
   1920a:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1920e:	fb02 8303 	mla	r3, r2, r3, r8
   19212:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   19214:	f888 4003 	strb.w	r4, [r8, #3]
}
   19218:	e799      	b.n	1914e <init_reset+0x22>
   1921a:	bf00      	nop
   1921c:	20000df4 	.word	0x20000df4
   19220:	20000ea0 	.word	0x20000ea0
   19224:	20006f90 	.word	0x20006f90
   19228:	20000f0c 	.word	0x20000f0c
   1922c:	20000ec0 	.word	0x20000ec0
   19230:	0002edb8 	.word	0x0002edb8
   19234:	0002e45f 	.word	0x0002e45f
   19238:	000297e6 	.word	0x000297e6
   1923c:	20001114 	.word	0x20001114
   19240:	2000110c 	.word	0x2000110c
   19244:	20000ebc 	.word	0x20000ebc

00019248 <perform_lll_reset>:
{
   19248:	b510      	push	{r4, lr}
   1924a:	4604      	mov	r4, r0
	err = lll_reset();
   1924c:	f00e fb3d 	bl	278ca <lll_reset>
	LL_ASSERT(!err);
   19250:	b160      	cbz	r0, 1926c <perform_lll_reset+0x24>
   19252:	4a21      	ldr	r2, [pc, #132]	; (192d8 <perform_lll_reset+0x90>)
   19254:	4921      	ldr	r1, [pc, #132]	; (192dc <perform_lll_reset+0x94>)
   19256:	4822      	ldr	r0, [pc, #136]	; (192e0 <perform_lll_reset+0x98>)
   19258:	f44f 6399 	mov.w	r3, #1224	; 0x4c8
   1925c:	f00a f835 	bl	232ca <printk>
   19260:	4040      	eors	r0, r0
   19262:	f380 8811 	msr	BASEPRI, r0
   19266:	f04f 0003 	mov.w	r0, #3
   1926a:	df02      	svc	2
	err = lll_adv_reset();
   1926c:	f00e fbd7 	bl	27a1e <lll_adv_reset>
	LL_ASSERT(!err);
   19270:	b160      	cbz	r0, 1928c <perform_lll_reset+0x44>
   19272:	4a19      	ldr	r2, [pc, #100]	; (192d8 <perform_lll_reset+0x90>)
   19274:	4919      	ldr	r1, [pc, #100]	; (192dc <perform_lll_reset+0x94>)
   19276:	481a      	ldr	r0, [pc, #104]	; (192e0 <perform_lll_reset+0x98>)
   19278:	f240 43cd 	movw	r3, #1229	; 0x4cd
   1927c:	f00a f825 	bl	232ca <printk>
   19280:	4040      	eors	r0, r0
   19282:	f380 8811 	msr	BASEPRI, r0
   19286:	f04f 0003 	mov.w	r0, #3
   1928a:	df02      	svc	2
	err = lll_scan_reset();
   1928c:	f00e fc32 	bl	27af4 <lll_scan_reset>
	LL_ASSERT(!err);
   19290:	b160      	cbz	r0, 192ac <perform_lll_reset+0x64>
   19292:	4a11      	ldr	r2, [pc, #68]	; (192d8 <perform_lll_reset+0x90>)
   19294:	4911      	ldr	r1, [pc, #68]	; (192dc <perform_lll_reset+0x94>)
   19296:	4812      	ldr	r0, [pc, #72]	; (192e0 <perform_lll_reset+0x98>)
   19298:	f240 43d3 	movw	r3, #1235	; 0x4d3
   1929c:	f00a f815 	bl	232ca <printk>
   192a0:	4040      	eors	r0, r0
   192a2:	f380 8811 	msr	BASEPRI, r0
   192a6:	f04f 0003 	mov.w	r0, #3
   192aa:	df02      	svc	2
	err = lll_conn_reset();
   192ac:	f00e fc47 	bl	27b3e <lll_conn_reset>
	LL_ASSERT(!err);
   192b0:	b160      	cbz	r0, 192cc <perform_lll_reset+0x84>
   192b2:	4a09      	ldr	r2, [pc, #36]	; (192d8 <perform_lll_reset+0x90>)
   192b4:	4909      	ldr	r1, [pc, #36]	; (192dc <perform_lll_reset+0x94>)
   192b6:	480a      	ldr	r0, [pc, #40]	; (192e0 <perform_lll_reset+0x98>)
   192b8:	f240 43d9 	movw	r3, #1241	; 0x4d9
   192bc:	f00a f805 	bl	232ca <printk>
   192c0:	4040      	eors	r0, r0
   192c2:	f380 8811 	msr	BASEPRI, r0
   192c6:	f04f 0003 	mov.w	r0, #3
   192ca:	df02      	svc	2
	z_impl_k_sem_give(sem);
   192cc:	4620      	mov	r0, r4
}
   192ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   192d2:	f008 bbe1 	b.w	21a98 <z_impl_k_sem_give>
   192d6:	bf00      	nop
   192d8:	0002edb8 	.word	0x0002edb8
   192dc:	0002ee27 	.word	0x0002ee27
   192e0:	000297e6 	.word	0x000297e6

000192e4 <tx_cmplt_get>:

#if defined(CONFIG_BT_CONN)
static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
   192e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   192e8:	460c      	mov	r4, r1
	struct lll_tx *tx;
	u8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   192ea:	4e28      	ldr	r6, [pc, #160]	; (1938c <tx_cmplt_get+0xa8>)
					   u8_t first, u8_t last, u8_t *idx)
{
	void *p;
	u8_t i;

	if (*idx >= count) {
   192ec:	7823      	ldrb	r3, [r4, #0]
   192ee:	7871      	ldrb	r1, [r6, #1]
   192f0:	428b      	cmp	r3, r1
   192f2:	bf28      	it	cs
   192f4:	78b3      	ldrbcs	r3, [r6, #2]
{
   192f6:	4680      	mov	r8, r0
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   192f8:	7830      	ldrb	r0, [r6, #0]
		*idx = first;
   192fa:	bf28      	it	cs
   192fc:	7023      	strbcs	r3, [r4, #0]
	}

	if (*idx == last) {
   192fe:	7823      	ldrb	r3, [r4, #0]
   19300:	429a      	cmp	r2, r3
{
   19302:	4691      	mov	r9, r2
   19304:	d103      	bne.n	1930e <tx_cmplt_get+0x2a>
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
		return 0;
   19306:	2700      	movs	r7, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);

	return cmplt;
}
   19308:	4638      	mov	r0, r7
   1930a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
	}

	i = *idx + 1;
   1930e:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   19310:	4d1f      	ldr	r5, [pc, #124]	; (19390 <tx_cmplt_get+0xac>)
	i = *idx + 1;
   19312:	b2d2      	uxtb	r2, r2
		i = 0U;
   19314:	4291      	cmp	r1, r2
   19316:	bf08      	it	eq
   19318:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   1931a:	fb13 f300 	smulbb	r3, r3, r0

	*idx = i;
   1931e:	7022      	strb	r2, [r4, #0]
	if (!tx) {
   19320:	18ea      	adds	r2, r5, r3
   19322:	d0f0      	beq.n	19306 <tx_cmplt_get+0x22>
	*handle = tx->handle;
   19324:	5aeb      	ldrh	r3, [r5, r3]
   19326:	f8a8 3000 	strh.w	r3, [r8]
	cmplt = 0U;
   1932a:	2700      	movs	r7, #0
		node_tx = tx->node;
   1932c:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   1932e:	2801      	cmp	r0, #1
   19330:	f020 0103 	bic.w	r1, r0, #3
   19334:	d906      	bls.n	19344 <tx_cmplt_get+0x60>
   19336:	b331      	cbz	r1, 19386 <tx_cmplt_get+0xa2>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   19338:	7903      	ldrb	r3, [r0, #4]
   1933a:	f003 0303 	and.w	r3, r3, #3
		    (((u32_t)node_tx & ~3) &&
   1933e:	3b01      	subs	r3, #1
   19340:	2b01      	cmp	r3, #1
   19342:	d820      	bhi.n	19386 <tx_cmplt_get+0xa2>
			cmplt++;
   19344:	3701      	adds	r7, #1
   19346:	b2ff      	uxtb	r7, r7
			tx->node = (void *)1;
   19348:	2301      	movs	r3, #1
   1934a:	6053      	str	r3, [r2, #4]
		if (((u32_t)node_tx & ~3)) {
   1934c:	b109      	cbz	r1, 19352 <tx_cmplt_get+0x6e>
			ll_tx_mem_release(node_tx);
   1934e:	f001 fbab 	bl	1aaa8 <ll_tx_mem_release>
	if (*idx >= count) {
   19352:	7823      	ldrb	r3, [r4, #0]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   19354:	7872      	ldrb	r2, [r6, #1]
   19356:	7830      	ldrb	r0, [r6, #0]
   19358:	4293      	cmp	r3, r2
   1935a:	bf24      	itt	cs
   1935c:	78b3      	ldrbcs	r3, [r6, #2]
		*idx = first;
   1935e:	7023      	strbcs	r3, [r4, #0]
	if (*idx == last) {
   19360:	7823      	ldrb	r3, [r4, #0]
   19362:	4599      	cmp	r9, r3
   19364:	d0d0      	beq.n	19308 <tx_cmplt_get+0x24>
	i = *idx + 1;
   19366:	1c59      	adds	r1, r3, #1
   19368:	b2c9      	uxtb	r1, r1
	p = (void *)(fifo + (*idx) * size);
   1936a:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   1936e:	428a      	cmp	r2, r1
   19370:	bf08      	it	eq
   19372:	2100      	moveq	r1, #0
	} while (tx && tx->handle == *handle);
   19374:	18ea      	adds	r2, r5, r3
	*idx = i;
   19376:	7021      	strb	r1, [r4, #0]
   19378:	d0c6      	beq.n	19308 <tx_cmplt_get+0x24>
   1937a:	5ae9      	ldrh	r1, [r5, r3]
   1937c:	f8b8 3000 	ldrh.w	r3, [r8]
   19380:	4299      	cmp	r1, r3
   19382:	d0d3      	beq.n	1932c <tx_cmplt_get+0x48>
   19384:	e7c0      	b.n	19308 <tx_cmplt_get+0x24>
			tx->node = (void *)2;
   19386:	2302      	movs	r3, #2
   19388:	e7df      	b.n	1934a <tx_cmplt_get+0x66>
   1938a:	bf00      	nop
   1938c:	200070f0 	.word	0x200070f0
   19390:	200070f4 	.word	0x200070f4

00019394 <ll_init>:
{
   19394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	sem_recv = sem_rx;
   19396:	4b27      	ldr	r3, [pc, #156]	; (19434 <ll_init+0xa0>)
   19398:	6018      	str	r0, [r3, #0]
	cntr_init();
   1939a:	f004 f98d 	bl	1d6b8 <cntr_init>
	mayfly_init();
   1939e:	f7fe f857 	bl	17450 <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   193a2:	4a25      	ldr	r2, [pc, #148]	; (19438 <ll_init+0xa4>)
   193a4:	2103      	movs	r1, #3
   193a6:	7011      	strb	r1, [r2, #0]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   193a8:	7611      	strb	r1, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   193aa:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   193ac:	4923      	ldr	r1, [pc, #140]	; (1943c <ll_init+0xa8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   193ae:	7410      	strb	r0, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   193b0:	2304      	movs	r3, #4
   193b2:	7213      	strb	r3, [r2, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   193b4:	9105      	str	r1, [sp, #20]
   193b6:	4922      	ldr	r1, [pc, #136]	; (19440 <ll_init+0xac>)
   193b8:	9104      	str	r1, [sp, #16]
   193ba:	4922      	ldr	r1, [pc, #136]	; (19444 <ll_init+0xb0>)
   193bc:	9103      	str	r1, [sp, #12]
   193be:	4922      	ldr	r1, [pc, #136]	; (19448 <ll_init+0xb4>)
   193c0:	9102      	str	r1, [sp, #8]
   193c2:	210c      	movs	r1, #12
   193c4:	e9cd 2100 	strd	r2, r1, [sp]
   193c8:	2000      	movs	r0, #0
   193ca:	4a20      	ldr	r2, [pc, #128]	; (1944c <ll_init+0xb8>)
   193cc:	2107      	movs	r1, #7
   193ce:	f7fe fddd 	bl	17f8c <ticker_init>
	LL_ASSERT(!err);
   193d2:	b160      	cbz	r0, 193ee <ll_init+0x5a>
   193d4:	4a1e      	ldr	r2, [pc, #120]	; (19450 <ll_init+0xbc>)
   193d6:	491f      	ldr	r1, [pc, #124]	; (19454 <ll_init+0xc0>)
   193d8:	481f      	ldr	r0, [pc, #124]	; (19458 <ll_init+0xc4>)
   193da:	f44f 7388 	mov.w	r3, #272	; 0x110
   193de:	f009 ff74 	bl	232ca <printk>
   193e2:	4040      	eors	r0, r0
   193e4:	f380 8811 	msr	BASEPRI, r0
   193e8:	f04f 0003 	mov.w	r0, #3
   193ec:	df02      	svc	2
	return z_impl_k_sem_init(sem, initial_count, limit);
   193ee:	2201      	movs	r2, #1
   193f0:	2100      	movs	r1, #0
   193f2:	481a      	ldr	r0, [pc, #104]	; (1945c <ll_init+0xc8>)
   193f4:	f00e ffb7 	bl	28366 <z_impl_k_sem_init>
	err = lll_init();
   193f8:	f002 fdee 	bl	1bfd8 <lll_init>
	if (err) {
   193fc:	b9b0      	cbnz	r0, 1942c <ll_init+0x98>
	err = init_reset();
   193fe:	f7ff fe95 	bl	1912c <init_reset>
	if (err) {
   19402:	b998      	cbnz	r0, 1942c <ll_init+0x98>
	err = lll_adv_init();
   19404:	f00e fb09 	bl	27a1a <lll_adv_init>
	if (err) {
   19408:	b980      	cbnz	r0, 1942c <ll_init+0x98>
	err = ull_adv_init();
   1940a:	f00e f8ce 	bl	275aa <ull_adv_init>
	if (err) {
   1940e:	b968      	cbnz	r0, 1942c <ll_init+0x98>
	err = lll_scan_init();
   19410:	f00e fb6e 	bl	27af0 <lll_scan_init>
	if (err) {
   19414:	b950      	cbnz	r0, 1942c <ll_init+0x98>
	err = ull_scan_init();
   19416:	f00e f8d6 	bl	275c6 <ull_scan_init>
	if (err) {
   1941a:	b938      	cbnz	r0, 1942c <ll_init+0x98>
	err = lll_conn_init();
   1941c:	f00e fb8d 	bl	27b3a <lll_conn_init>
	if (err) {
   19420:	b920      	cbnz	r0, 1942c <ll_init+0x98>
}
   19422:	b007      	add	sp, #28
   19424:	f85d eb04 	ldr.w	lr, [sp], #4
	err = ull_conn_init();
   19428:	f001 bba6 	b.w	1ab78 <ull_conn_init>
}
   1942c:	b007      	add	sp, #28
   1942e:	f85d fb04 	ldr.w	pc, [sp], #4
   19432:	bf00      	nop
   19434:	20001118 	.word	0x20001118
   19438:	2000148c 	.word	0x2000148c
   1943c:	00027ced 	.word	0x00027ced
   19440:	0001df6d 	.word	0x0001df6d
   19444:	0001df15 	.word	0x0001df15
   19448:	2000124c 	.word	0x2000124c
   1944c:	20001134 	.word	0x20001134
   19450:	0002edb8 	.word	0x0002edb8
   19454:	0002ee27 	.word	0x0002ee27
   19458:	000297e6 	.word	0x000297e6
   1945c:	2000111c 	.word	0x2000111c

00019460 <ll_reset>:
{
   19460:	b510      	push	{r4, lr}
   19462:	b086      	sub	sp, #24
	err = ull_adv_reset();
   19464:	f00e f8a3 	bl	275ae <ull_adv_reset>
	LL_ASSERT(!err);
   19468:	b160      	cbz	r0, 19484 <ll_reset+0x24>
   1946a:	4a35      	ldr	r2, [pc, #212]	; (19540 <ll_reset+0xe0>)
   1946c:	4935      	ldr	r1, [pc, #212]	; (19544 <ll_reset+0xe4>)
   1946e:	4836      	ldr	r0, [pc, #216]	; (19548 <ll_reset+0xe8>)
   19470:	f44f 73af 	mov.w	r3, #350	; 0x15e
   19474:	f009 ff29 	bl	232ca <printk>
   19478:	4040      	eors	r0, r0
   1947a:	f380 8811 	msr	BASEPRI, r0
   1947e:	f04f 0003 	mov.w	r0, #3
   19482:	df02      	svc	2
	err = ull_scan_reset();
   19484:	f00e f8b5 	bl	275f2 <ull_scan_reset>
	LL_ASSERT(!err);
   19488:	b160      	cbz	r0, 194a4 <ll_reset+0x44>
   1948a:	4a2d      	ldr	r2, [pc, #180]	; (19540 <ll_reset+0xe0>)
   1948c:	492d      	ldr	r1, [pc, #180]	; (19544 <ll_reset+0xe4>)
   1948e:	482e      	ldr	r0, [pc, #184]	; (19548 <ll_reset+0xe8>)
   19490:	f44f 73b2 	mov.w	r3, #356	; 0x164
   19494:	f009 ff19 	bl	232ca <printk>
   19498:	4040      	eors	r0, r0
   1949a:	f380 8811 	msr	BASEPRI, r0
   1949e:	f04f 0003 	mov.w	r0, #3
   194a2:	df02      	svc	2
	err = ull_conn_reset();
   194a4:	f001 fb76 	bl	1ab94 <ull_conn_reset>
	LL_ASSERT(!err);
   194a8:	b160      	cbz	r0, 194c4 <ll_reset+0x64>
   194aa:	4a25      	ldr	r2, [pc, #148]	; (19540 <ll_reset+0xe0>)
   194ac:	4925      	ldr	r1, [pc, #148]	; (19544 <ll_reset+0xe4>)
   194ae:	4826      	ldr	r0, [pc, #152]	; (19548 <ll_reset+0xe8>)
   194b0:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   194b4:	f009 ff09 	bl	232ca <printk>
   194b8:	4040      	eors	r0, r0
   194ba:	f380 8811 	msr	BASEPRI, r0
   194be:	f04f 0003 	mov.w	r0, #3
   194c2:	df02      	svc	2
	MFIFO_INIT(tx_ack);
   194c4:	4b21      	ldr	r3, [pc, #132]	; (1954c <ll_reset+0xec>)
   194c6:	2400      	movs	r4, #0
   194c8:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(prep);
   194ca:	4b21      	ldr	r3, [pc, #132]	; (19550 <ll_reset+0xf0>)
   194cc:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(done);
   194ce:	4b21      	ldr	r3, [pc, #132]	; (19554 <ll_reset+0xf4>)
   194d0:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   194d2:	4b21      	ldr	r3, [pc, #132]	; (19558 <ll_reset+0xf8>)
   194d4:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   194d6:	4b21      	ldr	r3, [pc, #132]	; (1955c <ll_reset+0xfc>)
   194d8:	805c      	strh	r4, [r3, #2]
   194da:	2201      	movs	r2, #1
   194dc:	4621      	mov	r1, r4
   194de:	4668      	mov	r0, sp
   194e0:	f00e ff41 	bl	28366 <z_impl_k_sem_init>
		mfy.param = &sem;
   194e4:	4b1e      	ldr	r3, [pc, #120]	; (19560 <ll_reset+0x100>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   194e6:	4622      	mov	r2, r4
   194e8:	4621      	mov	r1, r4
   194ea:	2003      	movs	r0, #3
		mfy.param = &sem;
   194ec:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   194f0:	f7fe f800 	bl	174f4 <mayfly_enqueue>
		LL_ASSERT(!retval);
   194f4:	b160      	cbz	r0, 19510 <ll_reset+0xb0>
   194f6:	4a12      	ldr	r2, [pc, #72]	; (19540 <ll_reset+0xe0>)
   194f8:	491a      	ldr	r1, [pc, #104]	; (19564 <ll_reset+0x104>)
   194fa:	4813      	ldr	r0, [pc, #76]	; (19548 <ll_reset+0xe8>)
   194fc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
   19500:	f009 fee3 	bl	232ca <printk>
   19504:	4040      	eors	r0, r0
   19506:	f380 8811 	msr	BASEPRI, r0
   1950a:	f04f 0003 	mov.w	r0, #3
   1950e:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   19510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19514:	4668      	mov	r0, sp
   19516:	f008 fb03 	bl	21b20 <z_impl_k_sem_take>
	err = init_reset();
   1951a:	f7ff fe07 	bl	1912c <init_reset>
	LL_ASSERT(!err);
   1951e:	b160      	cbz	r0, 1953a <ll_reset+0xda>
   19520:	4a07      	ldr	r2, [pc, #28]	; (19540 <ll_reset+0xe0>)
   19522:	4908      	ldr	r1, [pc, #32]	; (19544 <ll_reset+0xe4>)
   19524:	4808      	ldr	r0, [pc, #32]	; (19548 <ll_reset+0xe8>)
   19526:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   1952a:	f009 fece 	bl	232ca <printk>
   1952e:	4040      	eors	r0, r0
   19530:	f380 8811 	msr	BASEPRI, r0
   19534:	f04f 0003 	mov.w	r0, #3
   19538:	df02      	svc	2
}
   1953a:	b006      	add	sp, #24
   1953c:	bd10      	pop	{r4, pc}
   1953e:	bf00      	nop
   19540:	0002edb8 	.word	0x0002edb8
   19544:	0002ee27 	.word	0x0002ee27
   19548:	000297e6 	.word	0x000297e6
   1954c:	200070f0 	.word	0x200070f0
   19550:	20006fcc 	.word	0x20006fcc
   19554:	20006f90 	.word	0x20006f90
   19558:	20006fb4 	.word	0x20006fb4
   1955c:	20006fa4 	.word	0x20006fa4
   19560:	20007114 	.word	0x20007114
   19564:	0002ee2c 	.word	0x0002ee2c

00019568 <ll_rx_get>:
{
   19568:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   1956c:	4f25      	ldr	r7, [pc, #148]	; (19604 <ll_rx_get+0x9c>)
   1956e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 19614 <ll_rx_get+0xac>
{
   19572:	4605      	mov	r5, r0
   19574:	460c      	mov	r4, r1
   19576:	46b9      	mov	r9, r7
	*node_rx = NULL;
   19578:	2300      	movs	r3, #0
   1957a:	602b      	str	r3, [r5, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   1957c:	e9d7 0100 	ldrd	r0, r1, [r7]
   19580:	aa01      	add	r2, sp, #4
   19582:	f00d fe85 	bl	27290 <memq_peek>
	if (link) {
   19586:	4606      	mov	r6, r0
   19588:	b3a8      	cbz	r0, 195f6 <ll_rx_get+0x8e>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1958a:	9b01      	ldr	r3, [sp, #4]
   1958c:	491e      	ldr	r1, [pc, #120]	; (19608 <ll_rx_get+0xa0>)
   1958e:	781a      	ldrb	r2, [r3, #0]
   19590:	4620      	mov	r0, r4
   19592:	f7ff fea7 	bl	192e4 <tx_cmplt_get>
		if (!cmplt) {
   19596:	bb58      	cbnz	r0, 195f0 <ll_rx_get+0x88>
			f = mfifo_tx_ack.f;
   19598:	f898 3002 	ldrb.w	r3, [r8, #2]
   1959c:	f88d 3001 	strb.w	r3, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
   195a0:	f898 2003 	ldrb.w	r2, [r8, #3]
   195a4:	4682      	mov	sl, r0
   195a6:	f10d 0101 	add.w	r1, sp, #1
   195aa:	f10d 0002 	add.w	r0, sp, #2
   195ae:	f7ff fe99 	bl	192e4 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   195b2:	ea4a 0200 	orr.w	r2, sl, r0
   195b6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   195ba:	d1f1      	bne.n	195a0 <ll_rx_get+0x38>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
   195bc:	9b01      	ldr	r3, [sp, #4]
   195be:	7919      	ldrb	r1, [r3, #4]
   195c0:	2903      	cmp	r1, #3
   195c2:	d113      	bne.n	195ec <ll_rx_get+0x84>
				(void)memq_dequeue(memq_ll_rx.tail,
   195c4:	4639      	mov	r1, r7
   195c6:	f8d9 0004 	ldr.w	r0, [r9, #4]
   195ca:	f00d fe69 	bl	272a0 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   195ce:	490f      	ldr	r1, [pc, #60]	; (1960c <ll_rx_get+0xa4>)
   195d0:	4630      	mov	r0, r6
   195d2:	f00d fe11 	bl	271f8 <mem_release>
				ll_rx_link_inc_quota(1);
   195d6:	2001      	movs	r0, #1
   195d8:	f7ff fd10 	bl	18ffc <ll_rx_link_inc_quota>
				mem_release(rx, &mem_pdu_rx.free);
   195dc:	9801      	ldr	r0, [sp, #4]
   195de:	490c      	ldr	r1, [pc, #48]	; (19610 <ll_rx_get+0xa8>)
   195e0:	f00d fe0a 	bl	271f8 <mem_release>
				rx_alloc(1);
   195e4:	2001      	movs	r0, #1
   195e6:	f7ff fd2b 	bl	19040 <rx_alloc>
				goto ll_rx_get_again;
   195ea:	e7c5      	b.n	19578 <ll_rx_get+0x10>
			*node_rx = rx;
   195ec:	602b      	str	r3, [r5, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   195ee:	4610      	mov	r0, r2
}
   195f0:	b002      	add	sp, #8
   195f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   195f6:	f898 2003 	ldrb.w	r2, [r8, #3]
   195fa:	4903      	ldr	r1, [pc, #12]	; (19608 <ll_rx_get+0xa0>)
   195fc:	4620      	mov	r0, r4
   195fe:	f7ff fe71 	bl	192e4 <tx_cmplt_get>
   19602:	e7f5      	b.n	195f0 <ll_rx_get+0x88>
   19604:	20001108 	.word	0x20001108
   19608:	200070f2 	.word	0x200070f2
   1960c:	20000ec0 	.word	0x20000ec0
   19610:	20000f0c 	.word	0x20000f0c
   19614:	200070f0 	.word	0x200070f0

00019618 <ll_rx_dequeue>:
{
   19618:	b573      	push	{r0, r1, r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1961a:	494b      	ldr	r1, [pc, #300]	; (19748 <ll_rx_dequeue+0x130>)
	struct node_rx_hdr *rx = NULL;
   1961c:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1961e:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   19620:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   19622:	aa01      	add	r2, sp, #4
   19624:	f00d fe3c 	bl	272a0 <memq_dequeue>
	LL_ASSERT(link);
   19628:	4604      	mov	r4, r0
   1962a:	b960      	cbnz	r0, 19646 <ll_rx_dequeue+0x2e>
   1962c:	4a47      	ldr	r2, [pc, #284]	; (1974c <ll_rx_dequeue+0x134>)
   1962e:	4948      	ldr	r1, [pc, #288]	; (19750 <ll_rx_dequeue+0x138>)
   19630:	4848      	ldr	r0, [pc, #288]	; (19754 <ll_rx_dequeue+0x13c>)
   19632:	f240 230e 	movw	r3, #526	; 0x20e
   19636:	f009 fe48 	bl	232ca <printk>
   1963a:	4040      	eors	r0, r0
   1963c:	f380 8811 	msr	BASEPRI, r0
   19640:	f04f 0003 	mov.w	r0, #3
   19644:	df02      	svc	2
	mem_release(link, &mem_link_rx.free);
   19646:	4944      	ldr	r1, [pc, #272]	; (19758 <ll_rx_dequeue+0x140>)
   19648:	4620      	mov	r0, r4
   1964a:	f00d fdd5 	bl	271f8 <mem_release>
	switch (rx->type) {
   1964e:	9b01      	ldr	r3, [sp, #4]
   19650:	791a      	ldrb	r2, [r3, #4]
   19652:	2a0d      	cmp	r2, #13
   19654:	d875      	bhi.n	19742 <ll_rx_dequeue+0x12a>
   19656:	e8df f002 	tbb	[pc, r2]
   1965a:	7464      	.short	0x7464
   1965c:	74647464 	.word	0x74647464
   19660:	64077474 	.word	0x64077474
   19664:	64746464 	.word	0x64746464
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   19668:	f893 2020 	ldrb.w	r2, [r3, #32]
   1966c:	2a3c      	cmp	r2, #60	; 0x3c
   1966e:	d003      	beq.n	19678 <ll_rx_dequeue+0x60>
   19670:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
   19674:	2900      	cmp	r1, #0
   19676:	d04f      	beq.n	19718 <ll_rx_dequeue+0x100>
			struct lll_adv *lll = ftr->param;
   19678:	689e      	ldr	r6, [r3, #8]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1967a:	2a3c      	cmp	r2, #60	; 0x3c
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   1967c:	6835      	ldr	r5, [r6, #0]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1967e:	d140      	bne.n	19702 <ll_rx_dequeue+0xea>
				conn_lll = lll->conn;
   19680:	68b4      	ldr	r4, [r6, #8]
				LL_ASSERT(conn_lll);
   19682:	b964      	cbnz	r4, 1969e <ll_rx_dequeue+0x86>
   19684:	4a31      	ldr	r2, [pc, #196]	; (1974c <ll_rx_dequeue+0x134>)
   19686:	4935      	ldr	r1, [pc, #212]	; (1975c <ll_rx_dequeue+0x144>)
   19688:	4832      	ldr	r0, [pc, #200]	; (19754 <ll_rx_dequeue+0x13c>)
   1968a:	f240 2327 	movw	r3, #551	; 0x227
   1968e:	f009 fe1c 	bl	232ca <printk>
   19692:	4040      	eors	r0, r0
   19694:	f380 8811 	msr	BASEPRI, r0
   19698:	f04f 0003 	mov.w	r0, #3
   1969c:	df02      	svc	2
				lll->conn = NULL;
   1969e:	2300      	movs	r3, #0
   196a0:	60b3      	str	r3, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   196a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   196a4:	b163      	cbz	r3, 196c0 <ll_rx_dequeue+0xa8>
   196a6:	4a29      	ldr	r2, [pc, #164]	; (1974c <ll_rx_dequeue+0x134>)
   196a8:	492d      	ldr	r1, [pc, #180]	; (19760 <ll_rx_dequeue+0x148>)
   196aa:	482a      	ldr	r0, [pc, #168]	; (19754 <ll_rx_dequeue+0x13c>)
   196ac:	f240 232a 	movw	r3, #554	; 0x22a
   196b0:	f009 fe0b 	bl	232ca <printk>
   196b4:	4040      	eors	r0, r0
   196b6:	f380 8811 	msr	BASEPRI, r0
   196ba:	f04f 0003 	mov.w	r0, #3
   196be:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   196c0:	f104 0144 	add.w	r1, r4, #68	; 0x44
   196c4:	f104 0040 	add.w	r0, r4, #64	; 0x40
   196c8:	f00d fdd0 	bl	2726c <memq_deinit>
				LL_ASSERT(link);
   196cc:	4606      	mov	r6, r0
   196ce:	b960      	cbnz	r0, 196ea <ll_rx_dequeue+0xd2>
   196d0:	4a1e      	ldr	r2, [pc, #120]	; (1974c <ll_rx_dequeue+0x134>)
   196d2:	491f      	ldr	r1, [pc, #124]	; (19750 <ll_rx_dequeue+0x138>)
   196d4:	481f      	ldr	r0, [pc, #124]	; (19754 <ll_rx_dequeue+0x13c>)
   196d6:	f240 232d 	movw	r3, #557	; 0x22d
   196da:	f009 fdf6 	bl	232ca <printk>
   196de:	4040      	eors	r0, r0
   196e0:	f380 8811 	msr	BASEPRI, r0
   196e4:	f04f 0003 	mov.w	r0, #3
   196e8:	df02      	svc	2
				ll_conn_release(conn);
   196ea:	6820      	ldr	r0, [r4, #0]
				conn_lll->link_tx_free = link;
   196ec:	6526      	str	r6, [r4, #80]	; 0x50
				ll_conn_release(conn);
   196ee:	f001 f951 	bl	1a994 <ll_conn_release>
			adv->is_enabled = 0U;
   196f2:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
   196f6:	f36f 0300 	bfc	r3, #0, #1
   196fa:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
}
   196fe:	b002      	add	sp, #8
   19700:	bd70      	pop	{r4, r5, r6, pc}
				if (adv->node_rx_cc_free) {
   19702:	f8d5 00d4 	ldr.w	r0, [r5, #212]	; 0xd4
   19706:	2800      	cmp	r0, #0
   19708:	d0f3      	beq.n	196f2 <ll_rx_dequeue+0xda>
					adv->node_rx_cc_free = NULL;
   1970a:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   1970c:	4915      	ldr	r1, [pc, #84]	; (19764 <ll_rx_dequeue+0x14c>)
					adv->node_rx_cc_free = NULL;
   1970e:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
					mem_release(rx_free, &mem_pdu_rx.free);
   19712:	f00d fd71 	bl	271f8 <mem_release>
   19716:	e7ec      	b.n	196f2 <ll_rx_dequeue+0xda>
			LL_ASSERT(0);
   19718:	f240 2349 	movw	r3, #585	; 0x249
		LL_ASSERT(0);
   1971c:	4a0b      	ldr	r2, [pc, #44]	; (1974c <ll_rx_dequeue+0x134>)
   1971e:	4912      	ldr	r1, [pc, #72]	; (19768 <ll_rx_dequeue+0x150>)
   19720:	e005      	b.n	1972e <ll_rx_dequeue+0x116>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   19722:	2a00      	cmp	r2, #0
   19724:	d1eb      	bne.n	196fe <ll_rx_dequeue+0xe6>
   19726:	4a09      	ldr	r2, [pc, #36]	; (1974c <ll_rx_dequeue+0x134>)
   19728:	4910      	ldr	r1, [pc, #64]	; (1976c <ll_rx_dequeue+0x154>)
   1972a:	f240 239a 	movw	r3, #666	; 0x29a
		LL_ASSERT(0);
   1972e:	4809      	ldr	r0, [pc, #36]	; (19754 <ll_rx_dequeue+0x13c>)
   19730:	f009 fdcb 	bl	232ca <printk>
   19734:	4040      	eors	r0, r0
   19736:	f380 8811 	msr	BASEPRI, r0
   1973a:	f04f 0003 	mov.w	r0, #3
   1973e:	df02      	svc	2
}
   19740:	e7dd      	b.n	196fe <ll_rx_dequeue+0xe6>
		LL_ASSERT(0);
   19742:	f240 239e 	movw	r3, #670	; 0x29e
   19746:	e7e9      	b.n	1971c <ll_rx_dequeue+0x104>
   19748:	20001108 	.word	0x20001108
   1974c:	0002edb8 	.word	0x0002edb8
   19750:	0002e45f 	.word	0x0002e45f
   19754:	000297e6 	.word	0x000297e6
   19758:	20000ec0 	.word	0x20000ec0
   1975c:	0002ee34 	.word	0x0002ee34
   19760:	0002ee3d 	.word	0x0002ee3d
   19764:	20000f0c 	.word	0x20000f0c
   19768:	0002d2c6 	.word	0x0002d2c6
   1976c:	0002ee55 	.word	0x0002ee55

00019770 <ll_rx_mem_release>:
{
   19770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   19774:	6804      	ldr	r4, [r0, #0]
			LL_ASSERT(0);
   19776:	4d40      	ldr	r5, [pc, #256]	; (19878 <ll_rx_mem_release+0x108>)
   19778:	f8df 9118 	ldr.w	r9, [pc, #280]	; 19894 <ll_rx_mem_release+0x124>
   1977c:	4e3f      	ldr	r6, [pc, #252]	; (1987c <ll_rx_mem_release+0x10c>)
{
   1977e:	4607      	mov	r7, r0
	while (rx) {
   19780:	b92c      	cbnz	r4, 1978e <ll_rx_mem_release+0x1e>
	*node_rx = rx;
   19782:	603c      	str	r4, [r7, #0]
	rx_alloc(UINT8_MAX);
   19784:	20ff      	movs	r0, #255	; 0xff
}
   19786:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   1978a:	f7ff bc59 	b.w	19040 <rx_alloc>
		rx = rx->next;
   1978e:	7923      	ldrb	r3, [r4, #4]
   19790:	f8d4 a000 	ldr.w	sl, [r4]
		switch (rx_free->type) {
   19794:	2b0d      	cmp	r3, #13
   19796:	d861      	bhi.n	1985c <ll_rx_mem_release+0xec>
   19798:	e8df f003 	tbb	[pc, r3]
   1979c:	601f601f 	.word	0x601f601f
   197a0:	6060601f 	.word	0x6060601f
   197a4:	1f1f3207 	.word	0x1f1f3207
   197a8:	1f60      	.short	0x1f60
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   197aa:	f894 3020 	ldrb.w	r3, [r4, #32]
   197ae:	2b3c      	cmp	r3, #60	; 0x3c
   197b0:	d105      	bne.n	197be <ll_rx_mem_release+0x4e>
			mem_release(rx_free, &mem_pdu_rx.free);
   197b2:	4933      	ldr	r1, [pc, #204]	; (19880 <ll_rx_mem_release+0x110>)
   197b4:	4620      	mov	r0, r4
   197b6:	f00d fd1f 	bl	271f8 <mem_release>
{
   197ba:	4654      	mov	r4, sl
   197bc:	e7e0      	b.n	19780 <ll_rx_mem_release+0x10>
				LL_ASSERT(!cc->status);
   197be:	b163      	cbz	r3, 197da <ll_rx_mem_release+0x6a>
   197c0:	4930      	ldr	r1, [pc, #192]	; (19884 <ll_rx_mem_release+0x114>)
   197c2:	f240 23f6 	movw	r3, #758	; 0x2f6
   197c6:	462a      	mov	r2, r5
   197c8:	4630      	mov	r0, r6
   197ca:	f009 fd7e 	bl	232ca <printk>
   197ce:	4040      	eors	r0, r0
   197d0:	f380 8811 	msr	BASEPRI, r0
   197d4:	f04f 0003 	mov.w	r0, #3
   197d8:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   197da:	7923      	ldrb	r3, [r4, #4]
   197dc:	b963      	cbnz	r3, 197f8 <ll_rx_mem_release+0x88>
   197de:	492a      	ldr	r1, [pc, #168]	; (19888 <ll_rx_mem_release+0x118>)
   197e0:	f240 3337 	movw	r3, #823	; 0x337
   197e4:	462a      	mov	r2, r5
   197e6:	4630      	mov	r0, r6
   197e8:	f009 fd6f 	bl	232ca <printk>
   197ec:	4040      	eors	r0, r0
   197ee:	f380 8811 	msr	BASEPRI, r0
   197f2:	f04f 0003 	mov.w	r0, #3
   197f6:	df02      	svc	2
			ll_rx_link_inc_quota(1);
   197f8:	2001      	movs	r0, #1
   197fa:	f7ff fbff 	bl	18ffc <ll_rx_link_inc_quota>
   197fe:	e7d8      	b.n	197b2 <ll_rx_mem_release+0x42>
			conn = ll_conn_get(rx_free->handle);
   19800:	88e0      	ldrh	r0, [r4, #6]
   19802:	f001 f943 	bl	1aa8c <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   19806:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
			conn = ll_conn_get(rx_free->handle);
   19808:	4604      	mov	r4, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   1980a:	b163      	cbz	r3, 19826 <ll_rx_mem_release+0xb6>
   1980c:	491f      	ldr	r1, [pc, #124]	; (1988c <ll_rx_mem_release+0x11c>)
   1980e:	f44f 7351 	mov.w	r3, #836	; 0x344
   19812:	462a      	mov	r2, r5
   19814:	4630      	mov	r0, r6
   19816:	f009 fd58 	bl	232ca <printk>
   1981a:	4040      	eors	r0, r0
   1981c:	f380 8811 	msr	BASEPRI, r0
   19820:	f04f 0003 	mov.w	r0, #3
   19824:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   19826:	f104 0160 	add.w	r1, r4, #96	; 0x60
   1982a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1982e:	f00d fd1d 	bl	2726c <memq_deinit>
			LL_ASSERT(link);
   19832:	4680      	mov	r8, r0
   19834:	b960      	cbnz	r0, 19850 <ll_rx_mem_release+0xe0>
   19836:	4916      	ldr	r1, [pc, #88]	; (19890 <ll_rx_mem_release+0x120>)
   19838:	f240 3347 	movw	r3, #839	; 0x347
   1983c:	462a      	mov	r2, r5
   1983e:	4630      	mov	r0, r6
   19840:	f009 fd43 	bl	232ca <printk>
   19844:	4040      	eors	r0, r0
   19846:	f380 8811 	msr	BASEPRI, r0
   1984a:	f04f 0003 	mov.w	r0, #3
   1984e:	df02      	svc	2
			conn->lll.link_tx_free = link;
   19850:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
			ll_conn_release(conn);
   19854:	4620      	mov	r0, r4
   19856:	f001 f89d 	bl	1a994 <ll_conn_release>
		break;
   1985a:	e7ae      	b.n	197ba <ll_rx_mem_release+0x4a>
			LL_ASSERT(0);
   1985c:	f240 3351 	movw	r3, #849	; 0x351
   19860:	462a      	mov	r2, r5
   19862:	4649      	mov	r1, r9
   19864:	4630      	mov	r0, r6
   19866:	f009 fd30 	bl	232ca <printk>
   1986a:	4040      	eors	r0, r0
   1986c:	f380 8811 	msr	BASEPRI, r0
   19870:	f04f 0003 	mov.w	r0, #3
   19874:	df02      	svc	2
			break;
   19876:	e7a0      	b.n	197ba <ll_rx_mem_release+0x4a>
   19878:	0002edb8 	.word	0x0002edb8
   1987c:	000297e6 	.word	0x000297e6
   19880:	20000f0c 	.word	0x20000f0c
   19884:	0002ee73 	.word	0x0002ee73
   19888:	0002ee7f 	.word	0x0002ee7f
   1988c:	0002eea2 	.word	0x0002eea2
   19890:	0002e45f 	.word	0x0002e45f
   19894:	0002d2c6 	.word	0x0002d2c6

00019898 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   19898:	4801      	ldr	r0, [pc, #4]	; (198a0 <ll_rx_link_alloc+0x8>)
   1989a:	f00d bc94 	b.w	271c6 <mem_acquire>
   1989e:	bf00      	nop
   198a0:	20000ec0 	.word	0x20000ec0

000198a4 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   198a4:	4901      	ldr	r1, [pc, #4]	; (198ac <ll_rx_link_release+0x8>)
   198a6:	f00d bca7 	b.w	271f8 <mem_release>
   198aa:	bf00      	nop
   198ac:	20000ec0 	.word	0x20000ec0

000198b0 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   198b0:	4801      	ldr	r0, [pc, #4]	; (198b8 <ll_rx_alloc+0x8>)
   198b2:	f00d bc88 	b.w	271c6 <mem_acquire>
   198b6:	bf00      	nop
   198b8:	20000f0c 	.word	0x20000f0c

000198bc <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   198bc:	4901      	ldr	r1, [pc, #4]	; (198c4 <ll_rx_release+0x8>)
   198be:	f00d bc9b 	b.w	271f8 <mem_release>
   198c2:	bf00      	nop
   198c4:	20000f0c 	.word	0x20000f0c

000198c8 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   198c8:	4b02      	ldr	r3, [pc, #8]	; (198d4 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   198ca:	4a03      	ldr	r2, [pc, #12]	; (198d8 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   198cc:	78db      	ldrb	r3, [r3, #3]
   198ce:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   198d0:	f00d bcd7 	b.w	27282 <memq_enqueue>
   198d4:	200070f0 	.word	0x200070f0
   198d8:	2000110c 	.word	0x2000110c

000198dc <ll_rx_sched>:
	k_sem_give(sem_recv);
   198dc:	4b01      	ldr	r3, [pc, #4]	; (198e4 <ll_rx_sched+0x8>)
   198de:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   198e0:	f008 b8da 	b.w	21a98 <z_impl_k_sem_give>
   198e4:	20001118 	.word	0x20001118

000198e8 <ll_pdu_rx_alloc_peek>:
{
   198e8:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   198ea:	4a0a      	ldr	r2, [pc, #40]	; (19914 <ll_pdu_rx_alloc_peek+0x2c>)
   198ec:	7891      	ldrb	r1, [r2, #2]
   198ee:	78d4      	ldrb	r4, [r2, #3]
   198f0:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   198f2:	42a1      	cmp	r1, r4
		return count - first + last;
   198f4:	bf8a      	itet	hi
   198f6:	1a5b      	subhi	r3, r3, r1
		return last - first;
   198f8:	1a63      	subls	r3, r4, r1
		return count - first + last;
   198fa:	191b      	addhi	r3, r3, r4
   198fc:	b2db      	uxtb	r3, r3
   198fe:	4298      	cmp	r0, r3
   19900:	d806      	bhi.n	19910 <ll_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   19902:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   19904:	7813      	ldrb	r3, [r2, #0]
   19906:	d003      	beq.n	19910 <ll_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   19908:	fb01 2203 	mla	r2, r1, r3, r2
   1990c:	6850      	ldr	r0, [r2, #4]
}
   1990e:	bd10      	pop	{r4, pc}
		return NULL;
   19910:	2000      	movs	r0, #0
   19912:	e7fc      	b.n	1990e <ll_pdu_rx_alloc_peek+0x26>
   19914:	20006fa4 	.word	0x20006fa4

00019918 <ll_pdu_rx_alloc>:
{
   19918:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   1991a:	4a09      	ldr	r2, [pc, #36]	; (19940 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(u8_t *fifo, u8_t size, u8_t count,
				  u8_t last, u8_t *first)
{
	u8_t _first = *first; /* Copy read-index */
   1991c:	7893      	ldrb	r3, [r2, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   1991e:	78d0      	ldrb	r0, [r2, #3]
   19920:	7811      	ldrb	r1, [r2, #0]
   19922:	7854      	ldrb	r4, [r2, #1]
   19924:	4298      	cmp	r0, r3
   19926:	d009      	beq.n	1993c <ll_pdu_rx_alloc+0x24>
	}

	/* Obtain address of head buffer.
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));
   19928:	fb03 2101 	mla	r1, r3, r1, r2

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   1992c:	3301      	adds	r3, #1
   1992e:	b2db      	uxtb	r3, r3
	if (_first == count) {
		_first = 0U;
   19930:	429c      	cmp	r4, r3
   19932:	bf08      	it	eq
   19934:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   19936:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   19938:	7093      	strb	r3, [r2, #2]
}
   1993a:	bd10      	pop	{r4, pc}
		return NULL;
   1993c:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   1993e:	e7fc      	b.n	1993a <ll_pdu_rx_alloc+0x22>
   19940:	20006fa4 	.word	0x20006fa4

00019944 <ll_tx_ack_put>:
{
   19944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   19946:	4a12      	ldr	r2, [pc, #72]	; (19990 <ll_tx_ack_put+0x4c>)
   19948:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   1994a:	7857      	ldrb	r7, [r2, #1]
   1994c:	7895      	ldrb	r5, [r2, #2]
   1994e:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   19950:	1c63      	adds	r3, r4, #1
   19952:	b2db      	uxtb	r3, r3
		last = 0U;
   19954:	429f      	cmp	r7, r3
   19956:	bf08      	it	eq
   19958:	2300      	moveq	r3, #0
	if (last == first) {
   1995a:	429d      	cmp	r5, r3
   1995c:	d004      	beq.n	19968 <ll_tx_ack_put+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1995e:	1d15      	adds	r5, r2, #4
   19960:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   19964:	192e      	adds	r6, r5, r4
   19966:	d10f      	bne.n	19988 <ll_tx_ack_put+0x44>
   19968:	4a0a      	ldr	r2, [pc, #40]	; (19994 <ll_tx_ack_put+0x50>)
   1996a:	490b      	ldr	r1, [pc, #44]	; (19998 <ll_tx_ack_put+0x54>)
   1996c:	480b      	ldr	r0, [pc, #44]	; (1999c <ll_tx_ack_put+0x58>)
   1996e:	f240 33a7 	movw	r3, #935	; 0x3a7
   19972:	f009 fcaa 	bl	232ca <printk>
   19976:	4040      	eors	r0, r0
   19978:	f380 8811 	msr	BASEPRI, r0
   1997c:	f04f 0003 	mov.w	r0, #3
   19980:	df02      	svc	2
	tx->handle = handle;
   19982:	2300      	movs	r3, #0
   19984:	801b      	strh	r3, [r3, #0]
   19986:	deff      	udf	#255	; 0xff
   19988:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   1998a:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
   1998c:	6071      	str	r1, [r6, #4]
}
   1998e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19990:	200070f0 	.word	0x200070f0
   19994:	0002edb8 	.word	0x0002edb8
   19998:	0002f11f 	.word	0x0002f11f
   1999c:	000297e6 	.word	0x000297e6

000199a0 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   199a0:	2200      	movs	r2, #0
{
   199a2:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   199a4:	4611      	mov	r1, r2
   199a6:	4b09      	ldr	r3, [pc, #36]	; (199cc <ll_radio_state_abort+0x2c>)
   199a8:	2001      	movs	r0, #1
   199aa:	f7fd fda3 	bl	174f4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   199ae:	b160      	cbz	r0, 199ca <ll_radio_state_abort+0x2a>
   199b0:	4a07      	ldr	r2, [pc, #28]	; (199d0 <ll_radio_state_abort+0x30>)
   199b2:	4908      	ldr	r1, [pc, #32]	; (199d4 <ll_radio_state_abort+0x34>)
   199b4:	4808      	ldr	r0, [pc, #32]	; (199d8 <ll_radio_state_abort+0x38>)
   199b6:	f240 33bf 	movw	r3, #959	; 0x3bf
   199ba:	f009 fc86 	bl	232ca <printk>
   199be:	4040      	eors	r0, r0
   199c0:	f380 8811 	msr	BASEPRI, r0
   199c4:	f04f 0003 	mov.w	r0, #3
   199c8:	df02      	svc	2
}
   199ca:	bd08      	pop	{r3, pc}
   199cc:	20007124 	.word	0x20007124
   199d0:	0002edb8 	.word	0x0002edb8
   199d4:	0002eeba 	.word	0x0002eeba
   199d8:	000297e6 	.word	0x000297e6

000199dc <ull_ticker_status_give>:
	*((u32_t volatile *)param) = status;
   199dc:	6008      	str	r0, [r1, #0]
   199de:	4801      	ldr	r0, [pc, #4]	; (199e4 <ull_ticker_status_give+0x8>)
   199e0:	f008 b85a 	b.w	21a98 <z_impl_k_sem_give>
   199e4:	2000111c 	.word	0x2000111c

000199e8 <ull_ticker_status_take>:
{
   199e8:	b510      	push	{r4, lr}
   199ea:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
   199ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   199f0:	4802      	ldr	r0, [pc, #8]	; (199fc <ull_ticker_status_take+0x14>)
   199f2:	f008 f895 	bl	21b20 <z_impl_k_sem_take>
	return *ret_cb;
   199f6:	6820      	ldr	r0, [r4, #0]
}
   199f8:	bd10      	pop	{r4, pc}
   199fa:	bf00      	nop
   199fc:	2000111c 	.word	0x2000111c

00019a00 <ull_disable_mark>:
	if (!*m) {
   19a00:	4b02      	ldr	r3, [pc, #8]	; (19a0c <ull_disable_mark+0xc>)
   19a02:	681a      	ldr	r2, [r3, #0]
   19a04:	b902      	cbnz	r2, 19a08 <ull_disable_mark+0x8>
		*m = param;
   19a06:	6018      	str	r0, [r3, #0]
}
   19a08:	6818      	ldr	r0, [r3, #0]
   19a0a:	4770      	bx	lr
   19a0c:	20000dec 	.word	0x20000dec

00019a10 <ull_disable_unmark>:
	if (*m && *m == param) {
   19a10:	4a05      	ldr	r2, [pc, #20]	; (19a28 <ull_disable_unmark+0x18>)
{
   19a12:	4603      	mov	r3, r0
	if (*m && *m == param) {
   19a14:	6810      	ldr	r0, [r2, #0]
   19a16:	b130      	cbz	r0, 19a26 <ull_disable_unmark+0x16>
   19a18:	4283      	cmp	r3, r0
   19a1a:	f04f 0300 	mov.w	r3, #0
   19a1e:	d101      	bne.n	19a24 <ull_disable_unmark+0x14>
		*m = NULL;
   19a20:	6013      	str	r3, [r2, #0]
		return param;
   19a22:	4770      	bx	lr
	return NULL;
   19a24:	4618      	mov	r0, r3
}
   19a26:	4770      	bx	lr
   19a28:	20000dec 	.word	0x20000dec

00019a2c <ull_disable_mark_get>:
}
   19a2c:	4b01      	ldr	r3, [pc, #4]	; (19a34 <ull_disable_mark_get+0x8>)
   19a2e:	6818      	ldr	r0, [r3, #0]
   19a30:	4770      	bx	lr
   19a32:	bf00      	nop
   19a34:	20000dec 	.word	0x20000dec

00019a38 <ull_update_mark>:
	if (!*m) {
   19a38:	4b02      	ldr	r3, [pc, #8]	; (19a44 <ull_update_mark+0xc>)
   19a3a:	681a      	ldr	r2, [r3, #0]
   19a3c:	b902      	cbnz	r2, 19a40 <ull_update_mark+0x8>
		*m = param;
   19a3e:	6018      	str	r0, [r3, #0]
}
   19a40:	6818      	ldr	r0, [r3, #0]
   19a42:	4770      	bx	lr
   19a44:	20000df0 	.word	0x20000df0

00019a48 <ull_update_unmark>:
	if (*m && *m == param) {
   19a48:	4a05      	ldr	r2, [pc, #20]	; (19a60 <ull_update_unmark+0x18>)
{
   19a4a:	4603      	mov	r3, r0
	if (*m && *m == param) {
   19a4c:	6810      	ldr	r0, [r2, #0]
   19a4e:	b130      	cbz	r0, 19a5e <ull_update_unmark+0x16>
   19a50:	4283      	cmp	r3, r0
   19a52:	f04f 0300 	mov.w	r3, #0
   19a56:	d101      	bne.n	19a5c <ull_update_unmark+0x14>
		*m = NULL;
   19a58:	6013      	str	r3, [r2, #0]
		return param;
   19a5a:	4770      	bx	lr
	return NULL;
   19a5c:	4618      	mov	r0, r3
}
   19a5e:	4770      	bx	lr
   19a60:	20000df0 	.word	0x20000df0

00019a64 <ull_update_mark_get>:
}
   19a64:	4b01      	ldr	r3, [pc, #4]	; (19a6c <ull_update_mark_get+0x8>)
   19a66:	6818      	ldr	r0, [r3, #0]
   19a68:	4770      	bx	lr
   19a6a:	bf00      	nop
   19a6c:	20000df0 	.word	0x20000df0

00019a70 <ull_disable>:
{
   19a70:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   19a72:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   19a74:	f115 0f10 	cmn.w	r5, #16
{
   19a78:	b087      	sub	sp, #28
   19a7a:	4604      	mov	r4, r0
	if (!hdr) {
   19a7c:	d102      	bne.n	19a84 <ull_disable+0x14>
		return ULL_STATUS_SUCCESS;
   19a7e:	2000      	movs	r0, #0
}
   19a80:	b007      	add	sp, #28
   19a82:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   19a84:	2201      	movs	r2, #1
   19a86:	2100      	movs	r1, #0
   19a88:	4668      	mov	r0, sp
   19a8a:	f00e fc6c 	bl	28366 <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
   19a8e:	4b11      	ldr	r3, [pc, #68]	; (19ad4 <ull_disable+0x64>)
   19a90:	616b      	str	r3, [r5, #20]
	if (!hdr->ref) {
   19a92:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_param = &sem;
   19a94:	f8c5 d018 	str.w	sp, [r5, #24]
	if (!hdr->ref) {
   19a98:	2b00      	cmp	r3, #0
   19a9a:	d0f0      	beq.n	19a7e <ull_disable+0xe>
	mfy.param = lll;
   19a9c:	4b0e      	ldr	r3, [pc, #56]	; (19ad8 <ull_disable+0x68>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   19a9e:	2200      	movs	r2, #0
   19aa0:	4611      	mov	r1, r2
   19aa2:	2003      	movs	r0, #3
	mfy.param = lll;
   19aa4:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   19aa6:	f7fd fd25 	bl	174f4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   19aaa:	b160      	cbz	r0, 19ac6 <ull_disable+0x56>
   19aac:	4a0b      	ldr	r2, [pc, #44]	; (19adc <ull_disable+0x6c>)
   19aae:	490c      	ldr	r1, [pc, #48]	; (19ae0 <ull_disable+0x70>)
   19ab0:	480c      	ldr	r0, [pc, #48]	; (19ae4 <ull_disable+0x74>)
   19ab2:	f240 4312 	movw	r3, #1042	; 0x412
   19ab6:	f009 fc08 	bl	232ca <printk>
   19aba:	4040      	eors	r0, r0
   19abc:	f380 8811 	msr	BASEPRI, r0
   19ac0:	f04f 0003 	mov.w	r0, #3
   19ac4:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   19ac6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19aca:	4668      	mov	r0, sp
   19acc:	f008 f828 	bl	21b20 <z_impl_k_sem_take>
	return k_sem_take(&sem, K_FOREVER);
   19ad0:	e7d6      	b.n	19a80 <ull_disable+0x10>
   19ad2:	bf00      	nop
   19ad4:	000274e3 	.word	0x000274e3
   19ad8:	20007134 	.word	0x20007134
   19adc:	0002edb8 	.word	0x0002edb8
   19ae0:	0002eeba 	.word	0x0002eeba
   19ae4:	000297e6 	.word	0x000297e6

00019ae8 <ull_pdu_rx_alloc_peek>:
{
   19ae8:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   19aea:	4a0a      	ldr	r2, [pc, #40]	; (19b14 <ull_pdu_rx_alloc_peek+0x2c>)
   19aec:	7891      	ldrb	r1, [r2, #2]
   19aee:	78d4      	ldrb	r4, [r2, #3]
   19af0:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   19af2:	42a1      	cmp	r1, r4
		return count - first + last;
   19af4:	bf8a      	itet	hi
   19af6:	1a5b      	subhi	r3, r3, r1
		return last - first;
   19af8:	1a63      	subls	r3, r4, r1
		return count - first + last;
   19afa:	191b      	addhi	r3, r3, r4
   19afc:	b2db      	uxtb	r3, r3
   19afe:	4298      	cmp	r0, r3
   19b00:	d806      	bhi.n	19b10 <ull_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   19b02:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   19b04:	7813      	ldrb	r3, [r2, #0]
   19b06:	d003      	beq.n	19b10 <ull_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   19b08:	fb01 2203 	mla	r2, r1, r3, r2
   19b0c:	6850      	ldr	r0, [r2, #4]
}
   19b0e:	bd10      	pop	{r4, pc}
		return NULL;
   19b10:	2000      	movs	r0, #0
   19b12:	e7fc      	b.n	19b0e <ull_pdu_rx_alloc_peek+0x26>
   19b14:	20006fb4 	.word	0x20006fb4

00019b18 <ull_pdu_rx_alloc>:
{
   19b18:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(pdu_rx_free);
   19b1a:	4a09      	ldr	r2, [pc, #36]	; (19b40 <ull_pdu_rx_alloc+0x28>)
	u8_t _first = *first; /* Copy read-index */
   19b1c:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   19b1e:	78d0      	ldrb	r0, [r2, #3]
   19b20:	7811      	ldrb	r1, [r2, #0]
   19b22:	7854      	ldrb	r4, [r2, #1]
   19b24:	4298      	cmp	r0, r3
   19b26:	d009      	beq.n	19b3c <ull_pdu_rx_alloc+0x24>
	mem = *((void **)(fifo + _first * size));
   19b28:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   19b2c:	3301      	adds	r3, #1
   19b2e:	b2db      	uxtb	r3, r3
		_first = 0U;
   19b30:	429c      	cmp	r4, r3
   19b32:	bf08      	it	eq
   19b34:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   19b36:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   19b38:	7093      	strb	r3, [r2, #2]
}
   19b3a:	bd10      	pop	{r4, pc}
		return NULL;
   19b3c:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   19b3e:	e7fc      	b.n	19b3a <ull_pdu_rx_alloc+0x22>
   19b40:	20006fb4 	.word	0x20006fb4

00019b44 <ull_rx_put>:
{
   19b44:	b538      	push	{r3, r4, r5, lr}
   19b46:	460c      	mov	r4, r1
   19b48:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   19b4a:	f001 ff99 	bl	1ba80 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   19b4e:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   19b50:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   19b52:	4a03      	ldr	r2, [pc, #12]	; (19b60 <ull_rx_put+0x1c>)
   19b54:	4628      	mov	r0, r5
}
   19b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   19b5a:	f00d bb92 	b.w	27282 <memq_enqueue>
   19b5e:	bf00      	nop
   19b60:	20001114 	.word	0x20001114

00019b64 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   19b64:	2201      	movs	r2, #1
   19b66:	4b02      	ldr	r3, [pc, #8]	; (19b70 <ull_rx_sched+0xc>)
   19b68:	4611      	mov	r1, r2
   19b6a:	2000      	movs	r0, #0
   19b6c:	f7fd bcc2 	b.w	174f4 <mayfly_enqueue>
   19b70:	20007144 	.word	0x20007144

00019b74 <ull_prepare_enqueue>:
{
   19b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   19b78:	4e17      	ldr	r6, [pc, #92]	; (19bd8 <ull_prepare_enqueue+0x64>)
{
   19b7a:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   19b7c:	78f3      	ldrb	r3, [r6, #3]
   19b7e:	7834      	ldrb	r4, [r6, #0]
{
   19b80:	4680      	mov	r8, r0
	last = last + 1;
   19b82:	1c5d      	adds	r5, r3, #1
	if (last == count) {
   19b84:	7870      	ldrb	r0, [r6, #1]
   19b86:	460f      	mov	r7, r1
	last = last + 1;
   19b88:	b2ed      	uxtb	r5, r5
   19b8a:	4611      	mov	r1, r2
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   19b8c:	78b2      	ldrb	r2, [r6, #2]
		last = 0U;
   19b8e:	42a8      	cmp	r0, r5
   19b90:	bf08      	it	eq
   19b92:	2500      	moveq	r5, #0
	if (last == first) {
   19b94:	42aa      	cmp	r2, r5
   19b96:	d01b      	beq.n	19bd0 <ull_prepare_enqueue+0x5c>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   19b98:	1d32      	adds	r2, r6, #4
   19b9a:	fb03 2404 	mla	r4, r3, r4, r2
	if (!e) {
   19b9e:	b1bc      	cbz	r4, 19bd0 <ull_prepare_enqueue+0x5c>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   19ba0:	2210      	movs	r2, #16
   19ba2:	4620      	mov	r0, r4
   19ba4:	f00b fa74 	bl	25090 <memcpy>
	e->prio = prio;
   19ba8:	9b08      	ldr	r3, [sp, #32]
	e->is_resume = is_resume;
   19baa:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
	e->prio = prio;
   19bae:	61e3      	str	r3, [r4, #28]
	e->is_resume = is_resume;
   19bb0:	f894 3020 	ldrb.w	r3, [r4, #32]
	e->abort_cb = abort_cb;
   19bb4:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   19bb6:	f023 0303 	bic.w	r3, r3, #3
   19bba:	f002 0201 	and.w	r2, r2, #1
	e->is_abort_cb = is_abort_cb;
   19bbe:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   19bc2:	4313      	orrs	r3, r2
   19bc4:	f884 3020 	strb.w	r3, [r4, #32]
	*last = idx; /* Commit: Update write index */
   19bc8:	70f5      	strb	r5, [r6, #3]
	return 0;
   19bca:	2000      	movs	r0, #0
}
   19bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
   19bd0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   19bd4:	e7fa      	b.n	19bcc <ull_prepare_enqueue+0x58>
   19bd6:	bf00      	nop
   19bd8:	20006fcc 	.word	0x20006fcc

00019bdc <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   19bdc:	4b05      	ldr	r3, [pc, #20]	; (19bf4 <ull_prepare_dequeue_get+0x18>)
   19bde:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   19be0:	78d9      	ldrb	r1, [r3, #3]
   19be2:	7818      	ldrb	r0, [r3, #0]
   19be4:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   19be6:	bf1a      	itte	ne
   19be8:	3304      	addne	r3, #4
   19bea:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   19bee:	2000      	moveq	r0, #0
}
   19bf0:	4770      	bx	lr
   19bf2:	bf00      	nop
   19bf4:	20006fcc 	.word	0x20006fcc

00019bf8 <rx_demux>:
		}
}
#endif /* CONFIG_BT_CONN */

static void rx_demux(void *param)
{
   19bf8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   19bfc:	4d8d      	ldr	r5, [pc, #564]	; (19e34 <rx_demux+0x23c>)
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   19bfe:	4c8e      	ldr	r4, [pc, #568]	; (19e38 <rx_demux+0x240>)
   19c00:	aa01      	add	r2, sp, #4
   19c02:	e9d4 0100 	ldrd	r0, r1, [r4]
   19c06:	f00d fb43 	bl	27290 <memq_peek>
		if (link) {
   19c0a:	4606      	mov	r6, r0
   19c0c:	2800      	cmp	r0, #0
   19c0e:	f000 80ff 	beq.w	19e10 <rx_demux+0x218>
			LL_ASSERT(rx);
   19c12:	9b01      	ldr	r3, [sp, #4]
   19c14:	b963      	cbnz	r3, 19c30 <rx_demux+0x38>
   19c16:	4a89      	ldr	r2, [pc, #548]	; (19e3c <rx_demux+0x244>)
   19c18:	4989      	ldr	r1, [pc, #548]	; (19e40 <rx_demux+0x248>)
   19c1a:	488a      	ldr	r0, [pc, #552]	; (19e44 <rx_demux+0x24c>)
   19c1c:	f240 53ca 	movw	r3, #1482	; 0x5ca
   19c20:	f009 fb53 	bl	232ca <printk>
   19c24:	4040      	eors	r0, r0
   19c26:	f380 8811 	msr	BASEPRI, r0
   19c2a:	f04f 0003 	mov.w	r0, #3
   19c2e:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   19c30:	9b01      	ldr	r3, [sp, #4]
   19c32:	aa02      	add	r2, sp, #8
   19c34:	7818      	ldrb	r0, [r3, #0]
   19c36:	f10d 0102 	add.w	r1, sp, #2
   19c3a:	f001 ff3f 	bl	1babc <ull_conn_ack_by_last_peek>
			if (link_tx) {
   19c3e:	4602      	mov	r2, r0
   19c40:	9801      	ldr	r0, [sp, #4]
   19c42:	b132      	cbz	r2, 19c52 <rx_demux+0x5a>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   19c44:	9b02      	ldr	r3, [sp, #8]
   19c46:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   19c4a:	7800      	ldrb	r0, [r0, #0]
				rx_demux_conn_tx_ack(ack_last, handle,
   19c4c:	f00d fc4b 	bl	274e6 <rx_demux_conn_tx_ack>
	} while (link);
   19c50:	e7d5      	b.n	19bfe <rx_demux+0x6>
				nack = rx_demux_rx(link, rx);
   19c52:	9003      	str	r0, [sp, #12]
	switch (rx->type) {
   19c54:	7903      	ldrb	r3, [r0, #4]
   19c56:	3b01      	subs	r3, #1
   19c58:	2b08      	cmp	r3, #8
   19c5a:	f200 80cb 	bhi.w	19df4 <rx_demux+0x1fc>
   19c5e:	e8df f013 	tbh	[pc, r3, lsl #1]
   19c62:	0009      	.short	0x0009
   19c64:	00c900ad 	.word	0x00c900ad
   19c68:	00c900c2 	.word	0x00c900c2
   19c6c:	00c900c9 	.word	0x00c900c9
   19c70:	00c200a3 	.word	0x00c200a3
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   19c74:	6860      	ldr	r0, [r4, #4]
   19c76:	4970      	ldr	r1, [pc, #448]	; (19e38 <rx_demux+0x240>)
   19c78:	2200      	movs	r2, #0
   19c7a:	f00d fb11 	bl	272a0 <memq_dequeue>
		rx_demux_event_done(link, rx);
   19c7e:	9f03      	ldr	r7, [sp, #12]
	switch (done->extra.type) {
   19c80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
	ull_hdr = done->param;
   19c84:	6a3c      	ldr	r4, [r7, #32]
	switch (done->extra.type) {
   19c86:	b123      	cbz	r3, 19c92 <rx_demux+0x9a>
   19c88:	2b01      	cmp	r3, #1
   19c8a:	d16e      	bne.n	19d6a <rx_demux+0x172>
		ull_conn_done(done);
   19c8c:	4638      	mov	r0, r7
   19c8e:	f001 fde5 	bl	1b85c <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   19c92:	4a6d      	ldr	r2, [pc, #436]	; (19e48 <rx_demux+0x250>)
   19c94:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   19c96:	f892 c001 	ldrb.w	ip, [r2, #1]
   19c9a:	7890      	ldrb	r0, [r2, #2]
	done->extra.type = 0U;
   19c9c:	2300      	movs	r3, #0
   19c9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	last = last + 1;
   19ca2:	1c4b      	adds	r3, r1, #1
   19ca4:	b2db      	uxtb	r3, r3
		last = 0U;
   19ca6:	459c      	cmp	ip, r3
   19ca8:	bf08      	it	eq
   19caa:	2300      	moveq	r3, #0
	if (last == first) {
   19cac:	4298      	cmp	r0, r3
   19cae:	d16a      	bne.n	19d86 <rx_demux+0x18e>
	LL_ASSERT(release == done);
   19cb0:	4a62      	ldr	r2, [pc, #392]	; (19e3c <rx_demux+0x244>)
   19cb2:	4966      	ldr	r1, [pc, #408]	; (19e4c <rx_demux+0x254>)
   19cb4:	4863      	ldr	r0, [pc, #396]	; (19e44 <rx_demux+0x24c>)
   19cb6:	f240 638a 	movw	r3, #1674	; 0x68a
   19cba:	f009 fb06 	bl	232ca <printk>
   19cbe:	4040      	eors	r0, r0
   19cc0:	f380 8811 	msr	BASEPRI, r0
   19cc4:	f04f 0003 	mov.w	r0, #3
   19cc8:	df02      	svc	2
	next = ull_prepare_dequeue_get();
   19cca:	f7ff ff87 	bl	19bdc <ull_prepare_dequeue_get>
			mfy.param = next;
   19cce:	4f60      	ldr	r7, [pc, #384]	; (19e50 <rx_demux+0x258>)
	while (next) {
   19cd0:	b358      	cbz	r0, 19d2a <rx_demux+0x132>
		u8_t is_aborted = next->is_aborted;
   19cd2:	f890 3020 	ldrb.w	r3, [r0, #32]
		if (!is_aborted) {
   19cd6:	079a      	lsls	r2, r3, #30
		u8_t is_aborted = next->is_aborted;
   19cd8:	f3c3 0640 	ubfx	r6, r3, #1, #1
		u8_t is_resume = next->is_resume;
   19cdc:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
   19ce0:	d414      	bmi.n	19d0c <rx_demux+0x114>
			mfy.param = next;
   19ce2:	60b8      	str	r0, [r7, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   19ce4:	4b5a      	ldr	r3, [pc, #360]	; (19e50 <rx_demux+0x258>)
   19ce6:	4632      	mov	r2, r6
   19ce8:	4631      	mov	r1, r6
   19cea:	2001      	movs	r0, #1
   19cec:	f7fd fc02 	bl	174f4 <mayfly_enqueue>
			LL_ASSERT(!ret);
   19cf0:	b160      	cbz	r0, 19d0c <rx_demux+0x114>
   19cf2:	4a52      	ldr	r2, [pc, #328]	; (19e3c <rx_demux+0x244>)
   19cf4:	4957      	ldr	r1, [pc, #348]	; (19e54 <rx_demux+0x25c>)
   19cf6:	4853      	ldr	r0, [pc, #332]	; (19e44 <rx_demux+0x24c>)
   19cf8:	f240 639b 	movw	r3, #1691	; 0x69b
   19cfc:	f009 fae5 	bl	232ca <printk>
   19d00:	4040      	eors	r0, r0
   19d02:	f380 8811 	msr	BASEPRI, r0
   19d06:	f04f 0003 	mov.w	r0, #3
   19d0a:	df02      	svc	2
	u8_t _first = *first; /* Copy read-index */
   19d0c:	78ab      	ldrb	r3, [r5, #2]
	if (_first == last) {
   19d0e:	78e9      	ldrb	r1, [r5, #3]
		MFIFO_DEQUEUE(prep);
   19d10:	786a      	ldrb	r2, [r5, #1]
   19d12:	4299      	cmp	r1, r3
   19d14:	d005      	beq.n	19d22 <rx_demux+0x12a>
	_first += 1U;
   19d16:	3301      	adds	r3, #1
   19d18:	b2db      	uxtb	r3, r3
		_first = 0U;
   19d1a:	429a      	cmp	r2, r3
   19d1c:	bf08      	it	eq
   19d1e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   19d20:	70ab      	strb	r3, [r5, #2]

		next = ull_prepare_dequeue_get();
   19d22:	f7ff ff5b 	bl	19bdc <ull_prepare_dequeue_get>

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   19d26:	2800      	cmp	r0, #0
   19d28:	d134      	bne.n	19d94 <rx_demux+0x19c>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   19d2a:	2c00      	cmp	r4, #0
   19d2c:	f43f af67 	beq.w	19bfe <rx_demux+0x6>
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_hdr->ref);
   19d30:	7823      	ldrb	r3, [r4, #0]
   19d32:	b963      	cbnz	r3, 19d4e <rx_demux+0x156>
   19d34:	4a41      	ldr	r2, [pc, #260]	; (19e3c <rx_demux+0x244>)
   19d36:	4948      	ldr	r1, [pc, #288]	; (19e58 <rx_demux+0x260>)
   19d38:	4842      	ldr	r0, [pc, #264]	; (19e44 <rx_demux+0x24c>)
   19d3a:	f240 63ad 	movw	r3, #1709	; 0x6ad
   19d3e:	f009 fac4 	bl	232ca <printk>
   19d42:	4040      	eors	r0, r0
   19d44:	f380 8811 	msr	BASEPRI, r0
   19d48:	f04f 0003 	mov.w	r0, #3
   19d4c:	df02      	svc	2
	return hdr->ref--;
   19d4e:	7823      	ldrb	r3, [r4, #0]
   19d50:	3b01      	subs	r3, #1
   19d52:	b2db      	uxtb	r3, r3
   19d54:	7023      	strb	r3, [r4, #0]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
   19d56:	2b00      	cmp	r3, #0
   19d58:	f47f af51 	bne.w	19bfe <rx_demux+0x6>
   19d5c:	6863      	ldr	r3, [r4, #4]
   19d5e:	2b00      	cmp	r3, #0
   19d60:	f43f af4d 	beq.w	19bfe <rx_demux+0x6>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   19d64:	68a0      	ldr	r0, [r4, #8]
   19d66:	4798      	blx	r3
			if (nack) {
   19d68:	e749      	b.n	19bfe <rx_demux+0x6>
		LL_ASSERT(0);
   19d6a:	4a34      	ldr	r2, [pc, #208]	; (19e3c <rx_demux+0x244>)
   19d6c:	493b      	ldr	r1, [pc, #236]	; (19e5c <rx_demux+0x264>)
   19d6e:	4835      	ldr	r0, [pc, #212]	; (19e44 <rx_demux+0x24c>)
   19d70:	f240 6383 	movw	r3, #1667	; 0x683
   19d74:	f009 faa9 	bl	232ca <printk>
   19d78:	4040      	eors	r0, r0
   19d7a:	f380 8811 	msr	BASEPRI, r0
   19d7e:	f04f 0003 	mov.w	r0, #3
   19d82:	df02      	svc	2
		break;
   19d84:	e785      	b.n	19c92 <rx_demux+0x9a>
	done->hdr.link = link;
   19d86:	603e      	str	r6, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   19d88:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   19d8a:	fb00 2101 	mla	r1, r0, r1, r2
   19d8e:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   19d90:	70d3      	strb	r3, [r2, #3]
	LL_ASSERT(release == done);
   19d92:	e79a      	b.n	19cca <rx_demux+0xd2>
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   19d94:	2e00      	cmp	r6, #0
   19d96:	d19b      	bne.n	19cd0 <rx_demux+0xd8>
   19d98:	f1b8 0f00 	cmp.w	r8, #0
   19d9c:	d0c5      	beq.n	19d2a <rx_demux+0x132>
   19d9e:	f890 3020 	ldrb.w	r3, [r0, #32]
   19da2:	07db      	lsls	r3, r3, #31
   19da4:	d4c1      	bmi.n	19d2a <rx_demux+0x132>
   19da6:	e793      	b.n	19cd0 <rx_demux+0xd8>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   19da8:	4923      	ldr	r1, [pc, #140]	; (19e38 <rx_demux+0x240>)
   19daa:	6860      	ldr	r0, [r4, #4]
   19dac:	2200      	movs	r2, #0
   19dae:	f00d fa77 	bl	272a0 <memq_dequeue>
		ull_conn_setup(link, rx);
   19db2:	9903      	ldr	r1, [sp, #12]
   19db4:	4630      	mov	r0, r6
   19db6:	f000 ff63 	bl	1ac80 <ull_conn_setup>
			if (nack) {
   19dba:	e720      	b.n	19bfe <rx_demux+0x6>
		nack = ull_conn_rx(link, (void *)&rx);
   19dbc:	a903      	add	r1, sp, #12
   19dbe:	4630      	mov	r0, r6
   19dc0:	f000 ff80 	bl	1acc4 <ull_conn_rx>
		if (nack) {
   19dc4:	4602      	mov	r2, r0
   19dc6:	2800      	cmp	r0, #0
   19dc8:	d130      	bne.n	19e2c <rx_demux+0x234>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   19dca:	491b      	ldr	r1, [pc, #108]	; (19e38 <rx_demux+0x240>)
   19dcc:	6860      	ldr	r0, [r4, #4]
   19dce:	f00d fa67 	bl	272a0 <memq_dequeue>
		if (rx) {
   19dd2:	9903      	ldr	r1, [sp, #12]
   19dd4:	2900      	cmp	r1, #0
   19dd6:	f43f af12 	beq.w	19bfe <rx_demux+0x6>
		ll_rx_put(link, rx);
   19dda:	4630      	mov	r0, r6
   19ddc:	f7ff fd74 	bl	198c8 <ll_rx_put>
		ll_rx_sched();
   19de0:	f7ff fd7c 	bl	198dc <ll_rx_sched>
			if (nack) {
   19de4:	e70b      	b.n	19bfe <rx_demux+0x6>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   19de6:	4914      	ldr	r1, [pc, #80]	; (19e38 <rx_demux+0x240>)
   19de8:	6860      	ldr	r0, [r4, #4]
   19dea:	2200      	movs	r2, #0
   19dec:	f00d fa58 	bl	272a0 <memq_dequeue>
		ll_rx_put(link, rx);
   19df0:	9903      	ldr	r1, [sp, #12]
   19df2:	e7f2      	b.n	19dda <rx_demux+0x1e2>
		LL_ASSERT(0);
   19df4:	4a11      	ldr	r2, [pc, #68]	; (19e3c <rx_demux+0x244>)
   19df6:	4919      	ldr	r1, [pc, #100]	; (19e5c <rx_demux+0x264>)
   19df8:	4812      	ldr	r0, [pc, #72]	; (19e44 <rx_demux+0x24c>)
   19dfa:	f240 635b 	movw	r3, #1627	; 0x65b
   19dfe:	f009 fa64 	bl	232ca <printk>
   19e02:	4040      	eors	r0, r0
   19e04:	f380 8811 	msr	BASEPRI, r0
   19e08:	f04f 0003 	mov.w	r0, #3
   19e0c:	df02      	svc	2
			if (nack) {
   19e0e:	e6f6      	b.n	19bfe <rx_demux+0x6>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   19e10:	aa03      	add	r2, sp, #12
   19e12:	a902      	add	r1, sp, #8
   19e14:	f10d 0002 	add.w	r0, sp, #2
   19e18:	f001 fe38 	bl	1ba8c <ull_conn_ack_peek>
			if (link) {
   19e1c:	4602      	mov	r2, r0
   19e1e:	b128      	cbz	r0, 19e2c <rx_demux+0x234>
				rx_demux_conn_tx_ack(ack_last, handle,
   19e20:	9b03      	ldr	r3, [sp, #12]
   19e22:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   19e26:	f89d 0002 	ldrb.w	r0, [sp, #2]
   19e2a:	e70f      	b.n	19c4c <rx_demux+0x54>
}
   19e2c:	b004      	add	sp, #16
   19e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19e32:	bf00      	nop
   19e34:	20006fcc 	.word	0x20006fcc
   19e38:	20001110 	.word	0x20001110
   19e3c:	0002edb8 	.word	0x0002edb8
   19e40:	0002f4a6 	.word	0x0002f4a6
   19e44:	000297e6 	.word	0x000297e6
   19e48:	20006f90 	.word	0x20006f90
   19e4c:	0002eebf 	.word	0x0002eebf
   19e50:	20007154 	.word	0x20007154
   19e54:	0002eeba 	.word	0x0002eeba
   19e58:	0002eecf 	.word	0x0002eecf
   19e5c:	0002d2c6 	.word	0x0002d2c6

00019e60 <ull_prepare_dequeue_iter>:
{
   19e60:	b530      	push	{r4, r5, lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   19e62:	4a0c      	ldr	r2, [pc, #48]	; (19e94 <ull_prepare_dequeue_iter+0x34>)
{
   19e64:	4603      	mov	r3, r0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   19e66:	7854      	ldrb	r4, [r2, #1]
	if (*idx >= count) {
   19e68:	7819      	ldrb	r1, [r3, #0]
   19e6a:	78d5      	ldrb	r5, [r2, #3]
   19e6c:	7810      	ldrb	r0, [r2, #0]
   19e6e:	42a1      	cmp	r1, r4
   19e70:	bf24      	itt	cs
   19e72:	7892      	ldrbcs	r2, [r2, #2]
		*idx = first;
   19e74:	701a      	strbcs	r2, [r3, #0]
	if (*idx == last) {
   19e76:	7819      	ldrb	r1, [r3, #0]
   19e78:	428d      	cmp	r5, r1
   19e7a:	d009      	beq.n	19e90 <ull_prepare_dequeue_iter+0x30>
	i = *idx + 1;
   19e7c:	1c4a      	adds	r2, r1, #1
   19e7e:	b2d2      	uxtb	r2, r2
		i = 0U;
   19e80:	4294      	cmp	r4, r2
   19e82:	bf08      	it	eq
   19e84:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   19e86:	4c04      	ldr	r4, [pc, #16]	; (19e98 <ull_prepare_dequeue_iter+0x38>)
	*idx = i;
   19e88:	701a      	strb	r2, [r3, #0]
	p = (void *)(fifo + (*idx) * size);
   19e8a:	fb01 4000 	mla	r0, r1, r0, r4
}
   19e8e:	bd30      	pop	{r4, r5, pc}
		return NULL;
   19e90:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   19e92:	e7fc      	b.n	19e8e <ull_prepare_dequeue_iter+0x2e>
   19e94:	20006fcc 	.word	0x20006fcc
   19e98:	20006fd0 	.word	0x20006fd0

00019e9c <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   19e9c:	4b06      	ldr	r3, [pc, #24]	; (19eb8 <ull_event_done_extra_get+0x1c>)
   19e9e:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   19ea0:	78d8      	ldrb	r0, [r3, #3]
   19ea2:	781a      	ldrb	r2, [r3, #0]
   19ea4:	4288      	cmp	r0, r1
   19ea6:	d005      	beq.n	19eb4 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   19ea8:	fb01 3302 	mla	r3, r1, r2, r3
   19eac:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   19eae:	b110      	cbz	r0, 19eb6 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   19eb0:	3024      	adds	r0, #36	; 0x24
   19eb2:	4770      	bx	lr
		return NULL;
   19eb4:	2000      	movs	r0, #0
}
   19eb6:	4770      	bx	lr
   19eb8:	20006f90 	.word	0x20006f90

00019ebc <ull_event_done>:
{
   19ebc:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   19ebe:	4a10      	ldr	r2, [pc, #64]	; (19f00 <ull_event_done+0x44>)
	u8_t _first = *first; /* Copy read-index */
   19ec0:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   19ec2:	78d4      	ldrb	r4, [r2, #3]
   19ec4:	7855      	ldrb	r5, [r2, #1]
   19ec6:	429c      	cmp	r4, r3
{
   19ec8:	4601      	mov	r1, r0
	evdone = MFIFO_DEQUEUE(done);
   19eca:	7810      	ldrb	r0, [r2, #0]
   19ecc:	d016      	beq.n	19efc <ull_event_done+0x40>
	mem = *((void **)(fifo + _first * size));
   19ece:	fb03 2000 	mla	r0, r3, r0, r2
	_first += 1U;
   19ed2:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   19ed4:	6844      	ldr	r4, [r0, #4]
	_first += 1U;
   19ed6:	b2db      	uxtb	r3, r3
		_first = 0U;
   19ed8:	429d      	cmp	r5, r3
   19eda:	bf08      	it	eq
   19edc:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   19ede:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   19ee0:	b154      	cbz	r4, 19ef8 <ull_event_done+0x3c>
	evdone->hdr.link = NULL;
   19ee2:	2300      	movs	r3, #0
	link = evdone->hdr.link;
   19ee4:	6820      	ldr	r0, [r4, #0]
	evdone->hdr.link = NULL;
   19ee6:	6023      	str	r3, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   19ee8:	2301      	movs	r3, #1
   19eea:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
   19eec:	6221      	str	r1, [r4, #32]
	ull_rx_put(link, evdone);
   19eee:	4621      	mov	r1, r4
   19ef0:	f7ff fe28 	bl	19b44 <ull_rx_put>
	ull_rx_sched();
   19ef4:	f7ff fe36 	bl	19b64 <ull_rx_sched>
}
   19ef8:	4620      	mov	r0, r4
   19efa:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   19efc:	2400      	movs	r4, #0
   19efe:	e7fb      	b.n	19ef8 <ull_event_done+0x3c>
   19f00:	20006f90 	.word	0x20006f90

00019f04 <disabled_cb>:
		LL_ASSERT(!ret);
	}
}

static void disabled_cb(void *param)
{
   19f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct ll_adv_set *adv;
	struct node_rx_pdu *rx;
	struct node_rx_cc *cc;
	memq_link_t *link;

	adv = ((struct lll_hdr *)param)->parent;
   19f06:	6805      	ldr	r5, [r0, #0]

	LL_ASSERT(adv->link_cc_free);
   19f08:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
{
   19f0c:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   19f0e:	b963      	cbnz	r3, 19f2a <disabled_cb+0x26>
   19f10:	4a1e      	ldr	r2, [pc, #120]	; (19f8c <disabled_cb+0x88>)
   19f12:	491f      	ldr	r1, [pc, #124]	; (19f90 <disabled_cb+0x8c>)
   19f14:	481f      	ldr	r0, [pc, #124]	; (19f94 <disabled_cb+0x90>)
   19f16:	f240 43b5 	movw	r3, #1205	; 0x4b5
   19f1a:	f009 f9d6 	bl	232ca <printk>
   19f1e:	4040      	eors	r0, r0
   19f20:	f380 8811 	msr	BASEPRI, r0
   19f24:	f04f 0003 	mov.w	r0, #3
   19f28:	df02      	svc	2
	link = adv->link_cc_free;
	adv->link_cc_free = NULL;
   19f2a:	2300      	movs	r3, #0
	link = adv->link_cc_free;
   19f2c:	f8d5 70d0 	ldr.w	r7, [r5, #208]	; 0xd0
	adv->link_cc_free = NULL;
   19f30:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0

	LL_ASSERT(adv->node_rx_cc_free);
   19f34:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   19f38:	b963      	cbnz	r3, 19f54 <disabled_cb+0x50>
   19f3a:	4a14      	ldr	r2, [pc, #80]	; (19f8c <disabled_cb+0x88>)
   19f3c:	4916      	ldr	r1, [pc, #88]	; (19f98 <disabled_cb+0x94>)
   19f3e:	4815      	ldr	r0, [pc, #84]	; (19f94 <disabled_cb+0x90>)
   19f40:	f240 43b9 	movw	r3, #1209	; 0x4b9
   19f44:	f009 f9c1 	bl	232ca <printk>
   19f48:	4040      	eors	r0, r0
   19f4a:	f380 8811 	msr	BASEPRI, r0
   19f4e:	f04f 0003 	mov.w	r0, #3
   19f52:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   19f54:	f8d5 40d4 	ldr.w	r4, [r5, #212]	; 0xd4
	adv->node_rx_cc_free = NULL;
   19f58:	2100      	movs	r1, #0

	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   19f5a:	2308      	movs	r3, #8
	adv->node_rx_cc_free = NULL;
   19f5c:	f8c5 10d4 	str.w	r1, [r5, #212]	; 0xd4
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   19f60:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   19f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19f66:	80e3      	strh	r3, [r4, #6]

	cc = (void *)rx->pdu;
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   19f68:	2212      	movs	r2, #18
   19f6a:	f104 0020 	add.w	r0, r4, #32
   19f6e:	f00b f8ba 	bl	250e6 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   19f72:	233c      	movs	r3, #60	; 0x3c
   19f74:	f884 3020 	strb.w	r3, [r4, #32]

	ftr = &(rx->hdr.rx_ftr);
	ftr->param = param;
   19f78:	60a6      	str	r6, [r4, #8]

	ll_rx_put(link, rx);
   19f7a:	4621      	mov	r1, r4
   19f7c:	4638      	mov	r0, r7
   19f7e:	f7ff fca3 	bl	198c8 <ll_rx_put>
	ll_rx_sched();
}
   19f82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   19f86:	f7ff bca9 	b.w	198dc <ll_rx_sched>
   19f8a:	bf00      	nop
   19f8c:	0002eef9 	.word	0x0002eef9
   19f90:	0002ef38 	.word	0x0002ef38
   19f94:	000297e6 	.word	0x000297e6
   19f98:	0002ef4a 	.word	0x0002ef4a

00019f9c <ticker_cb>:
{
   19f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19fa0:	461d      	mov	r5, r3
	lll = &adv->lll;
   19fa2:	f103 081c 	add.w	r8, r3, #28
	return ++hdr->ref;
   19fa6:	7c1b      	ldrb	r3, [r3, #16]
   19fa8:	3301      	adds	r3, #1
   19faa:	b2db      	uxtb	r3, r3
{
   19fac:	b08a      	sub	sp, #40	; 0x28
   19fae:	4607      	mov	r7, r0
   19fb0:	460e      	mov	r6, r1
   19fb2:	4614      	mov	r4, r2
   19fb4:	742b      	strb	r3, [r5, #16]
		LL_ASSERT(ref);
   19fb6:	b963      	cbnz	r3, 19fd2 <ticker_cb+0x36>
   19fb8:	4a2f      	ldr	r2, [pc, #188]	; (1a078 <ticker_cb+0xdc>)
   19fba:	4930      	ldr	r1, [pc, #192]	; (1a07c <ticker_cb+0xe0>)
   19fbc:	4830      	ldr	r0, [pc, #192]	; (1a080 <ticker_cb+0xe4>)
   19fbe:	f240 4331 	movw	r3, #1073	; 0x431
   19fc2:	f009 f982 	bl	232ca <printk>
   19fc6:	4040      	eors	r0, r0
   19fc8:	f380 8811 	msr	BASEPRI, r0
   19fcc:	f04f 0003 	mov.w	r0, #3
   19fd0:	df02      	svc	2
		p.ticks_at_expire = ticks_at_expire;
   19fd2:	4a2c      	ldr	r2, [pc, #176]	; (1a084 <ticker_cb+0xe8>)
		mfy.param = &p;
   19fd4:	4b2c      	ldr	r3, [pc, #176]	; (1a088 <ticker_cb+0xec>)
		p.lazy = lazy;
   19fd6:	8114      	strh	r4, [r2, #8]
		p.remainder = remainder;
   19fd8:	e9c2 7600 	strd	r7, r6, [r2]
		p.param = lll;
   19fdc:	f8c2 800c 	str.w	r8, [r2, #12]
		mfy.param = &p;
   19fe0:	609a      	str	r2, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   19fe2:	2200      	movs	r2, #0
   19fe4:	4611      	mov	r1, r2
   19fe6:	2001      	movs	r0, #1
   19fe8:	f7fd fa84 	bl	174f4 <mayfly_enqueue>
		LL_ASSERT(!ret);
   19fec:	b160      	cbz	r0, 1a008 <ticker_cb+0x6c>
   19fee:	4a22      	ldr	r2, [pc, #136]	; (1a078 <ticker_cb+0xdc>)
   19ff0:	4926      	ldr	r1, [pc, #152]	; (1a08c <ticker_cb+0xf0>)
   19ff2:	4823      	ldr	r0, [pc, #140]	; (1a080 <ticker_cb+0xe4>)
   19ff4:	f240 433d 	movw	r3, #1085	; 0x43d
   19ff8:	f009 f967 	bl	232ca <printk>
   19ffc:	4040      	eors	r0, r0
   19ffe:	f380 8811 	msr	BASEPRI, r0
   1a002:	f04f 0003 	mov.w	r0, #3
   1a006:	df02      	svc	2
	if (!lll->is_hdcd)
   1a008:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
   1a00c:	f014 0401 	ands.w	r4, r4, #1
   1a010:	d12f      	bne.n	1a072 <ticker_cb+0xd6>
		lll_entropy_get(sizeof(random_delay), &random_delay);
   1a012:	a909      	add	r1, sp, #36	; 0x24
   1a014:	2004      	movs	r0, #4
   1a016:	f002 f811 	bl	1c03c <lll_entropy_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1a01a:	9909      	ldr	r1, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1a01c:	9506      	str	r5, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1a01e:	f240 1247 	movw	r2, #327	; 0x147
   1a022:	fbb1 f3f2 	udiv	r3, r1, r2
   1a026:	fb02 1313 	mls	r3, r2, r3, r1
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   1a02a:	4a19      	ldr	r2, [pc, #100]	; (1a090 <ticker_cb+0xf4>)
   1a02c:	21dc      	movs	r1, #220	; 0xdc
   1a02e:	1aaa      	subs	r2, r5, r2
   1a030:	fbb2 f2f1 	udiv	r2, r2, r1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1a034:	4917      	ldr	r1, [pc, #92]	; (1a094 <ticker_cb+0xf8>)
				    (TICKER_ID_ADV_BASE +
   1a036:	3202      	adds	r2, #2
		random_delay += 1;
   1a038:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1a03a:	e9cd 4104 	strd	r4, r1, [sp, #16]
   1a03e:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1a042:	e9cd 4400 	strd	r4, r4, [sp]
   1a046:	b2d2      	uxtb	r2, r2
   1a048:	2101      	movs	r1, #1
   1a04a:	4620      	mov	r0, r4
		random_delay += 1;
   1a04c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1a04e:	f7fe f835 	bl	180bc <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a052:	f030 0302 	bics.w	r3, r0, #2
   1a056:	d00c      	beq.n	1a072 <ticker_cb+0xd6>
   1a058:	4a07      	ldr	r2, [pc, #28]	; (1a078 <ticker_cb+0xdc>)
   1a05a:	490f      	ldr	r1, [pc, #60]	; (1a098 <ticker_cb+0xfc>)
   1a05c:	4808      	ldr	r0, [pc, #32]	; (1a080 <ticker_cb+0xe4>)
   1a05e:	f240 4353 	movw	r3, #1107	; 0x453
   1a062:	f009 f932 	bl	232ca <printk>
   1a066:	4040      	eors	r0, r0
   1a068:	f380 8811 	msr	BASEPRI, r0
   1a06c:	f04f 0003 	mov.w	r0, #3
   1a070:	df02      	svc	2
}
   1a072:	b00a      	add	sp, #40	; 0x28
   1a074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a078:	0002eef9 	.word	0x0002eef9
   1a07c:	0002eed8 	.word	0x0002eed8
   1a080:	000297e6 	.word	0x000297e6
   1a084:	20001598 	.word	0x20001598
   1a088:	20007164 	.word	0x20007164
   1a08c:	0002eeba 	.word	0x0002eeba
   1a090:	200014bc 	.word	0x200014bc
   1a094:	0001a1bd 	.word	0x0001a1bd
   1a098:	0002ef5f 	.word	0x0002ef5f

0001a09c <conn_release>:

static void conn_release(struct ll_adv_set *adv)
{
   1a09c:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   1a09e:	6a45      	ldr	r5, [r0, #36]	; 0x24
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   1a0a0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
{
   1a0a2:	4604      	mov	r4, r0
	LL_ASSERT(!lll->link_tx_free);
   1a0a4:	b163      	cbz	r3, 1a0c0 <conn_release+0x24>
   1a0a6:	4a1a      	ldr	r2, [pc, #104]	; (1a110 <conn_release+0x74>)
   1a0a8:	491a      	ldr	r1, [pc, #104]	; (1a114 <conn_release+0x78>)
   1a0aa:	481b      	ldr	r0, [pc, #108]	; (1a118 <conn_release+0x7c>)
   1a0ac:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
   1a0b0:	f009 f90b 	bl	232ca <printk>
   1a0b4:	4040      	eors	r0, r0
   1a0b6:	f380 8811 	msr	BASEPRI, r0
   1a0ba:	f04f 0003 	mov.w	r0, #3
   1a0be:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   1a0c0:	f105 0144 	add.w	r1, r5, #68	; 0x44
   1a0c4:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1a0c8:	f00d f8d0 	bl	2726c <memq_deinit>
	LL_ASSERT(link);
   1a0cc:	4606      	mov	r6, r0
   1a0ce:	b960      	cbnz	r0, 1a0ea <conn_release+0x4e>
   1a0d0:	4a0f      	ldr	r2, [pc, #60]	; (1a110 <conn_release+0x74>)
   1a0d2:	4912      	ldr	r1, [pc, #72]	; (1a11c <conn_release+0x80>)
   1a0d4:	4810      	ldr	r0, [pc, #64]	; (1a118 <conn_release+0x7c>)
   1a0d6:	f240 43d2 	movw	r3, #1234	; 0x4d2
   1a0da:	f009 f8f6 	bl	232ca <printk>
   1a0de:	4040      	eors	r0, r0
   1a0e0:	f380 8811 	msr	BASEPRI, r0
   1a0e4:	f04f 0003 	mov.w	r0, #3
   1a0e8:	df02      	svc	2
	lll->link_tx_free = link;

	ll_conn_release(lll->hdr.parent);
   1a0ea:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   1a0ec:	652e      	str	r6, [r5, #80]	; 0x50
	adv->lll.conn = NULL;
   1a0ee:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   1a0f0:	f000 fc50 	bl	1a994 <ll_conn_release>

	ll_rx_release(adv->node_rx_cc_free);
   1a0f4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
	adv->lll.conn = NULL;
   1a0f8:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   1a0fa:	f7ff fbdf 	bl	198bc <ll_rx_release>
	adv->node_rx_cc_free = NULL;
	ll_rx_link_release(adv->link_cc_free);
   1a0fe:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
	adv->node_rx_cc_free = NULL;
   1a102:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
	ll_rx_link_release(adv->link_cc_free);
   1a106:	f7ff fbcd 	bl	198a4 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   1a10a:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
}
   1a10e:	bd70      	pop	{r4, r5, r6, pc}
   1a110:	0002eef9 	.word	0x0002eef9
   1a114:	0002ef78 	.word	0x0002ef78
   1a118:	000297e6 	.word	0x000297e6
   1a11c:	0002e45f 	.word	0x0002e45f

0001a120 <ticker_op_stop_cb>:
{
   1a120:	b570      	push	{r4, r5, r6, lr}
   1a122:	460c      	mov	r4, r1
	if (status != TICKER_STATUS_SUCCESS) {
   1a124:	2800      	cmp	r0, #0
   1a126:	d12f      	bne.n	1a188 <ticker_op_stop_cb+0x68>
	mfy.param = &adv->lll;
   1a128:	4b1d      	ldr	r3, [pc, #116]	; (1a1a0 <ticker_op_stop_cb+0x80>)
   1a12a:	4d1e      	ldr	r5, [pc, #120]	; (1a1a4 <ticker_op_stop_cb+0x84>)
   1a12c:	f101 021c 	add.w	r2, r1, #28
   1a130:	609a      	str	r2, [r3, #8]
	if (hdr->ref) {
   1a132:	7c0a      	ldrb	r2, [r1, #16]
   1a134:	461e      	mov	r6, r3
   1a136:	b342      	cbz	r2, 1a18a <ticker_op_stop_cb+0x6a>
		LL_ASSERT(!hdr->disabled_cb);
   1a138:	694b      	ldr	r3, [r1, #20]
   1a13a:	b163      	cbz	r3, 1a156 <ticker_op_stop_cb+0x36>
   1a13c:	4a1a      	ldr	r2, [pc, #104]	; (1a1a8 <ticker_op_stop_cb+0x88>)
   1a13e:	491b      	ldr	r1, [pc, #108]	; (1a1ac <ticker_op_stop_cb+0x8c>)
   1a140:	481b      	ldr	r0, [pc, #108]	; (1a1b0 <ticker_op_stop_cb+0x90>)
   1a142:	f240 439b 	movw	r3, #1179	; 0x49b
   1a146:	f009 f8c0 	bl	232ca <printk>
   1a14a:	4040      	eors	r0, r0
   1a14c:	f380 8811 	msr	BASEPRI, r0
   1a150:	f04f 0003 	mov.w	r0, #3
   1a154:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   1a156:	68b3      	ldr	r3, [r6, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1a158:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   1a15a:	e9c4 5305 	strd	r5, r3, [r4, #20]
		mfy.fp = lll_disable;
   1a15e:	4b15      	ldr	r3, [pc, #84]	; (1a1b4 <ticker_op_stop_cb+0x94>)
   1a160:	60f3      	str	r3, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1a162:	4611      	mov	r1, r2
   1a164:	4b0e      	ldr	r3, [pc, #56]	; (1a1a0 <ticker_op_stop_cb+0x80>)
   1a166:	2002      	movs	r0, #2
   1a168:	f7fd f9c4 	bl	174f4 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1a16c:	b160      	cbz	r0, 1a188 <ticker_op_stop_cb+0x68>
   1a16e:	f240 43a2 	movw	r3, #1186	; 0x4a2
		LL_ASSERT(!ret);
   1a172:	4a0d      	ldr	r2, [pc, #52]	; (1a1a8 <ticker_op_stop_cb+0x88>)
   1a174:	4910      	ldr	r1, [pc, #64]	; (1a1b8 <ticker_op_stop_cb+0x98>)
   1a176:	480e      	ldr	r0, [pc, #56]	; (1a1b0 <ticker_op_stop_cb+0x90>)
   1a178:	f009 f8a7 	bl	232ca <printk>
   1a17c:	4040      	eors	r0, r0
   1a17e:	f380 8811 	msr	BASEPRI, r0
   1a182:	f04f 0003 	mov.w	r0, #3
   1a186:	df02      	svc	2
}
   1a188:	bd70      	pop	{r4, r5, r6, pc}
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1a18a:	2101      	movs	r1, #1
   1a18c:	2002      	movs	r0, #2
		mfy.fp = disabled_cb;
   1a18e:	60dd      	str	r5, [r3, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1a190:	f7fd f9b0 	bl	174f4 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1a194:	2800      	cmp	r0, #0
   1a196:	d0f7      	beq.n	1a188 <ticker_op_stop_cb+0x68>
   1a198:	f240 43a7 	movw	r3, #1191	; 0x4a7
   1a19c:	e7e9      	b.n	1a172 <ticker_op_stop_cb+0x52>
   1a19e:	bf00      	nop
   1a1a0:	20007174 	.word	0x20007174
   1a1a4:	00019f05 	.word	0x00019f05
   1a1a8:	0002eef9 	.word	0x0002eef9
   1a1ac:	0002ef8b 	.word	0x0002ef8b
   1a1b0:	000297e6 	.word	0x000297e6
   1a1b4:	0001c0a9 	.word	0x0001c0a9
   1a1b8:	0002eeba 	.word	0x0002eeba

0001a1bc <ticker_op_update_cb>:
{
   1a1bc:	b510      	push	{r4, lr}
   1a1be:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1a1c0:	b180      	cbz	r0, 1a1e4 <ticker_op_update_cb+0x28>
   1a1c2:	f7ff fc33 	bl	19a2c <ull_disable_mark_get>
   1a1c6:	4284      	cmp	r4, r0
   1a1c8:	d00c      	beq.n	1a1e4 <ticker_op_update_cb+0x28>
   1a1ca:	4a07      	ldr	r2, [pc, #28]	; (1a1e8 <ticker_op_update_cb+0x2c>)
   1a1cc:	4907      	ldr	r1, [pc, #28]	; (1a1ec <ticker_op_update_cb+0x30>)
   1a1ce:	4808      	ldr	r0, [pc, #32]	; (1a1f0 <ticker_op_update_cb+0x34>)
   1a1d0:	f240 435c 	movw	r3, #1116	; 0x45c
   1a1d4:	f009 f879 	bl	232ca <printk>
   1a1d8:	4040      	eors	r0, r0
   1a1da:	f380 8811 	msr	BASEPRI, r0
   1a1de:	f04f 0003 	mov.w	r0, #3
   1a1e2:	df02      	svc	2
}
   1a1e4:	bd10      	pop	{r4, pc}
   1a1e6:	bf00      	nop
   1a1e8:	0002eef9 	.word	0x0002eef9
   1a1ec:	0002ef9d 	.word	0x0002ef9d
   1a1f0:	000297e6 	.word	0x000297e6

0001a1f4 <ticker_stop_cb>:
{
   1a1f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   1a1f6:	4c17      	ldr	r4, [pc, #92]	; (1a254 <ticker_stop_cb+0x60>)
{
   1a1f8:	461d      	mov	r5, r3
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   1a1fa:	1b1c      	subs	r4, r3, r4
   1a1fc:	22dc      	movs	r2, #220	; 0xdc
   1a1fe:	fbb4 f4f2 	udiv	r4, r4, r2
	LL_ASSERT(handle < BT_CTLR_ADV_MAX);
   1a202:	b2a3      	uxth	r3, r4
   1a204:	b163      	cbz	r3, 1a220 <ticker_stop_cb+0x2c>
   1a206:	4a14      	ldr	r2, [pc, #80]	; (1a258 <ticker_stop_cb+0x64>)
   1a208:	4914      	ldr	r1, [pc, #80]	; (1a25c <ticker_stop_cb+0x68>)
   1a20a:	4815      	ldr	r0, [pc, #84]	; (1a260 <ticker_stop_cb+0x6c>)
   1a20c:	f44f 638f 	mov.w	r3, #1144	; 0x478
   1a210:	f009 f85b 	bl	232ca <printk>
   1a214:	4040      	eors	r0, r0
   1a216:	f380 8811 	msr	BASEPRI, r0
   1a21a:	f04f 0003 	mov.w	r0, #3
   1a21e:	df02      	svc	2
			  TICKER_ID_ADV_BASE + handle,
   1a220:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   1a222:	4b10      	ldr	r3, [pc, #64]	; (1a264 <ticker_stop_cb+0x70>)
   1a224:	9500      	str	r5, [sp, #0]
   1a226:	b2d2      	uxtb	r2, r2
   1a228:	2101      	movs	r1, #1
   1a22a:	2000      	movs	r0, #0
   1a22c:	f7fd ff8c 	bl	18148 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a230:	f030 0302 	bics.w	r3, r0, #2
   1a234:	d00c      	beq.n	1a250 <ticker_stop_cb+0x5c>
   1a236:	4a08      	ldr	r2, [pc, #32]	; (1a258 <ticker_stop_cb+0x64>)
   1a238:	490b      	ldr	r1, [pc, #44]	; (1a268 <ticker_stop_cb+0x74>)
   1a23a:	4809      	ldr	r0, [pc, #36]	; (1a260 <ticker_stop_cb+0x6c>)
   1a23c:	f240 437d 	movw	r3, #1149	; 0x47d
   1a240:	f009 f843 	bl	232ca <printk>
   1a244:	4040      	eors	r0, r0
   1a246:	f380 8811 	msr	BASEPRI, r0
   1a24a:	f04f 0003 	mov.w	r0, #3
   1a24e:	df02      	svc	2
}
   1a250:	b003      	add	sp, #12
   1a252:	bd30      	pop	{r4, r5, pc}
   1a254:	200014bc 	.word	0x200014bc
   1a258:	0002eef9 	.word	0x0002eef9
   1a25c:	0002efcc 	.word	0x0002efcc
   1a260:	000297e6 	.word	0x000297e6
   1a264:	0001a121 	.word	0x0001a121
   1a268:	0002ef5f 	.word	0x0002ef5f

0001a26c <ll_adv_params_set>:
{
   1a26c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1a26e:	4c31      	ldr	r4, [pc, #196]	; (1a334 <ll_adv_params_set+0xc8>)
{
   1a270:	4607      	mov	r7, r0
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1a272:	6820      	ldr	r0, [r4, #0]
   1a274:	9000      	str	r0, [sp, #0]
   1a276:	7920      	ldrb	r0, [r4, #4]
	if (!adv || adv->is_enabled) {
   1a278:	4c2f      	ldr	r4, [pc, #188]	; (1a338 <ll_adv_params_set+0xcc>)
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1a27a:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!adv || adv->is_enabled) {
   1a27e:	f894 60cc 	ldrb.w	r6, [r4, #204]	; 0xcc
   1a282:	f016 0601 	ands.w	r6, r6, #1
   1a286:	d153      	bne.n	1a330 <ll_adv_params_set+0xc4>
	adv->lll.chan_map = chan_map;
   1a288:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
   1a28c:	f000 0503 	and.w	r5, r0, #3
   1a290:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   1a294:	f000 0007 	and.w	r0, r0, #7
   1a298:	0040      	lsls	r0, r0, #1
   1a29a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   1a29e:	8d25      	ldrh	r5, [r4, #40]	; 0x28
   1a2a0:	f425 7543 	bic.w	r5, r5, #780	; 0x30c
   1a2a4:	f025 0502 	bic.w	r5, r5, #2
	pdu->type = pdu_adv_type[adv_type];
   1a2a8:	f10d 0c08 	add.w	ip, sp, #8
		adv->interval = 0;
   1a2ac:	2901      	cmp	r1, #1
	adv->lll.chan_map = chan_map;
   1a2ae:	ea40 0005 	orr.w	r0, r0, r5
	pdu->type = pdu_adv_type[adv_type];
   1a2b2:	4461      	add	r1, ip
		adv->interval = 0;
   1a2b4:	bf08      	it	eq
   1a2b6:	2700      	moveq	r7, #0
	adv->lll.chan_map = chan_map;
   1a2b8:	8520      	strh	r0, [r4, #40]	; 0x28
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1a2ba:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1a2be:	f8a4 70d8 	strh.w	r7, [r4, #216]	; 0xd8
   1a2c2:	252c      	movs	r5, #44	; 0x2c
   1a2c4:	2727      	movs	r7, #39	; 0x27
	pdu->type = pdu_adv_type[adv_type];
   1a2c6:	f811 1c08 	ldrb.w	r1, [r1, #-8]
   1a2ca:	fb17 5000 	smlabb	r0, r7, r0, r5
   1a2ce:	0195      	lsls	r5, r2, #6
   1a2d0:	f001 010f 	and.w	r1, r1, #15
   1a2d4:	f005 0240 	and.w	r2, r5, #64	; 0x40
   1a2d8:	430a      	orrs	r2, r1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1a2da:	f002 010f 	and.w	r1, r2, #15
   1a2de:	2901      	cmp	r1, #1
	pdu->type = pdu_adv_type[adv_type];
   1a2e0:	5422      	strb	r2, [r4, r0]
   1a2e2:	eb04 0700 	add.w	r7, r4, r0
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1a2e6:	d11e      	bne.n	1a326 <ll_adv_params_set+0xba>
		pdu->rx_addr = direct_addr_type;
   1a2e8:	f363 12c7 	bfi	r2, r3, #7, #1
   1a2ec:	5422      	strb	r2, [r4, r0]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   1a2ee:	9908      	ldr	r1, [sp, #32]
   1a2f0:	2206      	movs	r2, #6
   1a2f2:	f107 0008 	add.w	r0, r7, #8
   1a2f6:	f00a fecb 	bl	25090 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   1a2fa:	230c      	movs	r3, #12
		pdu->len = BDADDR_SIZE;
   1a2fc:	707b      	strb	r3, [r7, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1a2fe:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
   1a302:	227c      	movs	r2, #124	; 0x7c
   1a304:	2327      	movs	r3, #39	; 0x27
   1a306:	fb13 2301 	smlabb	r3, r3, r1, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1a30a:	f005 0540 	and.w	r5, r5, #64	; 0x40
   1a30e:	f045 0504 	orr.w	r5, r5, #4
   1a312:	54e5      	strb	r5, [r4, r3]
   1a314:	18e2      	adds	r2, r4, r3
	if (pdu->len == 0) {
   1a316:	7853      	ldrb	r3, [r2, #1]
   1a318:	b913      	cbnz	r3, 1a320 <ll_adv_params_set+0xb4>
		pdu->len = BDADDR_SIZE;
   1a31a:	2106      	movs	r1, #6
   1a31c:	7051      	strb	r1, [r2, #1]
	return 0;
   1a31e:	461e      	mov	r6, r3
}
   1a320:	4630      	mov	r0, r6
   1a322:	b003      	add	sp, #12
   1a324:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (pdu->len == 0) {
   1a326:	787b      	ldrb	r3, [r7, #1]
   1a328:	2b00      	cmp	r3, #0
   1a32a:	d1e8      	bne.n	1a2fe <ll_adv_params_set+0x92>
		pdu->len = BDADDR_SIZE;
   1a32c:	2306      	movs	r3, #6
   1a32e:	e7e5      	b.n	1a2fc <ll_adv_params_set+0x90>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a330:	260c      	movs	r6, #12
   1a332:	e7f5      	b.n	1a320 <ll_adv_params_set+0xb4>
   1a334:	00028ae6 	.word	0x00028ae6
   1a338:	200014bc 	.word	0x200014bc

0001a33c <ll_adv_data_set>:
{
   1a33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1a340:	4d1c      	ldr	r5, [pc, #112]	; (1a3b4 <ll_adv_data_set+0x78>)
   1a342:	f895 402b 	ldrb.w	r4, [r5, #43]	; 0x2b
   1a346:	222c      	movs	r2, #44	; 0x2c
   1a348:	2327      	movs	r3, #39	; 0x27
   1a34a:	fb13 2304 	smlabb	r3, r3, r4, r2
   1a34e:	4688      	mov	r8, r1
   1a350:	18e9      	adds	r1, r5, r3
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1a352:	5ceb      	ldrb	r3, [r5, r3]
   1a354:	f003 020f 	and.w	r2, r3, #15
   1a358:	2a01      	cmp	r2, #1
{
   1a35a:	4606      	mov	r6, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1a35c:	d026      	beq.n	1a3ac <ll_adv_data_set+0x70>
	if (pdu->first == pdu->last) {
   1a35e:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
   1a362:	42a2      	cmp	r2, r4
   1a364:	d104      	bne.n	1a370 <ll_adv_data_set+0x34>
		last = pdu->last + 1;
   1a366:	3401      	adds	r4, #1
   1a368:	b2e4      	uxtb	r4, r4
			last = 0U;
   1a36a:	2c02      	cmp	r4, #2
   1a36c:	bf08      	it	eq
   1a36e:	2400      	moveq	r4, #0
	return (void *)pdu->pdu[last];
   1a370:	222c      	movs	r2, #44	; 0x2c
   1a372:	2027      	movs	r0, #39	; 0x27
   1a374:	fb10 2004 	smlabb	r0, r0, r4, r2
	pdu->tx_addr = prev->tx_addr;
   1a378:	f3c3 1c80 	ubfx	ip, r3, #6, #1
	pdu->type = prev->type;
   1a37c:	f3c3 0203 	ubfx	r2, r3, #0, #4
   1a380:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
   1a384:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1a388:	4313      	orrs	r3, r2
   1a38a:	182f      	adds	r7, r5, r0
   1a38c:	542b      	strb	r3, [r5, r0]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   1a38e:	2206      	movs	r2, #6
   1a390:	3102      	adds	r1, #2
   1a392:	1cb8      	adds	r0, r7, #2
   1a394:	f00a fe7c 	bl	25090 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   1a398:	4632      	mov	r2, r6
   1a39a:	4641      	mov	r1, r8
   1a39c:	f107 0008 	add.w	r0, r7, #8
	pdu->len = BDADDR_SIZE + len;
   1a3a0:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   1a3a2:	f00a fe75 	bl	25090 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1a3a6:	707e      	strb	r6, [r7, #1]
	pdu->last = idx;
   1a3a8:	f885 402b 	strb.w	r4, [r5, #43]	; 0x2b
}
   1a3ac:	2000      	movs	r0, #0
   1a3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a3b2:	bf00      	nop
   1a3b4:	200014bc 	.word	0x200014bc

0001a3b8 <ll_adv_scan_rsp_set>:
{
   1a3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1a3bc:	4b19      	ldr	r3, [pc, #100]	; (1a424 <ll_adv_scan_rsp_set+0x6c>)
   1a3be:	f893 407b 	ldrb.w	r4, [r3, #123]	; 0x7b
   1a3c2:	227c      	movs	r2, #124	; 0x7c
   1a3c4:	4605      	mov	r5, r0
   1a3c6:	2027      	movs	r0, #39	; 0x27
   1a3c8:	fb10 2004 	smlabb	r0, r0, r4, r2
	if (pdu->first == pdu->last) {
   1a3cc:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
   1a3d0:	42a2      	cmp	r2, r4
   1a3d2:	4688      	mov	r8, r1
   1a3d4:	461e      	mov	r6, r3
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1a3d6:	eb03 0100 	add.w	r1, r3, r0
	if (pdu->first == pdu->last) {
   1a3da:	d104      	bne.n	1a3e6 <ll_adv_scan_rsp_set+0x2e>
		last = pdu->last + 1;
   1a3dc:	3401      	adds	r4, #1
   1a3de:	b2e4      	uxtb	r4, r4
			last = 0U;
   1a3e0:	2c02      	cmp	r4, #2
   1a3e2:	bf08      	it	eq
   1a3e4:	2400      	moveq	r4, #0
	pdu->tx_addr = prev->tx_addr;
   1a3e6:	5c1b      	ldrb	r3, [r3, r0]
	return (void *)pdu->pdu[last];
   1a3e8:	277c      	movs	r7, #124	; 0x7c
   1a3ea:	2227      	movs	r2, #39	; 0x27
   1a3ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1a3f0:	fb12 7204 	smlabb	r2, r2, r4, r7
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1a3f4:	019b      	lsls	r3, r3, #6
   1a3f6:	18b7      	adds	r7, r6, r2
   1a3f8:	f043 0304 	orr.w	r3, r3, #4
   1a3fc:	54b3      	strb	r3, [r6, r2]
	pdu->len = BDADDR_SIZE + len;
   1a3fe:	1dab      	adds	r3, r5, #6
   1a400:	707b      	strb	r3, [r7, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1a402:	2206      	movs	r2, #6
   1a404:	3102      	adds	r1, #2
   1a406:	1cb8      	adds	r0, r7, #2
   1a408:	f00a fe42 	bl	25090 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   1a40c:	462a      	mov	r2, r5
   1a40e:	4641      	mov	r1, r8
   1a410:	f107 0008 	add.w	r0, r7, #8
   1a414:	f00a fe3c 	bl	25090 <memcpy>
	pdu->last = idx;
   1a418:	f886 407b 	strb.w	r4, [r6, #123]	; 0x7b
}
   1a41c:	2000      	movs	r0, #0
   1a41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a422:	bf00      	nop
   1a424:	200014bc 	.word	0x200014bc

0001a428 <ull_adv_handle_get>:
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   1a428:	4b03      	ldr	r3, [pc, #12]	; (1a438 <ull_adv_handle_get+0x10>)
   1a42a:	1ac0      	subs	r0, r0, r3
   1a42c:	23dc      	movs	r3, #220	; 0xdc
   1a42e:	fbb0 f0f3 	udiv	r0, r0, r3
}
   1a432:	b280      	uxth	r0, r0
   1a434:	4770      	bx	lr
   1a436:	bf00      	nop
   1a438:	200014bc 	.word	0x200014bc

0001a43c <ull_adv_lll_handle_get>:
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   1a43c:	6800      	ldr	r0, [r0, #0]
   1a43e:	4b03      	ldr	r3, [pc, #12]	; (1a44c <ull_adv_lll_handle_get+0x10>)
   1a440:	1ac0      	subs	r0, r0, r3
   1a442:	23dc      	movs	r3, #220	; 0xdc
   1a444:	fbb0 f0f3 	udiv	r0, r0, r3
}
   1a448:	b280      	uxth	r0, r0
   1a44a:	4770      	bx	lr
   1a44c:	200014bc 	.word	0x200014bc

0001a450 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_MAX) {
   1a450:	b938      	cbnz	r0, 1a462 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   1a452:	4805      	ldr	r0, [pc, #20]	; (1a468 <ull_adv_is_enabled_get+0x18>)
   1a454:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
	return &ll_adv[handle];
   1a458:	f013 0f01 	tst.w	r3, #1
   1a45c:	bf08      	it	eq
   1a45e:	2000      	moveq	r0, #0
   1a460:	4770      	bx	lr
		return NULL;
   1a462:	2000      	movs	r0, #0
}
   1a464:	4770      	bx	lr
   1a466:	bf00      	nop
   1a468:	200014bc 	.word	0x200014bc

0001a46c <disable.constprop.0>:
#endif /* CONFIG_BT_PERIPHERAL */

static inline u8_t disable(u16_t handle)
   1a46c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   1a46e:	2302      	movs	r3, #2
	struct ll_adv_set *adv;
	void *mark;
	u32_t ret;

	adv = ull_adv_is_enabled_get(handle);
   1a470:	2000      	movs	r0, #0
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   1a472:	9303      	str	r3, [sp, #12]
	adv = ull_adv_is_enabled_get(handle);
   1a474:	f7ff ffec 	bl	1a450 <ull_adv_is_enabled_get>
	if (!adv) {
   1a478:	4604      	mov	r4, r0
   1a47a:	b910      	cbnz	r0, 1a482 <disable.constprop.0+0x16>
		ret = ull_ticker_status_take(ret, &ret_cb);
		if (ret) {
			mark = ull_disable_mark(adv);
			LL_ASSERT(mark == adv);

			return BT_HCI_ERR_CMD_DISALLOWED;
   1a47c:	200c      	movs	r0, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
}
   1a47e:	b004      	add	sp, #16
   1a480:	bd10      	pop	{r4, pc}
	mark = ull_disable_mark(adv);
   1a482:	f7ff fabd 	bl	19a00 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   1a486:	4284      	cmp	r4, r0
   1a488:	d00c      	beq.n	1a4a4 <disable.constprop.0+0x38>
   1a48a:	4a3b      	ldr	r2, [pc, #236]	; (1a578 <disable.constprop.0+0x10c>)
   1a48c:	493b      	ldr	r1, [pc, #236]	; (1a57c <disable.constprop.0+0x110>)
   1a48e:	483c      	ldr	r0, [pc, #240]	; (1a580 <disable.constprop.0+0x114>)
   1a490:	f240 43ec 	movw	r3, #1260	; 0x4ec
   1a494:	f008 ff19 	bl	232ca <printk>
   1a498:	4040      	eors	r0, r0
   1a49a:	f380 8811 	msr	BASEPRI, r0
   1a49e:	f04f 0003 	mov.w	r0, #3
   1a4a2:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   1a4a4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1a4a8:	07db      	lsls	r3, r3, #31
   1a4aa:	d520      	bpl.n	1a4ee <disable.constprop.0+0x82>
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a4ac:	ab03      	add	r3, sp, #12
   1a4ae:	9300      	str	r3, [sp, #0]
   1a4b0:	2103      	movs	r1, #3
   1a4b2:	4b34      	ldr	r3, [pc, #208]	; (1a584 <disable.constprop.0+0x118>)
   1a4b4:	2201      	movs	r2, #1
   1a4b6:	2000      	movs	r0, #0
   1a4b8:	f7fd fe46 	bl	18148 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   1a4bc:	a903      	add	r1, sp, #12
   1a4be:	f7ff fa93 	bl	199e8 <ull_ticker_status_take>
		if (ret) {
   1a4c2:	b190      	cbz	r0, 1a4ea <disable.constprop.0+0x7e>
			mark = ull_disable_mark(adv);
   1a4c4:	4620      	mov	r0, r4
   1a4c6:	f7ff fa9b 	bl	19a00 <ull_disable_mark>
			LL_ASSERT(mark == adv);
   1a4ca:	4284      	cmp	r4, r0
   1a4cc:	d0d6      	beq.n	1a47c <disable.constprop.0+0x10>
   1a4ce:	f240 43f6 	movw	r3, #1270	; 0x4f6
   1a4d2:	4a29      	ldr	r2, [pc, #164]	; (1a578 <disable.constprop.0+0x10c>)
   1a4d4:	4929      	ldr	r1, [pc, #164]	; (1a57c <disable.constprop.0+0x110>)
   1a4d6:	482a      	ldr	r0, [pc, #168]	; (1a580 <disable.constprop.0+0x114>)
   1a4d8:	f008 fef7 	bl	232ca <printk>
   1a4dc:	4040      	eors	r0, r0
   1a4de:	f380 8811 	msr	BASEPRI, r0
   1a4e2:	f04f 0003 	mov.w	r0, #3
   1a4e6:	df02      	svc	2
   1a4e8:	e7c8      	b.n	1a47c <disable.constprop.0+0x10>
		ret_cb = TICKER_STATUS_BUSY;
   1a4ea:	2302      	movs	r3, #2
   1a4ec:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1a4ee:	ab03      	add	r3, sp, #12
   1a4f0:	9300      	str	r3, [sp, #0]
   1a4f2:	2103      	movs	r1, #3
   1a4f4:	4b23      	ldr	r3, [pc, #140]	; (1a584 <disable.constprop.0+0x118>)
   1a4f6:	2202      	movs	r2, #2
   1a4f8:	2000      	movs	r0, #0
   1a4fa:	f7fd fe25 	bl	18148 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1a4fe:	a903      	add	r1, sp, #12
   1a500:	f7ff fa72 	bl	199e8 <ull_ticker_status_take>
	if (ret) {
   1a504:	b138      	cbz	r0, 1a516 <disable.constprop.0+0xaa>
		mark = ull_disable_mark(adv);
   1a506:	4620      	mov	r0, r4
   1a508:	f7ff fa7a 	bl	19a00 <ull_disable_mark>
		LL_ASSERT(mark == adv);
   1a50c:	4284      	cmp	r4, r0
   1a50e:	d0b5      	beq.n	1a47c <disable.constprop.0+0x10>
   1a510:	f240 5305 	movw	r3, #1285	; 0x505
   1a514:	e7dd      	b.n	1a4d2 <disable.constprop.0+0x66>
	ret = ull_disable(&adv->lll);
   1a516:	f104 001c 	add.w	r0, r4, #28
   1a51a:	f7ff faa9 	bl	19a70 <ull_disable>
	LL_ASSERT(!ret);
   1a51e:	b160      	cbz	r0, 1a53a <disable.constprop.0+0xce>
   1a520:	4a15      	ldr	r2, [pc, #84]	; (1a578 <disable.constprop.0+0x10c>)
   1a522:	4919      	ldr	r1, [pc, #100]	; (1a588 <disable.constprop.0+0x11c>)
   1a524:	4816      	ldr	r0, [pc, #88]	; (1a580 <disable.constprop.0+0x114>)
   1a526:	f240 530b 	movw	r3, #1291	; 0x50b
   1a52a:	f008 fece 	bl	232ca <printk>
   1a52e:	4040      	eors	r0, r0
   1a530:	f380 8811 	msr	BASEPRI, r0
   1a534:	f04f 0003 	mov.w	r0, #3
   1a538:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   1a53a:	4620      	mov	r0, r4
   1a53c:	f7ff fa68 	bl	19a10 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1a540:	4284      	cmp	r4, r0
   1a542:	d00c      	beq.n	1a55e <disable.constprop.0+0xf2>
   1a544:	4a0c      	ldr	r2, [pc, #48]	; (1a578 <disable.constprop.0+0x10c>)
   1a546:	490d      	ldr	r1, [pc, #52]	; (1a57c <disable.constprop.0+0x110>)
   1a548:	480d      	ldr	r0, [pc, #52]	; (1a580 <disable.constprop.0+0x114>)
   1a54a:	f240 530e 	movw	r3, #1294	; 0x50e
   1a54e:	f008 febc 	bl	232ca <printk>
   1a552:	4040      	eors	r0, r0
   1a554:	f380 8811 	msr	BASEPRI, r0
   1a558:	f04f 0003 	mov.w	r0, #3
   1a55c:	df02      	svc	2
	if (adv->lll.conn) {
   1a55e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a560:	b113      	cbz	r3, 1a568 <disable.constprop.0+0xfc>
		conn_release(adv);
   1a562:	4620      	mov	r0, r4
   1a564:	f7ff fd9a 	bl	1a09c <conn_release>
	adv->is_enabled = 0U;
   1a568:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   1a56c:	f36f 0300 	bfc	r3, #0, #1
   1a570:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	return 0;
   1a574:	2000      	movs	r0, #0
   1a576:	e782      	b.n	1a47e <disable.constprop.0+0x12>
   1a578:	0002eef9 	.word	0x0002eef9
   1a57c:	0002efd7 	.word	0x0002efd7
   1a580:	000297e6 	.word	0x000297e6
   1a584:	000199dd 	.word	0x000199dd
   1a588:	0002eeba 	.word	0x0002eeba

0001a58c <ticker_cb>:
	return 0;
}

static void ticker_cb(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
		      void *param)
{
   1a58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a58e:	461c      	mov	r4, r3
   1a590:	7c1b      	ldrb	r3, [r3, #16]
   1a592:	3301      	adds	r3, #1
   1a594:	b2db      	uxtb	r3, r3
   1a596:	4607      	mov	r7, r0
   1a598:	460e      	mov	r6, r1
   1a59a:	4615      	mov	r5, r2
   1a59c:	7423      	strb	r3, [r4, #16]

	DEBUG_RADIO_PREPARE_O(1);

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   1a59e:	b963      	cbnz	r3, 1a5ba <ticker_cb+0x2e>
   1a5a0:	4a14      	ldr	r2, [pc, #80]	; (1a5f4 <ticker_cb+0x68>)
   1a5a2:	4915      	ldr	r1, [pc, #84]	; (1a5f8 <ticker_cb+0x6c>)
   1a5a4:	4815      	ldr	r0, [pc, #84]	; (1a5fc <ticker_cb+0x70>)
   1a5a6:	f44f 73c4 	mov.w	r3, #392	; 0x188
   1a5aa:	f008 fe8e 	bl	232ca <printk>
   1a5ae:	4040      	eors	r0, r0
   1a5b0:	f380 8811 	msr	BASEPRI, r0
   1a5b4:	f04f 0003 	mov.w	r0, #3
   1a5b8:	df02      	svc	2

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   1a5ba:	4a11      	ldr	r2, [pc, #68]	; (1a600 <ticker_cb+0x74>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = &scan->lll;
	mfy.param = &p;
   1a5bc:	4b11      	ldr	r3, [pc, #68]	; (1a604 <ticker_cb+0x78>)
	p.lazy = lazy;
   1a5be:	8115      	strh	r5, [r2, #8]
	p.param = &scan->lll;
   1a5c0:	341c      	adds	r4, #28
	p.remainder = remainder;
   1a5c2:	e9c2 7600 	strd	r7, r6, [r2]
	p.param = &scan->lll;
   1a5c6:	60d4      	str	r4, [r2, #12]
	mfy.param = &p;
   1a5c8:	609a      	str	r2, [r3, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a5ca:	2200      	movs	r2, #0
   1a5cc:	4611      	mov	r1, r2
   1a5ce:	2001      	movs	r0, #1
   1a5d0:	f7fc ff90 	bl	174f4 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1a5d4:	b160      	cbz	r0, 1a5f0 <ticker_cb+0x64>
   1a5d6:	4a07      	ldr	r2, [pc, #28]	; (1a5f4 <ticker_cb+0x68>)
   1a5d8:	490b      	ldr	r1, [pc, #44]	; (1a608 <ticker_cb+0x7c>)
   1a5da:	4808      	ldr	r0, [pc, #32]	; (1a5fc <ticker_cb+0x70>)
   1a5dc:	f44f 73ca 	mov.w	r3, #404	; 0x194
   1a5e0:	f008 fe73 	bl	232ca <printk>
   1a5e4:	4040      	eors	r0, r0
   1a5e6:	f380 8811 	msr	BASEPRI, r0
   1a5ea:	f04f 0003 	mov.w	r0, #3
   1a5ee:	df02      	svc	2
		LL_ASSERT(!retval);
	}
#endif /* CONFIG_BT_CENTRAL && CONFIG_BT_CTLR_SCHED_ADVANCED */

	DEBUG_RADIO_PREPARE_O(1);
}
   1a5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a5f2:	bf00      	nop
   1a5f4:	0002eff3 	.word	0x0002eff3
   1a5f8:	0002eed8 	.word	0x0002eed8
   1a5fc:	000297e6 	.word	0x000297e6
   1a600:	200015ec 	.word	0x200015ec
   1a604:	20007184 	.word	0x20007184
   1a608:	0002eeba 	.word	0x0002eeba

0001a60c <ull_scan_disable>:
{
   1a60c:	b530      	push	{r4, r5, lr}
   1a60e:	b085      	sub	sp, #20
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   1a610:	2302      	movs	r3, #2
{
   1a612:	4605      	mov	r5, r0
	mark = ull_disable_mark(scan);
   1a614:	4608      	mov	r0, r1
{
   1a616:	460c      	mov	r4, r1
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   1a618:	9303      	str	r3, [sp, #12]
	mark = ull_disable_mark(scan);
   1a61a:	f7ff f9f1 	bl	19a00 <ull_disable_mark>
	LL_ASSERT(mark == scan);
   1a61e:	4284      	cmp	r4, r0
   1a620:	d00c      	beq.n	1a63c <ull_scan_disable+0x30>
   1a622:	4a2a      	ldr	r2, [pc, #168]	; (1a6cc <ull_scan_disable+0xc0>)
   1a624:	492a      	ldr	r1, [pc, #168]	; (1a6d0 <ull_scan_disable+0xc4>)
   1a626:	482b      	ldr	r0, [pc, #172]	; (1a6d4 <ull_scan_disable+0xc8>)
   1a628:	f240 1313 	movw	r3, #275	; 0x113
   1a62c:	f008 fe4d 	bl	232ca <printk>
   1a630:	4040      	eors	r0, r0
   1a632:	f380 8811 	msr	BASEPRI, r0
   1a636:	f04f 0003 	mov.w	r0, #3
   1a63a:	df02      	svc	2
			  TICKER_ID_SCAN_BASE + handle,
   1a63c:	1d2a      	adds	r2, r5, #4
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1a63e:	ad03      	add	r5, sp, #12
   1a640:	2103      	movs	r1, #3
   1a642:	4b25      	ldr	r3, [pc, #148]	; (1a6d8 <ull_scan_disable+0xcc>)
   1a644:	9500      	str	r5, [sp, #0]
   1a646:	b2d2      	uxtb	r2, r2
   1a648:	2000      	movs	r0, #0
   1a64a:	f7fd fd7d 	bl	18148 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1a64e:	4629      	mov	r1, r5
   1a650:	f7ff f9ca 	bl	199e8 <ull_ticker_status_take>
	if (ret) {
   1a654:	b1a0      	cbz	r0, 1a680 <ull_scan_disable+0x74>
		mark = ull_disable_unmark(scan);
   1a656:	4620      	mov	r0, r4
   1a658:	f7ff f9da 	bl	19a10 <ull_disable_unmark>
		LL_ASSERT(mark == scan);
   1a65c:	4284      	cmp	r4, r0
   1a65e:	d00c      	beq.n	1a67a <ull_scan_disable+0x6e>
   1a660:	4a1a      	ldr	r2, [pc, #104]	; (1a6cc <ull_scan_disable+0xc0>)
   1a662:	491b      	ldr	r1, [pc, #108]	; (1a6d0 <ull_scan_disable+0xc4>)
   1a664:	481b      	ldr	r0, [pc, #108]	; (1a6d4 <ull_scan_disable+0xc8>)
   1a666:	f44f 738e 	mov.w	r3, #284	; 0x11c
   1a66a:	f008 fe2e 	bl	232ca <printk>
   1a66e:	4040      	eors	r0, r0
   1a670:	f380 8811 	msr	BASEPRI, r0
   1a674:	f04f 0003 	mov.w	r0, #3
   1a678:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a67a:	200c      	movs	r0, #12
}
   1a67c:	b005      	add	sp, #20
   1a67e:	bd30      	pop	{r4, r5, pc}
	ret = ull_disable(&scan->lll);
   1a680:	f104 001c 	add.w	r0, r4, #28
   1a684:	f7ff f9f4 	bl	19a70 <ull_disable>
	LL_ASSERT(!ret);
   1a688:	b160      	cbz	r0, 1a6a4 <ull_scan_disable+0x98>
   1a68a:	4a10      	ldr	r2, [pc, #64]	; (1a6cc <ull_scan_disable+0xc0>)
   1a68c:	4913      	ldr	r1, [pc, #76]	; (1a6dc <ull_scan_disable+0xd0>)
   1a68e:	4811      	ldr	r0, [pc, #68]	; (1a6d4 <ull_scan_disable+0xc8>)
   1a690:	f44f 7391 	mov.w	r3, #290	; 0x122
   1a694:	f008 fe19 	bl	232ca <printk>
   1a698:	4040      	eors	r0, r0
   1a69a:	f380 8811 	msr	BASEPRI, r0
   1a69e:	f04f 0003 	mov.w	r0, #3
   1a6a2:	df02      	svc	2
	mark = ull_disable_unmark(scan);
   1a6a4:	4620      	mov	r0, r4
   1a6a6:	f7ff f9b3 	bl	19a10 <ull_disable_unmark>
	LL_ASSERT(mark == scan);
   1a6aa:	4284      	cmp	r4, r0
   1a6ac:	d00c      	beq.n	1a6c8 <ull_scan_disable+0xbc>
   1a6ae:	4a07      	ldr	r2, [pc, #28]	; (1a6cc <ull_scan_disable+0xc0>)
   1a6b0:	4907      	ldr	r1, [pc, #28]	; (1a6d0 <ull_scan_disable+0xc4>)
   1a6b2:	4808      	ldr	r0, [pc, #32]	; (1a6d4 <ull_scan_disable+0xc8>)
   1a6b4:	f240 1325 	movw	r3, #293	; 0x125
   1a6b8:	f008 fe07 	bl	232ca <printk>
   1a6bc:	4040      	eors	r0, r0
   1a6be:	f380 8811 	msr	BASEPRI, r0
   1a6c2:	f04f 0003 	mov.w	r0, #3
   1a6c6:	df02      	svc	2
	return 0;
   1a6c8:	2000      	movs	r0, #0
   1a6ca:	e7d7      	b.n	1a67c <ull_scan_disable+0x70>
   1a6cc:	0002eff3 	.word	0x0002eff3
   1a6d0:	0002f033 	.word	0x0002f033
   1a6d4:	000297e6 	.word	0x000297e6
   1a6d8:	000199dd 	.word	0x000199dd
   1a6dc:	0002eeba 	.word	0x0002eeba

0001a6e0 <ull_scan_lll_handle_get>:
	return ((u8_t *)scan - (u8_t *)ll_scan) / sizeof(*scan);
   1a6e0:	6800      	ldr	r0, [r0, #0]
   1a6e2:	4b03      	ldr	r3, [pc, #12]	; (1a6f0 <ull_scan_lll_handle_get+0x10>)
   1a6e4:	1ac0      	subs	r0, r0, r3
   1a6e6:	233c      	movs	r3, #60	; 0x3c
   1a6e8:	fbb0 f0f3 	udiv	r0, r0, r3
}
   1a6ec:	b280      	uxth	r0, r0
   1a6ee:	4770      	bx	lr
   1a6f0:	200015b0 	.word	0x200015b0

0001a6f4 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_MAX) {
   1a6f4:	b938      	cbnz	r0, 1a706 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   1a6f6:	4805      	ldr	r0, [pc, #20]	; (1a70c <ull_scan_is_enabled_get+0x18>)
   1a6f8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
	return &ll_scan[handle];
   1a6fc:	f013 0f01 	tst.w	r3, #1
   1a700:	bf08      	it	eq
   1a702:	2000      	moveq	r0, #0
   1a704:	4770      	bx	lr
		return NULL;
   1a706:	2000      	movs	r0, #0
}
   1a708:	4770      	bx	lr
   1a70a:	bf00      	nop
   1a70c:	200015b0 	.word	0x200015b0

0001a710 <ull_scan_is_disabled_get>:
	if (handle >= BT_CTLR_SCAN_MAX) {
   1a710:	b938      	cbnz	r0, 1a722 <ull_scan_is_disabled_get+0x12>
	if (!scan || scan->is_enabled) {
   1a712:	4805      	ldr	r0, [pc, #20]	; (1a728 <ull_scan_is_disabled_get+0x18>)
   1a714:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
	return &ll_scan[handle];
   1a718:	f013 0f01 	tst.w	r3, #1
   1a71c:	bf18      	it	ne
   1a71e:	2000      	movne	r0, #0
   1a720:	4770      	bx	lr
		return NULL;
   1a722:	2000      	movs	r0, #0
}
   1a724:	4770      	bx	lr
   1a726:	bf00      	nop
   1a728:	200015b0 	.word	0x200015b0

0001a72c <pdu_len_cmp>:
		break;
	}
}

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
   1a72c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
   1a72e:	4b0d      	ldr	r3, [pc, #52]	; (1a764 <pdu_len_cmp+0x38>)
{
   1a730:	b089      	sub	sp, #36	; 0x24
   1a732:	4602      	mov	r2, r0
   1a734:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
   1a736:	ac01      	add	r4, sp, #4
   1a738:	f103 0718 	add.w	r7, r3, #24
   1a73c:	6818      	ldr	r0, [r3, #0]
   1a73e:	6859      	ldr	r1, [r3, #4]
   1a740:	4625      	mov	r5, r4
   1a742:	c503      	stmia	r5!, {r0, r1}
   1a744:	3308      	adds	r3, #8
   1a746:	42bb      	cmp	r3, r7
   1a748:	462c      	mov	r4, r5
   1a74a:	d1f7      	bne.n	1a73c <pdu_len_cmp+0x10>
   1a74c:	881b      	ldrh	r3, [r3, #0]
   1a74e:	802b      	strh	r3, [r5, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
   1a750:	ab08      	add	r3, sp, #32
   1a752:	441a      	add	r2, r3
   1a754:	f812 0c1c 	ldrb.w	r0, [r2, #-28]
}
   1a758:	1b83      	subs	r3, r0, r6
   1a75a:	4258      	negs	r0, r3
   1a75c:	4158      	adcs	r0, r3
   1a75e:	b009      	add	sp, #36	; 0x24
   1a760:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a762:	bf00      	nop
   1a764:	0002f051 	.word	0x0002f051

0001a768 <ticker_update_latency_cancel_op_cb>:
{
   1a768:	b510      	push	{r4, lr}
   1a76a:	460c      	mov	r4, r1
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1a76c:	b160      	cbz	r0, 1a788 <ticker_update_latency_cancel_op_cb+0x20>
   1a76e:	4a0a      	ldr	r2, [pc, #40]	; (1a798 <ticker_update_latency_cancel_op_cb+0x30>)
   1a770:	490a      	ldr	r1, [pc, #40]	; (1a79c <ticker_update_latency_cancel_op_cb+0x34>)
   1a772:	480b      	ldr	r0, [pc, #44]	; (1a7a0 <ticker_update_latency_cancel_op_cb+0x38>)
   1a774:	f240 635b 	movw	r3, #1627	; 0x65b
   1a778:	f008 fda7 	bl	232ca <printk>
   1a77c:	4040      	eors	r0, r0
   1a77e:	f380 8811 	msr	BASEPRI, r0
   1a782:	f04f 0003 	mov.w	r0, #3
   1a786:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   1a788:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   1a78c:	f36f 0341 	bfc	r3, #1, #1
   1a790:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
   1a794:	bd10      	pop	{r4, pc}
   1a796:	bf00      	nop
   1a798:	0002f06c 	.word	0x0002f06c
   1a79c:	0002f0ac 	.word	0x0002f0ac
   1a7a0:	000297e6 	.word	0x000297e6

0001a7a4 <init_reset>:
{
   1a7a4:	b508      	push	{r3, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   1a7a6:	480d      	ldr	r0, [pc, #52]	; (1a7dc <init_reset+0x38>)
   1a7a8:	4b0d      	ldr	r3, [pc, #52]	; (1a7e0 <init_reset+0x3c>)
   1a7aa:	2201      	movs	r2, #1
   1a7ac:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1a7b0:	f00c fce5 	bl	2717e <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   1a7b4:	4b0b      	ldr	r3, [pc, #44]	; (1a7e4 <init_reset+0x40>)
   1a7b6:	2203      	movs	r2, #3
   1a7b8:	1d18      	adds	r0, r3, #4
   1a7ba:	2124      	movs	r1, #36	; 0x24
   1a7bc:	f00c fcdf 	bl	2717e <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   1a7c0:	4b09      	ldr	r3, [pc, #36]	; (1a7e8 <init_reset+0x44>)
   1a7c2:	2204      	movs	r2, #4
   1a7c4:	1898      	adds	r0, r3, r2
   1a7c6:	2120      	movs	r1, #32
   1a7c8:	f00c fcd9 	bl	2717e <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   1a7cc:	4b07      	ldr	r3, [pc, #28]	; (1a7ec <init_reset+0x48>)
   1a7ce:	2207      	movs	r2, #7
   1a7d0:	1d18      	adds	r0, r3, #4
   1a7d2:	2108      	movs	r1, #8
   1a7d4:	f00c fcd3 	bl	2717e <mem_init>
}
   1a7d8:	2000      	movs	r0, #0
   1a7da:	bd08      	pop	{r3, pc}
   1a7dc:	20001600 	.word	0x20001600
   1a7e0:	200015fc 	.word	0x200015fc
   1a7e4:	20001738 	.word	0x20001738
   1a7e8:	200017a8 	.word	0x200017a8
   1a7ec:	2000182c 	.word	0x2000182c

0001a7f0 <ticker_start_conn_op_cb>:
{
   1a7f0:	b510      	push	{r4, lr}
   1a7f2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a7f4:	b160      	cbz	r0, 1a810 <ticker_start_conn_op_cb+0x20>
   1a7f6:	4a10      	ldr	r2, [pc, #64]	; (1a838 <ticker_start_conn_op_cb+0x48>)
   1a7f8:	4910      	ldr	r1, [pc, #64]	; (1a83c <ticker_start_conn_op_cb+0x4c>)
   1a7fa:	4811      	ldr	r0, [pc, #68]	; (1a840 <ticker_start_conn_op_cb+0x50>)
   1a7fc:	f240 6377 	movw	r3, #1655	; 0x677
   1a800:	f008 fd63 	bl	232ca <printk>
   1a804:	4040      	eors	r0, r0
   1a806:	f380 8811 	msr	BASEPRI, r0
   1a80a:	f04f 0003 	mov.w	r0, #3
   1a80e:	df02      	svc	2
	void *p = ull_update_unmark(param);
   1a810:	4620      	mov	r0, r4
   1a812:	f7ff f919 	bl	19a48 <ull_update_unmark>
	LL_ASSERT(p == param);
   1a816:	4284      	cmp	r4, r0
   1a818:	d00c      	beq.n	1a834 <ticker_start_conn_op_cb+0x44>
   1a81a:	4a07      	ldr	r2, [pc, #28]	; (1a838 <ticker_start_conn_op_cb+0x48>)
   1a81c:	4909      	ldr	r1, [pc, #36]	; (1a844 <ticker_start_conn_op_cb+0x54>)
   1a81e:	4808      	ldr	r0, [pc, #32]	; (1a840 <ticker_start_conn_op_cb+0x50>)
   1a820:	f240 637b 	movw	r3, #1659	; 0x67b
   1a824:	f008 fd51 	bl	232ca <printk>
   1a828:	4040      	eors	r0, r0
   1a82a:	f380 8811 	msr	BASEPRI, r0
   1a82e:	f04f 0003 	mov.w	r0, #3
   1a832:	df02      	svc	2
}
   1a834:	bd10      	pop	{r4, pc}
   1a836:	bf00      	nop
   1a838:	0002f06c 	.word	0x0002f06c
   1a83c:	0002f0b3 	.word	0x0002f0b3
   1a840:	000297e6 	.word	0x000297e6
   1a844:	0002f0bf 	.word	0x0002f0bf

0001a848 <ticker_stop_conn_op_cb>:
{
   1a848:	b510      	push	{r4, lr}
   1a84a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a84c:	b160      	cbz	r0, 1a868 <ticker_stop_conn_op_cb+0x20>
   1a84e:	4a10      	ldr	r2, [pc, #64]	; (1a890 <ticker_stop_conn_op_cb+0x48>)
   1a850:	4910      	ldr	r1, [pc, #64]	; (1a894 <ticker_stop_conn_op_cb+0x4c>)
   1a852:	4811      	ldr	r0, [pc, #68]	; (1a898 <ticker_stop_conn_op_cb+0x50>)
   1a854:	f240 636e 	movw	r3, #1646	; 0x66e
   1a858:	f008 fd37 	bl	232ca <printk>
   1a85c:	4040      	eors	r0, r0
   1a85e:	f380 8811 	msr	BASEPRI, r0
   1a862:	f04f 0003 	mov.w	r0, #3
   1a866:	df02      	svc	2
	void *p = ull_update_mark(param);
   1a868:	4620      	mov	r0, r4
   1a86a:	f7ff f8e5 	bl	19a38 <ull_update_mark>
	LL_ASSERT(p == param);
   1a86e:	4284      	cmp	r4, r0
   1a870:	d00c      	beq.n	1a88c <ticker_stop_conn_op_cb+0x44>
   1a872:	4a07      	ldr	r2, [pc, #28]	; (1a890 <ticker_stop_conn_op_cb+0x48>)
   1a874:	4909      	ldr	r1, [pc, #36]	; (1a89c <ticker_stop_conn_op_cb+0x54>)
   1a876:	4808      	ldr	r0, [pc, #32]	; (1a898 <ticker_stop_conn_op_cb+0x50>)
   1a878:	f240 6372 	movw	r3, #1650	; 0x672
   1a87c:	f008 fd25 	bl	232ca <printk>
   1a880:	4040      	eors	r0, r0
   1a882:	f380 8811 	msr	BASEPRI, r0
   1a886:	f04f 0003 	mov.w	r0, #3
   1a88a:	df02      	svc	2
}
   1a88c:	bd10      	pop	{r4, pc}
   1a88e:	bf00      	nop
   1a890:	0002f06c 	.word	0x0002f06c
   1a894:	0002f0b3 	.word	0x0002f0b3
   1a898:	000297e6 	.word	0x000297e6
   1a89c:	0002f0bf 	.word	0x0002f0bf

0001a8a0 <ticker_update_conn_op_cb>:
{
   1a8a0:	b510      	push	{r4, lr}
   1a8a2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1a8a4:	b1a0      	cbz	r0, 1a8d0 <ticker_update_conn_op_cb+0x30>
   1a8a6:	f7ff f8dd 	bl	19a64 <ull_update_mark_get>
   1a8aa:	4284      	cmp	r4, r0
   1a8ac:	d010      	beq.n	1a8d0 <ticker_update_conn_op_cb+0x30>
   1a8ae:	f7ff f8bd 	bl	19a2c <ull_disable_mark_get>
   1a8b2:	4284      	cmp	r4, r0
   1a8b4:	d00c      	beq.n	1a8d0 <ticker_update_conn_op_cb+0x30>
   1a8b6:	4a07      	ldr	r2, [pc, #28]	; (1a8d4 <ticker_update_conn_op_cb+0x34>)
   1a8b8:	4907      	ldr	r1, [pc, #28]	; (1a8d8 <ticker_update_conn_op_cb+0x38>)
   1a8ba:	4808      	ldr	r0, [pc, #32]	; (1a8dc <ticker_update_conn_op_cb+0x3c>)
   1a8bc:	f240 6367 	movw	r3, #1639	; 0x667
   1a8c0:	f008 fd03 	bl	232ca <printk>
   1a8c4:	4040      	eors	r0, r0
   1a8c6:	f380 8811 	msr	BASEPRI, r0
   1a8ca:	f04f 0003 	mov.w	r0, #3
   1a8ce:	df02      	svc	2
}
   1a8d0:	bd10      	pop	{r4, pc}
   1a8d2:	bf00      	nop
   1a8d4:	0002f06c 	.word	0x0002f06c
   1a8d8:	0002f0ca 	.word	0x0002f0ca
   1a8dc:	000297e6 	.word	0x000297e6

0001a8e0 <ticker_op_stop_cb>:
{
   1a8e0:	b510      	push	{r4, lr}
   1a8e2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a8e4:	b160      	cbz	r0, 1a900 <ticker_op_stop_cb+0x20>
   1a8e6:	4a11      	ldr	r2, [pc, #68]	; (1a92c <ticker_op_stop_cb+0x4c>)
   1a8e8:	4911      	ldr	r1, [pc, #68]	; (1a930 <ticker_op_stop_cb+0x50>)
   1a8ea:	4812      	ldr	r0, [pc, #72]	; (1a934 <ticker_op_stop_cb+0x54>)
   1a8ec:	f240 6384 	movw	r3, #1668	; 0x684
   1a8f0:	f008 fceb 	bl	232ca <printk>
   1a8f4:	4040      	eors	r0, r0
   1a8f6:	f380 8811 	msr	BASEPRI, r0
   1a8fa:	f04f 0003 	mov.w	r0, #3
   1a8fe:	df02      	svc	2
	mfy.param = param;
   1a900:	4b0d      	ldr	r3, [pc, #52]	; (1a938 <ticker_op_stop_cb+0x58>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   1a902:	2200      	movs	r2, #0
   1a904:	4611      	mov	r1, r2
   1a906:	2002      	movs	r0, #2
	mfy.param = param;
   1a908:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   1a90a:	f7fc fdf3 	bl	174f4 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1a90e:	b160      	cbz	r0, 1a92a <ticker_op_stop_cb+0x4a>
   1a910:	4a06      	ldr	r2, [pc, #24]	; (1a92c <ticker_op_stop_cb+0x4c>)
   1a912:	490a      	ldr	r1, [pc, #40]	; (1a93c <ticker_op_stop_cb+0x5c>)
   1a914:	4807      	ldr	r0, [pc, #28]	; (1a934 <ticker_op_stop_cb+0x54>)
   1a916:	f240 638b 	movw	r3, #1675	; 0x68b
   1a91a:	f008 fcd6 	bl	232ca <printk>
   1a91e:	4040      	eors	r0, r0
   1a920:	f380 8811 	msr	BASEPRI, r0
   1a924:	f04f 0003 	mov.w	r0, #3
   1a928:	df02      	svc	2
}
   1a92a:	bd10      	pop	{r4, pc}
   1a92c:	0002f06c 	.word	0x0002f06c
   1a930:	0002f0b3 	.word	0x0002f0b3
   1a934:	000297e6 	.word	0x000297e6
   1a938:	200071fc 	.word	0x200071fc
   1a93c:	0002ee2c 	.word	0x0002ee2c

0001a940 <reject_ext_ind_send.isra.0>:
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1a940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a944:	4605      	mov	r5, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1a946:	480f      	ldr	r0, [pc, #60]	; (1a984 <reject_ext_ind_send.isra.0+0x44>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1a948:	460c      	mov	r4, r1
   1a94a:	4617      	mov	r7, r2
   1a94c:	461e      	mov	r6, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1a94e:	f00c fc3a 	bl	271c6 <mem_acquire>
	if (!tx) {
   1a952:	4601      	mov	r1, r0
   1a954:	b198      	cbz	r0, 1a97e <reject_ext_ind_send.isra.0+0x3e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a956:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   1a958:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a95a:	f043 0303 	orr.w	r3, r3, #3
   1a95e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1a960:	f04f 0803 	mov.w	r8, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1a964:	2311      	movs	r3, #17
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1a966:	f880 8005 	strb.w	r8, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1a96a:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1a96c:	7246      	strb	r6, [r0, #9]
	ctrl_tx_enqueue(conn, tx);
   1a96e:	4628      	mov	r0, r5
   1a970:	f00c fea6 	bl	276c0 <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1a974:	f884 8000 	strb.w	r8, [r4]
	return 0;
   1a978:	2000      	movs	r0, #0
}
   1a97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   1a97e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1a982:	e7fa      	b.n	1a97a <reject_ext_ind_send.isra.0+0x3a>
   1a984:	200017a8 	.word	0x200017a8

0001a988 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   1a988:	4801      	ldr	r0, [pc, #4]	; (1a990 <ll_conn_acquire+0x8>)
   1a98a:	f00c bc1c 	b.w	271c6 <mem_acquire>
   1a98e:	bf00      	nop
   1a990:	200015fc 	.word	0x200015fc

0001a994 <ll_conn_release>:
	mem_release(conn, &conn_free);
   1a994:	4901      	ldr	r1, [pc, #4]	; (1a99c <ll_conn_release+0x8>)
   1a996:	f00c bc2f 	b.w	271f8 <mem_release>
   1a99a:	bf00      	nop
   1a99c:	200015fc 	.word	0x200015fc

0001a9a0 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1a9a0:	4902      	ldr	r1, [pc, #8]	; (1a9ac <ll_conn_handle_get+0xc>)
   1a9a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
   1a9a6:	f00c bc3f 	b.w	27228 <mem_index_get>
   1a9aa:	bf00      	nop
   1a9ac:	20001600 	.word	0x20001600

0001a9b0 <tx_lll_flush>:
{
   1a9b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   1a9b4:	6804      	ldr	r4, [r0, #0]
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1a9b6:	4e30      	ldr	r6, [pc, #192]	; (1aa78 <tx_lll_flush+0xc8>)
{
   1a9b8:	4605      	mov	r5, r0
	u16_t handle = ll_conn_handle_get(conn);
   1a9ba:	4620      	mov	r0, r4
   1a9bc:	f7ff fff0 	bl	1a9a0 <ll_conn_handle_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1a9c0:	f105 0840 	add.w	r8, r5, #64	; 0x40
	lll_conn_flush(handle, lll);
   1a9c4:	4629      	mov	r1, r5
   1a9c6:	f00d f934 	bl	27c32 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1a9ca:	6c68      	ldr	r0, [r5, #68]	; 0x44
   1a9cc:	aa01      	add	r2, sp, #4
   1a9ce:	4641      	mov	r1, r8
   1a9d0:	f00c fc66 	bl	272a0 <memq_dequeue>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1a9d4:	1d37      	adds	r7, r6, #4
	while (link) {
   1a9d6:	b9f0      	cbnz	r0, 1aa16 <tx_lll_flush+0x66>
	LL_ASSERT(rx->hdr.link);
   1a9d8:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	rx = (void *)&conn->llcp_terminate.node_rx;
   1a9dc:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
	LL_ASSERT(rx->hdr.link);
   1a9e0:	b963      	cbnz	r3, 1a9fc <tx_lll_flush+0x4c>
   1a9e2:	4a26      	ldr	r2, [pc, #152]	; (1aa7c <tx_lll_flush+0xcc>)
   1a9e4:	4926      	ldr	r1, [pc, #152]	; (1aa80 <tx_lll_flush+0xd0>)
   1a9e6:	4827      	ldr	r0, [pc, #156]	; (1aa84 <tx_lll_flush+0xd4>)
   1a9e8:	f240 7312 	movw	r3, #1810	; 0x712
   1a9ec:	f008 fc6d 	bl	232ca <printk>
   1a9f0:	4040      	eors	r0, r0
   1a9f2:	f380 8811 	msr	BASEPRI, r0
   1a9f6:	f04f 0003 	mov.w	r0, #3
   1a9fa:	df02      	svc	2
	rx->hdr.link = NULL;
   1a9fc:	2300      	movs	r3, #0
	link = rx->hdr.link;
   1a9fe:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
	rx->hdr.link = NULL;
   1aa02:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	ull_rx_put(link, rx);
   1aa06:	4629      	mov	r1, r5
   1aa08:	f7ff f89c 	bl	19b44 <ull_rx_put>
	ull_rx_sched();
   1aa0c:	f7ff f8aa 	bl	19b64 <ull_rx_sched>
}
   1aa10:	b002      	add	sp, #8
   1aa12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1aa16:	78f3      	ldrb	r3, [r6, #3]
	if (last == count) {
   1aa18:	f896 e001 	ldrb.w	lr, [r6, #1]
   1aa1c:	f896 c002 	ldrb.w	ip, [r6, #2]
   1aa20:	7832      	ldrb	r2, [r6, #0]
	last = last + 1;
   1aa22:	1c59      	adds	r1, r3, #1
   1aa24:	b2c9      	uxtb	r1, r1
		last = 0U;
   1aa26:	458e      	cmp	lr, r1
   1aa28:	bf08      	it	eq
   1aa2a:	2100      	moveq	r1, #0
	if (last == first) {
   1aa2c:	458c      	cmp	ip, r1
   1aa2e:	d003      	beq.n	1aa38 <tx_lll_flush+0x88>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1aa30:	fb13 f302 	smulbb	r3, r3, r2
		LL_ASSERT(lll_tx);
   1aa34:	18fa      	adds	r2, r7, r3
   1aa36:	d10f      	bne.n	1aa58 <tx_lll_flush+0xa8>
   1aa38:	4a10      	ldr	r2, [pc, #64]	; (1aa7c <tx_lll_flush+0xcc>)
   1aa3a:	4913      	ldr	r1, [pc, #76]	; (1aa88 <tx_lll_flush+0xd8>)
   1aa3c:	4811      	ldr	r0, [pc, #68]	; (1aa84 <tx_lll_flush+0xd4>)
   1aa3e:	f240 63fe 	movw	r3, #1790	; 0x6fe
   1aa42:	f008 fc42 	bl	232ca <printk>
   1aa46:	4040      	eors	r0, r0
   1aa48:	f380 8811 	msr	BASEPRI, r0
   1aa4c:	f04f 0003 	mov.w	r0, #3
   1aa50:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   1aa52:	2300      	movs	r3, #0
   1aa54:	801b      	strh	r3, [r3, #0]
   1aa56:	deff      	udf	#255	; 0xff
   1aa58:	f64f 7cff 	movw	ip, #65535	; 0xffff
   1aa5c:	f827 c003 	strh.w	ip, [r7, r3]
		lll_tx->node = tx;
   1aa60:	9b01      	ldr	r3, [sp, #4]
   1aa62:	6053      	str	r3, [r2, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1aa64:	681a      	ldr	r2, [r3, #0]
   1aa66:	6002      	str	r2, [r0, #0]
		tx->next = link;
   1aa68:	6018      	str	r0, [r3, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1aa6a:	aa01      	add	r2, sp, #4
	*last = idx; /* Commit: Update write index */
   1aa6c:	70f1      	strb	r1, [r6, #3]
   1aa6e:	6c68      	ldr	r0, [r5, #68]	; 0x44
   1aa70:	4641      	mov	r1, r8
   1aa72:	f00c fc15 	bl	272a0 <memq_dequeue>
   1aa76:	e7ae      	b.n	1a9d6 <tx_lll_flush+0x26>
   1aa78:	20007194 	.word	0x20007194
   1aa7c:	0002f06c 	.word	0x0002f06c
   1aa80:	0002f1ba 	.word	0x0002f1ba
   1aa84:	000297e6 	.word	0x000297e6
   1aa88:	0002f11b 	.word	0x0002f11b

0001aa8c <ll_conn_get>:
{
   1aa8c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1aa8e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1aa92:	4801      	ldr	r0, [pc, #4]	; (1aa98 <ll_conn_get+0xc>)
   1aa94:	f00c bbc5 	b.w	27222 <mem_get>
   1aa98:	20001600 	.word	0x20001600

0001aa9c <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   1aa9c:	4801      	ldr	r0, [pc, #4]	; (1aaa4 <ll_tx_mem_acquire+0x8>)
   1aa9e:	f00c bb92 	b.w	271c6 <mem_acquire>
   1aaa2:	bf00      	nop
   1aaa4:	20001738 	.word	0x20001738

0001aaa8 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   1aaa8:	4901      	ldr	r1, [pc, #4]	; (1aab0 <ll_tx_mem_release+0x8>)
   1aaaa:	f00c bba5 	b.w	271f8 <mem_release>
   1aaae:	bf00      	nop
   1aab0:	20001738 	.word	0x20001738

0001aab4 <ll_tx_mem_enqueue>:
{
   1aab4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aab6:	b089      	sub	sp, #36	; 0x24
   1aab8:	4605      	mov	r5, r0
   1aaba:	460e      	mov	r6, r1
	conn = ll_connected_get(handle);
   1aabc:	f00c fe25 	bl	2770a <ll_connected_get>
	if (!conn) {
   1aac0:	2800      	cmp	r0, #0
   1aac2:	d048      	beq.n	1ab56 <ll_tx_mem_enqueue+0xa2>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   1aac4:	4a27      	ldr	r2, [pc, #156]	; (1ab64 <ll_tx_mem_enqueue+0xb0>)
   1aac6:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   1aac8:	f892 c001 	ldrb.w	ip, [r2, #1]
   1aacc:	7891      	ldrb	r1, [r2, #2]
   1aace:	7817      	ldrb	r7, [r2, #0]
	last = last + 1;
   1aad0:	1c63      	adds	r3, r4, #1
   1aad2:	b2db      	uxtb	r3, r3
		last = 0U;
   1aad4:	459c      	cmp	ip, r3
   1aad6:	bf08      	it	eq
   1aad8:	2300      	moveq	r3, #0
	if (last == first) {
   1aada:	4299      	cmp	r1, r3
   1aadc:	d03e      	beq.n	1ab5c <ll_tx_mem_enqueue+0xa8>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1aade:	1d11      	adds	r1, r2, #4
   1aae0:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   1aae4:	190f      	adds	r7, r1, r4
   1aae6:	d039      	beq.n	1ab5c <ll_tx_mem_enqueue+0xa8>
	lll_tx->handle = handle;
   1aae8:	530d      	strh	r5, [r1, r4]
	*last = idx; /* Commit: Update write index */
   1aaea:	70d3      	strb	r3, [r2, #3]
	if (conn->lll.role && conn->lll.latency_event &&
   1aaec:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	lll_tx->node = tx;
   1aaf0:	607e      	str	r6, [r7, #4]
	if (conn->lll.role && conn->lll.latency_event &&
   1aaf2:	2b00      	cmp	r3, #0
   1aaf4:	db02      	blt.n	1aafc <ll_tx_mem_enqueue+0x48>
	return 0;
   1aaf6:	2000      	movs	r0, #0
}
   1aaf8:	b009      	add	sp, #36	; 0x24
   1aafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->lll.role && conn->lll.latency_event &&
   1aafc:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   1aafe:	2b00      	cmp	r3, #0
   1ab00:	d0f9      	beq.n	1aaf6 <ll_tx_mem_enqueue+0x42>
	    !conn->slave.latency_cancel) {
   1ab02:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
	if (conn->lll.role && conn->lll.latency_event &&
   1ab06:	f013 0402 	ands.w	r4, r3, #2
   1ab0a:	d1f4      	bne.n	1aaf6 <ll_tx_mem_enqueue+0x42>
		conn->slave.latency_cancel = 1U;
   1ab0c:	f043 0302 	orr.w	r3, r3, #2
   1ab10:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1ab14:	4b14      	ldr	r3, [pc, #80]	; (1ab68 <ll_tx_mem_enqueue+0xb4>)
   1ab16:	9006      	str	r0, [sp, #24]
   1ab18:	e9cd 4304 	strd	r4, r3, [sp, #16]
				      (TICKER_ID_CONN_BASE + handle),
   1ab1c:	1d6a      	adds	r2, r5, #5
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1ab1e:	2301      	movs	r3, #1
   1ab20:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1ab24:	e9cd 4400 	strd	r4, r4, [sp]
   1ab28:	4623      	mov	r3, r4
   1ab2a:	b2d2      	uxtb	r2, r2
   1ab2c:	2103      	movs	r1, #3
   1ab2e:	4620      	mov	r0, r4
   1ab30:	f7fd fac4 	bl	180bc <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1ab34:	f030 0302 	bics.w	r3, r0, #2
   1ab38:	d0dd      	beq.n	1aaf6 <ll_tx_mem_enqueue+0x42>
   1ab3a:	4a0c      	ldr	r2, [pc, #48]	; (1ab6c <ll_tx_mem_enqueue+0xb8>)
   1ab3c:	490c      	ldr	r1, [pc, #48]	; (1ab70 <ll_tx_mem_enqueue+0xbc>)
   1ab3e:	480d      	ldr	r0, [pc, #52]	; (1ab74 <ll_tx_mem_enqueue+0xc0>)
   1ab40:	f44f 7380 	mov.w	r3, #256	; 0x100
   1ab44:	f008 fbc1 	bl	232ca <printk>
   1ab48:	4040      	eors	r0, r0
   1ab4a:	f380 8811 	msr	BASEPRI, r0
   1ab4e:	f04f 0003 	mov.w	r0, #3
   1ab52:	df02      	svc	2
   1ab54:	e7cf      	b.n	1aaf6 <ll_tx_mem_enqueue+0x42>
		return -EINVAL;
   1ab56:	f06f 0015 	mvn.w	r0, #21
   1ab5a:	e7cd      	b.n	1aaf8 <ll_tx_mem_enqueue+0x44>
		return -ENOBUFS;
   1ab5c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1ab60:	e7ca      	b.n	1aaf8 <ll_tx_mem_enqueue+0x44>
   1ab62:	bf00      	nop
   1ab64:	200071d8 	.word	0x200071d8
   1ab68:	0001a769 	.word	0x0001a769
   1ab6c:	0002f06c 	.word	0x0002f06c
   1ab70:	0002f122 	.word	0x0002f122
   1ab74:	000297e6 	.word	0x000297e6

0001ab78 <ull_conn_init>:
{
   1ab78:	b508      	push	{r3, lr}
   1ab7a:	4805      	ldr	r0, [pc, #20]	; (1ab90 <ull_conn_init+0x18>)
   1ab7c:	f004 fde2 	bl	1f744 <z_impl_device_get_binding>
	if (!entropy) {
   1ab80:	b118      	cbz	r0, 1ab8a <ull_conn_init+0x12>
}
   1ab82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = init_reset();
   1ab86:	f7ff be0d 	b.w	1a7a4 <init_reset>
}
   1ab8a:	f06f 0012 	mvn.w	r0, #18
   1ab8e:	bd08      	pop	{r3, pc}
   1ab90:	0002ea8c 	.word	0x0002ea8c

0001ab94 <ull_conn_reset>:
{
   1ab94:	b530      	push	{r4, r5, lr}
   1ab96:	b085      	sub	sp, #20
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   1ab98:	2302      	movs	r3, #2
	conn = ll_conn_get(handle);
   1ab9a:	2000      	movs	r0, #0
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   1ab9c:	9303      	str	r3, [sp, #12]
	conn = ll_conn_get(handle);
   1ab9e:	f7ff ff75 	bl	1aa8c <ll_conn_get>
   1aba2:	4604      	mov	r4, r0
	mark = ull_disable_mark(conn);
   1aba4:	f7fe ff2c 	bl	19a00 <ull_disable_mark>
	LL_ASSERT(mark == conn);
   1aba8:	4284      	cmp	r4, r0
   1abaa:	d00c      	beq.n	1abc6 <ull_conn_reset+0x32>
   1abac:	4a2a      	ldr	r2, [pc, #168]	; (1ac58 <ull_conn_reset+0xc4>)
   1abae:	492b      	ldr	r1, [pc, #172]	; (1ac5c <ull_conn_reset+0xc8>)
   1abb0:	482b      	ldr	r0, [pc, #172]	; (1ac60 <ull_conn_reset+0xcc>)
   1abb2:	f44f 63d3 	mov.w	r3, #1688	; 0x698
   1abb6:	f008 fb88 	bl	232ca <printk>
   1abba:	4040      	eors	r0, r0
   1abbc:	f380 8811 	msr	BASEPRI, r0
   1abc0:	f04f 0003 	mov.w	r0, #3
   1abc4:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1abc6:	ad03      	add	r5, sp, #12
   1abc8:	2103      	movs	r1, #3
   1abca:	4b26      	ldr	r3, [pc, #152]	; (1ac64 <ull_conn_reset+0xd0>)
   1abcc:	9500      	str	r5, [sp, #0]
   1abce:	2205      	movs	r2, #5
   1abd0:	2000      	movs	r0, #0
   1abd2:	f7fd fab9 	bl	18148 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1abd6:	4629      	mov	r1, r5
   1abd8:	f7fe ff06 	bl	199e8 <ull_ticker_status_take>
	if (!ret) {
   1abdc:	b988      	cbnz	r0, 1ac02 <ull_conn_reset+0x6e>
		ret = ull_disable(&conn->lll);
   1abde:	f104 001c 	add.w	r0, r4, #28
   1abe2:	f7fe ff45 	bl	19a70 <ull_disable>
		LL_ASSERT(!ret);
   1abe6:	b160      	cbz	r0, 1ac02 <ull_conn_reset+0x6e>
   1abe8:	4a1b      	ldr	r2, [pc, #108]	; (1ac58 <ull_conn_reset+0xc4>)
   1abea:	491f      	ldr	r1, [pc, #124]	; (1ac68 <ull_conn_reset+0xd4>)
   1abec:	481c      	ldr	r0, [pc, #112]	; (1ac60 <ull_conn_reset+0xcc>)
   1abee:	f240 63a1 	movw	r3, #1697	; 0x6a1
   1abf2:	f008 fb6a 	bl	232ca <printk>
   1abf6:	4040      	eors	r0, r0
   1abf8:	f380 8811 	msr	BASEPRI, r0
   1abfc:	f04f 0003 	mov.w	r0, #3
   1ac00:	df02      	svc	2
	conn->lll.link_tx_free = NULL;
   1ac02:	2300      	movs	r3, #0
   1ac04:	66e3      	str	r3, [r4, #108]	; 0x6c
	mark = ull_disable_unmark(conn);
   1ac06:	4620      	mov	r0, r4
   1ac08:	f7fe ff02 	bl	19a10 <ull_disable_unmark>
	LL_ASSERT(mark == conn);
   1ac0c:	4284      	cmp	r4, r0
   1ac0e:	d00c      	beq.n	1ac2a <ull_conn_reset+0x96>
   1ac10:	4a11      	ldr	r2, [pc, #68]	; (1ac58 <ull_conn_reset+0xc4>)
   1ac12:	4912      	ldr	r1, [pc, #72]	; (1ac5c <ull_conn_reset+0xc8>)
   1ac14:	4812      	ldr	r0, [pc, #72]	; (1ac60 <ull_conn_reset+0xcc>)
   1ac16:	f240 63a7 	movw	r3, #1703	; 0x6a7
   1ac1a:	f008 fb56 	bl	232ca <printk>
   1ac1e:	4040      	eors	r0, r0
   1ac20:	f380 8811 	msr	BASEPRI, r0
   1ac24:	f04f 0003 	mov.w	r0, #3
   1ac28:	df02      	svc	2
	data_chan_map[0] = 0xFF;
   1ac2a:	4b10      	ldr	r3, [pc, #64]	; (1ac6c <ull_conn_reset+0xd8>)
   1ac2c:	22ff      	movs	r2, #255	; 0xff
   1ac2e:	701a      	strb	r2, [r3, #0]
	data_chan_map[1] = 0xFF;
   1ac30:	705a      	strb	r2, [r3, #1]
	data_chan_map[2] = 0xFF;
   1ac32:	709a      	strb	r2, [r3, #2]
	data_chan_map[3] = 0xFF;
   1ac34:	70da      	strb	r2, [r3, #3]
	data_chan_map[4] = 0x1F;
   1ac36:	221f      	movs	r2, #31
   1ac38:	711a      	strb	r2, [r3, #4]
	data_chan_count = 37U;
   1ac3a:	4b0d      	ldr	r3, [pc, #52]	; (1ac70 <ull_conn_reset+0xdc>)
   1ac3c:	2225      	movs	r2, #37	; 0x25
   1ac3e:	701a      	strb	r2, [r3, #0]
	MFIFO_INIT(conn_tx);
   1ac40:	4a0c      	ldr	r2, [pc, #48]	; (1ac74 <ull_conn_reset+0xe0>)
   1ac42:	2300      	movs	r3, #0
   1ac44:	8053      	strh	r3, [r2, #2]
	MFIFO_INIT(conn_ack);
   1ac46:	4a0c      	ldr	r2, [pc, #48]	; (1ac78 <ull_conn_reset+0xe4>)
   1ac48:	8053      	strh	r3, [r2, #2]
	conn_upd_curr = NULL;
   1ac4a:	4a0c      	ldr	r2, [pc, #48]	; (1ac7c <ull_conn_reset+0xe8>)
   1ac4c:	6013      	str	r3, [r2, #0]
	err = init_reset();
   1ac4e:	f7ff fda9 	bl	1a7a4 <init_reset>
}
   1ac52:	b005      	add	sp, #20
   1ac54:	bd30      	pop	{r4, r5, pc}
   1ac56:	bf00      	nop
   1ac58:	0002f06c 	.word	0x0002f06c
   1ac5c:	0002f14f 	.word	0x0002f14f
   1ac60:	000297e6 	.word	0x000297e6
   1ac64:	000199dd 	.word	0x000199dd
   1ac68:	0002eeba 	.word	0x0002eeba
   1ac6c:	2000735d 	.word	0x2000735d
   1ac70:	2000735c 	.word	0x2000735c
   1ac74:	200071d8 	.word	0x200071d8
   1ac78:	20007194 	.word	0x20007194
   1ac7c:	2000172c 	.word	0x2000172c

0001ac80 <ull_conn_setup>:
	lll = *((struct lll_conn **)((u8_t *)ftr->param +
   1ac80:	688b      	ldr	r3, [r1, #8]
   1ac82:	689b      	ldr	r3, [r3, #8]
{
   1ac84:	b510      	push	{r4, lr}
	switch (lll->role) {
   1ac86:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   1ac8a:	09e4      	lsrs	r4, r4, #7
{
   1ac8c:	460a      	mov	r2, r1
	switch (lll->role) {
   1ac8e:	d004      	beq.n	1ac9a <ull_conn_setup+0x1a>
}
   1ac90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   1ac94:	3208      	adds	r2, #8
   1ac96:	f7e6 bb5f 	b.w	1358 <ull_slave_setup>
		LL_ASSERT(0);
   1ac9a:	4a07      	ldr	r2, [pc, #28]	; (1acb8 <ull_conn_setup+0x38>)
   1ac9c:	4907      	ldr	r1, [pc, #28]	; (1acbc <ull_conn_setup+0x3c>)
   1ac9e:	4808      	ldr	r0, [pc, #32]	; (1acc0 <ull_conn_setup+0x40>)
   1aca0:	f240 23cf 	movw	r3, #719	; 0x2cf
   1aca4:	f008 fb11 	bl	232ca <printk>
   1aca8:	4040      	eors	r0, r0
   1acaa:	f380 8811 	msr	BASEPRI, r0
   1acae:	f04f 0003 	mov.w	r0, #3
   1acb2:	df02      	svc	2
}
   1acb4:	bd10      	pop	{r4, pc}
   1acb6:	bf00      	nop
   1acb8:	0002f06c 	.word	0x0002f06c
   1acbc:	0002d2c6 	.word	0x0002d2c6
   1acc0:	000297e6 	.word	0x000297e6

0001acc4 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   1acc4:	680b      	ldr	r3, [r1, #0]
{
   1acc6:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acca:	4607      	mov	r7, r0
	conn = ll_connected_get((*rx)->hdr.handle);
   1accc:	88d8      	ldrh	r0, [r3, #6]
{
   1acce:	460e      	mov	r6, r1
	conn = ll_connected_get((*rx)->hdr.handle);
   1acd0:	f00c fd1b 	bl	2770a <ll_connected_get>
	if (!conn) {
   1acd4:	6835      	ldr	r5, [r6, #0]
   1acd6:	4604      	mov	r4, r0
   1acd8:	b910      	cbnz	r0, 1ace0 <ull_conn_rx+0x1c>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1acda:	2303      	movs	r3, #3
   1acdc:	712b      	strb	r3, [r5, #4]
	return 0;
   1acde:	e008      	b.n	1acf2 <ull_conn_rx+0x2e>
	switch (pdu_rx->ll_id) {
   1ace0:	f895 0020 	ldrb.w	r0, [r5, #32]
   1ace4:	f000 0003 	and.w	r0, r0, #3
   1ace8:	2803      	cmp	r0, #3
   1acea:	d004      	beq.n	1acf6 <ull_conn_rx+0x32>
   1acec:	2800      	cmp	r0, #0
   1acee:	f000 84b3 	beq.w	1b658 <ull_conn_rx+0x994>
   1acf2:	2000      	movs	r0, #0
   1acf4:	e0e6      	b.n	1aec4 <ull_conn_rx+0x200>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	u8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   1acf6:	f895 8023 	ldrb.w	r8, [r5, #35]	; 0x23

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   1acfa:	f1b8 0f11 	cmp.w	r8, #17
   1acfe:	f200 8495 	bhi.w	1b62c <ull_conn_rx+0x968>
   1ad02:	e8df f018 	tbh	[pc, r8, lsl #1]
   1ad06:	0012      	.short	0x0012
   1ad08:	00be008a 	.word	0x00be008a
   1ad0c:	04930493 	.word	0x04930493
   1ad10:	04930493 	.word	0x04930493
   1ad14:	00cb0407 	.word	0x00cb0407
   1ad18:	0493011a 	.word	0x0493011a
   1ad1c:	014b0493 	.word	0x014b0493
   1ad20:	04930493 	.word	0x04930493
   1ad24:	030e01a2 	.word	0x030e01a2
   1ad28:	03a0      	.short	0x03a0
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND:
	{
		u8_t err;

		if (!conn->lll.role ||
   1ad2a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1ad2e:	2b00      	cmp	r3, #0
   1ad30:	f280 847c 	bge.w	1b62c <ull_conn_rx+0x968>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
   1ad34:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1ad38:	2000      	movs	r0, #0
   1ad3a:	f7ff fcf7 	bl	1a72c <pdu_len_cmp>
		if (!conn->lll.role ||
   1ad3e:	2800      	cmp	r0, #0
   1ad40:	f000 8474 	beq.w	1b62c <ull_conn_rx+0x968>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   1ad44:	f8b5 202d 	ldrh.w	r2, [r5, #45]	; 0x2d
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   1ad48:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   1ad4a:	1ad3      	subs	r3, r2, r3
   1ad4c:	041b      	lsls	r3, r3, #16
   1ad4e:	d503      	bpl.n	1ad58 <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1ad50:	2303      	movs	r3, #3
   1ad52:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   1ad54:	2328      	movs	r3, #40	; 0x28
   1ad56:	e00b      	b.n	1ad70 <ull_conn_rx+0xac>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1ad58:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1ad5c:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
   1ad60:	1a5b      	subs	r3, r3, r1
   1ad62:	f003 0303 	and.w	r3, r3, #3
   1ad66:	2b02      	cmp	r3, #2
   1ad68:	d105      	bne.n	1ad76 <ull_conn_rx+0xb2>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1ad6a:	2303      	movs	r3, #3
   1ad6c:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   1ad6e:	232a      	movs	r3, #42	; 0x2a
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = chan_map_upd_recv(conn, *rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_peer = err;
   1ad70:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
   1ad74:	e7bd      	b.n	1acf2 <ull_conn_rx+0x2e>
	if (!conn_upd_curr) {
   1ad76:	4bd0      	ldr	r3, [pc, #832]	; (1b0b8 <ull_conn_rx+0x3f4>)
   1ad78:	6819      	ldr	r1, [r3, #0]
   1ad7a:	b901      	cbnz	r1, 1ad7e <ull_conn_rx+0xba>
		conn_upd_curr = conn;
   1ad7c:	601c      	str	r4, [r3, #0]
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   1ad7e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1ad82:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   1ad86:	f8b5 1025 	ldrh.w	r1, [r5, #37]	; 0x25
   1ad8a:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1ad8e:	434b      	muls	r3, r1
	conn->llcp_cu.win_offset_us =
   1ad90:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   1ad94:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
   1ad98:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   1ad9c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   1ada0:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   1ada4:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   1ada8:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   1adac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   1adb0:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1adb4:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   1adb8:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
	conn->llcp.conn_upd.instant = instant;
   1adbc:	f8a4 2090 	strh.w	r2, [r4, #144]	; 0x90
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1adc0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.timeout =
   1adc4:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1adc8:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
   1adcc:	f023 0307 	bic.w	r3, r3, #7
   1add0:	f043 0304 	orr.w	r3, r3, #4
   1add4:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
	conn->llcp_cu.ack--;
   1add8:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1addc:	3b01      	subs	r3, #1
   1adde:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
	link->mem = conn->llcp_rx;
   1ade2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   1ade6:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   1ade8:	6833      	ldr	r3, [r6, #0]
   1adea:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   1adec:	6833      	ldr	r3, [r6, #0]
   1adee:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	*rx = NULL;
   1adf2:	2300      	movs	r3, #0
   1adf4:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1adf6:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   1adfa:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   1adfe:	4293      	cmp	r3, r2
   1ae00:	d007      	beq.n	1ae12 <ull_conn_rx+0x14e>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   1ae02:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1ae06:	f003 0307 	and.w	r3, r3, #7
   1ae0a:	2b04      	cmp	r3, #4
   1ae0c:	d101      	bne.n	1ae12 <ull_conn_rx+0x14e>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1ae0e:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   1ae12:	2000      	movs	r0, #0
   1ae14:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
		break;
   1ae18:	e054      	b.n	1aec4 <ull_conn_rx+0x200>
		if (!conn->lll.role ||
   1ae1a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1ae1e:	2b00      	cmp	r3, #0
   1ae20:	f280 8404 	bge.w	1b62c <ull_conn_rx+0x968>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
   1ae24:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1ae28:	2001      	movs	r0, #1
   1ae2a:	f7ff fc7f 	bl	1a72c <pdu_len_cmp>
		if (!conn->lll.role ||
   1ae2e:	2800      	cmp	r0, #0
   1ae30:	f000 83fc 	beq.w	1b62c <ull_conn_rx+0x968>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   1ae34:	f8b5 6029 	ldrh.w	r6, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   1ae38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   1ae3a:	1af3      	subs	r3, r6, r3
   1ae3c:	041f      	lsls	r7, r3, #16
   1ae3e:	d487      	bmi.n	1ad50 <ull_conn_rx+0x8c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1ae40:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1ae44:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
   1ae48:	1a9b      	subs	r3, r3, r2
   1ae4a:	f003 0303 	and.w	r3, r3, #3
   1ae4e:	2b02      	cmp	r3, #2
   1ae50:	d08b      	beq.n	1ad6a <ull_conn_rx+0xa6>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   1ae52:	2205      	movs	r2, #5
   1ae54:	f105 0124 	add.w	r1, r5, #36	; 0x24
   1ae58:	f104 0091 	add.w	r0, r4, #145	; 0x91
   1ae5c:	f00a f918 	bl	25090 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   1ae60:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
	conn->llcp.chan_map.instant = instant;
   1ae64:	f8a4 6096 	strh.w	r6, [r4, #150]	; 0x96
	conn->llcp.chan_map.initiate = 0U;
   1ae68:	f36f 0300 	bfc	r3, #0, #1
   1ae6c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
	conn->llcp_type = LLCP_CHAN_MAP;
   1ae70:	2302      	movs	r3, #2
   1ae72:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	conn->llcp_ack -= 2U;
   1ae76:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
   1ae7a:	3b02      	subs	r3, #2
   1ae7c:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1ae80:	e72b      	b.n	1acda <ull_conn_rx+0x16>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   1ae82:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1ae86:	2002      	movs	r0, #2
   1ae88:	f7ff fc50 	bl	1a72c <pdu_len_cmp>
   1ae8c:	2800      	cmp	r0, #0
   1ae8e:	f000 83cd 	beq.w	1b62c <ull_conn_rx+0x968>
		terminate_ind_recv(conn, *rx, pdu_rx);
   1ae92:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   1ae96:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1ae9a:	e71e      	b.n	1acda <ull_conn_rx+0x16>
		if (!conn->lll.role ||
   1ae9c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1aea0:	2b00      	cmp	r3, #0
   1aea2:	f280 83c3 	bge.w	1b62c <ull_conn_rx+0x968>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
   1aea6:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1aeaa:	2008      	movs	r0, #8
   1aeac:	f7ff fc3e 	bl	1a72c <pdu_len_cmp>
		if (!conn->lll.role ||
   1aeb0:	2800      	cmp	r0, #0
   1aeb2:	f000 83bb 	beq.w	1b62c <ull_conn_rx+0x968>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1aeb6:	4881      	ldr	r0, [pc, #516]	; (1b0bc <ull_conn_rx+0x3f8>)
   1aeb8:	f00c f985 	bl	271c6 <mem_acquire>
	if (!tx) {
   1aebc:	4606      	mov	r6, r0
   1aebe:	b920      	cbnz	r0, 1aeca <ull_conn_rx+0x206>
		return -ENOBUFS;
   1aec0:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1aec4:	b001      	add	sp, #4
   1aec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	       (features[1] << 8) | (features[2] << 16);
   1aeca:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   1aece:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   1aed2:	041b      	lsls	r3, r3, #16
   1aed4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1aed8:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	       (features[1] << 8) | (features[2] << 16);
   1aedc:	4313      	orrs	r3, r2
   1aede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   1aee2:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
	conn->llcp_feature.features &= feat_get(&req->features[0]);
   1aee6:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
	       (features[1] << 8) | (features[2] << 16);
   1aeea:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   1aeee:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features &= feat_get(&req->features[0]);
   1aef2:	4013      	ands	r3, r2
   1aef4:	f3c3 0310 	ubfx	r3, r3, #0, #17
   1aef8:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	conn->common.fex_valid = 1U;
   1aefc:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   1af00:	f043 0301 	orr.w	r3, r3, #1
   1af04:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1af08:	7903      	ldrb	r3, [r0, #4]
   1af0a:	f043 0303 	orr.w	r3, r3, #3
   1af0e:	7103      	strb	r3, [r0, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1af10:	2208      	movs	r2, #8
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1af12:	2309      	movs	r3, #9
   1af14:	7143      	strb	r3, [r0, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1af16:	71c3      	strb	r3, [r0, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1af18:	2100      	movs	r1, #0
   1af1a:	4410      	add	r0, r2
   1af1c:	f00a f8e3 	bl	250e6 <memset>
	sys_put_le24(conn->llcp_feature.features,
   1af20:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	dst[0] = val;
   1af24:	7233      	strb	r3, [r6, #8]
	dst[1] = val >> 8;
   1af26:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   1af2a:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   1af2c:	7272      	strb	r2, [r6, #9]
	dst[2] = val >> 16;
   1af2e:	72b3      	strb	r3, [r6, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   1af30:	4631      	mov	r1, r6
   1af32:	4620      	mov	r0, r4
   1af34:	f00c fbc4 	bl	276c0 <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1af38:	e6cf      	b.n	1acda <ull_conn_rx+0x16>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   1af3a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1af3e:	2b00      	cmp	r3, #0
   1af40:	f2c0 8374 	blt.w	1b62c <ull_conn_rx+0x968>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
   1af44:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1af48:	2009      	movs	r0, #9
   1af4a:	f7ff fbef 	bl	1a72c <pdu_len_cmp>
		     conn->lll.role) ||
   1af4e:	2800      	cmp	r0, #0
   1af50:	f000 836c 	beq.w	1b62c <ull_conn_rx+0x968>
	       (features[1] << 8) | (features[2] << 16);
   1af54:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   1af58:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   1af5c:	041b      	lsls	r3, r3, #16
   1af5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1af62:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	       (features[1] << 8) | (features[2] << 16);
   1af66:	4313      	orrs	r3, r2
   1af68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   1af6c:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
	conn->llcp_feature.features &= feat_get(&rsp->features[0]);
   1af70:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
	       (features[1] << 8) | (features[2] << 16);
   1af74:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   1af78:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features &= feat_get(&rsp->features[0]);
   1af7c:	4013      	ands	r3, r2
   1af7e:	f3c3 0310 	ubfx	r3, r3, #0, #17
   1af82:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	conn->common.fex_valid = 1U;
   1af86:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   1af8a:	f043 0301 	orr.w	r3, r3, #1
   1af8e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
	conn->llcp_feature.ack = conn->llcp_feature.req;
   1af92:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   1af96:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
	conn->procedure_expire = 0U;
   1af9a:	e73a      	b.n	1ae12 <ull_conn_rx+0x14e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   1af9c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1afa0:	200c      	movs	r0, #12
   1afa2:	f7ff fbc3 	bl	1a72c <pdu_len_cmp>
   1afa6:	2800      	cmp	r0, #0
   1afa8:	f000 8340 	beq.w	1b62c <ull_conn_rx+0x968>
	if (!conn->llcp_version.tx) {
   1afac:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
   1afb0:	07d8      	lsls	r0, r3, #31
   1afb2:	d43f      	bmi.n	1b034 <ull_conn_rx+0x370>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1afb4:	4841      	ldr	r0, [pc, #260]	; (1b0bc <ull_conn_rx+0x3f8>)
   1afb6:	f00c f906 	bl	271c6 <mem_acquire>
		if (!tx) {
   1afba:	4601      	mov	r1, r0
   1afbc:	2800      	cmp	r0, #0
   1afbe:	f43f af7f 	beq.w	1aec0 <ull_conn_rx+0x1fc>
		conn->llcp_version.tx = 1U;
   1afc2:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
   1afc6:	f043 0301 	orr.w	r3, r3, #1
   1afca:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1afce:	7903      	ldrb	r3, [r0, #4]
   1afd0:	f043 0303 	orr.w	r3, r3, #3
   1afd4:	7103      	strb	r3, [r0, #4]
		pdu_tx->len =
   1afd6:	2306      	movs	r3, #6
   1afd8:	7143      	strb	r3, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1afda:	230c      	movs	r3, #12
   1afdc:	71c3      	strb	r3, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   1afde:	230a      	movs	r3, #10
   1afe0:	7203      	strb	r3, [r0, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1afe2:	f06f 030e 	mvn.w	r3, #14
   1afe6:	7243      	strb	r3, [r0, #9]
   1afe8:	2305      	movs	r3, #5
   1afea:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =
   1afec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aff0:	72c3      	strb	r3, [r0, #11]
   1aff2:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, tx);
   1aff4:	4620      	mov	r0, r4
   1aff6:	f00c fb63 	bl	276c0 <ctrl_tx_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1affa:	2303      	movs	r3, #3
   1affc:	712b      	strb	r3, [r5, #4]
	conn->llcp_version.version_number = v->version_number;
   1affe:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1b002:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1b006:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
   1b00a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   1b00e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b012:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
		sys_le16_to_cpu(v->sub_version_number);
   1b016:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   1b01a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   1b01e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_version.sub_version_number =
   1b022:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
	conn->llcp_version.rx = 1U;
   1b026:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
   1b02a:	f043 0302 	orr.w	r3, r3, #2
   1b02e:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
	return 0;
   1b032:	e65e      	b.n	1acf2 <ull_conn_rx+0x2e>
	} else if (!conn->llcp_version.rx) {
   1b034:	f013 0302 	ands.w	r3, r3, #2
   1b038:	f47f ae4f 	bne.w	1acda <ull_conn_rx+0x16>
		conn->llcp_version.ack = conn->llcp_version.req;
   1b03c:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
   1b040:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
		conn->procedure_expire = 0U;
   1b044:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
   1b048:	e7d9      	b.n	1affe <ull_conn_rx+0x33a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   1b04a:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1b04e:	200f      	movs	r0, #15
   1b050:	f7ff fb6c 	bl	1a72c <pdu_len_cmp>
   1b054:	2800      	cmp	r0, #0
   1b056:	f000 82e9 	beq.w	1b62c <ull_conn_rx+0x968>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   1b05a:	4b17      	ldr	r3, [pc, #92]	; (1b0b8 <ull_conn_rx+0x3f4>)
   1b05c:	6818      	ldr	r0, [r3, #0]
   1b05e:	b150      	cbz	r0, 1b076 <ull_conn_rx+0x3b2>
   1b060:	4284      	cmp	r4, r0
   1b062:	d008      	beq.n	1b076 <ull_conn_rx+0x3b2>
			nack = reject_ext_ind_send(conn, *rx,
   1b064:	2320      	movs	r3, #32
				nack = reject_ext_ind_send(conn, *rx,
   1b066:	220f      	movs	r2, #15
				nack = reject_ext_ind_send(conn, *rx,
   1b068:	1d29      	adds	r1, r5, #4
   1b06a:	4620      	mov	r0, r4
}
   1b06c:	b001      	add	sp, #4
   1b06e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   1b072:	f7ff bc65 	b.w	1a940 <reject_ext_ind_send.isra.0>
		if (!conn->lll.role) {
   1b076:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
   1b07a:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   1b07e:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1b082:	2900      	cmp	r1, #0
   1b084:	f2c0 80b0 	blt.w	1b1e8 <ull_conn_rx+0x524>
			if ((conn->llcp_conn_param.req !=
   1b088:	429a      	cmp	r2, r3
   1b08a:	d009      	beq.n	1b0a0 <ull_conn_rx+0x3dc>
			    ((conn->llcp_conn_param.state ==
   1b08c:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
					conn->llcp_conn_param.ack) &&
   1b090:	f013 0307 	ands.w	r3, r3, #7
   1b094:	d002      	beq.n	1b09c <ull_conn_rx+0x3d8>
			      LLCP_CPR_STATE_REQ) ||
   1b096:	3b04      	subs	r3, #4
   1b098:	2b01      	cmp	r3, #1
   1b09a:	d801      	bhi.n	1b0a0 <ull_conn_rx+0x3dc>
				nack = reject_ext_ind_send(conn, *rx,
   1b09c:	2323      	movs	r3, #35	; 0x23
   1b09e:	e7e2      	b.n	1b066 <ull_conn_rx+0x3a2>
			} else if (((conn->llcp_req - conn->llcp_ack) &
   1b0a0:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1b0a4:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
   1b0a8:	1a5b      	subs	r3, r3, r1
   1b0aa:	f003 0303 	and.w	r3, r3, #3
   1b0ae:	2b02      	cmp	r3, #2
   1b0b0:	d106      	bne.n	1b0c0 <ull_conn_rx+0x3fc>
				nack = reject_ext_ind_send(conn, *rx,
   1b0b2:	232a      	movs	r3, #42	; 0x2a
   1b0b4:	e7d7      	b.n	1b066 <ull_conn_rx+0x3a2>
   1b0b6:	bf00      	nop
   1b0b8:	2000172c 	.word	0x2000172c
   1b0bc:	200017a8 	.word	0x200017a8
				u16_t interval_min =
   1b0c0:	f8b5 9024 	ldrh.w	r9, [r5, #36]	; 0x24
				if ((interval_min < 6) ||
   1b0c4:	f1b9 0f05 	cmp.w	r9, #5
				u16_t interval_min =
   1b0c8:	fa1f f389 	uxth.w	r3, r9
				if ((interval_min < 6) ||
   1b0cc:	d922      	bls.n	1b114 <ull_conn_rx+0x450>
				u16_t interval_max =
   1b0ce:	f8b5 8026 	ldrh.w	r8, [r5, #38]	; 0x26
				if ((interval_min < 6) ||
   1b0d2:	f5b8 6f48 	cmp.w	r8, #3200	; 0xc80
				u16_t interval_max =
   1b0d6:	fa1f f188 	uxth.w	r1, r8
				if ((interval_min < 6) ||
   1b0da:	d81b      	bhi.n	1b114 <ull_conn_rx+0x450>
				    (interval_max > 3200) ||
   1b0dc:	428b      	cmp	r3, r1
   1b0de:	d819      	bhi.n	1b114 <ull_conn_rx+0x450>
				u16_t latency =
   1b0e0:	f8b5 e028 	ldrh.w	lr, [r5, #40]	; 0x28
				    (interval_min > interval_max) ||
   1b0e4:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
				u16_t latency =
   1b0e8:	fa1f fc8e 	uxth.w	ip, lr
				    (interval_min > interval_max) ||
   1b0ec:	d212      	bcs.n	1b114 <ull_conn_rx+0x450>
				u16_t timeout =
   1b0ee:	8d6f      	ldrh	r7, [r5, #42]	; 0x2a
				    (latency > 499) ||
   1b0f0:	f1a7 0a0a 	sub.w	sl, r7, #10
   1b0f4:	fa1f fa8a 	uxth.w	sl, sl
   1b0f8:	f640 4b76 	movw	fp, #3190	; 0xc76
   1b0fc:	45da      	cmp	sl, fp
				u16_t timeout =
   1b0fe:	b2bb      	uxth	r3, r7
				    (latency > 499) ||
   1b100:	d808      	bhi.n	1b114 <ull_conn_rx+0x450>
				     ((latency + 1) * interval_max)) ||
   1b102:	fb0c 1a01 	mla	sl, ip, r1, r1
				    (timeout > 3200) ||
   1b106:	ebba 0f83 	cmp.w	sl, r3, lsl #2
   1b10a:	d203      	bcs.n	1b114 <ull_conn_rx+0x450>
					cpr->preferred_periodicity;
   1b10c:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
				     ((latency + 1) * interval_max)) ||
   1b110:	4551      	cmp	r1, sl
   1b112:	d201      	bcs.n	1b118 <ull_conn_rx+0x454>
				nack = reject_ext_ind_send(conn, *rx,
   1b114:	231e      	movs	r3, #30
   1b116:	e7a6      	b.n	1b066 <ull_conn_rx+0x3a2>
				conn->llcp_conn_param.interval_min =
   1b118:	f8a4 90f0 	strh.w	r9, [r4, #240]	; 0xf0
				conn->llcp_conn_param.interval_max =
   1b11c:	f8a4 80f2 	strh.w	r8, [r4, #242]	; 0xf2
				conn->llcp_conn_param.latency =	latency;
   1b120:	f8a4 e0f4 	strh.w	lr, [r4, #244]	; 0xf4
				conn->llcp_conn_param.timeout =	timeout;
   1b124:	f8a4 70f6 	strh.w	r7, [r4, #246]	; 0xf6
				conn->llcp_conn_param.preferred_periodicity =
   1b128:	f884 a0f8 	strb.w	sl, [r4, #248]	; 0xf8
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1b12c:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   1b130:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   1b134:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   1b138:	f8a4 70fa 	strh.w	r7, [r4, #250]	; 0xfa
					sys_le16_to_cpu(cpr->offset0);
   1b13c:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   1b140:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   1b144:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   1b148:	f8a4 70fc 	strh.w	r7, [r4, #252]	; 0xfc
					sys_le16_to_cpu(cpr->offset1);
   1b14c:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   1b150:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   1b154:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   1b158:	f8a4 70fe 	strh.w	r7, [r4, #254]	; 0xfe
					sys_le16_to_cpu(cpr->offset2);
   1b15c:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   1b160:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   1b164:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   1b168:	f8a4 7100 	strh.w	r7, [r4, #256]	; 0x100
					sys_le16_to_cpu(cpr->offset3);
   1b16c:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   1b170:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   1b174:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   1b178:	f8a4 7102 	strh.w	r7, [r4, #258]	; 0x102
					sys_le16_to_cpu(cpr->offset4);
   1b17c:	f895 7037 	ldrb.w	r7, [r5, #55]	; 0x37
   1b180:	f895 e038 	ldrb.w	lr, [r5, #56]	; 0x38
   1b184:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   1b188:	f8a4 7104 	strh.w	r7, [r4, #260]	; 0x104
					sys_le16_to_cpu(cpr->offset5);
   1b18c:	f895 7039 	ldrb.w	r7, [r5, #57]	; 0x39
   1b190:	f895 503a 	ldrb.w	r5, [r5, #58]	; 0x3a
   1b194:	ea47 2505 	orr.w	r5, r7, r5, lsl #8
				conn->llcp_conn_param.offset5 =
   1b198:	f8a4 5106 	strh.w	r5, [r4, #262]	; 0x106
				     lll->interval) ||
   1b19c:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
				if ((conn->llcp_conn_param.interval_max !=
   1b19e:	42a9      	cmp	r1, r5
   1b1a0:	d112      	bne.n	1b1c8 <ull_conn_rx+0x504>
				     lll->interval) ||
   1b1a2:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   1b1a4:	4561      	cmp	r1, ip
   1b1a6:	d10f      	bne.n	1b1c8 <ull_conn_rx+0x504>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1b1a8:	f240 41e2 	movw	r1, #1250	; 0x4e2
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1b1ac:	4369      	muls	r1, r5
   1b1ae:	f242 7510 	movw	r5, #10000	; 0x2710
   1b1b2:	fb05 1303 	mla	r3, r5, r3, r1
   1b1b6:	3b01      	subs	r3, #1
   1b1b8:	fbb3 f3f1 	udiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1b1bc:	f8b4 1076 	ldrh.w	r1, [r4, #118]	; 0x76
   1b1c0:	b29b      	uxth	r3, r3
   1b1c2:	4299      	cmp	r1, r3
   1b1c4:	f000 8093 	beq.w	1b2ee <ull_conn_rx+0x62a>
				conn->llcp_conn_param.state =
   1b1c8:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1b1cc:	2103      	movs	r1, #3
   1b1ce:	f361 0302 	bfi	r3, r1, #0, #3
   1b1d2:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
			conn->llcp_conn_param.ack--;
   1b1d6:	3a01      	subs	r2, #1
   1b1d8:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
			if (!conn_upd_curr) {
   1b1dc:	2800      	cmp	r0, #0
   1b1de:	f47f ad88 	bne.w	1acf2 <ull_conn_rx+0x2e>
				conn_upd_curr = conn;
   1b1e2:	4bc7      	ldr	r3, [pc, #796]	; (1b500 <ull_conn_rx+0x83c>)
   1b1e4:	601c      	str	r4, [r3, #0]
   1b1e6:	e66d      	b.n	1aec4 <ull_conn_rx+0x200>
		} else if ((conn->llcp_conn_param.req ==
   1b1e8:	429a      	cmp	r2, r3
   1b1ea:	d004      	beq.n	1b1f6 <ull_conn_rx+0x532>
			    conn->llcp_conn_param.ack) ||
   1b1ec:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1b1f0:	0799      	lsls	r1, r3, #30
   1b1f2:	f040 8088 	bne.w	1b306 <ull_conn_rx+0x642>
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1b1f6:	f8b5 9024 	ldrh.w	r9, [r5, #36]	; 0x24
			if ((interval_min < 6) ||
   1b1fa:	f1b9 0f05 	cmp.w	r9, #5
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1b1fe:	fa1f f389 	uxth.w	r3, r9
			if ((interval_min < 6) ||
   1b202:	d987      	bls.n	1b114 <ull_conn_rx+0x450>
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1b204:	f8b5 8026 	ldrh.w	r8, [r5, #38]	; 0x26
			if ((interval_min < 6) ||
   1b208:	f5b8 6f48 	cmp.w	r8, #3200	; 0xc80
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1b20c:	fa1f f188 	uxth.w	r1, r8
			if ((interval_min < 6) ||
   1b210:	d880      	bhi.n	1b114 <ull_conn_rx+0x450>
			    (interval_max > 3200) ||
   1b212:	428b      	cmp	r3, r1
   1b214:	f63f af7e 	bhi.w	1b114 <ull_conn_rx+0x450>
			u16_t latency = sys_le16_to_cpu(cpr->latency);
   1b218:	f8b5 e028 	ldrh.w	lr, [r5, #40]	; 0x28
			    (interval_min > interval_max) ||
   1b21c:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
			u16_t latency = sys_le16_to_cpu(cpr->latency);
   1b220:	fa1f fc8e 	uxth.w	ip, lr
			    (interval_min > interval_max) ||
   1b224:	f4bf af76 	bcs.w	1b114 <ull_conn_rx+0x450>
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1b228:	8d6f      	ldrh	r7, [r5, #42]	; 0x2a
			    (latency > 499) ||
   1b22a:	f1a7 0a0a 	sub.w	sl, r7, #10
   1b22e:	fa1f fa8a 	uxth.w	sl, sl
   1b232:	f640 4b76 	movw	fp, #3190	; 0xc76
   1b236:	45da      	cmp	sl, fp
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1b238:	b2bb      	uxth	r3, r7
			    (latency > 499) ||
   1b23a:	f63f af6b 	bhi.w	1b114 <ull_conn_rx+0x450>
			     ((latency + 1) * interval_max)) ||
   1b23e:	fb0c 1a01 	mla	sl, ip, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   1b242:	ebba 0f83 	cmp.w	sl, r3, lsl #2
   1b246:	f4bf af65 	bcs.w	1b114 <ull_conn_rx+0x450>
				cpr->preferred_periodicity;
   1b24a:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
			     ((latency + 1) * interval_max)) ||
   1b24e:	4551      	cmp	r1, sl
   1b250:	f4ff af60 	bcc.w	1b114 <ull_conn_rx+0x450>
			conn->llcp_conn_param.interval_min = interval_min;
   1b254:	f8a4 90f0 	strh.w	r9, [r4, #240]	; 0xf0
			conn->llcp_conn_param.interval_max = interval_max;
   1b258:	f8a4 80f2 	strh.w	r8, [r4, #242]	; 0xf2
			conn->llcp_conn_param.latency =	latency;
   1b25c:	f8a4 e0f4 	strh.w	lr, [r4, #244]	; 0xf4
			conn->llcp_conn_param.timeout =	timeout;
   1b260:	f8a4 70f6 	strh.w	r7, [r4, #246]	; 0xf6
			conn->llcp_conn_param.preferred_periodicity =
   1b264:	f884 a0f8 	strb.w	sl, [r4, #248]	; 0xf8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1b268:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   1b26c:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   1b270:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1b274:	f8a4 70fa 	strh.w	r7, [r4, #250]	; 0xfa
				sys_le16_to_cpu(cpr->offset0);
   1b278:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   1b27c:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   1b280:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   1b284:	f8a4 70fc 	strh.w	r7, [r4, #252]	; 0xfc
				sys_le16_to_cpu(cpr->offset1);
   1b288:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   1b28c:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   1b290:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   1b294:	f8a4 70fe 	strh.w	r7, [r4, #254]	; 0xfe
				sys_le16_to_cpu(cpr->offset2);
   1b298:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   1b29c:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   1b2a0:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   1b2a4:	f8a4 7100 	strh.w	r7, [r4, #256]	; 0x100
				sys_le16_to_cpu(cpr->offset3);
   1b2a8:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   1b2ac:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   1b2b0:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   1b2b4:	f8a4 7102 	strh.w	r7, [r4, #258]	; 0x102
				sys_le16_to_cpu(cpr->offset4);
   1b2b8:	f895 7037 	ldrb.w	r7, [r5, #55]	; 0x37
   1b2bc:	f895 e038 	ldrb.w	lr, [r5, #56]	; 0x38
   1b2c0:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   1b2c4:	f8a4 7104 	strh.w	r7, [r4, #260]	; 0x104
				sys_le16_to_cpu(cpr->offset5);
   1b2c8:	f895 7039 	ldrb.w	r7, [r5, #57]	; 0x39
   1b2cc:	f895 503a 	ldrb.w	r5, [r5, #58]	; 0x3a
   1b2d0:	ea47 2505 	orr.w	r5, r7, r5, lsl #8
			conn->llcp_conn_param.offset5 =
   1b2d4:	f8a4 5106 	strh.w	r5, [r4, #262]	; 0x106
			     lll->interval) ||
   1b2d8:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
			if ((conn->llcp_conn_param.interval_max !=
   1b2da:	42a9      	cmp	r1, r5
   1b2dc:	f47f af74 	bne.w	1b1c8 <ull_conn_rx+0x504>
			     lll->interval) ||
   1b2e0:	8e25      	ldrh	r5, [r4, #48]	; 0x30
   1b2e2:	4565      	cmp	r5, ip
   1b2e4:	f47f af70 	bne.w	1b1c8 <ull_conn_rx+0x504>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1b2e8:	f240 45e2 	movw	r5, #1250	; 0x4e2
   1b2ec:	e75e      	b.n	1b1ac <ull_conn_rx+0x4e8>
				conn->llcp_conn_param.state =
   1b2ee:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   1b2f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1b2f6:	f043 0301 	orr.w	r3, r3, #1
   1b2fa:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1b2fe:	6833      	ldr	r3, [r6, #0]
   1b300:	2103      	movs	r1, #3
   1b302:	7119      	strb	r1, [r3, #4]
   1b304:	e767      	b.n	1b1d6 <ull_conn_rx+0x512>
			LL_ASSERT(0);
   1b306:	4a7f      	ldr	r2, [pc, #508]	; (1b504 <ull_conn_rx+0x840>)
   1b308:	497f      	ldr	r1, [pc, #508]	; (1b508 <ull_conn_rx+0x844>)
   1b30a:	4880      	ldr	r0, [pc, #512]	; (1b50c <ull_conn_rx+0x848>)
   1b30c:	f241 6352 	movw	r3, #5714	; 0x1652
   1b310:	f007 ffdb 	bl	232ca <printk>
   1b314:	4040      	eors	r0, r0
   1b316:	f380 8811 	msr	BASEPRI, r0
   1b31a:	f04f 0003 	mov.w	r0, #3
   1b31e:	df02      	svc	2
   1b320:	e4e7      	b.n	1acf2 <ull_conn_rx+0x2e>
		if (conn->lll.role ||
   1b322:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1b326:	2b00      	cmp	r3, #0
   1b328:	f2c0 8180 	blt.w	1b62c <ull_conn_rx+0x968>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
   1b32c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1b330:	2010      	movs	r0, #16
   1b332:	f7ff f9fb 	bl	1a72c <pdu_len_cmp>
		if (conn->lll.role ||
   1b336:	2800      	cmp	r0, #0
   1b338:	f000 8178 	beq.w	1b62c <ull_conn_rx+0x968>
		if (!conn->lll.role &&
   1b33c:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   1b340:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   1b344:	429a      	cmp	r2, r3
   1b346:	d07a      	beq.n	1b43e <ull_conn_rx+0x77a>
		    (conn->llcp_conn_param.state ==
   1b348:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
		     conn->llcp_conn_param.ack) &&
   1b34c:	f003 0307 	and.w	r3, r3, #7
   1b350:	2b04      	cmp	r3, #4
   1b352:	d174      	bne.n	1b43e <ull_conn_rx+0x77a>
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1b354:	8caf      	ldrh	r7, [r5, #36]	; 0x24
			if ((interval_min < 6) ||
   1b356:	2f05      	cmp	r7, #5
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1b358:	b2ba      	uxth	r2, r7
			if ((interval_min < 6) ||
   1b35a:	d921      	bls.n	1b3a0 <ull_conn_rx+0x6dc>
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1b35c:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
			if ((interval_min < 6) ||
   1b35e:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1b362:	b283      	uxth	r3, r0
			if ((interval_min < 6) ||
   1b364:	d81c      	bhi.n	1b3a0 <ull_conn_rx+0x6dc>
			    (interval_max > 3200) ||
   1b366:	429a      	cmp	r2, r3
   1b368:	d81a      	bhi.n	1b3a0 <ull_conn_rx+0x6dc>
			u16_t latency = sys_le16_to_cpu(cpr->latency);
   1b36a:	8d29      	ldrh	r1, [r5, #40]	; 0x28
			    (interval_min > interval_max) ||
   1b36c:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
			u16_t latency = sys_le16_to_cpu(cpr->latency);
   1b370:	fa1f fc81 	uxth.w	ip, r1
			    (interval_min > interval_max) ||
   1b374:	d214      	bcs.n	1b3a0 <ull_conn_rx+0x6dc>
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1b376:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
			    (latency > 499) ||
   1b378:	f1a2 0e0a 	sub.w	lr, r2, #10
   1b37c:	fa1f fe8e 	uxth.w	lr, lr
   1b380:	f640 4976 	movw	r9, #3190	; 0xc76
   1b384:	45ce      	cmp	lr, r9
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1b386:	fa1f f882 	uxth.w	r8, r2
			    (latency > 499) ||
   1b38a:	d809      	bhi.n	1b3a0 <ull_conn_rx+0x6dc>
			     ((latency + 1) * interval_max)) ||
   1b38c:	fb0c 3c03 	mla	ip, ip, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
   1b390:	ebbc 0f88 	cmp.w	ip, r8, lsl #2
   1b394:	d204      	bcs.n	1b3a0 <ull_conn_rx+0x6dc>
				cpr->preferred_periodicity;
   1b396:	f895 c02c 	ldrb.w	ip, [r5, #44]	; 0x2c
			     ((latency + 1) * interval_max)) ||
   1b39a:	4563      	cmp	r3, ip
   1b39c:	46e6      	mov	lr, ip
   1b39e:	d202      	bcs.n	1b3a6 <ull_conn_rx+0x6e2>
				nack = reject_ext_ind_send(conn, *rx,
   1b3a0:	231e      	movs	r3, #30
   1b3a2:	2210      	movs	r2, #16
   1b3a4:	e660      	b.n	1b068 <ull_conn_rx+0x3a4>
			conn->procedure_expire = 0U;
   1b3a6:	2300      	movs	r3, #0
   1b3a8:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
			conn->llcp_conn_param.interval_min = interval_min;
   1b3ac:	f8a4 70f0 	strh.w	r7, [r4, #240]	; 0xf0
			conn->llcp_conn_param.interval_max = interval_max;
   1b3b0:	f8a4 00f2 	strh.w	r0, [r4, #242]	; 0xf2
			conn->llcp_conn_param.latency =	latency;
   1b3b4:	f8a4 10f4 	strh.w	r1, [r4, #244]	; 0xf4
			conn->llcp_conn_param.timeout =	timeout;
   1b3b8:	f8a4 20f6 	strh.w	r2, [r4, #246]	; 0xf6
			conn->llcp_conn_param.preferred_periodicity =
   1b3bc:	f884 c0f8 	strb.w	ip, [r4, #248]	; 0xf8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1b3c0:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
   1b3c4:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   1b3c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1b3cc:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
				sys_le16_to_cpu(cpr->offset0);
   1b3d0:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   1b3d4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1b3d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset0 =
   1b3dc:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
				sys_le16_to_cpu(cpr->offset1);
   1b3e0:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
   1b3e4:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   1b3e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset1 =
   1b3ec:	f8a4 30fe 	strh.w	r3, [r4, #254]	; 0xfe
				sys_le16_to_cpu(cpr->offset2);
   1b3f0:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
   1b3f4:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1b3f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset2 =
   1b3fc:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
				sys_le16_to_cpu(cpr->offset3);
   1b400:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
   1b404:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   1b408:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset3 =
   1b40c:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
				sys_le16_to_cpu(cpr->offset4);
   1b410:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
   1b414:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
   1b418:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset4 =
   1b41c:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
				sys_le16_to_cpu(cpr->offset5);
   1b420:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   1b424:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   1b428:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset5 =
   1b42c:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1b430:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1b434:	2201      	movs	r2, #1
   1b436:	f362 0302 	bfi	r3, r2, #0, #3
   1b43a:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1b43e:	6833      	ldr	r3, [r6, #0]
   1b440:	2203      	movs	r2, #3
   1b442:	711a      	strb	r2, [r3, #4]
		break;
   1b444:	e455      	b.n	1acf2 <ull_conn_rx+0x2e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   1b446:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1b44a:	2011      	movs	r0, #17
   1b44c:	f7ff f96e 	bl	1a72c <pdu_len_cmp>
   1b450:	2800      	cmp	r0, #0
   1b452:	f000 80eb 	beq.w	1b62c <ull_conn_rx+0x968>
	switch (rej_ext_ind->reject_opcode) {
   1b456:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1b45a:	2b0f      	cmp	r3, #15
   1b45c:	f47f ac3d 	bne.w	1acda <ull_conn_rx+0x16>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1b460:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   1b464:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1b468:	429a      	cmp	r2, r3
   1b46a:	f43f ac36 	beq.w	1acda <ull_conn_rx+0x16>
	if (!lll->role && (rej_ext_ind->error_code ==
   1b46e:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   1b472:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   1b476:	2a00      	cmp	r2, #0
   1b478:	f2c0 80f1 	blt.w	1b65e <ull_conn_rx+0x99a>
   1b47c:	2b1a      	cmp	r3, #26
   1b47e:	f040 80f4 	bne.w	1b66a <ull_conn_rx+0x9a6>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1b482:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   1b486:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1b48a:	429a      	cmp	r2, r3
   1b48c:	d00c      	beq.n	1b4a8 <ull_conn_rx+0x7e4>
   1b48e:	4a1d      	ldr	r2, [pc, #116]	; (1b504 <ull_conn_rx+0x840>)
   1b490:	491f      	ldr	r1, [pc, #124]	; (1b510 <ull_conn_rx+0x84c>)
   1b492:	481e      	ldr	r0, [pc, #120]	; (1b50c <ull_conn_rx+0x848>)
   1b494:	f241 0383 	movw	r3, #4227	; 0x1083
   1b498:	f007 ff17 	bl	232ca <printk>
   1b49c:	4040      	eors	r0, r0
   1b49e:	f380 8811 	msr	BASEPRI, r0
   1b4a2:	f04f 0003 	mov.w	r0, #3
   1b4a6:	df02      	svc	2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1b4a8:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1b4ac:	2205      	movs	r2, #5
   1b4ae:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp_cu.win_size = 1U;
   1b4b2:	2201      	movs	r2, #1
   1b4b4:	f884 20b0 	strb.w	r2, [r4, #176]	; 0xb0
		conn->llcp_cu.win_offset_us = 0U;
   1b4b8:	2200      	movs	r2, #0
   1b4ba:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1b4be:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   1b4c2:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1b4c6:	f8b4 20f4 	ldrh.w	r2, [r4, #244]	; 0xf4
   1b4ca:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1b4ce:	f8b4 20f6 	ldrh.w	r2, [r4, #246]	; 0xf6
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1b4d2:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1b4d6:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1b4da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1b4de:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
   1b4e2:	009b      	lsls	r3, r3, #2
   1b4e4:	f043 0301 	orr.w	r3, r3, #1
   1b4e8:	f022 0207 	bic.w	r2, r2, #7
   1b4ec:	4313      	orrs	r3, r2
   1b4ee:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_cu.ack--;
   1b4f2:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1b4f6:	3b01      	subs	r3, #1
   1b4f8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
	if (err) {
   1b4fc:	f7ff bbed 	b.w	1acda <ull_conn_rx+0x16>
   1b500:	2000172c 	.word	0x2000172c
   1b504:	0002f06c 	.word	0x0002f06c
   1b508:	0002d2c6 	.word	0x0002d2c6
   1b50c:	000297e6 	.word	0x000297e6
   1b510:	0002f15c 	.word	0x0002f15c
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   1b514:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1b518:	2007      	movs	r0, #7
   1b51a:	f7ff f907 	bl	1a72c <pdu_len_cmp>
   1b51e:	2800      	cmp	r0, #0
   1b520:	f000 8084 	beq.w	1b62c <ull_conn_rx+0x968>
		} else if (conn->llcp_conn_param.ack !=
   1b524:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   1b528:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1b52c:	429a      	cmp	r2, r3
   1b52e:	f43f ac70 	beq.w	1ae12 <ull_conn_rx+0x14e>
			conn->llcp_conn_param.disabled = 1U;
   1b532:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1b536:	f043 0310 	orr.w	r3, r3, #16
   1b53a:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
			if (!conn->lll.role) {
   1b53e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1b542:	2b00      	cmp	r3, #0
   1b544:	db40      	blt.n	1b5c8 <ull_conn_rx+0x904>
				LL_ASSERT(conn->llcp_cu.req ==
   1b546:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   1b54a:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1b54e:	429a      	cmp	r2, r3
   1b550:	d00c      	beq.n	1b56c <ull_conn_rx+0x8a8>
   1b552:	4a63      	ldr	r2, [pc, #396]	; (1b6e0 <ull_conn_rx+0xa1c>)
   1b554:	4963      	ldr	r1, [pc, #396]	; (1b6e4 <ull_conn_rx+0xa20>)
   1b556:	4864      	ldr	r0, [pc, #400]	; (1b6e8 <ull_conn_rx+0xa24>)
   1b558:	f241 63d2 	movw	r3, #5842	; 0x16d2
   1b55c:	f007 feb5 	bl	232ca <printk>
   1b560:	4040      	eors	r0, r0
   1b562:	f380 8811 	msr	BASEPRI, r0
   1b566:	f04f 0003 	mov.w	r0, #3
   1b56a:	df02      	svc	2
				conn->llcp_conn_param.state =
   1b56c:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1b570:	2205      	movs	r2, #5
   1b572:	f362 0302 	bfi	r3, r2, #0, #3
				conn->llcp_cu.win_size = 1U;
   1b576:	2201      	movs	r2, #1
   1b578:	f884 20b0 	strb.w	r2, [r4, #176]	; 0xb0
				conn->llcp_cu.interval =
   1b57c:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   1b580:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
				conn->llcp_cu.latency =
   1b584:	f8b4 20f4 	ldrh.w	r2, [r4, #244]	; 0xf4
   1b588:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
				conn->llcp_cu.timeout =
   1b58c:	f8b4 20f6 	ldrh.w	r2, [r4, #246]	; 0xf6
				conn->llcp_conn_param.state =
   1b590:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
				conn->llcp_cu.timeout =
   1b594:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1b598:	f3c3 03c0 	ubfx	r3, r3, #3, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1b59c:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
   1b5a0:	009b      	lsls	r3, r3, #2
   1b5a2:	f043 0301 	orr.w	r3, r3, #1
   1b5a6:	f022 0207 	bic.w	r2, r2, #7
   1b5aa:	4313      	orrs	r3, r2
   1b5ac:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
				conn->llcp_cu.ack--;
   1b5b0:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1b5b4:	3b01      	subs	r3, #1
   1b5b6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
				conn->llcp_cu.win_offset_us = 0U;
   1b5ba:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1b5bc:	6833      	ldr	r3, [r6, #0]
				conn->llcp_cu.win_offset_us = 0U;
   1b5be:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1b5c2:	2203      	movs	r2, #3
   1b5c4:	711a      	strb	r2, [r3, #4]
				break;
   1b5c6:	e47d      	b.n	1aec4 <ull_conn_rx+0x200>
			LL_ASSERT(conn_upd_curr == conn);
   1b5c8:	4f48      	ldr	r7, [pc, #288]	; (1b6ec <ull_conn_rx+0xa28>)
   1b5ca:	683a      	ldr	r2, [r7, #0]
   1b5cc:	4294      	cmp	r4, r2
   1b5ce:	d00c      	beq.n	1b5ea <ull_conn_rx+0x926>
   1b5d0:	4a43      	ldr	r2, [pc, #268]	; (1b6e0 <ull_conn_rx+0xa1c>)
   1b5d2:	4947      	ldr	r1, [pc, #284]	; (1b6f0 <ull_conn_rx+0xa2c>)
   1b5d4:	4844      	ldr	r0, [pc, #272]	; (1b6e8 <ull_conn_rx+0xa24>)
   1b5d6:	f241 63ea 	movw	r3, #5866	; 0x16ea
   1b5da:	f007 fe76 	bl	232ca <printk>
   1b5de:	4040      	eors	r0, r0
   1b5e0:	f380 8811 	msr	BASEPRI, r0
   1b5e4:	f04f 0003 	mov.w	r0, #3
   1b5e8:	df02      	svc	2
			conn_upd_curr = NULL;
   1b5ea:	2300      	movs	r3, #0
			if (!conn->llcp_conn_param.cmd) {
   1b5ec:	f894 00ee 	ldrb.w	r0, [r4, #238]	; 0xee
			conn_upd_curr = NULL;
   1b5f0:	603b      	str	r3, [r7, #0]
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1b5f2:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1b5f6:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
			if (!conn->llcp_conn_param.cmd) {
   1b5fa:	f010 0008 	ands.w	r0, r0, #8
   1b5fe:	6833      	ldr	r3, [r6, #0]
   1b600:	d0df      	beq.n	1b5c2 <ull_conn_rx+0x8fe>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1b602:	220a      	movs	r2, #10
   1b604:	711a      	strb	r2, [r3, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1b606:	231a      	movs	r3, #26
   1b608:	f885 3020 	strb.w	r3, [r5, #32]
			cu->latency = lll->latency;
   1b60c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			cu->interval = lll->interval;
   1b60e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			cu->latency = lll->latency;
   1b610:	84aa      	strh	r2, [r5, #36]	; 0x24
			cu->timeout = conn->supervision_reload *
   1b612:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
			cu->interval = lll->interval;
   1b616:	846b      	strh	r3, [r5, #34]	; 0x22
			cu->timeout = conn->supervision_reload *
   1b618:	435a      	muls	r2, r3
				      lll->interval * 125U / 1000;
   1b61a:	237d      	movs	r3, #125	; 0x7d
   1b61c:	4353      	muls	r3, r2
   1b61e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b622:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   1b626:	84eb      	strh	r3, [r5, #38]	; 0x26
   1b628:	f7ff bbf3 	b.w	1ae12 <ull_conn_rx+0x14e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1b62c:	4831      	ldr	r0, [pc, #196]	; (1b6f4 <ull_conn_rx+0xa30>)
   1b62e:	f00b fdca 	bl	271c6 <mem_acquire>
	if (!tx) {
   1b632:	4601      	mov	r1, r0
   1b634:	2800      	cmp	r0, #0
   1b636:	f43f ac43 	beq.w	1aec0 <ull_conn_rx+0x1fc>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1b63a:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   1b63c:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1b640:	f043 0303 	orr.w	r3, r3, #3
   1b644:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1b646:	2302      	movs	r3, #2
   1b648:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   1b64a:	2307      	movs	r3, #7
   1b64c:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, tx);
   1b64e:	4620      	mov	r0, r4
   1b650:	f00c f836 	bl	276c0 <ctrl_tx_enqueue>
   1b654:	f7ff bb41 	b.w	1acda <ull_conn_rx+0x16>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1b658:	2303      	movs	r3, #3
   1b65a:	712b      	strb	r3, [r5, #4]
		break;
   1b65c:	e432      	b.n	1aec4 <ull_conn_rx+0x200>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1b65e:	2b23      	cmp	r3, #35	; 0x23
   1b660:	d003      	beq.n	1b66a <ull_conn_rx+0x9a6>
			conn->slave.ticks_to_offset =
   1b662:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1b666:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1b66a:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1b66e:	f003 0307 	and.w	r3, r3, #7
   1b672:	2b04      	cmp	r3, #4
   1b674:	d118      	bne.n	1b6a8 <ull_conn_rx+0x9e4>
		LL_ASSERT(conn_upd_curr == conn);
   1b676:	4e1d      	ldr	r6, [pc, #116]	; (1b6ec <ull_conn_rx+0xa28>)
   1b678:	6832      	ldr	r2, [r6, #0]
   1b67a:	4294      	cmp	r4, r2
   1b67c:	d00c      	beq.n	1b698 <ull_conn_rx+0x9d4>
   1b67e:	4a18      	ldr	r2, [pc, #96]	; (1b6e0 <ull_conn_rx+0xa1c>)
   1b680:	491b      	ldr	r1, [pc, #108]	; (1b6f0 <ull_conn_rx+0xa2c>)
   1b682:	4819      	ldr	r0, [pc, #100]	; (1b6e8 <ull_conn_rx+0xa24>)
   1b684:	f241 039e 	movw	r3, #4254	; 0x109e
   1b688:	f007 fe1f 	bl	232ca <printk>
   1b68c:	4040      	eors	r0, r0
   1b68e:	f380 8811 	msr	BASEPRI, r0
   1b692:	f04f 0003 	mov.w	r0, #3
   1b696:	df02      	svc	2
		conn_upd_curr = NULL;
   1b698:	2300      	movs	r3, #0
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1b69a:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
		conn_upd_curr = NULL;
   1b69e:	6033      	str	r3, [r6, #0]
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1b6a0:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
		conn->procedure_expire = 0U;
   1b6a4:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
	if (!conn->llcp_conn_param.cmd) {
   1b6a8:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1b6ac:	071b      	lsls	r3, r3, #28
   1b6ae:	f57f ab14 	bpl.w	1acda <ull_conn_rx+0x16>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1b6b2:	230a      	movs	r3, #10
   1b6b4:	712b      	strb	r3, [r5, #4]
	cu->status = rej_ext_ind->error_code;
   1b6b6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   1b6ba:	f885 3020 	strb.w	r3, [r5, #32]
	cu->latency = lll->latency;
   1b6be:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	cu->interval = lll->interval;
   1b6c0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	cu->latency = lll->latency;
   1b6c2:	84aa      	strh	r2, [r5, #36]	; 0x24
	cu->timeout = conn->supervision_reload *
   1b6c4:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
	cu->interval = lll->interval;
   1b6c8:	846b      	strh	r3, [r5, #34]	; 0x22
	cu->timeout = conn->supervision_reload *
   1b6ca:	435a      	muls	r2, r3
		      lll->interval * 125U / 1000;
   1b6cc:	237d      	movs	r3, #125	; 0x7d
   1b6ce:	4353      	muls	r3, r2
   1b6d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b6d4:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   1b6d8:	84eb      	strh	r3, [r5, #38]	; 0x26
	if (err) {
   1b6da:	f7ff bb0a 	b.w	1acf2 <ull_conn_rx+0x2e>
   1b6de:	bf00      	nop
   1b6e0:	0002f06c 	.word	0x0002f06c
   1b6e4:	0002f15c 	.word	0x0002f15c
   1b6e8:	000297e6 	.word	0x000297e6
   1b6ec:	2000172c 	.word	0x2000172c
   1b6f0:	0002f183 	.word	0x0002f183
   1b6f4:	200017a8 	.word	0x200017a8

0001b6f8 <ull_conn_tx_demux>:
{
   1b6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1b6fc:	4e20      	ldr	r6, [pc, #128]	; (1b780 <ull_conn_tx_demux+0x88>)
{
   1b6fe:	4604      	mov	r4, r0
   1b700:	4637      	mov	r7, r6
	return (void *)(fifo + first * size);
   1b702:	1d35      	adds	r5, r6, #4
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1b704:	78b3      	ldrb	r3, [r6, #2]
	if (first == last) {
   1b706:	78f1      	ldrb	r1, [r6, #3]
   1b708:	7832      	ldrb	r2, [r6, #0]
   1b70a:	4299      	cmp	r1, r3
   1b70c:	d02d      	beq.n	1b76a <ull_conn_tx_demux+0x72>
	return (void *)(fifo + first * size);
   1b70e:	fb13 f302 	smulbb	r3, r3, r2
		if (!lll_tx) {
   1b712:	eb15 0803 	adds.w	r8, r5, r3
   1b716:	d028      	beq.n	1b76a <ull_conn_tx_demux+0x72>
		conn = ll_connected_get(lll_tx->handle);
   1b718:	5ae8      	ldrh	r0, [r5, r3]
   1b71a:	f00b fff6 	bl	2770a <ll_connected_get>
		if (conn) {
   1b71e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1b722:	b320      	cbz	r0, 1b76e <ull_conn_tx_demux+0x76>
			tx->next = NULL;
   1b724:	2300      	movs	r3, #0
   1b726:	600b      	str	r3, [r1, #0]
			if (!conn->tx_data) {
   1b728:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   1b72c:	b943      	cbnz	r3, 1b740 <ull_conn_tx_demux+0x48>
				if (!conn->tx_head) {
   1b72e:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
				conn->tx_data = tx;
   1b732:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
				if (!conn->tx_head) {
   1b736:	b91b      	cbnz	r3, 1b740 <ull_conn_tx_demux+0x48>
					conn->tx_head = tx;
   1b738:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
					conn->tx_data_last = NULL;
   1b73c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
			if (conn->tx_data_last) {
   1b740:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   1b744:	b103      	cbz	r3, 1b748 <ull_conn_tx_demux+0x50>
				conn->tx_data_last->next = tx;
   1b746:	6019      	str	r1, [r3, #0]
			conn->tx_data_last = tx;
   1b748:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
	u8_t _first = *first; /* Copy read-index */
   1b74c:	78bb      	ldrb	r3, [r7, #2]
	if (_first == last) {
   1b74e:	78f9      	ldrb	r1, [r7, #3]
		MFIFO_DEQUEUE(conn_tx);
   1b750:	787a      	ldrb	r2, [r7, #1]
   1b752:	4299      	cmp	r1, r3
   1b754:	d005      	beq.n	1b762 <ull_conn_tx_demux+0x6a>
	_first += 1U;
   1b756:	3301      	adds	r3, #1
   1b758:	b2db      	uxtb	r3, r3
		_first = 0U;
   1b75a:	429a      	cmp	r2, r3
   1b75c:	bf08      	it	eq
   1b75e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1b760:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   1b762:	3c01      	subs	r4, #1
   1b764:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1b768:	d1cc      	bne.n	1b704 <ull_conn_tx_demux+0xc>
}
   1b76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p->ll_id = PDU_DATA_LLID_RESV;
   1b76e:	790b      	ldrb	r3, [r1, #4]
   1b770:	f360 0301 	bfi	r3, r0, #0, #2
   1b774:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   1b776:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1b77a:	f7fe f8e3 	bl	19944 <ll_tx_ack_put>
   1b77e:	e7e5      	b.n	1b74c <ull_conn_tx_demux+0x54>
   1b780:	200071d8 	.word	0x200071d8

0001b784 <conn_cleanup>:
	rx->hdr.handle = conn->lll.handle;
   1b784:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
{
   1b786:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	rx->hdr.handle = conn->lll.handle;
   1b78a:	f8a0 30ce 	strh.w	r3, [r0, #206]	; 0xce
	*((u8_t *)rx->pdu) = reason;
   1b78e:	f880 10e8 	strb.w	r1, [r0, #232]	; 0xe8
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1b792:	2309      	movs	r3, #9
	rx = conn->llcp_rx;
   1b794:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1b798:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
{
   1b79c:	4604      	mov	r4, r0
	struct lll_conn *lll = &conn->lll;
   1b79e:	f100 061c 	add.w	r6, r0, #28
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1b7a2:	2503      	movs	r5, #3
	while (rx) {
   1b7a4:	bb49      	cbnz	r1, 1b7fa <conn_cleanup+0x76>
		link = mem_acquire(&mem_link_tx.free);
   1b7a6:	4f27      	ldr	r7, [pc, #156]	; (1b844 <conn_cleanup+0xc0>)
		LL_ASSERT(link);
   1b7a8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1b84c <conn_cleanup+0xc8>
   1b7ac:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1b858 <conn_cleanup+0xd4>
	while (conn->tx_head) {
   1b7b0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1b7b4:	bb40      	cbnz	r0, 1b808 <conn_cleanup+0x84>
				    TICKER_ID_CONN_BASE + lll->handle,
   1b7b6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1b7ba:	4b23      	ldr	r3, [pc, #140]	; (1b848 <conn_cleanup+0xc4>)
   1b7bc:	9600      	str	r6, [sp, #0]
				    TICKER_ID_CONN_BASE + lll->handle,
   1b7be:	3205      	adds	r2, #5
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1b7c0:	b2d2      	uxtb	r2, r2
   1b7c2:	2101      	movs	r1, #1
   1b7c4:	f7fc fcc0 	bl	18148 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1b7c8:	f030 0302 	bics.w	r3, r0, #2
   1b7cc:	d00c      	beq.n	1b7e8 <conn_cleanup+0x64>
   1b7ce:	4a1f      	ldr	r2, [pc, #124]	; (1b84c <conn_cleanup+0xc8>)
   1b7d0:	491f      	ldr	r1, [pc, #124]	; (1b850 <conn_cleanup+0xcc>)
   1b7d2:	4820      	ldr	r0, [pc, #128]	; (1b854 <conn_cleanup+0xd0>)
   1b7d4:	f240 63d3 	movw	r3, #1747	; 0x6d3
   1b7d8:	f007 fd77 	bl	232ca <printk>
   1b7dc:	4040      	eors	r0, r0
   1b7de:	f380 8811 	msr	BASEPRI, r0
   1b7e2:	f04f 0003 	mov.w	r0, #3
   1b7e6:	df02      	svc	2
	lll->handle = 0xFFFF;
   1b7e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   1b7ec:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   1b7ee:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
   1b7f0:	b002      	add	sp, #8
   1b7f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   1b7f6:	f7ff bf7f 	b.w	1b6f8 <ull_conn_tx_demux>
		rx = hdr->link->mem;
   1b7fa:	6808      	ldr	r0, [r1, #0]
   1b7fc:	6847      	ldr	r7, [r0, #4]
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1b7fe:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   1b800:	f7fe f862 	bl	198c8 <ll_rx_put>
		rx = hdr->link->mem;
   1b804:	4639      	mov	r1, r7
   1b806:	e7cd      	b.n	1b7a4 <conn_cleanup+0x20>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1b808:	4601      	mov	r1, r0
   1b80a:	4620      	mov	r0, r4
   1b80c:	f00b ff25 	bl	2765a <tx_ull_dequeue>
   1b810:	4682      	mov	sl, r0
		link = mem_acquire(&mem_link_tx.free);
   1b812:	4638      	mov	r0, r7
   1b814:	f00b fcd7 	bl	271c6 <mem_acquire>
		LL_ASSERT(link);
   1b818:	4605      	mov	r5, r0
   1b81a:	b960      	cbnz	r0, 1b836 <conn_cleanup+0xb2>
   1b81c:	480d      	ldr	r0, [pc, #52]	; (1b854 <conn_cleanup+0xd0>)
   1b81e:	f240 63e6 	movw	r3, #1766	; 0x6e6
   1b822:	4642      	mov	r2, r8
   1b824:	4649      	mov	r1, r9
   1b826:	f007 fd50 	bl	232ca <printk>
   1b82a:	4040      	eors	r0, r0
   1b82c:	f380 8811 	msr	BASEPRI, r0
   1b830:	f04f 0003 	mov.w	r0, #3
   1b834:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1b836:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1b83a:	4651      	mov	r1, sl
   1b83c:	4628      	mov	r0, r5
   1b83e:	f00b fd20 	bl	27282 <memq_enqueue>
   1b842:	e7b5      	b.n	1b7b0 <conn_cleanup+0x2c>
   1b844:	2000182c 	.word	0x2000182c
   1b848:	0001a8e1 	.word	0x0001a8e1
   1b84c:	0002f06c 	.word	0x0002f06c
   1b850:	0002f122 	.word	0x0002f122
   1b854:	000297e6 	.word	0x000297e6
   1b858:	0002e45f 	.word	0x0002e45f

0001b85c <ull_conn_done>:
{
   1b85c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   1b860:	6a05      	ldr	r5, [r0, #32]
	if (lll->handle == 0xFFFF) {
   1b862:	8baa      	ldrh	r2, [r5, #28]
   1b864:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b868:	429a      	cmp	r2, r3
{
   1b86a:	b08b      	sub	sp, #44	; 0x2c
   1b86c:	4681      	mov	r9, r0
	if (lll->handle == 0xFFFF) {
   1b86e:	d007      	beq.n	1b880 <ull_conn_done+0x24>
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   1b870:	68ec      	ldr	r4, [r5, #12]
	reason_peer = conn->llcp_terminate.reason_peer;
   1b872:	f894 60c7 	ldrb.w	r6, [r4, #199]	; 0xc7
	if (reason_peer && (
   1b876:	b136      	cbz	r6, 1b886 <ull_conn_done+0x2a>
		conn_cleanup(conn, reason_peer);
   1b878:	4631      	mov	r1, r6
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   1b87a:	4620      	mov	r0, r4
   1b87c:	f7ff ff82 	bl	1b784 <conn_cleanup>
}
   1b880:	b00b      	add	sp, #44	; 0x2c
   1b882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	latency_event = lll->latency_event;
   1b886:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   1b88a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	elapsed_event = latency_event + 1;
   1b88c:	f108 0701 	add.w	r7, r8, #1
	ticks_drift_minus = 0U;
   1b890:	e9cd 6608 	strd	r6, r6, [sp, #32]
	elapsed_event = latency_event + 1;
   1b894:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   1b896:	b17b      	cbz	r3, 1b8b8 <ull_conn_done+0x5c>
		} else if (lll->role) {
   1b898:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   1b89c:	2b00      	cmp	r3, #0
   1b89e:	da08      	bge.n	1b8b2 <ull_conn_done+0x56>
			ull_slave_done(done, &ticks_drift_plus,
   1b8a0:	aa08      	add	r2, sp, #32
   1b8a2:	a909      	add	r1, sp, #36	; 0x24
   1b8a4:	f7e5 fec4 	bl	1630 <ull_slave_done>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   1b8a8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1b8ac:	b15b      	cbz	r3, 1b8c6 <ull_conn_done+0x6a>
				lll->latency_event = 0;
   1b8ae:	2300      	movs	r3, #0
				lll->latency_event = lll->latency;
   1b8b0:	84ab      	strh	r3, [r5, #36]	; 0x24
		conn->connect_expire = 0U;
   1b8b2:	2300      	movs	r3, #0
   1b8b4:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
	if (done->extra.crc_valid) {
   1b8b8:	f899 302a 	ldrb.w	r3, [r9, #42]	; 0x2a
   1b8bc:	b183      	cbz	r3, 1b8e0 <ull_conn_done+0x84>
		conn->supervision_expire = 0U;
   1b8be:	2300      	movs	r3, #0
			conn->supervision_expire = conn->supervision_reload;
   1b8c0:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
   1b8c4:	e015      	b.n	1b8f2 <ull_conn_done+0x96>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   1b8c6:	e9d5 0113 	ldrd	r0, r1, [r5, #76]	; 0x4c
   1b8ca:	4632      	mov	r2, r6
   1b8cc:	f00b fce0 	bl	27290 <memq_peek>
   1b8d0:	2800      	cmp	r0, #0
   1b8d2:	d1ec      	bne.n	1b8ae <ull_conn_done+0x52>
			} else if (lll->slave.latency_enabled) {
   1b8d4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1b8d8:	07db      	lsls	r3, r3, #31
   1b8da:	d5ea      	bpl.n	1b8b2 <ull_conn_done+0x56>
				lll->latency_event = lll->latency;
   1b8dc:	8c2b      	ldrh	r3, [r5, #32]
   1b8de:	e7e7      	b.n	1b8b0 <ull_conn_done+0x54>
	else if (conn->connect_expire) {
   1b8e0:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   1b8e4:	2b00      	cmp	r3, #0
   1b8e6:	d075      	beq.n	1b9d4 <ull_conn_done+0x178>
		if (conn->connect_expire > elapsed_event) {
   1b8e8:	42bb      	cmp	r3, r7
   1b8ea:	d971      	bls.n	1b9d0 <ull_conn_done+0x174>
			conn->connect_expire -= elapsed_event;
   1b8ec:	1bdb      	subs	r3, r3, r7
   1b8ee:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
	if (conn->supervision_expire) {
   1b8f2:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1b8f6:	b1eb      	cbz	r3, 1b934 <ull_conn_done+0xd8>
		if (conn->supervision_expire > elapsed_event) {
   1b8f8:	42bb      	cmp	r3, r7
   1b8fa:	d972      	bls.n	1b9e2 <ull_conn_done+0x186>
			conn->supervision_expire -= elapsed_event;
   1b8fc:	1bdb      	subs	r3, r3, r7
   1b8fe:	b29b      	uxth	r3, r3
			lll->latency_event = 0;
   1b900:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   1b902:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   1b904:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
			lll->latency_event = 0;
   1b908:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   1b90a:	d96c      	bls.n	1b9e6 <ull_conn_done+0x18a>
			else if (lll->role) {
   1b90c:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   1b910:	4293      	cmp	r3, r2
   1b912:	da0f      	bge.n	1b934 <ull_conn_done+0xd8>
				if (latency_event) {
   1b914:	f1b8 0f00 	cmp.w	r8, #0
   1b918:	d165      	bne.n	1b9e6 <ull_conn_done+0x18a>
					force = conn->slave.force & 0x01;
   1b91a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
					conn->slave.force >>= 1;
   1b91e:	085a      	lsrs	r2, r3, #1
					if (force) {
   1b920:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   1b924:	bf17      	itett	ne
   1b926:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1;
   1b92a:	f8c4 2084 	streq.w	r2, [r4, #132]	; 0x84
						conn->slave.force |= BIT(31);
   1b92e:	f8c4 2084 	strne.w	r2, [r4, #132]	; 0x84
					force = conn->slave.force & 0x01;
   1b932:	461e      	movne	r6, r3
	if (conn->procedure_expire != 0U) {
   1b934:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
   1b938:	b123      	cbz	r3, 1b944 <ull_conn_done+0xe8>
		if (conn->procedure_expire > elapsed_event) {
   1b93a:	42bb      	cmp	r3, r7
   1b93c:	d955      	bls.n	1b9ea <ull_conn_done+0x18e>
			conn->procedure_expire -= elapsed_event;
   1b93e:	1bdf      	subs	r7, r3, r7
   1b940:	f8a4 707c 	strh.w	r7, [r4, #124]	; 0x7c
	if ((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1b944:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1b948:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
   1b94c:	1a9b      	subs	r3, r3, r2
   1b94e:	f003 0303 	and.w	r3, r3, #3
   1b952:	2b02      	cmp	r3, #2
   1b954:	d106      	bne.n	1b964 <ull_conn_done+0x108>
	    ((conn->llcp_type == LLCP_CONN_UPD) ||
   1b956:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	if ((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1b95a:	3b01      	subs	r3, #1
   1b95c:	2b01      	cmp	r3, #1
		lll->latency_event = 0;
   1b95e:	bf9c      	itt	ls
   1b960:	2300      	movls	r3, #0
   1b962:	84ab      	strhls	r3, [r5, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   1b964:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   1b966:	b90e      	cbnz	r6, 1b96c <ull_conn_done+0x110>
   1b968:	4588      	cmp	r8, r1
   1b96a:	d040      	beq.n	1b9ee <ull_conn_done+0x192>
		lazy = lll->latency_event + 1;
   1b96c:	3101      	adds	r1, #1
   1b96e:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   1b970:	e9dd 7308 	ldrd	r7, r3, [sp, #32]
   1b974:	ea53 0207 	orrs.w	r2, r3, r7
   1b978:	d103      	bne.n	1b982 <ull_conn_done+0x126>
   1b97a:	b911      	cbnz	r1, 1b982 <ull_conn_done+0x126>
	    (lazy != 0U) || (force != 0U)) {
   1b97c:	2e00      	cmp	r6, #0
   1b97e:	f43f af7f 	beq.w	1b880 <ull_conn_done+0x24>
		u8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1b982:	7f2a      	ldrb	r2, [r5, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1b984:	481b      	ldr	r0, [pc, #108]	; (1b9f4 <ull_conn_done+0x198>)
		struct ll_conn *conn = lll->hdr.parent;
   1b986:	68ec      	ldr	r4, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1b988:	9406      	str	r4, [sp, #24]
   1b98a:	e9cd 6004 	strd	r6, r0, [sp, #16]
		u8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1b98e:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1b990:	2000      	movs	r0, #0
   1b992:	9103      	str	r1, [sp, #12]
   1b994:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1b998:	9700      	str	r7, [sp, #0]
   1b99a:	b2d2      	uxtb	r2, r2
   1b99c:	2101      	movs	r1, #1
   1b99e:	f7fc fb8d 	bl	180bc <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1b9a2:	f030 0302 	bics.w	r3, r0, #2
   1b9a6:	f43f af6b 	beq.w	1b880 <ull_conn_done+0x24>
   1b9aa:	f7fe f83f 	bl	19a2c <ull_disable_mark_get>
   1b9ae:	4284      	cmp	r4, r0
   1b9b0:	f43f af66 	beq.w	1b880 <ull_conn_done+0x24>
   1b9b4:	4a10      	ldr	r2, [pc, #64]	; (1b9f8 <ull_conn_done+0x19c>)
   1b9b6:	4911      	ldr	r1, [pc, #68]	; (1b9fc <ull_conn_done+0x1a0>)
   1b9b8:	4811      	ldr	r0, [pc, #68]	; (1ba00 <ull_conn_done+0x1a4>)
   1b9ba:	f240 43ea 	movw	r3, #1258	; 0x4ea
   1b9be:	f007 fc84 	bl	232ca <printk>
   1b9c2:	4040      	eors	r0, r0
   1b9c4:	f380 8811 	msr	BASEPRI, r0
   1b9c8:	f04f 0003 	mov.w	r0, #3
   1b9cc:	df02      	svc	2
   1b9ce:	e757      	b.n	1b880 <ull_conn_done+0x24>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   1b9d0:	213e      	movs	r1, #62	; 0x3e
   1b9d2:	e752      	b.n	1b87a <ull_conn_done+0x1e>
		if (!conn->supervision_expire) {
   1b9d4:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1b9d8:	2b00      	cmp	r3, #0
   1b9da:	d18a      	bne.n	1b8f2 <ull_conn_done+0x96>
			conn->supervision_expire = conn->supervision_reload;
   1b9dc:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   1b9e0:	e76e      	b.n	1b8c0 <ull_conn_done+0x64>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   1b9e2:	2108      	movs	r1, #8
   1b9e4:	e749      	b.n	1b87a <ull_conn_done+0x1e>
				force = 1U;
   1b9e6:	2601      	movs	r6, #1
   1b9e8:	e7a4      	b.n	1b934 <ull_conn_done+0xd8>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   1b9ea:	2122      	movs	r1, #34	; 0x22
   1b9ec:	e745      	b.n	1b87a <ull_conn_done+0x1e>
	lazy = 0U;
   1b9ee:	4631      	mov	r1, r6
   1b9f0:	e7be      	b.n	1b970 <ull_conn_done+0x114>
   1b9f2:	bf00      	nop
   1b9f4:	0001a8a1 	.word	0x0001a8a1
   1b9f8:	0002f06c 	.word	0x0002f06c
   1b9fc:	0002f1c7 	.word	0x0002f1c7
   1ba00:	000297e6 	.word	0x000297e6

0001ba04 <ull_conn_tx_lll_enqueue>:
{
   1ba04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   1ba08:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1ba68 <ull_conn_tx_lll_enqueue+0x64>
		LL_ASSERT(link);
   1ba0c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1ba6c <ull_conn_tx_lll_enqueue+0x68>
   1ba10:	f8df a05c 	ldr.w	sl, [pc, #92]	; 1ba70 <ull_conn_tx_lll_enqueue+0x6c>
{
   1ba14:	4605      	mov	r5, r0
   1ba16:	460c      	mov	r4, r1
	while (conn->tx_head &&
   1ba18:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   1ba1c:	b101      	cbz	r1, 1ba20 <ull_conn_tx_lll_enqueue+0x1c>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   1ba1e:	b90c      	cbnz	r4, 1ba24 <ull_conn_tx_lll_enqueue+0x20>
}
   1ba20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1ba24:	4628      	mov	r0, r5
   1ba26:	f00b fe18 	bl	2765a <tx_ull_dequeue>
   1ba2a:	4607      	mov	r7, r0
		link = mem_acquire(&mem_link_tx.free);
   1ba2c:	4640      	mov	r0, r8
   1ba2e:	f00b fbca 	bl	271c6 <mem_acquire>
		LL_ASSERT(link);
   1ba32:	4606      	mov	r6, r0
   1ba34:	b960      	cbnz	r0, 1ba50 <ull_conn_tx_lll_enqueue+0x4c>
   1ba36:	480b      	ldr	r0, [pc, #44]	; (1ba64 <ull_conn_tx_lll_enqueue+0x60>)
   1ba38:	f240 5366 	movw	r3, #1382	; 0x566
   1ba3c:	464a      	mov	r2, r9
   1ba3e:	4651      	mov	r1, sl
   1ba40:	f007 fc43 	bl	232ca <printk>
   1ba44:	4040      	eors	r0, r0
   1ba46:	f380 8811 	msr	BASEPRI, r0
   1ba4a:	f04f 0003 	mov.w	r0, #3
   1ba4e:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1ba50:	f105 0260 	add.w	r2, r5, #96	; 0x60
   1ba54:	4639      	mov	r1, r7
   1ba56:	4630      	mov	r0, r6
   1ba58:	3c01      	subs	r4, #1
   1ba5a:	f00b fc12 	bl	27282 <memq_enqueue>
   1ba5e:	b2e4      	uxtb	r4, r4
   1ba60:	e7da      	b.n	1ba18 <ull_conn_tx_lll_enqueue+0x14>
   1ba62:	bf00      	nop
   1ba64:	000297e6 	.word	0x000297e6
   1ba68:	2000182c 	.word	0x2000182c
   1ba6c:	0002f06c 	.word	0x0002f06c
   1ba70:	0002e45f 	.word	0x0002e45f

0001ba74 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   1ba74:	4901      	ldr	r1, [pc, #4]	; (1ba7c <ull_conn_link_tx_release+0x8>)
   1ba76:	f00b bbbf 	b.w	271f8 <mem_release>
   1ba7a:	bf00      	nop
   1ba7c:	2000182c 	.word	0x2000182c

0001ba80 <ull_conn_ack_last_idx_get>:
}
   1ba80:	4b01      	ldr	r3, [pc, #4]	; (1ba88 <ull_conn_ack_last_idx_get+0x8>)
   1ba82:	78d8      	ldrb	r0, [r3, #3]
   1ba84:	4770      	bx	lr
   1ba86:	bf00      	nop
   1ba88:	20007194 	.word	0x20007194

0001ba8c <ull_conn_ack_peek>:
{
   1ba8c:	b570      	push	{r4, r5, r6, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1ba8e:	4b0a      	ldr	r3, [pc, #40]	; (1bab8 <ull_conn_ack_peek+0x2c>)
   1ba90:	789c      	ldrb	r4, [r3, #2]
   1ba92:	78de      	ldrb	r6, [r3, #3]
	if (first == last) {
   1ba94:	42b4      	cmp	r4, r6
{
   1ba96:	4605      	mov	r5, r0
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1ba98:	7818      	ldrb	r0, [r3, #0]
   1ba9a:	d00b      	beq.n	1bab4 <ull_conn_ack_peek+0x28>
	return (void *)(fifo + first * size);
   1ba9c:	3304      	adds	r3, #4
   1ba9e:	fb14 f400 	smulbb	r4, r4, r0
	if (!lll_tx) {
   1baa2:	1918      	adds	r0, r3, r4
   1baa4:	d005      	beq.n	1bab2 <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   1baa6:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   1baa8:	5b1b      	ldrh	r3, [r3, r4]
   1baaa:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   1baac:	6843      	ldr	r3, [r0, #4]
   1baae:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1bab0:	6818      	ldr	r0, [r3, #0]
}
   1bab2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1bab4:	2000      	movs	r0, #0
   1bab6:	e7fc      	b.n	1bab2 <ull_conn_ack_peek+0x26>
   1bab8:	20007194 	.word	0x20007194

0001babc <ull_conn_ack_by_last_peek>:
{
   1babc:	b530      	push	{r4, r5, lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1babe:	4b09      	ldr	r3, [pc, #36]	; (1bae4 <ull_conn_ack_by_last_peek+0x28>)
   1bac0:	789c      	ldrb	r4, [r3, #2]
   1bac2:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   1bac4:	4284      	cmp	r4, r0
   1bac6:	d00a      	beq.n	1bade <ull_conn_ack_by_last_peek+0x22>
	return (void *)(fifo + first * size);
   1bac8:	3304      	adds	r3, #4
   1baca:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   1bace:	1918      	adds	r0, r3, r4
   1bad0:	d004      	beq.n	1badc <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   1bad2:	5b1b      	ldrh	r3, [r3, r4]
   1bad4:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   1bad6:	6843      	ldr	r3, [r0, #4]
   1bad8:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1bada:	6818      	ldr	r0, [r3, #0]
}
   1badc:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1bade:	2000      	movs	r0, #0
   1bae0:	e7fc      	b.n	1badc <ull_conn_ack_by_last_peek+0x20>
   1bae2:	bf00      	nop
   1bae4:	20007194 	.word	0x20007194

0001bae8 <ull_conn_ack_dequeue>:
{
   1bae8:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(conn_ack);
   1baea:	4a09      	ldr	r2, [pc, #36]	; (1bb10 <ull_conn_ack_dequeue+0x28>)
	u8_t _first = *first; /* Copy read-index */
   1baec:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1baee:	78d0      	ldrb	r0, [r2, #3]
   1baf0:	7811      	ldrb	r1, [r2, #0]
   1baf2:	7854      	ldrb	r4, [r2, #1]
   1baf4:	4298      	cmp	r0, r3
   1baf6:	d009      	beq.n	1bb0c <ull_conn_ack_dequeue+0x24>
	mem = *((void **)(fifo + _first * size));
   1baf8:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1bafc:	3301      	adds	r3, #1
   1bafe:	b2db      	uxtb	r3, r3
		_first = 0U;
   1bb00:	429c      	cmp	r4, r3
   1bb02:	bf08      	it	eq
   1bb04:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   1bb06:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1bb08:	7093      	strb	r3, [r2, #2]
}
   1bb0a:	bd10      	pop	{r4, pc}
		return NULL;
   1bb0c:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   1bb0e:	e7fc      	b.n	1bb0a <ull_conn_ack_dequeue+0x22>
   1bb10:	20007194 	.word	0x20007194

0001bb14 <ull_conn_lll_ack_enqueue>:
{
   1bb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1bb16:	4a12      	ldr	r2, [pc, #72]	; (1bb60 <ull_conn_lll_ack_enqueue+0x4c>)
   1bb18:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   1bb1a:	7857      	ldrb	r7, [r2, #1]
   1bb1c:	7895      	ldrb	r5, [r2, #2]
   1bb1e:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   1bb20:	1c63      	adds	r3, r4, #1
   1bb22:	b2db      	uxtb	r3, r3
		last = 0U;
   1bb24:	429f      	cmp	r7, r3
   1bb26:	bf08      	it	eq
   1bb28:	2300      	moveq	r3, #0
	if (last == first) {
   1bb2a:	429d      	cmp	r5, r3
   1bb2c:	d004      	beq.n	1bb38 <ull_conn_lll_ack_enqueue+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1bb2e:	1d15      	adds	r5, r2, #4
   1bb30:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   1bb34:	192e      	adds	r6, r5, r4
   1bb36:	d10f      	bne.n	1bb58 <ull_conn_lll_ack_enqueue+0x44>
   1bb38:	4a0a      	ldr	r2, [pc, #40]	; (1bb64 <ull_conn_lll_ack_enqueue+0x50>)
   1bb3a:	490b      	ldr	r1, [pc, #44]	; (1bb68 <ull_conn_lll_ack_enqueue+0x54>)
   1bb3c:	480b      	ldr	r0, [pc, #44]	; (1bb6c <ull_conn_lll_ack_enqueue+0x58>)
   1bb3e:	f240 53a4 	movw	r3, #1444	; 0x5a4
   1bb42:	f007 fbc2 	bl	232ca <printk>
   1bb46:	4040      	eors	r0, r0
   1bb48:	f380 8811 	msr	BASEPRI, r0
   1bb4c:	f04f 0003 	mov.w	r0, #3
   1bb50:	df02      	svc	2
	lll_tx->handle = handle;
   1bb52:	2300      	movs	r3, #0
   1bb54:	801b      	strh	r3, [r3, #0]
   1bb56:	deff      	udf	#255	; 0xff
   1bb58:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   1bb5a:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   1bb5c:	6071      	str	r1, [r6, #4]
}
   1bb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb60:	20007194 	.word	0x20007194
   1bb64:	0002f06c 	.word	0x0002f06c
   1bb68:	0002f11b 	.word	0x0002f11b
   1bb6c:	000297e6 	.word	0x000297e6

0001bb70 <ull_conn_tx_ack>:
{
   1bb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   1bb72:	7953      	ldrb	r3, [r2, #5]
{
   1bb74:	4606      	mov	r6, r0
   1bb76:	460f      	mov	r7, r1
   1bb78:	4614      	mov	r4, r2
	LL_ASSERT(pdu_tx->len);
   1bb7a:	b963      	cbnz	r3, 1bb96 <ull_conn_tx_ack+0x26>
   1bb7c:	4a26      	ldr	r2, [pc, #152]	; (1bc18 <ull_conn_tx_ack+0xa8>)
   1bb7e:	4927      	ldr	r1, [pc, #156]	; (1bc1c <ull_conn_tx_ack+0xac>)
   1bb80:	4827      	ldr	r0, [pc, #156]	; (1bc20 <ull_conn_tx_ack+0xb0>)
   1bb82:	f240 53b3 	movw	r3, #1459	; 0x5b3
   1bb86:	f007 fba0 	bl	232ca <printk>
   1bb8a:	4040      	eors	r0, r0
   1bb8c:	f380 8811 	msr	BASEPRI, r0
   1bb90:	f04f 0003 	mov.w	r0, #3
   1bb94:	df02      	svc	2
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1bb96:	7923      	ldrb	r3, [r4, #4]
   1bb98:	f003 0203 	and.w	r2, r3, #3
   1bb9c:	2a03      	cmp	r2, #3
   1bb9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bba2:	d12c      	bne.n	1bbfe <ull_conn_tx_ack+0x8e>
		if (handle != 0xFFFF) {
   1bba4:	4296      	cmp	r6, r2
   1bba6:	d015      	beq.n	1bbd4 <ull_conn_tx_ack+0x64>
			conn = ll_conn_get(handle);
   1bba8:	4630      	mov	r0, r6
   1bbaa:	f7fe ff6f 	bl	1aa8c <ll_conn_get>
	switch (pdu_tx->llctrl.opcode) {
   1bbae:	79e3      	ldrb	r3, [r4, #7]
   1bbb0:	2b02      	cmp	r3, #2
			conn = ll_conn_get(handle);
   1bbb2:	4605      	mov	r5, r0
	switch (pdu_tx->llctrl.opcode) {
   1bbb4:	d105      	bne.n	1bbc2 <ull_conn_tx_ack+0x52>
		u8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   1bbb6:	7a21      	ldrb	r1, [r4, #8]
   1bbb8:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   1bbba:	bf08      	it	eq
   1bbbc:	2116      	moveq	r1, #22
   1bbbe:	f7ff fde1 	bl	1b784 <conn_cleanup>
		if (link->next == (void *)tx) {
   1bbc2:	683b      	ldr	r3, [r7, #0]
   1bbc4:	42a3      	cmp	r3, r4
   1bbc6:	d107      	bne.n	1bbd8 <ull_conn_tx_ack+0x68>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1bbc8:	4916      	ldr	r1, [pc, #88]	; (1bc24 <ull_conn_tx_ack+0xb4>)
   1bbca:	4620      	mov	r0, r4
   1bbcc:	f00b fb14 	bl	271f8 <mem_release>
}
   1bbd0:	4628      	mov	r0, r5
   1bbd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	struct ll_conn *conn = NULL;
   1bbd4:	2500      	movs	r5, #0
   1bbd6:	e7f4      	b.n	1bbc2 <ull_conn_tx_ack+0x52>
			LL_ASSERT(!link->next);
   1bbd8:	b163      	cbz	r3, 1bbf4 <ull_conn_tx_ack+0x84>
   1bbda:	4a0f      	ldr	r2, [pc, #60]	; (1bc18 <ull_conn_tx_ack+0xa8>)
   1bbdc:	4912      	ldr	r1, [pc, #72]	; (1bc28 <ull_conn_tx_ack+0xb8>)
   1bbde:	4810      	ldr	r0, [pc, #64]	; (1bc20 <ull_conn_tx_ack+0xb0>)
   1bbe0:	f240 53c6 	movw	r3, #1478	; 0x5c6
   1bbe4:	f007 fb71 	bl	232ca <printk>
   1bbe8:	4040      	eors	r0, r0
   1bbea:	f380 8811 	msr	BASEPRI, r0
   1bbee:	f04f 0003 	mov.w	r0, #3
   1bbf2:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1bbf4:	4621      	mov	r1, r4
   1bbf6:	4630      	mov	r0, r6
   1bbf8:	f7fd fea4 	bl	19944 <ll_tx_ack_put>
	return conn;
   1bbfc:	e7e8      	b.n	1bbd0 <ull_conn_tx_ack+0x60>
	} else if (handle != 0xFFFF) {
   1bbfe:	4296      	cmp	r6, r2
   1bc00:	d004      	beq.n	1bc0c <ull_conn_tx_ack+0x9c>
		conn = ll_conn_get(handle);
   1bc02:	4630      	mov	r0, r6
   1bc04:	f7fe ff42 	bl	1aa8c <ll_conn_get>
   1bc08:	4605      	mov	r5, r0
   1bc0a:	e7f3      	b.n	1bbf4 <ull_conn_tx_ack+0x84>
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   1bc0c:	f36f 0301 	bfc	r3, #0, #2
   1bc10:	7123      	strb	r3, [r4, #4]
	struct ll_conn *conn = NULL;
   1bc12:	2500      	movs	r5, #0
   1bc14:	e7ee      	b.n	1bbf4 <ull_conn_tx_ack+0x84>
   1bc16:	bf00      	nop
   1bc18:	0002f06c 	.word	0x0002f06c
   1bc1c:	0002f220 	.word	0x0002f220
   1bc20:	000297e6 	.word	0x000297e6
   1bc24:	200017a8 	.word	0x200017a8
   1bc28:	0002f22c 	.word	0x0002f22c

0001bc2c <ticker_op_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
		  param == ull_disable_mark_get());
}

static void ticker_op_cb(u32_t status, void *param)
{
   1bc2c:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1bc2e:	b160      	cbz	r0, 1bc4a <ticker_op_cb+0x1e>
   1bc30:	4a06      	ldr	r2, [pc, #24]	; (1bc4c <ticker_op_cb+0x20>)
   1bc32:	4907      	ldr	r1, [pc, #28]	; (1bc50 <ticker_op_cb+0x24>)
   1bc34:	4807      	ldr	r0, [pc, #28]	; (1bc54 <ticker_op_cb+0x28>)
   1bc36:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   1bc3a:	f007 fb46 	bl	232ca <printk>
   1bc3e:	4040      	eors	r0, r0
   1bc40:	f380 8811 	msr	BASEPRI, r0
   1bc44:	f04f 0003 	mov.w	r0, #3
   1bc48:	df02      	svc	2
}
   1bc4a:	bd08      	pop	{r3, pc}
   1bc4c:	0002f249 	.word	0x0002f249
   1bc50:	0002f0b3 	.word	0x0002f0b3
   1bc54:	000297e6 	.word	0x000297e6

0001bc58 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1bc58:	2801      	cmp	r0, #1
{
   1bc5a:	b510      	push	{r4, lr}
   1bc5c:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1bc5e:	d110      	bne.n	1bc82 <ticker_op_stop_adv_cb+0x2a>
   1bc60:	f7fd fee4 	bl	19a2c <ull_disable_mark_get>
   1bc64:	4284      	cmp	r4, r0
   1bc66:	d00c      	beq.n	1bc82 <ticker_op_stop_adv_cb+0x2a>
   1bc68:	4a06      	ldr	r2, [pc, #24]	; (1bc84 <ticker_op_stop_adv_cb+0x2c>)
   1bc6a:	4907      	ldr	r1, [pc, #28]	; (1bc88 <ticker_op_stop_adv_cb+0x30>)
   1bc6c:	4807      	ldr	r0, [pc, #28]	; (1bc8c <ticker_op_stop_adv_cb+0x34>)
   1bc6e:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1bc72:	f007 fb2a 	bl	232ca <printk>
   1bc76:	4040      	eors	r0, r0
   1bc78:	f380 8811 	msr	BASEPRI, r0
   1bc7c:	f04f 0003 	mov.w	r0, #3
   1bc80:	df02      	svc	2
}
   1bc82:	bd10      	pop	{r4, pc}
   1bc84:	0002f249 	.word	0x0002f249
   1bc88:	0002f28a 	.word	0x0002f28a
   1bc8c:	000297e6 	.word	0x000297e6

0001bc90 <ull_slave_ticker_cb>:
{
   1bc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc94:	4606      	mov	r6, r0
   1bc96:	4688      	mov	r8, r1
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1bc98:	4601      	mov	r1, r0
   1bc9a:	4618      	mov	r0, r3
{
   1bc9c:	4617      	mov	r7, r2
   1bc9e:	461c      	mov	r4, r3
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1bca0:	f7e4 fe6e 	bl	980 <ull_conn_llcp>
		if (ret) {
   1bca4:	2800      	cmp	r0, #0
   1bca6:	d136      	bne.n	1bd16 <ull_slave_ticker_cb+0x86>
   1bca8:	7c23      	ldrb	r3, [r4, #16]
   1bcaa:	3301      	adds	r3, #1
   1bcac:	b2db      	uxtb	r3, r3
   1bcae:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   1bcb0:	b963      	cbnz	r3, 1bccc <ull_slave_ticker_cb+0x3c>
   1bcb2:	4a1a      	ldr	r2, [pc, #104]	; (1bd1c <ull_slave_ticker_cb+0x8c>)
   1bcb4:	491a      	ldr	r1, [pc, #104]	; (1bd20 <ull_slave_ticker_cb+0x90>)
   1bcb6:	481b      	ldr	r0, [pc, #108]	; (1bd24 <ull_slave_ticker_cb+0x94>)
   1bcb8:	f44f 73b8 	mov.w	r3, #368	; 0x170
   1bcbc:	f007 fb05 	bl	232ca <printk>
   1bcc0:	4040      	eors	r0, r0
   1bcc2:	f380 8811 	msr	BASEPRI, r0
   1bcc6:	f04f 0003 	mov.w	r0, #3
   1bcca:	df02      	svc	2
	p.ticks_at_expire = ticks_at_expire;
   1bccc:	4d16      	ldr	r5, [pc, #88]	; (1bd28 <ull_slave_ticker_cb+0x98>)
	p.param = &conn->lll;
   1bcce:	f104 031c 	add.w	r3, r4, #28
   1bcd2:	60eb      	str	r3, [r5, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1bcd4:	2200      	movs	r2, #0
	mfy.param = &p;
   1bcd6:	4b15      	ldr	r3, [pc, #84]	; (1bd2c <ull_slave_ticker_cb+0x9c>)
	p.lazy = lazy;
   1bcd8:	812f      	strh	r7, [r5, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1bcda:	4611      	mov	r1, r2
   1bcdc:	2001      	movs	r0, #1
	p.remainder = remainder;
   1bcde:	e9c5 6800 	strd	r6, r8, [r5]
	mfy.param = &p;
   1bce2:	609d      	str	r5, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1bce4:	f7fb fc06 	bl	174f4 <mayfly_enqueue>
	LL_ASSERT(!err);
   1bce8:	b160      	cbz	r0, 1bd04 <ull_slave_ticker_cb+0x74>
   1bcea:	4a0c      	ldr	r2, [pc, #48]	; (1bd1c <ull_slave_ticker_cb+0x8c>)
   1bcec:	4910      	ldr	r1, [pc, #64]	; (1bd30 <ull_slave_ticker_cb+0xa0>)
   1bcee:	480d      	ldr	r0, [pc, #52]	; (1bd24 <ull_slave_ticker_cb+0x94>)
   1bcf0:	f44f 73be 	mov.w	r3, #380	; 0x17c
   1bcf4:	f007 fae9 	bl	232ca <printk>
   1bcf8:	4040      	eors	r0, r0
   1bcfa:	f380 8811 	msr	BASEPRI, r0
   1bcfe:	f04f 0003 	mov.w	r0, #3
   1bd02:	df02      	svc	2
	ull_conn_tx_demux(UINT8_MAX);
   1bd04:	20ff      	movs	r0, #255	; 0xff
   1bd06:	f7ff fcf7 	bl	1b6f8 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1bd0a:	4620      	mov	r0, r4
   1bd0c:	21ff      	movs	r1, #255	; 0xff
}
   1bd0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1bd12:	f7ff be77 	b.w	1ba04 <ull_conn_tx_lll_enqueue>
}
   1bd16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bd1a:	bf00      	nop
   1bd1c:	0002f249 	.word	0x0002f249
   1bd20:	0002eed8 	.word	0x0002eed8
   1bd24:	000297e6 	.word	0x000297e6
   1bd28:	20001870 	.word	0x20001870
   1bd2c:	2000720c 	.word	0x2000720c
   1bd30:	0002ee27 	.word	0x0002ee27

0001bd34 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   1bd34:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1bd36:	4b08      	ldr	r3, [pc, #32]	; (1bd58 <rtc0_nrf5_isr+0x24>)
   1bd38:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1bd3c:	b122      	cbz	r2, 1bd48 <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1bd3e:	2000      	movs	r0, #0
   1bd40:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
   1bd44:	f7fc f95e 	bl	18004 <ticker_trigger>
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1bd48:	2001      	movs	r0, #1
   1bd4a:	f7fb fc23 	bl	17594 <mayfly_run>
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
#endif

	DEBUG_TICKER_ISR(0);
}
   1bd4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1bd52:	2002      	movs	r0, #2
   1bd54:	f7fb bc1e 	b.w	17594 <mayfly_run>
   1bd58:	4000b000 	.word	0x4000b000

0001bd5c <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1bd5c:	2801      	cmp	r0, #1
{
   1bd5e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1bd60:	d90c      	bls.n	1bd7c <ticker_start_op_cb+0x20>
   1bd62:	4a07      	ldr	r2, [pc, #28]	; (1bd80 <ticker_start_op_cb+0x24>)
   1bd64:	4907      	ldr	r1, [pc, #28]	; (1bd84 <ticker_start_op_cb+0x28>)
   1bd66:	4808      	ldr	r0, [pc, #32]	; (1bd88 <ticker_start_op_cb+0x2c>)
   1bd68:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
   1bd6c:	f007 faad 	bl	232ca <printk>
   1bd70:	4040      	eors	r0, r0
   1bd72:	f380 8811 	msr	BASEPRI, r0
   1bd76:	f04f 0003 	mov.w	r0, #3
   1bd7a:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1bd7c:	bd08      	pop	{r3, pc}
   1bd7e:	bf00      	nop
   1bd80:	0002f2cb 	.word	0x0002f2cb
   1bd84:	0002f311 	.word	0x0002f311
   1bd88:	000297e6 	.word	0x000297e6

0001bd8c <preempt_ticker_start>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
{
   1bd8c:	b530      	push	{r4, r5, lr}
	struct evt_hdr *evt;
	u32_t preempt_to;
	int ret;

	/* Calc the preempt timeout */
	evt = HDR_LLL2EVT(prepare_param->param);
   1bd8e:	68c3      	ldr	r3, [r0, #12]
   1bd90:	6819      	ldr	r1, [r3, #0]
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1bd92:	4b16      	ldr	r3, [pc, #88]	; (1bdec <preempt_ticker_start+0x60>)
   1bd94:	2200      	movs	r2, #0
{
   1bd96:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1bd98:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1bd9c:	4b14      	ldr	r3, [pc, #80]	; (1bdf0 <preempt_ticker_start+0x64>)
   1bd9e:	9208      	str	r2, [sp, #32]
   1bda0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1bda4:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1bda8:	9201      	str	r2, [sp, #4]
	preempt_to = MAX(evt->ticks_active_to_start,
   1bdaa:	e9d1 5400 	ldrd	r5, r4, [r1]
   1bdae:	688b      	ldr	r3, [r1, #8]
   1bdb0:	42a5      	cmp	r5, r4
   1bdb2:	bf2c      	ite	cs
   1bdb4:	ebc3 0305 	rsbcs	r3, r3, r5
   1bdb8:	ebc3 0304 	rsbcc	r3, r3, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1bdbc:	9300      	str	r3, [sp, #0]
   1bdbe:	6803      	ldr	r3, [r0, #0]
   1bdc0:	4611      	mov	r1, r2
   1bdc2:	4610      	mov	r0, r2
   1bdc4:	f7fc f930 	bl	18028 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1bdc8:	2802      	cmp	r0, #2
   1bdca:	d90c      	bls.n	1bde6 <preempt_ticker_start+0x5a>
   1bdcc:	4a09      	ldr	r2, [pc, #36]	; (1bdf4 <preempt_ticker_start+0x68>)
   1bdce:	490a      	ldr	r1, [pc, #40]	; (1bdf8 <preempt_ticker_start+0x6c>)
   1bdd0:	480a      	ldr	r0, [pc, #40]	; (1bdfc <preempt_ticker_start+0x70>)
   1bdd2:	f240 2316 	movw	r3, #534	; 0x216
   1bdd6:	f007 fa78 	bl	232ca <printk>
   1bdda:	4040      	eors	r0, r0
   1bddc:	f380 8811 	msr	BASEPRI, r0
   1bde0:	f04f 0003 	mov.w	r0, #3
   1bde4:	df02      	svc	2
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   1bde6:	b00b      	add	sp, #44	; 0x2c
   1bde8:	bd30      	pop	{r4, r5, pc}
   1bdea:	bf00      	nop
   1bdec:	0001bd5d 	.word	0x0001bd5d
   1bdf0:	0001bf9d 	.word	0x0001bf9d
   1bdf4:	0002f2cb 	.word	0x0002f2cb
   1bdf8:	0002f330 	.word	0x0002f330
   1bdfc:	000297e6 	.word	0x000297e6

0001be00 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   1be00:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll_prepare_cb_t resume_cb;
	u8_t idx = UINT8_MAX;
	int resume_prio;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1be02:	4d3c      	ldr	r5, [pc, #240]	; (1bef4 <preempt+0xf4>)
{
   1be04:	b08b      	sub	sp, #44	; 0x2c
	struct lll_event *next = ull_prepare_dequeue_get();
   1be06:	f7fd fee9 	bl	19bdc <ull_prepare_dequeue_get>
	u8_t idx = UINT8_MAX;
   1be0a:	23ff      	movs	r3, #255	; 0xff
   1be0c:	f88d 300e 	strb.w	r3, [sp, #14]
	if (!event.curr.abort_cb || !event.curr.param) {
   1be10:	68ab      	ldr	r3, [r5, #8]
   1be12:	b35b      	cbz	r3, 1be6c <preempt+0x6c>
   1be14:	682b      	ldr	r3, [r5, #0]
   1be16:	b34b      	cbz	r3, 1be6c <preempt+0x6c>
	if (!next) {
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
		next = ull_prepare_dequeue_iter(&idx);
   1be18:	f10d 000e 	add.w	r0, sp, #14
   1be1c:	f7fe f820 	bl	19e60 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1be20:	4604      	mov	r4, r0
   1be22:	b318      	cbz	r0, 1be6c <preempt+0x6c>
   1be24:	f890 0020 	ldrb.w	r0, [r0, #32]
   1be28:	f010 0703 	ands.w	r7, r0, #3
   1be2c:	d1f4      	bne.n	1be18 <preempt+0x18>

	if (!next) {
		return;
	}

	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   1be2e:	ab05      	add	r3, sp, #20
   1be30:	9300      	str	r3, [sp, #0]
   1be32:	686e      	ldr	r6, [r5, #4]
   1be34:	682a      	ldr	r2, [r5, #0]
   1be36:	69e1      	ldr	r1, [r4, #28]
   1be38:	68e0      	ldr	r0, [r4, #12]
   1be3a:	ab04      	add	r3, sp, #16
   1be3c:	47b0      	blx	r6
				     event.curr.param,
				     &resume_cb, &resume_prio);
	if (!ret) {
   1be3e:	4606      	mov	r6, r0
   1be40:	b9b0      	cbnz	r0, 1be70 <preempt+0x70>
		/* Let LLL know about the cancelled prepare */
		next->is_aborted = 1;
   1be42:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1be46:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   1be48:	f043 0302 	orr.w	r3, r3, #2
   1be4c:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1be50:	4620      	mov	r0, r4
   1be52:	69a3      	ldr	r3, [r4, #24]
   1be54:	4798      	blx	r3
		LL_ASSERT(ret == -ECANCELED);
	}

preempt_next:
	do {
		next = ull_prepare_dequeue_iter(&idx);
   1be56:	f10d 000e 	add.w	r0, sp, #14
   1be5a:	f7fe f801 	bl	19e60 <ull_prepare_dequeue_iter>
		if (!next) {
   1be5e:	b128      	cbz	r0, 1be6c <preempt+0x6c>
			return;
		}
	} while (next->is_aborted || next->is_resume);
   1be60:	f890 3020 	ldrb.w	r3, [r0, #32]
   1be64:	079b      	lsls	r3, r3, #30
   1be66:	d1f6      	bne.n	1be56 <preempt+0x56>

	preempt_ticker_start(&next->prepare_param);
   1be68:	f7ff ff90 	bl	1bd8c <preempt_ticker_start>
}
   1be6c:	b00b      	add	sp, #44	; 0x2c
   1be6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event.curr.abort_cb(NULL, event.curr.param);
   1be70:	68ab      	ldr	r3, [r5, #8]
   1be72:	6829      	ldr	r1, [r5, #0]
   1be74:	4638      	mov	r0, r7
   1be76:	4798      	blx	r3
	if (ret == -EAGAIN) {
   1be78:	f116 0f0b 	cmn.w	r6, #11
   1be7c:	d133      	bne.n	1bee6 <preempt+0xe6>
		u8_t iter_idx = UINT8_MAX;
   1be7e:	23ff      	movs	r3, #255	; 0xff
   1be80:	f88d 300f 	strb.w	r3, [sp, #15]
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1be84:	f10d 000f 	add.w	r0, sp, #15
   1be88:	f7fd ffea 	bl	19e60 <ull_prepare_dequeue_iter>
		while (iter) {
   1be8c:	b9e0      	cbnz	r0, 1bec8 <preempt+0xc8>
	prepare_param.param = event.curr.param;
   1be8e:	682b      	ldr	r3, [r5, #0]
   1be90:	9309      	str	r3, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1be92:	2301      	movs	r3, #1
   1be94:	9301      	str	r3, [sp, #4]
   1be96:	9b05      	ldr	r3, [sp, #20]
	event.curr.param = NULL;
   1be98:	6028      	str	r0, [r5, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1be9a:	9300      	str	r3, [sp, #0]
   1be9c:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   1bea0:	9b04      	ldr	r3, [sp, #16]
   1bea2:	aa06      	add	r2, sp, #24
   1bea4:	f7fd fe66 	bl	19b74 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   1bea8:	2800      	cmp	r0, #0
   1beaa:	d0d4      	beq.n	1be56 <preempt+0x56>
   1beac:	4a12      	ldr	r2, [pc, #72]	; (1bef8 <preempt+0xf8>)
   1beae:	4913      	ldr	r1, [pc, #76]	; (1befc <preempt+0xfc>)
   1beb0:	f240 235e 	movw	r3, #606	; 0x25e
		LL_ASSERT(ret == -ECANCELED);
   1beb4:	4812      	ldr	r0, [pc, #72]	; (1bf00 <preempt+0x100>)
   1beb6:	f007 fa08 	bl	232ca <printk>
   1beba:	4040      	eors	r0, r0
   1bebc:	f380 8811 	msr	BASEPRI, r0
   1bec0:	f04f 0003 	mov.w	r0, #3
   1bec4:	df02      	svc	2
   1bec6:	e7c6      	b.n	1be56 <preempt+0x56>
			if (!iter->is_aborted &&
   1bec8:	f890 3020 	ldrb.w	r3, [r0, #32]
   1becc:	079a      	lsls	r2, r3, #30
   1bece:	d4d9      	bmi.n	1be84 <preempt+0x84>
			    event.curr.param == iter->prepare_param.param) {
   1bed0:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1bed2:	6829      	ldr	r1, [r5, #0]
   1bed4:	4291      	cmp	r1, r2
   1bed6:	d1d5      	bne.n	1be84 <preempt+0x84>
				iter->is_aborted = 1;
   1bed8:	f043 0302 	orr.w	r3, r3, #2
   1bedc:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   1bee0:	6983      	ldr	r3, [r0, #24]
   1bee2:	4798      	blx	r3
   1bee4:	e7ce      	b.n	1be84 <preempt+0x84>
		LL_ASSERT(ret == -ECANCELED);
   1bee6:	3648      	adds	r6, #72	; 0x48
   1bee8:	d0b5      	beq.n	1be56 <preempt+0x56>
   1beea:	4a03      	ldr	r2, [pc, #12]	; (1bef8 <preempt+0xf8>)
   1beec:	4905      	ldr	r1, [pc, #20]	; (1bf04 <preempt+0x104>)
   1beee:	f44f 7318 	mov.w	r3, #608	; 0x260
   1bef2:	e7df      	b.n	1beb4 <preempt+0xb4>
   1bef4:	20001884 	.word	0x20001884
   1bef8:	0002f2cb 	.word	0x0002f2cb
   1befc:	0002eeba 	.word	0x0002eeba
   1bf00:	000297e6 	.word	0x000297e6
   1bf04:	0002f357 	.word	0x0002f357

0001bf08 <prepare>:
{
   1bf08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bf0c:	b085      	sub	sp, #20
   1bf0e:	4698      	mov	r8, r3
   1bf10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1bf12:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
	u8_t idx = UINT8_MAX;
   1bf16:	23ff      	movs	r3, #255	; 0xff
{
   1bf18:	4606      	mov	r6, r0
   1bf1a:	4689      	mov	r9, r1
   1bf1c:	4614      	mov	r4, r2
	u8_t idx = UINT8_MAX;
   1bf1e:	f88d 300f 	strb.w	r3, [sp, #15]
		p = ull_prepare_dequeue_iter(&idx);
   1bf22:	f10d 000f 	add.w	r0, sp, #15
   1bf26:	f7fd ff9b 	bl	19e60 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1bf2a:	b118      	cbz	r0, 1bf34 <prepare+0x2c>
   1bf2c:	f890 3020 	ldrb.w	r3, [r0, #32]
   1bf30:	079b      	lsls	r3, r3, #30
   1bf32:	d1f6      	bne.n	1bf22 <prepare+0x1a>
	if (event.curr.abort_cb || (p && is_resume)) {
   1bf34:	4b15      	ldr	r3, [pc, #84]	; (1bf8c <prepare+0x84>)
   1bf36:	689a      	ldr	r2, [r3, #8]
   1bf38:	b90a      	cbnz	r2, 1bf3e <prepare+0x36>
   1bf3a:	b1e8      	cbz	r0, 1bf78 <prepare+0x70>
   1bf3c:	b1e7      	cbz	r7, 1bf78 <prepare+0x70>
		ret = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1bf3e:	e9cd 8700 	strd	r8, r7, [sp]
   1bf42:	4623      	mov	r3, r4
   1bf44:	462a      	mov	r2, r5
   1bf46:	4649      	mov	r1, r9
   1bf48:	4630      	mov	r0, r6
   1bf4a:	f7fd fe13 	bl	19b74 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   1bf4e:	b160      	cbz	r0, 1bf6a <prepare+0x62>
   1bf50:	4a0f      	ldr	r2, [pc, #60]	; (1bf90 <prepare+0x88>)
   1bf52:	4910      	ldr	r1, [pc, #64]	; (1bf94 <prepare+0x8c>)
   1bf54:	4810      	ldr	r0, [pc, #64]	; (1bf98 <prepare+0x90>)
   1bf56:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   1bf5a:	f007 f9b6 	bl	232ca <printk>
   1bf5e:	4040      	eors	r0, r0
   1bf60:	f380 8811 	msr	BASEPRI, r0
   1bf64:	f04f 0003 	mov.w	r0, #3
   1bf68:	df02      	svc	2
		if (is_resume) {
   1bf6a:	b917      	cbnz	r7, 1bf72 <prepare+0x6a>
		preempt_ticker_start(prepare_param);
   1bf6c:	4628      	mov	r0, r5
   1bf6e:	f7ff ff0d 	bl	1bd8c <preempt_ticker_start>
		return -EINPROGRESS;
   1bf72:	f06f 0043 	mvn.w	r0, #67	; 0x43
   1bf76:	e006      	b.n	1bf86 <prepare+0x7e>
	event.curr.param = prepare_param->param;
   1bf78:	68ea      	ldr	r2, [r5, #12]
	event.curr.abort_cb = abort_cb;
   1bf7a:	f8c3 9008 	str.w	r9, [r3, #8]
	event.curr.is_abort_cb = is_abort_cb;
   1bf7e:	e9c3 2600 	strd	r2, r6, [r3]
	err = prepare_cb(prepare_param);
   1bf82:	4628      	mov	r0, r5
   1bf84:	47a0      	blx	r4
}
   1bf86:	b005      	add	sp, #20
   1bf88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bf8c:	20001884 	.word	0x20001884
   1bf90:	0002f2cb 	.word	0x0002f2cb
   1bf94:	0002eeba 	.word	0x0002eeba
   1bf98:	000297e6 	.word	0x000297e6

0001bf9c <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1bf9c:	2200      	movs	r2, #0
{
   1bf9e:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1bfa0:	4611      	mov	r1, r2
   1bfa2:	4b09      	ldr	r3, [pc, #36]	; (1bfc8 <preempt_ticker_cb+0x2c>)
   1bfa4:	2001      	movs	r0, #1
   1bfa6:	f7fb faa5 	bl	174f4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1bfaa:	b160      	cbz	r0, 1bfc6 <preempt_ticker_cb+0x2a>
   1bfac:	4a07      	ldr	r2, [pc, #28]	; (1bfcc <preempt_ticker_cb+0x30>)
   1bfae:	4908      	ldr	r1, [pc, #32]	; (1bfd0 <preempt_ticker_cb+0x34>)
   1bfb0:	4808      	ldr	r0, [pc, #32]	; (1bfd4 <preempt_ticker_cb+0x38>)
   1bfb2:	f44f 7309 	mov.w	r3, #548	; 0x224
   1bfb6:	f007 f988 	bl	232ca <printk>
   1bfba:	4040      	eors	r0, r0
   1bfbc:	f380 8811 	msr	BASEPRI, r0
   1bfc0:	f04f 0003 	mov.w	r0, #3
   1bfc4:	df02      	svc	2
}
   1bfc6:	bd08      	pop	{r3, pc}
   1bfc8:	2000721c 	.word	0x2000721c
   1bfcc:	0002f2cb 	.word	0x0002f2cb
   1bfd0:	0002eeba 	.word	0x0002eeba
   1bfd4:	000297e6 	.word	0x000297e6

0001bfd8 <lll_init>:
{
   1bfd8:	b510      	push	{r4, lr}
   1bfda:	4815      	ldr	r0, [pc, #84]	; (1c030 <lll_init+0x58>)
   1bfdc:	f003 fbb2 	bl	1f744 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   1bfe0:	4b14      	ldr	r3, [pc, #80]	; (1c034 <lll_init+0x5c>)
   1bfe2:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1bfe4:	b300      	cbz	r0, 1c028 <lll_init+0x50>
	event.curr.abort_cb = NULL;
   1bfe6:	4b14      	ldr	r3, [pc, #80]	; (1c038 <lll_init+0x60>)
   1bfe8:	2200      	movs	r2, #0
   1bfea:	609a      	str	r2, [r3, #8]
	err = lll_clock_init();
   1bfec:	f000 f920 	bl	1c230 <lll_clock_init>
	if (err) {
   1bff0:	4604      	mov	r4, r0
   1bff2:	b9b8      	cbnz	r0, 1c024 <lll_init+0x4c>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1bff4:	4602      	mov	r2, r0
   1bff6:	4601      	mov	r1, r0
   1bff8:	2001      	movs	r0, #1
   1bffa:	f7e8 fb9d 	bl	4738 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1bffe:	4622      	mov	r2, r4
   1c000:	4621      	mov	r1, r4
   1c002:	200b      	movs	r0, #11
   1c004:	f7e8 fb98 	bl	4738 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1c008:	4622      	mov	r2, r4
   1c00a:	4621      	mov	r1, r4
   1c00c:	2018      	movs	r0, #24
   1c00e:	f7e8 fb93 	bl	4738 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1c012:	2001      	movs	r0, #1
   1c014:	f7e8 fb5e 	bl	46d4 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1c018:	200b      	movs	r0, #11
   1c01a:	f7e8 fb5b 	bl	46d4 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1c01e:	2018      	movs	r0, #24
   1c020:	f7e8 fb58 	bl	46d4 <arch_irq_enable>
}
   1c024:	4620      	mov	r0, r4
   1c026:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1c028:	f06f 0412 	mvn.w	r4, #18
   1c02c:	e7fa      	b.n	1c024 <lll_init+0x4c>
   1c02e:	bf00      	nop
   1c030:	0002ea8c 	.word	0x0002ea8c
   1c034:	20001880 	.word	0x20001880
   1c038:	20001884 	.word	0x20001884

0001c03c <lll_entropy_get>:
	return entropy_get_entropy_isr(dev_entropy, rand, len, 0);
   1c03c:	4b06      	ldr	r3, [pc, #24]	; (1c058 <lll_entropy_get+0x1c>)
{
   1c03e:	4602      	mov	r2, r0
	return entropy_get_entropy_isr(dev_entropy, rand, len, 0);
   1c040:	6818      	ldr	r0, [r3, #0]
					  u32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
   1c042:	6843      	ldr	r3, [r0, #4]
{
   1c044:	b510      	push	{r4, lr}
   1c046:	685c      	ldr	r4, [r3, #4]
   1c048:	b11c      	cbz	r4, 1c052 <lll_entropy_get+0x16>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1c04a:	2300      	movs	r3, #0
   1c04c:	47a0      	blx	r4
}
   1c04e:	b2c0      	uxtb	r0, r0
   1c050:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   1c052:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1c056:	e7fa      	b.n	1c04e <lll_entropy_get+0x12>
   1c058:	20001880 	.word	0x20001880

0001c05c <lll_resume>:
{
   1c05c:	b507      	push	{r0, r1, r2, lr}
		      next->prio, &next->prepare_param, next->is_resume);
   1c05e:	f890 3020 	ldrb.w	r3, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1c062:	f003 0301 	and.w	r3, r3, #1
   1c066:	e9cd 0300 	strd	r0, r3, [sp]
   1c06a:	69c3      	ldr	r3, [r0, #28]
   1c06c:	6902      	ldr	r2, [r0, #16]
   1c06e:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   1c072:	f7ff ff49 	bl	1bf08 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1c076:	b168      	cbz	r0, 1c094 <lll_resume+0x38>
   1c078:	3044      	adds	r0, #68	; 0x44
   1c07a:	d00b      	beq.n	1c094 <lll_resume+0x38>
   1c07c:	4a07      	ldr	r2, [pc, #28]	; (1c09c <lll_resume+0x40>)
   1c07e:	4908      	ldr	r1, [pc, #32]	; (1c0a0 <lll_resume+0x44>)
   1c080:	4808      	ldr	r0, [pc, #32]	; (1c0a4 <lll_resume+0x48>)
   1c082:	23d2      	movs	r3, #210	; 0xd2
   1c084:	f007 f921 	bl	232ca <printk>
   1c088:	4040      	eors	r0, r0
   1c08a:	f380 8811 	msr	BASEPRI, r0
   1c08e:	f04f 0003 	mov.w	r0, #3
   1c092:	df02      	svc	2
}
   1c094:	b003      	add	sp, #12
   1c096:	f85d fb04 	ldr.w	pc, [sp], #4
   1c09a:	bf00      	nop
   1c09c:	0002f2cb 	.word	0x0002f2cb
   1c0a0:	0002f362 	.word	0x0002f362
   1c0a4:	000297e6 	.word	0x000297e6

0001c0a8 <lll_disable>:
{
   1c0a8:	b513      	push	{r0, r1, r4, lr}
   1c0aa:	4b1b      	ldr	r3, [pc, #108]	; (1c118 <lll_disable+0x70>)
	if (!param || (param == event.curr.param)) {
   1c0ac:	4604      	mov	r4, r0
   1c0ae:	b110      	cbz	r0, 1c0b6 <lll_disable+0xe>
   1c0b0:	681a      	ldr	r2, [r3, #0]
   1c0b2:	4282      	cmp	r2, r0
   1c0b4:	d105      	bne.n	1c0c2 <lll_disable+0x1a>
		if (event.curr.abort_cb && event.curr.param) {
   1c0b6:	689a      	ldr	r2, [r3, #8]
   1c0b8:	b16a      	cbz	r2, 1c0d6 <lll_disable+0x2e>
   1c0ba:	6819      	ldr	r1, [r3, #0]
   1c0bc:	b159      	cbz	r1, 1c0d6 <lll_disable+0x2e>
			event.curr.abort_cb(NULL, event.curr.param);
   1c0be:	2000      	movs	r0, #0
   1c0c0:	4790      	blx	r2
		u8_t idx = UINT8_MAX;
   1c0c2:	23ff      	movs	r3, #255	; 0xff
   1c0c4:	f88d 3007 	strb.w	r3, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   1c0c8:	f10d 0007 	add.w	r0, sp, #7
   1c0cc:	f7fd fec8 	bl	19e60 <ull_prepare_dequeue_iter>
		while (next) {
   1c0d0:	b980      	cbnz	r0, 1c0f4 <lll_disable+0x4c>
}
   1c0d2:	b002      	add	sp, #8
   1c0d4:	bd10      	pop	{r4, pc}
			LL_ASSERT(!param);
   1c0d6:	2c00      	cmp	r4, #0
   1c0d8:	d0f3      	beq.n	1c0c2 <lll_disable+0x1a>
   1c0da:	4a10      	ldr	r2, [pc, #64]	; (1c11c <lll_disable+0x74>)
   1c0dc:	4910      	ldr	r1, [pc, #64]	; (1c120 <lll_disable+0x78>)
   1c0de:	4811      	ldr	r0, [pc, #68]	; (1c124 <lll_disable+0x7c>)
   1c0e0:	23dc      	movs	r3, #220	; 0xdc
   1c0e2:	f007 f8f2 	bl	232ca <printk>
   1c0e6:	4040      	eors	r0, r0
   1c0e8:	f380 8811 	msr	BASEPRI, r0
   1c0ec:	f04f 0003 	mov.w	r0, #3
   1c0f0:	df02      	svc	2
   1c0f2:	e7e6      	b.n	1c0c2 <lll_disable+0x1a>
			if (!next->is_aborted &&
   1c0f4:	f890 3020 	ldrb.w	r3, [r0, #32]
   1c0f8:	079b      	lsls	r3, r3, #30
   1c0fa:	d4e5      	bmi.n	1c0c8 <lll_disable+0x20>
   1c0fc:	68c1      	ldr	r1, [r0, #12]
   1c0fe:	b10c      	cbz	r4, 1c104 <lll_disable+0x5c>
			    (!param || (param == next->prepare_param.param))) {
   1c100:	428c      	cmp	r4, r1
   1c102:	d1e1      	bne.n	1c0c8 <lll_disable+0x20>
				next->is_aborted = 1;
   1c104:	f890 3020 	ldrb.w	r3, [r0, #32]
   1c108:	f043 0302 	orr.w	r3, r3, #2
   1c10c:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1c110:	6983      	ldr	r3, [r0, #24]
   1c112:	4798      	blx	r3
   1c114:	e7d8      	b.n	1c0c8 <lll_disable+0x20>
   1c116:	bf00      	nop
   1c118:	20001884 	.word	0x20001884
   1c11c:	0002f2cb 	.word	0x0002f2cb
   1c120:	0002f375 	.word	0x0002f375
   1c124:	000297e6 	.word	0x000297e6

0001c128 <lll_done>:
{
   1c128:	b510      	push	{r4, lr}
   1c12a:	4604      	mov	r4, r0
	struct lll_event *next = ull_prepare_dequeue_get();
   1c12c:	f7fd fd56 	bl	19bdc <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1c130:	b17c      	cbz	r4, 1c152 <lll_done+0x2a>
   1c132:	b960      	cbnz	r0, 1c14e <lll_done+0x26>
   1c134:	4a1b      	ldr	r2, [pc, #108]	; (1c1a4 <lll_done+0x7c>)
   1c136:	491c      	ldr	r1, [pc, #112]	; (1c1a8 <lll_done+0x80>)
   1c138:	481c      	ldr	r0, [pc, #112]	; (1c1ac <lll_done+0x84>)
   1c13a:	f240 130b 	movw	r3, #267	; 0x10b
   1c13e:	f007 f8c4 	bl	232ca <printk>
   1c142:	4040      	eors	r0, r0
   1c144:	f380 8811 	msr	BASEPRI, r0
   1c148:	f04f 0003 	mov.w	r0, #3
   1c14c:	df02      	svc	2
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1c14e:	6820      	ldr	r0, [r4, #0]
   1c150:	e015      	b.n	1c17e <lll_done+0x56>
		LL_ASSERT(event.curr.abort_cb);
   1c152:	4c17      	ldr	r4, [pc, #92]	; (1c1b0 <lll_done+0x88>)
   1c154:	68a3      	ldr	r3, [r4, #8]
   1c156:	b963      	cbnz	r3, 1c172 <lll_done+0x4a>
   1c158:	4a12      	ldr	r2, [pc, #72]	; (1c1a4 <lll_done+0x7c>)
   1c15a:	4916      	ldr	r1, [pc, #88]	; (1c1b4 <lll_done+0x8c>)
   1c15c:	4813      	ldr	r0, [pc, #76]	; (1c1ac <lll_done+0x84>)
   1c15e:	f44f 7388 	mov.w	r3, #272	; 0x110
   1c162:	f007 f8b2 	bl	232ca <printk>
   1c166:	4040      	eors	r0, r0
   1c168:	f380 8811 	msr	BASEPRI, r0
   1c16c:	f04f 0003 	mov.w	r0, #3
   1c170:	df02      	svc	2
		param = event.curr.param;
   1c172:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   1c174:	2300      	movs	r3, #0
   1c176:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1c178:	6023      	str	r3, [r4, #0]
		if (param) {
   1c17a:	b108      	cbz	r0, 1c180 <lll_done+0x58>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1c17c:	6800      	ldr	r0, [r0, #0]
   1c17e:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1c180:	f7fd fe9c 	bl	19ebc <ull_event_done>
	LL_ASSERT(evdone);
   1c184:	b960      	cbnz	r0, 1c1a0 <lll_done+0x78>
   1c186:	4a07      	ldr	r2, [pc, #28]	; (1c1a4 <lll_done+0x7c>)
   1c188:	490b      	ldr	r1, [pc, #44]	; (1c1b8 <lll_done+0x90>)
   1c18a:	4808      	ldr	r0, [pc, #32]	; (1c1ac <lll_done+0x84>)
   1c18c:	f44f 7394 	mov.w	r3, #296	; 0x128
   1c190:	f007 f89b 	bl	232ca <printk>
   1c194:	4040      	eors	r0, r0
   1c196:	f380 8811 	msr	BASEPRI, r0
   1c19a:	f04f 0003 	mov.w	r0, #3
   1c19e:	df02      	svc	2
}
   1c1a0:	2000      	movs	r0, #0
   1c1a2:	bd10      	pop	{r4, pc}
   1c1a4:	0002f2cb 	.word	0x0002f2cb
   1c1a8:	0002f37c 	.word	0x0002f37c
   1c1ac:	000297e6 	.word	0x000297e6
   1c1b0:	20001884 	.word	0x20001884
   1c1b4:	0002f38b 	.word	0x0002f38b
   1c1b8:	0002f39f 	.word	0x0002f39f

0001c1bc <lll_is_done>:
	return !event.curr.abort_cb;
   1c1bc:	4b02      	ldr	r3, [pc, #8]	; (1c1c8 <lll_is_done+0xc>)
   1c1be:	6898      	ldr	r0, [r3, #8]
}
   1c1c0:	fab0 f080 	clz	r0, r0
   1c1c4:	0940      	lsrs	r0, r0, #5
   1c1c6:	4770      	bx	lr
   1c1c8:	20001884 	.word	0x20001884

0001c1cc <lll_chan_set>:
	switch (chan) {
   1c1cc:	2826      	cmp	r0, #38	; 0x26
{
   1c1ce:	b510      	push	{r4, lr}
   1c1d0:	4604      	mov	r4, r0
	switch (chan) {
   1c1d2:	d00b      	beq.n	1c1ec <lll_chan_set+0x20>
   1c1d4:	2827      	cmp	r0, #39	; 0x27
   1c1d6:	d00b      	beq.n	1c1f0 <lll_chan_set+0x24>
   1c1d8:	2825      	cmp	r0, #37	; 0x25
   1c1da:	d10b      	bne.n	1c1f4 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1c1dc:	2002      	movs	r0, #2
		radio_freq_chan_set(26);
   1c1de:	f001 fbc7 	bl	1d970 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1c1e2:	4620      	mov	r0, r4
}
   1c1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1c1e8:	f001 bbc8 	b.w	1d97c <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1c1ec:	201a      	movs	r0, #26
   1c1ee:	e7f6      	b.n	1c1de <lll_chan_set+0x12>
		radio_freq_chan_set(80);
   1c1f0:	2050      	movs	r0, #80	; 0x50
   1c1f2:	e7f4      	b.n	1c1de <lll_chan_set+0x12>
		if (chan < 11) {
   1c1f4:	280a      	cmp	r0, #10
   1c1f6:	d802      	bhi.n	1c1fe <lll_chan_set+0x32>
			radio_freq_chan_set(4 + (chan * 2U));
   1c1f8:	3002      	adds	r0, #2
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1c1fa:	0040      	lsls	r0, r0, #1
   1c1fc:	e7ef      	b.n	1c1de <lll_chan_set+0x12>
		} else if (chan < 40) {
   1c1fe:	2827      	cmp	r0, #39	; 0x27
   1c200:	d801      	bhi.n	1c206 <lll_chan_set+0x3a>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1c202:	3003      	adds	r0, #3
   1c204:	e7f9      	b.n	1c1fa <lll_chan_set+0x2e>
			LL_ASSERT(0);
   1c206:	4a07      	ldr	r2, [pc, #28]	; (1c224 <lll_chan_set+0x58>)
   1c208:	4907      	ldr	r1, [pc, #28]	; (1c228 <lll_chan_set+0x5c>)
   1c20a:	4808      	ldr	r0, [pc, #32]	; (1c22c <lll_chan_set+0x60>)
   1c20c:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   1c210:	f007 f85b 	bl	232ca <printk>
   1c214:	4040      	eors	r0, r0
   1c216:	f380 8811 	msr	BASEPRI, r0
   1c21a:	f04f 0003 	mov.w	r0, #3
   1c21e:	df02      	svc	2
   1c220:	e7df      	b.n	1c1e2 <lll_chan_set+0x16>
   1c222:	bf00      	nop
   1c224:	0002f2cb 	.word	0x0002f2cb
   1c228:	0002d2c6 	.word	0x0002d2c6
   1c22c:	000297e6 	.word	0x000297e6

0001c230 <lll_clock_init>:
			void *user_data);

static struct device *dev;

int lll_clock_init(void)
{
   1c230:	b510      	push	{r4, lr}
   1c232:	4807      	ldr	r0, [pc, #28]	; (1c250 <lll_clock_init+0x20>)
   1c234:	f003 fa86 	bl	1f744 <z_impl_device_get_binding>
	int err;

	dev = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
   1c238:	4a06      	ldr	r2, [pc, #24]	; (1c254 <lll_clock_init+0x24>)
   1c23a:	6010      	str	r0, [r2, #0]
	if (!dev) {
   1c23c:	b128      	cbz	r0, 1c24a <lll_clock_init+0x1a>
   1c23e:	6843      	ldr	r3, [r0, #4]
	}

	err = clock_control_on(dev, CLOCK_CONTROL_NRF_SUBSYS_LF);

	return err;
}
   1c240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c244:	681b      	ldr	r3, [r3, #0]
   1c246:	2101      	movs	r1, #1
   1c248:	4718      	bx	r3
   1c24a:	f06f 0012 	mvn.w	r0, #18
   1c24e:	bd10      	pop	{r4, pc}
   1c250:	00029d53 	.word	0x00029d53
   1c254:	20001898 	.word	0x20001898

0001c258 <lll_clock_wait>:

int lll_clock_wait(void)
{
   1c258:	b530      	push	{r4, r5, lr}
	static bool done;

	if (done) {
   1c25a:	4b12      	ldr	r3, [pc, #72]	; (1c2a4 <lll_clock_wait+0x4c>)
   1c25c:	7819      	ldrb	r1, [r3, #0]
{
   1c25e:	b08b      	sub	sp, #44	; 0x2c
	if (done) {
   1c260:	b9d1      	cbnz	r1, 1c298 <lll_clock_wait+0x40>
		return 0;
	}
	done = true;
   1c262:	2501      	movs	r5, #1
   1c264:	701d      	strb	r5, [r3, #0]

	struct k_sem sem_clock_wait;
	struct clock_control_async_data async_data = {
   1c266:	ac04      	add	r4, sp, #16
   1c268:	4b0f      	ldr	r3, [pc, #60]	; (1c2a8 <lll_clock_wait+0x50>)
   1c26a:	9101      	str	r1, [sp, #4]
   1c26c:	9302      	str	r3, [sp, #8]
   1c26e:	9403      	str	r4, [sp, #12]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c270:	462a      	mov	r2, r5
   1c272:	4620      	mov	r0, r4
   1c274:	f00c f877 	bl	28366 <z_impl_k_sem_init>
	};
	int err;

	k_sem_init(&sem_clock_wait, 0, 1);

	err = clock_control_async_on(dev, CLOCK_CONTROL_NRF_SUBSYS_LF,
   1c278:	4b0c      	ldr	r3, [pc, #48]	; (1c2ac <lll_clock_wait+0x54>)
   1c27a:	6818      	ldr	r0, [r3, #0]
					 struct clock_control_async_data *data)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	if (!api->async_on) {
   1c27c:	6843      	ldr	r3, [r0, #4]
   1c27e:	689b      	ldr	r3, [r3, #8]
   1c280:	b163      	cbz	r3, 1c29c <lll_clock_wait+0x44>
		return -ENOTSUP;
	}

	return api->async_on(dev, sys, data);
   1c282:	aa01      	add	r2, sp, #4
   1c284:	4629      	mov	r1, r5
   1c286:	4798      	blx	r3
				     &async_data);
	if (err) {
   1c288:	b920      	cbnz	r0, 1c294 <lll_clock_wait+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   1c28a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   1c28e:	4620      	mov	r0, r4
   1c290:	f005 fc46 	bl	21b20 <z_impl_k_sem_take>
	}

	err = k_sem_take(&sem_clock_wait, K_MSEC(LFCLOCK_TIMEOUT_MS));

	return err;
}
   1c294:	b00b      	add	sp, #44	; 0x2c
   1c296:	bd30      	pop	{r4, r5, pc}
		return 0;
   1c298:	2000      	movs	r0, #0
   1c29a:	e7fb      	b.n	1c294 <lll_clock_wait+0x3c>
		return -ENOTSUP;
   1c29c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1c2a0:	e7f8      	b.n	1c294 <lll_clock_wait+0x3c>
   1c2a2:	bf00      	nop
   1c2a4:	2000231e 	.word	0x2000231e
   1c2a8:	00027927 	.word	0x00027927
   1c2ac:	20001898 	.word	0x20001898

0001c2b0 <lll_hfclock_on>:
int lll_hfclock_on(void)
{
	int err;

	/* turn on radio clock in non-blocking mode. */
	err = clock_control_on(dev, CLOCK_CONTROL_NRF_SUBSYS_HF);
   1c2b0:	4b02      	ldr	r3, [pc, #8]	; (1c2bc <lll_hfclock_on+0xc>)
   1c2b2:	6818      	ldr	r0, [r3, #0]
	return api->on(dev, sys);
   1c2b4:	6843      	ldr	r3, [r0, #4]
   1c2b6:	2100      	movs	r1, #0
   1c2b8:	681b      	ldr	r3, [r3, #0]
   1c2ba:	4718      	bx	r3
   1c2bc:	20001898 	.word	0x20001898

0001c2c0 <lll_hfclock_off>:
int lll_hfclock_off(void)
{
	int err;

	/* turn off radio clock in non-blocking mode. */
	err = clock_control_off(dev, CLOCK_CONTROL_NRF_SUBSYS_HF);
   1c2c0:	4b02      	ldr	r3, [pc, #8]	; (1c2cc <lll_hfclock_off+0xc>)
   1c2c2:	6818      	ldr	r0, [r3, #0]
	return api->off(dev, sys);
   1c2c4:	6843      	ldr	r3, [r0, #4]
   1c2c6:	2100      	movs	r1, #0
   1c2c8:	685b      	ldr	r3, [r3, #4]
   1c2ca:	4718      	bx	r3
   1c2cc:	20001898 	.word	0x20001898

0001c2d0 <isr_cleanup>:

	isr_cleanup(param);
}

static void isr_cleanup(void *param)
{
   1c2d0:	b508      	push	{r3, lr}
   1c2d2:	4601      	mov	r1, r0
	int err;

	radio_isr_set(isr_race, param);
   1c2d4:	4810      	ldr	r0, [pc, #64]	; (1c318 <isr_cleanup+0x48>)
   1c2d6:	f001 faf1 	bl	1d8bc <radio_isr_set>
	if (!radio_is_idle()) {
   1c2da:	f001 fbef 	bl	1dabc <radio_is_idle>
   1c2de:	b908      	cbnz	r0, 1c2e4 <isr_cleanup+0x14>
		radio_disable();
   1c2e0:	f001 fbba 	bl	1da58 <radio_disable>
	}

	radio_tmr_stop();
   1c2e4:	f001 fd32 	bl	1dd4c <radio_tmr_stop>

	err = lll_hfclock_off();
   1c2e8:	f7ff ffea 	bl	1c2c0 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   1c2ec:	b170      	cbz	r0, 1c30c <isr_cleanup+0x3c>
   1c2ee:	3010      	adds	r0, #16
   1c2f0:	d00c      	beq.n	1c30c <isr_cleanup+0x3c>
   1c2f2:	4a0a      	ldr	r2, [pc, #40]	; (1c31c <isr_cleanup+0x4c>)
   1c2f4:	490a      	ldr	r1, [pc, #40]	; (1c320 <isr_cleanup+0x50>)
   1c2f6:	480b      	ldr	r0, [pc, #44]	; (1c324 <isr_cleanup+0x54>)
   1c2f8:	f240 2349 	movw	r3, #585	; 0x249
   1c2fc:	f006 ffe5 	bl	232ca <printk>
   1c300:	4040      	eors	r0, r0
   1c302:	f380 8811 	msr	BASEPRI, r0
   1c306:	f04f 0003 	mov.w	r0, #3
   1c30a:	df02      	svc	2

	lll_done(NULL);
}
   1c30c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1c310:	2000      	movs	r0, #0
   1c312:	f7ff bf09 	b.w	1c128 <lll_done>
   1c316:	bf00      	nop
   1c318:	0002792d 	.word	0x0002792d
   1c31c:	0002f3c4 	.word	0x0002f3c4
   1c320:	0002f40e 	.word	0x0002f40e
   1c324:	000297e6 	.word	0x000297e6

0001c328 <isr_tx>:
{
   1c328:	b538      	push	{r3, r4, r5, lr}
   1c32a:	4604      	mov	r4, r0
	radio_status_reset();
   1c32c:	f001 fba6 	bl	1da7c <radio_status_reset>
	radio_tmr_status_reset();
   1c330:	f001 fc54 	bl	1dbdc <radio_tmr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1c334:	2096      	movs	r0, #150	; 0x96
   1c336:	f001 fc61 	bl	1dbfc <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1c33a:	2300      	movs	r3, #0
   1c33c:	461a      	mov	r2, r3
   1c33e:	4619      	mov	r1, r3
   1c340:	4618      	mov	r0, r3
   1c342:	f001 fbef 	bl	1db24 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   1c346:	f001 fbdd 	bl	1db04 <radio_pkt_scratch_get>
   1c34a:	f001 fb6d 	bl	1da28 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1c34e:	f001 fba1 	bl	1da94 <radio_is_ready>
   1c352:	b160      	cbz	r0, 1c36e <isr_tx+0x46>
   1c354:	4a12      	ldr	r2, [pc, #72]	; (1c3a0 <isr_tx+0x78>)
   1c356:	4913      	ldr	r1, [pc, #76]	; (1c3a4 <isr_tx+0x7c>)
   1c358:	4813      	ldr	r0, [pc, #76]	; (1c3a8 <isr_tx+0x80>)
   1c35a:	f240 1357 	movw	r3, #343	; 0x157
   1c35e:	f006 ffb4 	bl	232ca <printk>
   1c362:	4040      	eors	r0, r0
   1c364:	f380 8811 	msr	BASEPRI, r0
   1c368:	f04f 0003 	mov.w	r0, #3
   1c36c:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   1c36e:	4621      	mov	r1, r4
   1c370:	480e      	ldr	r0, [pc, #56]	; (1c3ac <isr_tx+0x84>)
   1c372:	f001 faa3 	bl	1d8bc <radio_isr_set>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1c376:	f001 fd3b 	bl	1ddf0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1c37a:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1c37c:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1c37e:	4608      	mov	r0, r1
   1c380:	f00b fc96 	bl	27cb0 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1c384:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1c386:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1c388:	4608      	mov	r0, r1
   1c38a:	f00b fc8d 	bl	27ca8 <radio_tx_chain_delay_get>
   1c38e:	442c      	add	r4, r5
   1c390:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1c392:	1a20      	subs	r0, r4, r0
   1c394:	f001 fce6 	bl	1dd64 <radio_tmr_hcto_configure>
}
   1c398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   1c39c:	f001 bd1a 	b.w	1ddd4 <radio_tmr_end_capture>
   1c3a0:	0002f3c4 	.word	0x0002f3c4
   1c3a4:	0002f421 	.word	0x0002f421
   1c3a8:	000297e6 	.word	0x000297e6
   1c3ac:	0001c475 	.word	0x0001c475

0001c3b0 <is_abort_cb>:
	if (next != curr) {
   1c3b0:	4282      	cmp	r2, r0
{
   1c3b2:	b508      	push	{r3, lr}
	if (next != curr) {
   1c3b4:	d01c      	beq.n	1c3f0 <is_abort_cb+0x40>
		} else if (lll->is_hdcd) {
   1c3b6:	7b12      	ldrb	r2, [r2, #12]
   1c3b8:	07d2      	lsls	r2, r2, #31
   1c3ba:	d526      	bpl.n	1c40a <is_abort_cb+0x5a>
			*resume_cb = resume_prepare_cb;
   1c3bc:	4a14      	ldr	r2, [pc, #80]	; (1c410 <is_abort_cb+0x60>)
   1c3be:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1c3c0:	9b02      	ldr	r3, [sp, #8]
   1c3c2:	2200      	movs	r2, #0
   1c3c4:	601a      	str	r2, [r3, #0]
			err = lll_hfclock_on();
   1c3c6:	f7ff ff73 	bl	1c2b0 <lll_hfclock_on>
			LL_ASSERT(!err || err == -EINPROGRESS);
   1c3ca:	b170      	cbz	r0, 1c3ea <is_abort_cb+0x3a>
   1c3cc:	3044      	adds	r0, #68	; 0x44
   1c3ce:	d00c      	beq.n	1c3ea <is_abort_cb+0x3a>
   1c3d0:	4a10      	ldr	r2, [pc, #64]	; (1c414 <is_abort_cb+0x64>)
   1c3d2:	4911      	ldr	r1, [pc, #68]	; (1c418 <is_abort_cb+0x68>)
   1c3d4:	4811      	ldr	r0, [pc, #68]	; (1c41c <is_abort_cb+0x6c>)
   1c3d6:	f240 1313 	movw	r3, #275	; 0x113
   1c3da:	f006 ff76 	bl	232ca <printk>
   1c3de:	4040      	eors	r0, r0
   1c3e0:	f380 8811 	msr	BASEPRI, r0
   1c3e4:	f04f 0003 	mov.w	r0, #3
   1c3e8:	df02      	svc	2
   1c3ea:	f06f 000a 	mvn.w	r0, #10
   1c3ee:	e00b      	b.n	1c408 <is_abort_cb+0x58>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1c3f0:	7b93      	ldrb	r3, [r2, #14]
   1c3f2:	2127      	movs	r1, #39	; 0x27
   1c3f4:	fb01 2203 	mla	r2, r1, r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1c3f8:	7c13      	ldrb	r3, [r2, #16]
   1c3fa:	f003 030f 	and.w	r3, r3, #15
   1c3fe:	2b01      	cmp	r3, #1
		return 0;
   1c400:	bf14      	ite	ne
   1c402:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   1c406:	2000      	moveq	r0, #0
}
   1c408:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   1c40a:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1c40e:	e7fb      	b.n	1c408 <is_abort_cb+0x58>
   1c410:	0002799f 	.word	0x0002799f
   1c414:	0002f3c4 	.word	0x0002f3c4
   1c418:	0002f433 	.word	0x0002f433
   1c41c:	000297e6 	.word	0x000297e6

0001c420 <abort_cb>:
{
   1c420:	b510      	push	{r4, lr}
   1c422:	460c      	mov	r4, r1
	if (!prepare_param) {
   1c424:	b930      	cbnz	r0, 1c434 <abort_cb+0x14>
		radio_isr_set(isr_abort, param);
   1c426:	480f      	ldr	r0, [pc, #60]	; (1c464 <abort_cb+0x44>)
   1c428:	f001 fa48 	bl	1d8bc <radio_isr_set>
}
   1c42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1c430:	f001 bb12 	b.w	1da58 <radio_disable>
	err = lll_hfclock_off();
   1c434:	f7ff ff44 	bl	1c2c0 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   1c438:	b170      	cbz	r0, 1c458 <abort_cb+0x38>
   1c43a:	3010      	adds	r0, #16
   1c43c:	d00c      	beq.n	1c458 <abort_cb+0x38>
   1c43e:	4a0a      	ldr	r2, [pc, #40]	; (1c468 <abort_cb+0x48>)
   1c440:	490a      	ldr	r1, [pc, #40]	; (1c46c <abort_cb+0x4c>)
   1c442:	480b      	ldr	r0, [pc, #44]	; (1c470 <abort_cb+0x50>)
   1c444:	f240 1339 	movw	r3, #313	; 0x139
   1c448:	f006 ff3f 	bl	232ca <printk>
   1c44c:	4040      	eors	r0, r0
   1c44e:	f380 8811 	msr	BASEPRI, r0
   1c452:	f04f 0003 	mov.w	r0, #3
   1c456:	df02      	svc	2
	lll_done(param);
   1c458:	4620      	mov	r0, r4
}
   1c45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1c45e:	f7ff be63 	b.w	1c128 <lll_done>
   1c462:	bf00      	nop
   1c464:	00027931 	.word	0x00027931
   1c468:	0002f3c4 	.word	0x0002f3c4
   1c46c:	0002f40e 	.word	0x0002f40e
   1c470:	000297e6 	.word	0x000297e6

0001c474 <isr_rx>:
{
   1c474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c478:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   1c47a:	f001 fb15 	bl	1daa8 <radio_is_done>
	if (trx_done) {
   1c47e:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
   1c482:	d06a      	beq.n	1c55a <isr_rx+0xe6>
		crc_ok = radio_crc_is_valid();
   1c484:	f001 fb30 	bl	1dae8 <radio_crc_is_valid>
   1c488:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
   1c48a:	f001 fb97 	bl	1dbbc <radio_filter_has_match>
   1c48e:	b2c4      	uxtb	r4, r0
		devmatch_id = radio_filter_match_get();
   1c490:	f001 fb9e 	bl	1dbd0 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1c494:	f001 fcc4 	bl	1de20 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   1c498:	f001 fcb0 	bl	1ddfc <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   1c49c:	f001 fb72 	bl	1db84 <radio_rssi_is_ready>
	radio_status_reset();
   1c4a0:	f001 faec 	bl	1da7c <radio_status_reset>
	radio_tmr_status_reset();
   1c4a4:	f001 fb9a 	bl	1dbdc <radio_tmr_status_reset>
	radio_filter_status_reset();
   1c4a8:	f001 fb80 	bl	1dbac <radio_filter_status_reset>
	radio_ar_status_reset();
   1c4ac:	f001 fcac 	bl	1de08 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1c4b0:	f001 fb60 	bl	1db74 <radio_rssi_status_reset>
	if (!trx_done) {
   1c4b4:	2e00      	cmp	r6, #0
   1c4b6:	f000 80e0 	beq.w	1c67a <isr_rx+0x206>
	if (crc_ok) {
   1c4ba:	2f00      	cmp	r7, #0
   1c4bc:	f000 80dd 	beq.w	1c67a <isr_rx+0x206>
				    FILTER_IDX_NONE;
#else
	u8_t rl_idx = FILTER_IDX_NONE;
#endif /* CONFIG_BT_CTLR_PRIVACY */

	pdu_rx = (void *)radio_pkt_scratch_get();
   1c4c0:	f001 fb20 	bl	1db04 <radio_pkt_scratch_get>
   1c4c4:	7baa      	ldrb	r2, [r5, #14]
   1c4c6:	2310      	movs	r3, #16
   1c4c8:	2727      	movs	r7, #39	; 0x27
   1c4ca:	fb17 3702 	smlabb	r7, r7, r2, r3
	pdu_adv = lll_adv_data_curr_get(lll);

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1c4ce:	7802      	ldrb	r2, [r0, #0]
   1c4d0:	f002 030f 	and.w	r3, r2, #15
   1c4d4:	2b03      	cmp	r3, #3
	pdu_rx = (void *)radio_pkt_scratch_get();
   1c4d6:	4606      	mov	r6, r0
   1c4d8:	eb05 0807 	add.w	r8, r5, r7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1c4dc:	d140      	bne.n	1c560 <isr_rx+0xec>
   1c4de:	7843      	ldrb	r3, [r0, #1]
   1c4e0:	2b0c      	cmp	r3, #12
   1c4e2:	f040 80ca 	bne.w	1c67a <isr_rx+0x206>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   1c4e6:	5deb      	ldrb	r3, [r5, r7]
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1c4e8:	f003 010f 	and.w	r1, r3, #15
   1c4ec:	2901      	cmp	r1, #1
   1c4ee:	f000 80c4 	beq.w	1c67a <isr_rx+0x206>
						rl_idx)) ||
		(((lll->filter_policy & 0x01) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
		isr_rx_sr_adva_check(adv, sr);
#else
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   1c4f2:	7b69      	ldrb	r1, [r5, #13]
   1c4f4:	07c9      	lsls	r1, r1, #31
   1c4f6:	d502      	bpl.n	1c4fe <isr_rx+0x8a>
   1c4f8:	2c00      	cmp	r4, #0
   1c4fa:	f000 80be 	beq.w	1c67a <isr_rx+0x206>
}

static inline bool isr_rx_sr_adva_check(struct pdu_adv *adv,
					struct pdu_adv *sr)
{
	return (adv->tx_addr == sr->rx_addr) &&
   1c4fe:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1c502:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1c506:	f040 80b8 	bne.w	1c67a <isr_rx+0x206>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1c50a:	2206      	movs	r2, #6
   1c50c:	f106 0108 	add.w	r1, r6, #8
   1c510:	f108 0002 	add.w	r0, r8, #2
   1c514:	f008 fdac 	bl	25070 <memcmp>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   1c518:	bb10      	cbnz	r0, 1c560 <isr_rx+0xec>
		radio_isr_set(isr_done, lll);
   1c51a:	485c      	ldr	r0, [pc, #368]	; (1c68c <isr_rx+0x218>)
   1c51c:	4629      	mov	r1, r5
   1c51e:	f001 f9cd 	bl	1d8bc <radio_isr_set>
		radio_switch_complete_and_disable();
   1c522:	f001 fb09 	bl	1db38 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1c526:	f895 005e 	ldrb.w	r0, [r5, #94]	; 0x5e
   1c52a:	2327      	movs	r3, #39	; 0x27
   1c52c:	fb03 5000 	mla	r0, r3, r0, r5
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1c530:	3060      	adds	r0, #96	; 0x60
   1c532:	f001 fa7f 	bl	1da34 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1c536:	f001 faad 	bl	1da94 <radio_is_ready>
   1c53a:	b160      	cbz	r0, 1c556 <isr_rx+0xe2>
   1c53c:	4a54      	ldr	r2, [pc, #336]	; (1c690 <isr_rx+0x21c>)
   1c53e:	4955      	ldr	r1, [pc, #340]	; (1c694 <isr_rx+0x220>)
   1c540:	4855      	ldr	r0, [pc, #340]	; (1c698 <isr_rx+0x224>)
   1c542:	f240 239b 	movw	r3, #667	; 0x29b
   1c546:	f006 fec0 	bl	232ca <printk>
   1c54a:	4040      	eors	r0, r0
   1c54c:	f380 8811 	msr	BASEPRI, r0
   1c550:	f04f 0003 	mov.w	r0, #3
   1c554:	df02      	svc	2
}
   1c556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   1c55a:	4634      	mov	r4, r6
   1c55c:	4637      	mov	r7, r6
   1c55e:	e79f      	b.n	1c4a0 <isr_rx+0x2c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1c560:	7833      	ldrb	r3, [r6, #0]
   1c562:	f003 030f 	and.w	r3, r3, #15
   1c566:	2b05      	cmp	r3, #5
   1c568:	f040 8087 	bne.w	1c67a <isr_rx+0x206>
   1c56c:	7873      	ldrb	r3, [r6, #1]
   1c56e:	2b22      	cmp	r3, #34	; 0x22
   1c570:	f040 8083 	bne.w	1c67a <isr_rx+0x206>
static inline bool isr_rx_ci_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *ci, u8_t devmatch_ok,
				   u8_t *rl_idx)
{
	/* LL 4.3.2: filter policy shall be ignored for directed adv */
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1c574:	5deb      	ldrb	r3, [r5, r7]
   1c576:	f003 030f 	and.w	r3, r3, #15
   1c57a:	2b01      	cmp	r3, #1
   1c57c:	d171      	bne.n	1c662 <isr_rx+0x1ee>
						      ci->connect_ind.init_addr,
						      rl_idx) &&
#else
		return (1) &&
#endif
		       isr_rx_ci_adva_check(adv, ci) &&
   1c57e:	4631      	mov	r1, r6
   1c580:	4640      	mov	r0, r8
   1c582:	f00b f9e8 	bl	27956 <isr_rx_ci_adva_check>
   1c586:	2800      	cmp	r0, #0
   1c588:	d077      	beq.n	1c67a <isr_rx+0x206>
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (rl_idx != FILTER_IDX_NONE) {
		return rl_idx == lll->rl_idx;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	return (adv->rx_addr == ci->tx_addr) &&
   1c58a:	7833      	ldrb	r3, [r6, #0]
   1c58c:	5dea      	ldrb	r2, [r5, r7]
   1c58e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1c592:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1c596:	d162      	bne.n	1c65e <isr_rx+0x1ea>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   1c598:	2206      	movs	r2, #6
   1c59a:	1cb1      	adds	r1, r6, #2
   1c59c:	f108 0008 	add.w	r0, r8, #8
   1c5a0:	f008 fd66 	bl	25070 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   1c5a4:	fab0 f380 	clz	r3, r0
   1c5a8:	095b      	lsrs	r3, r3, #5
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1c5aa:	2b00      	cmp	r3, #0
   1c5ac:	d065      	beq.n	1c67a <isr_rx+0x206>
				   &rl_idx) &&
   1c5ae:	68ab      	ldr	r3, [r5, #8]
   1c5b0:	2b00      	cmp	r3, #0
   1c5b2:	d062      	beq.n	1c67a <isr_rx+0x206>
			rx = ull_pdu_rx_alloc_peek(3);
   1c5b4:	2003      	movs	r0, #3
   1c5b6:	f7fd fa97 	bl	19ae8 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   1c5ba:	2800      	cmp	r0, #0
   1c5bc:	d05d      	beq.n	1c67a <isr_rx+0x206>
		radio_isr_set(isr_abort, lll);
   1c5be:	4837      	ldr	r0, [pc, #220]	; (1c69c <isr_rx+0x228>)
   1c5c0:	4629      	mov	r1, r5
   1c5c2:	f001 f97b 	bl	1d8bc <radio_isr_set>
		radio_disable();
   1c5c6:	f001 fa47 	bl	1da58 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1c5ca:	f001 fa63 	bl	1da94 <radio_is_ready>
   1c5ce:	b160      	cbz	r0, 1c5ea <isr_rx+0x176>
   1c5d0:	4a2f      	ldr	r2, [pc, #188]	; (1c690 <isr_rx+0x21c>)
   1c5d2:	4930      	ldr	r1, [pc, #192]	; (1c694 <isr_rx+0x220>)
   1c5d4:	4830      	ldr	r0, [pc, #192]	; (1c698 <isr_rx+0x224>)
   1c5d6:	f240 23d7 	movw	r3, #727	; 0x2d7
   1c5da:	f006 fe76 	bl	232ca <printk>
   1c5de:	4040      	eors	r0, r0
   1c5e0:	f380 8811 	msr	BASEPRI, r0
   1c5e4:	f04f 0003 	mov.w	r0, #3
   1c5e8:	df02      	svc	2
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   1c5ea:	792b      	ldrb	r3, [r5, #4]

	hdr->is_stop = 1U;
   1c5ec:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   1c5f0:	07db      	lsls	r3, r3, #31
   1c5f2:	712a      	strb	r2, [r5, #4]
   1c5f4:	d50c      	bpl.n	1c610 <isr_rx+0x19c>
   1c5f6:	4a26      	ldr	r2, [pc, #152]	; (1c690 <isr_rx+0x21c>)
   1c5f8:	4929      	ldr	r1, [pc, #164]	; (1c6a0 <isr_rx+0x22c>)
   1c5fa:	4827      	ldr	r0, [pc, #156]	; (1c698 <isr_rx+0x224>)
   1c5fc:	f240 23e5 	movw	r3, #741	; 0x2e5
   1c600:	f006 fe63 	bl	232ca <printk>
   1c604:	4040      	eors	r0, r0
   1c606:	f380 8811 	msr	BASEPRI, r0
   1c60a:	f04f 0003 	mov.w	r0, #3
   1c60e:	df02      	svc	2
		rx = ull_pdu_rx_alloc();
   1c610:	f7fd fa82 	bl	19b18 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1c614:	2308      	movs	r3, #8
		rx = ull_pdu_rx_alloc();
   1c616:	4604      	mov	r4, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1c618:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   1c61a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c61e:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1c620:	2224      	movs	r2, #36	; 0x24
   1c622:	4631      	mov	r1, r6
   1c624:	3020      	adds	r0, #32
   1c626:	f008 fd33 	bl	25090 <memcpy>
		ftr->param = lll;
   1c62a:	60a5      	str	r5, [r4, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1c62c:	f001 fb88 	bl	1dd40 <radio_tmr_start_get>
   1c630:	6120      	str	r0, [r4, #16]
		ftr->us_radio_end = radio_tmr_end_get() -
   1c632:	f001 fbd7 	bl	1dde4 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   1c636:	2100      	movs	r1, #0
		ftr->us_radio_end = radio_tmr_end_get() -
   1c638:	4605      	mov	r5, r0
				    radio_tx_chain_delay_get(0, 0);
   1c63a:	4608      	mov	r0, r1
   1c63c:	f00b fb34 	bl	27ca8 <radio_tx_chain_delay_get>
		ftr->us_radio_rdy = radio_rx_ready_delay_get(0, 0);
   1c640:	2100      	movs	r1, #0
		ftr->us_radio_end = radio_tmr_end_get() -
   1c642:	1a2d      	subs	r5, r5, r0
   1c644:	6165      	str	r5, [r4, #20]
		ftr->us_radio_rdy = radio_rx_ready_delay_get(0, 0);
   1c646:	4608      	mov	r0, r1
   1c648:	f00b fb30 	bl	27cac <radio_rx_ready_delay_get>
		ull_rx_put(rx->hdr.link, rx);
   1c64c:	4621      	mov	r1, r4
		ftr->us_radio_rdy = radio_rx_ready_delay_get(0, 0);
   1c64e:	61a0      	str	r0, [r4, #24]
		ull_rx_put(rx->hdr.link, rx);
   1c650:	6820      	ldr	r0, [r4, #0]
   1c652:	f7fd fa77 	bl	19b44 <ull_rx_put>
}
   1c656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ull_rx_sched();
   1c65a:	f7fd ba83 	b.w	19b64 <ull_rx_sched>
	return (adv->rx_addr == ci->tx_addr) &&
   1c65e:	2300      	movs	r3, #0
   1c660:	e7a3      	b.n	1c5aa <isr_rx+0x136>
	return (((lll->filter_policy & 0x02) == 0) ||
   1c662:	7b6b      	ldrb	r3, [r5, #13]
		(devmatch_ok)) &&
   1c664:	079a      	lsls	r2, r3, #30
   1c666:	d500      	bpl.n	1c66a <isr_rx+0x1f6>
	return (((lll->filter_policy & 0x02) == 0) ||
   1c668:	b124      	cbz	r4, 1c674 <isr_rx+0x200>
	       isr_rx_ci_adva_check(adv, ci);
   1c66a:	4631      	mov	r1, r6
   1c66c:	4640      	mov	r0, r8
   1c66e:	f00b f972 	bl	27956 <isr_rx_ci_adva_check>
   1c672:	4604      	mov	r4, r0
		(devmatch_ok)) &&
   1c674:	f004 0301 	and.w	r3, r4, #1
   1c678:	e797      	b.n	1c5aa <isr_rx+0x136>
	radio_isr_set(isr_done, param);
   1c67a:	4629      	mov	r1, r5
   1c67c:	4803      	ldr	r0, [pc, #12]	; (1c68c <isr_rx+0x218>)
   1c67e:	f001 f91d 	bl	1d8bc <radio_isr_set>
}
   1c682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	radio_disable();
   1c686:	f001 b9e7 	b.w	1da58 <radio_disable>
   1c68a:	bf00      	nop
   1c68c:	000279c7 	.word	0x000279c7
   1c690:	0002f3c4 	.word	0x0002f3c4
   1c694:	0002f421 	.word	0x0002f421
   1c698:	000297e6 	.word	0x000297e6
   1c69c:	00027931 	.word	0x00027931
   1c6a0:	0002eeba 	.word	0x0002eeba

0001c6a4 <chan_prepare>:
{
   1c6a4:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   1c6a6:	7b82      	ldrb	r2, [r0, #14]
	if (first != pdu->last) {
   1c6a8:	7bc3      	ldrb	r3, [r0, #15]
   1c6aa:	429a      	cmp	r2, r3
   1c6ac:	4604      	mov	r4, r0
   1c6ae:	d005      	beq.n	1c6bc <chan_prepare+0x18>
		first += 1U;
   1c6b0:	1c53      	adds	r3, r2, #1
   1c6b2:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   1c6b4:	2b02      	cmp	r3, #2
			first = 0U;
   1c6b6:	bf08      	it	eq
   1c6b8:	2300      	moveq	r3, #0
		pdu->first = first;
   1c6ba:	7383      	strb	r3, [r0, #14]
	return (void *)pdu->pdu[first];
   1c6bc:	2202      	movs	r2, #2
   1c6be:	2527      	movs	r5, #39	; 0x27
   1c6c0:	fb15 2503 	smlabb	r5, r5, r3, r2
	first = pdu->first;
   1c6c4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	if (first != pdu->last) {
   1c6c8:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
	return (void *)pdu->pdu[first];
   1c6cc:	f104 060e 	add.w	r6, r4, #14
	if (first != pdu->last) {
   1c6d0:	429a      	cmp	r2, r3
	return (void *)pdu->pdu[first];
   1c6d2:	eb06 0005 	add.w	r0, r6, r5
	if (first != pdu->last) {
   1c6d6:	d006      	beq.n	1c6e6 <chan_prepare+0x42>
		first += 1U;
   1c6d8:	3301      	adds	r3, #1
   1c6da:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   1c6dc:	2b02      	cmp	r3, #2
			first = 0U;
   1c6de:	bf08      	it	eq
   1c6e0:	2300      	moveq	r3, #0
		pdu->first = first;
   1c6e2:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	radio_pkt_tx_set(pdu);
   1c6e6:	f001 f9a5 	bl	1da34 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1c6ea:	5d73      	ldrb	r3, [r6, r5]
   1c6ec:	f003 030f 	and.w	r3, r3, #15
   1c6f0:	2b02      	cmp	r3, #2
		radio_isr_set(isr_tx, lll);
   1c6f2:	4621      	mov	r1, r4
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1c6f4:	d030      	beq.n	1c758 <chan_prepare+0xb4>
		radio_isr_set(isr_tx, lll);
   1c6f6:	481b      	ldr	r0, [pc, #108]	; (1c764 <chan_prepare+0xc0>)
   1c6f8:	f001 f8e0 	bl	1d8bc <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1c6fc:	2096      	movs	r0, #150	; 0x96
   1c6fe:	f001 fa7d 	bl	1dbfc <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1c702:	2000      	movs	r0, #0
   1c704:	f001 fa02 	bl	1db0c <radio_switch_complete_and_rx>
	chan = find_lsb_set(lll->chan_map_curr);
   1c708:	7b23      	ldrb	r3, [r4, #12]
   1c70a:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1c70e:	2b00      	cmp	r3, #0
   1c710:	fa93 f0a3 	rbit	r0, r3
   1c714:	fab0 f080 	clz	r0, r0
   1c718:	bf08      	it	eq
   1c71a:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   1c71e:	1c45      	adds	r5, r0, #1
   1c720:	d10c      	bne.n	1c73c <chan_prepare+0x98>
   1c722:	4a11      	ldr	r2, [pc, #68]	; (1c768 <chan_prepare+0xc4>)
   1c724:	4911      	ldr	r1, [pc, #68]	; (1c76c <chan_prepare+0xc8>)
   1c726:	4812      	ldr	r0, [pc, #72]	; (1c770 <chan_prepare+0xcc>)
   1c728:	f240 2379 	movw	r3, #633	; 0x279
   1c72c:	f006 fdcd 	bl	232ca <printk>
   1c730:	4040      	eors	r0, r0
   1c732:	f380 8811 	msr	BASEPRI, r0
   1c736:	f04f 0003 	mov.w	r0, #3
   1c73a:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1c73c:	7b23      	ldrb	r3, [r4, #12]
   1c73e:	f3c3 1202 	ubfx	r2, r3, #4, #3
   1c742:	1e51      	subs	r1, r2, #1
   1c744:	400a      	ands	r2, r1
   1c746:	f362 1306 	bfi	r3, r2, #4, #3
   1c74a:	7323      	strb	r3, [r4, #12]
	lll_chan_set(36 + chan);
   1c74c:	f105 0024 	add.w	r0, r5, #36	; 0x24
}
   1c750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lll_chan_set(36 + chan);
   1c754:	f7ff bd3a 	b.w	1c1cc <lll_chan_set>
		radio_isr_set(isr_done, lll);
   1c758:	4806      	ldr	r0, [pc, #24]	; (1c774 <chan_prepare+0xd0>)
   1c75a:	f001 f8af 	bl	1d8bc <radio_isr_set>
		radio_switch_complete_and_disable();
   1c75e:	f001 f9eb 	bl	1db38 <radio_switch_complete_and_disable>
   1c762:	e7d1      	b.n	1c708 <chan_prepare+0x64>
   1c764:	0001c329 	.word	0x0001c329
   1c768:	0002f3c4 	.word	0x0002f3c4
   1c76c:	0002eef4 	.word	0x0002eef4
   1c770:	000297e6 	.word	0x000297e6
   1c774:	000279c7 	.word	0x000279c7

0001c778 <prepare_cb>:
{
   1c778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct lll_adv *lll = prepare_param->param;
   1c77a:	68c4      	ldr	r4, [r0, #12]
	u32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1c77c:	4b36      	ldr	r3, [pc, #216]	; (1c858 <prepare_cb+0xe0>)

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   1c77e:	7925      	ldrb	r5, [r4, #4]
   1c780:	9301      	str	r3, [sp, #4]
	if (lll_is_stop(lll)) {
   1c782:	f015 0501 	ands.w	r5, r5, #1
{
   1c786:	4606      	mov	r6, r0
	if (lll_is_stop(lll)) {
   1c788:	d016      	beq.n	1c7b8 <prepare_cb+0x40>
		err = lll_hfclock_off();
   1c78a:	f7ff fd99 	bl	1c2c0 <lll_hfclock_off>
		LL_ASSERT(!err || err == -EBUSY);
   1c78e:	b168      	cbz	r0, 1c7ac <prepare_cb+0x34>
   1c790:	3010      	adds	r0, #16
   1c792:	d00b      	beq.n	1c7ac <prepare_cb+0x34>
   1c794:	4a31      	ldr	r2, [pc, #196]	; (1c85c <prepare_cb+0xe4>)
   1c796:	4932      	ldr	r1, [pc, #200]	; (1c860 <prepare_cb+0xe8>)
   1c798:	4832      	ldr	r0, [pc, #200]	; (1c864 <prepare_cb+0xec>)
   1c79a:	238b      	movs	r3, #139	; 0x8b
   1c79c:	f006 fd95 	bl	232ca <printk>
   1c7a0:	4040      	eors	r0, r0
   1c7a2:	f380 8811 	msr	BASEPRI, r0
   1c7a6:	f04f 0003 	mov.w	r0, #3
   1c7aa:	df02      	svc	2
		lll_done(NULL);
   1c7ac:	2000      	movs	r0, #0
   1c7ae:	f7ff fcbb 	bl	1c128 <lll_done>
}
   1c7b2:	2000      	movs	r0, #0
   1c7b4:	b003      	add	sp, #12
   1c7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	radio_reset();
   1c7b8:	f001 f8a0 	bl	1d8fc <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1c7bc:	4628      	mov	r0, r5
   1c7be:	f001 f8d1 	bl	1d964 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1c7c2:	4629      	mov	r1, r5
   1c7c4:	4628      	mov	r0, r5
   1c7c6:	f001 f8bd 	bl	1d944 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   1c7ca:	462a      	mov	r2, r5
   1c7cc:	2125      	movs	r1, #37	; 0x25
   1c7ce:	2008      	movs	r0, #8
   1c7d0:	f001 f8fe 	bl	1d9d0 <radio_pkt_configure>
	radio_aa_set((u8_t *)&aa);
   1c7d4:	a801      	add	r0, sp, #4
   1c7d6:	f001 f8e3 	bl	1d9a0 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1c7da:	4923      	ldr	r1, [pc, #140]	; (1c868 <prepare_cb+0xf0>)
   1c7dc:	f240 605b 	movw	r0, #1627	; 0x65b
   1c7e0:	f001 f976 	bl	1dad0 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1c7e4:	7b23      	ldrb	r3, [r4, #12]
   1c7e6:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1c7ea:	f362 1306 	bfi	r3, r2, #4, #3
   1c7ee:	7323      	strb	r3, [r4, #12]
	chan_prepare(lll);
   1c7f0:	4620      	mov	r0, r4
   1c7f2:	f7ff ff57 	bl	1c6a4 <chan_prepare>
	evt = HDR_LLL2EVT(lll);
   1c7f6:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   1c7f8:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1c7fa:	4638      	mov	r0, r7
   1c7fc:	f00b f872 	bl	278e4 <lll_evt_offset_get>
   1c800:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   1c802:	6872      	ldr	r2, [r6, #4]
   1c804:	f105 0109 	add.w	r1, r5, #9
   1c808:	2001      	movs	r0, #1
   1c80a:	f001 fa03 	bl	1dc14 <radio_tmr_start>
	radio_tmr_end_capture();
   1c80e:	f001 fae1 	bl	1ddd4 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1c812:	4620      	mov	r0, r4
   1c814:	f7fd fe12 	bl	1a43c <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   1c818:	1c81      	adds	r1, r0, #2
   1c81a:	462a      	mov	r2, r5
   1c81c:	b2c9      	uxtb	r1, r1
   1c81e:	4638      	mov	r0, r7
   1c820:	f00b f86e 	bl	27900 <lll_preempt_calc>
   1c824:	b130      	cbz	r0, 1c834 <prepare_cb+0xbc>
		radio_isr_set(isr_abort, lll);
   1c826:	4811      	ldr	r0, [pc, #68]	; (1c86c <prepare_cb+0xf4>)
   1c828:	4621      	mov	r1, r4
   1c82a:	f001 f847 	bl	1d8bc <radio_isr_set>
		radio_disable();
   1c82e:	f001 f913 	bl	1da58 <radio_disable>
   1c832:	e7be      	b.n	1c7b2 <prepare_cb+0x3a>
		ret = lll_prepare_done(lll);
   1c834:	4620      	mov	r0, r4
   1c836:	f00b f853 	bl	278e0 <lll_prepare_done>
		LL_ASSERT(!ret);
   1c83a:	2800      	cmp	r0, #0
   1c83c:	d0b9      	beq.n	1c7b2 <prepare_cb+0x3a>
   1c83e:	4a07      	ldr	r2, [pc, #28]	; (1c85c <prepare_cb+0xe4>)
   1c840:	490b      	ldr	r1, [pc, #44]	; (1c870 <prepare_cb+0xf8>)
   1c842:	4808      	ldr	r0, [pc, #32]	; (1c864 <prepare_cb+0xec>)
   1c844:	23e9      	movs	r3, #233	; 0xe9
   1c846:	f006 fd40 	bl	232ca <printk>
   1c84a:	4040      	eors	r0, r0
   1c84c:	f380 8811 	msr	BASEPRI, r0
   1c850:	f04f 0003 	mov.w	r0, #3
   1c854:	df02      	svc	2
   1c856:	e7ac      	b.n	1c7b2 <prepare_cb+0x3a>
   1c858:	8e89bed6 	.word	0x8e89bed6
   1c85c:	0002f3c4 	.word	0x0002f3c4
   1c860:	0002f40e 	.word	0x0002f40e
   1c864:	000297e6 	.word	0x000297e6
   1c868:	00555555 	.word	0x00555555
   1c86c:	00027931 	.word	0x00027931
   1c870:	0002eeba 	.word	0x0002eeba

0001c874 <lll_adv_prepare>:
{
   1c874:	b513      	push	{r0, r1, r4, lr}
   1c876:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1c878:	f7ff fd1a 	bl	1c2b0 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c87c:	b168      	cbz	r0, 1c89a <lll_adv_prepare+0x26>
   1c87e:	3044      	adds	r0, #68	; 0x44
   1c880:	d00b      	beq.n	1c89a <lll_adv_prepare+0x26>
   1c882:	4a12      	ldr	r2, [pc, #72]	; (1c8cc <lll_adv_prepare+0x58>)
   1c884:	4912      	ldr	r1, [pc, #72]	; (1c8d0 <lll_adv_prepare+0x5c>)
   1c886:	4813      	ldr	r0, [pc, #76]	; (1c8d4 <lll_adv_prepare+0x60>)
   1c888:	236e      	movs	r3, #110	; 0x6e
   1c88a:	f006 fd1e 	bl	232ca <printk>
   1c88e:	4040      	eors	r0, r0
   1c890:	f380 8811 	msr	BASEPRI, r0
   1c894:	f04f 0003 	mov.w	r0, #3
   1c898:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
   1c89a:	4a0f      	ldr	r2, [pc, #60]	; (1c8d8 <lll_adv_prepare+0x64>)
   1c89c:	490f      	ldr	r1, [pc, #60]	; (1c8dc <lll_adv_prepare+0x68>)
   1c89e:	4810      	ldr	r0, [pc, #64]	; (1c8e0 <lll_adv_prepare+0x6c>)
   1c8a0:	9400      	str	r4, [sp, #0]
   1c8a2:	2300      	movs	r3, #0
   1c8a4:	f00b f813 	bl	278ce <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c8a8:	b168      	cbz	r0, 1c8c6 <lll_adv_prepare+0x52>
   1c8aa:	3044      	adds	r0, #68	; 0x44
   1c8ac:	d00b      	beq.n	1c8c6 <lll_adv_prepare+0x52>
   1c8ae:	4a07      	ldr	r2, [pc, #28]	; (1c8cc <lll_adv_prepare+0x58>)
   1c8b0:	4907      	ldr	r1, [pc, #28]	; (1c8d0 <lll_adv_prepare+0x5c>)
   1c8b2:	4808      	ldr	r0, [pc, #32]	; (1c8d4 <lll_adv_prepare+0x60>)
   1c8b4:	2371      	movs	r3, #113	; 0x71
   1c8b6:	f006 fd08 	bl	232ca <printk>
   1c8ba:	4040      	eors	r0, r0
   1c8bc:	f380 8811 	msr	BASEPRI, r0
   1c8c0:	f04f 0003 	mov.w	r0, #3
   1c8c4:	df02      	svc	2
}
   1c8c6:	b002      	add	sp, #8
   1c8c8:	bd10      	pop	{r4, pc}
   1c8ca:	bf00      	nop
   1c8cc:	0002f3c4 	.word	0x0002f3c4
   1c8d0:	0002f433 	.word	0x0002f433
   1c8d4:	000297e6 	.word	0x000297e6
   1c8d8:	0001c779 	.word	0x0001c779
   1c8dc:	0001c421 	.word	0x0001c421
   1c8e0:	0001c3b1 	.word	0x0001c3b1

0001c8e4 <ticker_stop_cb>:
	lll_done(param);
}

static void ticker_stop_cb(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			   void *param)
{
   1c8e4:	b508      	push	{r3, lr}
	radio_isr_set(isr_cleanup, param);
   1c8e6:	4619      	mov	r1, r3
   1c8e8:	4803      	ldr	r0, [pc, #12]	; (1c8f8 <ticker_stop_cb+0x14>)
   1c8ea:	f000 ffe7 	bl	1d8bc <radio_isr_set>
	radio_disable();
}
   1c8ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   1c8f2:	f001 b8b1 	b.w	1da58 <radio_disable>
   1c8f6:	bf00      	nop
   1c8f8:	0001ccc9 	.word	0x0001ccc9

0001c8fc <prepare_cb>:
{
   1c8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_scan *lll = prepare_param->param;
   1c8fe:	68c4      	ldr	r4, [r0, #12]
	u32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1c900:	4b59      	ldr	r3, [pc, #356]	; (1ca68 <prepare_cb+0x16c>)
   1c902:	7925      	ldrb	r5, [r4, #4]
{
   1c904:	b08d      	sub	sp, #52	; 0x34
	if (lll_is_stop(lll)) {
   1c906:	f015 0501 	ands.w	r5, r5, #1
{
   1c90a:	4606      	mov	r6, r0
	u32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1c90c:	930b      	str	r3, [sp, #44]	; 0x2c
	if (lll_is_stop(lll)) {
   1c90e:	d016      	beq.n	1c93e <prepare_cb+0x42>
		err = lll_hfclock_off();
   1c910:	f7ff fcd6 	bl	1c2c0 <lll_hfclock_off>
		LL_ASSERT(!err || err == -EBUSY);
   1c914:	b168      	cbz	r0, 1c932 <prepare_cb+0x36>
   1c916:	3010      	adds	r0, #16
   1c918:	d00b      	beq.n	1c932 <prepare_cb+0x36>
   1c91a:	4a54      	ldr	r2, [pc, #336]	; (1ca6c <prepare_cb+0x170>)
   1c91c:	4954      	ldr	r1, [pc, #336]	; (1ca70 <prepare_cb+0x174>)
   1c91e:	4855      	ldr	r0, [pc, #340]	; (1ca74 <prepare_cb+0x178>)
   1c920:	238b      	movs	r3, #139	; 0x8b
   1c922:	f006 fcd2 	bl	232ca <printk>
   1c926:	4040      	eors	r0, r0
   1c928:	f380 8811 	msr	BASEPRI, r0
   1c92c:	f04f 0003 	mov.w	r0, #3
   1c930:	df02      	svc	2
		lll_done(NULL);
   1c932:	2000      	movs	r0, #0
   1c934:	f7ff fbf8 	bl	1c128 <lll_done>
}
   1c938:	2000      	movs	r0, #0
   1c93a:	b00d      	add	sp, #52	; 0x34
   1c93c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	radio_reset();
   1c93e:	f000 ffdd 	bl	1d8fc <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1c942:	4628      	mov	r0, r5
   1c944:	f001 f80e 	bl	1d964 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1c948:	4629      	mov	r1, r5
   1c94a:	4628      	mov	r0, r5
   1c94c:	f000 fffa 	bl	1d944 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   1c950:	462a      	mov	r2, r5
   1c952:	2125      	movs	r1, #37	; 0x25
   1c954:	2008      	movs	r0, #8
   1c956:	f001 f83b 	bl	1d9d0 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c95a:	2001      	movs	r0, #1
   1c95c:	f7fd f8c4 	bl	19ae8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1c960:	4605      	mov	r5, r0
   1c962:	b958      	cbnz	r0, 1c97c <prepare_cb+0x80>
   1c964:	4a41      	ldr	r2, [pc, #260]	; (1ca6c <prepare_cb+0x170>)
   1c966:	4944      	ldr	r1, [pc, #272]	; (1ca78 <prepare_cb+0x17c>)
   1c968:	4842      	ldr	r0, [pc, #264]	; (1ca74 <prepare_cb+0x178>)
   1c96a:	23a4      	movs	r3, #164	; 0xa4
   1c96c:	f006 fcad 	bl	232ca <printk>
   1c970:	4040      	eors	r0, r0
   1c972:	f380 8811 	msr	BASEPRI, r0
   1c976:	f04f 0003 	mov.w	r0, #3
   1c97a:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1c97c:	f105 0020 	add.w	r0, r5, #32
   1c980:	f001 f852 	bl	1da28 <radio_pkt_rx_set>
	radio_aa_set((u8_t *)&aa);
   1c984:	a80b      	add	r0, sp, #44	; 0x2c
   1c986:	f001 f80b 	bl	1d9a0 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1c98a:	493c      	ldr	r1, [pc, #240]	; (1ca7c <prepare_cb+0x180>)
   1c98c:	f240 605b 	movw	r0, #1627	; 0x65b
   1c990:	f001 f89e 	bl	1dad0 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1c994:	7a20      	ldrb	r0, [r4, #8]
   1c996:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1c99a:	3025      	adds	r0, #37	; 0x25
   1c99c:	f7ff fc16 	bl	1c1cc <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1c9a0:	4621      	mov	r1, r4
   1c9a2:	4837      	ldr	r0, [pc, #220]	; (1ca80 <prepare_cb+0x184>)
   1c9a4:	f000 ff8a 	bl	1d8bc <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1c9a8:	2096      	movs	r0, #150	; 0x96
   1c9aa:	f001 f927 	bl	1dbfc <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1c9ae:	2300      	movs	r3, #0
   1c9b0:	461a      	mov	r2, r3
   1c9b2:	4619      	mov	r1, r3
   1c9b4:	4618      	mov	r0, r3
   1c9b6:	f001 f8b5 	bl	1db24 <radio_switch_complete_and_tx>
	evt = HDR_LLL2EVT(lll);
   1c9ba:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   1c9bc:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1c9be:	4638      	mov	r0, r7
   1c9c0:	f00a ff90 	bl	278e4 <lll_evt_offset_get>
   1c9c4:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1c9c6:	6872      	ldr	r2, [r6, #4]
   1c9c8:	f105 0109 	add.w	r1, r5, #9
   1c9cc:	2000      	movs	r0, #0
   1c9ce:	f001 f921 	bl	1dc14 <radio_tmr_start>
	radio_tmr_end_capture();
   1c9d2:	f001 f9ff 	bl	1ddd4 <radio_tmr_end_capture>
	radio_rssi_measure();
   1c9d6:	f001 f8bd 	bl	1db54 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1c9da:	4620      	mov	r0, r4
   1c9dc:	f7fd fe80 	bl	1a6e0 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_SCAN_BASE +
   1c9e0:	1d01      	adds	r1, r0, #4
   1c9e2:	b2c9      	uxtb	r1, r1
   1c9e4:	462a      	mov	r2, r5
   1c9e6:	4638      	mov	r0, r7
   1c9e8:	f00a ff8a 	bl	27900 <lll_preempt_calc>
   1c9ec:	4601      	mov	r1, r0
   1c9ee:	b130      	cbz	r0, 1c9fe <prepare_cb+0x102>
		radio_isr_set(isr_abort, lll);
   1c9f0:	4824      	ldr	r0, [pc, #144]	; (1ca84 <prepare_cb+0x188>)
   1c9f2:	4621      	mov	r1, r4
   1c9f4:	f000 ff62 	bl	1d8bc <radio_isr_set>
		radio_disable();
   1c9f8:	f001 f82e 	bl	1da58 <radio_disable>
   1c9fc:	e79c      	b.n	1c938 <prepare_cb+0x3c>
		if (lll->ticks_window) {
   1c9fe:	69a3      	ldr	r3, [r4, #24]
   1ca00:	b1f3      	cbz	r3, 1ca40 <prepare_cb+0x144>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1ca02:	22fe      	movs	r2, #254	; 0xfe
   1ca04:	9208      	str	r2, [sp, #32]
   1ca06:	4a20      	ldr	r2, [pc, #128]	; (1ca88 <prepare_cb+0x18c>)
   1ca08:	e9cd 4206 	strd	r4, r2, [sp, #24]
   1ca0c:	4a1f      	ldr	r2, [pc, #124]	; (1ca8c <prepare_cb+0x190>)
   1ca0e:	e9cd 3000 	strd	r3, r0, [sp]
   1ca12:	e9cd 0204 	strd	r0, r2, [sp, #16]
   1ca16:	462b      	mov	r3, r5
   1ca18:	e9cd 0002 	strd	r0, r0, [sp, #8]
   1ca1c:	2203      	movs	r2, #3
   1ca1e:	f7fb fb03 	bl	18028 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1ca22:	f030 0302 	bics.w	r3, r0, #2
   1ca26:	d00b      	beq.n	1ca40 <prepare_cb+0x144>
   1ca28:	4a10      	ldr	r2, [pc, #64]	; (1ca6c <prepare_cb+0x170>)
   1ca2a:	4919      	ldr	r1, [pc, #100]	; (1ca90 <prepare_cb+0x194>)
   1ca2c:	4811      	ldr	r0, [pc, #68]	; (1ca74 <prepare_cb+0x178>)
   1ca2e:	23ff      	movs	r3, #255	; 0xff
   1ca30:	f006 fc4b 	bl	232ca <printk>
   1ca34:	4040      	eors	r0, r0
   1ca36:	f380 8811 	msr	BASEPRI, r0
   1ca3a:	f04f 0003 	mov.w	r0, #3
   1ca3e:	df02      	svc	2
		ret = lll_prepare_done(lll);
   1ca40:	4620      	mov	r0, r4
   1ca42:	f00a ff4d 	bl	278e0 <lll_prepare_done>
		LL_ASSERT(!ret);
   1ca46:	2800      	cmp	r0, #0
   1ca48:	f43f af76 	beq.w	1c938 <prepare_cb+0x3c>
   1ca4c:	4a07      	ldr	r2, [pc, #28]	; (1ca6c <prepare_cb+0x170>)
   1ca4e:	4911      	ldr	r1, [pc, #68]	; (1ca94 <prepare_cb+0x198>)
   1ca50:	4808      	ldr	r0, [pc, #32]	; (1ca74 <prepare_cb+0x178>)
   1ca52:	f44f 7382 	mov.w	r3, #260	; 0x104
   1ca56:	f006 fc38 	bl	232ca <printk>
   1ca5a:	4040      	eors	r0, r0
   1ca5c:	f380 8811 	msr	BASEPRI, r0
   1ca60:	f04f 0003 	mov.w	r0, #3
   1ca64:	df02      	svc	2
   1ca66:	e767      	b.n	1c938 <prepare_cb+0x3c>
   1ca68:	8e89bed6 	.word	0x8e89bed6
   1ca6c:	0002f456 	.word	0x0002f456
   1ca70:	0002f40e 	.word	0x0002f40e
   1ca74:	000297e6 	.word	0x000297e6
   1ca78:	0002f4a1 	.word	0x0002f4a1
   1ca7c:	00555555 	.word	0x00555555
   1ca80:	0001cd49 	.word	0x0001cd49
   1ca84:	00027a7b 	.word	0x00027a7b
   1ca88:	0001cbc1 	.word	0x0001cbc1
   1ca8c:	0001c8e5 	.word	0x0001c8e5
   1ca90:	0002ef5f 	.word	0x0002ef5f
   1ca94:	0002eeba 	.word	0x0002eeba

0001ca98 <isr_common_done>:

	radio_isr_set(isr_rx, param);
}

static void isr_common_done(void *param)
{
   1ca98:	b538      	push	{r3, r4, r5, lr}
   1ca9a:	4605      	mov	r5, r0
	struct node_rx_pdu *node_rx;

	/* TODO: MOVE to a common interface, isr_lll_radio_status? */
	/* Clear radio status and events */
	radio_status_reset();
   1ca9c:	f000 ffee 	bl	1da7c <radio_status_reset>
	radio_tmr_status_reset();
   1caa0:	f001 f89c 	bl	1dbdc <radio_tmr_status_reset>
	radio_filter_status_reset();
   1caa4:	f001 f882 	bl	1dbac <radio_filter_status_reset>
	radio_ar_status_reset();
   1caa8:	f001 f9ae 	bl	1de08 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1caac:	f001 f862 	bl	1db74 <radio_rssi_status_reset>
		radio_gpio_pa_lna_disable();
	}
	/* TODO: MOVE ^^ */

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
   1cab0:	2096      	movs	r0, #150	; 0x96
   1cab2:	f001 f8a3 	bl	1dbfc <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1cab6:	2300      	movs	r3, #0
   1cab8:	4618      	mov	r0, r3
   1caba:	461a      	mov	r2, r3
   1cabc:	4619      	mov	r1, r3
   1cabe:	f001 f831 	bl	1db24 <radio_switch_complete_and_tx>

	node_rx = ull_pdu_rx_alloc_peek(1);
   1cac2:	2001      	movs	r0, #1
   1cac4:	f7fd f810 	bl	19ae8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1cac8:	4604      	mov	r4, r0
   1caca:	b960      	cbnz	r0, 1cae6 <isr_common_done+0x4e>
   1cacc:	4a0c      	ldr	r2, [pc, #48]	; (1cb00 <isr_common_done+0x68>)
   1cace:	490d      	ldr	r1, [pc, #52]	; (1cb04 <isr_common_done+0x6c>)
   1cad0:	480d      	ldr	r0, [pc, #52]	; (1cb08 <isr_common_done+0x70>)
   1cad2:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   1cad6:	f006 fbf8 	bl	232ca <printk>
   1cada:	4040      	eors	r0, r0
   1cadc:	f380 8811 	msr	BASEPRI, r0
   1cae0:	f04f 0003 	mov.w	r0, #3
   1cae4:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1cae6:	f104 0020 	add.w	r0, r4, #32
   1caea:	f000 ff9d 	bl	1da28 <radio_pkt_rx_set>

		radio_ar_configure(count, irks);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	radio_rssi_measure();
   1caee:	f001 f831 	bl	1db54 <radio_rssi_measure>

	radio_isr_set(isr_rx, param);
   1caf2:	4629      	mov	r1, r5
   1caf4:	4805      	ldr	r0, [pc, #20]	; (1cb0c <isr_common_done+0x74>)
}
   1caf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(isr_rx, param);
   1cafa:	f000 bedf 	b.w	1d8bc <radio_isr_set>
   1cafe:	bf00      	nop
   1cb00:	0002f456 	.word	0x0002f456
   1cb04:	0002f4a1 	.word	0x0002f4a1
   1cb08:	000297e6 	.word	0x000297e6
   1cb0c:	0001cd49 	.word	0x0001cd49

0001cb10 <isr_tx>:
{
   1cb10:	b570      	push	{r4, r5, r6, lr}
   1cb12:	4605      	mov	r5, r0
	radio_status_reset();
   1cb14:	f000 ffb2 	bl	1da7c <radio_status_reset>
	radio_tmr_status_reset();
   1cb18:	f001 f860 	bl	1dbdc <radio_tmr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1cb1c:	2096      	movs	r0, #150	; 0x96
   1cb1e:	f001 f86d 	bl	1dbfc <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1cb22:	2300      	movs	r3, #0
   1cb24:	4618      	mov	r0, r3
   1cb26:	461a      	mov	r2, r3
   1cb28:	4619      	mov	r1, r3
   1cb2a:	f000 fffb 	bl	1db24 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1cb2e:	2001      	movs	r0, #1
   1cb30:	f7fc ffda 	bl	19ae8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1cb34:	4604      	mov	r4, r0
   1cb36:	b960      	cbnz	r0, 1cb52 <isr_tx+0x42>
   1cb38:	4a1c      	ldr	r2, [pc, #112]	; (1cbac <isr_tx+0x9c>)
   1cb3a:	491d      	ldr	r1, [pc, #116]	; (1cbb0 <isr_tx+0xa0>)
   1cb3c:	481d      	ldr	r0, [pc, #116]	; (1cbb4 <isr_tx+0xa4>)
   1cb3e:	f240 13c3 	movw	r3, #451	; 0x1c3
   1cb42:	f006 fbc2 	bl	232ca <printk>
   1cb46:	4040      	eors	r0, r0
   1cb48:	f380 8811 	msr	BASEPRI, r0
   1cb4c:	f04f 0003 	mov.w	r0, #3
   1cb50:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1cb52:	f104 0020 	add.w	r0, r4, #32
   1cb56:	f000 ff67 	bl	1da28 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1cb5a:	f000 ff9b 	bl	1da94 <radio_is_ready>
   1cb5e:	b160      	cbz	r0, 1cb7a <isr_tx+0x6a>
   1cb60:	4a12      	ldr	r2, [pc, #72]	; (1cbac <isr_tx+0x9c>)
   1cb62:	4915      	ldr	r1, [pc, #84]	; (1cbb8 <isr_tx+0xa8>)
   1cb64:	4813      	ldr	r0, [pc, #76]	; (1cbb4 <isr_tx+0xa4>)
   1cb66:	f240 13c7 	movw	r3, #455	; 0x1c7
   1cb6a:	f006 fbae 	bl	232ca <printk>
   1cb6e:	4040      	eors	r0, r0
   1cb70:	f380 8811 	msr	BASEPRI, r0
   1cb74:	f04f 0003 	mov.w	r0, #3
   1cb78:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1cb7a:	f001 f939 	bl	1ddf0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1cb7e:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1cb80:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1cb82:	4608      	mov	r0, r1
   1cb84:	f00b f894 	bl	27cb0 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1cb88:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1cb8a:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1cb8c:	4608      	mov	r0, r1
   1cb8e:	f00b f88b 	bl	27ca8 <radio_tx_chain_delay_get>
   1cb92:	4434      	add	r4, r6
   1cb94:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1cb96:	1a20      	subs	r0, r4, r0
   1cb98:	f001 f8e4 	bl	1dd64 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1cb9c:	f000 ffda 	bl	1db54 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1cba0:	4629      	mov	r1, r5
   1cba2:	4806      	ldr	r0, [pc, #24]	; (1cbbc <isr_tx+0xac>)
}
   1cba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   1cba8:	f000 be88 	b.w	1d8bc <radio_isr_set>
   1cbac:	0002f456 	.word	0x0002f456
   1cbb0:	0002f4a1 	.word	0x0002f4a1
   1cbb4:	000297e6 	.word	0x000297e6
   1cbb8:	0002f421 	.word	0x0002f421
   1cbbc:	0001cd49 	.word	0x0001cd49

0001cbc0 <ticker_op_start_cb>:
{
   1cbc0:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1cbc2:	b160      	cbz	r0, 1cbde <ticker_op_start_cb+0x1e>
   1cbc4:	4a06      	ldr	r2, [pc, #24]	; (1cbe0 <ticker_op_start_cb+0x20>)
   1cbc6:	4907      	ldr	r1, [pc, #28]	; (1cbe4 <ticker_op_start_cb+0x24>)
   1cbc8:	4807      	ldr	r0, [pc, #28]	; (1cbe8 <ticker_op_start_cb+0x28>)
   1cbca:	f44f 73b0 	mov.w	r3, #352	; 0x160
   1cbce:	f006 fb7c 	bl	232ca <printk>
   1cbd2:	4040      	eors	r0, r0
   1cbd4:	f380 8811 	msr	BASEPRI, r0
   1cbd8:	f04f 0003 	mov.w	r0, #3
   1cbdc:	df02      	svc	2
}
   1cbde:	bd08      	pop	{r3, pc}
   1cbe0:	0002f456 	.word	0x0002f456
   1cbe4:	0002f0b3 	.word	0x0002f0b3
   1cbe8:	000297e6 	.word	0x000297e6

0001cbec <abort_cb>:
{
   1cbec:	b510      	push	{r4, lr}
   1cbee:	460c      	mov	r4, r1
	if (!prepare_param) {
   1cbf0:	b930      	cbnz	r0, 1cc00 <abort_cb+0x14>
			radio_isr_set(isr_abort, param);
   1cbf2:	480f      	ldr	r0, [pc, #60]	; (1cc30 <abort_cb+0x44>)
   1cbf4:	f000 fe62 	bl	1d8bc <radio_isr_set>
}
   1cbf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1cbfc:	f000 bf2c 	b.w	1da58 <radio_disable>
	err = lll_hfclock_off();
   1cc00:	f7ff fb5e 	bl	1c2c0 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   1cc04:	b170      	cbz	r0, 1cc24 <abort_cb+0x38>
   1cc06:	3010      	adds	r0, #16
   1cc08:	d00c      	beq.n	1cc24 <abort_cb+0x38>
   1cc0a:	4a0a      	ldr	r2, [pc, #40]	; (1cc34 <abort_cb+0x48>)
   1cc0c:	490a      	ldr	r1, [pc, #40]	; (1cc38 <abort_cb+0x4c>)
   1cc0e:	480b      	ldr	r0, [pc, #44]	; (1cc3c <abort_cb+0x50>)
   1cc10:	f44f 73a8 	mov.w	r3, #336	; 0x150
   1cc14:	f006 fb59 	bl	232ca <printk>
   1cc18:	4040      	eors	r0, r0
   1cc1a:	f380 8811 	msr	BASEPRI, r0
   1cc1e:	f04f 0003 	mov.w	r0, #3
   1cc22:	df02      	svc	2
	lll_done(param);
   1cc24:	4620      	mov	r0, r4
}
   1cc26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1cc2a:	f7ff ba7d 	b.w	1c128 <lll_done>
   1cc2e:	bf00      	nop
   1cc30:	00027a7b 	.word	0x00027a7b
   1cc34:	0002f456 	.word	0x0002f456
   1cc38:	0002f40e 	.word	0x0002f40e
   1cc3c:	000297e6 	.word	0x000297e6

0001cc40 <is_abort_cb>:
	if (next != curr) {
   1cc40:	4282      	cmp	r2, r0
{
   1cc42:	b510      	push	{r4, lr}
   1cc44:	4614      	mov	r4, r2
	if (next != curr) {
   1cc46:	d019      	beq.n	1cc7c <is_abort_cb+0x3c>
		*resume_cb = resume_prepare_cb;
   1cc48:	4a1a      	ldr	r2, [pc, #104]	; (1ccb4 <is_abort_cb+0x74>)
   1cc4a:	601a      	str	r2, [r3, #0]
		*resume_prio = 0; /* TODO: */
   1cc4c:	9b02      	ldr	r3, [sp, #8]
   1cc4e:	2200      	movs	r2, #0
   1cc50:	601a      	str	r2, [r3, #0]
		err = lll_hfclock_on();
   1cc52:	f7ff fb2d 	bl	1c2b0 <lll_hfclock_on>
		LL_ASSERT(!err || err == -EINPROGRESS);
   1cc56:	b170      	cbz	r0, 1cc76 <is_abort_cb+0x36>
   1cc58:	3044      	adds	r0, #68	; 0x44
   1cc5a:	d00c      	beq.n	1cc76 <is_abort_cb+0x36>
   1cc5c:	4a16      	ldr	r2, [pc, #88]	; (1ccb8 <is_abort_cb+0x78>)
   1cc5e:	4917      	ldr	r1, [pc, #92]	; (1ccbc <is_abort_cb+0x7c>)
   1cc60:	4817      	ldr	r0, [pc, #92]	; (1ccc0 <is_abort_cb+0x80>)
   1cc62:	f44f 7393 	mov.w	r3, #294	; 0x126
   1cc66:	f006 fb30 	bl	232ca <printk>
   1cc6a:	4040      	eors	r0, r0
   1cc6c:	f380 8811 	msr	BASEPRI, r0
   1cc70:	f04f 0003 	mov.w	r0, #3
   1cc74:	df02      	svc	2
   1cc76:	f06f 000a 	mvn.w	r0, #10
   1cc7a:	e019      	b.n	1ccb0 <is_abort_cb+0x70>
	radio_isr_set(isr_window, lll);
   1cc7c:	4611      	mov	r1, r2
   1cc7e:	4811      	ldr	r0, [pc, #68]	; (1ccc4 <is_abort_cb+0x84>)
   1cc80:	f000 fe1c 	bl	1d8bc <radio_isr_set>
	radio_disable();
   1cc84:	f000 fee8 	bl	1da58 <radio_disable>
	if (++lll->chan == 3U) {
   1cc88:	7a23      	ldrb	r3, [r4, #8]
   1cc8a:	f3c3 0241 	ubfx	r2, r3, #1, #2
   1cc8e:	3201      	adds	r2, #1
   1cc90:	f002 0203 	and.w	r2, r2, #3
   1cc94:	2a03      	cmp	r2, #3
   1cc96:	bf14      	ite	ne
   1cc98:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   1cc9c:	f36f 0342 	bfceq	r3, #1, #2
   1cca0:	7223      	strb	r3, [r4, #8]
	lll_chan_set(37 + lll->chan);
   1cca2:	7a20      	ldrb	r0, [r4, #8]
   1cca4:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1cca8:	3025      	adds	r0, #37	; 0x25
   1ccaa:	f7ff fa8f 	bl	1c1cc <lll_chan_set>
	return 0;
   1ccae:	2000      	movs	r0, #0
}
   1ccb0:	bd10      	pop	{r4, pc}
   1ccb2:	bf00      	nop
   1ccb4:	00027a39 	.word	0x00027a39
   1ccb8:	0002f456 	.word	0x0002f456
   1ccbc:	0002f433 	.word	0x0002f433
   1ccc0:	000297e6 	.word	0x000297e6
   1ccc4:	00027a61 	.word	0x00027a61

0001ccc8 <isr_cleanup>:

	isr_cleanup(param);
}

static void isr_cleanup(void *param)
{
   1ccc8:	b538      	push	{r3, r4, r5, lr}
   1ccca:	4604      	mov	r4, r0
	struct lll_scan *lll = param;
	struct node_rx_hdr *node_rx;
	int err;

	if (lll_is_done(param)) {
   1cccc:	f7ff fa76 	bl	1c1bc <lll_is_done>
   1ccd0:	4605      	mov	r5, r0
   1ccd2:	bb80      	cbnz	r0, 1cd36 <isr_cleanup+0x6e>
		return;
	}

	radio_filter_disable();
   1ccd4:	f000 ff60 	bl	1db98 <radio_filter_disable>

	if (++lll->chan == 3U) {
   1ccd8:	7a23      	ldrb	r3, [r4, #8]
	}
#else /* !CONFIG_BT_CTLR_SCAN_INDICATION */
	ARG_UNUSED(node_rx);
#endif /* !CONFIG_BT_CTLR_SCAN_INDICATION */

	radio_isr_set(isr_race, param);
   1ccda:	4817      	ldr	r0, [pc, #92]	; (1cd38 <isr_cleanup+0x70>)
	if (++lll->chan == 3U) {
   1ccdc:	f3c3 0241 	ubfx	r2, r3, #1, #2
   1cce0:	3201      	adds	r2, #1
   1cce2:	f002 0203 	and.w	r2, r2, #3
   1cce6:	2a03      	cmp	r2, #3
   1cce8:	bf14      	ite	ne
   1ccea:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   1ccee:	f365 0342 	bfieq	r3, r5, #1, #2
   1ccf2:	7223      	strb	r3, [r4, #8]
	radio_isr_set(isr_race, param);
   1ccf4:	4621      	mov	r1, r4
   1ccf6:	f000 fde1 	bl	1d8bc <radio_isr_set>
	if (!radio_is_idle()) {
   1ccfa:	f000 fedf 	bl	1dabc <radio_is_idle>
   1ccfe:	b908      	cbnz	r0, 1cd04 <isr_cleanup+0x3c>
		radio_disable();
   1cd00:	f000 feaa 	bl	1da58 <radio_disable>
	}

	radio_tmr_stop();
   1cd04:	f001 f822 	bl	1dd4c <radio_tmr_stop>

	err = lll_hfclock_off();
   1cd08:	f7ff fada 	bl	1c2c0 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   1cd0c:	b170      	cbz	r0, 1cd2c <isr_cleanup+0x64>
   1cd0e:	3010      	adds	r0, #16
   1cd10:	d00c      	beq.n	1cd2c <isr_cleanup+0x64>
   1cd12:	4a0a      	ldr	r2, [pc, #40]	; (1cd3c <isr_cleanup+0x74>)
   1cd14:	490a      	ldr	r1, [pc, #40]	; (1cd40 <isr_cleanup+0x78>)
   1cd16:	480b      	ldr	r0, [pc, #44]	; (1cd44 <isr_cleanup+0x7c>)
   1cd18:	f240 2387 	movw	r3, #647	; 0x287
   1cd1c:	f006 fad5 	bl	232ca <printk>
   1cd20:	4040      	eors	r0, r0
   1cd22:	f380 8811 	msr	BASEPRI, r0
   1cd26:	f04f 0003 	mov.w	r0, #3
   1cd2a:	df02      	svc	2

	lll_done(NULL);
}
   1cd2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(NULL);
   1cd30:	2000      	movs	r0, #0
   1cd32:	f7ff b9f9 	b.w	1c128 <lll_done>
}
   1cd36:	bd38      	pop	{r3, r4, r5, pc}
   1cd38:	00027a23 	.word	0x00027a23
   1cd3c:	0002f456 	.word	0x0002f456
   1cd40:	0002f40e 	.word	0x0002f40e
   1cd44:	000297e6 	.word	0x000297e6

0001cd48 <isr_rx>:
{
   1cd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd4c:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   1cd4e:	f000 feab 	bl	1daa8 <radio_is_done>
	if (trx_done) {
   1cd52:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
   1cd56:	f000 8096 	beq.w	1ce86 <isr_rx+0x13e>
		crc_ok = radio_crc_is_valid();
   1cd5a:	f000 fec5 	bl	1dae8 <radio_crc_is_valid>
   1cd5e:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
   1cd62:	f000 ff2b 	bl	1dbbc <radio_filter_has_match>
   1cd66:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
   1cd68:	f000 ff32 	bl	1dbd0 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1cd6c:	f001 f858 	bl	1de20 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   1cd70:	f001 f844 	bl	1ddfc <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   1cd74:	f000 ff06 	bl	1db84 <radio_rssi_is_ready>
   1cd78:	b2c6      	uxtb	r6, r0
	radio_status_reset();
   1cd7a:	f000 fe7f 	bl	1da7c <radio_status_reset>
	radio_tmr_status_reset();
   1cd7e:	f000 ff2d 	bl	1dbdc <radio_tmr_status_reset>
	radio_filter_status_reset();
   1cd82:	f000 ff13 	bl	1dbac <radio_filter_status_reset>
	radio_ar_status_reset();
   1cd86:	f001 f83f 	bl	1de08 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1cd8a:	f000 fef3 	bl	1db74 <radio_rssi_status_reset>
	if (!trx_done) {
   1cd8e:	2c00      	cmp	r4, #0
   1cd90:	f000 8095 	beq.w	1cebe <isr_rx+0x176>
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   1cd94:	f1b8 0f00 	cmp.w	r8, #0
   1cd98:	f000 8091 	beq.w	1cebe <isr_rx+0x176>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
		(((lll->filter_policy & 0x01) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
#else
	return ((lll->filter_policy & 0x01) == 0U) ||
   1cd9c:	7a2b      	ldrb	r3, [r5, #8]
   1cd9e:	0719      	lsls	r1, r3, #28
   1cda0:	d502      	bpl.n	1cda8 <isr_rx+0x60>
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   1cda2:	2f00      	cmp	r7, #0
   1cda4:	f000 808b 	beq.w	1cebe <isr_rx+0x176>
{
	struct node_rx_pdu *node_rx;
	struct pdu_adv *pdu_adv_rx;
	bool dir_report = false;

	node_rx = ull_pdu_rx_alloc_peek(1);
   1cda8:	2001      	movs	r0, #1
   1cdaa:	f7fc fe9d 	bl	19ae8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1cdae:	4604      	mov	r4, r0
   1cdb0:	b960      	cbnz	r0, 1cdcc <isr_rx+0x84>
   1cdb2:	4a67      	ldr	r2, [pc, #412]	; (1cf50 <isr_rx+0x208>)
   1cdb4:	4967      	ldr	r1, [pc, #412]	; (1cf54 <isr_rx+0x20c>)
   1cdb6:	4868      	ldr	r0, [pc, #416]	; (1cf58 <isr_rx+0x210>)
   1cdb8:	f240 23aa 	movw	r3, #682	; 0x2aa
   1cdbc:	f006 fa85 	bl	232ca <printk>
   1cdc0:	4040      	eors	r0, r0
   1cdc2:	f380 8811 	msr	BASEPRI, r0
   1cdc6:	f04f 0003 	mov.w	r0, #3
   1cdca:	df02      	svc	2

		return 0;
#endif /* CONFIG_BT_CENTRAL */

	/* Active scanner */
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1cdcc:	f894 3020 	ldrb.w	r3, [r4, #32]
   1cdd0:	f013 020f 	ands.w	r2, r3, #15
   1cdd4:	d002      	beq.n	1cddc <isr_rx+0x94>
   1cdd6:	2a06      	cmp	r2, #6
   1cdd8:	f040 80b7 	bne.w	1cf4a <isr_rx+0x202>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1cddc:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   1cde0:	2925      	cmp	r1, #37	; 0x25
   1cde2:	d854      	bhi.n	1ce8e <isr_rx+0x146>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
		   lll->type &&
   1cde4:	f995 1008 	ldrsb.w	r1, [r5, #8]
   1cde8:	2900      	cmp	r1, #0
   1cdea:	da50      	bge.n	1ce8e <isr_rx+0x146>
		bt_addr_t *lrpa;
#endif /* CONFIG_BT_CTLR_PRIVACY */
		u32_t err;

		/* setup tIFS switching */
		radio_tmr_tifs_set(EVENT_IFS_US);
   1cdec:	2096      	movs	r0, #150	; 0x96
   1cdee:	f000 ff05 	bl	1dbfc <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1cdf2:	2000      	movs	r0, #0
   1cdf4:	f000 fe8a 	bl	1db0c <radio_switch_complete_and_rx>

		/* save the adv packet */
		err = isr_rx_scan_report(lll, rssi_ready,
   1cdf8:	4630      	mov	r0, r6
   1cdfa:	f00a fe59 	bl	27ab0 <isr_rx_scan_report.isra.0>
					 irkmatch_ok ? rl_idx : FILTER_IDX_NONE,
					 false);
		if (err) {
   1cdfe:	2800      	cmp	r0, #0
   1ce00:	d15d      	bne.n	1cebe <isr_rx+0x176>
			return err;
		}

		/* prepare the scan request packet */
		pdu_tx = (void *)radio_pkt_scratch_get();
   1ce02:	f000 fe7f 	bl	1db04 <radio_pkt_scratch_get>
			       BDADDR_SIZE);
		} else {
#else
		if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
			pdu_tx->tx_addr = lll->init_addr_type;
   1ce06:	7a2b      	ldrb	r3, [r5, #8]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   1ce08:	f894 2020 	ldrb.w	r2, [r4, #32]
			pdu_tx->tx_addr = lll->init_addr_type;
   1ce0c:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1ce10:	019b      	lsls	r3, r3, #6
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   1ce12:	f3c2 1280 	ubfx	r2, r2, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1ce16:	f043 0303 	orr.w	r3, r3, #3
   1ce1a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   1ce1e:	7802      	ldrb	r2, [r0, #0]
   1ce20:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1ce24:	4313      	orrs	r3, r2
   1ce26:	7003      	strb	r3, [r0, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   1ce28:	230c      	movs	r3, #12
   1ce2a:	7043      	strb	r3, [r0, #1]
		pdu_tx = (void *)radio_pkt_scratch_get();
   1ce2c:	4606      	mov	r6, r0
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   1ce2e:	2206      	movs	r2, #6
   1ce30:	f105 0109 	add.w	r1, r5, #9
   1ce34:	3002      	adds	r0, #2
   1ce36:	f008 f92b 	bl	25090 <memcpy>
			       &lll->init_addr[0], BDADDR_SIZE);
		}
		memcpy(&pdu_tx->scan_req.adv_addr[0],
   1ce3a:	2206      	movs	r2, #6
   1ce3c:	f104 0122 	add.w	r1, r4, #34	; 0x22
   1ce40:	f106 0008 	add.w	r0, r6, #8
   1ce44:	f008 f924 	bl	25090 <memcpy>
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);

		radio_pkt_tx_set(pdu_tx);
   1ce48:	4630      	mov	r0, r6
   1ce4a:	f000 fdf3 	bl	1da34 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   1ce4e:	f000 fe21 	bl	1da94 <radio_is_ready>
   1ce52:	b160      	cbz	r0, 1ce6e <isr_rx+0x126>
   1ce54:	4a3e      	ldr	r2, [pc, #248]	; (1cf50 <isr_rx+0x208>)
   1ce56:	4941      	ldr	r1, [pc, #260]	; (1cf5c <isr_rx+0x214>)
   1ce58:	483f      	ldr	r0, [pc, #252]	; (1cf58 <isr_rx+0x210>)
   1ce5a:	f44f 7369 	mov.w	r3, #932	; 0x3a4
   1ce5e:	f006 fa34 	bl	232ca <printk>
   1ce62:	4040      	eors	r0, r0
   1ce64:	f380 8811 	msr	BASEPRI, r0
   1ce68:	f04f 0003 	mov.w	r0, #3
   1ce6c:	df02      	svc	2
			lll_prof_cputime_capture();

		}

		/* capture end of Tx-ed PDU, used to calculate HCTO. */
		radio_tmr_end_capture();
   1ce6e:	f000 ffb1 	bl	1ddd4 <radio_tmr_end_capture>
					 radio_rx_chain_delay_get(0, 0) -
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */

		/* switch scanner state to active */
		lll->state = 1U;
   1ce72:	7a2b      	ldrb	r3, [r5, #8]
		radio_isr_set(isr_tx, lll);
   1ce74:	483a      	ldr	r0, [pc, #232]	; (1cf60 <isr_rx+0x218>)
		lll->state = 1U;
   1ce76:	f043 0301 	orr.w	r3, r3, #1
   1ce7a:	722b      	strb	r3, [r5, #8]
		radio_isr_set(isr_tx, lll);
   1ce7c:	4629      	mov	r1, r5
}
   1ce7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_isr_set(isr_tx, lll);
   1ce82:	f000 bd1b 	b.w	1d8bc <radio_isr_set>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   1ce86:	4626      	mov	r6, r4
   1ce88:	4627      	mov	r7, r4
   1ce8a:	46a0      	mov	r8, r4
   1ce8c:	e775      	b.n	1cd7a <isr_rx+0x32>

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1ce8e:	f013 0f0d 	tst.w	r3, #13
   1ce92:	d001      	beq.n	1ce98 <isr_rx+0x150>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1ce94:	2a06      	cmp	r2, #6
   1ce96:	d10a      	bne.n	1ceae <isr_rx+0x166>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1ce98:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   1ce9c:	2925      	cmp	r1, #37	; 0x25
   1ce9e:	d806      	bhi.n	1ceae <isr_rx+0x166>
		   (lll->phy)) ||
#endif /* CONFIG_BT_CTLR_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
		   (lll->state != 0U) &&
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   1cea0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1cea4:	b15b      	cbz	r3, 1cebe <isr_rx+0x176>
		   1) {
#endif /* !CONFIG_BT_CENTRAL */
		u32_t err;

		/* save the scan response packet */
		err = isr_rx_scan_report(lll, rssi_ready,
   1cea6:	4630      	mov	r0, r6
   1cea8:	f00a fe02 	bl	27ab0 <isr_rx_scan_report.isra.0>
					 irkmatch_ok ? rl_idx :
						       FILTER_IDX_NONE,
					 dir_report);
		if (err) {
   1ceac:	e007      	b.n	1cebe <isr_rx+0x176>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   1ceae:	2a01      	cmp	r2, #1
   1ceb0:	d00d      	beq.n	1cece <isr_rx+0x186>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1ceb2:	f894 3020 	ldrb.w	r3, [r4, #32]
					&dir_report))) ||
   1ceb6:	f003 030f 	and.w	r3, r3, #15
   1ceba:	2b04      	cmp	r3, #4
   1cebc:	d02b      	beq.n	1cf16 <isr_rx+0x1ce>
	radio_isr_set(isr_done, lll);
   1cebe:	4629      	mov	r1, r5
   1cec0:	4828      	ldr	r0, [pc, #160]	; (1cf64 <isr_rx+0x21c>)
   1cec2:	f000 fcfb 	bl	1d8bc <radio_isr_set>
}
   1cec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	radio_disable();
   1ceca:	f000 bdc5 	b.w	1da58 <radio_disable>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1cece:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   1ced2:	2a0c      	cmp	r2, #12
   1ced4:	d1f3      	bne.n	1cebe <isr_rx+0x176>
		 */
		return false;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return (((lll->init_addr_type == pdu->rx_addr) &&
   1ced6:	7a2a      	ldrb	r2, [r5, #8]
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
			BDADDR_SIZE))) ||
   1ced8:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1cedc:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
   1cee0:	d00f      	beq.n	1cf02 <isr_rx+0x1ba>

static inline bool isr_scan_tgta_rpa_check(struct lll_scan *lll,
					   struct pdu_adv *pdu,
					   bool *dir_report)
{
	if (((lll->filter_policy & 0x02) != 0U) &&
   1cee2:	7a2b      	ldrb	r3, [r5, #8]
   1cee4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   1cee8:	079a      	lsls	r2, r3, #30
   1ceea:	d5e2      	bpl.n	1ceb2 <isr_rx+0x16a>
   1ceec:	f994 3020 	ldrsb.w	r3, [r4, #32]
   1cef0:	2b00      	cmp	r3, #0
   1cef2:	dade      	bge.n	1ceb2 <isr_rx+0x16a>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
   1cef4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1cef8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cefc:	2b40      	cmp	r3, #64	; 0x40
   1cefe:	d0cf      	beq.n	1cea0 <isr_rx+0x158>
   1cf00:	e7d7      	b.n	1ceb2 <isr_rx+0x16a>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
   1cf02:	2206      	movs	r2, #6
   1cf04:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1cf08:	f105 0009 	add.w	r0, r5, #9
   1cf0c:	f008 f8b0 	bl	25070 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
   1cf10:	2800      	cmp	r0, #0
   1cf12:	d0c5      	beq.n	1cea0 <isr_rx+0x158>
   1cf14:	e7e5      	b.n	1cee2 <isr_rx+0x19a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1cf16:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1cf1a:	2b25      	cmp	r3, #37	; 0x25
   1cf1c:	d8cf      	bhi.n	1cebe <isr_rx+0x176>
		   (lll->state != 0U) &&
   1cf1e:	7a2b      	ldrb	r3, [r5, #8]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   1cf20:	07db      	lsls	r3, r3, #31
   1cf22:	d5cc      	bpl.n	1cebe <isr_rx+0x176>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   1cf24:	f000 fdee 	bl	1db04 <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
   1cf28:	f894 3020 	ldrb.w	r3, [r4, #32]
   1cf2c:	7802      	ldrb	r2, [r0, #0]
   1cf2e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1cf32:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1cf36:	d1c2      	bne.n	1cebe <isr_rx+0x176>
		(memcmp(&sreq->scan_req.adv_addr[0],
   1cf38:	2206      	movs	r2, #6
   1cf3a:	f104 0122 	add.w	r1, r4, #34	; 0x22
   1cf3e:	3008      	adds	r0, #8
   1cf40:	f008 f896 	bl	25070 <memcmp>
		   (lll->state != 0U) &&
   1cf44:	2800      	cmp	r0, #0
   1cf46:	d0ab      	beq.n	1cea0 <isr_rx+0x158>
   1cf48:	e7b9      	b.n	1cebe <isr_rx+0x176>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1cf4a:	2a02      	cmp	r2, #2
   1cf4c:	e7a3      	b.n	1ce96 <isr_rx+0x14e>
   1cf4e:	bf00      	nop
   1cf50:	0002f456 	.word	0x0002f456
   1cf54:	0002f4a1 	.word	0x0002f4a1
   1cf58:	000297e6 	.word	0x000297e6
   1cf5c:	0002f421 	.word	0x0002f421
   1cf60:	0001cb11 	.word	0x0001cb11
   1cf64:	00027a27 	.word	0x00027a27

0001cf68 <lll_scan_prepare>:
{
   1cf68:	b513      	push	{r0, r1, r4, lr}
   1cf6a:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1cf6c:	f7ff f9a0 	bl	1c2b0 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1cf70:	b168      	cbz	r0, 1cf8e <lll_scan_prepare+0x26>
   1cf72:	3044      	adds	r0, #68	; 0x44
   1cf74:	d00b      	beq.n	1cf8e <lll_scan_prepare+0x26>
   1cf76:	4a12      	ldr	r2, [pc, #72]	; (1cfc0 <lll_scan_prepare+0x58>)
   1cf78:	4912      	ldr	r1, [pc, #72]	; (1cfc4 <lll_scan_prepare+0x5c>)
   1cf7a:	4813      	ldr	r0, [pc, #76]	; (1cfc8 <lll_scan_prepare+0x60>)
   1cf7c:	236d      	movs	r3, #109	; 0x6d
   1cf7e:	f006 f9a4 	bl	232ca <printk>
   1cf82:	4040      	eors	r0, r0
   1cf84:	f380 8811 	msr	BASEPRI, r0
   1cf88:	f04f 0003 	mov.w	r0, #3
   1cf8c:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
   1cf8e:	4a0f      	ldr	r2, [pc, #60]	; (1cfcc <lll_scan_prepare+0x64>)
   1cf90:	490f      	ldr	r1, [pc, #60]	; (1cfd0 <lll_scan_prepare+0x68>)
   1cf92:	4810      	ldr	r0, [pc, #64]	; (1cfd4 <lll_scan_prepare+0x6c>)
   1cf94:	9400      	str	r4, [sp, #0]
   1cf96:	2300      	movs	r3, #0
   1cf98:	f00a fc99 	bl	278ce <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1cf9c:	b168      	cbz	r0, 1cfba <lll_scan_prepare+0x52>
   1cf9e:	3044      	adds	r0, #68	; 0x44
   1cfa0:	d00b      	beq.n	1cfba <lll_scan_prepare+0x52>
   1cfa2:	4a07      	ldr	r2, [pc, #28]	; (1cfc0 <lll_scan_prepare+0x58>)
   1cfa4:	4907      	ldr	r1, [pc, #28]	; (1cfc4 <lll_scan_prepare+0x5c>)
   1cfa6:	4808      	ldr	r0, [pc, #32]	; (1cfc8 <lll_scan_prepare+0x60>)
   1cfa8:	2370      	movs	r3, #112	; 0x70
   1cfaa:	f006 f98e 	bl	232ca <printk>
   1cfae:	4040      	eors	r0, r0
   1cfb0:	f380 8811 	msr	BASEPRI, r0
   1cfb4:	f04f 0003 	mov.w	r0, #3
   1cfb8:	df02      	svc	2
}
   1cfba:	b002      	add	sp, #8
   1cfbc:	bd10      	pop	{r4, pc}
   1cfbe:	bf00      	nop
   1cfc0:	0002f456 	.word	0x0002f456
   1cfc4:	0002f433 	.word	0x0002f433
   1cfc8:	000297e6 	.word	0x000297e6
   1cfcc:	0001c8fd 	.word	0x0001c8fd
   1cfd0:	0001cbed 	.word	0x0001cbed
   1cfd4:	0001cc41 	.word	0x0001cc41

0001cfd8 <isr_cleanup>:

	isr_cleanup(param);
}

static void isr_cleanup(void *param)
{
   1cfd8:	b508      	push	{r3, lr}
   1cfda:	4601      	mov	r1, r0
	int err;

	radio_isr_set(isr_race, param);
   1cfdc:	4810      	ldr	r0, [pc, #64]	; (1d020 <isr_cleanup+0x48>)
   1cfde:	f000 fc6d 	bl	1d8bc <radio_isr_set>
	if (!radio_is_idle()) {
   1cfe2:	f000 fd6b 	bl	1dabc <radio_is_idle>
   1cfe6:	b908      	cbnz	r0, 1cfec <isr_cleanup+0x14>
		radio_disable();
   1cfe8:	f000 fd36 	bl	1da58 <radio_disable>
	}

	radio_tmr_stop();
   1cfec:	f000 feae 	bl	1dd4c <radio_tmr_stop>

	err = lll_hfclock_off();
   1cff0:	f7ff f966 	bl	1c2c0 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   1cff4:	b170      	cbz	r0, 1d014 <isr_cleanup+0x3c>
   1cff6:	3010      	adds	r0, #16
   1cff8:	d00c      	beq.n	1d014 <isr_cleanup+0x3c>
   1cffa:	4a0a      	ldr	r2, [pc, #40]	; (1d024 <isr_cleanup+0x4c>)
   1cffc:	490a      	ldr	r1, [pc, #40]	; (1d028 <isr_cleanup+0x50>)
   1cffe:	480b      	ldr	r0, [pc, #44]	; (1d02c <isr_cleanup+0x54>)
   1d000:	f240 2383 	movw	r3, #643	; 0x283
   1d004:	f006 f961 	bl	232ca <printk>
   1d008:	4040      	eors	r0, r0
   1d00a:	f380 8811 	msr	BASEPRI, r0
   1d00e:	f04f 0003 	mov.w	r0, #3
   1d012:	df02      	svc	2

	lll_done(NULL);
}
   1d014:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1d018:	2000      	movs	r0, #0
   1d01a:	f7ff b885 	b.w	1c128 <lll_done>
   1d01e:	bf00      	nop
   1d020:	00027af9 	.word	0x00027af9
   1d024:	0002f4ba 	.word	0x0002f4ba
   1d028:	0002f40e 	.word	0x0002f40e
   1d02c:	000297e6 	.word	0x000297e6

0001d030 <isr_done>:
{
   1d030:	b570      	push	{r4, r5, r6, lr}
   1d032:	4605      	mov	r5, r0
	radio_status_reset();
   1d034:	f000 fd22 	bl	1da7c <radio_status_reset>
	radio_tmr_status_reset();
   1d038:	f000 fdd0 	bl	1dbdc <radio_tmr_status_reset>
	radio_filter_status_reset();
   1d03c:	f000 fdb6 	bl	1dbac <radio_filter_status_reset>
	radio_ar_status_reset();
   1d040:	f000 fee2 	bl	1de08 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1d044:	f000 fd96 	bl	1db74 <radio_rssi_status_reset>
	e = ull_event_done_extra_get();
   1d048:	f7fc ff28 	bl	19e9c <ull_event_done_extra_get>
	LL_ASSERT(e);
   1d04c:	4604      	mov	r4, r0
   1d04e:	b960      	cbnz	r0, 1d06a <isr_done+0x3a>
   1d050:	4a16      	ldr	r2, [pc, #88]	; (1d0ac <isr_done+0x7c>)
   1d052:	4917      	ldr	r1, [pc, #92]	; (1d0b0 <isr_done+0x80>)
   1d054:	4817      	ldr	r0, [pc, #92]	; (1d0b4 <isr_done+0x84>)
   1d056:	f240 234e 	movw	r3, #590	; 0x24e
   1d05a:	f006 f936 	bl	232ca <printk>
   1d05e:	4040      	eors	r0, r0
   1d060:	f380 8811 	msr	BASEPRI, r0
   1d064:	f04f 0003 	mov.w	r0, #3
   1d068:	df02      	svc	2
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1d06a:	2301      	movs	r3, #1
   1d06c:	7023      	strb	r3, [r4, #0]
	e->trx_cnt = trx_cnt;
   1d06e:	4b12      	ldr	r3, [pc, #72]	; (1d0b8 <isr_done+0x88>)
	e->crc_valid = crc_valid;
   1d070:	4a12      	ldr	r2, [pc, #72]	; (1d0bc <isr_done+0x8c>)
	e->trx_cnt = trx_cnt;
   1d072:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1d074:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   1d076:	80a3      	strh	r3, [r4, #4]
	e->crc_valid = crc_valid;
   1d078:	71a2      	strb	r2, [r4, #6]
	if (trx_cnt) {
   1d07a:	b18b      	cbz	r3, 1d0a0 <isr_done+0x70>
		if (lll->role) {
   1d07c:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   1d080:	2b00      	cmp	r3, #0
   1d082:	da0d      	bge.n	1d0a0 <isr_done+0x70>
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1d084:	f000 fe9a 	bl	1ddbc <radio_tmr_aa_restore>
   1d088:	4606      	mov	r6, r0
   1d08a:	f000 fe9d 	bl	1ddc8 <radio_tmr_ready_get>
			e->slave.window_widening_event_us =
   1d08e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1d090:	60e3      	str	r3, [r4, #12]
			e->slave.preamble_to_addr_us = preamble_to_addr_us;
   1d092:	2328      	movs	r3, #40	; 0x28
   1d094:	6123      	str	r3, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1d096:	1a36      	subs	r6, r6, r0
			lll->slave.window_widening_event_us = 0;
   1d098:	2300      	movs	r3, #0
			e->slave.start_to_address_actual_us =
   1d09a:	60a6      	str	r6, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   1d09c:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   1d09e:	63eb      	str	r3, [r5, #60]	; 0x3c
	isr_cleanup(param);
   1d0a0:	4628      	mov	r0, r5
}
   1d0a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	isr_cleanup(param);
   1d0a6:	f7ff bf97 	b.w	1cfd8 <isr_cleanup>
   1d0aa:	bf00      	nop
   1d0ac:	0002f4ba 	.word	0x0002f4ba
   1d0b0:	0002e86b 	.word	0x0002e86b
   1d0b4:	000297e6 	.word	0x000297e6
   1d0b8:	20001d72 	.word	0x20001d72
   1d0bc:	20002320 	.word	0x20002320

0001d0c0 <lll_conn_ppm_get>:
}
   1d0c0:	4b01      	ldr	r3, [pc, #4]	; (1d0c8 <lll_conn_ppm_get+0x8>)
   1d0c2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1d0c6:	4770      	bx	lr
   1d0c8:	00029598 	.word	0x00029598

0001d0cc <lll_conn_prepare_reset>:
	trx_cnt = 0U;
   1d0cc:	4a03      	ldr	r2, [pc, #12]	; (1d0dc <lll_conn_prepare_reset+0x10>)
   1d0ce:	2300      	movs	r3, #0
   1d0d0:	8013      	strh	r3, [r2, #0]
	crc_expire = 0U;
   1d0d2:	4a03      	ldr	r2, [pc, #12]	; (1d0e0 <lll_conn_prepare_reset+0x14>)
   1d0d4:	7013      	strb	r3, [r2, #0]
	crc_valid = 0U;
   1d0d6:	4a03      	ldr	r2, [pc, #12]	; (1d0e4 <lll_conn_prepare_reset+0x18>)
   1d0d8:	7013      	strb	r3, [r2, #0]
}
   1d0da:	4770      	bx	lr
   1d0dc:	20001d72 	.word	0x20001d72
   1d0e0:	2000231f 	.word	0x2000231f
   1d0e4:	20002320 	.word	0x20002320

0001d0e8 <lll_conn_abort_cb>:
{
   1d0e8:	b510      	push	{r4, lr}
   1d0ea:	460c      	mov	r4, r1
	if (!prepare_param) {
   1d0ec:	b930      	cbnz	r0, 1d0fc <lll_conn_abort_cb+0x14>
		radio_isr_set(isr_done, param);
   1d0ee:	480e      	ldr	r0, [pc, #56]	; (1d128 <lll_conn_abort_cb+0x40>)
   1d0f0:	f000 fbe4 	bl	1d8bc <radio_isr_set>
}
   1d0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1d0f8:	f000 bcae 	b.w	1da58 <radio_disable>
	err = lll_hfclock_off();
   1d0fc:	f7ff f8e0 	bl	1c2c0 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   1d100:	b168      	cbz	r0, 1d11e <lll_conn_abort_cb+0x36>
   1d102:	3010      	adds	r0, #16
   1d104:	d00b      	beq.n	1d11e <lll_conn_abort_cb+0x36>
   1d106:	4a09      	ldr	r2, [pc, #36]	; (1d12c <lll_conn_abort_cb+0x44>)
   1d108:	4909      	ldr	r1, [pc, #36]	; (1d130 <lll_conn_abort_cb+0x48>)
   1d10a:	480a      	ldr	r0, [pc, #40]	; (1d134 <lll_conn_abort_cb+0x4c>)
   1d10c:	2382      	movs	r3, #130	; 0x82
   1d10e:	f006 f8dc 	bl	232ca <printk>
   1d112:	4040      	eors	r0, r0
   1d114:	f380 8811 	msr	BASEPRI, r0
   1d118:	f04f 0003 	mov.w	r0, #3
   1d11c:	df02      	svc	2
	lll_done(param);
   1d11e:	4620      	mov	r0, r4
}
   1d120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1d124:	f7ff b800 	b.w	1c128 <lll_done>
   1d128:	0001d031 	.word	0x0001d031
   1d12c:	0002f4ba 	.word	0x0002f4ba
   1d130:	0002f40e 	.word	0x0002f40e
   1d134:	000297e6 	.word	0x000297e6

0001d138 <lll_conn_rx_pkt_set>:
{
   1d138:	b510      	push	{r4, lr}
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d13a:	2001      	movs	r0, #1
   1d13c:	f7fc fcd4 	bl	19ae8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d140:	4604      	mov	r4, r0
   1d142:	b960      	cbnz	r0, 1d15e <lll_conn_rx_pkt_set+0x26>
   1d144:	4a0d      	ldr	r2, [pc, #52]	; (1d17c <lll_conn_rx_pkt_set+0x44>)
   1d146:	490e      	ldr	r1, [pc, #56]	; (1d180 <lll_conn_rx_pkt_set+0x48>)
   1d148:	480e      	ldr	r0, [pc, #56]	; (1d184 <lll_conn_rx_pkt_set+0x4c>)
   1d14a:	f240 13bf 	movw	r3, #447	; 0x1bf
   1d14e:	f006 f8bc 	bl	232ca <printk>
   1d152:	4040      	eors	r0, r0
   1d154:	f380 8811 	msr	BASEPRI, r0
   1d158:	f04f 0003 	mov.w	r0, #3
   1d15c:	df02      	svc	2
	radio_phy_set(phy, 0);
   1d15e:	2100      	movs	r1, #0
   1d160:	4608      	mov	r0, r1
   1d162:	f000 fbef 	bl	1d944 <radio_phy_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1d166:	2008      	movs	r0, #8
   1d168:	2201      	movs	r2, #1
   1d16a:	211b      	movs	r1, #27
   1d16c:	f000 fc30 	bl	1d9d0 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1d170:	f104 0020 	add.w	r0, r4, #32
}
   1d174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1d178:	f000 bc56 	b.w	1da28 <radio_pkt_rx_set>
   1d17c:	0002f4ba 	.word	0x0002f4ba
   1d180:	0002f4a1 	.word	0x0002f4a1
   1d184:	000297e6 	.word	0x000297e6

0001d188 <lll_conn_isr_tx>:
{
   1d188:	b570      	push	{r4, r5, r6, lr}
   1d18a:	4605      	mov	r5, r0
	radio_status_reset();
   1d18c:	f000 fc76 	bl	1da7c <radio_status_reset>
	radio_tmr_status_reset();
   1d190:	f000 fd24 	bl	1dbdc <radio_tmr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1d194:	2096      	movs	r0, #150	; 0x96
   1d196:	f000 fd31 	bl	1dbfc <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1d19a:	2300      	movs	r3, #0
   1d19c:	4618      	mov	r0, r3
   1d19e:	461a      	mov	r2, r3
   1d1a0:	4619      	mov	r1, r3
   1d1a2:	f000 fcbf 	bl	1db24 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1d1a6:	4628      	mov	r0, r5
   1d1a8:	f7ff ffc6 	bl	1d138 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1d1ac:	f000 fc72 	bl	1da94 <radio_is_ready>
   1d1b0:	b160      	cbz	r0, 1d1cc <lll_conn_isr_tx+0x44>
   1d1b2:	4a12      	ldr	r2, [pc, #72]	; (1d1fc <lll_conn_isr_tx+0x74>)
   1d1b4:	4912      	ldr	r1, [pc, #72]	; (1d200 <lll_conn_isr_tx+0x78>)
   1d1b6:	4813      	ldr	r0, [pc, #76]	; (1d204 <lll_conn_isr_tx+0x7c>)
   1d1b8:	f44f 73bd 	mov.w	r3, #378	; 0x17a
   1d1bc:	f006 f885 	bl	232ca <printk>
   1d1c0:	4040      	eors	r0, r0
   1d1c2:	f380 8811 	msr	BASEPRI, r0
   1d1c6:	f04f 0003 	mov.w	r0, #3
   1d1ca:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1d1cc:	f000 fe10 	bl	1ddf0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1d1d0:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1d1d2:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1d1d4:	4608      	mov	r0, r1
   1d1d6:	f00a fd6b 	bl	27cb0 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1d1da:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1d1dc:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1d1de:	4608      	mov	r0, r1
   1d1e0:	f00a fd62 	bl	27ca8 <radio_tx_chain_delay_get>
   1d1e4:	4434      	add	r4, r6
   1d1e6:	34cb      	adds	r4, #203	; 0xcb
	radio_tmr_hcto_configure(hcto);
   1d1e8:	1a20      	subs	r0, r4, r0
   1d1ea:	f000 fdbb 	bl	1dd64 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1d1ee:	4629      	mov	r1, r5
   1d1f0:	4805      	ldr	r0, [pc, #20]	; (1d208 <lll_conn_isr_tx+0x80>)
}
   1d1f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1d1f6:	f000 bb61 	b.w	1d8bc <radio_isr_set>
   1d1fa:	bf00      	nop
   1d1fc:	0002f4ba 	.word	0x0002f4ba
   1d200:	0002f421 	.word	0x0002f421
   1d204:	000297e6 	.word	0x000297e6
   1d208:	0001d20d 	.word	0x0001d20d

0001d20c <lll_conn_isr_rx>:
{
   1d20c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d210:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1d212:	f000 fc49 	bl	1daa8 <radio_is_done>
	if (trx_done) {
   1d216:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   1d21a:	d014      	beq.n	1d246 <lll_conn_isr_rx+0x3a>
		crc_ok = radio_crc_is_valid();
   1d21c:	f000 fc64 	bl	1dae8 <radio_crc_is_valid>
   1d220:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
   1d222:	f000 fcaf 	bl	1db84 <radio_rssi_is_ready>
	radio_status_reset();
   1d226:	f000 fc29 	bl	1da7c <radio_status_reset>
	radio_tmr_status_reset();
   1d22a:	f000 fcd7 	bl	1dbdc <radio_tmr_status_reset>
	radio_rssi_status_reset();
   1d22e:	f000 fca1 	bl	1db74 <radio_rssi_status_reset>
	if (!trx_done) {
   1d232:	b955      	cbnz	r5, 1d24a <lll_conn_isr_rx+0x3e>
		radio_isr_set(isr_done, param);
   1d234:	4894      	ldr	r0, [pc, #592]	; (1d488 <lll_conn_isr_rx+0x27c>)
   1d236:	4621      	mov	r1, r4
   1d238:	f000 fb40 	bl	1d8bc <radio_isr_set>
		radio_disable();
   1d23c:	f000 fc0c 	bl	1da58 <radio_disable>
}
   1d240:	b002      	add	sp, #8
   1d242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = rssi_ready = 0U;
   1d246:	462f      	mov	r7, r5
   1d248:	e7ed      	b.n	1d226 <lll_conn_isr_rx+0x1a>
	trx_cnt++;
   1d24a:	4a90      	ldr	r2, [pc, #576]	; (1d48c <lll_conn_isr_rx+0x280>)
   1d24c:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d24e:	2001      	movs	r0, #1
	trx_cnt++;
   1d250:	3301      	adds	r3, #1
   1d252:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d254:	f7fc fc48 	bl	19ae8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d258:	4606      	mov	r6, r0
   1d25a:	b958      	cbnz	r0, 1d274 <lll_conn_isr_rx+0x68>
   1d25c:	4a8c      	ldr	r2, [pc, #560]	; (1d490 <lll_conn_isr_rx+0x284>)
   1d25e:	498d      	ldr	r1, [pc, #564]	; (1d494 <lll_conn_isr_rx+0x288>)
   1d260:	488d      	ldr	r0, [pc, #564]	; (1d498 <lll_conn_isr_rx+0x28c>)
   1d262:	23b8      	movs	r3, #184	; 0xb8
   1d264:	f006 f831 	bl	232ca <printk>
   1d268:	4040      	eors	r0, r0
   1d26a:	f380 8811 	msr	BASEPRI, r0
   1d26e:	f04f 0003 	mov.w	r0, #3
   1d272:	df02      	svc	2
	if (crc_ok) {
   1d274:	f8df 9234 	ldr.w	r9, [pc, #564]	; 1d4ac <lll_conn_isr_rx+0x2a0>
   1d278:	2f00      	cmp	r7, #0
   1d27a:	f000 80e6 	beq.w	1d44a <lll_conn_isr_rx+0x23e>

static int isr_rx_pdu(struct lll_conn *lll, struct pdu_data *pdu_data_rx,
		      struct node_tx **tx_release, u8_t *is_rx_enqueue)
{
	/* Ack for tx-ed data */
	if (pdu_data_rx->nesn != lll->sn) {
   1d27e:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1d282:	f896 1020 	ldrb.w	r1, [r6, #32]
   1d286:	f003 0201 	and.w	r2, r3, #1
   1d28a:	f3c1 0180 	ubfx	r1, r1, #2, #1
   1d28e:	4291      	cmp	r1, r2
   1d290:	f000 80a5 	beq.w	1d3de <lll_conn_isr_rx+0x1d2>
		struct node_tx *tx;
		memq_link_t *link;

		/* Increment serial number */
		lll->sn++;
   1d294:	f082 0201 	eor.w	r2, r2, #1
   1d298:	f362 0300 	bfi	r3, r2, #0, #1
   1d29c:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56

#if defined(CONFIG_BT_PERIPHERAL)
		/* First ack (and redundantly any other ack) enable use of
		 * slave latency.
		 */
		if (lll->role) {
   1d2a0:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1d2a4:	2b00      	cmp	r3, #0
			lll->slave.latency_enabled = 1;
   1d2a6:	bfbe      	ittt	lt
   1d2a8:	f894 3024 	ldrblt.w	r3, [r4, #36]	; 0x24
   1d2ac:	f043 0301 	orrlt.w	r3, r3, #1
   1d2b0:	f884 3024 	strblt.w	r3, [r4, #36]	; 0x24
		}
#endif /* CONFIG_BT_PERIPHERAL */

		if (!lll->empty) {
   1d2b4:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1d2b8:	f013 0504 	ands.w	r5, r3, #4
   1d2bc:	f040 808b 	bne.w	1d3d6 <lll_conn_isr_rx+0x1ca>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1d2c0:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   1d2c4:	aa01      	add	r2, sp, #4
   1d2c6:	f009 ffe3 	bl	27290 <memq_peek>
		} else {
			lll->empty = 0;
			link = NULL;
		}

		if (link) {
   1d2ca:	4680      	mov	r8, r0
   1d2cc:	2800      	cmp	r0, #0
   1d2ce:	f040 8089 	bne.w	1d3e4 <lll_conn_isr_rx+0x1d8>
			}
		}
	}

	/* process received data */
	if ((pdu_data_rx->sn == lll->nesn) &&
   1d2d2:	f896 2020 	ldrb.w	r2, [r6, #32]
   1d2d6:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1d2da:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1d2de:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1d2e2:	429a      	cmp	r2, r3
   1d2e4:	f000 809d 	beq.w	1d422 <lll_conn_isr_rx+0x216>
	u8_t is_rx_enqueue = 0U;
   1d2e8:	f04f 0a00 	mov.w	sl, #0
		crc_valid = 1U;
   1d2ec:	4b6b      	ldr	r3, [pc, #428]	; (1d49c <lll_conn_isr_rx+0x290>)
		crc_expire = 0U;
   1d2ee:	2500      	movs	r5, #0
		crc_valid = 1U;
   1d2f0:	2201      	movs	r2, #1
		crc_expire = 0U;
   1d2f2:	f889 5000 	strb.w	r5, [r9]
		crc_valid = 1U;
   1d2f6:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1d2f8:	a901      	add	r1, sp, #4
   1d2fa:	4620      	mov	r0, r4
   1d2fc:	f00a fc47 	bl	27b8e <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1d300:	2d00      	cmp	r5, #0
   1d302:	f040 80b5 	bne.w	1d470 <lll_conn_isr_rx+0x264>
   1d306:	b147      	cbz	r7, 1d31a <lll_conn_isr_rx+0x10e>
   1d308:	f896 3020 	ldrb.w	r3, [r6, #32]
   1d30c:	06db      	lsls	r3, r3, #27
   1d30e:	d404      	bmi.n	1d31a <lll_conn_isr_rx+0x10e>
				     (pdu_data_tx->len == 0));
   1d310:	9b01      	ldr	r3, [sp, #4]
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1d312:	785b      	ldrb	r3, [r3, #1]
   1d314:	2b00      	cmp	r3, #0
   1d316:	f000 80ab 	beq.w	1d470 <lll_conn_isr_rx+0x264>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1d31a:	2096      	movs	r0, #150	; 0x96
   1d31c:	f000 fc6e 	bl	1dbfc <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1d320:	2000      	movs	r0, #0
   1d322:	f000 fbf3 	bl	1db0c <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1d326:	485e      	ldr	r0, [pc, #376]	; (1d4a0 <lll_conn_isr_rx+0x294>)
   1d328:	4621      	mov	r1, r4
   1d32a:	f000 fac7 	bl	1d8bc <radio_isr_set>
		radio_tmr_end_capture();
   1d32e:	f000 fd51 	bl	1ddd4 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1d332:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1d336:	9901      	ldr	r1, [sp, #4]
   1d338:	f3c3 0200 	ubfx	r2, r3, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1d33c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1d340:	009b      	lsls	r3, r3, #2
   1d342:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1d346:	780a      	ldrb	r2, [r1, #0]
   1d348:	f022 020c 	bic.w	r2, r2, #12
   1d34c:	4313      	orrs	r3, r2
   1d34e:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1d350:	4620      	mov	r0, r4
   1d352:	f00a fc0c 	bl	27b6e <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1d356:	f000 fb9d 	bl	1da94 <radio_is_ready>
   1d35a:	b160      	cbz	r0, 1d376 <lll_conn_isr_rx+0x16a>
   1d35c:	4a4c      	ldr	r2, [pc, #304]	; (1d490 <lll_conn_isr_rx+0x284>)
   1d35e:	4951      	ldr	r1, [pc, #324]	; (1d4a4 <lll_conn_isr_rx+0x298>)
   1d360:	484d      	ldr	r0, [pc, #308]	; (1d498 <lll_conn_isr_rx+0x28c>)
   1d362:	f44f 7391 	mov.w	r3, #290	; 0x122
   1d366:	f005 ffb0 	bl	232ca <printk>
   1d36a:	4040      	eors	r0, r0
   1d36c:	f380 8811 	msr	BASEPRI, r0
   1d370:	f04f 0003 	mov.w	r0, #3
   1d374:	df02      	svc	2
	if (!radio_tmr_aa_restore()) {
   1d376:	f000 fd21 	bl	1ddbc <radio_tmr_aa_restore>
   1d37a:	b918      	cbnz	r0, 1d384 <lll_conn_isr_rx+0x178>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1d37c:	f000 fd12 	bl	1dda4 <radio_tmr_aa_get>
   1d380:	f000 fd16 	bl	1ddb0 <radio_tmr_aa_save>
	if (tx_release) {
   1d384:	f1b8 0f00 	cmp.w	r8, #0
   1d388:	d079      	beq.n	1d47e <lll_conn_isr_rx+0x272>
		LL_ASSERT(lll->handle != 0xFFFF);
   1d38a:	8a22      	ldrh	r2, [r4, #16]
   1d38c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d390:	429a      	cmp	r2, r3
   1d392:	d10c      	bne.n	1d3ae <lll_conn_isr_rx+0x1a2>
   1d394:	4a3e      	ldr	r2, [pc, #248]	; (1d490 <lll_conn_isr_rx+0x284>)
   1d396:	4944      	ldr	r1, [pc, #272]	; (1d4a8 <lll_conn_isr_rx+0x29c>)
   1d398:	483f      	ldr	r0, [pc, #252]	; (1d498 <lll_conn_isr_rx+0x28c>)
   1d39a:	f240 132f 	movw	r3, #303	; 0x12f
   1d39e:	f005 ff94 	bl	232ca <printk>
   1d3a2:	4040      	eors	r0, r0
   1d3a4:	f380 8811 	msr	BASEPRI, r0
   1d3a8:	f04f 0003 	mov.w	r0, #3
   1d3ac:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1d3ae:	8a20      	ldrh	r0, [r4, #16]
   1d3b0:	4641      	mov	r1, r8
   1d3b2:	f7fe fbaf 	bl	1bb14 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1d3b6:	f1ba 0f00 	cmp.w	sl, #0
   1d3ba:	d009      	beq.n	1d3d0 <lll_conn_isr_rx+0x1c4>
		ull_pdu_rx_alloc();
   1d3bc:	f7fc fbac 	bl	19b18 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1d3c0:	2302      	movs	r3, #2
   1d3c2:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1d3c4:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1d3c6:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1d3c8:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1d3ca:	4631      	mov	r1, r6
   1d3cc:	f7fc fbba 	bl	19b44 <ull_rx_put>
		ull_rx_sched();
   1d3d0:	f7fc fbc8 	bl	19b64 <ull_rx_sched>
	ARG_UNUSED(rssi_ready);
   1d3d4:	e734      	b.n	1d240 <lll_conn_isr_rx+0x34>
			lll->empty = 0;
   1d3d6:	f36f 0382 	bfc	r3, #2, #1
   1d3da:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
	struct node_tx *tx_release = NULL;
   1d3de:	f04f 0800 	mov.w	r8, #0
   1d3e2:	e776      	b.n	1d2d2 <lll_conn_isr_rx+0xc6>
					       lll->packet_tx_head_offset);
   1d3e4:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
			pdu_data_tx_len = pdu_data_tx->len;
   1d3e8:	9a01      	ldr	r2, [sp, #4]
   1d3ea:	441a      	add	r2, r3
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1d3ec:	7952      	ldrb	r2, [r2, #5]
   1d3ee:	4413      	add	r3, r2
			if (offset < lll->packet_tx_head_len) {
   1d3f0:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1d3f4:	b2db      	uxtb	r3, r3
			if (offset < lll->packet_tx_head_len) {
   1d3f6:	4293      	cmp	r3, r2
   1d3f8:	d202      	bcs.n	1d400 <lll_conn_isr_rx+0x1f4>
				lll->packet_tx_head_offset = offset;
   1d3fa:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
   1d3fe:	e7ee      	b.n	1d3de <lll_conn_isr_rx+0x1d2>
			} else if (offset == lll->packet_tx_head_len) {
   1d400:	d1ed      	bne.n	1d3de <lll_conn_isr_rx+0x1d2>
				memq_dequeue(lll->memq_tx.tail,
   1d402:	462a      	mov	r2, r5
   1d404:	6c60      	ldr	r0, [r4, #68]	; 0x44
				lll->packet_tx_head_len = 0;
   1d406:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
				memq_dequeue(lll->memq_tx.tail,
   1d40a:	f104 0140 	add.w	r1, r4, #64	; 0x40
   1d40e:	f009 ff47 	bl	272a0 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1d412:	9b01      	ldr	r3, [sp, #4]
   1d414:	681a      	ldr	r2, [r3, #0]
   1d416:	f8c8 2000 	str.w	r2, [r8]
				tx->next = link;
   1d41a:	f8c3 8000 	str.w	r8, [r3]
   1d41e:	4698      	mov	r8, r3
   1d420:	e757      	b.n	1d2d2 <lll_conn_isr_rx+0xc6>
	    /* check so that we will NEVER use the rx buffer reserved for empty
	     * packet and internal control enqueue
	     */
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1d422:	2003      	movs	r0, #3
   1d424:	f7fc fb60 	bl	19ae8 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1d428:	2800      	cmp	r0, #0
   1d42a:	f43f af5d 	beq.w	1d2e8 <lll_conn_isr_rx+0xdc>
		/* Increment next expected serial number */
		lll->nesn++;
   1d42e:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1d432:	f083 0302 	eor.w	r3, r3, #2
   1d436:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56

		if (pdu_data_rx->len != 0) {
   1d43a:	f896 a021 	ldrb.w	sl, [r6, #33]	; 0x21
	u8_t is_rx_enqueue = 0U;
   1d43e:	f1ba 0a00 	subs.w	sl, sl, #0
   1d442:	bf18      	it	ne
   1d444:	f04f 0a01 	movne.w	sl, #1
   1d448:	e750      	b.n	1d2ec <lll_conn_isr_rx+0xe0>
		if (crc_expire == 0U) {
   1d44a:	f899 3000 	ldrb.w	r3, [r9]
   1d44e:	b913      	cbnz	r3, 1d456 <lll_conn_isr_rx+0x24a>
			crc_expire = 2U;
   1d450:	2302      	movs	r3, #2
   1d452:	f889 3000 	strb.w	r3, [r9]
		crc_expire--;
   1d456:	f899 5000 	ldrb.w	r5, [r9]
   1d45a:	3d01      	subs	r5, #1
   1d45c:	b2ed      	uxtb	r5, r5
   1d45e:	f889 5000 	strb.w	r5, [r9]
	u8_t is_rx_enqueue = 0U;
   1d462:	f04f 0a00 	mov.w	sl, #0
		is_crc_backoff = (crc_expire == 0U);
   1d466:	fab5 f585 	clz	r5, r5
   1d46a:	096d      	lsrs	r5, r5, #5
	struct node_tx *tx_release = NULL;
   1d46c:	46d0      	mov	r8, sl
   1d46e:	e743      	b.n	1d2f8 <lll_conn_isr_rx+0xec>
		radio_isr_set(isr_done, param);
   1d470:	4805      	ldr	r0, [pc, #20]	; (1d488 <lll_conn_isr_rx+0x27c>)
   1d472:	4621      	mov	r1, r4
   1d474:	f000 fa22 	bl	1d8bc <radio_isr_set>
			radio_switch_complete_and_disable();
   1d478:	f000 fb5e 	bl	1db38 <radio_switch_complete_and_disable>
   1d47c:	e759      	b.n	1d332 <lll_conn_isr_rx+0x126>
	if (is_rx_enqueue) {
   1d47e:	f1ba 0f00 	cmp.w	sl, #0
   1d482:	f43f aedd 	beq.w	1d240 <lll_conn_isr_rx+0x34>
   1d486:	e799      	b.n	1d3bc <lll_conn_isr_rx+0x1b0>
   1d488:	0001d031 	.word	0x0001d031
   1d48c:	20001d72 	.word	0x20001d72
   1d490:	0002f4ba 	.word	0x0002f4ba
   1d494:	0002f4a1 	.word	0x0002f4a1
   1d498:	000297e6 	.word	0x000297e6
   1d49c:	20002320 	.word	0x20002320
   1d4a0:	0001d189 	.word	0x0001d189
   1d4a4:	0002f421 	.word	0x0002f421
   1d4a8:	0002f505 	.word	0x0002f505
   1d4ac:	2000231f 	.word	0x2000231f

0001d4b0 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *prepare_param)
{
   1d4b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = prepare_param->param;
   1d4b4:	68c4      	ldr	r4, [r0, #12]

	DEBUG_RADIO_START_S(1);

	/* TODO: Do the below in ULL ?  */

	lazy = prepare_param->lazy;
   1d4b6:	8903      	ldrh	r3, [r0, #8]

	/* Calc window widening */
	if (lll->role) {
   1d4b8:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
   1d4bc:	2a00      	cmp	r2, #0
{
   1d4be:	4606      	mov	r6, r0
	if (lll->role) {
   1d4c0:	da09      	bge.n	1d4d6 <prepare_cb+0x26>
		lll->slave.window_widening_prepare_us +=
		    lll->slave.window_widening_periodic_us * (lazy + 1);
   1d4c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		lll->slave.window_widening_prepare_us +=
   1d4c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
		    lll->slave.window_widening_periodic_us * (lazy + 1);
   1d4c6:	fb03 2202 	mla	r2, r3, r2, r2
		lll->slave.window_widening_prepare_us +=
   1d4ca:	440a      	add	r2, r1
		if (lll->slave.window_widening_prepare_us >
		    lll->slave.window_widening_max_us) {
   1d4cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			lll->slave.window_widening_prepare_us =
   1d4ce:	4291      	cmp	r1, r2
   1d4d0:	bf94      	ite	ls
   1d4d2:	6321      	strls	r1, [r4, #48]	; 0x30
   1d4d4:	6322      	strhi	r2, [r4, #48]	; 0x30
				lll->slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	lll->latency_prepare += lazy;
   1d4d6:	8ae2      	ldrh	r2, [r4, #22]
   1d4d8:	4413      	add	r3, r2

	/* calc current event counter value */
	event_counter = lll->event_counter + lll->latency_prepare;
   1d4da:	8b62      	ldrh	r2, [r4, #26]
	lll->latency_prepare += lazy;
   1d4dc:	b29b      	uxth	r3, r3
   1d4de:	82e3      	strh	r3, [r4, #22]
	event_counter = lll->event_counter + lll->latency_prepare;
   1d4e0:	4413      	add	r3, r2

	/* store the next event counter value */
	lll->event_counter = event_counter + 1;
   1d4e2:	3301      	adds	r3, #1
   1d4e4:	8363      	strh	r3, [r4, #26]

	/* TODO: Do the above in ULL ?  */

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1d4e6:	f7ff fdf1 	bl	1d0cc <lll_conn_prepare_reset>

	/* TODO: can we do something in ULL? */
	lll->latency_event = lll->latency_prepare;
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1d4ea:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare;
   1d4ee:	8ae2      	ldrh	r2, [r4, #22]
   1d4f0:	8322      	strh	r2, [r4, #24]
	lll->latency_prepare = 0;
   1d4f2:	2700      	movs	r7, #0
	if (lll->data_chan_sel) {
   1d4f4:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   1d4f6:	82e7      	strh	r7, [r4, #22]
	if (lll->data_chan_sel) {
   1d4f8:	d57a      	bpl.n	1d5f0 <prepare_cb+0x140>
					       lll->data_chan_id,
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
   1d4fa:	4a4d      	ldr	r2, [pc, #308]	; (1d630 <prepare_cb+0x180>)
   1d4fc:	494d      	ldr	r1, [pc, #308]	; (1d634 <prepare_cb+0x184>)
   1d4fe:	484e      	ldr	r0, [pc, #312]	; (1d638 <prepare_cb+0x188>)
   1d500:	2389      	movs	r3, #137	; 0x89
   1d502:	f005 fee2 	bl	232ca <printk>
   1d506:	4040      	eors	r0, r0
   1d508:	f380 8811 	msr	BASEPRI, r0
   1d50c:	f04f 0003 	mov.w	r0, #3
   1d510:	df02      	svc	2
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   1d512:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1d516:	4413      	add	r3, r2
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   1d518:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
   1d51a:	429a      	cmp	r2, r3
   1d51c:	bf94      	ite	ls
   1d51e:	6362      	strls	r2, [r4, #52]	; 0x34
   1d520:	6363      	strhi	r3, [r4, #52]	; 0x34
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   1d522:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   1d526:	2500      	movs	r5, #0
	lll->slave.window_size_event_us +=
   1d528:	4413      	add	r3, r2
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   1d52a:	e9c4 530e 	strd	r5, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   1d52e:	6325      	str	r5, [r4, #48]	; 0x30

	/* Start setting up Radio h/w */
	radio_reset();
   1d530:	f000 f9e4 	bl	1d8fc <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1d534:	4628      	mov	r0, r5
   1d536:	f000 fa15 	bl	1d964 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   1d53a:	4620      	mov	r0, r4
   1d53c:	f7ff fdfc 	bl	1d138 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1d540:	f104 0008 	add.w	r0, r4, #8
   1d544:	f000 fa2c 	bl	1d9a0 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((u32_t)lll->crc_init[2] << 16) |
			     ((u32_t)lll->crc_init[1] << 8) |
   1d548:	7b63      	ldrb	r3, [r4, #13]
			    (((u32_t)lll->crc_init[2] << 16) |
   1d54a:	7ba1      	ldrb	r1, [r4, #14]
			     ((u32_t)lll->crc_init[1] << 8) |
   1d54c:	021b      	lsls	r3, r3, #8
			    (((u32_t)lll->crc_init[2] << 16) |
   1d54e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)lll->crc_init[0])));
   1d552:	7b21      	ldrb	r1, [r4, #12]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1d554:	f240 605b 	movw	r0, #1627	; 0x65b
   1d558:	4319      	orrs	r1, r3
   1d55a:	f000 fab9 	bl	1dad0 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   1d55e:	4638      	mov	r0, r7
   1d560:	f7fe fe34 	bl	1c1cc <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1d564:	4621      	mov	r1, r4
   1d566:	4835      	ldr	r0, [pc, #212]	; (1d63c <prepare_cb+0x18c>)
   1d568:	f000 f9a8 	bl	1d8bc <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1d56c:	2096      	movs	r0, #150	; 0x96
   1d56e:	f000 fb45 	bl	1dbfc <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1d572:	462b      	mov	r3, r5
   1d574:	462a      	mov	r2, r5
   1d576:	4629      	mov	r1, r5
   1d578:	4628      	mov	r0, r5
   1d57a:	f000 fad3 	bl	1db24 <radio_switch_complete_and_tx>
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = prepare_param->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   1d57e:	f8d4 9000 	ldr.w	r9, [r4]
	ticks_at_event = prepare_param->ticks_at_expire;
   1d582:	6837      	ldr	r7, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1d584:	4648      	mov	r0, r9
   1d586:	f00a f9ad 	bl	278e4 <lll_evt_offset_get>
   1d58a:	eb07 0800 	add.w	r8, r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = prepare_param->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1d58e:	6872      	ldr	r2, [r6, #4]
   1d590:	f108 0109 	add.w	r1, r8, #9
   1d594:	4628      	mov	r0, r5
   1d596:	f000 fb3d 	bl	1dc14 <radio_tmr_start>
   1d59a:	4607      	mov	r7, r0

	radio_tmr_aa_capture();
   1d59c:	f000 fbee 	bl	1dd7c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1d5a0:	4628      	mov	r0, r5
   1d5a2:	f000 fc05 	bl	1ddb0 <radio_tmr_aa_save>

	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   1d5a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	       (lll->slave.window_widening_event_us << 1) +
   1d5a8:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1d5aa:	f103 0678 	add.w	r6, r3, #120	; 0x78
   1d5ae:	eb06 0640 	add.w	r6, r6, r0, lsl #1
#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
	hcto += addr_us_get(lll->phy_rx);
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
#else /* !CONFIG_BT_CTLR_PHY */
	hcto += radio_rx_ready_delay_get(0, 0);
   1d5b2:	4629      	mov	r1, r5
   1d5b4:	4628      	mov	r0, r5
   1d5b6:	f00a fb79 	bl	27cac <radio_rx_ready_delay_get>
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
   1d5ba:	443e      	add	r6, r7
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
   1d5bc:	4629      	mov	r1, r5
   1d5be:	4406      	add	r6, r0
   1d5c0:	4628      	mov	r0, r5
   1d5c2:	f00a fb75 	bl	27cb0 <radio_rx_chain_delay_get>
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1d5c6:	4430      	add	r0, r6
   1d5c8:	f000 fbcc 	bl	1dd64 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1d5cc:	7c21      	ldrb	r1, [r4, #16]
   1d5ce:	3105      	adds	r1, #5
   1d5d0:	4642      	mov	r2, r8
   1d5d2:	b2c9      	uxtb	r1, r1
   1d5d4:	4648      	mov	r0, r9
   1d5d6:	f00a f993 	bl	27900 <lll_preempt_calc>
   1d5da:	b1b0      	cbz	r0, 1d60a <prepare_cb+0x15a>
			     ticks_at_event)) {
		radio_isr_set(lll_conn_isr_abort, lll);
   1d5dc:	4818      	ldr	r0, [pc, #96]	; (1d640 <prepare_cb+0x190>)
   1d5de:	4621      	mov	r1, r4
   1d5e0:	f000 f96c 	bl	1d8bc <radio_isr_set>
		radio_disable();
   1d5e4:	f000 fa38 	bl	1da58 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1d5e8:	2000      	movs	r0, #0
   1d5ea:	b003      	add	sp, #12
   1d5ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1d5f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1d5f4:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1d5f8:	9300      	str	r3, [sp, #0]
   1d5fa:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1d5fe:	f104 031c 	add.w	r3, r4, #28
   1d602:	f009 ff9e 	bl	27542 <lll_chan_sel_1>
   1d606:	4607      	mov	r7, r0
   1d608:	e783      	b.n	1d512 <prepare_cb+0x62>
		ret = lll_prepare_done(lll);
   1d60a:	4620      	mov	r0, r4
   1d60c:	f00a f968 	bl	278e0 <lll_prepare_done>
		LL_ASSERT(!ret);
   1d610:	2800      	cmp	r0, #0
   1d612:	d0e9      	beq.n	1d5e8 <prepare_cb+0x138>
   1d614:	4a06      	ldr	r2, [pc, #24]	; (1d630 <prepare_cb+0x180>)
   1d616:	490b      	ldr	r1, [pc, #44]	; (1d644 <prepare_cb+0x194>)
   1d618:	4807      	ldr	r0, [pc, #28]	; (1d638 <prepare_cb+0x188>)
   1d61a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1d61e:	f005 fe54 	bl	232ca <printk>
   1d622:	4040      	eors	r0, r0
   1d624:	f380 8811 	msr	BASEPRI, r0
   1d628:	f04f 0003 	mov.w	r0, #3
   1d62c:	df02      	svc	2
   1d62e:	e7db      	b.n	1d5e8 <prepare_cb+0x138>
   1d630:	0002f52c 	.word	0x0002f52c
   1d634:	0002d2c6 	.word	0x0002d2c6
   1d638:	000297e6 	.word	0x000297e6
   1d63c:	0001d20d 	.word	0x0001d20d
   1d640:	00027b4d 	.word	0x00027b4d
   1d644:	0002eeba 	.word	0x0002eeba

0001d648 <lll_slave_prepare>:
{
   1d648:	b513      	push	{r0, r1, r4, lr}
   1d64a:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1d64c:	f7fe fe30 	bl	1c2b0 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1d650:	b168      	cbz	r0, 1d66e <lll_slave_prepare+0x26>
   1d652:	3044      	adds	r0, #68	; 0x44
   1d654:	d00b      	beq.n	1d66e <lll_slave_prepare+0x26>
   1d656:	4a12      	ldr	r2, [pc, #72]	; (1d6a0 <lll_slave_prepare+0x58>)
   1d658:	4912      	ldr	r1, [pc, #72]	; (1d6a4 <lll_slave_prepare+0x5c>)
   1d65a:	4813      	ldr	r0, [pc, #76]	; (1d6a8 <lll_slave_prepare+0x60>)
   1d65c:	2346      	movs	r3, #70	; 0x46
   1d65e:	f005 fe34 	bl	232ca <printk>
   1d662:	4040      	eors	r0, r0
   1d664:	f380 8811 	msr	BASEPRI, r0
   1d668:	f04f 0003 	mov.w	r0, #3
   1d66c:	df02      	svc	2
	err = lll_prepare(lll_conn_is_abort_cb, lll_conn_abort_cb, prepare_cb,
   1d66e:	4a0f      	ldr	r2, [pc, #60]	; (1d6ac <lll_slave_prepare+0x64>)
   1d670:	490f      	ldr	r1, [pc, #60]	; (1d6b0 <lll_slave_prepare+0x68>)
   1d672:	4810      	ldr	r0, [pc, #64]	; (1d6b4 <lll_slave_prepare+0x6c>)
   1d674:	9400      	str	r4, [sp, #0]
   1d676:	2300      	movs	r3, #0
   1d678:	f00a f929 	bl	278ce <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1d67c:	b168      	cbz	r0, 1d69a <lll_slave_prepare+0x52>
   1d67e:	3044      	adds	r0, #68	; 0x44
   1d680:	d00b      	beq.n	1d69a <lll_slave_prepare+0x52>
   1d682:	4a07      	ldr	r2, [pc, #28]	; (1d6a0 <lll_slave_prepare+0x58>)
   1d684:	4907      	ldr	r1, [pc, #28]	; (1d6a4 <lll_slave_prepare+0x5c>)
   1d686:	4808      	ldr	r0, [pc, #32]	; (1d6a8 <lll_slave_prepare+0x60>)
   1d688:	234a      	movs	r3, #74	; 0x4a
   1d68a:	f005 fe1e 	bl	232ca <printk>
   1d68e:	4040      	eors	r0, r0
   1d690:	f380 8811 	msr	BASEPRI, r0
   1d694:	f04f 0003 	mov.w	r0, #3
   1d698:	df02      	svc	2
}
   1d69a:	b002      	add	sp, #8
   1d69c:	bd10      	pop	{r4, pc}
   1d69e:	bf00      	nop
   1d6a0:	0002f52c 	.word	0x0002f52c
   1d6a4:	0002f433 	.word	0x0002f433
   1d6a8:	000297e6 	.word	0x000297e6
   1d6ac:	0001d4b1 	.word	0x0001d4b1
   1d6b0:	0001d0e9 	.word	0x0001d0e9
   1d6b4:	00027b47 	.word	0x00027b47

0001d6b8 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1d6b8:	4b05      	ldr	r3, [pc, #20]	; (1d6d0 <cntr_init+0x18>)
   1d6ba:	2200      	movs	r2, #0
   1d6bc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1d6c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1d6c4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1d6c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1d6cc:	4770      	bx	lr
   1d6ce:	bf00      	nop
   1d6d0:	4000b000 	.word	0x4000b000

0001d6d4 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
   1d6d4:	4a04      	ldr	r2, [pc, #16]	; (1d6e8 <cntr_start+0x14>)
   1d6d6:	7813      	ldrb	r3, [r2, #0]
   1d6d8:	1c59      	adds	r1, r3, #1
   1d6da:	7011      	strb	r1, [r2, #0]
   1d6dc:	2001      	movs	r0, #1
   1d6de:	b913      	cbnz	r3, 1d6e6 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1d6e0:	4a02      	ldr	r2, [pc, #8]	; (1d6ec <cntr_start+0x18>)
   1d6e2:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1d6e4:	4618      	mov	r0, r3
}
   1d6e6:	4770      	bx	lr
   1d6e8:	20002321 	.word	0x20002321
   1d6ec:	4000b000 	.word	0x4000b000

0001d6f0 <cntr_stop>:

u32_t cntr_stop(void)
{
   1d6f0:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1d6f2:	4c0d      	ldr	r4, [pc, #52]	; (1d728 <cntr_stop+0x38>)
   1d6f4:	7823      	ldrb	r3, [r4, #0]
   1d6f6:	b95b      	cbnz	r3, 1d710 <cntr_stop+0x20>
   1d6f8:	4a0c      	ldr	r2, [pc, #48]	; (1d72c <cntr_stop+0x3c>)
   1d6fa:	490d      	ldr	r1, [pc, #52]	; (1d730 <cntr_stop+0x40>)
   1d6fc:	480d      	ldr	r0, [pc, #52]	; (1d734 <cntr_stop+0x44>)
   1d6fe:	232e      	movs	r3, #46	; 0x2e
   1d700:	f005 fde3 	bl	232ca <printk>
   1d704:	4040      	eors	r0, r0
   1d706:	f380 8811 	msr	BASEPRI, r0
   1d70a:	f04f 0003 	mov.w	r0, #3
   1d70e:	df02      	svc	2

	if (--_refcount) {
   1d710:	7820      	ldrb	r0, [r4, #0]
   1d712:	3801      	subs	r0, #1
   1d714:	b2c0      	uxtb	r0, r0
   1d716:	7020      	strb	r0, [r4, #0]
   1d718:	2301      	movs	r3, #1
   1d71a:	b910      	cbnz	r0, 1d722 <cntr_stop+0x32>
   1d71c:	4a06      	ldr	r2, [pc, #24]	; (1d738 <cntr_stop+0x48>)
   1d71e:	6013      	str	r3, [r2, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1d720:	bd10      	pop	{r4, pc}
		return 1;
   1d722:	4618      	mov	r0, r3
   1d724:	e7fc      	b.n	1d720 <cntr_stop+0x30>
   1d726:	bf00      	nop
   1d728:	20002321 	.word	0x20002321
   1d72c:	0002f58a 	.word	0x0002f58a
   1d730:	0002f5d6 	.word	0x0002f5d6
   1d734:	000297e6 	.word	0x000297e6
   1d738:	4000b004 	.word	0x4000b004

0001d73c <cntr_cnt_get>:
     return p_reg->COUNTER;
   1d73c:	4b01      	ldr	r3, [pc, #4]	; (1d744 <cntr_cnt_get+0x8>)
   1d73e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1d742:	4770      	bx	lr
   1d744:	4000b000 	.word	0x4000b000

0001d748 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1d748:	4b02      	ldr	r3, [pc, #8]	; (1d754 <cntr_cmp_set+0xc>)
   1d74a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1d74e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1d752:	4770      	bx	lr
   1d754:	4000b000 	.word	0x4000b000

0001d758 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1d758:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   1d75a:	4b13      	ldr	r3, [pc, #76]	; (1d7a8 <do_ecb+0x50>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d75c:	4c13      	ldr	r4, [pc, #76]	; (1d7ac <do_ecb+0x54>)
   1d75e:	2501      	movs	r5, #1
   1d760:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
   1d762:	2700      	movs	r7, #0
   1d764:	46a6      	mov	lr, r4
   1d766:	461a      	mov	r2, r3
   1d768:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   1d76a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1d76e:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1d772:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
   1d776:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1d778:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   1d77c:	b931      	cbnz	r1, 1d78c <do_ecb+0x34>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1d77e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1d782:	b919      	cbnz	r1, 1d78c <do_ecb+0x34>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1d784:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1d788:	2900      	cmp	r1, #0
   1d78a:	d1f5      	bne.n	1d778 <do_ecb+0x20>
   1d78c:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1d790:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   1d794:	2900      	cmp	r1, #0
   1d796:	d1e7      	bne.n	1d768 <do_ecb+0x10>
   1d798:	f8d2 c504 	ldr.w	ip, [r2, #1284]	; 0x504
   1d79c:	f1bc 0f00 	cmp.w	ip, #0
   1d7a0:	d0e2      	beq.n	1d768 <do_ecb+0x10>

	NRF_ECB->ECBDATAPTR = 0;
   1d7a2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   1d7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d7a8:	4000e000 	.word	0x4000e000
   1d7ac:	4000e004 	.word	0x4000e004

0001d7b0 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   1d7b0:	2800      	cmp	r0, #0
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1d7b2:	4b08      	ldr	r3, [pc, #32]	; (1d7d4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   1d7b4:	bf14      	ite	ne
   1d7b6:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   1d7ba:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   1d7be:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   1d7c2:	bf14      	ite	ne
   1d7c4:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   1d7c8:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1d7cc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   1d7d0:	4770      	bx	lr
   1d7d2:	bf00      	nop
   1d7d4:	4001f000 	.word	0x4001f000

0001d7d8 <sw_switch.isra.0>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   1d7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1d7da:	4e2b      	ldr	r6, [pc, #172]	; (1d888 <sw_switch.isra.0+0xb0>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d7dc:	4f2b      	ldr	r7, [pc, #172]	; (1d88c <sw_switch.isra.0+0xb4>)
   1d7de:	7835      	ldrb	r5, [r6, #0]
   1d7e0:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 1d898 <sw_switch.isra.0+0xc0>
   1d7e4:	f8c7 c560 	str.w	ip, [r7, #1376]	; 0x560
	 */
	nrf_ppi_channel_endpoint_setup(
		NRF_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1d7e8:	00ec      	lsls	r4, r5, #3
   1d7ea:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1d7ee:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d7f2:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
   1d7f6:	f105 040b 	add.w	r4, r5, #11
   1d7fa:	b2e4      	uxtb	r4, r4
   1d7fc:	00e4      	lsls	r4, r4, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1d7fe:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   1d802:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1d806:	3fc0      	subs	r7, #192	; 0xc0
   1d808:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1d80c:	eb07 0785 	add.w	r7, r7, r5, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1d810:	462b      	mov	r3, r5

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d812:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   1d816:	b390      	cbz	r0, 1d87e <sw_switch.isra.0+0xa6>
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_2M_NS;
   1d818:	f24a 005a 	movw	r0, #41050	; 0xa05a
   1d81c:	f649 4740 	movw	r7, #40000	; 0x9c40
   1d820:	2a02      	cmp	r2, #2
   1d822:	bf14      	ite	ne
   1d824:	4602      	movne	r2, r0
   1d826:	463a      	moveq	r2, r7
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   1d828:	f242 40b8 	movw	r0, #9400	; 0x24b8
   1d82c:	f241 574a 	movw	r7, #5450	; 0x154a
   1d830:	2902      	cmp	r1, #2
   1d832:	bf14      	ite	ne
   1d834:	4601      	movne	r1, r0
   1d836:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   1d838:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
   1d83c:	440a      	add	r2, r1
   1d83e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1d842:	fbb2 f2f1 	udiv	r2, r2, r1

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d846:	4912      	ldr	r1, [pc, #72]	; (1d890 <sw_switch.isra.0+0xb8>)
   1d848:	f8c4 1514 	str.w	r1, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1d84c:	009b      	lsls	r3, r3, #2
   1d84e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d852:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		SW_SWITCH_TIMER->CC[cc]) {
   1d856:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
	if (delay <
   1d85a:	4291      	cmp	r1, r2
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1d85c:	bf8a      	itet	hi
   1d85e:	f8d3 1540 	ldrhi.w	r1, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1d862:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1d864:	1a8a      	subhi	r2, r1, r2
   1d866:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   1d86a:	4b08      	ldr	r3, [pc, #32]	; (1d88c <sw_switch.isra.0+0xb4>)
   1d86c:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1d870:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   1d874:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   1d876:	f003 0301 	and.w	r3, r3, #1
   1d87a:	7033      	strb	r3, [r6, #0]
}
   1d87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d87e:	4a05      	ldr	r2, [pc, #20]	; (1d894 <sw_switch.isra.0+0xbc>)
   1d880:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1d884:	2229      	movs	r2, #41	; 0x29
{
	nrf_ppi_task_endpoint_setup(
		NRF_PPI,
		ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_RX);
}
   1d886:	e7e1      	b.n	1d84c <sw_switch.isra.0+0x74>
   1d888:	20002322 	.word	0x20002322
   1d88c:	4001f000 	.word	0x4001f000
   1d890:	40001000 	.word	0x40001000
   1d894:	40001004 	.word	0x40001004
   1d898:	4000110c 	.word	0x4000110c

0001d89c <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1d89c:	4b04      	ldr	r3, [pc, #16]	; (1d8b0 <isr_radio+0x14>)
   1d89e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1d8a2:	b123      	cbz	r3, 1d8ae <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1d8a4:	4b03      	ldr	r3, [pc, #12]	; (1d8b4 <isr_radio+0x18>)
   1d8a6:	4a04      	ldr	r2, [pc, #16]	; (1d8b8 <isr_radio+0x1c>)
   1d8a8:	681b      	ldr	r3, [r3, #0]
   1d8aa:	6810      	ldr	r0, [r2, #0]
   1d8ac:	4718      	bx	r3
}
   1d8ae:	4770      	bx	lr
   1d8b0:	40001000 	.word	0x40001000
   1d8b4:	200019a4 	.word	0x200019a4
   1d8b8:	200019a8 	.word	0x200019a8

0001d8bc <radio_isr_set>:
{
   1d8bc:	b538      	push	{r3, r4, r5, lr}
   1d8be:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1d8c0:	2001      	movs	r0, #1
{
   1d8c2:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1d8c4:	f7e6 ff16 	bl	46f4 <arch_irq_disable>
	isr_cb_param = param;
   1d8c8:	4b08      	ldr	r3, [pc, #32]	; (1d8ec <radio_isr_set+0x30>)
   1d8ca:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   1d8cc:	4b08      	ldr	r3, [pc, #32]	; (1d8f0 <radio_isr_set+0x34>)
   1d8ce:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d8d0:	4b08      	ldr	r3, [pc, #32]	; (1d8f4 <radio_isr_set+0x38>)
   1d8d2:	2210      	movs	r2, #16
   1d8d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d8d8:	4b07      	ldr	r3, [pc, #28]	; (1d8f8 <radio_isr_set+0x3c>)
   1d8da:	2202      	movs	r2, #2
   1d8dc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1d8e0:	2001      	movs	r0, #1
}
   1d8e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1d8e6:	f7e6 bef5 	b.w	46d4 <arch_irq_enable>
   1d8ea:	bf00      	nop
   1d8ec:	200019a8 	.word	0x200019a8
   1d8f0:	200019a4 	.word	0x200019a4
   1d8f4:	40001000 	.word	0x40001000
   1d8f8:	e000e100 	.word	0xe000e100

0001d8fc <radio_reset>:
{
   1d8fc:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1d8fe:	2001      	movs	r0, #1
   1d900:	f7e6 fef8 	bl	46f4 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1d904:	4b0c      	ldr	r3, [pc, #48]	; (1d938 <radio_reset+0x3c>)
   1d906:	2200      	movs	r2, #0
   1d908:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   1d90c:	2201      	movs	r2, #1
   1d90e:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1d912:	4a0a      	ldr	r2, [pc, #40]	; (1d93c <radio_reset+0x40>)
   1d914:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   1d916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1d91a:	f023 0301 	bic.w	r3, r3, #1
   1d91e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1d922:	6013      	str	r3, [r2, #0]
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1d924:	4b06      	ldr	r3, [pc, #24]	; (1d940 <radio_reset+0x44>)
   1d926:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1d92a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1d92e:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   1d932:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   1d936:	bd08      	pop	{r3, pc}
   1d938:	40001000 	.word	0x40001000
   1d93c:	40001774 	.word	0x40001774
   1d940:	4001f000 	.word	0x4001f000

0001d944 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1d944:	4b06      	ldr	r3, [pc, #24]	; (1d960 <radio_phy_set+0x1c>)
	switch (phy) {
   1d946:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1d948:	bf14      	ite	ne
   1d94a:	2203      	movne	r2, #3
   1d94c:	2204      	moveq	r2, #4
   1d94e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1d952:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1d956:	f042 0201 	orr.w	r2, r2, #1
   1d95a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1d95e:	4770      	bx	lr
   1d960:	40001000 	.word	0x40001000

0001d964 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (u32_t)power;
   1d964:	4b01      	ldr	r3, [pc, #4]	; (1d96c <radio_tx_power_set+0x8>)
   1d966:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1d96a:	4770      	bx	lr
   1d96c:	40001000 	.word	0x40001000

0001d970 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1d970:	4b01      	ldr	r3, [pc, #4]	; (1d978 <radio_freq_chan_set+0x8>)
   1d972:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1d976:	4770      	bx	lr
   1d978:	40001000 	.word	0x40001000

0001d97c <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1d97c:	4b07      	ldr	r3, [pc, #28]	; (1d99c <radio_whiten_iv_set+0x20>)
   1d97e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1d982:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1d986:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1d98a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1d98e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1d992:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1d996:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1d99a:	4770      	bx	lr
   1d99c:	40001000 	.word	0x40001000

0001d9a0 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1d9a0:	4a0a      	ldr	r2, [pc, #40]	; (1d9cc <radio_aa_set+0x2c>)
   1d9a2:	2300      	movs	r3, #0
   1d9a4:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1d9a8:	2301      	movs	r3, #1
   1d9aa:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1d9ae:	78c3      	ldrb	r3, [r0, #3]
   1d9b0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1d9b4:	7843      	ldrb	r3, [r0, #1]
   1d9b6:	7881      	ldrb	r1, [r0, #2]
   1d9b8:	041b      	lsls	r3, r3, #16
   1d9ba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1d9be:	7801      	ldrb	r1, [r0, #0]
   1d9c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1d9c4:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1d9c8:	4770      	bx	lr
   1d9ca:	bf00      	nop
   1d9cc:	40001000 	.word	0x40001000

0001d9d0 <radio_pkt_configure>:
	switch (phy) {
   1d9d0:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1d9d4:	2b02      	cmp	r3, #2
{
   1d9d6:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1d9d8:	bf14      	ite	ne
   1d9da:	2400      	movne	r4, #0
   1d9dc:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   1d9e0:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1d9e2:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1d9e6:	bf48      	it	mi
   1d9e8:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1d9ec:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1d9ee:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1d9f2:	4320      	orrs	r0, r4
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1d9f4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1d9f8:	4a09      	ldr	r2, [pc, #36]	; (1da20 <radio_pkt_configure+0x50>)
			    RADIO_PCNF0_S1LEN_Msk) |
   1d9fa:	4303      	orrs	r3, r0
   1d9fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1da00:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1da04:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1da08:	4b06      	ldr	r3, [pc, #24]	; (1da24 <radio_pkt_configure+0x54>)
   1da0a:	4003      	ands	r3, r0
   1da0c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1da10:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1da14:	4319      	orrs	r1, r3
   1da16:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1da1a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1da1e:	bd10      	pop	{r4, pc}
   1da20:	40001000 	.word	0x40001000
   1da24:	fef80000 	.word	0xfef80000

0001da28 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
   1da28:	4b01      	ldr	r3, [pc, #4]	; (1da30 <radio_pkt_rx_set+0x8>)
   1da2a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1da2e:	4770      	bx	lr
   1da30:	40001000 	.word	0x40001000

0001da34 <radio_pkt_tx_set>:
   1da34:	4b01      	ldr	r3, [pc, #4]	; (1da3c <radio_pkt_tx_set+0x8>)
   1da36:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1da3a:	4770      	bx	lr
   1da3c:	40001000 	.word	0x40001000

0001da40 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1da40:	4b01      	ldr	r3, [pc, #4]	; (1da48 <radio_rx_enable+0x8>)
   1da42:	2201      	movs	r2, #1
   1da44:	601a      	str	r2, [r3, #0]
}
   1da46:	4770      	bx	lr
   1da48:	40001004 	.word	0x40001004

0001da4c <radio_tx_enable>:
   1da4c:	4b01      	ldr	r3, [pc, #4]	; (1da54 <radio_tx_enable+0x8>)
   1da4e:	2201      	movs	r2, #1
   1da50:	601a      	str	r2, [r3, #0]
}
   1da52:	4770      	bx	lr
   1da54:	40001000 	.word	0x40001000

0001da58 <radio_disable>:
    p_reg->CHENCLR = mask;
   1da58:	4a07      	ldr	r2, [pc, #28]	; (1da78 <radio_disable+0x20>)
   1da5a:	f44f 6390 	mov.w	r3, #1152	; 0x480
   1da5e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1da62:	2301      	movs	r3, #1
   1da64:	6053      	str	r3, [r2, #4]
   1da66:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1da68:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1da6c:	2100      	movs	r1, #0
   1da6e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   1da72:	6113      	str	r3, [r2, #16]
}
   1da74:	4770      	bx	lr
   1da76:	bf00      	nop
   1da78:	4001f000 	.word	0x4001f000

0001da7c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1da7c:	4b04      	ldr	r3, [pc, #16]	; (1da90 <radio_status_reset+0x14>)
   1da7e:	2200      	movs	r2, #0
   1da80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1da84:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1da88:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1da8c:	4770      	bx	lr
   1da8e:	bf00      	nop
   1da90:	40001000 	.word	0x40001000

0001da94 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1da94:	4b03      	ldr	r3, [pc, #12]	; (1daa4 <radio_is_ready+0x10>)
   1da96:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1da9a:	3800      	subs	r0, #0
   1da9c:	bf18      	it	ne
   1da9e:	2001      	movne	r0, #1
   1daa0:	4770      	bx	lr
   1daa2:	bf00      	nop
   1daa4:	40001000 	.word	0x40001000

0001daa8 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1daa8:	4b03      	ldr	r3, [pc, #12]	; (1dab8 <radio_is_done+0x10>)
   1daaa:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1daae:	3800      	subs	r0, #0
   1dab0:	bf18      	it	ne
   1dab2:	2001      	movne	r0, #1
   1dab4:	4770      	bx	lr
   1dab6:	bf00      	nop
   1dab8:	40001000 	.word	0x40001000

0001dabc <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1dabc:	4b03      	ldr	r3, [pc, #12]	; (1dacc <radio_is_idle+0x10>)
   1dabe:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1dac2:	fab0 f080 	clz	r0, r0
   1dac6:	0940      	lsrs	r0, r0, #5
   1dac8:	4770      	bx	lr
   1daca:	bf00      	nop
   1dacc:	40001000 	.word	0x40001000

0001dad0 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1dad0:	4b04      	ldr	r3, [pc, #16]	; (1dae4 <radio_crc_configure+0x14>)
   1dad2:	f240 1203 	movw	r2, #259	; 0x103
   1dad6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1dada:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1dade:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1dae2:	4770      	bx	lr
   1dae4:	40001000 	.word	0x40001000

0001dae8 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1dae8:	4b03      	ldr	r3, [pc, #12]	; (1daf8 <radio_crc_is_valid+0x10>)
   1daea:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1daee:	3800      	subs	r0, #0
   1daf0:	bf18      	it	ne
   1daf2:	2001      	movne	r0, #1
   1daf4:	4770      	bx	lr
   1daf6:	bf00      	nop
   1daf8:	40001000 	.word	0x40001000

0001dafc <radio_pkt_empty_get>:
}
   1dafc:	4800      	ldr	r0, [pc, #0]	; (1db00 <radio_pkt_empty_get+0x4>)
   1dafe:	4770      	bx	lr
   1db00:	2000189c 	.word	0x2000189c

0001db04 <radio_pkt_scratch_get>:
}
   1db04:	4800      	ldr	r0, [pc, #0]	; (1db08 <radio_pkt_scratch_get+0x4>)
   1db06:	4770      	bx	lr
   1db08:	200018a0 	.word	0x200018a0

0001db0c <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1db0c:	4b04      	ldr	r3, [pc, #16]	; (1db20 <radio_switch_complete_and_rx+0x14>)
   1db0e:	2103      	movs	r1, #3
   1db10:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1db14:	2100      	movs	r1, #0
{
   1db16:	4602      	mov	r2, r0
	sw_switch(0, 0, 0, phy_rx, 0);
   1db18:	4608      	mov	r0, r1
   1db1a:	f7ff be5d 	b.w	1d7d8 <sw_switch.isra.0>
   1db1e:	bf00      	nop
   1db20:	40001000 	.word	0x40001000

0001db24 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1db24:	4b03      	ldr	r3, [pc, #12]	; (1db34 <radio_switch_complete_and_tx+0x10>)
{
   1db26:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1db28:	2003      	movs	r0, #3
   1db2a:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1db2e:	2001      	movs	r0, #1
   1db30:	f7ff be52 	b.w	1d7d8 <sw_switch.isra.0>
   1db34:	40001000 	.word	0x40001000

0001db38 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1db38:	4b05      	ldr	r3, [pc, #20]	; (1db50 <radio_switch_complete_and_disable+0x18>)
   1db3a:	2203      	movs	r2, #3
   1db3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->CHENCLR = mask;
   1db40:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1db44:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1db48:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1db4c:	4770      	bx	lr
   1db4e:	bf00      	nop
   1db50:	40001000 	.word	0x40001000

0001db54 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1db54:	4a03      	ldr	r2, [pc, #12]	; (1db64 <radio_rssi_measure+0x10>)
   1db56:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1db5a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1db5e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1db62:	4770      	bx	lr
   1db64:	40001000 	.word	0x40001000

0001db68 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1db68:	4b01      	ldr	r3, [pc, #4]	; (1db70 <radio_rssi_get+0x8>)
   1db6a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1db6e:	4770      	bx	lr
   1db70:	40001000 	.word	0x40001000

0001db74 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1db74:	4b02      	ldr	r3, [pc, #8]	; (1db80 <radio_rssi_status_reset+0xc>)
   1db76:	2200      	movs	r2, #0
   1db78:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1db7c:	4770      	bx	lr
   1db7e:	bf00      	nop
   1db80:	40001000 	.word	0x40001000

0001db84 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1db84:	4b03      	ldr	r3, [pc, #12]	; (1db94 <radio_rssi_is_ready+0x10>)
   1db86:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1db8a:	3800      	subs	r0, #0
   1db8c:	bf18      	it	ne
   1db8e:	2001      	movne	r0, #1
   1db90:	4770      	bx	lr
   1db92:	bf00      	nop
   1db94:	40001000 	.word	0x40001000

0001db98 <radio_filter_disable>:
	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1db98:	4a03      	ldr	r2, [pc, #12]	; (1dba8 <radio_filter_disable+0x10>)
   1db9a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1db9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1dba2:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1dba6:	4770      	bx	lr
   1dba8:	40001000 	.word	0x40001000

0001dbac <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1dbac:	4b02      	ldr	r3, [pc, #8]	; (1dbb8 <radio_filter_status_reset+0xc>)
   1dbae:	2200      	movs	r2, #0
   1dbb0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1dbb4:	4770      	bx	lr
   1dbb6:	bf00      	nop
   1dbb8:	40001000 	.word	0x40001000

0001dbbc <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1dbbc:	4b03      	ldr	r3, [pc, #12]	; (1dbcc <radio_filter_has_match+0x10>)
   1dbbe:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1dbc2:	3800      	subs	r0, #0
   1dbc4:	bf18      	it	ne
   1dbc6:	2001      	movne	r0, #1
   1dbc8:	4770      	bx	lr
   1dbca:	bf00      	nop
   1dbcc:	40001000 	.word	0x40001000

0001dbd0 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1dbd0:	4b01      	ldr	r3, [pc, #4]	; (1dbd8 <radio_filter_match_get+0x8>)
   1dbd2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1dbd6:	4770      	bx	lr
   1dbd8:	40001000 	.word	0x40001000

0001dbdc <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1dbdc:	4b05      	ldr	r3, [pc, #20]	; (1dbf4 <radio_tmr_status_reset+0x18>)
   1dbde:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1dbe2:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   1dbe6:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1dbea:	4a03      	ldr	r2, [pc, #12]	; (1dbf8 <radio_tmr_status_reset+0x1c>)
   1dbec:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1dbf0:	4770      	bx	lr
   1dbf2:	bf00      	nop
   1dbf4:	4000b000 	.word	0x4000b000
   1dbf8:	0e700060 	.word	0x0e700060

0001dbfc <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1dbfc:	4b03      	ldr	r3, [pc, #12]	; (1dc0c <radio_tmr_tifs_set+0x10>)
   1dbfe:	4a04      	ldr	r2, [pc, #16]	; (1dc10 <radio_tmr_tifs_set+0x14>)
   1dc00:	781b      	ldrb	r3, [r3, #0]
   1dc02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1dc06:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1dc0a:	4770      	bx	lr
   1dc0c:	20002322 	.word	0x20002322
   1dc10:	40009000 	.word	0x40009000

0001dc14 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   1dc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1dc16:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1dc1a:	4c2f      	ldr	r4, [pc, #188]	; (1dcd8 <radio_tmr_start+0xc4>)
   1dc1c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1dc20:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   1dc22:	bf88      	it	hi
   1dc24:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc28:	4b2c      	ldr	r3, [pc, #176]	; (1dcdc <radio_tmr_start+0xc8>)
	}
	remainder /= 1000000UL;
   1dc2a:	4c2d      	ldr	r4, [pc, #180]	; (1dce0 <radio_tmr_start+0xcc>)
		remainder += 30517578UL;
   1dc2c:	bf84      	itt	hi
   1dc2e:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   1dc32:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   1dc36:	f04f 0501 	mov.w	r5, #1

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1dc3a:	f04f 0600 	mov.w	r6, #0
	remainder /= 1000000UL;
   1dc3e:	fbb2 f4f4 	udiv	r4, r2, r4
	EVENT_TIMER->PRESCALER = 4;
   1dc42:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1dc46:	f04f 0202 	mov.w	r2, #2
   1dc4a:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
   1dc4c:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
   1dc50:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1dc54:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
   1dc58:	4a22      	ldr	r2, [pc, #136]	; (1dce4 <radio_tmr_start+0xd0>)
    p_reg->CC[cc_channel] = cc_value;
   1dc5a:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
   1dc5e:	bf88      	it	hi
   1dc60:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   1dc64:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1dc68:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1dc6c:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1dc70:	491d      	ldr	r1, [pc, #116]	; (1dce8 <radio_tmr_start+0xd4>)
   1dc72:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
   1dc76:	3b0c      	subs	r3, #12
   1dc78:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1dc7c:	f8c1 353c 	str.w	r3, [r1, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1dc80:	2320      	movs	r3, #32
   1dc82:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1dc86:	f7ff fd93 	bl	1d7b0 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1dc8a:	4b18      	ldr	r3, [pc, #96]	; (1dcec <radio_tmr_start+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc8c:	4a18      	ldr	r2, [pc, #96]	; (1dcf0 <radio_tmr_start+0xdc>)
   1dc8e:	6015      	str	r5, [r2, #0]
   1dc90:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1dc94:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1dc98:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   1dc9c:	601d      	str	r5, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1dc9e:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1dca2:	3b74      	subs	r3, #116	; 0x74
   1dca4:	f8c1 3548 	str.w	r3, [r1, #1352]	; 0x548
   1dca8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1dcac:	3334      	adds	r3, #52	; 0x34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1dcae:	f8c1 254c 	str.w	r2, [r1, #1356]	; 0x54c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1dcb2:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1dcb6:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1dcba:	33c4      	adds	r3, #196	; 0xc4
   1dcbc:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1dcc0:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   1dcc4:	3bc0      	subs	r3, #192	; 0xc0
   1dcc6:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1dcca:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1dcce:	33c8      	adds	r3, #200	; 0xc8
   1dcd0:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1dcd4:	4620      	mov	r0, r4
   1dcd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dcd8:	7ff0bdbf 	.word	0x7ff0bdbf
   1dcdc:	4000800c 	.word	0x4000800c
   1dce0:	000f4240 	.word	0x000f4240
   1dce4:	4000b000 	.word	0x4000b000
   1dce8:	4001f000 	.word	0x4001f000
   1dcec:	40009000 	.word	0x40009000
   1dcf0:	4000900c 	.word	0x4000900c

0001dcf4 <radio_tmr_start_tick>:
   1dcf4:	4b0e      	ldr	r3, [pc, #56]	; (1dd30 <radio_tmr_start_tick+0x3c>)
    p_reg->CC[cc_channel] = cc_value;
   1dcf6:	4a0f      	ldr	r2, [pc, #60]	; (1dd34 <radio_tmr_start_tick+0x40>)

u32_t radio_tmr_start_tick(u8_t trx, u32_t tick)
{
   1dcf8:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dcfa:	2401      	movs	r4, #1
   1dcfc:	601c      	str	r4, [r3, #0]
   1dcfe:	609c      	str	r4, [r3, #8]
    p_reg->CC[ch] = cc_val;
   1dd00:	4b0d      	ldr	r3, [pc, #52]	; (1dd38 <radio_tmr_start_tick+0x44>)
    p_reg->CC[cc_channel] = cc_value;
   1dd02:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
   1dd06:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1dd0a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1dd0e:	f8c3 1344 	str.w	r1, [r3, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1dd12:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1dd16:	4909      	ldr	r1, [pc, #36]	; (1dd3c <radio_tmr_start_tick+0x48>)
   1dd18:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1dd1c:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1dd20:	2220      	movs	r2, #32
   1dd22:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1dd26:	f7ff fd43 	bl	1d7b0 <hal_radio_enable_on_tick_ppi_config_and_enable>
	last_pdu_end_us = 0U;
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1dd2a:	4620      	mov	r0, r4
   1dd2c:	bd10      	pop	{r4, pc}
   1dd2e:	bf00      	nop
   1dd30:	40008004 	.word	0x40008004
   1dd34:	40008000 	.word	0x40008000
   1dd38:	4000b000 	.word	0x4000b000
   1dd3c:	4000b148 	.word	0x4000b148

0001dd40 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1dd40:	4b01      	ldr	r3, [pc, #4]	; (1dd48 <radio_tmr_start_get+0x8>)
   1dd42:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1dd46:	4770      	bx	lr
   1dd48:	4000b000 	.word	0x4000b000

0001dd4c <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dd4c:	4a04      	ldr	r2, [pc, #16]	; (1dd60 <radio_tmr_stop+0x14>)
   1dd4e:	2301      	movs	r3, #1
   1dd50:	6013      	str	r3, [r2, #0]
   1dd52:	60d3      	str	r3, [r2, #12]
   1dd54:	320c      	adds	r2, #12
   1dd56:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
   1dd5a:	6013      	str	r3, [r2, #0]
   1dd5c:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1dd5e:	4770      	bx	lr
   1dd60:	40008004 	.word	0x40008004

0001dd64 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1dd64:	4b04      	ldr	r3, [pc, #16]	; (1dd78 <radio_tmr_hcto_configure+0x14>)
   1dd66:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
   1dd6a:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1dd6e:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1dd72:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1dd76:	4770      	bx	lr
   1dd78:	40008000 	.word	0x40008000

0001dd7c <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1dd7c:	4b06      	ldr	r3, [pc, #24]	; (1dd98 <radio_tmr_aa_capture+0x1c>)
   1dd7e:	4a07      	ldr	r2, [pc, #28]	; (1dd9c <radio_tmr_aa_capture+0x20>)
   1dd80:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1dd84:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1dd88:	3240      	adds	r2, #64	; 0x40
   1dd8a:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1dd8e:	4a04      	ldr	r2, [pc, #16]	; (1dda0 <radio_tmr_aa_capture+0x24>)
   1dd90:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1dd94:	4770      	bx	lr
   1dd96:	bf00      	nop
   1dd98:	4001f000 	.word	0x4001f000
   1dd9c:	40001100 	.word	0x40001100
   1dda0:	04000040 	.word	0x04000040

0001dda4 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1dda4:	4b01      	ldr	r3, [pc, #4]	; (1ddac <radio_tmr_aa_get+0x8>)
   1dda6:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1ddaa:	4770      	bx	lr
   1ddac:	40008000 	.word	0x40008000

0001ddb0 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   1ddb0:	4b01      	ldr	r3, [pc, #4]	; (1ddb8 <radio_tmr_aa_save+0x8>)
   1ddb2:	6018      	str	r0, [r3, #0]
}
   1ddb4:	4770      	bx	lr
   1ddb6:	bf00      	nop
   1ddb8:	200019ac 	.word	0x200019ac

0001ddbc <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   1ddbc:	4b01      	ldr	r3, [pc, #4]	; (1ddc4 <radio_tmr_aa_restore+0x8>)
   1ddbe:	6818      	ldr	r0, [r3, #0]
   1ddc0:	4770      	bx	lr
   1ddc2:	bf00      	nop
   1ddc4:	200019ac 	.word	0x200019ac

0001ddc8 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1ddc8:	4b01      	ldr	r3, [pc, #4]	; (1ddd0 <radio_tmr_ready_get+0x8>)
   1ddca:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1ddce:	4770      	bx	lr
   1ddd0:	40008000 	.word	0x40008000

0001ddd4 <radio_tmr_end_capture>:
   1ddd4:	4b02      	ldr	r3, [pc, #8]	; (1dde0 <radio_tmr_end_capture+0xc>)
   1ddd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1ddda:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1ddde:	4770      	bx	lr
   1dde0:	4001f000 	.word	0x4001f000

0001dde4 <radio_tmr_end_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1dde4:	4b01      	ldr	r3, [pc, #4]	; (1ddec <radio_tmr_end_get+0x8>)
   1dde6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1ddea:	4770      	bx	lr
   1ddec:	40008000 	.word	0x40008000

0001ddf0 <radio_tmr_tifs_base_get>:
   1ddf0:	4b01      	ldr	r3, [pc, #4]	; (1ddf8 <radio_tmr_tifs_base_get+0x8>)
   1ddf2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1ddf6:	4770      	bx	lr
   1ddf8:	40008000 	.word	0x40008000

0001ddfc <radio_ar_match_get>:
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1ddfc:	4b01      	ldr	r3, [pc, #4]	; (1de04 <radio_ar_match_get+0x8>)
   1ddfe:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1de02:	4770      	bx	lr
   1de04:	4000f000 	.word	0x4000f000

0001de08 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1de08:	4a04      	ldr	r2, [pc, #16]	; (1de1c <radio_ar_status_reset+0x14>)
   1de0a:	2300      	movs	r3, #0
   1de0c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1de10:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1de14:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   1de18:	4770      	bx	lr
   1de1a:	bf00      	nop
   1de1c:	40001000 	.word	0x40001000

0001de20 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1de20:	4b08      	ldr	r3, [pc, #32]	; (1de44 <radio_ar_has_match+0x24>)
   1de22:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1de26:	b160      	cbz	r0, 1de42 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1de28:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1de2c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1de30:	b138      	cbz	r0, 1de42 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1de32:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1de36:	b120      	cbz	r0, 1de42 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1de38:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1de3c:	fab0 f080 	clz	r0, r0
   1de40:	0940      	lsrs	r0, r0, #5
}
   1de42:	4770      	bx	lr
   1de44:	40001000 	.word	0x40001000

0001de48 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1de48:	2902      	cmp	r1, #2
{
   1de4a:	b510      	push	{r4, lr}
   1de4c:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1de4e:	d00b      	beq.n	1de68 <mayfly_enable_cb+0x20>
   1de50:	4a0a      	ldr	r2, [pc, #40]	; (1de7c <mayfly_enable_cb+0x34>)
   1de52:	490b      	ldr	r1, [pc, #44]	; (1de80 <mayfly_enable_cb+0x38>)
   1de54:	480b      	ldr	r0, [pc, #44]	; (1de84 <mayfly_enable_cb+0x3c>)
   1de56:	2325      	movs	r3, #37	; 0x25
   1de58:	f005 fa37 	bl	232ca <printk>
   1de5c:	4040      	eors	r0, r0
   1de5e:	f380 8811 	msr	BASEPRI, r0
   1de62:	f04f 0003 	mov.w	r0, #3
   1de66:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1de68:	200b      	movs	r0, #11
	if (enable) {
   1de6a:	b11c      	cbz	r4, 1de74 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1de6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1de70:	f7e6 bc30 	b.w	46d4 <arch_irq_enable>
}
   1de74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1de78:	f7e6 bc3c 	b.w	46f4 <arch_irq_disable>
   1de7c:	0002f601 	.word	0x0002f601
   1de80:	0002f64f 	.word	0x0002f64f
   1de84:	000297e6 	.word	0x000297e6

0001de88 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   1de88:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
   1de8a:	b181      	cbz	r1, 1deae <mayfly_is_enabled+0x26>
   1de8c:	3901      	subs	r1, #1
   1de8e:	2901      	cmp	r1, #1
   1de90:	d912      	bls.n	1deb8 <mayfly_is_enabled+0x30>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1de92:	4a0a      	ldr	r2, [pc, #40]	; (1debc <mayfly_is_enabled+0x34>)
   1de94:	490a      	ldr	r1, [pc, #40]	; (1dec0 <mayfly_is_enabled+0x38>)
   1de96:	480b      	ldr	r0, [pc, #44]	; (1dec4 <mayfly_is_enabled+0x3c>)
   1de98:	233f      	movs	r3, #63	; 0x3f
   1de9a:	f005 fa16 	bl	232ca <printk>
   1de9e:	4040      	eors	r0, r0
   1dea0:	f380 8811 	msr	BASEPRI, r0
   1dea4:	f04f 0003 	mov.w	r0, #3
   1dea8:	df02      	svc	2
		break;
	}

	return 0;
}
   1deaa:	2000      	movs	r0, #0
   1deac:	bd08      	pop	{r3, pc}
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1deae:	2018      	movs	r0, #24
}
   1deb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1deb4:	f7e6 bc32 	b.w	471c <arch_irq_is_enabled>
   1deb8:	200b      	movs	r0, #11
   1deba:	e7f9      	b.n	1deb0 <mayfly_is_enabled+0x28>
   1debc:	0002f601 	.word	0x0002f601
   1dec0:	0002d2c6 	.word	0x0002d2c6
   1dec4:	000297e6 	.word	0x000297e6

0001dec8 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1dec8:	2901      	cmp	r1, #1
{
   1deca:	b508      	push	{r3, lr}
	switch (callee_id) {
   1decc:	d008      	beq.n	1dee0 <mayfly_pend+0x18>
   1dece:	2902      	cmp	r1, #2
   1ded0:	d006      	beq.n	1dee0 <mayfly_pend+0x18>
   1ded2:	b949      	cbnz	r1, 1dee8 <mayfly_pend+0x20>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ded4:	4b0b      	ldr	r3, [pc, #44]	; (1df04 <mayfly_pend+0x3c>)
   1ded6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1deda:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	default:
		LL_ASSERT(0);
		break;
	}
}
   1dede:	bd08      	pop	{r3, pc}
   1dee0:	4b08      	ldr	r3, [pc, #32]	; (1df04 <mayfly_pend+0x3c>)
   1dee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1dee6:	e7f8      	b.n	1deda <mayfly_pend+0x12>
		LL_ASSERT(0);
   1dee8:	4a07      	ldr	r2, [pc, #28]	; (1df08 <mayfly_pend+0x40>)
   1deea:	4908      	ldr	r1, [pc, #32]	; (1df0c <mayfly_pend+0x44>)
   1deec:	4808      	ldr	r0, [pc, #32]	; (1df10 <mayfly_pend+0x48>)
   1deee:	237b      	movs	r3, #123	; 0x7b
   1def0:	f005 f9eb 	bl	232ca <printk>
   1def4:	4040      	eors	r0, r0
   1def6:	f380 8811 	msr	BASEPRI, r0
   1defa:	f04f 0003 	mov.w	r0, #3
   1defe:	df02      	svc	2
}
   1df00:	e7ed      	b.n	1dede <mayfly_pend+0x16>
   1df02:	bf00      	nop
   1df04:	e000e100 	.word	0xe000e100
   1df08:	0002f601 	.word	0x0002f601
   1df0c:	0002d2c6 	.word	0x0002d2c6
   1df10:	000297e6 	.word	0x000297e6

0001df14 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1df14:	2803      	cmp	r0, #3
{
   1df16:	b510      	push	{r4, lr}
   1df18:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1df1a:	d90b      	bls.n	1df34 <hal_ticker_instance0_caller_id_get+0x20>
   1df1c:	4a0e      	ldr	r2, [pc, #56]	; (1df58 <hal_ticker_instance0_caller_id_get+0x44>)
   1df1e:	490f      	ldr	r1, [pc, #60]	; (1df5c <hal_ticker_instance0_caller_id_get+0x48>)
   1df20:	480f      	ldr	r0, [pc, #60]	; (1df60 <hal_ticker_instance0_caller_id_get+0x4c>)
   1df22:	2338      	movs	r3, #56	; 0x38
   1df24:	f005 f9d1 	bl	232ca <printk>
   1df28:	4040      	eors	r0, r0
   1df2a:	f380 8811 	msr	BASEPRI, r0
   1df2e:	f04f 0003 	mov.w	r0, #3
   1df32:	df02      	svc	2

	caller_id = caller_id_lut[user_id];
   1df34:	4b0b      	ldr	r3, [pc, #44]	; (1df64 <hal_ticker_instance0_caller_id_get+0x50>)
   1df36:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1df38:	b95c      	cbnz	r4, 1df52 <hal_ticker_instance0_caller_id_get+0x3e>
   1df3a:	4a07      	ldr	r2, [pc, #28]	; (1df58 <hal_ticker_instance0_caller_id_get+0x44>)
   1df3c:	490a      	ldr	r1, [pc, #40]	; (1df68 <hal_ticker_instance0_caller_id_get+0x54>)
   1df3e:	4808      	ldr	r0, [pc, #32]	; (1df60 <hal_ticker_instance0_caller_id_get+0x4c>)
   1df40:	233b      	movs	r3, #59	; 0x3b
   1df42:	f005 f9c2 	bl	232ca <printk>
   1df46:	4040      	eors	r0, r0
   1df48:	f380 8811 	msr	BASEPRI, r0
   1df4c:	f04f 0003 	mov.w	r0, #3
   1df50:	df02      	svc	2

	return caller_id;
}
   1df52:	4620      	mov	r0, r4
   1df54:	bd10      	pop	{r4, pc}
   1df56:	bf00      	nop
   1df58:	0002f671 	.word	0x0002f671
   1df5c:	0002f6bf 	.word	0x0002f6bf
   1df60:	000297e6 	.word	0x000297e6
   1df64:	0002f701 	.word	0x0002f701
   1df68:	0002f6df 	.word	0x0002f6df

0001df6c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1df6c:	3801      	subs	r0, #1
{
   1df6e:	b510      	push	{r4, lr}
   1df70:	461c      	mov	r4, r3
   1df72:	2804      	cmp	r0, #4
   1df74:	d845      	bhi.n	1e002 <hal_ticker_instance0_sched+0x96>
   1df76:	e8df f000 	tbb	[pc, r0]
   1df7a:	1a03      	.short	0x1a03
   1df7c:	2c23      	.short	0x2c23
   1df7e:	3b          	.byte	0x3b
   1df7f:	00          	.byte	0x00
#if defined(CONFIG_BT_LL_SW_SPLIT)
	case TICKER_CALL_ID_ISR:
		switch (callee_id) {
   1df80:	2904      	cmp	r1, #4
   1df82:	d107      	bne.n	1df94 <hal_ticker_instance0_sched+0x28>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;
   1df84:	4b20      	ldr	r3, [pc, #128]	; (1e008 <hal_ticker_instance0_sched+0x9c>)

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1df86:	2102      	movs	r1, #2
			m.param = instance;
   1df88:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1df8a:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   1df8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1df90:	f7f9 bab0 	b.w	174f4 <mayfly_enqueue>
			LL_ASSERT(0);
   1df94:	235c      	movs	r3, #92	; 0x5c
		LL_ASSERT(0);
   1df96:	4a1d      	ldr	r2, [pc, #116]	; (1e00c <hal_ticker_instance0_sched+0xa0>)
   1df98:	491d      	ldr	r1, [pc, #116]	; (1e010 <hal_ticker_instance0_sched+0xa4>)
   1df9a:	481e      	ldr	r0, [pc, #120]	; (1e014 <hal_ticker_instance0_sched+0xa8>)
   1df9c:	f005 f995 	bl	232ca <printk>
   1dfa0:	4040      	eors	r0, r0
   1dfa2:	f380 8811 	msr	BASEPRI, r0
   1dfa6:	f04f 0003 	mov.w	r0, #3
   1dfaa:	df02      	svc	2
}
   1dfac:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1dfae:	2903      	cmp	r1, #3
   1dfb0:	d104      	bne.n	1dfbc <hal_ticker_instance0_sched+0x50>
			m.param = instance;
   1dfb2:	4b19      	ldr	r3, [pc, #100]	; (1e018 <hal_ticker_instance0_sched+0xac>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1dfb4:	2101      	movs	r1, #1
			m.param = instance;
   1dfb6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1dfb8:	4608      	mov	r0, r1
   1dfba:	e7e7      	b.n	1df8c <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1dfbc:	2374      	movs	r3, #116	; 0x74
   1dfbe:	e7ea      	b.n	1df96 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   1dfc0:	2904      	cmp	r1, #4
   1dfc2:	d104      	bne.n	1dfce <hal_ticker_instance0_sched+0x62>
			m.param = instance;
   1dfc4:	4b15      	ldr	r3, [pc, #84]	; (1e01c <hal_ticker_instance0_sched+0xb0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1dfc6:	2102      	movs	r1, #2
			m.param = instance;
   1dfc8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1dfca:	2001      	movs	r0, #1
   1dfcc:	e7de      	b.n	1df8c <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1dfce:	238b      	movs	r3, #139	; 0x8b
   1dfd0:	e7e1      	b.n	1df96 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   1dfd2:	2903      	cmp	r1, #3
   1dfd4:	d003      	beq.n	1dfde <hal_ticker_instance0_sched+0x72>
   1dfd6:	2904      	cmp	r1, #4
   1dfd8:	d006      	beq.n	1dfe8 <hal_ticker_instance0_sched+0x7c>
			LL_ASSERT(0);
   1dfda:	23b1      	movs	r3, #177	; 0xb1
   1dfdc:	e7db      	b.n	1df96 <hal_ticker_instance0_sched+0x2a>
			m.param = instance;
   1dfde:	4b10      	ldr	r3, [pc, #64]	; (1e020 <hal_ticker_instance0_sched+0xb4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1dfe0:	2101      	movs	r1, #1
			m.param = instance;
   1dfe2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1dfe4:	2002      	movs	r0, #2
   1dfe6:	e7d1      	b.n	1df8c <hal_ticker_instance0_sched+0x20>
			m.param = instance;
   1dfe8:	4b0e      	ldr	r3, [pc, #56]	; (1e024 <hal_ticker_instance0_sched+0xb8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1dfea:	2102      	movs	r1, #2
			m.param = instance;
   1dfec:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1dfee:	e7e3      	b.n	1dfb8 <hal_ticker_instance0_sched+0x4c>
		switch (callee_id) {
   1dff0:	2904      	cmp	r1, #4
   1dff2:	d104      	bne.n	1dffe <hal_ticker_instance0_sched+0x92>
			m.param = instance;
   1dff4:	4b0c      	ldr	r3, [pc, #48]	; (1e028 <hal_ticker_instance0_sched+0xbc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1dff6:	2102      	movs	r1, #2
			m.param = instance;
   1dff8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1dffa:	2003      	movs	r0, #3
   1dffc:	e7c6      	b.n	1df8c <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1dffe:	23c9      	movs	r3, #201	; 0xc9
   1e000:	e7c9      	b.n	1df96 <hal_ticker_instance0_sched+0x2a>
		LL_ASSERT(0);
   1e002:	23cf      	movs	r3, #207	; 0xcf
   1e004:	e7c7      	b.n	1df96 <hal_ticker_instance0_sched+0x2a>
   1e006:	bf00      	nop
   1e008:	2000722c 	.word	0x2000722c
   1e00c:	0002f671 	.word	0x0002f671
   1e010:	0002d2c6 	.word	0x0002d2c6
   1e014:	000297e6 	.word	0x000297e6
   1e018:	2000723c 	.word	0x2000723c
   1e01c:	2000724c 	.word	0x2000724c
   1e020:	2000725c 	.word	0x2000725c
   1e024:	2000726c 	.word	0x2000726c
   1e028:	2000727c 	.word	0x2000727c

0001e02c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1e02c:	4b02      	ldr	r3, [pc, #8]	; (1e038 <net_buf_pool_get+0xc>)
   1e02e:	2224      	movs	r2, #36	; 0x24
   1e030:	fb02 3000 	mla	r0, r2, r0, r3
   1e034:	4770      	bx	lr
   1e036:	bf00      	nop
   1e038:	2000755c 	.word	0x2000755c

0001e03c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1e03c:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1e03e:	4a05      	ldr	r2, [pc, #20]	; (1e054 <net_buf_id+0x18>)
   1e040:	2124      	movs	r1, #36	; 0x24
   1e042:	fb01 2303 	mla	r3, r1, r3, r2
   1e046:	6a1b      	ldr	r3, [r3, #32]
   1e048:	1ac0      	subs	r0, r0, r3
}
   1e04a:	4b03      	ldr	r3, [pc, #12]	; (1e058 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1e04c:	10c0      	asrs	r0, r0, #3
}
   1e04e:	4358      	muls	r0, r3
   1e050:	4770      	bx	lr
   1e052:	bf00      	nop
   1e054:	2000755c 	.word	0x2000755c
   1e058:	aaaaaaab 	.word	0xaaaaaaab

0001e05c <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
   1e05c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1e05e:	4a0a      	ldr	r2, [pc, #40]	; (1e088 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1e060:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1e062:	2424      	movs	r4, #36	; 0x24
   1e064:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1e068:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1e06a:	69db      	ldr	r3, [r3, #28]
   1e06c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1e06e:	6823      	ldr	r3, [r4, #0]
   1e070:	429a      	cmp	r2, r3
   1e072:	bf94      	ite	ls
   1e074:	600a      	strls	r2, [r1, #0]
   1e076:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1e078:	f7ff ffe0 	bl	1e03c <net_buf_id>
   1e07c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1e080:	fb02 3000 	mla	r0, r2, r0, r3
   1e084:	bd10      	pop	{r4, pc}
   1e086:	bf00      	nop
   1e088:	2000755c 	.word	0x2000755c

0001e08c <net_buf_reset>:
{
   1e08c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1e08e:	7943      	ldrb	r3, [r0, #5]
{
   1e090:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1e092:	b14b      	cbz	r3, 1e0a8 <net_buf_reset+0x1c>
   1e094:	490d      	ldr	r1, [pc, #52]	; (1e0cc <net_buf_reset+0x40>)
   1e096:	480e      	ldr	r0, [pc, #56]	; (1e0d0 <net_buf_reset+0x44>)
   1e098:	4a0e      	ldr	r2, [pc, #56]	; (1e0d4 <net_buf_reset+0x48>)
   1e09a:	234f      	movs	r3, #79	; 0x4f
   1e09c:	f005 f915 	bl	232ca <printk>
   1e0a0:	480c      	ldr	r0, [pc, #48]	; (1e0d4 <net_buf_reset+0x48>)
   1e0a2:	214f      	movs	r1, #79	; 0x4f
   1e0a4:	f005 f954 	bl	23350 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1e0a8:	6823      	ldr	r3, [r4, #0]
   1e0aa:	b14b      	cbz	r3, 1e0c0 <net_buf_reset+0x34>
   1e0ac:	490a      	ldr	r1, [pc, #40]	; (1e0d8 <net_buf_reset+0x4c>)
   1e0ae:	4808      	ldr	r0, [pc, #32]	; (1e0d0 <net_buf_reset+0x44>)
   1e0b0:	4a08      	ldr	r2, [pc, #32]	; (1e0d4 <net_buf_reset+0x48>)
   1e0b2:	2350      	movs	r3, #80	; 0x50
   1e0b4:	f005 f909 	bl	232ca <printk>
   1e0b8:	4806      	ldr	r0, [pc, #24]	; (1e0d4 <net_buf_reset+0x48>)
   1e0ba:	2150      	movs	r1, #80	; 0x50
   1e0bc:	f005 f948 	bl	23350 <assert_post_action>
	buf->len  = 0U;
   1e0c0:	2300      	movs	r3, #0
   1e0c2:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1e0c4:	6923      	ldr	r3, [r4, #16]
   1e0c6:	60a3      	str	r3, [r4, #8]
}
   1e0c8:	bd10      	pop	{r4, pc}
   1e0ca:	bf00      	nop
   1e0cc:	0002f729 	.word	0x0002f729
   1e0d0:	000297e6 	.word	0x000297e6
   1e0d4:	0002f705 	.word	0x0002f705
   1e0d8:	0002f73a 	.word	0x0002f73a

0001e0dc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   1e0dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e0e0:	4605      	mov	r5, r0
   1e0e2:	9101      	str	r1, [sp, #4]
   1e0e4:	4616      	mov	r6, r2
	u32_t alloc_start = k_uptime_get_32();
   1e0e6:	f009 fe9c 	bl	27e22 <k_uptime_get_32>
   1e0ea:	4680      	mov	r8, r0
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   1e0ec:	b94d      	cbnz	r5, 1e102 <net_buf_alloc_len+0x26>
   1e0ee:	4945      	ldr	r1, [pc, #276]	; (1e204 <net_buf_alloc_len+0x128>)
   1e0f0:	4845      	ldr	r0, [pc, #276]	; (1e208 <net_buf_alloc_len+0x12c>)
   1e0f2:	4a46      	ldr	r2, [pc, #280]	; (1e20c <net_buf_alloc_len+0x130>)
   1e0f4:	23ef      	movs	r3, #239	; 0xef
   1e0f6:	f005 f8e8 	bl	232ca <printk>
   1e0fa:	4844      	ldr	r0, [pc, #272]	; (1e20c <net_buf_alloc_len+0x130>)
   1e0fc:	21ef      	movs	r1, #239	; 0xef
   1e0fe:	f005 f927 	bl	23350 <assert_post_action>
	__asm__ volatile(
   1e102:	f04f 0320 	mov.w	r3, #32
   1e106:	f3ef 8711 	mrs	r7, BASEPRI
   1e10a:	f383 8811 	msr	BASEPRI, r3
   1e10e:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1e112:	8aeb      	ldrh	r3, [r5, #22]
   1e114:	2b00      	cmp	r3, #0
   1e116:	d048      	beq.n	1e1aa <net_buf_alloc_len+0xce>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1e118:	8aaa      	ldrh	r2, [r5, #20]
   1e11a:	429a      	cmp	r2, r3
   1e11c:	d931      	bls.n	1e182 <net_buf_alloc_len+0xa6>
	return z_impl_k_queue_get(queue, timeout);
   1e11e:	2100      	movs	r1, #0
   1e120:	4628      	mov	r0, r5
   1e122:	f002 f95d 	bl	203e0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1e126:	4604      	mov	r4, r0
   1e128:	b358      	cbz	r0, 1e182 <net_buf_alloc_len+0xa6>
	__asm__ volatile(
   1e12a:	f387 8811 	msr	BASEPRI, r7
   1e12e:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1e132:	9f01      	ldr	r7, [sp, #4]
   1e134:	2f00      	cmp	r7, #0
   1e136:	d063      	beq.n	1e200 <net_buf_alloc_len+0x124>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   1e138:	1c73      	adds	r3, r6, #1
   1e13a:	2b01      	cmp	r3, #1
   1e13c:	d907      	bls.n	1e14e <net_buf_alloc_len+0x72>
			u32_t diff = k_uptime_get_32() - alloc_start;
   1e13e:	f009 fe70 	bl	27e22 <k_uptime_get_32>
   1e142:	eba0 0008 	sub.w	r0, r0, r8

			timeout -= MIN(timeout, diff);
   1e146:	42b0      	cmp	r0, r6
   1e148:	bf94      	ite	ls
   1e14a:	1a36      	subls	r6, r6, r0
   1e14c:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1e14e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1e150:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1e210 <net_buf_alloc_len+0x134>
   1e154:	2224      	movs	r2, #36	; 0x24
   1e156:	fb02 8303 	mla	r3, r2, r3, r8
   1e15a:	a901      	add	r1, sp, #4
   1e15c:	69db      	ldr	r3, [r3, #28]
   1e15e:	681b      	ldr	r3, [r3, #0]
   1e160:	4632      	mov	r2, r6
   1e162:	681b      	ldr	r3, [r3, #0]
   1e164:	4620      	mov	r0, r4
   1e166:	4798      	blx	r3
   1e168:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1e16a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1e16c:	bb60      	cbnz	r0, 1e1c8 <net_buf_alloc_len+0xec>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   1e16e:	79a0      	ldrb	r0, [r4, #6]
   1e170:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1e174:	4621      	mov	r1, r4
   1e176:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   1e17a:	f00a f8b6 	bl	282ea <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1e17e:	462c      	mov	r4, r5
}
   1e180:	e01e      	b.n	1e1c0 <net_buf_alloc_len+0xe4>
		uninit_count = pool->uninit_count--;
   1e182:	8ae8      	ldrh	r0, [r5, #22]
   1e184:	1e43      	subs	r3, r0, #1
   1e186:	82eb      	strh	r3, [r5, #22]
   1e188:	f387 8811 	msr	BASEPRI, r7
   1e18c:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1e190:	8aac      	ldrh	r4, [r5, #20]
   1e192:	1a24      	subs	r4, r4, r0
   1e194:	6a28      	ldr	r0, [r5, #32]
   1e196:	2318      	movs	r3, #24
   1e198:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1e19c:	4b1c      	ldr	r3, [pc, #112]	; (1e210 <net_buf_alloc_len+0x134>)
   1e19e:	1aed      	subs	r5, r5, r3
   1e1a0:	4b1c      	ldr	r3, [pc, #112]	; (1e214 <net_buf_alloc_len+0x138>)
   1e1a2:	10ad      	asrs	r5, r5, #2
   1e1a4:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1e1a6:	71a5      	strb	r5, [r4, #6]
		goto success;
   1e1a8:	e7c3      	b.n	1e132 <net_buf_alloc_len+0x56>
   1e1aa:	f387 8811 	msr	BASEPRI, r7
   1e1ae:	f3bf 8f6f 	isb	sy
   1e1b2:	4631      	mov	r1, r6
   1e1b4:	4628      	mov	r0, r5
   1e1b6:	f002 f913 	bl	203e0 <z_impl_k_queue_get>
	if (!buf) {
   1e1ba:	4604      	mov	r4, r0
   1e1bc:	2800      	cmp	r0, #0
   1e1be:	d1b8      	bne.n	1e132 <net_buf_alloc_len+0x56>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   1e1c0:	4620      	mov	r0, r4
   1e1c2:	b002      	add	sp, #8
   1e1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NET_BUF_ASSERT(req_size <= size);
   1e1c8:	9b01      	ldr	r3, [sp, #4]
   1e1ca:	429f      	cmp	r7, r3
   1e1cc:	d90e      	bls.n	1e1ec <net_buf_alloc_len+0x110>
   1e1ce:	4912      	ldr	r1, [pc, #72]	; (1e218 <net_buf_alloc_len+0x13c>)
   1e1d0:	4a0e      	ldr	r2, [pc, #56]	; (1e20c <net_buf_alloc_len+0x130>)
   1e1d2:	480d      	ldr	r0, [pc, #52]	; (1e208 <net_buf_alloc_len+0x12c>)
   1e1d4:	f240 134b 	movw	r3, #331	; 0x14b
   1e1d8:	f005 f877 	bl	232ca <printk>
   1e1dc:	480f      	ldr	r0, [pc, #60]	; (1e21c <net_buf_alloc_len+0x140>)
   1e1de:	f005 f874 	bl	232ca <printk>
   1e1e2:	480a      	ldr	r0, [pc, #40]	; (1e20c <net_buf_alloc_len+0x130>)
   1e1e4:	f240 114b 	movw	r1, #331	; 0x14b
   1e1e8:	f005 f8b2 	bl	23350 <assert_post_action>
	buf->frags = NULL;
   1e1ec:	2300      	movs	r3, #0
   1e1ee:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1e1f0:	2301      	movs	r3, #1
   1e1f2:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1e1f4:	9b01      	ldr	r3, [sp, #4]
   1e1f6:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1e1f8:	4620      	mov	r0, r4
   1e1fa:	f7ff ff47 	bl	1e08c <net_buf_reset>
	return buf;
   1e1fe:	e7df      	b.n	1e1c0 <net_buf_alloc_len+0xe4>
		buf->__buf = NULL;
   1e200:	6127      	str	r7, [r4, #16]
   1e202:	e7f3      	b.n	1e1ec <net_buf_alloc_len+0x110>
   1e204:	0002f754 	.word	0x0002f754
   1e208:	000297e6 	.word	0x000297e6
   1e20c:	0002f705 	.word	0x0002f705
   1e210:	2000755c 	.word	0x2000755c
   1e214:	38e38e39 	.word	0x38e38e39
   1e218:	0002f759 	.word	0x0002f759
   1e21c:	0002f76a 	.word	0x0002f76a

0001e220 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1e220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e224:	4606      	mov	r6, r0
   1e226:	f002 f8db 	bl	203e0 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1e22a:	4605      	mov	r5, r0
   1e22c:	b150      	cbz	r0, 1e244 <net_buf_get+0x24>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1e22e:	4f13      	ldr	r7, [pc, #76]	; (1e27c <net_buf_get+0x5c>)
   1e230:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1e280 <net_buf_get+0x60>
   1e234:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1e284 <net_buf_get+0x64>
   1e238:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1e23a:	7963      	ldrb	r3, [r4, #5]
   1e23c:	f013 0301 	ands.w	r3, r3, #1
   1e240:	d103      	bne.n	1e24a <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1e242:	6023      	str	r3, [r4, #0]

	return buf;
}
   1e244:	4628      	mov	r0, r5
   1e246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e24a:	2100      	movs	r1, #0
   1e24c:	4630      	mov	r0, r6
   1e24e:	f002 f8c7 	bl	203e0 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1e252:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1e254:	b958      	cbnz	r0, 1e26e <net_buf_get+0x4e>
   1e256:	4641      	mov	r1, r8
   1e258:	4648      	mov	r0, r9
   1e25a:	f240 13a1 	movw	r3, #417	; 0x1a1
   1e25e:	463a      	mov	r2, r7
   1e260:	f005 f833 	bl	232ca <printk>
   1e264:	f240 11a1 	movw	r1, #417	; 0x1a1
   1e268:	4638      	mov	r0, r7
   1e26a:	f005 f871 	bl	23350 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1e26e:	7963      	ldrb	r3, [r4, #5]
   1e270:	f023 0301 	bic.w	r3, r3, #1
   1e274:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1e276:	6824      	ldr	r4, [r4, #0]
   1e278:	e7df      	b.n	1e23a <net_buf_get+0x1a>
   1e27a:	bf00      	nop
   1e27c:	0002f705 	.word	0x0002f705
   1e280:	0002f76d 	.word	0x0002f76d
   1e284:	000297e6 	.word	0x000297e6

0001e288 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1e288:	b538      	push	{r3, r4, r5, lr}
   1e28a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1e28c:	4604      	mov	r4, r0
   1e28e:	b958      	cbnz	r0, 1e2a8 <net_buf_simple_reserve+0x20>
   1e290:	490e      	ldr	r1, [pc, #56]	; (1e2cc <net_buf_simple_reserve+0x44>)
   1e292:	480f      	ldr	r0, [pc, #60]	; (1e2d0 <net_buf_simple_reserve+0x48>)
   1e294:	4a0f      	ldr	r2, [pc, #60]	; (1e2d4 <net_buf_simple_reserve+0x4c>)
   1e296:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1e29a:	f005 f816 	bl	232ca <printk>
   1e29e:	480d      	ldr	r0, [pc, #52]	; (1e2d4 <net_buf_simple_reserve+0x4c>)
   1e2a0:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1e2a4:	f005 f854 	bl	23350 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1e2a8:	88a3      	ldrh	r3, [r4, #4]
   1e2aa:	b15b      	cbz	r3, 1e2c4 <net_buf_simple_reserve+0x3c>
   1e2ac:	490a      	ldr	r1, [pc, #40]	; (1e2d8 <net_buf_simple_reserve+0x50>)
   1e2ae:	4808      	ldr	r0, [pc, #32]	; (1e2d0 <net_buf_simple_reserve+0x48>)
   1e2b0:	4a08      	ldr	r2, [pc, #32]	; (1e2d4 <net_buf_simple_reserve+0x4c>)
   1e2b2:	f240 13b9 	movw	r3, #441	; 0x1b9
   1e2b6:	f005 f808 	bl	232ca <printk>
   1e2ba:	4806      	ldr	r0, [pc, #24]	; (1e2d4 <net_buf_simple_reserve+0x4c>)
   1e2bc:	f240 11b9 	movw	r1, #441	; 0x1b9
   1e2c0:	f005 f846 	bl	23350 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1e2c4:	68a3      	ldr	r3, [r4, #8]
   1e2c6:	442b      	add	r3, r5
   1e2c8:	6023      	str	r3, [r4, #0]
}
   1e2ca:	bd38      	pop	{r3, r4, r5, pc}
   1e2cc:	0002f7ee 	.word	0x0002f7ee
   1e2d0:	000297e6 	.word	0x000297e6
   1e2d4:	0002f705 	.word	0x0002f705
   1e2d8:	0002f779 	.word	0x0002f779

0001e2dc <net_buf_slist_put>:

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1e2dc:	b538      	push	{r3, r4, r5, lr}
   1e2de:	460d      	mov	r5, r1
	struct net_buf *tail;
	unsigned int key;

	__ASSERT_NO_MSG(list);
   1e2e0:	4604      	mov	r4, r0
   1e2e2:	b958      	cbnz	r0, 1e2fc <net_buf_slist_put+0x20>
   1e2e4:	491a      	ldr	r1, [pc, #104]	; (1e350 <net_buf_slist_put+0x74>)
   1e2e6:	481b      	ldr	r0, [pc, #108]	; (1e354 <net_buf_slist_put+0x78>)
   1e2e8:	4a1b      	ldr	r2, [pc, #108]	; (1e358 <net_buf_slist_put+0x7c>)
   1e2ea:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   1e2ee:	f004 ffec 	bl	232ca <printk>
   1e2f2:	4819      	ldr	r0, [pc, #100]	; (1e358 <net_buf_slist_put+0x7c>)
   1e2f4:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1e2f8:	f005 f82a 	bl	23350 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1e2fc:	b95d      	cbnz	r5, 1e316 <net_buf_slist_put+0x3a>
   1e2fe:	4917      	ldr	r1, [pc, #92]	; (1e35c <net_buf_slist_put+0x80>)
   1e300:	4814      	ldr	r0, [pc, #80]	; (1e354 <net_buf_slist_put+0x78>)
   1e302:	4a15      	ldr	r2, [pc, #84]	; (1e358 <net_buf_slist_put+0x7c>)
   1e304:	f240 13c5 	movw	r3, #453	; 0x1c5
   1e308:	f004 ffdf 	bl	232ca <printk>
   1e30c:	4812      	ldr	r0, [pc, #72]	; (1e358 <net_buf_slist_put+0x7c>)
   1e30e:	f240 11c5 	movw	r1, #453	; 0x1c5
   1e312:	f005 f81d 	bl	23350 <assert_post_action>
{
   1e316:	462b      	mov	r3, r5

	for (tail = buf; tail->frags; tail = tail->frags) {
   1e318:	6819      	ldr	r1, [r3, #0]
   1e31a:	b981      	cbnz	r1, 1e33e <net_buf_slist_put+0x62>
	__asm__ volatile(
   1e31c:	f04f 0220 	mov.w	r2, #32
   1e320:	f3ef 8111 	mrs	r1, BASEPRI
   1e324:	f382 8811 	msr	BASEPRI, r2
   1e328:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   1e32c:	6862      	ldr	r2, [r4, #4]
   1e32e:	b962      	cbnz	r2, 1e34a <net_buf_slist_put+0x6e>
	list->head = node;
   1e330:	6025      	str	r5, [r4, #0]
	list->tail = node;
   1e332:	6063      	str	r3, [r4, #4]
	__asm__ volatile(
   1e334:	f381 8811 	msr	BASEPRI, r1
   1e338:	f3bf 8f6f 	isb	sy
	}

	key = irq_lock();
	sys_slist_append_list(list, &buf->node, &tail->node);
	irq_unlock(key);
}
   1e33c:	bd38      	pop	{r3, r4, r5, pc}
		tail->flags |= NET_BUF_FRAGS;
   1e33e:	795a      	ldrb	r2, [r3, #5]
   1e340:	f042 0201 	orr.w	r2, r2, #1
   1e344:	715a      	strb	r2, [r3, #5]
   1e346:	460b      	mov	r3, r1
   1e348:	e7e6      	b.n	1e318 <net_buf_slist_put+0x3c>
	parent->next = child;
   1e34a:	6015      	str	r5, [r2, #0]
}
   1e34c:	e7f1      	b.n	1e332 <net_buf_slist_put+0x56>
   1e34e:	bf00      	nop
   1e350:	0002f788 	.word	0x0002f788
   1e354:	000297e6 	.word	0x000297e6
   1e358:	0002f705 	.word	0x0002f705
   1e35c:	0002f7ee 	.word	0x0002f7ee

0001e360 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1e360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf, *frag;
	unsigned int key;

	__ASSERT_NO_MSG(list);
   1e364:	4604      	mov	r4, r0
   1e366:	b958      	cbnz	r0, 1e380 <net_buf_slist_get+0x20>
   1e368:	492b      	ldr	r1, [pc, #172]	; (1e418 <net_buf_slist_get+0xb8>)
   1e36a:	482c      	ldr	r0, [pc, #176]	; (1e41c <net_buf_slist_get+0xbc>)
   1e36c:	4a2c      	ldr	r2, [pc, #176]	; (1e420 <net_buf_slist_get+0xc0>)
   1e36e:	f240 13d5 	movw	r3, #469	; 0x1d5
   1e372:	f004 ffaa 	bl	232ca <printk>
   1e376:	482a      	ldr	r0, [pc, #168]	; (1e420 <net_buf_slist_get+0xc0>)
   1e378:	f240 11d5 	movw	r1, #469	; 0x1d5
   1e37c:	f004 ffe8 	bl	23350 <assert_post_action>
	__asm__ volatile(
   1e380:	f04f 0320 	mov.w	r3, #32
   1e384:	f3ef 8211 	mrs	r2, BASEPRI
   1e388:	f383 8811 	msr	BASEPRI, r3
   1e38c:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1e390:	6826      	ldr	r6, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1e392:	b12e      	cbz	r6, 1e3a0 <net_buf_slist_get+0x40>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e394:	6861      	ldr	r1, [r4, #4]
   1e396:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   1e398:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e39a:	428e      	cmp	r6, r1
	list->tail = node;
   1e39c:	bf08      	it	eq
   1e39e:	6063      	streq	r3, [r4, #4]
	__asm__ volatile(
   1e3a0:	f382 8811 	msr	BASEPRI, r2
   1e3a4:	f3bf 8f6f 	isb	sy

	key = irq_lock();
	buf = (void *)sys_slist_get(list);
	irq_unlock(key);

	if (!buf) {
   1e3a8:	b156      	cbz	r6, 1e3c0 <net_buf_slist_get+0x60>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		key = irq_lock();
		frag->frags = (void *)sys_slist_get(list);
		irq_unlock(key);

		__ASSERT_NO_MSG(frag->frags);
   1e3aa:	f8df 9074 	ldr.w	r9, [pc, #116]	; 1e420 <net_buf_slist_get+0xc0>
   1e3ae:	4f1d      	ldr	r7, [pc, #116]	; (1e424 <net_buf_slist_get+0xc4>)
   1e3b0:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1e41c <net_buf_slist_get+0xbc>
   1e3b4:	4635      	mov	r5, r6
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1e3b6:	796b      	ldrb	r3, [r5, #5]
   1e3b8:	f013 0301 	ands.w	r3, r3, #1
   1e3bc:	d103      	bne.n	1e3c6 <net_buf_slist_get+0x66>
		/* The fragments flag is only for list-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1e3be:	602b      	str	r3, [r5, #0]

	return buf;
}
   1e3c0:	4630      	mov	r0, r6
   1e3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   1e3c6:	f04f 0320 	mov.w	r3, #32
   1e3ca:	f3ef 8011 	mrs	r0, BASEPRI
   1e3ce:	f383 8811 	msr	BASEPRI, r3
   1e3d2:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1e3d6:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1e3d8:	b12b      	cbz	r3, 1e3e6 <net_buf_slist_get+0x86>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e3da:	6861      	ldr	r1, [r4, #4]
   1e3dc:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   1e3de:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e3e0:	428b      	cmp	r3, r1
	list->tail = node;
   1e3e2:	bf08      	it	eq
   1e3e4:	6062      	streq	r2, [r4, #4]
		frag->frags = (void *)sys_slist_get(list);
   1e3e6:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1e3e8:	f380 8811 	msr	BASEPRI, r0
   1e3ec:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(frag->frags);
   1e3f0:	682b      	ldr	r3, [r5, #0]
   1e3f2:	b95b      	cbnz	r3, 1e40c <net_buf_slist_get+0xac>
   1e3f4:	4639      	mov	r1, r7
   1e3f6:	4640      	mov	r0, r8
   1e3f8:	f240 13e5 	movw	r3, #485	; 0x1e5
   1e3fc:	464a      	mov	r2, r9
   1e3fe:	f004 ff64 	bl	232ca <printk>
   1e402:	f240 11e5 	movw	r1, #485	; 0x1e5
   1e406:	4648      	mov	r0, r9
   1e408:	f004 ffa2 	bl	23350 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1e40c:	796b      	ldrb	r3, [r5, #5]
   1e40e:	f023 0301 	bic.w	r3, r3, #1
   1e412:	716b      	strb	r3, [r5, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1e414:	682d      	ldr	r5, [r5, #0]
   1e416:	e7ce      	b.n	1e3b6 <net_buf_slist_get+0x56>
   1e418:	0002f788 	.word	0x0002f788
   1e41c:	000297e6 	.word	0x000297e6
   1e420:	0002f705 	.word	0x0002f705
   1e424:	0002f76d 	.word	0x0002f76d

0001e428 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1e428:	b538      	push	{r3, r4, r5, lr}
   1e42a:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1e42c:	4605      	mov	r5, r0
   1e42e:	b958      	cbnz	r0, 1e448 <net_buf_put+0x20>
   1e430:	4913      	ldr	r1, [pc, #76]	; (1e480 <net_buf_put+0x58>)
   1e432:	4814      	ldr	r0, [pc, #80]	; (1e484 <net_buf_put+0x5c>)
   1e434:	4a14      	ldr	r2, [pc, #80]	; (1e488 <net_buf_put+0x60>)
   1e436:	f240 13f5 	movw	r3, #501	; 0x1f5
   1e43a:	f004 ff46 	bl	232ca <printk>
   1e43e:	4812      	ldr	r0, [pc, #72]	; (1e488 <net_buf_put+0x60>)
   1e440:	f240 11f5 	movw	r1, #501	; 0x1f5
   1e444:	f004 ff84 	bl	23350 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1e448:	b95c      	cbnz	r4, 1e462 <net_buf_put+0x3a>
   1e44a:	4910      	ldr	r1, [pc, #64]	; (1e48c <net_buf_put+0x64>)
   1e44c:	480d      	ldr	r0, [pc, #52]	; (1e484 <net_buf_put+0x5c>)
   1e44e:	4a0e      	ldr	r2, [pc, #56]	; (1e488 <net_buf_put+0x60>)
   1e450:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   1e454:	f004 ff39 	bl	232ca <printk>
   1e458:	480b      	ldr	r0, [pc, #44]	; (1e488 <net_buf_put+0x60>)
   1e45a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   1e45e:	f004 ff77 	bl	23350 <assert_post_action>
{
   1e462:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1e464:	6811      	ldr	r1, [r2, #0]
   1e466:	b929      	cbnz	r1, 1e474 <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1e468:	4621      	mov	r1, r4
   1e46a:	4628      	mov	r0, r5
}
   1e46c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1e470:	f001 bf6c 	b.w	2034c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1e474:	7953      	ldrb	r3, [r2, #5]
   1e476:	f043 0301 	orr.w	r3, r3, #1
   1e47a:	7153      	strb	r3, [r2, #5]
   1e47c:	460a      	mov	r2, r1
   1e47e:	e7f1      	b.n	1e464 <net_buf_put+0x3c>
   1e480:	0002f78d 	.word	0x0002f78d
   1e484:	000297e6 	.word	0x000297e6
   1e488:	0002f705 	.word	0x0002f705
   1e48c:	0002f7ee 	.word	0x0002f7ee

0001e490 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1e490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1e494:	4605      	mov	r5, r0
   1e496:	b328      	cbz	r0, 1e4e4 <net_buf_unref+0x54>
   1e498:	4e1d      	ldr	r6, [pc, #116]	; (1e510 <net_buf_unref+0x80>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1e49a:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1e49c:	f04f 0824 	mov.w	r8, #36	; 0x24
		struct net_buf *frags = buf->frags;
   1e4a0:	462c      	mov	r4, r5
   1e4a2:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1e4a4:	7923      	ldrb	r3, [r4, #4]
   1e4a6:	3b01      	subs	r3, #1
   1e4a8:	b2db      	uxtb	r3, r3
   1e4aa:	7123      	strb	r3, [r4, #4]
   1e4ac:	b9c3      	cbnz	r3, 1e4e0 <net_buf_unref+0x50>
		if (buf->__buf) {
   1e4ae:	6921      	ldr	r1, [r4, #16]
   1e4b0:	b159      	cbz	r1, 1e4ca <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1e4b2:	7963      	ldrb	r3, [r4, #5]
   1e4b4:	079b      	lsls	r3, r3, #30
   1e4b6:	d407      	bmi.n	1e4c8 <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
   1e4b8:	79a3      	ldrb	r3, [r4, #6]
   1e4ba:	fb08 6303 	mla	r3, r8, r3, r6
   1e4be:	4620      	mov	r0, r4
   1e4c0:	69db      	ldr	r3, [r3, #28]
   1e4c2:	681b      	ldr	r3, [r3, #0]
   1e4c4:	689b      	ldr	r3, [r3, #8]
   1e4c6:	4798      	blx	r3
			buf->__buf = NULL;
   1e4c8:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1e4ca:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1e4cc:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		__ASSERT_NO_MSG(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1e4ce:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1e4d2:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1e4d4:	699b      	ldr	r3, [r3, #24]
   1e4d6:	b19b      	cbz	r3, 1e500 <net_buf_unref+0x70>
			pool->destroy(buf);
   1e4d8:	4620      	mov	r0, r4
   1e4da:	4798      	blx	r3
	while (buf) {
   1e4dc:	2d00      	cmp	r5, #0
   1e4de:	d1df      	bne.n	1e4a0 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1e4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1e4e4:	490b      	ldr	r1, [pc, #44]	; (1e514 <net_buf_unref+0x84>)
   1e4e6:	480c      	ldr	r0, [pc, #48]	; (1e518 <net_buf_unref+0x88>)
   1e4e8:	4a0c      	ldr	r2, [pc, #48]	; (1e51c <net_buf_unref+0x8c>)
   1e4ea:	f240 2305 	movw	r3, #517	; 0x205
   1e4ee:	f004 feec 	bl	232ca <printk>
}
   1e4f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1e4f6:	4809      	ldr	r0, [pc, #36]	; (1e51c <net_buf_unref+0x8c>)
   1e4f8:	f240 2105 	movw	r1, #517	; 0x205
   1e4fc:	f004 bf28 	b.w	23350 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1e500:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1e504:	4621      	mov	r1, r4
   1e506:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   1e50a:	f009 feee 	bl	282ea <k_queue_prepend>
}
   1e50e:	e7e5      	b.n	1e4dc <net_buf_unref+0x4c>
   1e510:	2000755c 	.word	0x2000755c
   1e514:	0002f7ee 	.word	0x0002f7ee
   1e518:	000297e6 	.word	0x000297e6
   1e51c:	0002f705 	.word	0x0002f705

0001e520 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1e520:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1e522:	4604      	mov	r4, r0
   1e524:	b958      	cbnz	r0, 1e53e <net_buf_ref+0x1e>
   1e526:	4908      	ldr	r1, [pc, #32]	; (1e548 <net_buf_ref+0x28>)
   1e528:	4808      	ldr	r0, [pc, #32]	; (1e54c <net_buf_ref+0x2c>)
   1e52a:	4a09      	ldr	r2, [pc, #36]	; (1e550 <net_buf_ref+0x30>)
   1e52c:	f44f 730d 	mov.w	r3, #564	; 0x234
   1e530:	f004 fecb 	bl	232ca <printk>
   1e534:	4806      	ldr	r0, [pc, #24]	; (1e550 <net_buf_ref+0x30>)
   1e536:	f44f 710d 	mov.w	r1, #564	; 0x234
   1e53a:	f004 ff09 	bl	23350 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1e53e:	7923      	ldrb	r3, [r4, #4]
   1e540:	3301      	adds	r3, #1
   1e542:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1e544:	4620      	mov	r0, r4
   1e546:	bd10      	pop	{r4, pc}
   1e548:	0002f7ee 	.word	0x0002f7ee
   1e54c:	000297e6 	.word	0x000297e6
   1e550:	0002f705 	.word	0x0002f705

0001e554 <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1e554:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1e556:	6882      	ldr	r2, [r0, #8]
   1e558:	6803      	ldr	r3, [r0, #0]
   1e55a:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1e55c:	4299      	cmp	r1, r3
{
   1e55e:	4604      	mov	r4, r0
   1e560:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1e562:	d90b      	bls.n	1e57c <net_buf_simple_push+0x28>
   1e564:	4909      	ldr	r1, [pc, #36]	; (1e58c <net_buf_simple_push+0x38>)
   1e566:	480a      	ldr	r0, [pc, #40]	; (1e590 <net_buf_simple_push+0x3c>)
   1e568:	4a0a      	ldr	r2, [pc, #40]	; (1e594 <net_buf_simple_push+0x40>)
   1e56a:	f240 3371 	movw	r3, #881	; 0x371
   1e56e:	f004 feac 	bl	232ca <printk>
   1e572:	4808      	ldr	r0, [pc, #32]	; (1e594 <net_buf_simple_push+0x40>)
   1e574:	f240 3171 	movw	r1, #881	; 0x371
   1e578:	f004 feea 	bl	23350 <assert_post_action>
	buf->data -= len;
   1e57c:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1e57e:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1e580:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1e582:	440d      	add	r5, r1
	buf->data -= len;
   1e584:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1e586:	80a5      	strh	r5, [r4, #4]
}
   1e588:	bd38      	pop	{r3, r4, r5, pc}
   1e58a:	bf00      	nop
   1e58c:	0002f792 	.word	0x0002f792
   1e590:	000297e6 	.word	0x000297e6
   1e594:	0002f705 	.word	0x0002f705

0001e598 <net_buf_simple_pull>:
{
   1e598:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1e59a:	8883      	ldrh	r3, [r0, #4]
   1e59c:	428b      	cmp	r3, r1
{
   1e59e:	4604      	mov	r4, r0
   1e5a0:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1e5a2:	d20b      	bcs.n	1e5bc <net_buf_simple_pull+0x24>
   1e5a4:	4909      	ldr	r1, [pc, #36]	; (1e5cc <net_buf_simple_pull+0x34>)
   1e5a6:	480a      	ldr	r0, [pc, #40]	; (1e5d0 <net_buf_simple_pull+0x38>)
   1e5a8:	4a0a      	ldr	r2, [pc, #40]	; (1e5d4 <net_buf_simple_pull+0x3c>)
   1e5aa:	f240 33c9 	movw	r3, #969	; 0x3c9
   1e5ae:	f004 fe8c 	bl	232ca <printk>
   1e5b2:	4808      	ldr	r0, [pc, #32]	; (1e5d4 <net_buf_simple_pull+0x3c>)
   1e5b4:	f240 31c9 	movw	r1, #969	; 0x3c9
   1e5b8:	f004 feca 	bl	23350 <assert_post_action>
	buf->len -= len;
   1e5bc:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1e5be:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1e5c0:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1e5c2:	4428      	add	r0, r5
	buf->len -= len;
   1e5c4:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1e5c6:	6020      	str	r0, [r4, #0]
}
   1e5c8:	bd38      	pop	{r3, r4, r5, pc}
   1e5ca:	bf00      	nop
   1e5cc:	0002f7b6 	.word	0x0002f7b6
   1e5d0:	000297e6 	.word	0x000297e6
   1e5d4:	0002f705 	.word	0x0002f705

0001e5d8 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1e5d8:	8883      	ldrh	r3, [r0, #4]
   1e5da:	428b      	cmp	r3, r1
{
   1e5dc:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   1e5de:	6806      	ldr	r6, [r0, #0]
{
   1e5e0:	4604      	mov	r4, r0
   1e5e2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1e5e4:	d20b      	bcs.n	1e5fe <net_buf_simple_pull_mem+0x26>
   1e5e6:	490a      	ldr	r1, [pc, #40]	; (1e610 <net_buf_simple_pull_mem+0x38>)
   1e5e8:	480a      	ldr	r0, [pc, #40]	; (1e614 <net_buf_simple_pull_mem+0x3c>)
   1e5ea:	4a0b      	ldr	r2, [pc, #44]	; (1e618 <net_buf_simple_pull_mem+0x40>)
   1e5ec:	f240 33d5 	movw	r3, #981	; 0x3d5
   1e5f0:	f004 fe6b 	bl	232ca <printk>
   1e5f4:	4808      	ldr	r0, [pc, #32]	; (1e618 <net_buf_simple_pull_mem+0x40>)
   1e5f6:	f240 31d5 	movw	r1, #981	; 0x3d5
   1e5fa:	f004 fea9 	bl	23350 <assert_post_action>
	buf->len -= len;
   1e5fe:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1e600:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1e602:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1e604:	4429      	add	r1, r5
	buf->len -= len;
   1e606:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1e608:	6021      	str	r1, [r4, #0]
}
   1e60a:	4630      	mov	r0, r6
   1e60c:	bd70      	pop	{r4, r5, r6, pc}
   1e60e:	bf00      	nop
   1e610:	0002f7b6 	.word	0x0002f7b6
   1e614:	000297e6 	.word	0x000297e6
   1e618:	0002f705 	.word	0x0002f705

0001e61c <net_buf_simple_add>:
{
   1e61c:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1e61e:	6803      	ldr	r3, [r0, #0]
   1e620:	8886      	ldrh	r6, [r0, #4]
   1e622:	4604      	mov	r4, r0
   1e624:	460d      	mov	r5, r1
   1e626:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1e628:	f009 fc58 	bl	27edc <net_buf_simple_tailroom>
   1e62c:	4288      	cmp	r0, r1
   1e62e:	d20b      	bcs.n	1e648 <net_buf_simple_add+0x2c>
   1e630:	4908      	ldr	r1, [pc, #32]	; (1e654 <net_buf_simple_add+0x38>)
   1e632:	4809      	ldr	r0, [pc, #36]	; (1e658 <net_buf_simple_add+0x3c>)
   1e634:	4a09      	ldr	r2, [pc, #36]	; (1e65c <net_buf_simple_add+0x40>)
   1e636:	f240 330d 	movw	r3, #781	; 0x30d
   1e63a:	f004 fe46 	bl	232ca <printk>
   1e63e:	4807      	ldr	r0, [pc, #28]	; (1e65c <net_buf_simple_add+0x40>)
   1e640:	f240 310d 	movw	r1, #781	; 0x30d
   1e644:	f004 fe84 	bl	23350 <assert_post_action>
	buf->len += len;
   1e648:	88a1      	ldrh	r1, [r4, #4]
   1e64a:	440d      	add	r5, r1
   1e64c:	80a5      	strh	r5, [r4, #4]
}
   1e64e:	4630      	mov	r0, r6
   1e650:	bd70      	pop	{r4, r5, r6, pc}
   1e652:	bf00      	nop
   1e654:	0002f7c6 	.word	0x0002f7c6
   1e658:	000297e6 	.word	0x000297e6
   1e65c:	0002f705 	.word	0x0002f705

0001e660 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1e660:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1e662:	6885      	ldr	r5, [r0, #8]
{
   1e664:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1e666:	460c      	mov	r4, r1
   1e668:	b961      	cbnz	r1, 1e684 <gpio_nrfx_manage_callback+0x24>
   1e66a:	4922      	ldr	r1, [pc, #136]	; (1e6f4 <gpio_nrfx_manage_callback+0x94>)
   1e66c:	4a22      	ldr	r2, [pc, #136]	; (1e6f8 <gpio_nrfx_manage_callback+0x98>)
   1e66e:	4823      	ldr	r0, [pc, #140]	; (1e6fc <gpio_nrfx_manage_callback+0x9c>)
   1e670:	231e      	movs	r3, #30
   1e672:	f004 fe2a 	bl	232ca <printk>
   1e676:	4822      	ldr	r0, [pc, #136]	; (1e700 <gpio_nrfx_manage_callback+0xa0>)
   1e678:	f004 fe27 	bl	232ca <printk>
   1e67c:	481e      	ldr	r0, [pc, #120]	; (1e6f8 <gpio_nrfx_manage_callback+0x98>)
   1e67e:	211e      	movs	r1, #30
   1e680:	f004 fe66 	bl	23350 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1e684:	6863      	ldr	r3, [r4, #4]
   1e686:	b963      	cbnz	r3, 1e6a2 <gpio_nrfx_manage_callback+0x42>
   1e688:	491e      	ldr	r1, [pc, #120]	; (1e704 <gpio_nrfx_manage_callback+0xa4>)
   1e68a:	4a1b      	ldr	r2, [pc, #108]	; (1e6f8 <gpio_nrfx_manage_callback+0x98>)
   1e68c:	481b      	ldr	r0, [pc, #108]	; (1e6fc <gpio_nrfx_manage_callback+0x9c>)
   1e68e:	231f      	movs	r3, #31
   1e690:	f004 fe1b 	bl	232ca <printk>
   1e694:	481c      	ldr	r0, [pc, #112]	; (1e708 <gpio_nrfx_manage_callback+0xa8>)
   1e696:	f004 fe18 	bl	232ca <printk>
   1e69a:	4817      	ldr	r0, [pc, #92]	; (1e6f8 <gpio_nrfx_manage_callback+0x98>)
   1e69c:	211f      	movs	r1, #31
   1e69e:	f004 fe57 	bl	23350 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1e6a2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1e6a4:	b15b      	cbz	r3, 1e6be <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e6a6:	2200      	movs	r2, #0
   1e6a8:	429c      	cmp	r4, r3
   1e6aa:	d113      	bne.n	1e6d4 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   1e6ac:	6823      	ldr	r3, [r4, #0]
   1e6ae:	b95a      	cbnz	r2, 1e6c8 <gpio_nrfx_manage_callback+0x68>
   1e6b0:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   1e6b2:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1e6b4:	4294      	cmp	r4, r2
   1e6b6:	d100      	bne.n	1e6ba <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   1e6b8:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1e6ba:	2300      	movs	r3, #0
   1e6bc:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1e6be:	b976      	cbnz	r6, 1e6de <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1e6c0:	2000      	movs	r0, #0
				     callback, set);
}
   1e6c2:	bd70      	pop	{r4, r5, r6, pc}
   1e6c4:	460b      	mov	r3, r1
   1e6c6:	e7ef      	b.n	1e6a8 <gpio_nrfx_manage_callback+0x48>
   1e6c8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e6ca:	68ab      	ldr	r3, [r5, #8]
   1e6cc:	429c      	cmp	r4, r3
	list->tail = node;
   1e6ce:	bf08      	it	eq
   1e6d0:	60aa      	streq	r2, [r5, #8]
}
   1e6d2:	e7f2      	b.n	1e6ba <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e6d4:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e6d6:	461a      	mov	r2, r3
   1e6d8:	2900      	cmp	r1, #0
   1e6da:	d1f3      	bne.n	1e6c4 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1e6dc:	b13e      	cbz	r6, 1e6ee <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   1e6de:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1e6e0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e6e2:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   1e6e4:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e6e6:	2800      	cmp	r0, #0
   1e6e8:	d1ea      	bne.n	1e6c0 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1e6ea:	60ac      	str	r4, [r5, #8]
}
   1e6ec:	e7e9      	b.n	1e6c2 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   1e6ee:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1e6f2:	e7e6      	b.n	1e6c2 <gpio_nrfx_manage_callback+0x62>
   1e6f4:	0002f81f 	.word	0x0002f81f
   1e6f8:	0002f7f2 	.word	0x0002f7f2
   1e6fc:	000297e6 	.word	0x000297e6
   1e700:	0002f828 	.word	0x0002f828
   1e704:	0002f837 	.word	0x0002f837
   1e708:	0002f849 	.word	0x0002f849

0001e70c <nrf_gpio_pin_port_decode.isra.0.part.0>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   1e70c:	b510      	push	{r4, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1e70e:	4c07      	ldr	r4, [pc, #28]	; (1e72c <nrf_gpio_pin_port_decode.isra.0.part.0+0x20>)
   1e710:	4907      	ldr	r1, [pc, #28]	; (1e730 <nrf_gpio_pin_port_decode.isra.0.part.0+0x24>)
   1e712:	4808      	ldr	r0, [pc, #32]	; (1e734 <nrf_gpio_pin_port_decode.isra.0.part.0+0x28>)
   1e714:	4622      	mov	r2, r4
   1e716:	f240 13ff 	movw	r3, #511	; 0x1ff
   1e71a:	f004 fdd6 	bl	232ca <printk>
   1e71e:	4620      	mov	r0, r4
   1e720:	f240 11ff 	movw	r1, #511	; 0x1ff
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   1e724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1e728:	f004 be12 	b.w	23350 <assert_post_action>
   1e72c:	0002f860 	.word	0x0002f860
   1e730:	0002f893 	.word	0x0002f893
   1e734:	000297e6 	.word	0x000297e6

0001e738 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   1e738:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1e73a:	4b09      	ldr	r3, [pc, #36]	; (1e760 <gpio_nrfx_init+0x28>)
   1e73c:	781a      	ldrb	r2, [r3, #0]
   1e73e:	b96a      	cbnz	r2, 1e75c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1e740:	2101      	movs	r1, #1
   1e742:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   1e744:	2006      	movs	r0, #6
   1e746:	2105      	movs	r1, #5
   1e748:	f7e5 fff6 	bl	4738 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   1e74c:	2006      	movs	r0, #6
   1e74e:	f7e5 ffc1 	bl	46d4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1e752:	4b04      	ldr	r3, [pc, #16]	; (1e764 <gpio_nrfx_init+0x2c>)
   1e754:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1e758:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1e75c:	2000      	movs	r0, #0
   1e75e:	bd08      	pop	{r3, pc}
   1e760:	20002323 	.word	0x20002323
   1e764:	40006000 	.word	0x40006000

0001e768 <gpiote_pin_int_cfg>:
{
   1e768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return port->config->config_info;
   1e76a:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   1e76c:	6887      	ldr	r7, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1e76e:	689b      	ldr	r3, [r3, #8]
   1e770:	f001 051f 	and.w	r5, r1, #31
{
   1e774:	460e      	mov	r6, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1e776:	494a      	ldr	r1, [pc, #296]	; (1e8a0 <gpiote_pin_int_cfg+0x138>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1e778:	7a18      	ldrb	r0, [r3, #8]
   1e77a:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   1e77e:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
   1e782:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1e784:	2300      	movs	r3, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1e786:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1e78a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   1e78e:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1e792:	4285      	cmp	r5, r0
   1e794:	d16e      	bne.n	1e874 <gpiote_pin_int_cfg+0x10c>
		    && (intenset & BIT(i))) {
   1e796:	fa22 f003 	lsr.w	r0, r2, r3
   1e79a:	07c0      	lsls	r0, r0, #31
   1e79c:	d56a      	bpl.n	1e874 <gpiote_pin_int_cfg+0x10c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1e79e:	009a      	lsls	r2, r3, #2
   1e7a0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e7a4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   1e7a8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1e7ac:	f020 0001 	bic.w	r0, r0, #1
   1e7b0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1e7b4:	2201      	movs	r2, #1
   1e7b6:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
   1e7ba:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1e7be:	4628      	mov	r0, r5
   1e7c0:	2100      	movs	r1, #0
   1e7c2:	f009 fbfe 	bl	27fc2 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   1e7c6:	68fb      	ldr	r3, [r7, #12]
   1e7c8:	40f3      	lsrs	r3, r6
   1e7ca:	f013 0001 	ands.w	r0, r3, #1
   1e7ce:	d04f      	beq.n	1e870 <gpiote_pin_int_cfg+0x108>
   1e7d0:	693b      	ldr	r3, [r7, #16]
   1e7d2:	40f3      	lsrs	r3, r6
   1e7d4:	f013 0001 	ands.w	r0, r3, #1
   1e7d8:	d04a      	beq.n	1e870 <gpiote_pin_int_cfg+0x108>
		if (data->trig_edge & BIT(pin)) {
   1e7da:	69bb      	ldr	r3, [r7, #24]
   1e7dc:	40f3      	lsrs	r3, r6
   1e7de:	f013 0401 	ands.w	r4, r3, #1
   1e7e2:	d051      	beq.n	1e888 <gpiote_pin_int_cfg+0x120>
			if (data->double_edge & BIT(pin)) {
   1e7e4:	69fb      	ldr	r3, [r7, #28]
   1e7e6:	40f3      	lsrs	r3, r6
   1e7e8:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1e7ea:	bf58      	it	pl
   1e7ec:	6979      	ldrpl	r1, [r7, #20]
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   1e7ee:	4f2c      	ldr	r7, [pc, #176]	; (1e8a0 <gpiote_pin_int_cfg+0x138>)
   1e7f0:	bf5f      	itttt	pl
   1e7f2:	fa21 f606 	lsrpl.w	r6, r1, r6
   1e7f6:	f006 0601 	andpl.w	r6, r6, #1
   1e7fa:	f1c6 0602 	rsbpl	r6, r6, #2
   1e7fe:	b2f6      	uxtbpl	r6, r6
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1e800:	bf48      	it	mi
   1e802:	2603      	movmi	r6, #3
   1e804:	2400      	movs	r4, #0
   1e806:	f504 73a2 	add.w	r3, r4, #324	; 0x144
   1e80a:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   1e80e:	f010 0003 	ands.w	r0, r0, #3
   1e812:	d133      	bne.n	1e87c <gpiote_pin_int_cfg+0x114>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1e814:	00a2      	lsls	r2, r4, #2
   1e816:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e81a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e81e:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1e820:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   1e824:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   1e828:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1e82c:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e830:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   1e834:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
   1e838:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   1e83c:	430e      	orrs	r6, r1
			nrf_gpiote_event_t evt =
   1e83e:	f104 0140 	add.w	r1, r4, #64	; 0x40
   1e842:	0089      	lsls	r1, r1, #2
    return ((uint32_t)p_reg + event);
   1e844:	b289      	uxth	r1, r1
   1e846:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1e84a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e84e:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e852:	6008      	str	r0, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1e854:	6809      	ldr	r1, [r1, #0]
   1e856:	9101      	str	r1, [sp, #4]
    (void)dummy;
   1e858:	9901      	ldr	r1, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1e85a:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   1e85e:	f041 0101 	orr.w	r1, r1, #1
   1e862:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1e866:	2201      	movs	r2, #1
   1e868:	fa02 f404 	lsl.w	r4, r2, r4
    p_reg->INTENSET = mask;
   1e86c:	f8c7 4304 	str.w	r4, [r7, #772]	; 0x304
}
   1e870:	b003      	add	sp, #12
   1e872:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1e874:	3301      	adds	r3, #1
   1e876:	2b08      	cmp	r3, #8
   1e878:	d185      	bne.n	1e786 <gpiote_pin_int_cfg+0x1e>
   1e87a:	e7a0      	b.n	1e7be <gpiote_pin_int_cfg+0x56>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1e87c:	3401      	adds	r4, #1
   1e87e:	2c08      	cmp	r4, #8
   1e880:	d1c1      	bne.n	1e806 <gpiote_pin_int_cfg+0x9e>
	return -ENODEV;
   1e882:	f06f 0012 	mvn.w	r0, #18
   1e886:	e7f3      	b.n	1e870 <gpiote_pin_int_cfg+0x108>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1e888:	6979      	ldr	r1, [r7, #20]
   1e88a:	40f1      	lsrs	r1, r6
   1e88c:	f001 0101 	and.w	r1, r1, #1
   1e890:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1e894:	4628      	mov	r0, r5
   1e896:	b2c9      	uxtb	r1, r1
   1e898:	f009 fb93 	bl	27fc2 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1e89c:	4620      	mov	r0, r4
   1e89e:	e7e7      	b.n	1e870 <gpiote_pin_int_cfg+0x108>
   1e8a0:	40006000 	.word	0x40006000

0001e8a4 <gpio_nrfx_config>:
	return port->config->config_info;
   1e8a4:	6803      	ldr	r3, [r0, #0]
   1e8a6:	6898      	ldr	r0, [r3, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e8a8:	4b2f      	ldr	r3, [pc, #188]	; (1e968 <gpio_nrfx_config+0xc4>)
{
   1e8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e8ae:	4c2f      	ldr	r4, [pc, #188]	; (1e96c <gpio_nrfx_config+0xc8>)
   1e8b0:	4013      	ands	r3, r2
   1e8b2:	42a3      	cmp	r3, r4
   1e8b4:	d046      	beq.n	1e944 <gpio_nrfx_config+0xa0>
   1e8b6:	d80e      	bhi.n	1e8d6 <gpio_nrfx_config+0x32>
   1e8b8:	2b06      	cmp	r3, #6
   1e8ba:	d045      	beq.n	1e948 <gpio_nrfx_config+0xa4>
   1e8bc:	d806      	bhi.n	1e8cc <gpio_nrfx_config+0x28>
   1e8be:	2b00      	cmp	r3, #0
   1e8c0:	d042      	beq.n	1e948 <gpio_nrfx_config+0xa4>
   1e8c2:	2b02      	cmp	r3, #2
   1e8c4:	d042      	beq.n	1e94c <gpio_nrfx_config+0xa8>
   1e8c6:	f06f 0015 	mvn.w	r0, #21
   1e8ca:	e039      	b.n	1e940 <gpio_nrfx_config+0x9c>
   1e8cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e8d0:	d1f9      	bne.n	1e8c6 <gpio_nrfx_config+0x22>
		drive = NRF_GPIO_PIN_H0S1;
   1e8d2:	2401      	movs	r4, #1
   1e8d4:	e009      	b.n	1e8ea <gpio_nrfx_config+0x46>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e8d6:	4c26      	ldr	r4, [pc, #152]	; (1e970 <gpio_nrfx_config+0xcc>)
   1e8d8:	42a3      	cmp	r3, r4
   1e8da:	d039      	beq.n	1e950 <gpio_nrfx_config+0xac>
   1e8dc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1e8e0:	d038      	beq.n	1e954 <gpio_nrfx_config+0xb0>
   1e8e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1e8e6:	d1ee      	bne.n	1e8c6 <gpio_nrfx_config+0x22>
		drive = NRF_GPIO_PIN_S0H1;
   1e8e8:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1e8ea:	06d6      	lsls	r6, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1e8ec:	bf54      	ite	pl
   1e8ee:	f3c2 1840 	ubfxpl	r8, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1e8f2:	f04f 0803 	movmi.w	r8, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1e8f6:	f482 7380 	eor.w	r3, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1e8fa:	0595      	lsls	r5, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1e8fc:	f3c2 2640 	ubfx	r6, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1e900:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1e904:	d506      	bpl.n	1e914 <gpio_nrfx_config+0x70>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1e906:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e908:	6845      	ldr	r5, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1e90a:	d525      	bpl.n	1e958 <gpio_nrfx_config+0xb4>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1e90c:	2301      	movs	r3, #1
   1e90e:	408b      	lsls	r3, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1e910:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1e914:	7a05      	ldrb	r5, [r0, #8]
   1e916:	f001 011f 	and.w	r1, r1, #31
   1e91a:	ea41 1545 	orr.w	r5, r1, r5, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1e91e:	2d1f      	cmp	r5, #31
   1e920:	dd01      	ble.n	1e926 <gpio_nrfx_config+0x82>
   1e922:	f7ff fef3 	bl	1e70c <nrf_gpio_pin_port_decode.isra.0.part.0>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1e926:	ea46 0347 	orr.w	r3, r6, r7, lsl #1
   1e92a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e92e:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1e932:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1e936:	ea43 0388 	orr.w	r3, r3, r8, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e93a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
	return 0;
   1e93e:	2000      	movs	r0, #0
}
   1e940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1e944:	2407      	movs	r4, #7
   1e946:	e7d0      	b.n	1e8ea <gpio_nrfx_config+0x46>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e948:	461c      	mov	r4, r3
   1e94a:	e7ce      	b.n	1e8ea <gpio_nrfx_config+0x46>
		drive = NRF_GPIO_PIN_D0S1;
   1e94c:	2404      	movs	r4, #4
   1e94e:	e7cc      	b.n	1e8ea <gpio_nrfx_config+0x46>
		drive = NRF_GPIO_PIN_D0H1;
   1e950:	2405      	movs	r4, #5
   1e952:	e7ca      	b.n	1e8ea <gpio_nrfx_config+0x46>
		drive = NRF_GPIO_PIN_H0H1;
   1e954:	2403      	movs	r4, #3
   1e956:	e7c8      	b.n	1e8ea <gpio_nrfx_config+0x46>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1e958:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1e95a:	bf42      	ittt	mi
   1e95c:	2201      	movmi	r2, #1
   1e95e:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1e960:	f8c5 250c 	strmi.w	r2, [r5, #1292]	; 0x50c
}
   1e964:	e7d6      	b.n	1e914 <gpio_nrfx_config+0x70>
   1e966:	bf00      	nop
   1e968:	00f00006 	.word	0x00f00006
   1e96c:	00100006 	.word	0x00100006
   1e970:	00400002 	.word	0x00400002

0001e974 <gpiote_event_handler>:
{
   1e974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e978:	4e5c      	ldr	r6, [pc, #368]	; (1eaec <gpiote_event_handler+0x178>)
   1e97a:	6837      	ldr	r7, [r6, #0]
	if (port_event) {
   1e97c:	2f00      	cmp	r7, #0
   1e97e:	d068      	beq.n	1ea52 <gpiote_event_handler+0xde>
	struct gpio_nrfx_data *data = get_port_data(port);
   1e980:	4a5b      	ldr	r2, [pc, #364]	; (1eaf0 <gpiote_event_handler+0x17c>)
   1e982:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   1e984:	6812      	ldr	r2, [r2, #0]
   1e986:	f8d2 a008 	ldr.w	sl, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   1e98a:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
   1e98e:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   1e990:	e9d3 2106 	ldrd	r2, r1, [r3, #24]
   1e994:	430a      	orrs	r2, r1
   1e996:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1e99a:	f8da 2004 	ldr.w	r2, [sl, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   1e99e:	695b      	ldr	r3, [r3, #20]
    return p_reg->IN;
   1e9a0:	f8d2 4510 	ldr.w	r4, [r2, #1296]	; 0x510
   1e9a4:	405c      	eors	r4, r3
	u32_t out = pin_states & level_pins;
   1e9a6:	ea25 0404 	bic.w	r4, r5, r4
	u32_t bit = 1U << pin;
   1e9aa:	f04f 0801 	mov.w	r8, #1
	u32_t pin = 0U;
   1e9ae:	f04f 0900 	mov.w	r9, #0
	while (level_pins) {
   1e9b2:	2d00      	cmp	r5, #0
   1e9b4:	d13a      	bne.n	1ea2c <gpiote_event_handler+0xb8>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e9b6:	6035      	str	r5, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1e9b8:	6833      	ldr	r3, [r6, #0]
   1e9ba:	9300      	str	r3, [sp, #0]
    (void)dummy;
   1e9bc:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
   1e9be:	484d      	ldr	r0, [pc, #308]	; (1eaf4 <gpiote_event_handler+0x180>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1e9c0:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1e9c2:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e9c4:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   1e9c6:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   1e9ca:	fa05 f103 	lsl.w	r1, r5, r3
   1e9ce:	4211      	tst	r1, r2
   1e9d0:	d013      	beq.n	1e9fa <gpiote_event_handler+0x86>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e9d2:	009a      	lsls	r2, r3, #2
   1e9d4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e9d8:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   1e9dc:	6811      	ldr	r1, [r2, #0]
   1e9de:	b161      	cbz	r1, 1e9fa <gpiote_event_handler+0x86>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1e9e0:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1e9e4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e9e8:	6016      	str	r6, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1e9ea:	6812      	ldr	r2, [r2, #0]
   1e9ec:	9201      	str	r2, [sp, #4]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1e9ee:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1e9f2:	fa05 f101 	lsl.w	r1, r5, r1
    (void)dummy;
   1e9f6:	9a01      	ldr	r2, [sp, #4]
   1e9f8:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1e9fa:	3301      	adds	r3, #1
   1e9fc:	2b08      	cmp	r3, #8
   1e9fe:	d1e2      	bne.n	1e9c6 <gpiote_event_handler+0x52>
	if (fired_triggers[0]) {
   1ea00:	bb4c      	cbnz	r4, 1ea56 <gpiote_event_handler+0xe2>
	if (port_event) {
   1ea02:	b187      	cbz	r7, 1ea26 <gpiote_event_handler+0xb2>
	const struct gpio_nrfx_data *data = get_port_data(port);
   1ea04:	4b3a      	ldr	r3, [pc, #232]	; (1eaf0 <gpiote_event_handler+0x17c>)
   1ea06:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
   1ea08:	681b      	ldr	r3, [r3, #0]
   1ea0a:	f8d3 8008 	ldr.w	r8, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   1ea0e:	e9d5 3403 	ldrd	r3, r4, [r5, #12]
   1ea12:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   1ea14:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
   1ea18:	4313      	orrs	r3, r2
   1ea1a:	ea24 0403 	bic.w	r4, r4, r3
	u32_t bit = 1U << pin;
   1ea1e:	2601      	movs	r6, #1
	u32_t pin = 0U;
   1ea20:	2700      	movs	r7, #0
	while (level_pins) {
   1ea22:	2c00      	cmp	r4, #0
   1ea24:	d14c      	bne.n	1eac0 <gpiote_event_handler+0x14c>
}
   1ea26:	b003      	add	sp, #12
   1ea28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
   1ea2c:	ea15 0f08 	tst.w	r5, r8
   1ea30:	d00a      	beq.n	1ea48 <gpiote_event_handler+0xd4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ea32:	f89a 3008 	ldrb.w	r3, [sl, #8]
   1ea36:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1ea3a:	2100      	movs	r1, #0
   1ea3c:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1ea40:	f009 fabf 	bl	27fc2 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1ea44:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   1ea48:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   1ea4c:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1ea50:	e7af      	b.n	1e9b2 <gpiote_event_handler+0x3e>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1ea52:	463c      	mov	r4, r7
   1ea54:	e7b3      	b.n	1e9be <gpiote_event_handler+0x4a>
	struct gpio_nrfx_data *data = get_port_data(port);
   1ea56:	4b26      	ldr	r3, [pc, #152]	; (1eaf0 <gpiote_event_handler+0x17c>)
   1ea58:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1ea5c:	f8d9 5004 	ldr.w	r5, [r9, #4]
   1ea60:	2d00      	cmp	r5, #0
   1ea62:	d0ce      	beq.n	1ea02 <gpiote_event_handler+0x8e>
	return node->next;
   1ea64:	682e      	ldr	r6, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   1ea66:	f8df a098 	ldr.w	sl, [pc, #152]	; 1eb00 <gpiote_event_handler+0x18c>
   1ea6a:	f8df b098 	ldr.w	fp, [pc, #152]	; 1eb04 <gpiote_event_handler+0x190>
   1ea6e:	2e00      	cmp	r6, #0
   1ea70:	bf38      	it	cc
   1ea72:	2600      	movcc	r6, #0
			cb->handler(port, cb, pins);
   1ea74:	4698      	mov	r8, r3
		if ((cb->pin_mask & pins) & data->int_en) {
   1ea76:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1ea7a:	68aa      	ldr	r2, [r5, #8]
   1ea7c:	4023      	ands	r3, r4
   1ea7e:	4213      	tst	r3, r2
   1ea80:	d015      	beq.n	1eaae <gpiote_event_handler+0x13a>
			__ASSERT(cb->handler, "No callback handler!");
   1ea82:	686b      	ldr	r3, [r5, #4]
   1ea84:	b973      	cbnz	r3, 1eaa4 <gpiote_event_handler+0x130>
   1ea86:	4659      	mov	r1, fp
   1ea88:	481b      	ldr	r0, [pc, #108]	; (1eaf8 <gpiote_event_handler+0x184>)
   1ea8a:	f240 13a7 	movw	r3, #423	; 0x1a7
   1ea8e:	4652      	mov	r2, sl
   1ea90:	f004 fc1b 	bl	232ca <printk>
   1ea94:	4819      	ldr	r0, [pc, #100]	; (1eafc <gpiote_event_handler+0x188>)
   1ea96:	f004 fc18 	bl	232ca <printk>
   1ea9a:	f240 11a7 	movw	r1, #423	; 0x1a7
   1ea9e:	4650      	mov	r0, sl
   1eaa0:	f004 fc56 	bl	23350 <assert_post_action>
			cb->handler(port, cb, pins);
   1eaa4:	686b      	ldr	r3, [r5, #4]
   1eaa6:	4622      	mov	r2, r4
   1eaa8:	4629      	mov	r1, r5
   1eaaa:	4640      	mov	r0, r8
   1eaac:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1eaae:	2e00      	cmp	r6, #0
   1eab0:	d0a7      	beq.n	1ea02 <gpiote_event_handler+0x8e>
   1eab2:	6833      	ldr	r3, [r6, #0]
   1eab4:	2b00      	cmp	r3, #0
   1eab6:	bf38      	it	cc
   1eab8:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1eaba:	4635      	mov	r5, r6
   1eabc:	461e      	mov	r6, r3
   1eabe:	e7da      	b.n	1ea76 <gpiote_event_handler+0x102>
		if (level_pins & bit) {
   1eac0:	4226      	tst	r6, r4
   1eac2:	d010      	beq.n	1eae6 <gpiote_event_handler+0x172>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1eac4:	6969      	ldr	r1, [r5, #20]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1eac6:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1eaca:	40f9      	lsrs	r1, r7
   1eacc:	f001 0101 	and.w	r1, r1, #1
   1ead0:	f1c1 0103 	rsb	r1, r1, #3
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ead4:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1ead8:	b2c9      	uxtb	r1, r1
   1eada:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1eade:	f009 fa70 	bl	27fc2 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1eae2:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1eae6:	3701      	adds	r7, #1
		bit <<= 1;
   1eae8:	0076      	lsls	r6, r6, #1
   1eaea:	e79a      	b.n	1ea22 <gpiote_event_handler+0xae>
   1eaec:	4000617c 	.word	0x4000617c
   1eaf0:	200073e8 	.word	0x200073e8
   1eaf4:	40006000 	.word	0x40006000
   1eaf8:	000297e6 	.word	0x000297e6
   1eafc:	0002f849 	.word	0x0002f849
   1eb00:	0002f8a1 	.word	0x0002f8a1
   1eb04:	0002f8cd 	.word	0x0002f8cd

0001eb08 <flash_nrf_pages_layout>:
	*layout = &dev_layout;
   1eb08:	4b02      	ldr	r3, [pc, #8]	; (1eb14 <flash_nrf_pages_layout+0xc>)
   1eb0a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1eb0c:	2301      	movs	r3, #1
   1eb0e:	6013      	str	r3, [r2, #0]
}
   1eb10:	4770      	bx	lr
   1eb12:	bf00      	nop
   1eb14:	20001a00 	.word	0x20001a00

0001eb18 <_ticker_stop>:
{
   1eb18:	b513      	push	{r0, r1, r4, lr}
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1eb1a:	2300      	movs	r3, #0
   1eb1c:	9300      	str	r3, [sp, #0]
   1eb1e:	f7f9 fb13 	bl	18148 <ticker_stop>
	if (ret != TICKER_STATUS_SUCCESS &&
   1eb22:	f030 0302 	bics.w	r3, r0, #2
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1eb26:	4604      	mov	r4, r0
	if (ret != TICKER_STATUS_SUCCESS &&
   1eb28:	d00e      	beq.n	1eb48 <_ticker_stop+0x30>
		__ASSERT(0, "Failed to stop ticker.\n");
   1eb2a:	4909      	ldr	r1, [pc, #36]	; (1eb50 <_ticker_stop+0x38>)
   1eb2c:	4a09      	ldr	r2, [pc, #36]	; (1eb54 <_ticker_stop+0x3c>)
   1eb2e:	480a      	ldr	r0, [pc, #40]	; (1eb58 <_ticker_stop+0x40>)
   1eb30:	f240 131d 	movw	r3, #285	; 0x11d
   1eb34:	f004 fbc9 	bl	232ca <printk>
   1eb38:	4808      	ldr	r0, [pc, #32]	; (1eb5c <_ticker_stop+0x44>)
   1eb3a:	f004 fbc6 	bl	232ca <printk>
   1eb3e:	4805      	ldr	r0, [pc, #20]	; (1eb54 <_ticker_stop+0x3c>)
   1eb40:	f240 111d 	movw	r1, #285	; 0x11d
   1eb44:	f004 fc04 	bl	23350 <assert_post_action>
}
   1eb48:	4620      	mov	r0, r4
   1eb4a:	b002      	add	sp, #8
   1eb4c:	bd10      	pop	{r4, pc}
   1eb4e:	bf00      	nop
   1eb50:	0002d2c6 	.word	0x0002d2c6
   1eb54:	0002f8e0 	.word	0x0002f8e0
   1eb58:	000297e6 	.word	0x000297e6
   1eb5c:	0002f911 	.word	0x0002f911

0001eb60 <time_slot_callback_helper>:
{
   1eb60:	b570      	push	{r4, r5, r6, lr}
   1eb62:	b08c      	sub	sp, #48	; 0x30
   1eb64:	461d      	mov	r5, r3
   1eb66:	4606      	mov	r6, r0
	ll_radio_state_abort();
   1eb68:	f7fa ff1a 	bl	199a0 <ll_radio_state_abort>
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1eb6c:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   1eb70:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1eb74:	f008 fcde 	bl	27534 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   1eb78:	4b12      	ldr	r3, [pc, #72]	; (1ebc4 <time_slot_callback_helper+0x64>)
   1eb7a:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1eb7e:	9506      	str	r5, [sp, #24]
   1eb80:	2400      	movs	r4, #0
   1eb82:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1eb86:	2310      	movs	r3, #16
   1eb88:	9300      	str	r3, [sp, #0]
   1eb8a:	e9cd 4407 	strd	r4, r4, [sp, #28]
   1eb8e:	4633      	mov	r3, r6
   1eb90:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1eb94:	9401      	str	r4, [sp, #4]
   1eb96:	4622      	mov	r2, r4
   1eb98:	4621      	mov	r1, r4
   1eb9a:	f7f9 fa45 	bl	18028 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   1eb9e:	f030 0302 	bics.w	r3, r0, #2
   1eba2:	d00c      	beq.n	1ebbe <time_slot_callback_helper+0x5e>
		((struct flash_op_desc *)context)->result = -ECANCELED;
   1eba4:	f06f 0347 	mvn.w	r3, #71	; 0x47
		_ticker_stop(instance_index, 0, ticker_id);
   1eba8:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1ebac:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
		((struct flash_op_desc *)context)->result = -ECANCELED;
   1ebb0:	60ab      	str	r3, [r5, #8]
		_ticker_stop(instance_index, 0, ticker_id);
   1ebb2:	4621      	mov	r1, r4
   1ebb4:	f7ff ffb0 	bl	1eb18 <_ticker_stop>
	z_impl_k_sem_give(sem);
   1ebb8:	4803      	ldr	r0, [pc, #12]	; (1ebc8 <time_slot_callback_helper+0x68>)
   1ebba:	f002 ff6d 	bl	21a98 <z_impl_k_sem_give>
}
   1ebbe:	b00c      	add	sp, #48	; 0x30
   1ebc0:	bd70      	pop	{r4, r5, r6, pc}
   1ebc2:	bf00      	nop
   1ebc4:	0001ebcd 	.word	0x0001ebcd
   1ebc8:	20001a20 	.word	0x20001a20

0001ebcc <time_slot_callback_work>:
{
   1ebcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ebce:	461c      	mov	r4, r3
	__ASSERT(ll_radio_state_is_idle(),
   1ebd0:	f008 fcb5 	bl	2753e <ll_radio_state_is_idle>
   1ebd4:	b970      	cbnz	r0, 1ebf4 <time_slot_callback_work+0x28>
   1ebd6:	4913      	ldr	r1, [pc, #76]	; (1ec24 <time_slot_callback_work+0x58>)
   1ebd8:	4a13      	ldr	r2, [pc, #76]	; (1ec28 <time_slot_callback_work+0x5c>)
   1ebda:	4814      	ldr	r0, [pc, #80]	; (1ec2c <time_slot_callback_work+0x60>)
   1ebdc:	f44f 7395 	mov.w	r3, #298	; 0x12a
   1ebe0:	f004 fb73 	bl	232ca <printk>
   1ebe4:	4812      	ldr	r0, [pc, #72]	; (1ec30 <time_slot_callback_work+0x64>)
   1ebe6:	f004 fb70 	bl	232ca <printk>
   1ebea:	480f      	ldr	r0, [pc, #60]	; (1ec28 <time_slot_callback_work+0x5c>)
   1ebec:	f44f 7195 	mov.w	r1, #298	; 0x12a
   1ebf0:	f004 fbae 	bl	23350 <assert_post_action>
	if (op_desc->handler(op_desc->context) == FLASH_OP_DONE) {
   1ebf4:	e9d4 3000 	ldrd	r3, r0, [r4]
   1ebf8:	4798      	blx	r3
   1ebfa:	4605      	mov	r5, r0
   1ebfc:	b980      	cbnz	r0, 1ec20 <time_slot_callback_work+0x54>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1ebfe:	f10d 0107 	add.w	r1, sp, #7
   1ec02:	f10d 0006 	add.w	r0, sp, #6
   1ec06:	f008 fc95 	bl	27534 <ll_timeslice_ticker_id_get>
		_ticker_stop(instance_index, 0, ticker_id);
   1ec0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1ec0e:	f89d 0006 	ldrb.w	r0, [sp, #6]
   1ec12:	4629      	mov	r1, r5
   1ec14:	f7ff ff80 	bl	1eb18 <_ticker_stop>
		((struct flash_op_desc *)context)->result = 0;
   1ec18:	60a5      	str	r5, [r4, #8]
   1ec1a:	4806      	ldr	r0, [pc, #24]	; (1ec34 <time_slot_callback_work+0x68>)
   1ec1c:	f002 ff3c 	bl	21a98 <z_impl_k_sem_give>
}
   1ec20:	b003      	add	sp, #12
   1ec22:	bd30      	pop	{r4, r5, pc}
   1ec24:	0002f92b 	.word	0x0002f92b
   1ec28:	0002f8e0 	.word	0x0002f8e0
   1ec2c:	000297e6 	.word	0x000297e6
   1ec30:	0002f944 	.word	0x0002f944
   1ec34:	20001a20 	.word	0x20001a20

0001ec38 <nrf_flash_init>:
{
   1ec38:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ec3a:	2201      	movs	r2, #1
   1ec3c:	4611      	mov	r1, r2
   1ec3e:	4808      	ldr	r0, [pc, #32]	; (1ec60 <nrf_flash_init+0x28>)
   1ec40:	f009 fb91 	bl	28366 <z_impl_k_sem_init>
   1ec44:	2201      	movs	r2, #1
   1ec46:	2100      	movs	r1, #0
   1ec48:	4806      	ldr	r0, [pc, #24]	; (1ec64 <nrf_flash_init+0x2c>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1ec4a:	4c07      	ldr	r4, [pc, #28]	; (1ec68 <nrf_flash_init+0x30>)
   1ec4c:	f009 fb8b 	bl	28366 <z_impl_k_sem_init>
   1ec50:	f009 fae7 	bl	28222 <nrfx_nvmc_flash_page_count_get>
   1ec54:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1ec56:	f009 fae0 	bl	2821a <nrfx_nvmc_flash_page_size_get>
   1ec5a:	6060      	str	r0, [r4, #4]
}
   1ec5c:	2000      	movs	r0, #0
   1ec5e:	bd10      	pop	{r4, pc}
   1ec60:	20001a08 	.word	0x20001a08
   1ec64:	20001a20 	.word	0x20001a20
   1ec68:	20001a00 	.word	0x20001a00

0001ec6c <flash_nrf_erase>:
{
   1ec6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec6e:	b08b      	sub	sp, #44	; 0x2c
   1ec70:	460e      	mov	r6, r1
   1ec72:	4615      	mov	r5, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1ec74:	f009 fad1 	bl	2821a <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1ec78:	4629      	mov	r1, r5
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1ec7a:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1ec7c:	4630      	mov	r0, r6
   1ec7e:	f009 fa21 	bl	280c4 <is_regular_addr_valid>
   1ec82:	2800      	cmp	r0, #0
   1ec84:	d03a      	beq.n	1ecfc <flash_nrf_erase+0x90>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1ec86:	fbb6 f3f7 	udiv	r3, r6, r7
   1ec8a:	fb07 6313 	mls	r3, r7, r3, r6
   1ec8e:	bbab      	cbnz	r3, 1ecfc <flash_nrf_erase+0x90>
   1ec90:	fbb5 f4f7 	udiv	r4, r5, r7
   1ec94:	fb07 5414 	mls	r4, r7, r4, r5
   1ec98:	bb84      	cbnz	r4, 1ecfc <flash_nrf_erase+0x90>
		if (!n_pages) {
   1ec9a:	42af      	cmp	r7, r5
   1ec9c:	d822      	bhi.n	1ece4 <flash_nrf_erase+0x78>
	return z_impl_k_sem_take(sem, timeout);
   1ec9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1eca2:	4818      	ldr	r0, [pc, #96]	; (1ed04 <flash_nrf_erase+0x98>)
   1eca4:	f002 ff3c 	bl	21b20 <z_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
   1eca8:	4620      	mov	r0, r4
   1ecaa:	f7f9 f99f 	bl	17fec <ticker_is_initialized>
   1ecae:	ab04      	add	r3, sp, #16
   1ecb0:	4601      	mov	r1, r0
   1ecb2:	b1d0      	cbz	r0, 1ecea <flash_nrf_erase+0x7e>
	struct flash_context context = {
   1ecb4:	2210      	movs	r2, #16
   1ecb6:	4621      	mov	r1, r4
   1ecb8:	4618      	mov	r0, r3
   1ecba:	f006 fa14 	bl	250e6 <memset>
   1ecbe:	2201      	movs	r2, #1
   1ecc0:	f88d 201c 	strb.w	r2, [sp, #28]
   1ecc4:	4a10      	ldr	r2, [pc, #64]	; (1ed08 <flash_nrf_erase+0x9c>)
	struct flash_op_desc flash_op_desc = {
   1ecc6:	9403      	str	r4, [sp, #12]
	struct flash_context context = {
   1ecc8:	e9cd 2208 	strd	r2, r2, [sp, #32]
	struct flash_op_desc flash_op_desc = {
   1eccc:	4a0f      	ldr	r2, [pc, #60]	; (1ed0c <flash_nrf_erase+0xa0>)
   1ecce:	e9cd 2001 	strd	r2, r0, [sp, #4]
	return work_in_time_slice(&flash_op_desc);
   1ecd2:	a801      	add	r0, sp, #4
	struct flash_context context = {
   1ecd4:	e9cd 6505 	strd	r6, r5, [sp, #20]
	return work_in_time_slice(&flash_op_desc);
   1ecd8:	f7e2 fd2a 	bl	1730 <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return	erase_op(&context);
   1ecdc:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1ecde:	4809      	ldr	r0, [pc, #36]	; (1ed04 <flash_nrf_erase+0x98>)
   1ece0:	f002 feda 	bl	21a98 <z_impl_k_sem_give>
}
   1ece4:	4620      	mov	r0, r4
   1ece6:	b00b      	add	sp, #44	; 0x2c
   1ece8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   1ecea:	2218      	movs	r2, #24
   1ecec:	4618      	mov	r0, r3
   1ecee:	f006 f9fa 	bl	250e6 <memset>
   1ecf2:	e9cd 6505 	strd	r6, r5, [sp, #20]
	return	erase_op(&context);
   1ecf6:	f7e2 fcd3 	bl	16a0 <erase_op>
   1ecfa:	e7ef      	b.n	1ecdc <flash_nrf_erase+0x70>
		return -EINVAL;
   1ecfc:	f06f 0415 	mvn.w	r4, #21
   1ed00:	e7f0      	b.n	1ece4 <flash_nrf_erase+0x78>
   1ed02:	bf00      	nop
   1ed04:	20001a08 	.word	0x20001a08
   1ed08:	00015e64 	.word	0x00015e64
   1ed0c:	000016a1 	.word	0x000016a1

0001ed10 <flash_nrf_write>:
{
   1ed10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed12:	460d      	mov	r5, r1
   1ed14:	b08b      	sub	sp, #44	; 0x2c
	if (is_regular_addr_valid(addr, len)) {
   1ed16:	4619      	mov	r1, r3
   1ed18:	4628      	mov	r0, r5
{
   1ed1a:	4617      	mov	r7, r2
   1ed1c:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1ed1e:	f009 f9d1 	bl	280c4 <is_regular_addr_valid>
   1ed22:	b388      	cbz	r0, 1ed88 <flash_nrf_write+0x78>
	if (!is_aligned_32(addr) || (len % sizeof(u32_t))) {
   1ed24:	ea45 0604 	orr.w	r6, r5, r4
   1ed28:	f016 0603 	ands.w	r6, r6, #3
   1ed2c:	d12c      	bne.n	1ed88 <flash_nrf_write+0x78>
	if (!len) {
   1ed2e:	b1fc      	cbz	r4, 1ed70 <flash_nrf_write+0x60>
	return z_impl_k_sem_take(sem, timeout);
   1ed30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ed34:	4816      	ldr	r0, [pc, #88]	; (1ed90 <flash_nrf_write+0x80>)
   1ed36:	f002 fef3 	bl	21b20 <z_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
   1ed3a:	4630      	mov	r0, r6
   1ed3c:	f7f9 f956 	bl	17fec <ticker_is_initialized>
   1ed40:	4603      	mov	r3, r0
   1ed42:	a804      	add	r0, sp, #16
   1ed44:	b1bb      	cbz	r3, 1ed76 <flash_nrf_write+0x66>
	struct flash_context context = {
   1ed46:	2301      	movs	r3, #1
   1ed48:	f88d 301c 	strb.w	r3, [sp, #28]
   1ed4c:	f641 534c 	movw	r3, #7500	; 0x1d4c
   1ed50:	e9cd 3308 	strd	r3, r3, [sp, #32]
	struct flash_op_desc flash_op_desc = {
   1ed54:	4b0f      	ldr	r3, [pc, #60]	; (1ed94 <flash_nrf_write+0x84>)
	struct flash_context context = {
   1ed56:	9406      	str	r4, [sp, #24]
	struct flash_op_desc flash_op_desc = {
   1ed58:	e9cd 3001 	strd	r3, r0, [sp, #4]
	return  work_in_time_slice(&flash_op_desc);
   1ed5c:	a801      	add	r0, sp, #4
	struct flash_context context = {
   1ed5e:	e9cd 7504 	strd	r7, r5, [sp, #16]
	struct flash_op_desc flash_op_desc = {
   1ed62:	9603      	str	r6, [sp, #12]
	return  work_in_time_slice(&flash_op_desc);
   1ed64:	f7e2 fce4 	bl	1730 <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return write_op(&context);
   1ed68:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1ed6a:	4809      	ldr	r0, [pc, #36]	; (1ed90 <flash_nrf_write+0x80>)
   1ed6c:	f002 fe94 	bl	21a98 <z_impl_k_sem_give>
}
   1ed70:	4620      	mov	r0, r4
   1ed72:	b00b      	add	sp, #44	; 0x2c
   1ed74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   1ed76:	e9cd 3307 	strd	r3, r3, [sp, #28]
   1ed7a:	e9cd 7504 	strd	r7, r5, [sp, #16]
   1ed7e:	9309      	str	r3, [sp, #36]	; 0x24
   1ed80:	9406      	str	r4, [sp, #24]
	return write_op(&context);
   1ed82:	f7e2 fd4d 	bl	1820 <write_op>
   1ed86:	e7ef      	b.n	1ed68 <flash_nrf_write+0x58>
		return -EINVAL;
   1ed88:	f06f 0415 	mvn.w	r4, #21
   1ed8c:	e7f0      	b.n	1ed70 <flash_nrf_write+0x60>
   1ed8e:	bf00      	nop
   1ed90:	20001a08 	.word	0x20001a08
   1ed94:	00001821 	.word	0x00001821

0001ed98 <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1ed98:	4b02      	ldr	r3, [pc, #8]	; (1eda4 <uart_nrfx_err_check+0xc>)
   1ed9a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1ed9e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   1eda2:	4770      	bx	lr
   1eda4:	40002000 	.word	0x40002000

0001eda8 <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
   1eda8:	b530      	push	{r4, r5, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1edaa:	794b      	ldrb	r3, [r1, #5]
   1edac:	2b01      	cmp	r3, #1
   1edae:	d122      	bne.n	1edf6 <uart_nrfx_configure+0x4e>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1edb0:	798b      	ldrb	r3, [r1, #6]
   1edb2:	2b03      	cmp	r3, #3
   1edb4:	d11f      	bne.n	1edf6 <uart_nrfx_configure+0x4e>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1edb6:	79ca      	ldrb	r2, [r1, #7]
   1edb8:	b12a      	cbz	r2, 1edc6 <uart_nrfx_configure+0x1e>
   1edba:	2a01      	cmp	r2, #1
   1edbc:	d11b      	bne.n	1edf6 <uart_nrfx_configure+0x4e>
	return dev->config->config_info;
   1edbe:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uart_cfg.hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1edc0:	689b      	ldr	r3, [r3, #8]
   1edc2:	781b      	ldrb	r3, [r3, #0]
   1edc4:	b1bb      	cbz	r3, 1edf6 <uart_nrfx_configure+0x4e>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1edc6:	790c      	ldrb	r4, [r1, #4]
   1edc8:	b114      	cbz	r4, 1edd0 <uart_nrfx_configure+0x28>
   1edca:	2c02      	cmp	r4, #2
   1edcc:	d113      	bne.n	1edf6 <uart_nrfx_configure+0x4e>
   1edce:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1edd0:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1edd2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1edd6:	d05f      	beq.n	1ee98 <uart_nrfx_configure+0xf0>
   1edd8:	d82b      	bhi.n	1ee32 <uart_nrfx_configure+0x8a>
   1edda:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1edde:	d05d      	beq.n	1ee9c <uart_nrfx_configure+0xf4>
   1ede0:	d814      	bhi.n	1ee0c <uart_nrfx_configure+0x64>
   1ede2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1ede6:	d05b      	beq.n	1eea0 <uart_nrfx_configure+0xf8>
   1ede8:	d808      	bhi.n	1edfc <uart_nrfx_configure+0x54>
   1edea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1edee:	d05a      	beq.n	1eea6 <uart_nrfx_configure+0xfe>
   1edf0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1edf4:	d05a      	beq.n	1eeac <uart_nrfx_configure+0x104>
   1edf6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1edfa:	e04c      	b.n	1ee96 <uart_nrfx_configure+0xee>
   1edfc:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1ee00:	d057      	beq.n	1eeb2 <uart_nrfx_configure+0x10a>
   1ee02:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1ee06:	d1f6      	bne.n	1edf6 <uart_nrfx_configure+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1ee08:	4b34      	ldr	r3, [pc, #208]	; (1eedc <uart_nrfx_configure+0x134>)
   1ee0a:	e039      	b.n	1ee80 <uart_nrfx_configure+0xd8>
	switch (baudrate) {
   1ee0c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1ee10:	d052      	beq.n	1eeb8 <uart_nrfx_configure+0x110>
   1ee12:	d807      	bhi.n	1ee24 <uart_nrfx_configure+0x7c>
   1ee14:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1ee18:	d050      	beq.n	1eebc <uart_nrfx_configure+0x114>
   1ee1a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1ee1e:	d1ea      	bne.n	1edf6 <uart_nrfx_configure+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1ee20:	4b2f      	ldr	r3, [pc, #188]	; (1eee0 <uart_nrfx_configure+0x138>)
   1ee22:	e02d      	b.n	1ee80 <uart_nrfx_configure+0xd8>
	switch (baudrate) {
   1ee24:	f647 2512 	movw	r5, #31250	; 0x7a12
   1ee28:	42ab      	cmp	r3, r5
   1ee2a:	d1e4      	bne.n	1edf6 <uart_nrfx_configure+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1ee2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1ee30:	e026      	b.n	1ee80 <uart_nrfx_configure+0xd8>
	switch (baudrate) {
   1ee32:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1ee36:	d044      	beq.n	1eec2 <uart_nrfx_configure+0x11a>
   1ee38:	d811      	bhi.n	1ee5e <uart_nrfx_configure+0xb6>
   1ee3a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1ee3e:	d042      	beq.n	1eec6 <uart_nrfx_configure+0x11e>
   1ee40:	d808      	bhi.n	1ee54 <uart_nrfx_configure+0xac>
   1ee42:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1ee46:	42ab      	cmp	r3, r5
   1ee48:	d03f      	beq.n	1eeca <uart_nrfx_configure+0x122>
   1ee4a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1ee4e:	d1d2      	bne.n	1edf6 <uart_nrfx_configure+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1ee50:	4b24      	ldr	r3, [pc, #144]	; (1eee4 <uart_nrfx_configure+0x13c>)
   1ee52:	e015      	b.n	1ee80 <uart_nrfx_configure+0xd8>
	switch (baudrate) {
   1ee54:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1ee58:	d1cd      	bne.n	1edf6 <uart_nrfx_configure+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1ee5a:	4b23      	ldr	r3, [pc, #140]	; (1eee8 <uart_nrfx_configure+0x140>)
   1ee5c:	e010      	b.n	1ee80 <uart_nrfx_configure+0xd8>
	switch (baudrate) {
   1ee5e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1ee62:	d035      	beq.n	1eed0 <uart_nrfx_configure+0x128>
   1ee64:	d807      	bhi.n	1ee76 <uart_nrfx_configure+0xce>
   1ee66:	4d21      	ldr	r5, [pc, #132]	; (1eeec <uart_nrfx_configure+0x144>)
   1ee68:	42ab      	cmp	r3, r5
   1ee6a:	d033      	beq.n	1eed4 <uart_nrfx_configure+0x12c>
   1ee6c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1ee70:	d1c1      	bne.n	1edf6 <uart_nrfx_configure+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1ee72:	4b1f      	ldr	r3, [pc, #124]	; (1eef0 <uart_nrfx_configure+0x148>)
   1ee74:	e004      	b.n	1ee80 <uart_nrfx_configure+0xd8>
	switch (baudrate) {
   1ee76:	4d1f      	ldr	r5, [pc, #124]	; (1eef4 <uart_nrfx_configure+0x14c>)
   1ee78:	42ab      	cmp	r3, r5
   1ee7a:	d1bc      	bne.n	1edf6 <uart_nrfx_configure+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1ee7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1ee80:	4d1d      	ldr	r5, [pc, #116]	; (1eef8 <uart_nrfx_configure+0x150>)
                    | (uint32_t)p_cfg->hwfc;
   1ee82:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   1ee84:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1ee88:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1ee8c:	6883      	ldr	r3, [r0, #8]
   1ee8e:	c903      	ldmia	r1, {r0, r1}
   1ee90:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1ee94:	2000      	movs	r0, #0
}
   1ee96:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1ee98:	4b18      	ldr	r3, [pc, #96]	; (1eefc <uart_nrfx_configure+0x154>)
   1ee9a:	e7f1      	b.n	1ee80 <uart_nrfx_configure+0xd8>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1ee9c:	4b18      	ldr	r3, [pc, #96]	; (1ef00 <uart_nrfx_configure+0x158>)
   1ee9e:	e7ef      	b.n	1ee80 <uart_nrfx_configure+0xd8>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1eea0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1eea4:	e7ec      	b.n	1ee80 <uart_nrfx_configure+0xd8>
		nrf_baudrate = 0x00014000;
   1eea6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1eeaa:	e7e9      	b.n	1ee80 <uart_nrfx_configure+0xd8>
	switch (baudrate) {
   1eeac:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1eeb0:	e7e6      	b.n	1ee80 <uart_nrfx_configure+0xd8>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1eeb2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1eeb6:	e7e3      	b.n	1ee80 <uart_nrfx_configure+0xd8>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1eeb8:	4b12      	ldr	r3, [pc, #72]	; (1ef04 <uart_nrfx_configure+0x15c>)
   1eeba:	e7e1      	b.n	1ee80 <uart_nrfx_configure+0xd8>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1eebc:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1eec0:	e7de      	b.n	1ee80 <uart_nrfx_configure+0xd8>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1eec2:	4b11      	ldr	r3, [pc, #68]	; (1ef08 <uart_nrfx_configure+0x160>)
   1eec4:	e7dc      	b.n	1ee80 <uart_nrfx_configure+0xd8>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1eec6:	4b11      	ldr	r3, [pc, #68]	; (1ef0c <uart_nrfx_configure+0x164>)
   1eec8:	e7da      	b.n	1ee80 <uart_nrfx_configure+0xd8>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1eeca:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1eece:	e7d7      	b.n	1ee80 <uart_nrfx_configure+0xd8>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1eed0:	4b0f      	ldr	r3, [pc, #60]	; (1ef10 <uart_nrfx_configure+0x168>)
   1eed2:	e7d5      	b.n	1ee80 <uart_nrfx_configure+0xd8>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1eed4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1eed8:	e7d2      	b.n	1ee80 <uart_nrfx_configure+0xd8>
   1eeda:	bf00      	nop
   1eedc:	0013b000 	.word	0x0013b000
   1eee0:	004ea000 	.word	0x004ea000
   1eee4:	00ebf000 	.word	0x00ebf000
   1eee8:	01d7e000 	.word	0x01d7e000
   1eeec:	0003d090 	.word	0x0003d090
   1eef0:	075f7000 	.word	0x075f7000
   1eef4:	000f4240 	.word	0x000f4240
   1eef8:	40002000 	.word	0x40002000
   1eefc:	009d5000 	.word	0x009d5000
   1ef00:	00275000 	.word	0x00275000
   1ef04:	0075f000 	.word	0x0075f000
   1ef08:	03afb000 	.word	0x03afb000
   1ef0c:	013a9000 	.word	0x013a9000
   1ef10:	0ebed000 	.word	0x0ebed000

0001ef14 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ef14:	4b08      	ldr	r3, [pc, #32]	; (1ef38 <uart_nrfx_poll_in+0x24>)
   1ef16:	681a      	ldr	r2, [r3, #0]
{
   1ef18:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1ef1a:	b152      	cbz	r2, 1ef32 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef1c:	2000      	movs	r0, #0
   1ef1e:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1ef20:	681b      	ldr	r3, [r3, #0]
   1ef22:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1ef24:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   1ef26:	4b05      	ldr	r3, [pc, #20]	; (1ef3c <uart_nrfx_poll_in+0x28>)
   1ef28:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1ef2c:	700b      	strb	r3, [r1, #0]
}
   1ef2e:	b002      	add	sp, #8
   1ef30:	4770      	bx	lr
		return -1;
   1ef32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ef36:	e7fa      	b.n	1ef2e <uart_nrfx_poll_in+0x1a>
   1ef38:	40002108 	.word	0x40002108
   1ef3c:	40002000 	.word	0x40002000

0001ef40 <uart_nrfx_poll_out>:
{
   1ef40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ef42:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   1ef44:	f009 fa1f 	bl	28386 <k_is_in_isr>
   1ef48:	4d1a      	ldr	r5, [pc, #104]	; (1efb4 <uart_nrfx_poll_out+0x74>)
   1ef4a:	b9b8      	cbnz	r0, 1ef7c <uart_nrfx_poll_out+0x3c>
   1ef4c:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ef4e:	2701      	movs	r7, #1
   1ef50:	f3bf 8f5b 	dmb	ish
   1ef54:	e855 3f00 	ldrex	r3, [r5]
   1ef58:	2b00      	cmp	r3, #0
   1ef5a:	d103      	bne.n	1ef64 <uart_nrfx_poll_out+0x24>
   1ef5c:	e845 7200 	strex	r2, r7, [r5]
   1ef60:	2a00      	cmp	r2, #0
   1ef62:	d1f7      	bne.n	1ef54 <uart_nrfx_poll_out+0x14>
   1ef64:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   1ef68:	d00a      	beq.n	1ef80 <uart_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   1ef6a:	2001      	movs	r0, #1
   1ef6c:	3c01      	subs	r4, #1
   1ef6e:	f002 fd51 	bl	21a14 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   1ef72:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1ef76:	d1eb      	bne.n	1ef50 <uart_nrfx_poll_out+0x10>
}
   1ef78:	b003      	add	sp, #12
   1ef7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*lock = 1;
   1ef7c:	2301      	movs	r3, #1
   1ef7e:	602b      	str	r3, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef80:	4c0d      	ldr	r4, [pc, #52]	; (1efb8 <uart_nrfx_poll_out+0x78>)
   1ef82:	2200      	movs	r2, #0
   1ef84:	6022      	str	r2, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1ef86:	6822      	ldr	r2, [r4, #0]
   1ef88:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1ef8a:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef8c:	4a0b      	ldr	r2, [pc, #44]	; (1efbc <uart_nrfx_poll_out+0x7c>)
   1ef8e:	2101      	movs	r1, #1
   1ef90:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
   1ef92:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
   1ef96:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ef9a:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   1ef9c:	b923      	cbnz	r3, 1efa8 <uart_nrfx_poll_out+0x68>
   1ef9e:	2001      	movs	r0, #1
   1efa0:	f009 f931 	bl	28206 <nrfx_busy_wait>
   1efa4:	3e01      	subs	r6, #1
   1efa6:	d1f8      	bne.n	1ef9a <uart_nrfx_poll_out+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1efa8:	4b05      	ldr	r3, [pc, #20]	; (1efc0 <uart_nrfx_poll_out+0x80>)
   1efaa:	2201      	movs	r2, #1
   1efac:	601a      	str	r2, [r3, #0]
	*lock = 0;
   1efae:	2300      	movs	r3, #0
   1efb0:	602b      	str	r3, [r5, #0]
   1efb2:	e7e1      	b.n	1ef78 <uart_nrfx_poll_out+0x38>
   1efb4:	20001a38 	.word	0x20001a38
   1efb8:	4000211c 	.word	0x4000211c
   1efbc:	40002008 	.word	0x40002008
   1efc0:	4000200c 	.word	0x4000200c

0001efc4 <uart_nrfx_init>:
    p_reg->OUTSET = set_mask;
   1efc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   1efc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
   1efca:	4c16      	ldr	r4, [pc, #88]	; (1f024 <uart_nrfx_init+0x60>)
   1efcc:	2240      	movs	r2, #64	; 0x40
   1efce:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1efd2:	2103      	movs	r1, #3
   1efd4:	2200      	movs	r2, #0
   1efd6:	2508      	movs	r5, #8
   1efd8:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   1efdc:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   1efe0:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   1efe4:	2506      	movs	r5, #6
   1efe6:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   1efea:	2520      	movs	r5, #32
   1efec:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1eff0:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
   1eff4:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
   1eff8:	2305      	movs	r3, #5
   1effa:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
   1effe:	2307      	movs	r3, #7

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1f000:	6881      	ldr	r1, [r0, #8]
   1f002:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1f006:	f7ff fecf 	bl	1eda8 <uart_nrfx_configure>
	if (err) {
   1f00a:	b948      	cbnz	r0, 1f020 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1f00c:	2304      	movs	r3, #4
   1f00e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f012:	4b05      	ldr	r3, [pc, #20]	; (1f028 <uart_nrfx_init+0x64>)
   1f014:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1f016:	681b      	ldr	r3, [r3, #0]
   1f018:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1f01a:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f01c:	2301      	movs	r3, #1
   1f01e:	6023      	str	r3, [r4, #0]
#if	HW_FLOW_CONTROL
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
   1f020:	b003      	add	sp, #12
   1f022:	bd30      	pop	{r4, r5, pc}
   1f024:	40002000 	.word	0x40002000
   1f028:	40002108 	.word	0x40002108

0001f02c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
   1f02c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f02e:	4603      	mov	r3, r0
	u32_t last  = rngp->last;
   1f030:	7884      	ldrb	r4, [r0, #2]
	u32_t mask  = rngp->mask;
   1f032:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1f034:	f04f 0520 	mov.w	r5, #32
   1f038:	f3ef 8011 	mrs	r0, BASEPRI
   1f03c:	f385 8811 	msr	BASEPRI, r5
   1f040:	f3bf 8f6f 	isb	sy
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1f044:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1f046:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1f04a:	1ba4      	subs	r4, r4, r6
   1f04c:	403c      	ands	r4, r7
	if (available < len) {
   1f04e:	42a2      	cmp	r2, r4
		len = available;
   1f050:	bf88      	it	hi
   1f052:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1f054:	eb06 0c02 	add.w	ip, r6, r2
   1f058:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1f05c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1f05e:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1f062:	f380 8811 	msr	BASEPRI, r0
   1f066:	f3bf 8f6f 	isb	sy
   1f06a:	440a      	add	r2, r1
	u8_t *dst   = buf;
   1f06c:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1f06e:	4282      	cmp	r2, r0
   1f070:	d119      	bne.n	1f0a6 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1f072:	4576      	cmp	r6, lr
   1f074:	d10d      	bne.n	1f092 <rng_pool_get+0x66>
	__asm__ volatile(
   1f076:	f04f 0520 	mov.w	r5, #32
   1f07a:	f3ef 8211 	mrs	r2, BASEPRI
   1f07e:	f385 8811 	msr	BASEPRI, r5
   1f082:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1f086:	781d      	ldrb	r5, [r3, #0]
   1f088:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1f08a:	f382 8811 	msr	BASEPRI, r2
   1f08e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1f092:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1f094:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1f096:	b288      	uxth	r0, r1
	available = available - len;
   1f098:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1f09a:	428b      	cmp	r3, r1
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)rng_task);
}

NRF_STATIC_INLINE void nrf_rng_task_trigger(NRF_RNG_Type * p_reg, nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f09c:	bf22      	ittt	cs
   1f09e:	4b06      	ldrcs	r3, [pc, #24]	; (1f0b8 <rng_pool_get+0x8c>)
   1f0a0:	2201      	movcs	r2, #1
   1f0a2:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1f0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1f0a6:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1f0aa:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1f0ac:	f89c c005 	ldrb.w	ip, [ip, #5]
   1f0b0:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1f0b4:	403d      	ands	r5, r7
   1f0b6:	e7da      	b.n	1f06e <rng_pool_get+0x42>
   1f0b8:	4000d000 	.word	0x4000d000

0001f0bc <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
   1f0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   1f0c0:	4b18      	ldr	r3, [pc, #96]	; (1f124 <entropy_nrf5_get_entropy+0x68>)
{
   1f0c2:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   1f0c4:	6882      	ldr	r2, [r0, #8]
   1f0c6:	429a      	cmp	r2, r3
{
   1f0c8:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   1f0ca:	d009      	beq.n	1f0e0 <entropy_nrf5_get_entropy+0x24>
   1f0cc:	4916      	ldr	r1, [pc, #88]	; (1f128 <entropy_nrf5_get_entropy+0x6c>)
   1f0ce:	4817      	ldr	r0, [pc, #92]	; (1f12c <entropy_nrf5_get_entropy+0x70>)
   1f0d0:	4a17      	ldr	r2, [pc, #92]	; (1f130 <entropy_nrf5_get_entropy+0x74>)
   1f0d2:	23e4      	movs	r3, #228	; 0xe4
   1f0d4:	f004 f8f9 	bl	232ca <printk>
   1f0d8:	4815      	ldr	r0, [pc, #84]	; (1f130 <entropy_nrf5_get_entropy+0x74>)
   1f0da:	21e4      	movs	r1, #228	; 0xe4
   1f0dc:	f004 f938 	bl	23350 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1f0e0:	4e10      	ldr	r6, [pc, #64]	; (1f124 <entropy_nrf5_get_entropy+0x68>)

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1f0e2:	f106 0745 	add.w	r7, r6, #69	; 0x45
   1f0e6:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   1f0ea:	b914      	cbnz	r4, 1f0f2 <entropy_nrf5_get_entropy+0x36>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   1f0ec:	4620      	mov	r0, r4
   1f0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f0f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f0f6:	4630      	mov	r0, r6
   1f0f8:	f002 fd12 	bl	21b20 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1f0fc:	4622      	mov	r2, r4
   1f0fe:	4649      	mov	r1, r9
   1f100:	4638      	mov	r0, r7
   1f102:	f7ff ff93 	bl	1f02c <rng_pool_get>
   1f106:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1f108:	4630      	mov	r0, r6
   1f10a:	f002 fcc5 	bl	21a98 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1f10e:	b92d      	cbnz	r5, 1f11c <entropy_nrf5_get_entropy+0x60>
	return z_impl_k_sem_take(sem, timeout);
   1f110:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f114:	4640      	mov	r0, r8
   1f116:	f002 fd03 	bl	21b20 <z_impl_k_sem_take>
			continue;
   1f11a:	e7e6      	b.n	1f0ea <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   1f11c:	1b64      	subs	r4, r4, r5
   1f11e:	b2a4      	uxth	r4, r4
		buf += bytes;
   1f120:	44a9      	add	r9, r5
   1f122:	e7e2      	b.n	1f0ea <entropy_nrf5_get_entropy+0x2e>
   1f124:	20001a3c 	.word	0x20001a3c
   1f128:	0002f99e 	.word	0x0002f99e
   1f12c:	000297e6 	.word	0x000297e6
   1f130:	0002f96c 	.word	0x0002f96c

0001f134 <random_byte_get>:
{
   1f134:	b082      	sub	sp, #8
	__asm__ volatile(
   1f136:	f04f 0320 	mov.w	r3, #32
   1f13a:	f3ef 8211 	mrs	r2, BASEPRI
   1f13e:	f383 8811 	msr	BASEPRI, r3
   1f142:	f3bf 8f6f 	isb	sy
#endif
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1f146:	4b0a      	ldr	r3, [pc, #40]	; (1f170 <random_byte_get+0x3c>)
   1f148:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1f14a:	b171      	cbz	r1, 1f16a <random_byte_get+0x36>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1f14c:	4909      	ldr	r1, [pc, #36]	; (1f174 <random_byte_get+0x40>)
   1f14e:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f152:	2100      	movs	r1, #0
   1f154:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1f156:	681b      	ldr	r3, [r3, #0]
   1f158:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1f15a:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1f15c:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1f15e:	f382 8811 	msr	BASEPRI, r2
   1f162:	f3bf 8f6f 	isb	sy
}
   1f166:	b002      	add	sp, #8
   1f168:	4770      	bx	lr
	int retval = -EAGAIN;
   1f16a:	f06f 000a 	mvn.w	r0, #10
   1f16e:	e7f6      	b.n	1f15e <random_byte_get+0x2a>
   1f170:	4000d100 	.word	0x4000d100
   1f174:	4000d000 	.word	0x4000d000

0001f178 <entropy_nrf5_get_entropy_isr>:

static int entropy_nrf5_get_entropy_isr(struct device *dev, u8_t *buf, u16_t len,
					u32_t flags)
{
   1f178:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1f17c:	4614      	mov	r4, r2
   1f17e:	461d      	mov	r5, r3
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1f180:	6882      	ldr	r2, [r0, #8]
   1f182:	4b2b      	ldr	r3, [pc, #172]	; (1f230 <entropy_nrf5_get_entropy_isr+0xb8>)
   1f184:	429a      	cmp	r2, r3
{
   1f186:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1f188:	d00b      	beq.n	1f1a2 <entropy_nrf5_get_entropy_isr+0x2a>
   1f18a:	492a      	ldr	r1, [pc, #168]	; (1f234 <entropy_nrf5_get_entropy_isr+0xbc>)
   1f18c:	482a      	ldr	r0, [pc, #168]	; (1f238 <entropy_nrf5_get_entropy_isr+0xc0>)
   1f18e:	4a2b      	ldr	r2, [pc, #172]	; (1f23c <entropy_nrf5_get_entropy_isr+0xc4>)
   1f190:	f240 1301 	movw	r3, #257	; 0x101
   1f194:	f004 f899 	bl	232ca <printk>
   1f198:	4828      	ldr	r0, [pc, #160]	; (1f23c <entropy_nrf5_get_entropy_isr+0xc4>)
   1f19a:	f240 1101 	movw	r1, #257	; 0x101
   1f19e:	f004 f8d7 	bl	23350 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1f1a2:	43eb      	mvns	r3, r5
   1f1a4:	f013 0501 	ands.w	r5, r3, #1
   1f1a8:	d007      	beq.n	1f1ba <entropy_nrf5_get_entropy_isr+0x42>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1f1aa:	4825      	ldr	r0, [pc, #148]	; (1f240 <entropy_nrf5_get_entropy_isr+0xc8>)
   1f1ac:	4622      	mov	r2, r4
   1f1ae:	4631      	mov	r1, r6
   1f1b0:	f7ff ff3c 	bl	1f02c <rng_pool_get>
			irq_enable(RNG_IRQn);
		}
	}

	return cnt;
}
   1f1b4:	b002      	add	sp, #8
   1f1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1f1ba:	2c00      	cmp	r4, #0
   1f1bc:	d032      	beq.n	1f224 <entropy_nrf5_get_entropy_isr+0xac>
	__asm__ volatile(
   1f1be:	f04f 0320 	mov.w	r3, #32
   1f1c2:	f3ef 8711 	mrs	r7, BASEPRI
   1f1c6:	f383 8811 	msr	BASEPRI, r3
   1f1ca:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(RNG_IRQn);
   1f1ce:	200d      	movs	r0, #13
   1f1d0:	f7e5 faa4 	bl	471c <arch_irq_is_enabled>
   1f1d4:	4680      	mov	r8, r0
		irq_disable(RNG_IRQn);
   1f1d6:	200d      	movs	r0, #13
   1f1d8:	f7e5 fa8c 	bl	46f4 <arch_irq_disable>
	__asm__ volatile(
   1f1dc:	f387 8811 	msr	BASEPRI, r7
   1f1e0:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f1e4:	4f17      	ldr	r7, [pc, #92]	; (1f244 <entropy_nrf5_get_entropy_isr+0xcc>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f1e6:	f8df 9064 	ldr.w	r9, [pc, #100]	; 1f24c <entropy_nrf5_get_entropy_isr+0xd4>
   1f1ea:	603d      	str	r5, [r7, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1f1ec:	683a      	ldr	r2, [r7, #0]
   1f1ee:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1f1f0:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f1f2:	4a15      	ldr	r2, [pc, #84]	; (1f248 <entropy_nrf5_get_entropy_isr+0xd0>)
   1f1f4:	2101      	movs	r1, #1
   1f1f6:	6011      	str	r1, [r2, #0]
}
   1f1f8:	4625      	mov	r5, r4
   1f1fa:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1f1fe:	683b      	ldr	r3, [r7, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   1f200:	b193      	cbz	r3, 1f228 <entropy_nrf5_get_entropy_isr+0xb0>
			byte = random_byte_get();
   1f202:	f7ff ff97 	bl	1f134 <random_byte_get>
			if (byte < 0) {
   1f206:	2800      	cmp	r0, #0
   1f208:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1f20c:	dbf7      	blt.n	1f1fe <entropy_nrf5_get_entropy_isr+0x86>
   1f20e:	3d01      	subs	r5, #1
   1f210:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1f212:	5570      	strb	r0, [r6, r5]
		} while (len);
   1f214:	2d00      	cmp	r5, #0
   1f216:	d1f2      	bne.n	1f1fe <entropy_nrf5_get_entropy_isr+0x86>
		if (irq_enabled) {
   1f218:	f1b8 0f00 	cmp.w	r8, #0
   1f21c:	d002      	beq.n	1f224 <entropy_nrf5_get_entropy_isr+0xac>
			irq_enable(RNG_IRQn);
   1f21e:	200d      	movs	r0, #13
   1f220:	f7e5 fa58 	bl	46d4 <arch_irq_enable>
	return cnt;
   1f224:	4620      	mov	r0, r4
   1f226:	e7c5      	b.n	1f1b4 <entropy_nrf5_get_entropy_isr+0x3c>
				__WFE();
   1f228:	bf20      	wfe
				__SEV();
   1f22a:	bf40      	sev
				__WFE();
   1f22c:	bf20      	wfe
   1f22e:	e7e6      	b.n	1f1fe <entropy_nrf5_get_entropy_isr+0x86>
   1f230:	20001a3c 	.word	0x20001a3c
   1f234:	0002f9ec 	.word	0x0002f9ec
   1f238:	000297e6 	.word	0x000297e6
   1f23c:	0002f96c 	.word	0x0002f96c
   1f240:	20001a6c 	.word	0x20001a6c
   1f244:	4000d100 	.word	0x4000d100
   1f248:	4000d000 	.word	0x4000d000
   1f24c:	e000e100 	.word	0xe000e100

0001f250 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   1f250:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   1f252:	6883      	ldr	r3, [r0, #8]
   1f254:	4c21      	ldr	r4, [pc, #132]	; (1f2dc <entropy_nrf5_init+0x8c>)
   1f256:	42a3      	cmp	r3, r4
   1f258:	d00b      	beq.n	1f272 <entropy_nrf5_init+0x22>
   1f25a:	4921      	ldr	r1, [pc, #132]	; (1f2e0 <entropy_nrf5_init+0x90>)
   1f25c:	4821      	ldr	r0, [pc, #132]	; (1f2e4 <entropy_nrf5_init+0x94>)
   1f25e:	4a22      	ldr	r2, [pc, #136]	; (1f2e8 <entropy_nrf5_init+0x98>)
   1f260:	f240 133f 	movw	r3, #319	; 0x13f
   1f264:	f004 f831 	bl	232ca <printk>
   1f268:	481f      	ldr	r0, [pc, #124]	; (1f2e8 <entropy_nrf5_init+0x98>)
   1f26a:	f240 113f 	movw	r1, #319	; 0x13f
   1f26e:	f004 f86f 	bl	23350 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f272:	2201      	movs	r2, #1
   1f274:	4611      	mov	r1, r2
   1f276:	4819      	ldr	r0, [pc, #100]	; (1f2dc <entropy_nrf5_init+0x8c>)
   1f278:	f009 f875 	bl	28366 <z_impl_k_sem_init>
   1f27c:	2201      	movs	r2, #1
   1f27e:	2100      	movs	r1, #0
   1f280:	481a      	ldr	r0, [pc, #104]	; (1f2ec <entropy_nrf5_init+0x9c>)
   1f282:	f009 f870 	bl	28366 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1f286:	f240 4307 	movw	r3, #1031	; 0x407
   1f28a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1f28e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1f292:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1f294:	230c      	movs	r3, #12
   1f296:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1f29a:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1f29c:	4b14      	ldr	r3, [pc, #80]	; (1f2f0 <entropy_nrf5_init+0xa0>)
   1f29e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1f2a2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1f2a6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1f2aa:	f042 0201 	orr.w	r2, r2, #1
   1f2ae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f2b2:	4a10      	ldr	r2, [pc, #64]	; (1f2f4 <entropy_nrf5_init+0xa4>)
   1f2b4:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1f2b6:	6812      	ldr	r2, [r2, #0]
   1f2b8:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1f2ba:	9a01      	ldr	r2, [sp, #4]
    p_reg->INTENSET = mask;
   1f2bc:	2201      	movs	r2, #1
   1f2be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
   1f2c2:	2105      	movs	r1, #5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f2c4:	601a      	str	r2, [r3, #0]
   1f2c6:	200d      	movs	r0, #13
   1f2c8:	462a      	mov	r2, r5
   1f2ca:	f7e5 fa35 	bl	4738 <z_arm_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
   1f2ce:	200d      	movs	r0, #13
   1f2d0:	f7e5 fa00 	bl	46d4 <arch_irq_enable>

	return 0;
}
   1f2d4:	4628      	mov	r0, r5
   1f2d6:	b003      	add	sp, #12
   1f2d8:	bd30      	pop	{r4, r5, pc}
   1f2da:	bf00      	nop
   1f2dc:	20001a3c 	.word	0x20001a3c
   1f2e0:	0002f99e 	.word	0x0002f99e
   1f2e4:	000297e6 	.word	0x000297e6
   1f2e8:	0002f96c 	.word	0x0002f96c
   1f2ec:	20001a54 	.word	0x20001a54
   1f2f0:	4000d000 	.word	0x4000d000
   1f2f4:	4000d100 	.word	0x4000d100

0001f2f8 <isr>:
{
   1f2f8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1f2fa:	f7ff ff1b 	bl	1f134 <random_byte_get>
	if (byte < 0) {
   1f2fe:	2800      	cmp	r0, #0
   1f300:	db20      	blt.n	1f344 <isr+0x4c>
	u8_t last  = rngp->last;
   1f302:	4b17      	ldr	r3, [pc, #92]	; (1f360 <isr+0x68>)
   1f304:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1f308:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
   1f30c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1f310:	1a51      	subs	r1, r2, r1
   1f312:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1f316:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1f318:	d10d      	bne.n	1f336 <isr+0x3e>
	u8_t last  = rngp->last;
   1f31a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1f31e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
   1f322:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1f326:	1a51      	subs	r1, r2, r1
   1f328:	ea34 0101 	bics.w	r1, r4, r1
   1f32c:	d10b      	bne.n	1f346 <isr+0x4e>
   1f32e:	4b0d      	ldr	r3, [pc, #52]	; (1f364 <isr+0x6c>)
   1f330:	2201      	movs	r2, #1
   1f332:	601a      	str	r2, [r3, #0]
}
   1f334:	e00e      	b.n	1f354 <isr+0x5c>
	rngp->buffer[last] = byte;
   1f336:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1f338:	3201      	adds	r2, #1
   1f33a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1f33c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1f340:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1f344:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1f346:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1f348:	3201      	adds	r2, #1
   1f34a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1f34c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1f350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1f354:	4804      	ldr	r0, [pc, #16]	; (1f368 <isr+0x70>)
}
   1f356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f35a:	f002 bb9d 	b.w	21a98 <z_impl_k_sem_give>
   1f35e:	bf00      	nop
   1f360:	20001a3c 	.word	0x20001a3c
   1f364:	4000d004 	.word	0x4000d004
   1f368:	20001a54 	.word	0x20001a54

0001f36c <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1f36c:	4b0b      	ldr	r3, [pc, #44]	; (1f39c <nrf52_errata_108+0x30>)
   1f36e:	681b      	ldr	r3, [r3, #0]
   1f370:	1c5a      	adds	r2, r3, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f372:	bf05      	ittet	eq
   1f374:	4b0a      	ldreq	r3, [pc, #40]	; (1f3a0 <nrf52_errata_108+0x34>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1f376:	4a0b      	ldreq	r2, [pc, #44]	; (1f3a4 <nrf52_errata_108+0x38>)
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1f378:	4a0b      	ldrne	r2, [pc, #44]	; (1f3a8 <nrf52_errata_108+0x3c>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1f37a:	6810      	ldreq	r0, [r2, #0]
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f37c:	bf0a      	itet	eq
   1f37e:	781b      	ldrbeq	r3, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   1f380:	6810      	ldrne	r0, [r2, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1f382:	f3c0 1003 	ubfxeq	r0, r0, #4, #4
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f386:	2b06      	cmp	r3, #6
   1f388:	d105      	bne.n	1f396 <nrf52_errata_108+0x2a>
            {
                switch(var2)
   1f38a:	3803      	subs	r0, #3
   1f38c:	2803      	cmp	r0, #3
   1f38e:	bf8c      	ite	hi
   1f390:	2000      	movhi	r0, #0
   1f392:	2001      	movls	r0, #1
   1f394:	4770      	bx	lr
                    case 0x06ul:
                        return true;
                }
            }
        #endif
        return false;
   1f396:	2000      	movs	r0, #0
    #endif
}
   1f398:	4770      	bx	lr
   1f39a:	bf00      	nop
   1f39c:	10000130 	.word	0x10000130
   1f3a0:	f0000fe0 	.word	0xf0000fe0
   1f3a4:	f0000fe8 	.word	0xf0000fe8
   1f3a8:	10000134 	.word	0x10000134

0001f3ac <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f3ac:	4b07      	ldr	r3, [pc, #28]	; (1f3cc <nrf52_errata_16+0x20>)
   1f3ae:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f3b0:	2b06      	cmp	r3, #6
   1f3b2:	d109      	bne.n	1f3c8 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1f3b4:	4b06      	ldr	r3, [pc, #24]	; (1f3d0 <nrf52_errata_16+0x24>)
   1f3b6:	681b      	ldr	r3, [r3, #0]
   1f3b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1f3bc:	3b03      	subs	r3, #3
   1f3be:	2b03      	cmp	r3, #3
   1f3c0:	d802      	bhi.n	1f3c8 <nrf52_errata_16+0x1c>
   1f3c2:	4a04      	ldr	r2, [pc, #16]	; (1f3d4 <nrf52_errata_16+0x28>)
   1f3c4:	5cd0      	ldrb	r0, [r2, r3]
   1f3c6:	4770      	bx	lr
                    case 0x06ul:
                        return false;
                }
            }
        #endif
        return false;
   1f3c8:	2000      	movs	r0, #0
    #endif
}
   1f3ca:	4770      	bx	lr
   1f3cc:	f0000fe0 	.word	0xf0000fe0
   1f3d0:	f0000fe8 	.word	0xf0000fe8
   1f3d4:	0002fa3f 	.word	0x0002fa3f

0001f3d8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1f3d8:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_12()){
   1f3da:	f7ff ffc7 	bl	1f36c <nrf52_errata_108>
   1f3de:	b128      	cbz	r0, 1f3ec <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1f3e0:	4b7e      	ldr	r3, [pc, #504]	; (1f5dc <SystemInit+0x204>)
   1f3e2:	4a7f      	ldr	r2, [pc, #508]	; (1f5e0 <SystemInit+0x208>)
   1f3e4:	681b      	ldr	r3, [r3, #0]
   1f3e6:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1f3ea:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_16()){
   1f3ec:	f7ff ffde 	bl	1f3ac <nrf52_errata_16>
   1f3f0:	b110      	cbz	r0, 1f3f8 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1f3f2:	4b7c      	ldr	r3, [pc, #496]	; (1f5e4 <SystemInit+0x20c>)
   1f3f4:	4a7c      	ldr	r2, [pc, #496]	; (1f5e8 <SystemInit+0x210>)
   1f3f6:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_31()){
   1f3f8:	f7ff ffb8 	bl	1f36c <nrf52_errata_108>
   1f3fc:	b128      	cbz	r0, 1f40a <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1f3fe:	4b7b      	ldr	r3, [pc, #492]	; (1f5ec <SystemInit+0x214>)
   1f400:	4a7b      	ldr	r2, [pc, #492]	; (1f5f0 <SystemInit+0x218>)
   1f402:	681b      	ldr	r3, [r3, #0]
   1f404:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1f408:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_32()){
   1f40a:	f7ff ffcf 	bl	1f3ac <nrf52_errata_16>
   1f40e:	b120      	cbz	r0, 1f41a <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1f410:	4a78      	ldr	r2, [pc, #480]	; (1f5f4 <SystemInit+0x21c>)
   1f412:	68d3      	ldr	r3, [r2, #12]
   1f414:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1f418:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
   1f41a:	f7ff ffa7 	bl	1f36c <nrf52_errata_108>
   1f41e:	b140      	cbz	r0, 1f432 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
   1f420:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f424:	2200      	movs	r2, #0
   1f426:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
   1f42a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   1f42e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_37()){
   1f432:	f7ff ffbb 	bl	1f3ac <nrf52_errata_16>
   1f436:	b110      	cbz	r0, 1f43e <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
   1f438:	4b6f      	ldr	r3, [pc, #444]	; (1f5f8 <SystemInit+0x220>)
   1f43a:	2203      	movs	r2, #3
   1f43c:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_57()){
   1f43e:	f7ff ffb5 	bl	1f3ac <nrf52_errata_16>
   1f442:	b140      	cbz	r0, 1f456 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
   1f444:	4b6d      	ldr	r3, [pc, #436]	; (1f5fc <SystemInit+0x224>)
   1f446:	2205      	movs	r2, #5
   1f448:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
   1f44a:	2201      	movs	r2, #1
   1f44c:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
   1f44e:	2200      	movs	r2, #0
   1f450:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1f452:	223f      	movs	r2, #63	; 0x3f
   1f454:	605a      	str	r2, [r3, #4]
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1f456:	4b6a      	ldr	r3, [pc, #424]	; (1f600 <SystemInit+0x228>)
   1f458:	681a      	ldr	r2, [r3, #0]
   1f45a:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f45c:	bf0b      	itete	eq
   1f45e:	4b69      	ldreq	r3, [pc, #420]	; (1f604 <SystemInit+0x22c>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1f460:	4b69      	ldrne	r3, [pc, #420]	; (1f608 <SystemInit+0x230>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f462:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   1f464:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1f466:	bf02      	ittt	eq
   1f468:	3308      	addeq	r3, #8
   1f46a:	681b      	ldreq	r3, [r3, #0]
   1f46c:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f470:	2a06      	cmp	r2, #6
   1f472:	d14d      	bne.n	1f510 <SystemInit+0x138>
            {
                switch(var2)
   1f474:	3b03      	subs	r3, #3
   1f476:	2b03      	cmp	r3, #3
   1f478:	d84a      	bhi.n	1f510 <SystemInit+0x138>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
   1f47a:	4a64      	ldr	r2, [pc, #400]	; (1f60c <SystemInit+0x234>)
   1f47c:	5cd3      	ldrb	r3, [r2, r3]
   1f47e:	2b00      	cmp	r3, #0
   1f480:	d046      	beq.n	1f510 <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1f482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f486:	4b62      	ldr	r3, [pc, #392]	; (1f610 <SystemInit+0x238>)
   1f488:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1f48c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1f490:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1f494:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1f498:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1f49c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1f4a0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1f4a4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1f4a8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1f4ac:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1f4b0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1f4b4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1f4b8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1f4bc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1f4c0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1f4c4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1f4c8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1f4cc:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1f4d0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1f4d4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1f4d8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1f4dc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1f4e0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1f4e4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1f4e8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1f4ec:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1f4f0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1f4f4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1f4f8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1f4fc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1f500:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1f504:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1f508:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1f50c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_108()){
   1f510:	f7ff ff2c 	bl	1f36c <nrf52_errata_108>
   1f514:	b128      	cbz	r0, 1f522 <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1f516:	4b3f      	ldr	r3, [pc, #252]	; (1f614 <SystemInit+0x23c>)
   1f518:	4a3f      	ldr	r2, [pc, #252]	; (1f618 <SystemInit+0x240>)
   1f51a:	681b      	ldr	r3, [r3, #0]
   1f51c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1f520:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
   1f522:	f7ff ff23 	bl	1f36c <nrf52_errata_108>
   1f526:	b148      	cbz	r0, 1f53c <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1f528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f52c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1f530:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1f532:	bf44      	itt	mi
   1f534:	f06f 0201 	mvnmi.w	r2, #1
   1f538:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f53c:	4b30      	ldr	r3, [pc, #192]	; (1f600 <SystemInit+0x228>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f53e:	681b      	ldr	r3, [r3, #0]
   1f540:	2b06      	cmp	r3, #6
   1f542:	d10c      	bne.n	1f55e <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f544:	4b30      	ldr	r3, [pc, #192]	; (1f608 <SystemInit+0x230>)
   1f546:	681b      	ldr	r3, [r3, #0]
   1f548:	3b03      	subs	r3, #3
   1f54a:	2b03      	cmp	r3, #3
   1f54c:	d807      	bhi.n	1f55e <SystemInit+0x186>
        }
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_182()){
   1f54e:	4a33      	ldr	r2, [pc, #204]	; (1f61c <SystemInit+0x244>)
   1f550:	5cd3      	ldrb	r3, [r2, r3]
   1f552:	b123      	cbz	r3, 1f55e <SystemInit+0x186>
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1f554:	4a32      	ldr	r2, [pc, #200]	; (1f620 <SystemInit+0x248>)
   1f556:	6813      	ldr	r3, [r2, #0]
   1f558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1f55c:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f55e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f562:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1f566:	2a00      	cmp	r2, #0
   1f568:	db03      	blt.n	1f572 <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1f56a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f56e:	2b00      	cmp	r3, #0
   1f570:	da2f      	bge.n	1f5d2 <SystemInit+0x1fa>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   1f572:	4b2c      	ldr	r3, [pc, #176]	; (1f624 <SystemInit+0x24c>)
   1f574:	2201      	movs	r2, #1
   1f576:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1f57a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1f57e:	2a00      	cmp	r2, #0
   1f580:	d0fb      	beq.n	1f57a <SystemInit+0x1a2>
            NRF_UICR->PSELRESET[0] = 21;
   1f582:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   1f586:	2115      	movs	r1, #21
   1f588:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1f58c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1f590:	2a00      	cmp	r2, #0
   1f592:	d0fb      	beq.n	1f58c <SystemInit+0x1b4>
            NRF_UICR->PSELRESET[1] = 21;
   1f594:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f598:	2215      	movs	r2, #21
   1f59a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1f59e:	4b21      	ldr	r3, [pc, #132]	; (1f624 <SystemInit+0x24c>)
   1f5a0:	461a      	mov	r2, r3
   1f5a2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
   1f5a6:	2900      	cmp	r1, #0
   1f5a8:	d0fb      	beq.n	1f5a2 <SystemInit+0x1ca>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   1f5aa:	2100      	movs	r1, #0
   1f5ac:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1f5b0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1f5b4:	2b00      	cmp	r3, #0
   1f5b6:	d0fb      	beq.n	1f5b0 <SystemInit+0x1d8>
   1f5b8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1f5bc:	491a      	ldr	r1, [pc, #104]	; (1f628 <SystemInit+0x250>)
   1f5be:	4b1b      	ldr	r3, [pc, #108]	; (1f62c <SystemInit+0x254>)
   1f5c0:	68ca      	ldr	r2, [r1, #12]
   1f5c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1f5c6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1f5c8:	60cb      	str	r3, [r1, #12]
   1f5ca:	f3bf 8f4f 	dsb	sy
    __NOP();
   1f5ce:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1f5d0:	e7fd      	b.n	1f5ce <SystemInit+0x1f6>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1f5d2:	4b17      	ldr	r3, [pc, #92]	; (1f630 <SystemInit+0x258>)
   1f5d4:	4a17      	ldr	r2, [pc, #92]	; (1f634 <SystemInit+0x25c>)
   1f5d6:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1f5d8:	bd08      	pop	{r3, pc}
   1f5da:	bf00      	nop
   1f5dc:	10000324 	.word	0x10000324
   1f5e0:	40013540 	.word	0x40013540
   1f5e4:	4007c074 	.word	0x4007c074
   1f5e8:	baadf00d 	.word	0xbaadf00d
   1f5ec:	10000244 	.word	0x10000244
   1f5f0:	4000053c 	.word	0x4000053c
   1f5f4:	e000edf0 	.word	0xe000edf0
   1f5f8:	400005a0 	.word	0x400005a0
   1f5fc:	40005610 	.word	0x40005610
   1f600:	10000130 	.word	0x10000130
   1f604:	f0000fe0 	.word	0xf0000fe0
   1f608:	10000134 	.word	0x10000134
   1f60c:	0002fa37 	.word	0x0002fa37
   1f610:	4000c000 	.word	0x4000c000
   1f614:	10000258 	.word	0x10000258
   1f618:	40000ee4 	.word	0x40000ee4
   1f61c:	0002fa3b 	.word	0x0002fa3b
   1f620:	4000173c 	.word	0x4000173c
   1f624:	4001e000 	.word	0x4001e000
   1f628:	e000ed00 	.word	0xe000ed00
   1f62c:	05fa0004 	.word	0x05fa0004
   1f630:	20007294 	.word	0x20007294
   1f634:	03d09000 	.word	0x03d09000

0001f638 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1f638:	b510      	push	{r4, lr}
   1f63a:	4604      	mov	r4, r0
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   1f63c:	f008 fde5 	bl	2820a <flash_total_size_get>
   1f640:	42a0      	cmp	r0, r4
   1f642:	d809      	bhi.n	1f658 <nrfx_nvmc_page_erase+0x20>
   1f644:	4911      	ldr	r1, [pc, #68]	; (1f68c <nrfx_nvmc_page_erase+0x54>)
   1f646:	4812      	ldr	r0, [pc, #72]	; (1f690 <nrfx_nvmc_page_erase+0x58>)
   1f648:	4a12      	ldr	r2, [pc, #72]	; (1f694 <nrfx_nvmc_page_erase+0x5c>)
   1f64a:	23dd      	movs	r3, #221	; 0xdd
   1f64c:	f003 fe3d 	bl	232ca <printk>
   1f650:	4810      	ldr	r0, [pc, #64]	; (1f694 <nrfx_nvmc_page_erase+0x5c>)
   1f652:	21dd      	movs	r1, #221	; 0xdd
   1f654:	f003 fe7c 	bl	23350 <assert_post_action>
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1f658:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f65c:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1f65e:	fbb4 f3f2 	udiv	r3, r4, r2
   1f662:	fb02 4313 	mls	r3, r2, r3, r4

    if (!is_page_aligned_check(addr))
   1f666:	b973      	cbnz	r3, 1f686 <nrfx_nvmc_page_erase+0x4e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1f668:	4b0b      	ldr	r3, [pc, #44]	; (1f698 <nrfx_nvmc_page_erase+0x60>)
   1f66a:	2202      	movs	r2, #2
   1f66c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1f670:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1f674:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f678:	07d2      	lsls	r2, r2, #31
   1f67a:	d5fb      	bpl.n	1f674 <nrfx_nvmc_page_erase+0x3c>
    p_reg->CONFIG = (uint32_t)mode;
   1f67c:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1f67e:	4807      	ldr	r0, [pc, #28]	; (1f69c <nrfx_nvmc_page_erase+0x64>)
   1f680:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1f684:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1f686:	4806      	ldr	r0, [pc, #24]	; (1f6a0 <nrfx_nvmc_page_erase+0x68>)
   1f688:	e7fc      	b.n	1f684 <nrfx_nvmc_page_erase+0x4c>
   1f68a:	bf00      	nop
   1f68c:	0002fa9f 	.word	0x0002fa9f
   1f690:	000297e6 	.word	0x000297e6
   1f694:	0002fa43 	.word	0x0002fa43
   1f698:	4001e000 	.word	0x4001e000
   1f69c:	0bad0000 	.word	0x0bad0000
   1f6a0:	0bad000a 	.word	0x0bad000a

0001f6a4 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1f6a4:	b538      	push	{r3, r4, r5, lr}
   1f6a6:	4604      	mov	r4, r0
   1f6a8:	460d      	mov	r5, r1
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   1f6aa:	f008 fdae 	bl	2820a <flash_total_size_get>
   1f6ae:	42a0      	cmp	r0, r4
   1f6b0:	d80b      	bhi.n	1f6ca <nrfx_nvmc_word_write+0x26>
   1f6b2:	4914      	ldr	r1, [pc, #80]	; (1f704 <nrfx_nvmc_word_write+0x60>)
   1f6b4:	4814      	ldr	r0, [pc, #80]	; (1f708 <nrfx_nvmc_word_write+0x64>)
   1f6b6:	4a15      	ldr	r2, [pc, #84]	; (1f70c <nrfx_nvmc_word_write+0x68>)
   1f6b8:	f240 134d 	movw	r3, #333	; 0x14d
   1f6bc:	f003 fe05 	bl	232ca <printk>
   1f6c0:	4812      	ldr	r0, [pc, #72]	; (1f70c <nrfx_nvmc_word_write+0x68>)
   1f6c2:	f240 114d 	movw	r1, #333	; 0x14d
   1f6c6:	f003 fe43 	bl	23350 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1f6ca:	07a1      	lsls	r1, r4, #30
   1f6cc:	d00b      	beq.n	1f6e6 <nrfx_nvmc_word_write+0x42>
   1f6ce:	4910      	ldr	r1, [pc, #64]	; (1f710 <nrfx_nvmc_word_write+0x6c>)
   1f6d0:	480d      	ldr	r0, [pc, #52]	; (1f708 <nrfx_nvmc_word_write+0x64>)
   1f6d2:	4a0e      	ldr	r2, [pc, #56]	; (1f70c <nrfx_nvmc_word_write+0x68>)
   1f6d4:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1f6d8:	f003 fdf7 	bl	232ca <printk>
   1f6dc:	480b      	ldr	r0, [pc, #44]	; (1f70c <nrfx_nvmc_word_write+0x68>)
   1f6de:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1f6e2:	f003 fe35 	bl	23350 <assert_post_action>
   1f6e6:	4b0b      	ldr	r3, [pc, #44]	; (1f714 <nrfx_nvmc_word_write+0x70>)
   1f6e8:	2201      	movs	r2, #1
   1f6ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1f6ee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f6f2:	07d2      	lsls	r2, r2, #31
   1f6f4:	d5fb      	bpl.n	1f6ee <nrfx_nvmc_word_write+0x4a>
    *(volatile uint32_t *)addr = value;
   1f6f6:	6025      	str	r5, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1f6f8:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   1f6fc:	2200      	movs	r2, #0
   1f6fe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   1f702:	bd38      	pop	{r3, r4, r5, pc}
   1f704:	0002fa9f 	.word	0x0002fa9f
   1f708:	000297e6 	.word	0x000297e6
   1f70c:	0002fa43 	.word	0x0002fa43
   1f710:	0002fac3 	.word	0x0002fac3
   1f714:	4001e000 	.word	0x4001e000

0001f718 <z_sys_device_do_config_level>:
#endif
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
   1f718:	4b09      	ldr	r3, [pc, #36]	; (1f740 <z_sys_device_do_config_level+0x28>)
{
   1f71a:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
   1f71c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1f720:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1f722:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   1f724:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1f728:	42a5      	cmp	r5, r4
   1f72a:	d800      	bhi.n	1f72e <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   1f72c:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1f72e:	6823      	ldr	r3, [r4, #0]
   1f730:	4620      	mov	r0, r4
   1f732:	685b      	ldr	r3, [r3, #4]
   1f734:	4798      	blx	r3
		if (retval != 0) {
   1f736:	b100      	cbz	r0, 1f73a <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1f738:	6066      	str	r6, [r4, #4]
								info++) {
   1f73a:	340c      	adds	r4, #12
   1f73c:	e7f4      	b.n	1f728 <z_sys_device_do_config_level+0x10>
   1f73e:	bf00      	nop
   1f740:	0002956c 	.word	0x0002956c

0001f744 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1f744:	4b10      	ldr	r3, [pc, #64]	; (1f788 <z_impl_device_get_binding+0x44>)
{
   1f746:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   1f748:	4c10      	ldr	r4, [pc, #64]	; (1f78c <z_impl_device_get_binding+0x48>)
{
   1f74a:	4605      	mov	r5, r0
   1f74c:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1f74e:	429c      	cmp	r4, r3
   1f750:	d104      	bne.n	1f75c <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1f752:	4c0e      	ldr	r4, [pc, #56]	; (1f78c <z_impl_device_get_binding+0x48>)
   1f754:	42b4      	cmp	r4, r6
   1f756:	d109      	bne.n	1f76c <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1f758:	2400      	movs	r4, #0
   1f75a:	e012      	b.n	1f782 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   1f75c:	6862      	ldr	r2, [r4, #4]
   1f75e:	b11a      	cbz	r2, 1f768 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   1f760:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   1f762:	6812      	ldr	r2, [r2, #0]
   1f764:	42aa      	cmp	r2, r5
   1f766:	d00c      	beq.n	1f782 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1f768:	340c      	adds	r4, #12
   1f76a:	e7f0      	b.n	1f74e <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   1f76c:	6863      	ldr	r3, [r4, #4]
   1f76e:	b90b      	cbnz	r3, 1f774 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1f770:	340c      	adds	r4, #12
   1f772:	e7ef      	b.n	1f754 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   1f774:	6823      	ldr	r3, [r4, #0]
   1f776:	4628      	mov	r0, r5
   1f778:	6819      	ldr	r1, [r3, #0]
   1f77a:	f005 fc5e 	bl	2503a <strcmp>
   1f77e:	2800      	cmp	r0, #0
   1f780:	d1f6      	bne.n	1f770 <z_impl_device_get_binding+0x2c>
}
   1f782:	4620      	mov	r0, r4
   1f784:	bd70      	pop	{r4, r5, r6, pc}
   1f786:	bf00      	nop
   1f788:	20007418 	.word	0x20007418
   1f78c:	20007364 	.word	0x20007364

0001f790 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1f790:	4b01      	ldr	r3, [pc, #4]	; (1f798 <z_impl_z_errno+0x8>)
   1f792:	6898      	ldr	r0, [r3, #8]
}
   1f794:	307c      	adds	r0, #124	; 0x7c
   1f796:	4770      	bx	lr
   1f798:	20001bc4 	.word	0x20001bc4

0001f79c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1f79c:	b510      	push	{r4, lr}
   1f79e:	4604      	mov	r4, r0
	z_impl_log_panic();
   1f7a0:	f7e2 ff68 	bl	2674 <z_impl_log_panic>
   1f7a4:	4b06      	ldr	r3, [pc, #24]	; (1f7c0 <k_sys_fatal_error_handler+0x24>)
   1f7a6:	4907      	ldr	r1, [pc, #28]	; (1f7c4 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1f7a8:	4807      	ldr	r0, [pc, #28]	; (1f7c8 <k_sys_fatal_error_handler+0x2c>)
   1f7aa:	1ac9      	subs	r1, r1, r3
   1f7ac:	08c9      	lsrs	r1, r1, #3
   1f7ae:	0189      	lsls	r1, r1, #6
   1f7b0:	f041 0101 	orr.w	r1, r1, #1
   1f7b4:	f003 fdfa 	bl	233ac <log_0>
	arch_system_halt(reason);
   1f7b8:	4620      	mov	r0, r4
   1f7ba:	f008 fd36 	bl	2822a <arch_system_halt>
   1f7be:	bf00      	nop
   1f7c0:	00028868 	.word	0x00028868
   1f7c4:	00028a00 	.word	0x00028a00
   1f7c8:	0002faec 	.word	0x0002faec

0001f7cc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f7cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f7d0:	4605      	mov	r5, r0
   1f7d2:	460e      	mov	r6, r1
	__asm__ volatile(
   1f7d4:	f04f 0320 	mov.w	r3, #32
   1f7d8:	f3ef 8811 	mrs	r8, BASEPRI
   1f7dc:	f383 8811 	msr	BASEPRI, r3
   1f7e0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1f7e4:	f002 f952 	bl	21a8c <z_impl_k_current_get>
   1f7e8:	4c28      	ldr	r4, [pc, #160]	; (1f88c <z_fatal_error+0xc0>)
   1f7ea:	4b29      	ldr	r3, [pc, #164]	; (1f890 <z_fatal_error+0xc4>)
   1f7ec:	1ae4      	subs	r4, r4, r3
   1f7ee:	2d04      	cmp	r5, #4
   1f7f0:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1f7f4:	bf96      	itet	ls
   1f7f6:	4a27      	ldrls	r2, [pc, #156]	; (1f894 <z_fatal_error+0xc8>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f7f8:	4a27      	ldrhi	r2, [pc, #156]	; (1f898 <z_fatal_error+0xcc>)
   1f7fa:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   1f7fe:	01a4      	lsls	r4, r4, #6
   1f800:	f044 0301 	orr.w	r3, r4, #1
   1f804:	4607      	mov	r7, r0
   1f806:	f8ad 3000 	strh.w	r3, [sp]
   1f80a:	4824      	ldr	r0, [pc, #144]	; (1f89c <z_fatal_error+0xd0>)
   1f80c:	2300      	movs	r3, #0
   1f80e:	4629      	mov	r1, r5
   1f810:	f003 fe06 	bl	23420 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f814:	b146      	cbz	r6, 1f828 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f816:	69f3      	ldr	r3, [r6, #28]
   1f818:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f81c:	b123      	cbz	r3, 1f828 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1f81e:	4820      	ldr	r0, [pc, #128]	; (1f8a0 <z_fatal_error+0xd4>)
   1f820:	f044 0101 	orr.w	r1, r4, #1
   1f824:	f003 fdc2 	bl	233ac <log_0>
	const char *thread_name = k_thread_name_get(thread);
   1f828:	4638      	mov	r0, r7
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f82a:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   1f82e:	f008 fdb2 	bl	28396 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1f832:	b1e0      	cbz	r0, 1f86e <z_fatal_error+0xa2>
   1f834:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1f836:	4b1b      	ldr	r3, [pc, #108]	; (1f8a4 <z_fatal_error+0xd8>)
   1f838:	2a00      	cmp	r2, #0
   1f83a:	bf08      	it	eq
   1f83c:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1f83e:	f7e2 fd7f 	bl	2340 <log_strdup>
   1f842:	4639      	mov	r1, r7
   1f844:	4602      	mov	r2, r0
   1f846:	4623      	mov	r3, r4
   1f848:	4817      	ldr	r0, [pc, #92]	; (1f8a8 <z_fatal_error+0xdc>)
   1f84a:	f003 fdd0 	bl	233ee <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1f84e:	4631      	mov	r1, r6
   1f850:	4628      	mov	r0, r5
   1f852:	f7ff ffa3 	bl	1f79c <k_sys_fatal_error_handler>
		}
#endif /* CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	} else {
		/* Test mode */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
		if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f856:	b166      	cbz	r6, 1f872 <z_fatal_error+0xa6>
   1f858:	69f3      	ldr	r3, [r6, #28]
   1f85a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f85e:	b143      	cbz	r3, 1f872 <z_fatal_error+0xa6>
	__asm__ volatile(
   1f860:	f388 8811 	msr	BASEPRI, r8
   1f864:	f3bf 8f6f 	isb	sy
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1f868:	b002      	add	sp, #8
   1f86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread_name = "unknown";
   1f86e:	480d      	ldr	r0, [pc, #52]	; (1f8a4 <z_fatal_error+0xd8>)
   1f870:	e7e5      	b.n	1f83e <z_fatal_error+0x72>
			if (reason == K_ERR_SPURIOUS_IRQ) {
   1f872:	2d01      	cmp	r5, #1
   1f874:	d0f4      	beq.n	1f860 <z_fatal_error+0x94>
   1f876:	f388 8811 	msr	BASEPRI, r8
   1f87a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f87e:	4638      	mov	r0, r7
}
   1f880:	b002      	add	sp, #8
   1f882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f886:	f7e5 bb33 	b.w	4ef0 <z_impl_k_thread_abort>
   1f88a:	bf00      	nop
   1f88c:	00028a00 	.word	0x00028a00
   1f890:	00028868 	.word	0x00028868
   1f894:	00029584 	.word	0x00029584
   1f898:	0002fafb 	.word	0x0002fafb
   1f89c:	0002fb09 	.word	0x0002fb09
   1f8a0:	0002fb31 	.word	0x0002fb31
   1f8a4:	0002ab91 	.word	0x0002ab91
   1f8a8:	0002fb52 	.word	0x0002fb52

0001f8ac <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1f8ac:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1f8ae:	4d0b      	ldr	r5, [pc, #44]	; (1f8dc <idle+0x30>)
	__asm__ volatile(
   1f8b0:	f04f 0220 	mov.w	r2, #32
   1f8b4:	f3ef 8311 	mrs	r3, BASEPRI
   1f8b8:	f382 8811 	msr	BASEPRI, r2
   1f8bc:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   1f8c0:	f002 fdb8 	bl	22434 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f8c4:	2101      	movs	r1, #1
   1f8c6:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
   1f8c8:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f8ca:	bfd8      	it	le
   1f8cc:	4608      	movle	r0, r1
   1f8ce:	f002 fdf9 	bl	224c4 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1f8d2:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   1f8d4:	f7e5 f802 	bl	48dc <arch_cpu_idle>
}
   1f8d8:	e7ea      	b.n	1f8b0 <idle+0x4>
   1f8da:	bf00      	nop
   1f8dc:	20001bc4 	.word	0x20001bc4

0001f8e0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1f8e0:	4802      	ldr	r0, [pc, #8]	; (1f8ec <z_bss_zero+0xc>)
   1f8e2:	4a03      	ldr	r2, [pc, #12]	; (1f8f0 <z_bss_zero+0x10>)
   1f8e4:	2100      	movs	r1, #0
   1f8e6:	1a12      	subs	r2, r2, r0
   1f8e8:	f005 bbfd 	b.w	250e6 <memset>
   1f8ec:	20000000 	.word	0x20000000
   1f8f0:	20002328 	.word	0x20002328

0001f8f4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1f8f4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1f8f6:	4806      	ldr	r0, [pc, #24]	; (1f910 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1f8f8:	4a06      	ldr	r2, [pc, #24]	; (1f914 <z_data_copy+0x20>)
   1f8fa:	4907      	ldr	r1, [pc, #28]	; (1f918 <z_data_copy+0x24>)
   1f8fc:	1a12      	subs	r2, r2, r0
   1f8fe:	f005 fbc7 	bl	25090 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1f902:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1f906:	4a05      	ldr	r2, [pc, #20]	; (1f91c <z_data_copy+0x28>)
   1f908:	4905      	ldr	r1, [pc, #20]	; (1f920 <z_data_copy+0x2c>)
   1f90a:	4806      	ldr	r0, [pc, #24]	; (1f924 <z_data_copy+0x30>)
   1f90c:	f005 bbc0 	b.w	25090 <memcpy>
   1f910:	20006780 	.word	0x20006780
   1f914:	2000767c 	.word	0x2000767c
   1f918:	000301c0 	.word	0x000301c0
   1f91c:	00000000 	.word	0x00000000
   1f920:	000301c0 	.word	0x000301c0
   1f924:	20000000 	.word	0x20000000

0001f928 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1f928:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1f92a:	4b0c      	ldr	r3, [pc, #48]	; (1f95c <bg_thread_main+0x34>)
   1f92c:	2201      	movs	r2, #1

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f92e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1f930:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f932:	f7ff fef1 	bl	1f718 <z_sys_device_do_config_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   1f936:	4a0a      	ldr	r2, [pc, #40]	; (1f960 <bg_thread_main+0x38>)
   1f938:	490a      	ldr	r1, [pc, #40]	; (1f964 <bg_thread_main+0x3c>)
   1f93a:	480b      	ldr	r0, [pc, #44]	; (1f968 <bg_thread_main+0x40>)
   1f93c:	f003 fcc5 	bl	232ca <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1f940:	2003      	movs	r0, #3
   1f942:	f7ff fee9 	bl	1f718 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1f946:	f002 fa2b 	bl	21da0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1f94a:	f7e2 f8ad 	bl	1aa8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f94e:	4a07      	ldr	r2, [pc, #28]	; (1f96c <bg_thread_main+0x44>)
   1f950:	7b13      	ldrb	r3, [r2, #12]
   1f952:	f023 0301 	bic.w	r3, r3, #1
   1f956:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f958:	bd08      	pop	{r3, pc}
   1f95a:	bf00      	nop
   1f95c:	20002324 	.word	0x20002324
   1f960:	0002c6a7 	.word	0x0002c6a7
   1f964:	0002eccc 	.word	0x0002eccc
   1f968:	0002fbb4 	.word	0x0002fbb4
   1f96c:	20001b24 	.word	0x20001b24

0001f970 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1f970:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1f974:	b0ad      	sub	sp, #180	; 0xb4
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1f976:	f7e2 fc11 	bl	219c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
   1f97a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 1fa78 <z_cstart+0x108>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f97e:	f38a 8808 	msr	MSP, sl
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1f982:	4d35      	ldr	r5, [pc, #212]	; (1fa58 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   1f984:	4e35      	ldr	r6, [pc, #212]	; (1fa5c <z_cstart+0xec>)
   1f986:	696b      	ldr	r3, [r5, #20]
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1f988:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 1fa7c <z_cstart+0x10c>
   1f98c:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 1fa80 <z_cstart+0x110>
	z_setup_new_thread(thread, stack,
   1f990:	4f33      	ldr	r7, [pc, #204]	; (1fa60 <z_cstart+0xf0>)
   1f992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f996:	2400      	movs	r4, #0
   1f998:	616b      	str	r3, [r5, #20]
   1f99a:	23e0      	movs	r3, #224	; 0xe0
   1f99c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1f9a0:	77ec      	strb	r4, [r5, #31]
   1f9a2:	762c      	strb	r4, [r5, #24]
   1f9a4:	766c      	strb	r4, [r5, #25]
   1f9a6:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f9a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1f9aa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f9ae:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f9b0:	f7e5 fa8a 	bl	4ec8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f9b4:	f7e4 ff8c 	bl	48d0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f9b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f9bc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f9be:	62eb      	str	r3, [r5, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   1f9c0:	ab07      	add	r3, sp, #28
   1f9c2:	2294      	movs	r2, #148	; 0x94
   1f9c4:	4621      	mov	r1, r4
   1f9c6:	4618      	mov	r0, r3
   1f9c8:	f005 fb8d 	bl	250e6 <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current_cpu->current = &dummy_thread;
   1f9cc:	4d25      	ldr	r5, [pc, #148]	; (1fa64 <z_cstart+0xf4>)
	struct k_thread dummy_thread = {
   1f9ce:	f04f 0801 	mov.w	r8, #1
	_current_cpu->current = &dummy_thread;
   1f9d2:	60a8      	str	r0, [r5, #8]
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1f9d4:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   1f9d6:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1f9da:	f7ff fe9d 	bl	1f718 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1f9de:	4640      	mov	r0, r8
   1f9e0:	f7ff fe9a 	bl	1f718 <z_sys_device_do_config_level>
	z_sched_init();
   1f9e4:	f001 fec6 	bl	21774 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1f9e8:	4b1f      	ldr	r3, [pc, #124]	; (1fa68 <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
   1f9ea:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1f9ec:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1f9f0:	4649      	mov	r1, r9
   1f9f2:	e9cd 8304 	strd	r8, r3, [sp, #16]
   1f9f6:	4630      	mov	r0, r6
   1f9f8:	465b      	mov	r3, fp
   1f9fa:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1f9fe:	e9cd 4400 	strd	r4, r4, [sp]
   1fa02:	f002 f939 	bl	21c78 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1fa06:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   1fa08:	4630      	mov	r0, r6
   1fa0a:	f023 0304 	bic.w	r3, r3, #4
   1fa0e:	7373      	strb	r3, [r6, #13]
   1fa10:	f001 f8fc 	bl	20c0c <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1fa14:	4b15      	ldr	r3, [pc, #84]	; (1fa6c <z_cstart+0xfc>)
   1fa16:	4916      	ldr	r1, [pc, #88]	; (1fa70 <z_cstart+0x100>)
   1fa18:	e9cd 8304 	strd	r8, r3, [sp, #16]
   1fa1c:	230f      	movs	r3, #15
   1fa1e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1fa22:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1fa26:	4b13      	ldr	r3, [pc, #76]	; (1fa74 <z_cstart+0x104>)
   1fa28:	4638      	mov	r0, r7
   1fa2a:	e9cd 4400 	strd	r4, r4, [sp]
   1fa2e:	f002 f923 	bl	21c78 <z_setup_new_thread>
   1fa32:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1fa34:	60ef      	str	r7, [r5, #12]
   1fa36:	f023 0304 	bic.w	r3, r3, #4
   1fa3a:	737b      	strb	r3, [r7, #13]
	list->head = (sys_dnode_t *)list;
   1fa3c:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1fa40:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   1fa44:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1fa46:	f8c5 a004 	str.w	sl, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1fa4a:	465b      	mov	r3, fp
   1fa4c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1fa50:	4649      	mov	r1, r9
   1fa52:	4630      	mov	r0, r6
   1fa54:	f7e4 ff1c 	bl	4890 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1fa58:	e000ed00 	.word	0xe000ed00
   1fa5c:	20001b24 	.word	0x20001b24
   1fa60:	20001a90 	.word	0x20001a90
   1fa64:	20001bc4 	.word	0x20001bc4
   1fa68:	0002bc49 	.word	0x0002bc49
   1fa6c:	0002fbdd 	.word	0x0002fbdd
   1fa70:	200044a0 	.word	0x200044a0
   1fa74:	0001f8ad 	.word	0x0001f8ad
   1fa78:	20004a20 	.word	0x20004a20
   1fa7c:	0001f929 	.word	0x0001f929
   1fa80:	200042c0 	.word	0x200042c0

0001fa84 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1fa84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1fa88:	4d16      	ldr	r5, [pc, #88]	; (1fae4 <init_mem_slab_module+0x60>)
   1fa8a:	4c17      	ldr	r4, [pc, #92]	; (1fae8 <init_mem_slab_module+0x64>)
   1fa8c:	4e17      	ldr	r6, [pc, #92]	; (1faec <init_mem_slab_module+0x68>)
   1fa8e:	46a8      	mov	r8, r5
   1fa90:	42ac      	cmp	r4, r5
   1fa92:	d90c      	bls.n	1faae <init_mem_slab_module+0x2a>
   1fa94:	4916      	ldr	r1, [pc, #88]	; (1faf0 <init_mem_slab_module+0x6c>)
   1fa96:	4817      	ldr	r0, [pc, #92]	; (1faf4 <init_mem_slab_module+0x70>)
   1fa98:	2342      	movs	r3, #66	; 0x42
   1fa9a:	4632      	mov	r2, r6
   1fa9c:	f003 fc15 	bl	232ca <printk>
   1faa0:	4815      	ldr	r0, [pc, #84]	; (1faf8 <init_mem_slab_module+0x74>)
   1faa2:	f003 fc12 	bl	232ca <printk>
   1faa6:	2142      	movs	r1, #66	; 0x42
   1faa8:	4630      	mov	r0, r6
   1faaa:	f003 fc51 	bl	23350 <assert_post_action>
   1faae:	4544      	cmp	r4, r8
   1fab0:	d302      	bcc.n	1fab8 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1fab2:	2000      	movs	r0, #0
	return rc;
}
   1fab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1fab8:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
   1fabc:	ea41 0302 	orr.w	r3, r1, r2
   1fac0:	f013 0303 	ands.w	r3, r3, #3
   1fac4:	d10b      	bne.n	1fade <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   1fac6:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   1fac8:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1faca:	4283      	cmp	r3, r0
   1facc:	d101      	bne.n	1fad2 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1face:	341c      	adds	r4, #28
   1fad0:	e7de      	b.n	1fa90 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   1fad2:	6967      	ldr	r7, [r4, #20]
   1fad4:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1fad6:	3301      	adds	r3, #1
		slab->free_list = p;
   1fad8:	6161      	str	r1, [r4, #20]
		p += slab->block_size;
   1fada:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1fadc:	e7f5      	b.n	1faca <init_mem_slab_module+0x46>
		return -EINVAL;
   1fade:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1fae2:	e7e7      	b.n	1fab4 <init_mem_slab_module+0x30>
   1fae4:	2000749c 	.word	0x2000749c
   1fae8:	20007448 	.word	0x20007448
   1faec:	0002fbe5 	.word	0x0002fbe5
   1faf0:	0002fc0a 	.word	0x0002fc0a
   1faf4:	000297e6 	.word	0x000297e6
   1faf8:	00029c4a 	.word	0x00029c4a

0001fafc <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1fafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fafe:	4604      	mov	r4, r0
   1fb00:	460d      	mov	r5, r1
   1fb02:	4616      	mov	r6, r2
   1fb04:	f04f 0320 	mov.w	r3, #32
   1fb08:	f3ef 8711 	mrs	r7, BASEPRI
   1fb0c:	f383 8811 	msr	BASEPRI, r3
   1fb10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fb14:	4823      	ldr	r0, [pc, #140]	; (1fba4 <k_mem_slab_alloc+0xa8>)
   1fb16:	f002 f9cd 	bl	21eb4 <z_spin_lock_valid>
   1fb1a:	b968      	cbnz	r0, 1fb38 <k_mem_slab_alloc+0x3c>
   1fb1c:	4a22      	ldr	r2, [pc, #136]	; (1fba8 <k_mem_slab_alloc+0xac>)
   1fb1e:	4923      	ldr	r1, [pc, #140]	; (1fbac <k_mem_slab_alloc+0xb0>)
   1fb20:	4823      	ldr	r0, [pc, #140]	; (1fbb0 <k_mem_slab_alloc+0xb4>)
   1fb22:	234a      	movs	r3, #74	; 0x4a
   1fb24:	f003 fbd1 	bl	232ca <printk>
   1fb28:	491e      	ldr	r1, [pc, #120]	; (1fba4 <k_mem_slab_alloc+0xa8>)
   1fb2a:	4822      	ldr	r0, [pc, #136]	; (1fbb4 <k_mem_slab_alloc+0xb8>)
   1fb2c:	f003 fbcd 	bl	232ca <printk>
   1fb30:	481d      	ldr	r0, [pc, #116]	; (1fba8 <k_mem_slab_alloc+0xac>)
   1fb32:	214a      	movs	r1, #74	; 0x4a
   1fb34:	f003 fc0c 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fb38:	481a      	ldr	r0, [pc, #104]	; (1fba4 <k_mem_slab_alloc+0xa8>)
   1fb3a:	f002 f9d9 	bl	21ef0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1fb3e:	6963      	ldr	r3, [r4, #20]
   1fb40:	b1eb      	cbz	r3, 1fb7e <k_mem_slab_alloc+0x82>
		/* take a free block */
		*mem = slab->free_list;
   1fb42:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   1fb44:	681b      	ldr	r3, [r3, #0]
   1fb46:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   1fb48:	69a3      	ldr	r3, [r4, #24]
   1fb4a:	3301      	adds	r3, #1
   1fb4c:	61a3      	str	r3, [r4, #24]
		result = 0;
   1fb4e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fb50:	4814      	ldr	r0, [pc, #80]	; (1fba4 <k_mem_slab_alloc+0xa8>)
   1fb52:	f002 f9bd 	bl	21ed0 <z_spin_unlock_valid>
   1fb56:	b968      	cbnz	r0, 1fb74 <k_mem_slab_alloc+0x78>
   1fb58:	4a13      	ldr	r2, [pc, #76]	; (1fba8 <k_mem_slab_alloc+0xac>)
   1fb5a:	4917      	ldr	r1, [pc, #92]	; (1fbb8 <k_mem_slab_alloc+0xbc>)
   1fb5c:	4814      	ldr	r0, [pc, #80]	; (1fbb0 <k_mem_slab_alloc+0xb4>)
   1fb5e:	235d      	movs	r3, #93	; 0x5d
   1fb60:	f003 fbb3 	bl	232ca <printk>
   1fb64:	490f      	ldr	r1, [pc, #60]	; (1fba4 <k_mem_slab_alloc+0xa8>)
   1fb66:	4815      	ldr	r0, [pc, #84]	; (1fbbc <k_mem_slab_alloc+0xc0>)
   1fb68:	f003 fbaf 	bl	232ca <printk>
   1fb6c:	480e      	ldr	r0, [pc, #56]	; (1fba8 <k_mem_slab_alloc+0xac>)
   1fb6e:	215d      	movs	r1, #93	; 0x5d
   1fb70:	f003 fbee 	bl	23350 <assert_post_action>
	__asm__ volatile(
   1fb74:	f387 8811 	msr	BASEPRI, r7
   1fb78:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1fb7c:	e010      	b.n	1fba0 <k_mem_slab_alloc+0xa4>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fb7e:	b91e      	cbnz	r6, 1fb88 <k_mem_slab_alloc+0x8c>
		*mem = NULL;
   1fb80:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   1fb82:	f06f 040b 	mvn.w	r4, #11
   1fb86:	e7e3      	b.n	1fb50 <k_mem_slab_alloc+0x54>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1fb88:	4622      	mov	r2, r4
   1fb8a:	4806      	ldr	r0, [pc, #24]	; (1fba4 <k_mem_slab_alloc+0xa8>)
   1fb8c:	4633      	mov	r3, r6
   1fb8e:	4639      	mov	r1, r7
   1fb90:	f001 fc9c 	bl	214cc <z_pend_curr>
		if (result == 0) {
   1fb94:	4604      	mov	r4, r0
   1fb96:	b918      	cbnz	r0, 1fba0 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   1fb98:	4b09      	ldr	r3, [pc, #36]	; (1fbc0 <k_mem_slab_alloc+0xc4>)
   1fb9a:	689b      	ldr	r3, [r3, #8]
   1fb9c:	695b      	ldr	r3, [r3, #20]
   1fb9e:	602b      	str	r3, [r5, #0]
}
   1fba0:	4620      	mov	r0, r4
   1fba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fba4:	20001bb8 	.word	0x20001bb8
   1fba8:	00029daf 	.word	0x00029daf
   1fbac:	00029dd1 	.word	0x00029dd1
   1fbb0:	000297e6 	.word	0x000297e6
   1fbb4:	00029de6 	.word	0x00029de6
   1fbb8:	00029dfe 	.word	0x00029dfe
   1fbbc:	00029e15 	.word	0x00029e15
   1fbc0:	20001bc4 	.word	0x20001bc4

0001fbc4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1fbc4:	b570      	push	{r4, r5, r6, lr}
   1fbc6:	4604      	mov	r4, r0
   1fbc8:	460d      	mov	r5, r1
	__asm__ volatile(
   1fbca:	f04f 0320 	mov.w	r3, #32
   1fbce:	f3ef 8611 	mrs	r6, BASEPRI
   1fbd2:	f383 8811 	msr	BASEPRI, r3
   1fbd6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fbda:	4822      	ldr	r0, [pc, #136]	; (1fc64 <k_mem_slab_free+0xa0>)
   1fbdc:	f002 f96a 	bl	21eb4 <z_spin_lock_valid>
   1fbe0:	b968      	cbnz	r0, 1fbfe <k_mem_slab_free+0x3a>
   1fbe2:	4a21      	ldr	r2, [pc, #132]	; (1fc68 <k_mem_slab_free+0xa4>)
   1fbe4:	4921      	ldr	r1, [pc, #132]	; (1fc6c <k_mem_slab_free+0xa8>)
   1fbe6:	4822      	ldr	r0, [pc, #136]	; (1fc70 <k_mem_slab_free+0xac>)
   1fbe8:	234a      	movs	r3, #74	; 0x4a
   1fbea:	f003 fb6e 	bl	232ca <printk>
   1fbee:	491d      	ldr	r1, [pc, #116]	; (1fc64 <k_mem_slab_free+0xa0>)
   1fbf0:	4820      	ldr	r0, [pc, #128]	; (1fc74 <k_mem_slab_free+0xb0>)
   1fbf2:	f003 fb6a 	bl	232ca <printk>
   1fbf6:	481c      	ldr	r0, [pc, #112]	; (1fc68 <k_mem_slab_free+0xa4>)
   1fbf8:	214a      	movs	r1, #74	; 0x4a
   1fbfa:	f003 fba9 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fbfe:	4819      	ldr	r0, [pc, #100]	; (1fc64 <k_mem_slab_free+0xa0>)
   1fc00:	f002 f976 	bl	21ef0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1fc04:	4620      	mov	r0, r4
   1fc06:	f001 fd25 	bl	21654 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1fc0a:	b160      	cbz	r0, 1fc26 <k_mem_slab_free+0x62>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1fc0c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1fc0e:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1fc10:	2100      	movs	r1, #0
   1fc12:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
		z_ready_thread(pending_thread);
   1fc16:	f000 fff9 	bl	20c0c <z_ready_thread>
		z_reschedule(&lock, key);
   1fc1a:	4631      	mov	r1, r6
   1fc1c:	4811      	ldr	r0, [pc, #68]	; (1fc64 <k_mem_slab_free+0xa0>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1fc1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1fc22:	f000 bdcd 	b.w	207c0 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1fc26:	682b      	ldr	r3, [r5, #0]
   1fc28:	6962      	ldr	r2, [r4, #20]
   1fc2a:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1fc2c:	682b      	ldr	r3, [r5, #0]
   1fc2e:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1fc30:	69a3      	ldr	r3, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fc32:	480c      	ldr	r0, [pc, #48]	; (1fc64 <k_mem_slab_free+0xa0>)
   1fc34:	3b01      	subs	r3, #1
   1fc36:	61a3      	str	r3, [r4, #24]
   1fc38:	f002 f94a 	bl	21ed0 <z_spin_unlock_valid>
   1fc3c:	b968      	cbnz	r0, 1fc5a <k_mem_slab_free+0x96>
   1fc3e:	4a0a      	ldr	r2, [pc, #40]	; (1fc68 <k_mem_slab_free+0xa4>)
   1fc40:	490d      	ldr	r1, [pc, #52]	; (1fc78 <k_mem_slab_free+0xb4>)
   1fc42:	480b      	ldr	r0, [pc, #44]	; (1fc70 <k_mem_slab_free+0xac>)
   1fc44:	235d      	movs	r3, #93	; 0x5d
   1fc46:	f003 fb40 	bl	232ca <printk>
   1fc4a:	4906      	ldr	r1, [pc, #24]	; (1fc64 <k_mem_slab_free+0xa0>)
   1fc4c:	480b      	ldr	r0, [pc, #44]	; (1fc7c <k_mem_slab_free+0xb8>)
   1fc4e:	f003 fb3c 	bl	232ca <printk>
   1fc52:	4805      	ldr	r0, [pc, #20]	; (1fc68 <k_mem_slab_free+0xa4>)
   1fc54:	215d      	movs	r1, #93	; 0x5d
   1fc56:	f003 fb7b 	bl	23350 <assert_post_action>
	__asm__ volatile(
   1fc5a:	f386 8811 	msr	BASEPRI, r6
   1fc5e:	f3bf 8f6f 	isb	sy
}
   1fc62:	bd70      	pop	{r4, r5, r6, pc}
   1fc64:	20001bb8 	.word	0x20001bb8
   1fc68:	00029daf 	.word	0x00029daf
   1fc6c:	00029dd1 	.word	0x00029dd1
   1fc70:	000297e6 	.word	0x000297e6
   1fc74:	00029de6 	.word	0x00029de6
   1fc78:	00029dfe 	.word	0x00029dfe
   1fc7c:	00029e15 	.word	0x00029e15

0001fc80 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1fc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1fc82:	4d10      	ldr	r5, [pc, #64]	; (1fcc4 <init_static_pools+0x44>)
   1fc84:	4c10      	ldr	r4, [pc, #64]	; (1fcc8 <init_static_pools+0x48>)
   1fc86:	4e11      	ldr	r6, [pc, #68]	; (1fccc <init_static_pools+0x4c>)
   1fc88:	462f      	mov	r7, r5
   1fc8a:	42ac      	cmp	r4, r5
   1fc8c:	d90c      	bls.n	1fca8 <init_static_pools+0x28>
   1fc8e:	4910      	ldr	r1, [pc, #64]	; (1fcd0 <init_static_pools+0x50>)
   1fc90:	4810      	ldr	r0, [pc, #64]	; (1fcd4 <init_static_pools+0x54>)
   1fc92:	2328      	movs	r3, #40	; 0x28
   1fc94:	4632      	mov	r2, r6
   1fc96:	f003 fb18 	bl	232ca <printk>
   1fc9a:	480f      	ldr	r0, [pc, #60]	; (1fcd8 <init_static_pools+0x58>)
   1fc9c:	f003 fb15 	bl	232ca <printk>
   1fca0:	2128      	movs	r1, #40	; 0x28
   1fca2:	4630      	mov	r0, r6
   1fca4:	f003 fb54 	bl	23350 <assert_post_action>
   1fca8:	42bc      	cmp	r4, r7
   1fcaa:	d301      	bcc.n	1fcb0 <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   1fcac:	2000      	movs	r0, #0
   1fcae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1fcb0:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   1fcb4:	4620      	mov	r0, r4
   1fcb6:	e9c4 3305 	strd	r3, r3, [r4, #20]
   1fcba:	f003 f9e5 	bl	23088 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1fcbe:	341c      	adds	r4, #28
   1fcc0:	e7e3      	b.n	1fc8a <init_static_pools+0xa>
   1fcc2:	bf00      	nop
   1fcc4:	2000749c 	.word	0x2000749c
   1fcc8:	2000749c 	.word	0x2000749c
   1fccc:	0002fc27 	.word	0x0002fc27
   1fcd0:	0002fc4b 	.word	0x0002fc4b
   1fcd4:	000297e6 	.word	0x000297e6
   1fcd8:	00029c4a 	.word	0x00029c4a

0001fcdc <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   1fcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fce0:	4607      	mov	r7, r0
   1fce2:	b087      	sub	sp, #28
   1fce4:	460d      	mov	r5, r1
   1fce6:	4691      	mov	r9, r2
   1fce8:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1fcea:	f3ef 8305 	mrs	r3, IPSR
	int ret;
	u64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && !K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");
   1fcee:	b16b      	cbz	r3, 1fd0c <k_mem_pool_alloc+0x30>
   1fcf0:	b164      	cbz	r4, 1fd0c <k_mem_pool_alloc+0x30>
   1fcf2:	492c      	ldr	r1, [pc, #176]	; (1fda4 <k_mem_pool_alloc+0xc8>)
   1fcf4:	4a2c      	ldr	r2, [pc, #176]	; (1fda8 <k_mem_pool_alloc+0xcc>)
   1fcf6:	482d      	ldr	r0, [pc, #180]	; (1fdac <k_mem_pool_alloc+0xd0>)
   1fcf8:	2337      	movs	r3, #55	; 0x37
   1fcfa:	f003 fae6 	bl	232ca <printk>
   1fcfe:	482c      	ldr	r0, [pc, #176]	; (1fdb0 <k_mem_pool_alloc+0xd4>)
   1fd00:	f003 fae3 	bl	232ca <printk>
   1fd04:	4828      	ldr	r0, [pc, #160]	; (1fda8 <k_mem_pool_alloc+0xcc>)
   1fd06:	2137      	movs	r1, #55	; 0x37
   1fd08:	f003 fb22 	bl	23350 <assert_post_action>

	end = z_timeout_end_calc(timeout);
   1fd0c:	4620      	mov	r0, r4
   1fd0e:	f008 fbc9 	bl	284a4 <z_timeout_end_calc>
	return pool - &_k_mem_pool_list_start[0];
   1fd12:	4b28      	ldr	r3, [pc, #160]	; (1fdb4 <k_mem_pool_alloc+0xd8>)
   1fd14:	4e28      	ldr	r6, [pc, #160]	; (1fdb8 <k_mem_pool_alloc+0xdc>)
	end = z_timeout_end_calc(timeout);
   1fd16:	9103      	str	r1, [sp, #12]
	return pool - &_k_mem_pool_list_start[0];
   1fd18:	1afb      	subs	r3, r7, r3
   1fd1a:	109b      	asrs	r3, r3, #2
   1fd1c:	435e      	muls	r6, r3
	end = z_timeout_end_calc(timeout);
   1fd1e:	4680      	mov	r8, r0
		u32_t level_num, block_num;

		ret = z_sys_mem_pool_block_alloc(&p->base, size,
						 &level_num, &block_num,
						 &block->data);
		block->id.pool = pool_id(p);
   1fd20:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1fd22:	ab05      	add	r3, sp, #20
   1fd24:	aa04      	add	r2, sp, #16
   1fd26:	9500      	str	r5, [sp, #0]
   1fd28:	4649      	mov	r1, r9
   1fd2a:	4638      	mov	r0, r7
   1fd2c:	f003 f9f2 	bl	23114 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   1fd30:	9b04      	ldr	r3, [sp, #16]
   1fd32:	9a05      	ldr	r2, [sp, #20]
   1fd34:	021b      	lsls	r3, r3, #8
   1fd36:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   1fd3a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
   1fd3e:	b2f2      	uxtb	r2, r6
   1fd40:	4313      	orrs	r3, r2
   1fd42:	606b      	str	r3, [r5, #4]
		block->id.block = block_num;

		if (ret == 0 || K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1fd44:	b358      	cbz	r0, 1fd9e <k_mem_pool_alloc+0xc2>
   1fd46:	b354      	cbz	r4, 1fd9e <k_mem_pool_alloc+0xc2>
   1fd48:	f110 0f0c 	cmn.w	r0, #12
   1fd4c:	d127      	bne.n	1fd9e <k_mem_pool_alloc+0xc2>
	__asm__ volatile(
   1fd4e:	f04f 0320 	mov.w	r3, #32
   1fd52:	f3ef 8011 	mrs	r0, BASEPRI
   1fd56:	f383 8811 	msr	BASEPRI, r3
   1fd5a:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   1fd5e:	4622      	mov	r2, r4
   1fd60:	f107 0114 	add.w	r1, r7, #20
   1fd64:	f001 fb58 	bl	21418 <z_pend_curr_irqlock>
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);

		if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fd68:	1c63      	adds	r3, r4, #1
   1fd6a:	d0da      	beq.n	1fd22 <k_mem_pool_alloc+0x46>
			s64_t remaining = end - z_tick_get();
   1fd6c:	f002 fcaa 	bl	226c4 <z_tick_get>
   1fd70:	9b03      	ldr	r3, [sp, #12]
   1fd72:	ebb8 0a00 	subs.w	sl, r8, r0
   1fd76:	eb63 0b01 	sbc.w	fp, r3, r1

			if (remaining <= 0) {
   1fd7a:	f1ba 0f01 	cmp.w	sl, #1
   1fd7e:	f17b 0300 	sbcs.w	r3, fp, #0
   1fd82:	db0a      	blt.n	1fd9a <k_mem_pool_alloc+0xbe>
			return (u32_t)((t * to_hz + off) / from_hz);
   1fd84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1fd88:	f647 71ff 	movw	r1, #32767	; 0x7fff
   1fd8c:	2200      	movs	r2, #0
   1fd8e:	fbe3 120a 	umlal	r1, r2, r3, sl
   1fd92:	0bcc      	lsrs	r4, r1, #15
   1fd94:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	while (true) {
   1fd98:	e7c3      	b.n	1fd22 <k_mem_pool_alloc+0x46>
			}
			timeout = Z_TIMEOUT_TICKS(remaining);
		}
	}

	return -EAGAIN;
   1fd9a:	f06f 000a 	mvn.w	r0, #10
}
   1fd9e:	b007      	add	sp, #28
   1fda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fda4:	0002fc65 	.word	0x0002fc65
   1fda8:	0002fc27 	.word	0x0002fc27
   1fdac:	000297e6 	.word	0x000297e6
   1fdb0:	0002f76a 	.word	0x0002f76a
   1fdb4:	2000749c 	.word	0x2000749c
   1fdb8:	b6db6db7 	.word	0xb6db6db7

0001fdbc <k_mem_pool_free_id>:
void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1fdbc:	7803      	ldrb	r3, [r0, #0]
   1fdbe:	6802      	ldr	r2, [r0, #0]
   1fdc0:	7841      	ldrb	r1, [r0, #1]
{
   1fdc2:	b570      	push	{r4, r5, r6, lr}
	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1fdc4:	4c25      	ldr	r4, [pc, #148]	; (1fe5c <k_mem_pool_free_id+0xa0>)
   1fdc6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1fdca:	0b12      	lsrs	r2, r2, #12
   1fdcc:	f001 010f 	and.w	r1, r1, #15
   1fdd0:	eb04 0083 	add.w	r0, r4, r3, lsl #2
   1fdd4:	009d      	lsls	r5, r3, #2
   1fdd6:	f7e1 fe9b 	bl	1b10 <z_sys_mem_pool_block_free>
   1fdda:	f04f 0320 	mov.w	r3, #32
   1fdde:	f3ef 8611 	mrs	r6, BASEPRI
   1fde2:	f383 8811 	msr	BASEPRI, r3
   1fde6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fdea:	481d      	ldr	r0, [pc, #116]	; (1fe60 <k_mem_pool_free_id+0xa4>)
   1fdec:	f002 f862 	bl	21eb4 <z_spin_lock_valid>
   1fdf0:	b968      	cbnz	r0, 1fe0e <k_mem_pool_free_id+0x52>
   1fdf2:	4a1c      	ldr	r2, [pc, #112]	; (1fe64 <k_mem_pool_free_id+0xa8>)
   1fdf4:	491c      	ldr	r1, [pc, #112]	; (1fe68 <k_mem_pool_free_id+0xac>)
   1fdf6:	481d      	ldr	r0, [pc, #116]	; (1fe6c <k_mem_pool_free_id+0xb0>)
   1fdf8:	234a      	movs	r3, #74	; 0x4a
   1fdfa:	f003 fa66 	bl	232ca <printk>
   1fdfe:	4918      	ldr	r1, [pc, #96]	; (1fe60 <k_mem_pool_free_id+0xa4>)
   1fe00:	481b      	ldr	r0, [pc, #108]	; (1fe70 <k_mem_pool_free_id+0xb4>)
   1fe02:	f003 fa62 	bl	232ca <printk>
   1fe06:	4817      	ldr	r0, [pc, #92]	; (1fe64 <k_mem_pool_free_id+0xa8>)
   1fe08:	214a      	movs	r1, #74	; 0x4a
   1fe0a:	f003 faa1 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fe0e:	4814      	ldr	r0, [pc, #80]	; (1fe60 <k_mem_pool_free_id+0xa4>)
   1fe10:	f002 f86e 	bl	21ef0 <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1fe14:	f105 0014 	add.w	r0, r5, #20
   1fe18:	4420      	add	r0, r4
   1fe1a:	f008 fa94 	bl	28346 <z_unpend_all>

	if (need_sched != 0) {
   1fe1e:	b128      	cbz	r0, 1fe2c <k_mem_pool_free_id+0x70>
		z_reschedule(&lock, key);
   1fe20:	4631      	mov	r1, r6
   1fe22:	480f      	ldr	r0, [pc, #60]	; (1fe60 <k_mem_pool_free_id+0xa4>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1fe24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1fe28:	f000 bcca 	b.w	207c0 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fe2c:	480c      	ldr	r0, [pc, #48]	; (1fe60 <k_mem_pool_free_id+0xa4>)
   1fe2e:	f002 f84f 	bl	21ed0 <z_spin_unlock_valid>
   1fe32:	b968      	cbnz	r0, 1fe50 <k_mem_pool_free_id+0x94>
   1fe34:	4a0b      	ldr	r2, [pc, #44]	; (1fe64 <k_mem_pool_free_id+0xa8>)
   1fe36:	490f      	ldr	r1, [pc, #60]	; (1fe74 <k_mem_pool_free_id+0xb8>)
   1fe38:	480c      	ldr	r0, [pc, #48]	; (1fe6c <k_mem_pool_free_id+0xb0>)
   1fe3a:	235d      	movs	r3, #93	; 0x5d
   1fe3c:	f003 fa45 	bl	232ca <printk>
   1fe40:	4907      	ldr	r1, [pc, #28]	; (1fe60 <k_mem_pool_free_id+0xa4>)
   1fe42:	480d      	ldr	r0, [pc, #52]	; (1fe78 <k_mem_pool_free_id+0xbc>)
   1fe44:	f003 fa41 	bl	232ca <printk>
   1fe48:	4806      	ldr	r0, [pc, #24]	; (1fe64 <k_mem_pool_free_id+0xa8>)
   1fe4a:	215d      	movs	r1, #93	; 0x5d
   1fe4c:	f003 fa80 	bl	23350 <assert_post_action>
	__asm__ volatile(
   1fe50:	f386 8811 	msr	BASEPRI, r6
   1fe54:	f3bf 8f6f 	isb	sy
}
   1fe58:	bd70      	pop	{r4, r5, r6, pc}
   1fe5a:	bf00      	nop
   1fe5c:	2000749c 	.word	0x2000749c
   1fe60:	20001bbc 	.word	0x20001bbc
   1fe64:	00029daf 	.word	0x00029daf
   1fe68:	00029dd1 	.word	0x00029dd1
   1fe6c:	000297e6 	.word	0x000297e6
   1fe70:	00029de6 	.word	0x00029de6
   1fe74:	00029dfe 	.word	0x00029dfe
   1fe78:	00029e15 	.word	0x00029e15

0001fe7c <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1fe7c:	b510      	push	{r4, lr}
   1fe7e:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1fe80:	f008 fa81 	bl	28386 <k_is_in_isr>
   1fe84:	b948      	cbnz	r0, 1fe9a <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1fe86:	4b06      	ldr	r3, [pc, #24]	; (1fea0 <z_thread_malloc+0x24>)
   1fe88:	689b      	ldr	r3, [r3, #8]
   1fe8a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
	}

	if (pool) {
   1fe8e:	b120      	cbz	r0, 1fe9a <z_thread_malloc+0x1e>
		ret = k_mem_pool_malloc(pool, size);
   1fe90:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   1fe92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   1fe96:	f008 b9ee 	b.w	28276 <k_mem_pool_malloc>
}
   1fe9a:	2000      	movs	r0, #0
   1fe9c:	bd10      	pop	{r4, pc}
   1fe9e:	bf00      	nop
   1fea0:	20001bc4 	.word	0x20001bc4

0001fea4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1fea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fea6:	4604      	mov	r4, r0
   1fea8:	460e      	mov	r6, r1
	__asm__ volatile(
   1feaa:	f04f 0320 	mov.w	r3, #32
   1feae:	f3ef 8711 	mrs	r7, BASEPRI
   1feb2:	f383 8811 	msr	BASEPRI, r3
   1feb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1feba:	4861      	ldr	r0, [pc, #388]	; (20040 <z_impl_k_mutex_lock+0x19c>)
   1febc:	f001 fffa 	bl	21eb4 <z_spin_lock_valid>
   1fec0:	b968      	cbnz	r0, 1fede <z_impl_k_mutex_lock+0x3a>
   1fec2:	4a60      	ldr	r2, [pc, #384]	; (20044 <z_impl_k_mutex_lock+0x1a0>)
   1fec4:	4960      	ldr	r1, [pc, #384]	; (20048 <z_impl_k_mutex_lock+0x1a4>)
   1fec6:	4861      	ldr	r0, [pc, #388]	; (2004c <z_impl_k_mutex_lock+0x1a8>)
   1fec8:	234a      	movs	r3, #74	; 0x4a
   1feca:	f003 f9fe 	bl	232ca <printk>
   1fece:	495c      	ldr	r1, [pc, #368]	; (20040 <z_impl_k_mutex_lock+0x19c>)
   1fed0:	485f      	ldr	r0, [pc, #380]	; (20050 <z_impl_k_mutex_lock+0x1ac>)
   1fed2:	f003 f9fa 	bl	232ca <printk>
   1fed6:	485b      	ldr	r0, [pc, #364]	; (20044 <z_impl_k_mutex_lock+0x1a0>)
   1fed8:	214a      	movs	r1, #74	; 0x4a
   1feda:	f003 fa39 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fede:	4858      	ldr	r0, [pc, #352]	; (20040 <z_impl_k_mutex_lock+0x19c>)
   1fee0:	f002 f806 	bl	21ef0 <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1fee4:	68e3      	ldr	r3, [r4, #12]
   1fee6:	4a5b      	ldr	r2, [pc, #364]	; (20054 <z_impl_k_mutex_lock+0x1b0>)
   1fee8:	b1f3      	cbz	r3, 1ff28 <z_impl_k_mutex_lock+0x84>
   1feea:	68a0      	ldr	r0, [r4, #8]
   1feec:	6891      	ldr	r1, [r2, #8]
   1feee:	4288      	cmp	r0, r1
   1fef0:	d03a      	beq.n	1ff68 <z_impl_k_mutex_lock+0xc4>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1fef2:	2e00      	cmp	r6, #0
   1fef4:	d13a      	bne.n	1ff6c <z_impl_k_mutex_lock+0xc8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fef6:	4852      	ldr	r0, [pc, #328]	; (20040 <z_impl_k_mutex_lock+0x19c>)
   1fef8:	f001 ffea 	bl	21ed0 <z_spin_unlock_valid>
   1fefc:	b968      	cbnz	r0, 1ff1a <z_impl_k_mutex_lock+0x76>
   1fefe:	4a51      	ldr	r2, [pc, #324]	; (20044 <z_impl_k_mutex_lock+0x1a0>)
   1ff00:	4955      	ldr	r1, [pc, #340]	; (20058 <z_impl_k_mutex_lock+0x1b4>)
   1ff02:	4852      	ldr	r0, [pc, #328]	; (2004c <z_impl_k_mutex_lock+0x1a8>)
   1ff04:	235d      	movs	r3, #93	; 0x5d
   1ff06:	f003 f9e0 	bl	232ca <printk>
   1ff0a:	494d      	ldr	r1, [pc, #308]	; (20040 <z_impl_k_mutex_lock+0x19c>)
   1ff0c:	4853      	ldr	r0, [pc, #332]	; (2005c <z_impl_k_mutex_lock+0x1b8>)
   1ff0e:	f003 f9dc 	bl	232ca <printk>
   1ff12:	484c      	ldr	r0, [pc, #304]	; (20044 <z_impl_k_mutex_lock+0x1a0>)
   1ff14:	215d      	movs	r1, #93	; 0x5d
   1ff16:	f003 fa1b 	bl	23350 <assert_post_action>
	__asm__ volatile(
   1ff1a:	f387 8811 	msr	BASEPRI, r7
   1ff1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1ff22:	f06f 000f 	mvn.w	r0, #15
   1ff26:	e01e      	b.n	1ff66 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   1ff28:	6891      	ldr	r1, [r2, #8]
   1ff2a:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1ff2e:	4844      	ldr	r0, [pc, #272]	; (20040 <z_impl_k_mutex_lock+0x19c>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1ff30:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1ff32:	3301      	adds	r3, #1
   1ff34:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1ff36:	6893      	ldr	r3, [r2, #8]
   1ff38:	60a3      	str	r3, [r4, #8]
   1ff3a:	f001 ffc9 	bl	21ed0 <z_spin_unlock_valid>
   1ff3e:	b968      	cbnz	r0, 1ff5c <z_impl_k_mutex_lock+0xb8>
   1ff40:	4a40      	ldr	r2, [pc, #256]	; (20044 <z_impl_k_mutex_lock+0x1a0>)
   1ff42:	4945      	ldr	r1, [pc, #276]	; (20058 <z_impl_k_mutex_lock+0x1b4>)
   1ff44:	4841      	ldr	r0, [pc, #260]	; (2004c <z_impl_k_mutex_lock+0x1a8>)
   1ff46:	235d      	movs	r3, #93	; 0x5d
   1ff48:	f003 f9bf 	bl	232ca <printk>
   1ff4c:	493c      	ldr	r1, [pc, #240]	; (20040 <z_impl_k_mutex_lock+0x19c>)
   1ff4e:	4843      	ldr	r0, [pc, #268]	; (2005c <z_impl_k_mutex_lock+0x1b8>)
   1ff50:	f003 f9bb 	bl	232ca <printk>
   1ff54:	483b      	ldr	r0, [pc, #236]	; (20044 <z_impl_k_mutex_lock+0x1a0>)
   1ff56:	215d      	movs	r1, #93	; 0x5d
   1ff58:	f003 f9fa 	bl	23350 <assert_post_action>
   1ff5c:	f387 8811 	msr	BASEPRI, r7
   1ff60:	f3bf 8f6f 	isb	sy
		return 0;
   1ff64:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1ff66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   1ff68:	6921      	ldr	r1, [r4, #16]
   1ff6a:	e7e0      	b.n	1ff2e <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1ff6c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ff70:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1ff74:	4299      	cmp	r1, r3
   1ff76:	bfa8      	it	ge
   1ff78:	4619      	movge	r1, r3
   1ff7a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1ff7e:	428b      	cmp	r3, r1
   1ff80:	dd40      	ble.n	20004 <z_impl_k_mutex_lock+0x160>
		return z_set_prio(mutex->owner, new_prio);
   1ff82:	f001 fad1 	bl	21528 <z_set_prio>
   1ff86:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1ff88:	482d      	ldr	r0, [pc, #180]	; (20040 <z_impl_k_mutex_lock+0x19c>)
   1ff8a:	4633      	mov	r3, r6
   1ff8c:	4622      	mov	r2, r4
   1ff8e:	4639      	mov	r1, r7
   1ff90:	f001 fa9c 	bl	214cc <z_pend_curr>
	if (got_mutex == 0) {
   1ff94:	2800      	cmp	r0, #0
   1ff96:	d0e6      	beq.n	1ff66 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   1ff98:	f04f 0320 	mov.w	r3, #32
   1ff9c:	f3ef 8611 	mrs	r6, BASEPRI
   1ffa0:	f383 8811 	msr	BASEPRI, r3
   1ffa4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ffa8:	4825      	ldr	r0, [pc, #148]	; (20040 <z_impl_k_mutex_lock+0x19c>)
   1ffaa:	f001 ff83 	bl	21eb4 <z_spin_lock_valid>
   1ffae:	b968      	cbnz	r0, 1ffcc <z_impl_k_mutex_lock+0x128>
   1ffb0:	4a24      	ldr	r2, [pc, #144]	; (20044 <z_impl_k_mutex_lock+0x1a0>)
   1ffb2:	4925      	ldr	r1, [pc, #148]	; (20048 <z_impl_k_mutex_lock+0x1a4>)
   1ffb4:	4825      	ldr	r0, [pc, #148]	; (2004c <z_impl_k_mutex_lock+0x1a8>)
   1ffb6:	234a      	movs	r3, #74	; 0x4a
   1ffb8:	f003 f987 	bl	232ca <printk>
   1ffbc:	4920      	ldr	r1, [pc, #128]	; (20040 <z_impl_k_mutex_lock+0x19c>)
   1ffbe:	4824      	ldr	r0, [pc, #144]	; (20050 <z_impl_k_mutex_lock+0x1ac>)
   1ffc0:	f003 f983 	bl	232ca <printk>
   1ffc4:	481f      	ldr	r0, [pc, #124]	; (20044 <z_impl_k_mutex_lock+0x1a0>)
   1ffc6:	214a      	movs	r1, #74	; 0x4a
   1ffc8:	f003 f9c2 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ffcc:	481c      	ldr	r0, [pc, #112]	; (20040 <z_impl_k_mutex_lock+0x19c>)
   1ffce:	f001 ff8f 	bl	21ef0 <z_spin_lock_set_owner>
	return list->head == list;
   1ffd2:	6823      	ldr	r3, [r4, #0]
   1ffd4:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ffd6:	429c      	cmp	r4, r3
   1ffd8:	d007      	beq.n	1ffea <z_impl_k_mutex_lock+0x146>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1ffda:	b133      	cbz	r3, 1ffea <z_impl_k_mutex_lock+0x146>
   1ffdc:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1ffe0:	4299      	cmp	r1, r3
   1ffe2:	bfa8      	it	ge
   1ffe4:	4619      	movge	r1, r3
   1ffe6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1ffea:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1ffec:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1fff0:	4299      	cmp	r1, r3
   1fff2:	d109      	bne.n	20008 <z_impl_k_mutex_lock+0x164>
	if (resched) {
   1fff4:	b16d      	cbz	r5, 20012 <z_impl_k_mutex_lock+0x16e>
		z_reschedule(&lock, key);
   1fff6:	4812      	ldr	r0, [pc, #72]	; (20040 <z_impl_k_mutex_lock+0x19c>)
   1fff8:	4631      	mov	r1, r6
   1fffa:	f000 fbe1 	bl	207c0 <z_reschedule>
	return -EAGAIN;
   1fffe:	f06f 000a 	mvn.w	r0, #10
   20002:	e7b0      	b.n	1ff66 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   20004:	2500      	movs	r5, #0
   20006:	e7bf      	b.n	1ff88 <z_impl_k_mutex_lock+0xe4>
		return z_set_prio(mutex->owner, new_prio);
   20008:	f001 fa8e 	bl	21528 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2000c:	2800      	cmp	r0, #0
   2000e:	d1f2      	bne.n	1fff6 <z_impl_k_mutex_lock+0x152>
   20010:	e7f0      	b.n	1fff4 <z_impl_k_mutex_lock+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20012:	480b      	ldr	r0, [pc, #44]	; (20040 <z_impl_k_mutex_lock+0x19c>)
   20014:	f001 ff5c 	bl	21ed0 <z_spin_unlock_valid>
   20018:	b968      	cbnz	r0, 20036 <z_impl_k_mutex_lock+0x192>
   2001a:	4a0a      	ldr	r2, [pc, #40]	; (20044 <z_impl_k_mutex_lock+0x1a0>)
   2001c:	490e      	ldr	r1, [pc, #56]	; (20058 <z_impl_k_mutex_lock+0x1b4>)
   2001e:	480b      	ldr	r0, [pc, #44]	; (2004c <z_impl_k_mutex_lock+0x1a8>)
   20020:	235d      	movs	r3, #93	; 0x5d
   20022:	f003 f952 	bl	232ca <printk>
   20026:	4906      	ldr	r1, [pc, #24]	; (20040 <z_impl_k_mutex_lock+0x19c>)
   20028:	480c      	ldr	r0, [pc, #48]	; (2005c <z_impl_k_mutex_lock+0x1b8>)
   2002a:	f003 f94e 	bl	232ca <printk>
   2002e:	4805      	ldr	r0, [pc, #20]	; (20044 <z_impl_k_mutex_lock+0x1a0>)
   20030:	215d      	movs	r1, #93	; 0x5d
   20032:	f003 f98d 	bl	23350 <assert_post_action>
	__asm__ volatile(
   20036:	f386 8811 	msr	BASEPRI, r6
   2003a:	f3bf 8f6f 	isb	sy
   2003e:	e7de      	b.n	1fffe <z_impl_k_mutex_lock+0x15a>
   20040:	20001bc0 	.word	0x20001bc0
   20044:	00029daf 	.word	0x00029daf
   20048:	00029dd1 	.word	0x00029dd1
   2004c:	000297e6 	.word	0x000297e6
   20050:	00029de6 	.word	0x00029de6
   20054:	20001bc4 	.word	0x20001bc4
   20058:	00029dfe 	.word	0x00029dfe
   2005c:	00029e15 	.word	0x00029e15

00020060 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   20060:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   20062:	6883      	ldr	r3, [r0, #8]
{
   20064:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   20066:	2b00      	cmp	r3, #0
   20068:	f000 8092 	beq.w	20190 <z_impl_k_mutex_unlock+0x130>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2006c:	4d4b      	ldr	r5, [pc, #300]	; (2019c <z_impl_k_mutex_unlock+0x13c>)
   2006e:	68aa      	ldr	r2, [r5, #8]
   20070:	4293      	cmp	r3, r2
   20072:	f040 8090 	bne.w	20196 <z_impl_k_mutex_unlock+0x136>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   20076:	68c3      	ldr	r3, [r0, #12]
   20078:	b94b      	cbnz	r3, 2008e <z_impl_k_mutex_unlock+0x2e>
   2007a:	4949      	ldr	r1, [pc, #292]	; (201a0 <z_impl_k_mutex_unlock+0x140>)
   2007c:	4849      	ldr	r0, [pc, #292]	; (201a4 <z_impl_k_mutex_unlock+0x144>)
   2007e:	4a4a      	ldr	r2, [pc, #296]	; (201a8 <z_impl_k_mutex_unlock+0x148>)
   20080:	23e6      	movs	r3, #230	; 0xe6
   20082:	f003 f922 	bl	232ca <printk>
   20086:	4848      	ldr	r0, [pc, #288]	; (201a8 <z_impl_k_mutex_unlock+0x148>)
   20088:	21e6      	movs	r1, #230	; 0xe6
   2008a:	f003 f961 	bl	23350 <assert_post_action>
   2008e:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   20092:	b173      	cbz	r3, 200b2 <z_impl_k_mutex_unlock+0x52>
   20094:	4945      	ldr	r1, [pc, #276]	; (201ac <z_impl_k_mutex_unlock+0x14c>)
   20096:	4a46      	ldr	r2, [pc, #280]	; (201b0 <z_impl_k_mutex_unlock+0x150>)
   20098:	4842      	ldr	r0, [pc, #264]	; (201a4 <z_impl_k_mutex_unlock+0x144>)
   2009a:	f240 130b 	movw	r3, #267	; 0x10b
   2009e:	f003 f914 	bl	232ca <printk>
   200a2:	4844      	ldr	r0, [pc, #272]	; (201b4 <z_impl_k_mutex_unlock+0x154>)
   200a4:	f003 f911 	bl	232ca <printk>
   200a8:	4841      	ldr	r0, [pc, #260]	; (201b0 <z_impl_k_mutex_unlock+0x150>)
   200aa:	f240 110b 	movw	r1, #267	; 0x10b
   200ae:	f003 f94f 	bl	23350 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   200b2:	68ab      	ldr	r3, [r5, #8]
   200b4:	7bdb      	ldrb	r3, [r3, #15]
   200b6:	2b01      	cmp	r3, #1
   200b8:	d10e      	bne.n	200d8 <z_impl_k_mutex_unlock+0x78>
   200ba:	493f      	ldr	r1, [pc, #252]	; (201b8 <z_impl_k_mutex_unlock+0x158>)
   200bc:	4a3c      	ldr	r2, [pc, #240]	; (201b0 <z_impl_k_mutex_unlock+0x150>)
   200be:	4839      	ldr	r0, [pc, #228]	; (201a4 <z_impl_k_mutex_unlock+0x144>)
   200c0:	f44f 7386 	mov.w	r3, #268	; 0x10c
   200c4:	f003 f901 	bl	232ca <printk>
   200c8:	483a      	ldr	r0, [pc, #232]	; (201b4 <z_impl_k_mutex_unlock+0x154>)
   200ca:	f003 f8fe 	bl	232ca <printk>
   200ce:	4838      	ldr	r0, [pc, #224]	; (201b0 <z_impl_k_mutex_unlock+0x150>)
   200d0:	f44f 7186 	mov.w	r1, #268	; 0x10c
   200d4:	f003 f93c 	bl	23350 <assert_post_action>

	--_current->base.sched_locked;
   200d8:	68aa      	ldr	r2, [r5, #8]
   200da:	7bd3      	ldrb	r3, [r2, #15]
   200dc:	3b01      	subs	r3, #1
   200de:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   200e0:	68e3      	ldr	r3, [r4, #12]
   200e2:	2b01      	cmp	r3, #1
   200e4:	d005      	beq.n	200f2 <z_impl_k_mutex_unlock+0x92>
		mutex->lock_count--;
   200e6:	3b01      	subs	r3, #1
   200e8:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   200ea:	f000 fcc5 	bl	20a78 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   200ee:	2000      	movs	r0, #0
}
   200f0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   200f2:	f04f 0320 	mov.w	r3, #32
   200f6:	f3ef 8511 	mrs	r5, BASEPRI
   200fa:	f383 8811 	msr	BASEPRI, r3
   200fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20102:	482e      	ldr	r0, [pc, #184]	; (201bc <z_impl_k_mutex_unlock+0x15c>)
   20104:	f001 fed6 	bl	21eb4 <z_spin_lock_valid>
   20108:	b968      	cbnz	r0, 20126 <z_impl_k_mutex_unlock+0xc6>
   2010a:	4a2d      	ldr	r2, [pc, #180]	; (201c0 <z_impl_k_mutex_unlock+0x160>)
   2010c:	492d      	ldr	r1, [pc, #180]	; (201c4 <z_impl_k_mutex_unlock+0x164>)
   2010e:	4825      	ldr	r0, [pc, #148]	; (201a4 <z_impl_k_mutex_unlock+0x144>)
   20110:	234a      	movs	r3, #74	; 0x4a
   20112:	f003 f8da 	bl	232ca <printk>
   20116:	4929      	ldr	r1, [pc, #164]	; (201bc <z_impl_k_mutex_unlock+0x15c>)
   20118:	482b      	ldr	r0, [pc, #172]	; (201c8 <z_impl_k_mutex_unlock+0x168>)
   2011a:	f003 f8d6 	bl	232ca <printk>
   2011e:	4828      	ldr	r0, [pc, #160]	; (201c0 <z_impl_k_mutex_unlock+0x160>)
   20120:	214a      	movs	r1, #74	; 0x4a
   20122:	f003 f915 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   20126:	4825      	ldr	r0, [pc, #148]	; (201bc <z_impl_k_mutex_unlock+0x15c>)
   20128:	f001 fee2 	bl	21ef0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2012c:	68a0      	ldr	r0, [r4, #8]
   2012e:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   20130:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20134:	4299      	cmp	r1, r3
   20136:	d001      	beq.n	2013c <z_impl_k_mutex_unlock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   20138:	f001 f9f6 	bl	21528 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2013c:	4620      	mov	r0, r4
   2013e:	f001 fa89 	bl	21654 <z_unpend_first_thread>
	mutex->owner = new_owner;
   20142:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   20144:	b160      	cbz	r0, 20160 <z_impl_k_mutex_unlock+0x100>
		mutex->owner_orig_prio = new_owner->base.prio;
   20146:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2014a:	6122      	str	r2, [r4, #16]
   2014c:	2200      	movs	r2, #0
   2014e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
		z_ready_thread(new_owner);
   20152:	f000 fd5b 	bl	20c0c <z_ready_thread>
		z_reschedule(&lock, key);
   20156:	4819      	ldr	r0, [pc, #100]	; (201bc <z_impl_k_mutex_unlock+0x15c>)
   20158:	4629      	mov	r1, r5
   2015a:	f000 fb31 	bl	207c0 <z_reschedule>
   2015e:	e7c4      	b.n	200ea <z_impl_k_mutex_unlock+0x8a>
		mutex->lock_count = 0U;
   20160:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20162:	4816      	ldr	r0, [pc, #88]	; (201bc <z_impl_k_mutex_unlock+0x15c>)
   20164:	f001 feb4 	bl	21ed0 <z_spin_unlock_valid>
   20168:	b968      	cbnz	r0, 20186 <z_impl_k_mutex_unlock+0x126>
   2016a:	4a15      	ldr	r2, [pc, #84]	; (201c0 <z_impl_k_mutex_unlock+0x160>)
   2016c:	4917      	ldr	r1, [pc, #92]	; (201cc <z_impl_k_mutex_unlock+0x16c>)
   2016e:	480d      	ldr	r0, [pc, #52]	; (201a4 <z_impl_k_mutex_unlock+0x144>)
   20170:	235d      	movs	r3, #93	; 0x5d
   20172:	f003 f8aa 	bl	232ca <printk>
   20176:	4911      	ldr	r1, [pc, #68]	; (201bc <z_impl_k_mutex_unlock+0x15c>)
   20178:	4815      	ldr	r0, [pc, #84]	; (201d0 <z_impl_k_mutex_unlock+0x170>)
   2017a:	f003 f8a6 	bl	232ca <printk>
   2017e:	4810      	ldr	r0, [pc, #64]	; (201c0 <z_impl_k_mutex_unlock+0x160>)
   20180:	215d      	movs	r1, #93	; 0x5d
   20182:	f003 f8e5 	bl	23350 <assert_post_action>
	__asm__ volatile(
   20186:	f385 8811 	msr	BASEPRI, r5
   2018a:	f3bf 8f6f 	isb	sy
   2018e:	e7ac      	b.n	200ea <z_impl_k_mutex_unlock+0x8a>
		return -EINVAL;
   20190:	f06f 0015 	mvn.w	r0, #21
   20194:	e7ac      	b.n	200f0 <z_impl_k_mutex_unlock+0x90>
		return -EPERM;
   20196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2019a:	e7a9      	b.n	200f0 <z_impl_k_mutex_unlock+0x90>
   2019c:	20001bc4 	.word	0x20001bc4
   201a0:	0002fcb2 	.word	0x0002fcb2
   201a4:	000297e6 	.word	0x000297e6
   201a8:	0002fc90 	.word	0x0002fc90
   201ac:	0002fcf0 	.word	0x0002fcf0
   201b0:	0002fcc9 	.word	0x0002fcc9
   201b4:	0002f76a 	.word	0x0002f76a
   201b8:	0002fd02 	.word	0x0002fd02
   201bc:	20001bc0 	.word	0x20001bc0
   201c0:	00029daf 	.word	0x00029daf
   201c4:	00029dd1 	.word	0x00029dd1
   201c8:	00029de6 	.word	0x00029de6
   201cc:	00029dfe 	.word	0x00029dfe
   201d0:	00029e15 	.word	0x00029e15

000201d4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   201d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   201d8:	4604      	mov	r4, r0
   201da:	460e      	mov	r6, r1
   201dc:	4690      	mov	r8, r2
   201de:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   201e0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   201e4:	f04f 0320 	mov.w	r3, #32
   201e8:	f3ef 8711 	mrs	r7, BASEPRI
   201ec:	f383 8811 	msr	BASEPRI, r3
   201f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   201f4:	4628      	mov	r0, r5
   201f6:	f001 fe5d 	bl	21eb4 <z_spin_lock_valid>
   201fa:	b968      	cbnz	r0, 20218 <queue_insert+0x44>
   201fc:	4a33      	ldr	r2, [pc, #204]	; (202cc <queue_insert+0xf8>)
   201fe:	4934      	ldr	r1, [pc, #208]	; (202d0 <queue_insert+0xfc>)
   20200:	4834      	ldr	r0, [pc, #208]	; (202d4 <queue_insert+0x100>)
   20202:	234a      	movs	r3, #74	; 0x4a
   20204:	f003 f861 	bl	232ca <printk>
   20208:	4833      	ldr	r0, [pc, #204]	; (202d8 <queue_insert+0x104>)
   2020a:	4629      	mov	r1, r5
   2020c:	f003 f85d 	bl	232ca <printk>
   20210:	482e      	ldr	r0, [pc, #184]	; (202cc <queue_insert+0xf8>)
   20212:	214a      	movs	r1, #74	; 0x4a
   20214:	f003 f89c 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   20218:	4628      	mov	r0, r5
   2021a:	f001 fe69 	bl	21ef0 <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   2021e:	f1b9 0f00 	cmp.w	r9, #0
   20222:	d02d      	beq.n	20280 <queue_insert+0xac>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   20224:	2008      	movs	r0, #8
   20226:	f7ff fe29 	bl	1fe7c <z_thread_malloc>
		if (anode == NULL) {
   2022a:	b9c8      	cbnz	r0, 20260 <queue_insert+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2022c:	4628      	mov	r0, r5
   2022e:	f001 fe4f 	bl	21ed0 <z_spin_unlock_valid>
   20232:	b968      	cbnz	r0, 20250 <queue_insert+0x7c>
   20234:	4a25      	ldr	r2, [pc, #148]	; (202cc <queue_insert+0xf8>)
   20236:	4929      	ldr	r1, [pc, #164]	; (202dc <queue_insert+0x108>)
   20238:	4826      	ldr	r0, [pc, #152]	; (202d4 <queue_insert+0x100>)
   2023a:	235d      	movs	r3, #93	; 0x5d
   2023c:	f003 f845 	bl	232ca <printk>
   20240:	4827      	ldr	r0, [pc, #156]	; (202e0 <queue_insert+0x10c>)
   20242:	4629      	mov	r1, r5
   20244:	f003 f841 	bl	232ca <printk>
   20248:	4820      	ldr	r0, [pc, #128]	; (202cc <queue_insert+0xf8>)
   2024a:	215d      	movs	r1, #93	; 0x5d
   2024c:	f003 f880 	bl	23350 <assert_post_action>
	__asm__ volatile(
   20250:	f387 8811 	msr	BASEPRI, r7
   20254:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   20258:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   2025c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   20260:	2301      	movs	r3, #1
		anode->data = data;
   20262:	f8c0 8004 	str.w	r8, [r0, #4]
   20266:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   20268:	6803      	ldr	r3, [r0, #0]
   2026a:	f003 0203 	and.w	r2, r3, #3
   2026e:	b95e      	cbnz	r6, 20288 <queue_insert+0xb4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20270:	6823      	ldr	r3, [r4, #0]
   20272:	4313      	orrs	r3, r2
   20274:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20276:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   20278:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2027a:	b973      	cbnz	r3, 2029a <queue_insert+0xc6>
	list->tail = node;
   2027c:	6060      	str	r0, [r4, #4]
}
   2027e:	e00c      	b.n	2029a <queue_insert+0xc6>
	node->next_and_flags = flags;
   20280:	f8c8 9000 	str.w	r9, [r8]
}
   20284:	4640      	mov	r0, r8
   20286:	e7ef      	b.n	20268 <queue_insert+0x94>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20288:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2028a:	f033 0303 	bics.w	r3, r3, #3
   2028e:	d115      	bne.n	202bc <queue_insert+0xe8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20290:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   20292:	6862      	ldr	r2, [r4, #4]
   20294:	b962      	cbnz	r2, 202b0 <queue_insert+0xdc>
	list->head = node;
   20296:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2029a:	2104      	movs	r1, #4
   2029c:	f104 000c 	add.w	r0, r4, #12
   202a0:	f008 f9a1 	bl	285e6 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   202a4:	4628      	mov	r0, r5
   202a6:	4639      	mov	r1, r7
   202a8:	f000 fa8a 	bl	207c0 <z_reschedule>
	return 0;
   202ac:	2000      	movs	r0, #0
   202ae:	e7d5      	b.n	2025c <queue_insert+0x88>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   202b0:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   202b2:	f003 0303 	and.w	r3, r3, #3
   202b6:	4303      	orrs	r3, r0
   202b8:	6013      	str	r3, [r2, #0]
   202ba:	e7df      	b.n	2027c <queue_insert+0xa8>
   202bc:	4313      	orrs	r3, r2
   202be:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   202c0:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   202c2:	f003 0303 	and.w	r3, r3, #3
   202c6:	4303      	orrs	r3, r0
   202c8:	6033      	str	r3, [r6, #0]
}
   202ca:	e7e6      	b.n	2029a <queue_insert+0xc6>
   202cc:	00029daf 	.word	0x00029daf
   202d0:	00029dd1 	.word	0x00029dd1
   202d4:	000297e6 	.word	0x000297e6
   202d8:	00029de6 	.word	0x00029de6
   202dc:	00029dfe 	.word	0x00029dfe
   202e0:	00029e15 	.word	0x00029e15

000202e4 <z_impl_k_queue_cancel_wait>:
{
   202e4:	b570      	push	{r4, r5, r6, lr}
   202e6:	4605      	mov	r5, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   202e8:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   202ec:	f04f 0320 	mov.w	r3, #32
   202f0:	f3ef 8611 	mrs	r6, BASEPRI
   202f4:	f383 8811 	msr	BASEPRI, r3
   202f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   202fc:	4620      	mov	r0, r4
   202fe:	f001 fdd9 	bl	21eb4 <z_spin_lock_valid>
   20302:	b968      	cbnz	r0, 20320 <z_impl_k_queue_cancel_wait+0x3c>
   20304:	4a0d      	ldr	r2, [pc, #52]	; (2033c <z_impl_k_queue_cancel_wait+0x58>)
   20306:	490e      	ldr	r1, [pc, #56]	; (20340 <z_impl_k_queue_cancel_wait+0x5c>)
   20308:	480e      	ldr	r0, [pc, #56]	; (20344 <z_impl_k_queue_cancel_wait+0x60>)
   2030a:	234a      	movs	r3, #74	; 0x4a
   2030c:	f002 ffdd 	bl	232ca <printk>
   20310:	480d      	ldr	r0, [pc, #52]	; (20348 <z_impl_k_queue_cancel_wait+0x64>)
   20312:	4621      	mov	r1, r4
   20314:	f002 ffd9 	bl	232ca <printk>
   20318:	4808      	ldr	r0, [pc, #32]	; (2033c <z_impl_k_queue_cancel_wait+0x58>)
   2031a:	214a      	movs	r1, #74	; 0x4a
   2031c:	f003 f818 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   20320:	4620      	mov	r0, r4
   20322:	f001 fde5 	bl	21ef0 <z_spin_lock_set_owner>
	z_handle_obj_poll_events(&queue->poll_events, state);
   20326:	f105 000c 	add.w	r0, r5, #12
   2032a:	2108      	movs	r1, #8
   2032c:	f008 f95b 	bl	285e6 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   20330:	4631      	mov	r1, r6
   20332:	4620      	mov	r0, r4
}
   20334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   20338:	f000 ba42 	b.w	207c0 <z_reschedule>
   2033c:	00029daf 	.word	0x00029daf
   20340:	00029dd1 	.word	0x00029dd1
   20344:	000297e6 	.word	0x000297e6
   20348:	00029de6 	.word	0x00029de6

0002034c <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   2034c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20350:	4604      	mov	r4, r0
   20352:	4617      	mov	r7, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   20354:	460d      	mov	r5, r1
   20356:	2900      	cmp	r1, #0
   20358:	d036      	beq.n	203c8 <k_queue_append_list+0x7c>
   2035a:	2a00      	cmp	r2, #0
   2035c:	d034      	beq.n	203c8 <k_queue_append_list+0x7c>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2035e:	f100 0608 	add.w	r6, r0, #8
   20362:	f04f 0320 	mov.w	r3, #32
   20366:	f3ef 8811 	mrs	r8, BASEPRI
   2036a:	f383 8811 	msr	BASEPRI, r3
   2036e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20372:	4630      	mov	r0, r6
   20374:	f001 fd9e 	bl	21eb4 <z_spin_lock_valid>
   20378:	b968      	cbnz	r0, 20396 <k_queue_append_list+0x4a>
   2037a:	4a15      	ldr	r2, [pc, #84]	; (203d0 <k_queue_append_list+0x84>)
   2037c:	4915      	ldr	r1, [pc, #84]	; (203d4 <k_queue_append_list+0x88>)
   2037e:	4816      	ldr	r0, [pc, #88]	; (203d8 <k_queue_append_list+0x8c>)
   20380:	234a      	movs	r3, #74	; 0x4a
   20382:	f002 ffa2 	bl	232ca <printk>
   20386:	4815      	ldr	r0, [pc, #84]	; (203dc <k_queue_append_list+0x90>)
   20388:	4631      	mov	r1, r6
   2038a:	f002 ff9e 	bl	232ca <printk>
   2038e:	4810      	ldr	r0, [pc, #64]	; (203d0 <k_queue_append_list+0x84>)
   20390:	214a      	movs	r1, #74	; 0x4a
   20392:	f002 ffdd 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   20396:	4630      	mov	r0, r6
   20398:	f001 fdaa 	bl	21ef0 <z_spin_lock_set_owner>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2039c:	6863      	ldr	r3, [r4, #4]
   2039e:	b96b      	cbnz	r3, 203bc <k_queue_append_list+0x70>
	list->head = node;
   203a0:	6025      	str	r5, [r4, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   203a2:	2104      	movs	r1, #4
   203a4:	f104 000c 	add.w	r0, r4, #12
	list->tail = node;
   203a8:	6067      	str	r7, [r4, #4]
   203aa:	f008 f91c 	bl	285e6 <z_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	z_reschedule(&queue->lock, key);
   203ae:	4630      	mov	r0, r6
   203b0:	4641      	mov	r1, r8
   203b2:	f000 fa05 	bl	207c0 <z_reschedule>

	return 0;
   203b6:	2000      	movs	r0, #0
}
   203b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   203bc:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   203be:	f001 0103 	and.w	r1, r1, #3
   203c2:	430d      	orrs	r5, r1
   203c4:	601d      	str	r5, [r3, #0]
}
   203c6:	e7ec      	b.n	203a2 <k_queue_append_list+0x56>
		return -EINVAL;
   203c8:	f06f 0015 	mvn.w	r0, #21
   203cc:	e7f4      	b.n	203b8 <k_queue_append_list+0x6c>
   203ce:	bf00      	nop
   203d0:	00029daf 	.word	0x00029daf
   203d4:	00029dd1 	.word	0x00029dd1
   203d8:	000297e6 	.word	0x000297e6
   203dc:	00029de6 	.word	0x00029de6

000203e0 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   203e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   203e4:	4605      	mov	r5, r0
   203e6:	b086      	sub	sp, #24
   203e8:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   203ea:	f100 0408 	add.w	r4, r0, #8
   203ee:	f04f 0320 	mov.w	r3, #32
   203f2:	f3ef 8811 	mrs	r8, BASEPRI
   203f6:	f383 8811 	msr	BASEPRI, r3
   203fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   203fe:	4620      	mov	r0, r4
   20400:	f001 fd58 	bl	21eb4 <z_spin_lock_valid>
   20404:	b968      	cbnz	r0, 20422 <z_impl_k_queue_get+0x42>
   20406:	4a53      	ldr	r2, [pc, #332]	; (20554 <z_impl_k_queue_get+0x174>)
   20408:	4953      	ldr	r1, [pc, #332]	; (20558 <z_impl_k_queue_get+0x178>)
   2040a:	4854      	ldr	r0, [pc, #336]	; (2055c <z_impl_k_queue_get+0x17c>)
   2040c:	234a      	movs	r3, #74	; 0x4a
   2040e:	f002 ff5c 	bl	232ca <printk>
   20412:	4853      	ldr	r0, [pc, #332]	; (20560 <z_impl_k_queue_get+0x180>)
   20414:	4621      	mov	r1, r4
   20416:	f002 ff58 	bl	232ca <printk>
   2041a:	484e      	ldr	r0, [pc, #312]	; (20554 <z_impl_k_queue_get+0x174>)
   2041c:	214a      	movs	r1, #74	; 0x4a
   2041e:	f002 ff97 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   20422:	4620      	mov	r0, r4
   20424:	f001 fd64 	bl	21ef0 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   20428:	682e      	ldr	r6, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2042a:	b336      	cbz	r6, 2047a <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2042c:	6833      	ldr	r3, [r6, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2042e:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20430:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20434:	4296      	cmp	r6, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   20436:	4630      	mov	r0, r6
	list->head = node;
   20438:	602b      	str	r3, [r5, #0]
	list->tail = node;
   2043a:	bf08      	it	eq
   2043c:	606b      	streq	r3, [r5, #4]
   2043e:	2101      	movs	r1, #1
   20440:	f007 ff39 	bl	282b6 <z_queue_node_peek>
   20444:	4606      	mov	r6, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20446:	4620      	mov	r0, r4
   20448:	f001 fd42 	bl	21ed0 <z_spin_unlock_valid>
   2044c:	b968      	cbnz	r0, 2046a <z_impl_k_queue_get+0x8a>
   2044e:	4a41      	ldr	r2, [pc, #260]	; (20554 <z_impl_k_queue_get+0x174>)
   20450:	4944      	ldr	r1, [pc, #272]	; (20564 <z_impl_k_queue_get+0x184>)
   20452:	4842      	ldr	r0, [pc, #264]	; (2055c <z_impl_k_queue_get+0x17c>)
   20454:	235d      	movs	r3, #93	; 0x5d
   20456:	f002 ff38 	bl	232ca <printk>
   2045a:	4843      	ldr	r0, [pc, #268]	; (20568 <z_impl_k_queue_get+0x188>)
   2045c:	4621      	mov	r1, r4
   2045e:	f002 ff34 	bl	232ca <printk>
   20462:	483c      	ldr	r0, [pc, #240]	; (20554 <z_impl_k_queue_get+0x174>)
   20464:	215d      	movs	r1, #93	; 0x5d
   20466:	f002 ff73 	bl	23350 <assert_post_action>
	__asm__ volatile(
   2046a:	f388 8811 	msr	BASEPRI, r8
   2046e:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   20472:	4630      	mov	r0, r6
   20474:	b006      	add	sp, #24
   20476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2047a:	4620      	mov	r0, r4
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2047c:	2f00      	cmp	r7, #0
   2047e:	d0e3      	beq.n	20448 <z_impl_k_queue_get+0x68>
   20480:	f001 fd26 	bl	21ed0 <z_spin_unlock_valid>
   20484:	b968      	cbnz	r0, 204a2 <z_impl_k_queue_get+0xc2>
   20486:	4a33      	ldr	r2, [pc, #204]	; (20554 <z_impl_k_queue_get+0x174>)
   20488:	4936      	ldr	r1, [pc, #216]	; (20564 <z_impl_k_queue_get+0x184>)
   2048a:	4834      	ldr	r0, [pc, #208]	; (2055c <z_impl_k_queue_get+0x17c>)
   2048c:	235d      	movs	r3, #93	; 0x5d
   2048e:	f002 ff1c 	bl	232ca <printk>
   20492:	4835      	ldr	r0, [pc, #212]	; (20568 <z_impl_k_queue_get+0x188>)
   20494:	4621      	mov	r1, r4
   20496:	f002 ff18 	bl	232ca <printk>
   2049a:	482e      	ldr	r0, [pc, #184]	; (20554 <z_impl_k_queue_get+0x174>)
   2049c:	215d      	movs	r1, #93	; 0x5d
   2049e:	f002 ff57 	bl	23350 <assert_post_action>
   204a2:	f388 8811 	msr	BASEPRI, r8
   204a6:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   204aa:	2104      	movs	r1, #4
   204ac:	462b      	mov	r3, r5
   204ae:	2200      	movs	r2, #0
   204b0:	eb0d 0001 	add.w	r0, sp, r1
   204b4:	f002 fb98 	bl	22be8 <k_poll_event_init>
	event.state = K_POLL_STATE_NOT_READY;
   204b8:	9b04      	ldr	r3, [sp, #16]
   204ba:	f36f 3310 	bfc	r3, #12, #5
   204be:	9304      	str	r3, [sp, #16]
	return z_impl_k_poll(events, num_events, timeout);
   204c0:	2101      	movs	r1, #1
   204c2:	463a      	mov	r2, r7
   204c4:	a801      	add	r0, sp, #4
   204c6:	f002 fbdd 	bl	22c84 <z_impl_k_poll>
	if (err && err != -EAGAIN) {
   204ca:	b108      	cbz	r0, 204d0 <z_impl_k_queue_get+0xf0>
   204cc:	300b      	adds	r0, #11
   204ce:	d1d0      	bne.n	20472 <z_impl_k_queue_get+0x92>
	__asm__ volatile(
   204d0:	f04f 0320 	mov.w	r3, #32
   204d4:	f3ef 8711 	mrs	r7, BASEPRI
   204d8:	f383 8811 	msr	BASEPRI, r3
   204dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   204e0:	4620      	mov	r0, r4
   204e2:	f001 fce7 	bl	21eb4 <z_spin_lock_valid>
   204e6:	b968      	cbnz	r0, 20504 <z_impl_k_queue_get+0x124>
   204e8:	4a1a      	ldr	r2, [pc, #104]	; (20554 <z_impl_k_queue_get+0x174>)
   204ea:	491b      	ldr	r1, [pc, #108]	; (20558 <z_impl_k_queue_get+0x178>)
   204ec:	481b      	ldr	r0, [pc, #108]	; (2055c <z_impl_k_queue_get+0x17c>)
   204ee:	234a      	movs	r3, #74	; 0x4a
   204f0:	f002 feeb 	bl	232ca <printk>
   204f4:	481a      	ldr	r0, [pc, #104]	; (20560 <z_impl_k_queue_get+0x180>)
   204f6:	4621      	mov	r1, r4
   204f8:	f002 fee7 	bl	232ca <printk>
   204fc:	4815      	ldr	r0, [pc, #84]	; (20554 <z_impl_k_queue_get+0x174>)
   204fe:	214a      	movs	r1, #74	; 0x4a
   20500:	f002 ff26 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   20504:	4620      	mov	r0, r4
   20506:	f001 fcf3 	bl	21ef0 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   2050a:	6828      	ldr	r0, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   2050c:	b138      	cbz	r0, 2051e <z_impl_k_queue_get+0x13e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2050e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20510:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20512:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20516:	4290      	cmp	r0, r2
	list->head = node;
   20518:	602b      	str	r3, [r5, #0]
	list->tail = node;
   2051a:	bf08      	it	eq
   2051c:	606b      	streq	r3, [r5, #4]
	val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   2051e:	2101      	movs	r1, #1
   20520:	f007 fec9 	bl	282b6 <z_queue_node_peek>
   20524:	4606      	mov	r6, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20526:	4620      	mov	r0, r4
   20528:	f001 fcd2 	bl	21ed0 <z_spin_unlock_valid>
   2052c:	b968      	cbnz	r0, 2054a <z_impl_k_queue_get+0x16a>
   2052e:	4a09      	ldr	r2, [pc, #36]	; (20554 <z_impl_k_queue_get+0x174>)
   20530:	490c      	ldr	r1, [pc, #48]	; (20564 <z_impl_k_queue_get+0x184>)
   20532:	480a      	ldr	r0, [pc, #40]	; (2055c <z_impl_k_queue_get+0x17c>)
   20534:	235d      	movs	r3, #93	; 0x5d
   20536:	f002 fec8 	bl	232ca <printk>
   2053a:	480b      	ldr	r0, [pc, #44]	; (20568 <z_impl_k_queue_get+0x188>)
   2053c:	4621      	mov	r1, r4
   2053e:	f002 fec4 	bl	232ca <printk>
   20542:	4804      	ldr	r0, [pc, #16]	; (20554 <z_impl_k_queue_get+0x174>)
   20544:	215d      	movs	r1, #93	; 0x5d
   20546:	f002 ff03 	bl	23350 <assert_post_action>
	__asm__ volatile(
   2054a:	f387 8811 	msr	BASEPRI, r7
   2054e:	f3bf 8f6f 	isb	sy
	return k_queue_poll(queue, timeout);
   20552:	e78e      	b.n	20472 <z_impl_k_queue_get+0x92>
   20554:	00029daf 	.word	0x00029daf
   20558:	00029dd1 	.word	0x00029dd1
   2055c:	000297e6 	.word	0x000297e6
   20560:	00029de6 	.word	0x00029de6
   20564:	00029dfe 	.word	0x00029dfe
   20568:	00029e15 	.word	0x00029e15

0002056c <pended_on.isra.0>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   2056c:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   2056e:	b510      	push	{r4, lr}
   20570:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   20572:	b95b      	cbnz	r3, 2058c <pended_on.isra.0+0x20>
   20574:	4906      	ldr	r1, [pc, #24]	; (20590 <pended_on.isra.0+0x24>)
   20576:	4807      	ldr	r0, [pc, #28]	; (20594 <pended_on.isra.0+0x28>)
   20578:	4a07      	ldr	r2, [pc, #28]	; (20598 <pended_on.isra.0+0x2c>)
   2057a:	f240 13d9 	movw	r3, #473	; 0x1d9
   2057e:	f002 fea4 	bl	232ca <printk>
   20582:	4805      	ldr	r0, [pc, #20]	; (20598 <pended_on.isra.0+0x2c>)
   20584:	f240 11d9 	movw	r1, #473	; 0x1d9
   20588:	f002 fee2 	bl	23350 <assert_post_action>

	return thread->base.pended_on;
}
   2058c:	6820      	ldr	r0, [r4, #0]
   2058e:	bd10      	pop	{r4, pc}
   20590:	0002fd4c 	.word	0x0002fd4c
   20594:	000297e6 	.word	0x000297e6
   20598:	0002fd2a 	.word	0x0002fd2a

0002059c <z_reset_time_slice>:
{
   2059c:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   2059e:	4c08      	ldr	r4, [pc, #32]	; (205c0 <z_reset_time_slice+0x24>)
   205a0:	6823      	ldr	r3, [r4, #0]
   205a2:	b15b      	cbz	r3, 205bc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   205a4:	f7e3 fd76 	bl	4094 <z_clock_elapsed>
   205a8:	4603      	mov	r3, r0
   205aa:	6820      	ldr	r0, [r4, #0]
   205ac:	4a05      	ldr	r2, [pc, #20]	; (205c4 <z_reset_time_slice+0x28>)
   205ae:	4403      	add	r3, r0
}
   205b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   205b4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   205b6:	2100      	movs	r1, #0
   205b8:	f001 bf84 	b.w	224c4 <z_set_timeout_expiry>
}
   205bc:	bd10      	pop	{r4, pc}
   205be:	bf00      	nop
   205c0:	20001c00 	.word	0x20001c00
   205c4:	20001bc4 	.word	0x20001bc4

000205c8 <k_sched_time_slice_set>:
{
   205c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   205ca:	4605      	mov	r5, r0
   205cc:	460c      	mov	r4, r1
	__asm__ volatile(
   205ce:	f04f 0320 	mov.w	r3, #32
   205d2:	f3ef 8611 	mrs	r6, BASEPRI
   205d6:	f383 8811 	msr	BASEPRI, r3
   205da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   205de:	4820      	ldr	r0, [pc, #128]	; (20660 <k_sched_time_slice_set+0x98>)
   205e0:	f001 fc68 	bl	21eb4 <z_spin_lock_valid>
   205e4:	b968      	cbnz	r0, 20602 <k_sched_time_slice_set+0x3a>
   205e6:	4a1f      	ldr	r2, [pc, #124]	; (20664 <k_sched_time_slice_set+0x9c>)
   205e8:	491f      	ldr	r1, [pc, #124]	; (20668 <k_sched_time_slice_set+0xa0>)
   205ea:	4820      	ldr	r0, [pc, #128]	; (2066c <k_sched_time_slice_set+0xa4>)
   205ec:	234a      	movs	r3, #74	; 0x4a
   205ee:	f002 fe6c 	bl	232ca <printk>
   205f2:	491b      	ldr	r1, [pc, #108]	; (20660 <k_sched_time_slice_set+0x98>)
   205f4:	481e      	ldr	r0, [pc, #120]	; (20670 <k_sched_time_slice_set+0xa8>)
   205f6:	f002 fe68 	bl	232ca <printk>
   205fa:	481a      	ldr	r0, [pc, #104]	; (20664 <k_sched_time_slice_set+0x9c>)
   205fc:	214a      	movs	r1, #74	; 0x4a
   205fe:	f002 fea7 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   20602:	4817      	ldr	r0, [pc, #92]	; (20660 <k_sched_time_slice_set+0x98>)
   20604:	f001 fc74 	bl	21ef0 <z_spin_lock_set_owner>
		_current_cpu->slice_ticks = 0;
   20608:	4b1a      	ldr	r3, [pc, #104]	; (20674 <k_sched_time_slice_set+0xac>)
   2060a:	2200      	movs	r2, #0
   2060c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   20610:	f240 30e7 	movw	r0, #999	; 0x3e7
   20614:	2100      	movs	r1, #0
   20616:	611a      	str	r2, [r3, #16]
   20618:	fbe7 0105 	umlal	r0, r1, r7, r5
   2061c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20620:	2300      	movs	r3, #0
   20622:	f7df fdad 	bl	180 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   20626:	4b14      	ldr	r3, [pc, #80]	; (20678 <k_sched_time_slice_set+0xb0>)
   20628:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   2062a:	4b14      	ldr	r3, [pc, #80]	; (2067c <k_sched_time_slice_set+0xb4>)
   2062c:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   2062e:	f7ff ffb5 	bl	2059c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20632:	480b      	ldr	r0, [pc, #44]	; (20660 <k_sched_time_slice_set+0x98>)
   20634:	f001 fc4c 	bl	21ed0 <z_spin_unlock_valid>
   20638:	b968      	cbnz	r0, 20656 <k_sched_time_slice_set+0x8e>
   2063a:	4a0a      	ldr	r2, [pc, #40]	; (20664 <k_sched_time_slice_set+0x9c>)
   2063c:	4910      	ldr	r1, [pc, #64]	; (20680 <k_sched_time_slice_set+0xb8>)
   2063e:	480b      	ldr	r0, [pc, #44]	; (2066c <k_sched_time_slice_set+0xa4>)
   20640:	235d      	movs	r3, #93	; 0x5d
   20642:	f002 fe42 	bl	232ca <printk>
   20646:	4906      	ldr	r1, [pc, #24]	; (20660 <k_sched_time_slice_set+0x98>)
   20648:	480e      	ldr	r0, [pc, #56]	; (20684 <k_sched_time_slice_set+0xbc>)
   2064a:	f002 fe3e 	bl	232ca <printk>
   2064e:	4805      	ldr	r0, [pc, #20]	; (20664 <k_sched_time_slice_set+0x9c>)
   20650:	215d      	movs	r1, #93	; 0x5d
   20652:	f002 fe7d 	bl	23350 <assert_post_action>
	__asm__ volatile(
   20656:	f386 8811 	msr	BASEPRI, r6
   2065a:	f3bf 8f6f 	isb	sy
}
   2065e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20660:	20001bf8 	.word	0x20001bf8
   20664:	00029daf 	.word	0x00029daf
   20668:	00029dd1 	.word	0x00029dd1
   2066c:	000297e6 	.word	0x000297e6
   20670:	00029de6 	.word	0x00029de6
   20674:	20001bc4 	.word	0x20001bc4
   20678:	20001c00 	.word	0x20001c00
   2067c:	20001bfc 	.word	0x20001bfc
   20680:	00029dfe 	.word	0x00029dfe
   20684:	00029e15 	.word	0x00029e15

00020688 <z_find_first_thread_to_unpend>:
	pend(thread, wait_q, timeout);
}

ALWAYS_INLINE struct k_thread *z_find_first_thread_to_unpend(_wait_q_t *wait_q,
						     struct k_thread *from)
{
   20688:	b538      	push	{r3, r4, r5, lr}
   2068a:	4604      	mov	r4, r0
	__asm__ volatile(
   2068c:	f04f 0320 	mov.w	r3, #32
   20690:	f3ef 8511 	mrs	r5, BASEPRI
   20694:	f383 8811 	msr	BASEPRI, r3
   20698:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2069c:	4818      	ldr	r0, [pc, #96]	; (20700 <z_find_first_thread_to_unpend+0x78>)
   2069e:	f001 fc09 	bl	21eb4 <z_spin_lock_valid>
   206a2:	b968      	cbnz	r0, 206c0 <z_find_first_thread_to_unpend+0x38>
   206a4:	4a17      	ldr	r2, [pc, #92]	; (20704 <z_find_first_thread_to_unpend+0x7c>)
   206a6:	4918      	ldr	r1, [pc, #96]	; (20708 <z_find_first_thread_to_unpend+0x80>)
   206a8:	4818      	ldr	r0, [pc, #96]	; (2070c <z_find_first_thread_to_unpend+0x84>)
   206aa:	234a      	movs	r3, #74	; 0x4a
   206ac:	f002 fe0d 	bl	232ca <printk>
   206b0:	4913      	ldr	r1, [pc, #76]	; (20700 <z_find_first_thread_to_unpend+0x78>)
   206b2:	4817      	ldr	r0, [pc, #92]	; (20710 <z_find_first_thread_to_unpend+0x88>)
   206b4:	f002 fe09 	bl	232ca <printk>
   206b8:	4812      	ldr	r0, [pc, #72]	; (20704 <z_find_first_thread_to_unpend+0x7c>)
   206ba:	214a      	movs	r1, #74	; 0x4a
   206bc:	f002 fe48 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   206c0:	480f      	ldr	r0, [pc, #60]	; (20700 <z_find_first_thread_to_unpend+0x78>)
   206c2:	f001 fc15 	bl	21ef0 <z_spin_lock_set_owner>
	ARG_UNUSED(from);

	struct k_thread *ret = NULL;

	LOCKED(&sched_spinlock) {
		ret = _priq_wait_best(&wait_q->waitq);
   206c6:	4620      	mov	r0, r4
   206c8:	f007 fe33 	bl	28332 <z_priq_dumb_best>
   206cc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   206ce:	480c      	ldr	r0, [pc, #48]	; (20700 <z_find_first_thread_to_unpend+0x78>)
   206d0:	f001 fbfe 	bl	21ed0 <z_spin_unlock_valid>
   206d4:	b968      	cbnz	r0, 206f2 <z_find_first_thread_to_unpend+0x6a>
   206d6:	4a0b      	ldr	r2, [pc, #44]	; (20704 <z_find_first_thread_to_unpend+0x7c>)
   206d8:	490e      	ldr	r1, [pc, #56]	; (20714 <z_find_first_thread_to_unpend+0x8c>)
   206da:	480c      	ldr	r0, [pc, #48]	; (2070c <z_find_first_thread_to_unpend+0x84>)
   206dc:	235d      	movs	r3, #93	; 0x5d
   206de:	f002 fdf4 	bl	232ca <printk>
   206e2:	4907      	ldr	r1, [pc, #28]	; (20700 <z_find_first_thread_to_unpend+0x78>)
   206e4:	480c      	ldr	r0, [pc, #48]	; (20718 <z_find_first_thread_to_unpend+0x90>)
   206e6:	f002 fdf0 	bl	232ca <printk>
   206ea:	4806      	ldr	r0, [pc, #24]	; (20704 <z_find_first_thread_to_unpend+0x7c>)
   206ec:	215d      	movs	r1, #93	; 0x5d
   206ee:	f002 fe2f 	bl	23350 <assert_post_action>
	__asm__ volatile(
   206f2:	f385 8811 	msr	BASEPRI, r5
   206f6:	f3bf 8f6f 	isb	sy
	}

	return ret;
}
   206fa:	4620      	mov	r0, r4
   206fc:	bd38      	pop	{r3, r4, r5, pc}
   206fe:	bf00      	nop
   20700:	20001bf8 	.word	0x20001bf8
   20704:	00029daf 	.word	0x00029daf
   20708:	00029dd1 	.word	0x00029dd1
   2070c:	000297e6 	.word	0x000297e6
   20710:	00029de6 	.word	0x00029de6
   20714:	00029dfe 	.word	0x00029dfe
   20718:	00029e15 	.word	0x00029e15

0002071c <z_unpend_thread_no_timeout>:

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   2071c:	b538      	push	{r3, r4, r5, lr}
   2071e:	4604      	mov	r4, r0
	__asm__ volatile(
   20720:	f04f 0320 	mov.w	r3, #32
   20724:	f3ef 8511 	mrs	r5, BASEPRI
   20728:	f383 8811 	msr	BASEPRI, r3
   2072c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20730:	481c      	ldr	r0, [pc, #112]	; (207a4 <z_unpend_thread_no_timeout+0x88>)
   20732:	f001 fbbf 	bl	21eb4 <z_spin_lock_valid>
   20736:	b968      	cbnz	r0, 20754 <z_unpend_thread_no_timeout+0x38>
   20738:	4a1b      	ldr	r2, [pc, #108]	; (207a8 <z_unpend_thread_no_timeout+0x8c>)
   2073a:	491c      	ldr	r1, [pc, #112]	; (207ac <z_unpend_thread_no_timeout+0x90>)
   2073c:	481c      	ldr	r0, [pc, #112]	; (207b0 <z_unpend_thread_no_timeout+0x94>)
   2073e:	234a      	movs	r3, #74	; 0x4a
   20740:	f002 fdc3 	bl	232ca <printk>
   20744:	4917      	ldr	r1, [pc, #92]	; (207a4 <z_unpend_thread_no_timeout+0x88>)
   20746:	481b      	ldr	r0, [pc, #108]	; (207b4 <z_unpend_thread_no_timeout+0x98>)
   20748:	f002 fdbf 	bl	232ca <printk>
   2074c:	4816      	ldr	r0, [pc, #88]	; (207a8 <z_unpend_thread_no_timeout+0x8c>)
   2074e:	214a      	movs	r1, #74	; 0x4a
   20750:	f002 fdfe 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   20754:	4813      	ldr	r0, [pc, #76]	; (207a4 <z_unpend_thread_no_timeout+0x88>)
   20756:	f001 fbcb 	bl	21ef0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2075a:	f104 0008 	add.w	r0, r4, #8
   2075e:	f7ff ff05 	bl	2056c <pended_on.isra.0>
   20762:	4621      	mov	r1, r4
   20764:	f000 f8e0 	bl	20928 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20768:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2076a:	480e      	ldr	r0, [pc, #56]	; (207a4 <z_unpend_thread_no_timeout+0x88>)
   2076c:	f023 0302 	bic.w	r3, r3, #2
   20770:	7363      	strb	r3, [r4, #13]
		z_mark_thread_as_not_pending(thread);
		thread->base.pended_on = NULL;
   20772:	2300      	movs	r3, #0
   20774:	60a3      	str	r3, [r4, #8]
   20776:	f001 fbab 	bl	21ed0 <z_spin_unlock_valid>
   2077a:	b968      	cbnz	r0, 20798 <z_unpend_thread_no_timeout+0x7c>
   2077c:	4a0a      	ldr	r2, [pc, #40]	; (207a8 <z_unpend_thread_no_timeout+0x8c>)
   2077e:	490e      	ldr	r1, [pc, #56]	; (207b8 <z_unpend_thread_no_timeout+0x9c>)
   20780:	480b      	ldr	r0, [pc, #44]	; (207b0 <z_unpend_thread_no_timeout+0x94>)
   20782:	235d      	movs	r3, #93	; 0x5d
   20784:	f002 fda1 	bl	232ca <printk>
   20788:	4906      	ldr	r1, [pc, #24]	; (207a4 <z_unpend_thread_no_timeout+0x88>)
   2078a:	480c      	ldr	r0, [pc, #48]	; (207bc <z_unpend_thread_no_timeout+0xa0>)
   2078c:	f002 fd9d 	bl	232ca <printk>
   20790:	4805      	ldr	r0, [pc, #20]	; (207a8 <z_unpend_thread_no_timeout+0x8c>)
   20792:	215d      	movs	r1, #93	; 0x5d
   20794:	f002 fddc 	bl	23350 <assert_post_action>
	__asm__ volatile(
   20798:	f385 8811 	msr	BASEPRI, r5
   2079c:	f3bf 8f6f 	isb	sy
	}
}
   207a0:	bd38      	pop	{r3, r4, r5, pc}
   207a2:	bf00      	nop
   207a4:	20001bf8 	.word	0x20001bf8
   207a8:	00029daf 	.word	0x00029daf
   207ac:	00029dd1 	.word	0x00029dd1
   207b0:	000297e6 	.word	0x000297e6
   207b4:	00029de6 	.word	0x00029de6
   207b8:	00029dfe 	.word	0x00029dfe
   207bc:	00029e15 	.word	0x00029e15

000207c0 <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   207c0:	b538      	push	{r3, r4, r5, lr}
   207c2:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   207c4:	460d      	mov	r5, r1
   207c6:	b9c1      	cbnz	r1, 207fa <z_reschedule+0x3a>
   207c8:	f3ef 8305 	mrs	r3, IPSR
   207cc:	b9ab      	cbnz	r3, 207fa <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   207ce:	f001 fb7f 	bl	21ed0 <z_spin_unlock_valid>
   207d2:	b968      	cbnz	r0, 207f0 <z_reschedule+0x30>
   207d4:	4a14      	ldr	r2, [pc, #80]	; (20828 <z_reschedule+0x68>)
   207d6:	4915      	ldr	r1, [pc, #84]	; (2082c <z_reschedule+0x6c>)
   207d8:	4815      	ldr	r0, [pc, #84]	; (20830 <z_reschedule+0x70>)
   207da:	2374      	movs	r3, #116	; 0x74
   207dc:	f002 fd75 	bl	232ca <printk>
   207e0:	4814      	ldr	r0, [pc, #80]	; (20834 <z_reschedule+0x74>)
   207e2:	4621      	mov	r1, r4
   207e4:	f002 fd71 	bl	232ca <printk>
   207e8:	480f      	ldr	r0, [pc, #60]	; (20828 <z_reschedule+0x68>)
   207ea:	2174      	movs	r1, #116	; 0x74
   207ec:	f002 fdb0 	bl	23350 <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   207f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   207f4:	2000      	movs	r0, #0
   207f6:	f7e3 bf15 	b.w	4624 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   207fa:	4620      	mov	r0, r4
   207fc:	f001 fb68 	bl	21ed0 <z_spin_unlock_valid>
   20800:	b968      	cbnz	r0, 2081e <z_reschedule+0x5e>
   20802:	4a09      	ldr	r2, [pc, #36]	; (20828 <z_reschedule+0x68>)
   20804:	4909      	ldr	r1, [pc, #36]	; (2082c <z_reschedule+0x6c>)
   20806:	480a      	ldr	r0, [pc, #40]	; (20830 <z_reschedule+0x70>)
   20808:	235d      	movs	r3, #93	; 0x5d
   2080a:	f002 fd5e 	bl	232ca <printk>
   2080e:	4809      	ldr	r0, [pc, #36]	; (20834 <z_reschedule+0x74>)
   20810:	4621      	mov	r1, r4
   20812:	f002 fd5a 	bl	232ca <printk>
   20816:	4804      	ldr	r0, [pc, #16]	; (20828 <z_reschedule+0x68>)
   20818:	215d      	movs	r1, #93	; 0x5d
   2081a:	f002 fd99 	bl	23350 <assert_post_action>
   2081e:	f385 8811 	msr	BASEPRI, r5
   20822:	f3bf 8f6f 	isb	sy
   20826:	bd38      	pop	{r3, r4, r5, pc}
   20828:	00029daf 	.word	0x00029daf
   2082c:	00029dfe 	.word	0x00029dfe
   20830:	000297e6 	.word	0x000297e6
   20834:	00029e15 	.word	0x00029e15

00020838 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   20838:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2083a:	f04f 0320 	mov.w	r3, #32
   2083e:	f3ef 8511 	mrs	r5, BASEPRI
   20842:	f383 8811 	msr	BASEPRI, r3
   20846:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2084a:	482b      	ldr	r0, [pc, #172]	; (208f8 <k_sched_lock+0xc0>)
   2084c:	f001 fb32 	bl	21eb4 <z_spin_lock_valid>
   20850:	b968      	cbnz	r0, 2086e <k_sched_lock+0x36>
   20852:	4a2a      	ldr	r2, [pc, #168]	; (208fc <k_sched_lock+0xc4>)
   20854:	492a      	ldr	r1, [pc, #168]	; (20900 <k_sched_lock+0xc8>)
   20856:	482b      	ldr	r0, [pc, #172]	; (20904 <k_sched_lock+0xcc>)
   20858:	234a      	movs	r3, #74	; 0x4a
   2085a:	f002 fd36 	bl	232ca <printk>
   2085e:	4926      	ldr	r1, [pc, #152]	; (208f8 <k_sched_lock+0xc0>)
   20860:	4829      	ldr	r0, [pc, #164]	; (20908 <k_sched_lock+0xd0>)
   20862:	f002 fd32 	bl	232ca <printk>
   20866:	4825      	ldr	r0, [pc, #148]	; (208fc <k_sched_lock+0xc4>)
   20868:	214a      	movs	r1, #74	; 0x4a
   2086a:	f002 fd71 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   2086e:	4822      	ldr	r0, [pc, #136]	; (208f8 <k_sched_lock+0xc0>)
   20870:	f001 fb3e 	bl	21ef0 <z_spin_lock_set_owner>
   20874:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   20878:	b173      	cbz	r3, 20898 <k_sched_lock+0x60>
   2087a:	4924      	ldr	r1, [pc, #144]	; (2090c <k_sched_lock+0xd4>)
   2087c:	4a24      	ldr	r2, [pc, #144]	; (20910 <k_sched_lock+0xd8>)
   2087e:	4821      	ldr	r0, [pc, #132]	; (20904 <k_sched_lock+0xcc>)
   20880:	f240 130b 	movw	r3, #267	; 0x10b
   20884:	f002 fd21 	bl	232ca <printk>
   20888:	4822      	ldr	r0, [pc, #136]	; (20914 <k_sched_lock+0xdc>)
   2088a:	f002 fd1e 	bl	232ca <printk>
   2088e:	4820      	ldr	r0, [pc, #128]	; (20910 <k_sched_lock+0xd8>)
   20890:	f240 110b 	movw	r1, #267	; 0x10b
   20894:	f002 fd5c 	bl	23350 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   20898:	4c1f      	ldr	r4, [pc, #124]	; (20918 <k_sched_lock+0xe0>)
   2089a:	68a2      	ldr	r2, [r4, #8]
   2089c:	7bd2      	ldrb	r2, [r2, #15]
   2089e:	2a01      	cmp	r2, #1
   208a0:	d10e      	bne.n	208c0 <k_sched_lock+0x88>
   208a2:	491e      	ldr	r1, [pc, #120]	; (2091c <k_sched_lock+0xe4>)
   208a4:	4a1a      	ldr	r2, [pc, #104]	; (20910 <k_sched_lock+0xd8>)
   208a6:	4817      	ldr	r0, [pc, #92]	; (20904 <k_sched_lock+0xcc>)
   208a8:	f44f 7386 	mov.w	r3, #268	; 0x10c
   208ac:	f002 fd0d 	bl	232ca <printk>
   208b0:	4818      	ldr	r0, [pc, #96]	; (20914 <k_sched_lock+0xdc>)
   208b2:	f002 fd0a 	bl	232ca <printk>
   208b6:	4816      	ldr	r0, [pc, #88]	; (20910 <k_sched_lock+0xd8>)
   208b8:	f44f 7186 	mov.w	r1, #268	; 0x10c
   208bc:	f002 fd48 	bl	23350 <assert_post_action>
	--_current->base.sched_locked;
   208c0:	68a2      	ldr	r2, [r4, #8]
   208c2:	7bd3      	ldrb	r3, [r2, #15]
   208c4:	3b01      	subs	r3, #1
   208c6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   208c8:	480b      	ldr	r0, [pc, #44]	; (208f8 <k_sched_lock+0xc0>)
   208ca:	f001 fb01 	bl	21ed0 <z_spin_unlock_valid>
   208ce:	b968      	cbnz	r0, 208ec <k_sched_lock+0xb4>
   208d0:	4a0a      	ldr	r2, [pc, #40]	; (208fc <k_sched_lock+0xc4>)
   208d2:	4913      	ldr	r1, [pc, #76]	; (20920 <k_sched_lock+0xe8>)
   208d4:	480b      	ldr	r0, [pc, #44]	; (20904 <k_sched_lock+0xcc>)
   208d6:	235d      	movs	r3, #93	; 0x5d
   208d8:	f002 fcf7 	bl	232ca <printk>
   208dc:	4906      	ldr	r1, [pc, #24]	; (208f8 <k_sched_lock+0xc0>)
   208de:	4811      	ldr	r0, [pc, #68]	; (20924 <k_sched_lock+0xec>)
   208e0:	f002 fcf3 	bl	232ca <printk>
   208e4:	4805      	ldr	r0, [pc, #20]	; (208fc <k_sched_lock+0xc4>)
   208e6:	215d      	movs	r1, #93	; 0x5d
   208e8:	f002 fd32 	bl	23350 <assert_post_action>
	__asm__ volatile(
   208ec:	f385 8811 	msr	BASEPRI, r5
   208f0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   208f4:	bd38      	pop	{r3, r4, r5, pc}
   208f6:	bf00      	nop
   208f8:	20001bf8 	.word	0x20001bf8
   208fc:	00029daf 	.word	0x00029daf
   20900:	00029dd1 	.word	0x00029dd1
   20904:	000297e6 	.word	0x000297e6
   20908:	00029de6 	.word	0x00029de6
   2090c:	0002fcf0 	.word	0x0002fcf0
   20910:	0002fcc9 	.word	0x0002fcc9
   20914:	0002f76a 	.word	0x0002f76a
   20918:	20001bc4 	.word	0x20001bc4
   2091c:	0002fd02 	.word	0x0002fd02
   20920:	00029dfe 	.word	0x00029dfe
   20924:	00029e15 	.word	0x00029e15

00020928 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   20928:	4b11      	ldr	r3, [pc, #68]	; (20970 <z_priq_dumb_remove+0x48>)
   2092a:	f103 0228 	add.w	r2, r3, #40	; 0x28
   2092e:	4282      	cmp	r2, r0
{
   20930:	b510      	push	{r4, lr}
   20932:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   20934:	d105      	bne.n	20942 <z_priq_dumb_remove+0x1a>
   20936:	689b      	ldr	r3, [r3, #8]
   20938:	428b      	cmp	r3, r1
   2093a:	d102      	bne.n	20942 <z_priq_dumb_remove+0x1a>
   2093c:	7b4b      	ldrb	r3, [r1, #13]
   2093e:	06db      	lsls	r3, r3, #27
   20940:	d115      	bne.n	2096e <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20942:	4b0c      	ldr	r3, [pc, #48]	; (20974 <z_priq_dumb_remove+0x4c>)
   20944:	429c      	cmp	r4, r3
   20946:	d10b      	bne.n	20960 <z_priq_dumb_remove+0x38>
   20948:	490b      	ldr	r1, [pc, #44]	; (20978 <z_priq_dumb_remove+0x50>)
   2094a:	480c      	ldr	r0, [pc, #48]	; (2097c <z_priq_dumb_remove+0x54>)
   2094c:	4a0c      	ldr	r2, [pc, #48]	; (20980 <z_priq_dumb_remove+0x58>)
   2094e:	f240 336a 	movw	r3, #874	; 0x36a
   20952:	f002 fcba 	bl	232ca <printk>
   20956:	480a      	ldr	r0, [pc, #40]	; (20980 <z_priq_dumb_remove+0x58>)
   20958:	f240 316a 	movw	r1, #874	; 0x36a
   2095c:	f002 fcf8 	bl	23350 <assert_post_action>
	node->prev->next = node->next;
   20960:	e9d4 3200 	ldrd	r3, r2, [r4]
   20964:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20966:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20968:	2300      	movs	r3, #0
	node->prev = NULL;
   2096a:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2096e:	bd10      	pop	{r4, pc}
   20970:	20001bc4 	.word	0x20001bc4
   20974:	20001a90 	.word	0x20001a90
   20978:	0002fd63 	.word	0x0002fd63
   2097c:	000297e6 	.word	0x000297e6
   20980:	0002fd2a 	.word	0x0002fd2a

00020984 <z_unpend_thread>:
{
   20984:	b538      	push	{r3, r4, r5, lr}
   20986:	4604      	mov	r4, r0
	__asm__ volatile(
   20988:	f04f 0320 	mov.w	r3, #32
   2098c:	f3ef 8511 	mrs	r5, BASEPRI
   20990:	f383 8811 	msr	BASEPRI, r3
   20994:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20998:	481e      	ldr	r0, [pc, #120]	; (20a14 <z_unpend_thread+0x90>)
   2099a:	f001 fa8b 	bl	21eb4 <z_spin_lock_valid>
   2099e:	b968      	cbnz	r0, 209bc <z_unpend_thread+0x38>
   209a0:	4a1d      	ldr	r2, [pc, #116]	; (20a18 <z_unpend_thread+0x94>)
   209a2:	491e      	ldr	r1, [pc, #120]	; (20a1c <z_unpend_thread+0x98>)
   209a4:	481e      	ldr	r0, [pc, #120]	; (20a20 <z_unpend_thread+0x9c>)
   209a6:	234a      	movs	r3, #74	; 0x4a
   209a8:	f002 fc8f 	bl	232ca <printk>
   209ac:	4919      	ldr	r1, [pc, #100]	; (20a14 <z_unpend_thread+0x90>)
   209ae:	481d      	ldr	r0, [pc, #116]	; (20a24 <z_unpend_thread+0xa0>)
   209b0:	f002 fc8b 	bl	232ca <printk>
   209b4:	4818      	ldr	r0, [pc, #96]	; (20a18 <z_unpend_thread+0x94>)
   209b6:	214a      	movs	r1, #74	; 0x4a
   209b8:	f002 fcca 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   209bc:	4815      	ldr	r0, [pc, #84]	; (20a14 <z_unpend_thread+0x90>)
   209be:	f001 fa97 	bl	21ef0 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   209c2:	f104 0008 	add.w	r0, r4, #8
   209c6:	f7ff fdd1 	bl	2056c <pended_on.isra.0>
   209ca:	4621      	mov	r1, r4
   209cc:	f7ff ffac 	bl	20928 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   209d0:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   209d2:	4810      	ldr	r0, [pc, #64]	; (20a14 <z_unpend_thread+0x90>)
   209d4:	f023 0302 	bic.w	r3, r3, #2
   209d8:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   209da:	2300      	movs	r3, #0
   209dc:	60a3      	str	r3, [r4, #8]
   209de:	f001 fa77 	bl	21ed0 <z_spin_unlock_valid>
   209e2:	b968      	cbnz	r0, 20a00 <z_unpend_thread+0x7c>
   209e4:	4a0c      	ldr	r2, [pc, #48]	; (20a18 <z_unpend_thread+0x94>)
   209e6:	4910      	ldr	r1, [pc, #64]	; (20a28 <z_unpend_thread+0xa4>)
   209e8:	480d      	ldr	r0, [pc, #52]	; (20a20 <z_unpend_thread+0x9c>)
   209ea:	235d      	movs	r3, #93	; 0x5d
   209ec:	f002 fc6d 	bl	232ca <printk>
   209f0:	4908      	ldr	r1, [pc, #32]	; (20a14 <z_unpend_thread+0x90>)
   209f2:	480e      	ldr	r0, [pc, #56]	; (20a2c <z_unpend_thread+0xa8>)
   209f4:	f002 fc69 	bl	232ca <printk>
   209f8:	4807      	ldr	r0, [pc, #28]	; (20a18 <z_unpend_thread+0x94>)
   209fa:	215d      	movs	r1, #93	; 0x5d
   209fc:	f002 fca8 	bl	23350 <assert_post_action>
	__asm__ volatile(
   20a00:	f385 8811 	msr	BASEPRI, r5
   20a04:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   20a08:	f104 0018 	add.w	r0, r4, #24
}
   20a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20a10:	f001 bc78 	b.w	22304 <z_abort_timeout>
   20a14:	20001bf8 	.word	0x20001bf8
   20a18:	00029daf 	.word	0x00029daf
   20a1c:	00029dd1 	.word	0x00029dd1
   20a20:	000297e6 	.word	0x000297e6
   20a24:	00029de6 	.word	0x00029de6
   20a28:	00029dfe 	.word	0x00029dfe
   20a2c:	00029e15 	.word	0x00029e15

00020a30 <update_cache>:
{
   20a30:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   20a32:	4c10      	ldr	r4, [pc, #64]	; (20a74 <update_cache+0x44>)
{
   20a34:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   20a36:	f104 0028 	add.w	r0, r4, #40	; 0x28
   20a3a:	f007 fc7a 	bl	28332 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   20a3e:	68a3      	ldr	r3, [r4, #8]
   20a40:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   20a42:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   20a44:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   20a46:	bf44      	itt	mi
   20a48:	f041 0108 	orrmi.w	r1, r1, #8
   20a4c:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   20a4e:	b905      	cbnz	r5, 20a52 <update_cache+0x22>
   20a50:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   20a52:	b94e      	cbnz	r6, 20a68 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   20a54:	7b5a      	ldrb	r2, [r3, #13]
   20a56:	06d2      	lsls	r2, r2, #27
   20a58:	d106      	bne.n	20a68 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   20a5a:	69aa      	ldr	r2, [r5, #24]
   20a5c:	b922      	cbnz	r2, 20a68 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   20a5e:	89da      	ldrh	r2, [r3, #14]
   20a60:	2a7f      	cmp	r2, #127	; 0x7f
   20a62:	d901      	bls.n	20a68 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   20a64:	6263      	str	r3, [r4, #36]	; 0x24
}
   20a66:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   20a68:	42ab      	cmp	r3, r5
   20a6a:	d001      	beq.n	20a70 <update_cache+0x40>
			z_reset_time_slice();
   20a6c:	f7ff fd96 	bl	2059c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   20a70:	6265      	str	r5, [r4, #36]	; 0x24
}
   20a72:	e7f8      	b.n	20a66 <update_cache+0x36>
   20a74:	20001bc4 	.word	0x20001bc4

00020a78 <k_sched_unlock>:
{
   20a78:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20a7a:	f04f 0320 	mov.w	r3, #32
   20a7e:	f3ef 8511 	mrs	r5, BASEPRI
   20a82:	f383 8811 	msr	BASEPRI, r3
   20a86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20a8a:	482d      	ldr	r0, [pc, #180]	; (20b40 <k_sched_unlock+0xc8>)
   20a8c:	f001 fa12 	bl	21eb4 <z_spin_lock_valid>
   20a90:	b968      	cbnz	r0, 20aae <k_sched_unlock+0x36>
   20a92:	4a2c      	ldr	r2, [pc, #176]	; (20b44 <k_sched_unlock+0xcc>)
   20a94:	492c      	ldr	r1, [pc, #176]	; (20b48 <k_sched_unlock+0xd0>)
   20a96:	482d      	ldr	r0, [pc, #180]	; (20b4c <k_sched_unlock+0xd4>)
   20a98:	234a      	movs	r3, #74	; 0x4a
   20a9a:	f002 fc16 	bl	232ca <printk>
   20a9e:	4928      	ldr	r1, [pc, #160]	; (20b40 <k_sched_unlock+0xc8>)
   20aa0:	482b      	ldr	r0, [pc, #172]	; (20b50 <k_sched_unlock+0xd8>)
   20aa2:	f002 fc12 	bl	232ca <printk>
   20aa6:	4827      	ldr	r0, [pc, #156]	; (20b44 <k_sched_unlock+0xcc>)
   20aa8:	214a      	movs	r1, #74	; 0x4a
   20aaa:	f002 fc51 	bl	23350 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   20aae:	4c29      	ldr	r4, [pc, #164]	; (20b54 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   20ab0:	4823      	ldr	r0, [pc, #140]	; (20b40 <k_sched_unlock+0xc8>)
   20ab2:	f001 fa1d 	bl	21ef0 <z_spin_lock_set_owner>
   20ab6:	68a2      	ldr	r2, [r4, #8]
   20ab8:	7bd2      	ldrb	r2, [r2, #15]
   20aba:	b972      	cbnz	r2, 20ada <k_sched_unlock+0x62>
   20abc:	4926      	ldr	r1, [pc, #152]	; (20b58 <k_sched_unlock+0xe0>)
   20abe:	4a27      	ldr	r2, [pc, #156]	; (20b5c <k_sched_unlock+0xe4>)
   20ac0:	4822      	ldr	r0, [pc, #136]	; (20b4c <k_sched_unlock+0xd4>)
   20ac2:	f240 3309 	movw	r3, #777	; 0x309
   20ac6:	f002 fc00 	bl	232ca <printk>
   20aca:	4825      	ldr	r0, [pc, #148]	; (20b60 <k_sched_unlock+0xe8>)
   20acc:	f002 fbfd 	bl	232ca <printk>
   20ad0:	4822      	ldr	r0, [pc, #136]	; (20b5c <k_sched_unlock+0xe4>)
   20ad2:	f240 3109 	movw	r1, #777	; 0x309
   20ad6:	f002 fc3b 	bl	23350 <assert_post_action>
   20ada:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   20ade:	b173      	cbz	r3, 20afe <k_sched_unlock+0x86>
   20ae0:	4920      	ldr	r1, [pc, #128]	; (20b64 <k_sched_unlock+0xec>)
   20ae2:	4a1e      	ldr	r2, [pc, #120]	; (20b5c <k_sched_unlock+0xe4>)
   20ae4:	4819      	ldr	r0, [pc, #100]	; (20b4c <k_sched_unlock+0xd4>)
   20ae6:	f240 330a 	movw	r3, #778	; 0x30a
   20aea:	f002 fbee 	bl	232ca <printk>
   20aee:	481c      	ldr	r0, [pc, #112]	; (20b60 <k_sched_unlock+0xe8>)
   20af0:	f002 fbeb 	bl	232ca <printk>
   20af4:	4819      	ldr	r0, [pc, #100]	; (20b5c <k_sched_unlock+0xe4>)
   20af6:	f240 310a 	movw	r1, #778	; 0x30a
   20afa:	f002 fc29 	bl	23350 <assert_post_action>
		++_current->base.sched_locked;
   20afe:	68a2      	ldr	r2, [r4, #8]
   20b00:	7bd3      	ldrb	r3, [r2, #15]
   20b02:	3301      	adds	r3, #1
		update_cache(0);
   20b04:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   20b06:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   20b08:	f7ff ff92 	bl	20a30 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b0c:	480c      	ldr	r0, [pc, #48]	; (20b40 <k_sched_unlock+0xc8>)
   20b0e:	f001 f9df 	bl	21ed0 <z_spin_unlock_valid>
   20b12:	b968      	cbnz	r0, 20b30 <k_sched_unlock+0xb8>
   20b14:	4a0b      	ldr	r2, [pc, #44]	; (20b44 <k_sched_unlock+0xcc>)
   20b16:	4914      	ldr	r1, [pc, #80]	; (20b68 <k_sched_unlock+0xf0>)
   20b18:	480c      	ldr	r0, [pc, #48]	; (20b4c <k_sched_unlock+0xd4>)
   20b1a:	235d      	movs	r3, #93	; 0x5d
   20b1c:	f002 fbd5 	bl	232ca <printk>
   20b20:	4907      	ldr	r1, [pc, #28]	; (20b40 <k_sched_unlock+0xc8>)
   20b22:	4812      	ldr	r0, [pc, #72]	; (20b6c <k_sched_unlock+0xf4>)
   20b24:	f002 fbd1 	bl	232ca <printk>
   20b28:	4806      	ldr	r0, [pc, #24]	; (20b44 <k_sched_unlock+0xcc>)
   20b2a:	215d      	movs	r1, #93	; 0x5d
   20b2c:	f002 fc10 	bl	23350 <assert_post_action>
	__asm__ volatile(
   20b30:	f385 8811 	msr	BASEPRI, r5
   20b34:	f3bf 8f6f 	isb	sy
}
   20b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   20b3c:	f007 bbef 	b.w	2831e <z_reschedule_unlocked>
   20b40:	20001bf8 	.word	0x20001bf8
   20b44:	00029daf 	.word	0x00029daf
   20b48:	00029dd1 	.word	0x00029dd1
   20b4c:	000297e6 	.word	0x000297e6
   20b50:	00029de6 	.word	0x00029de6
   20b54:	20001bc4 	.word	0x20001bc4
   20b58:	0002fd84 	.word	0x0002fd84
   20b5c:	0002fd2a 	.word	0x0002fd2a
   20b60:	0002f76a 	.word	0x0002f76a
   20b64:	0002fcf0 	.word	0x0002fcf0
   20b68:	00029dfe 	.word	0x00029dfe
   20b6c:	00029e15 	.word	0x00029e15

00020b70 <ready_thread>:
{
   20b70:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   20b72:	7b43      	ldrb	r3, [r0, #13]
   20b74:	06db      	lsls	r3, r3, #27
   20b76:	4604      	mov	r4, r0
   20b78:	d13d      	bne.n	20bf6 <ready_thread+0x86>
	return !sys_dnode_is_linked(&t->node);
   20b7a:	6985      	ldr	r5, [r0, #24]
	if (z_is_thread_ready(thread)) {
   20b7c:	2d00      	cmp	r5, #0
   20b7e:	d13a      	bne.n	20bf6 <ready_thread+0x86>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20b80:	4b1d      	ldr	r3, [pc, #116]	; (20bf8 <ready_thread+0x88>)
   20b82:	4298      	cmp	r0, r3
   20b84:	d10b      	bne.n	20b9e <ready_thread+0x2e>
   20b86:	491d      	ldr	r1, [pc, #116]	; (20bfc <ready_thread+0x8c>)
   20b88:	481d      	ldr	r0, [pc, #116]	; (20c00 <ready_thread+0x90>)
   20b8a:	4a1e      	ldr	r2, [pc, #120]	; (20c04 <ready_thread+0x94>)
   20b8c:	f44f 7355 	mov.w	r3, #852	; 0x354
   20b90:	f002 fb9b 	bl	232ca <printk>
   20b94:	481b      	ldr	r0, [pc, #108]	; (20c04 <ready_thread+0x94>)
   20b96:	f44f 7155 	mov.w	r1, #852	; 0x354
   20b9a:	f002 fbd9 	bl	23350 <assert_post_action>
	return list->head == list;
   20b9e:	4a1a      	ldr	r2, [pc, #104]	; (20c08 <ready_thread+0x98>)
   20ba0:	4613      	mov	r3, r2
   20ba2:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20ba6:	4298      	cmp	r0, r3
   20ba8:	bf18      	it	ne
   20baa:	4605      	movne	r5, r0
   20bac:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20bae:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   20bb0:	4619      	mov	r1, r3
   20bb2:	462b      	mov	r3, r5
   20bb4:	bf38      	it	cc
   20bb6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20bb8:	b1bb      	cbz	r3, 20bea <ready_thread+0x7a>
	if (thread_1->base.prio < thread_2->base.prio) {
   20bba:	f994 600e 	ldrsb.w	r6, [r4, #14]
   20bbe:	f993 500e 	ldrsb.w	r5, [r3, #14]
   20bc2:	42ae      	cmp	r6, r5
   20bc4:	db03      	blt.n	20bce <ready_thread+0x5e>
	return (node == list->tail) ? NULL : node->next;
   20bc6:	4298      	cmp	r0, r3
   20bc8:	d00f      	beq.n	20bea <ready_thread+0x7a>
   20bca:	681b      	ldr	r3, [r3, #0]
   20bcc:	e7f4      	b.n	20bb8 <ready_thread+0x48>
	node->prev = successor->prev;
   20bce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20bd0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   20bd4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   20bd6:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   20bd8:	7b63      	ldrb	r3, [r4, #13]
   20bda:	f063 037f 	orn	r3, r3, #127	; 0x7f
   20bde:	7363      	strb	r3, [r4, #13]
		update_cache(0);
   20be0:	2000      	movs	r0, #0
}
   20be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   20be6:	f7ff bf23 	b.w	20a30 <update_cache>
	node->prev = list->tail;
   20bea:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   20bee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20bf0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20bf2:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   20bf4:	e7f0      	b.n	20bd8 <ready_thread+0x68>
}
   20bf6:	bd70      	pop	{r4, r5, r6, pc}
   20bf8:	20001a90 	.word	0x20001a90
   20bfc:	0002fd63 	.word	0x0002fd63
   20c00:	000297e6 	.word	0x000297e6
   20c04:	0002fd2a 	.word	0x0002fd2a
   20c08:	20001bc4 	.word	0x20001bc4

00020c0c <z_ready_thread>:
{
   20c0c:	b538      	push	{r3, r4, r5, lr}
   20c0e:	4604      	mov	r4, r0
	__asm__ volatile(
   20c10:	f04f 0320 	mov.w	r3, #32
   20c14:	f3ef 8511 	mrs	r5, BASEPRI
   20c18:	f383 8811 	msr	BASEPRI, r3
   20c1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c20:	4817      	ldr	r0, [pc, #92]	; (20c80 <z_ready_thread+0x74>)
   20c22:	f001 f947 	bl	21eb4 <z_spin_lock_valid>
   20c26:	b968      	cbnz	r0, 20c44 <z_ready_thread+0x38>
   20c28:	4a16      	ldr	r2, [pc, #88]	; (20c84 <z_ready_thread+0x78>)
   20c2a:	4917      	ldr	r1, [pc, #92]	; (20c88 <z_ready_thread+0x7c>)
   20c2c:	4817      	ldr	r0, [pc, #92]	; (20c8c <z_ready_thread+0x80>)
   20c2e:	234a      	movs	r3, #74	; 0x4a
   20c30:	f002 fb4b 	bl	232ca <printk>
   20c34:	4912      	ldr	r1, [pc, #72]	; (20c80 <z_ready_thread+0x74>)
   20c36:	4816      	ldr	r0, [pc, #88]	; (20c90 <z_ready_thread+0x84>)
   20c38:	f002 fb47 	bl	232ca <printk>
   20c3c:	4811      	ldr	r0, [pc, #68]	; (20c84 <z_ready_thread+0x78>)
   20c3e:	214a      	movs	r1, #74	; 0x4a
   20c40:	f002 fb86 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   20c44:	480e      	ldr	r0, [pc, #56]	; (20c80 <z_ready_thread+0x74>)
   20c46:	f001 f953 	bl	21ef0 <z_spin_lock_set_owner>
		ready_thread(thread);
   20c4a:	4620      	mov	r0, r4
   20c4c:	f7ff ff90 	bl	20b70 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20c50:	480b      	ldr	r0, [pc, #44]	; (20c80 <z_ready_thread+0x74>)
   20c52:	f001 f93d 	bl	21ed0 <z_spin_unlock_valid>
   20c56:	b968      	cbnz	r0, 20c74 <z_ready_thread+0x68>
   20c58:	4a0a      	ldr	r2, [pc, #40]	; (20c84 <z_ready_thread+0x78>)
   20c5a:	490e      	ldr	r1, [pc, #56]	; (20c94 <z_ready_thread+0x88>)
   20c5c:	480b      	ldr	r0, [pc, #44]	; (20c8c <z_ready_thread+0x80>)
   20c5e:	235d      	movs	r3, #93	; 0x5d
   20c60:	f002 fb33 	bl	232ca <printk>
   20c64:	4906      	ldr	r1, [pc, #24]	; (20c80 <z_ready_thread+0x74>)
   20c66:	480c      	ldr	r0, [pc, #48]	; (20c98 <z_ready_thread+0x8c>)
   20c68:	f002 fb2f 	bl	232ca <printk>
   20c6c:	4805      	ldr	r0, [pc, #20]	; (20c84 <z_ready_thread+0x78>)
   20c6e:	215d      	movs	r1, #93	; 0x5d
   20c70:	f002 fb6e 	bl	23350 <assert_post_action>
	__asm__ volatile(
   20c74:	f385 8811 	msr	BASEPRI, r5
   20c78:	f3bf 8f6f 	isb	sy
}
   20c7c:	bd38      	pop	{r3, r4, r5, pc}
   20c7e:	bf00      	nop
   20c80:	20001bf8 	.word	0x20001bf8
   20c84:	00029daf 	.word	0x00029daf
   20c88:	00029dd1 	.word	0x00029dd1
   20c8c:	000297e6 	.word	0x000297e6
   20c90:	00029de6 	.word	0x00029de6
   20c94:	00029dfe 	.word	0x00029dfe
   20c98:	00029e15 	.word	0x00029e15

00020c9c <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   20c9c:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   20ca0:	b570      	push	{r4, r5, r6, lr}
   20ca2:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   20ca4:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   20ca8:	2b00      	cmp	r3, #0
   20caa:	d042      	beq.n	20d32 <z_thread_timeout+0x96>
	__asm__ volatile(
   20cac:	f04f 0320 	mov.w	r3, #32
   20cb0:	f3ef 8611 	mrs	r6, BASEPRI
   20cb4:	f383 8811 	msr	BASEPRI, r3
   20cb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20cbc:	4822      	ldr	r0, [pc, #136]	; (20d48 <z_thread_timeout+0xac>)
   20cbe:	f001 f8f9 	bl	21eb4 <z_spin_lock_valid>
   20cc2:	b968      	cbnz	r0, 20ce0 <z_thread_timeout+0x44>
   20cc4:	4a21      	ldr	r2, [pc, #132]	; (20d4c <z_thread_timeout+0xb0>)
   20cc6:	4922      	ldr	r1, [pc, #136]	; (20d50 <z_thread_timeout+0xb4>)
   20cc8:	4822      	ldr	r0, [pc, #136]	; (20d54 <z_thread_timeout+0xb8>)
   20cca:	234a      	movs	r3, #74	; 0x4a
   20ccc:	f002 fafd 	bl	232ca <printk>
   20cd0:	491d      	ldr	r1, [pc, #116]	; (20d48 <z_thread_timeout+0xac>)
   20cd2:	4821      	ldr	r0, [pc, #132]	; (20d58 <z_thread_timeout+0xbc>)
   20cd4:	f002 faf9 	bl	232ca <printk>
   20cd8:	481c      	ldr	r0, [pc, #112]	; (20d4c <z_thread_timeout+0xb0>)
   20cda:	214a      	movs	r1, #74	; 0x4a
   20cdc:	f002 fb38 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   20ce0:	4819      	ldr	r0, [pc, #100]	; (20d48 <z_thread_timeout+0xac>)
   20ce2:	f001 f905 	bl	21ef0 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   20ce6:	f1a4 0010 	sub.w	r0, r4, #16
   20cea:	f7ff fc3f 	bl	2056c <pended_on.isra.0>
   20cee:	4629      	mov	r1, r5
   20cf0:	f7ff fe1a 	bl	20928 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20cf4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20cf8:	4813      	ldr	r0, [pc, #76]	; (20d48 <z_thread_timeout+0xac>)
   20cfa:	f023 0302 	bic.w	r3, r3, #2
   20cfe:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   20d02:	2300      	movs	r3, #0
   20d04:	f844 3c10 	str.w	r3, [r4, #-16]
   20d08:	f001 f8e2 	bl	21ed0 <z_spin_unlock_valid>
   20d0c:	b968      	cbnz	r0, 20d2a <z_thread_timeout+0x8e>
   20d0e:	4a0f      	ldr	r2, [pc, #60]	; (20d4c <z_thread_timeout+0xb0>)
   20d10:	4912      	ldr	r1, [pc, #72]	; (20d5c <z_thread_timeout+0xc0>)
   20d12:	4810      	ldr	r0, [pc, #64]	; (20d54 <z_thread_timeout+0xb8>)
   20d14:	235d      	movs	r3, #93	; 0x5d
   20d16:	f002 fad8 	bl	232ca <printk>
   20d1a:	490b      	ldr	r1, [pc, #44]	; (20d48 <z_thread_timeout+0xac>)
   20d1c:	4810      	ldr	r0, [pc, #64]	; (20d60 <z_thread_timeout+0xc4>)
   20d1e:	f002 fad4 	bl	232ca <printk>
   20d22:	480a      	ldr	r0, [pc, #40]	; (20d4c <z_thread_timeout+0xb0>)
   20d24:	215d      	movs	r1, #93	; 0x5d
   20d26:	f002 fb13 	bl	23350 <assert_post_action>
	__asm__ volatile(
   20d2a:	f386 8811 	msr	BASEPRI, r6
   20d2e:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   20d32:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   20d36:	f023 0314 	bic.w	r3, r3, #20
   20d3a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   20d3e:	4628      	mov	r0, r5
}
   20d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   20d44:	f7ff bf62 	b.w	20c0c <z_ready_thread>
   20d48:	20001bf8 	.word	0x20001bf8
   20d4c:	00029daf 	.word	0x00029daf
   20d50:	00029dd1 	.word	0x00029dd1
   20d54:	000297e6 	.word	0x000297e6
   20d58:	00029de6 	.word	0x00029de6
   20d5c:	00029dfe 	.word	0x00029dfe
   20d60:	00029e15 	.word	0x00029e15

00020d64 <z_sched_start>:
{
   20d64:	b538      	push	{r3, r4, r5, lr}
   20d66:	4604      	mov	r4, r0
	__asm__ volatile(
   20d68:	f04f 0320 	mov.w	r3, #32
   20d6c:	f3ef 8511 	mrs	r5, BASEPRI
   20d70:	f383 8811 	msr	BASEPRI, r3
   20d74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20d78:	481d      	ldr	r0, [pc, #116]	; (20df0 <z_sched_start+0x8c>)
   20d7a:	f001 f89b 	bl	21eb4 <z_spin_lock_valid>
   20d7e:	b968      	cbnz	r0, 20d9c <z_sched_start+0x38>
   20d80:	4a1c      	ldr	r2, [pc, #112]	; (20df4 <z_sched_start+0x90>)
   20d82:	491d      	ldr	r1, [pc, #116]	; (20df8 <z_sched_start+0x94>)
   20d84:	481d      	ldr	r0, [pc, #116]	; (20dfc <z_sched_start+0x98>)
   20d86:	234a      	movs	r3, #74	; 0x4a
   20d88:	f002 fa9f 	bl	232ca <printk>
   20d8c:	4918      	ldr	r1, [pc, #96]	; (20df0 <z_sched_start+0x8c>)
   20d8e:	481c      	ldr	r0, [pc, #112]	; (20e00 <z_sched_start+0x9c>)
   20d90:	f002 fa9b 	bl	232ca <printk>
   20d94:	4817      	ldr	r0, [pc, #92]	; (20df4 <z_sched_start+0x90>)
   20d96:	214a      	movs	r1, #74	; 0x4a
   20d98:	f002 fada 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   20d9c:	4814      	ldr	r0, [pc, #80]	; (20df0 <z_sched_start+0x8c>)
   20d9e:	f001 f8a7 	bl	21ef0 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   20da2:	7b63      	ldrb	r3, [r4, #13]
   20da4:	075a      	lsls	r2, r3, #29
   20da6:	d416      	bmi.n	20dd6 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20da8:	4811      	ldr	r0, [pc, #68]	; (20df0 <z_sched_start+0x8c>)
   20daa:	f001 f891 	bl	21ed0 <z_spin_unlock_valid>
   20dae:	b968      	cbnz	r0, 20dcc <z_sched_start+0x68>
   20db0:	4a10      	ldr	r2, [pc, #64]	; (20df4 <z_sched_start+0x90>)
   20db2:	4914      	ldr	r1, [pc, #80]	; (20e04 <z_sched_start+0xa0>)
   20db4:	4811      	ldr	r0, [pc, #68]	; (20dfc <z_sched_start+0x98>)
   20db6:	235d      	movs	r3, #93	; 0x5d
   20db8:	f002 fa87 	bl	232ca <printk>
   20dbc:	490c      	ldr	r1, [pc, #48]	; (20df0 <z_sched_start+0x8c>)
   20dbe:	4812      	ldr	r0, [pc, #72]	; (20e08 <z_sched_start+0xa4>)
   20dc0:	f002 fa83 	bl	232ca <printk>
   20dc4:	480b      	ldr	r0, [pc, #44]	; (20df4 <z_sched_start+0x90>)
   20dc6:	215d      	movs	r1, #93	; 0x5d
   20dc8:	f002 fac2 	bl	23350 <assert_post_action>
	__asm__ volatile(
   20dcc:	f385 8811 	msr	BASEPRI, r5
   20dd0:	f3bf 8f6f 	isb	sy
}
   20dd4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20dd6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   20dda:	4620      	mov	r0, r4
   20ddc:	7363      	strb	r3, [r4, #13]
   20dde:	f7ff fec7 	bl	20b70 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   20de2:	4629      	mov	r1, r5
   20de4:	4802      	ldr	r0, [pc, #8]	; (20df0 <z_sched_start+0x8c>)
}
   20de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   20dea:	f7ff bce9 	b.w	207c0 <z_reschedule>
   20dee:	bf00      	nop
   20df0:	20001bf8 	.word	0x20001bf8
   20df4:	00029daf 	.word	0x00029daf
   20df8:	00029dd1 	.word	0x00029dd1
   20dfc:	000297e6 	.word	0x000297e6
   20e00:	00029de6 	.word	0x00029de6
   20e04:	00029dfe 	.word	0x00029dfe
   20e08:	00029e15 	.word	0x00029e15

00020e0c <z_impl_k_thread_resume>:
{
   20e0c:	b538      	push	{r3, r4, r5, lr}
   20e0e:	4604      	mov	r4, r0
	__asm__ volatile(
   20e10:	f04f 0320 	mov.w	r3, #32
   20e14:	f3ef 8511 	mrs	r5, BASEPRI
   20e18:	f383 8811 	msr	BASEPRI, r3
   20e1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e20:	4810      	ldr	r0, [pc, #64]	; (20e64 <z_impl_k_thread_resume+0x58>)
   20e22:	f001 f847 	bl	21eb4 <z_spin_lock_valid>
   20e26:	b968      	cbnz	r0, 20e44 <z_impl_k_thread_resume+0x38>
   20e28:	4a0f      	ldr	r2, [pc, #60]	; (20e68 <z_impl_k_thread_resume+0x5c>)
   20e2a:	4910      	ldr	r1, [pc, #64]	; (20e6c <z_impl_k_thread_resume+0x60>)
   20e2c:	4810      	ldr	r0, [pc, #64]	; (20e70 <z_impl_k_thread_resume+0x64>)
   20e2e:	234a      	movs	r3, #74	; 0x4a
   20e30:	f002 fa4b 	bl	232ca <printk>
   20e34:	490b      	ldr	r1, [pc, #44]	; (20e64 <z_impl_k_thread_resume+0x58>)
   20e36:	480f      	ldr	r0, [pc, #60]	; (20e74 <z_impl_k_thread_resume+0x68>)
   20e38:	f002 fa47 	bl	232ca <printk>
   20e3c:	480a      	ldr	r0, [pc, #40]	; (20e68 <z_impl_k_thread_resume+0x5c>)
   20e3e:	214a      	movs	r1, #74	; 0x4a
   20e40:	f002 fa86 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   20e44:	4807      	ldr	r0, [pc, #28]	; (20e64 <z_impl_k_thread_resume+0x58>)
   20e46:	f001 f853 	bl	21ef0 <z_spin_lock_set_owner>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   20e4a:	7b63      	ldrb	r3, [r4, #13]
   20e4c:	f023 0310 	bic.w	r3, r3, #16
	ready_thread(thread);
   20e50:	4620      	mov	r0, r4
   20e52:	7363      	strb	r3, [r4, #13]
   20e54:	f7ff fe8c 	bl	20b70 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   20e58:	4629      	mov	r1, r5
   20e5a:	4802      	ldr	r0, [pc, #8]	; (20e64 <z_impl_k_thread_resume+0x58>)
}
   20e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   20e60:	f7ff bcae 	b.w	207c0 <z_reschedule>
   20e64:	20001bf8 	.word	0x20001bf8
   20e68:	00029daf 	.word	0x00029daf
   20e6c:	00029dd1 	.word	0x00029dd1
   20e70:	000297e6 	.word	0x000297e6
   20e74:	00029de6 	.word	0x00029de6

00020e78 <z_move_thread_to_end_of_prio_q>:
{
   20e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20e7a:	4604      	mov	r4, r0
   20e7c:	f04f 0320 	mov.w	r3, #32
   20e80:	f3ef 8511 	mrs	r5, BASEPRI
   20e84:	f383 8811 	msr	BASEPRI, r3
   20e88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e8c:	4837      	ldr	r0, [pc, #220]	; (20f6c <z_move_thread_to_end_of_prio_q+0xf4>)
   20e8e:	f001 f811 	bl	21eb4 <z_spin_lock_valid>
   20e92:	b968      	cbnz	r0, 20eb0 <z_move_thread_to_end_of_prio_q+0x38>
   20e94:	4a36      	ldr	r2, [pc, #216]	; (20f70 <z_move_thread_to_end_of_prio_q+0xf8>)
   20e96:	4937      	ldr	r1, [pc, #220]	; (20f74 <z_move_thread_to_end_of_prio_q+0xfc>)
   20e98:	4837      	ldr	r0, [pc, #220]	; (20f78 <z_move_thread_to_end_of_prio_q+0x100>)
   20e9a:	234a      	movs	r3, #74	; 0x4a
   20e9c:	f002 fa15 	bl	232ca <printk>
   20ea0:	4932      	ldr	r1, [pc, #200]	; (20f6c <z_move_thread_to_end_of_prio_q+0xf4>)
   20ea2:	4836      	ldr	r0, [pc, #216]	; (20f7c <z_move_thread_to_end_of_prio_q+0x104>)
   20ea4:	f002 fa11 	bl	232ca <printk>
   20ea8:	4831      	ldr	r0, [pc, #196]	; (20f70 <z_move_thread_to_end_of_prio_q+0xf8>)
   20eaa:	214a      	movs	r1, #74	; 0x4a
   20eac:	f002 fa50 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   20eb0:	482e      	ldr	r0, [pc, #184]	; (20f6c <z_move_thread_to_end_of_prio_q+0xf4>)
   20eb2:	f001 f81d 	bl	21ef0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   20eb6:	f994 300d 	ldrsb.w	r3, [r4, #13]
   20eba:	2b00      	cmp	r3, #0
   20ebc:	da03      	bge.n	20ec6 <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   20ebe:	4830      	ldr	r0, [pc, #192]	; (20f80 <z_move_thread_to_end_of_prio_q+0x108>)
   20ec0:	4621      	mov	r1, r4
   20ec2:	f7ff fd31 	bl	20928 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20ec6:	4b2f      	ldr	r3, [pc, #188]	; (20f84 <z_move_thread_to_end_of_prio_q+0x10c>)
   20ec8:	429c      	cmp	r4, r3
   20eca:	d10b      	bne.n	20ee4 <z_move_thread_to_end_of_prio_q+0x6c>
   20ecc:	492e      	ldr	r1, [pc, #184]	; (20f88 <z_move_thread_to_end_of_prio_q+0x110>)
   20ece:	482a      	ldr	r0, [pc, #168]	; (20f78 <z_move_thread_to_end_of_prio_q+0x100>)
   20ed0:	4a2e      	ldr	r2, [pc, #184]	; (20f8c <z_move_thread_to_end_of_prio_q+0x114>)
   20ed2:	f44f 7355 	mov.w	r3, #852	; 0x354
   20ed6:	f002 f9f8 	bl	232ca <printk>
   20eda:	482c      	ldr	r0, [pc, #176]	; (20f8c <z_move_thread_to_end_of_prio_q+0x114>)
   20edc:	f44f 7155 	mov.w	r1, #852	; 0x354
   20ee0:	f002 fa36 	bl	23350 <assert_post_action>
	return list->head == list;
   20ee4:	4a2a      	ldr	r2, [pc, #168]	; (20f90 <z_move_thread_to_end_of_prio_q+0x118>)
   20ee6:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20ee8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	return list->head == list;
   20eea:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20eee:	428b      	cmp	r3, r1
   20ef0:	bf08      	it	eq
   20ef2:	2300      	moveq	r3, #0
   20ef4:	2b00      	cmp	r3, #0
   20ef6:	bf38      	it	cc
   20ef8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20efa:	2b00      	cmp	r3, #0
   20efc:	d02f      	beq.n	20f5e <z_move_thread_to_end_of_prio_q+0xe6>
	if (thread_1->base.prio < thread_2->base.prio) {
   20efe:	f994 700e 	ldrsb.w	r7, [r4, #14]
   20f02:	f993 600e 	ldrsb.w	r6, [r3, #14]
   20f06:	42b7      	cmp	r7, r6
   20f08:	db03      	blt.n	20f12 <z_move_thread_to_end_of_prio_q+0x9a>
	return (node == list->tail) ? NULL : node->next;
   20f0a:	4283      	cmp	r3, r0
   20f0c:	d027      	beq.n	20f5e <z_move_thread_to_end_of_prio_q+0xe6>
   20f0e:	681b      	ldr	r3, [r3, #0]
   20f10:	e7f3      	b.n	20efa <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = successor->prev;
   20f12:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   20f14:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   20f18:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   20f1a:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   20f1c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   20f1e:	6890      	ldr	r0, [r2, #8]
   20f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
   20f24:	7363      	strb	r3, [r4, #13]
   20f26:	1b03      	subs	r3, r0, r4
   20f28:	4258      	negs	r0, r3
   20f2a:	4158      	adcs	r0, r3
   20f2c:	f7ff fd80 	bl	20a30 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f30:	480e      	ldr	r0, [pc, #56]	; (20f6c <z_move_thread_to_end_of_prio_q+0xf4>)
   20f32:	f000 ffcd 	bl	21ed0 <z_spin_unlock_valid>
   20f36:	b968      	cbnz	r0, 20f54 <z_move_thread_to_end_of_prio_q+0xdc>
   20f38:	4a0d      	ldr	r2, [pc, #52]	; (20f70 <z_move_thread_to_end_of_prio_q+0xf8>)
   20f3a:	4916      	ldr	r1, [pc, #88]	; (20f94 <z_move_thread_to_end_of_prio_q+0x11c>)
   20f3c:	480e      	ldr	r0, [pc, #56]	; (20f78 <z_move_thread_to_end_of_prio_q+0x100>)
   20f3e:	235d      	movs	r3, #93	; 0x5d
   20f40:	f002 f9c3 	bl	232ca <printk>
   20f44:	4909      	ldr	r1, [pc, #36]	; (20f6c <z_move_thread_to_end_of_prio_q+0xf4>)
   20f46:	4814      	ldr	r0, [pc, #80]	; (20f98 <z_move_thread_to_end_of_prio_q+0x120>)
   20f48:	f002 f9bf 	bl	232ca <printk>
   20f4c:	4808      	ldr	r0, [pc, #32]	; (20f70 <z_move_thread_to_end_of_prio_q+0xf8>)
   20f4e:	215d      	movs	r1, #93	; 0x5d
   20f50:	f002 f9fe 	bl	23350 <assert_post_action>
	__asm__ volatile(
   20f54:	f385 8811 	msr	BASEPRI, r5
   20f58:	f3bf 8f6f 	isb	sy
}
   20f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   20f5e:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   20f62:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20f64:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20f66:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   20f68:	e7d8      	b.n	20f1c <z_move_thread_to_end_of_prio_q+0xa4>
   20f6a:	bf00      	nop
   20f6c:	20001bf8 	.word	0x20001bf8
   20f70:	00029daf 	.word	0x00029daf
   20f74:	00029dd1 	.word	0x00029dd1
   20f78:	000297e6 	.word	0x000297e6
   20f7c:	00029de6 	.word	0x00029de6
   20f80:	20001bec 	.word	0x20001bec
   20f84:	20001a90 	.word	0x20001a90
   20f88:	0002fd63 	.word	0x0002fd63
   20f8c:	0002fd2a 	.word	0x0002fd2a
   20f90:	20001bc4 	.word	0x20001bc4
   20f94:	00029dfe 	.word	0x00029dfe
   20f98:	00029e15 	.word	0x00029e15

00020f9c <z_time_slice>:
{
   20f9c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   20f9e:	4a15      	ldr	r2, [pc, #84]	; (20ff4 <z_time_slice+0x58>)
   20fa0:	4b15      	ldr	r3, [pc, #84]	; (20ff8 <z_time_slice+0x5c>)
   20fa2:	6814      	ldr	r4, [r2, #0]
{
   20fa4:	4601      	mov	r1, r0
	if (pending_current == _current) {
   20fa6:	6898      	ldr	r0, [r3, #8]
   20fa8:	42a0      	cmp	r0, r4
   20faa:	461c      	mov	r4, r3
   20fac:	d103      	bne.n	20fb6 <z_time_slice+0x1a>
}
   20fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   20fb2:	f7ff baf3 	b.w	2059c <z_reset_time_slice>
	pending_current = NULL;
   20fb6:	2500      	movs	r5, #0
   20fb8:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   20fba:	4a10      	ldr	r2, [pc, #64]	; (20ffc <z_time_slice+0x60>)
   20fbc:	6812      	ldr	r2, [r2, #0]
   20fbe:	b1b2      	cbz	r2, 20fee <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   20fc0:	89c2      	ldrh	r2, [r0, #14]
   20fc2:	2a7f      	cmp	r2, #127	; 0x7f
   20fc4:	d813      	bhi.n	20fee <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   20fc6:	4a0e      	ldr	r2, [pc, #56]	; (21000 <z_time_slice+0x64>)
   20fc8:	f990 500e 	ldrsb.w	r5, [r0, #14]
   20fcc:	6812      	ldr	r2, [r2, #0]
   20fce:	4295      	cmp	r5, r2
   20fd0:	db0d      	blt.n	20fee <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   20fd2:	4a0c      	ldr	r2, [pc, #48]	; (21004 <z_time_slice+0x68>)
   20fd4:	4290      	cmp	r0, r2
   20fd6:	d00a      	beq.n	20fee <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   20fd8:	6982      	ldr	r2, [r0, #24]
   20fda:	b942      	cbnz	r2, 20fee <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   20fdc:	691a      	ldr	r2, [r3, #16]
   20fde:	428a      	cmp	r2, r1
   20fe0:	dc02      	bgt.n	20fe8 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   20fe2:	f7ff ff49 	bl	20e78 <z_move_thread_to_end_of_prio_q>
   20fe6:	e7e2      	b.n	20fae <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   20fe8:	1a52      	subs	r2, r2, r1
   20fea:	611a      	str	r2, [r3, #16]
}
   20fec:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   20fee:	2300      	movs	r3, #0
   20ff0:	6123      	str	r3, [r4, #16]
   20ff2:	e7fb      	b.n	20fec <z_time_slice+0x50>
   20ff4:	20001bf4 	.word	0x20001bf4
   20ff8:	20001bc4 	.word	0x20001bc4
   20ffc:	20001c00 	.word	0x20001c00
   21000:	20001bfc 	.word	0x20001bfc
   21004:	20001a90 	.word	0x20001a90

00021008 <z_impl_k_thread_suspend>:
{
   21008:	b570      	push	{r4, r5, r6, lr}
   2100a:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   2100c:	3018      	adds	r0, #24
   2100e:	f001 f979 	bl	22304 <z_abort_timeout>
	__asm__ volatile(
   21012:	f04f 0320 	mov.w	r3, #32
   21016:	f3ef 8611 	mrs	r6, BASEPRI
   2101a:	f383 8811 	msr	BASEPRI, r3
   2101e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21022:	4825      	ldr	r0, [pc, #148]	; (210b8 <z_impl_k_thread_suspend+0xb0>)
   21024:	f000 ff46 	bl	21eb4 <z_spin_lock_valid>
   21028:	b968      	cbnz	r0, 21046 <z_impl_k_thread_suspend+0x3e>
   2102a:	4a24      	ldr	r2, [pc, #144]	; (210bc <z_impl_k_thread_suspend+0xb4>)
   2102c:	4924      	ldr	r1, [pc, #144]	; (210c0 <z_impl_k_thread_suspend+0xb8>)
   2102e:	4825      	ldr	r0, [pc, #148]	; (210c4 <z_impl_k_thread_suspend+0xbc>)
   21030:	234a      	movs	r3, #74	; 0x4a
   21032:	f002 f94a 	bl	232ca <printk>
   21036:	4920      	ldr	r1, [pc, #128]	; (210b8 <z_impl_k_thread_suspend+0xb0>)
   21038:	4823      	ldr	r0, [pc, #140]	; (210c8 <z_impl_k_thread_suspend+0xc0>)
   2103a:	f002 f946 	bl	232ca <printk>
   2103e:	481f      	ldr	r0, [pc, #124]	; (210bc <z_impl_k_thread_suspend+0xb4>)
   21040:	214a      	movs	r1, #74	; 0x4a
   21042:	f002 f985 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   21046:	481c      	ldr	r0, [pc, #112]	; (210b8 <z_impl_k_thread_suspend+0xb0>)
   21048:	f000 ff52 	bl	21ef0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2104c:	f994 300d 	ldrsb.w	r3, [r4, #13]
   21050:	2b00      	cmp	r3, #0
   21052:	da07      	bge.n	21064 <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   21054:	481d      	ldr	r0, [pc, #116]	; (210cc <z_impl_k_thread_suspend+0xc4>)
   21056:	4621      	mov	r1, r4
   21058:	f7ff fc66 	bl	20928 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2105c:	7b63      	ldrb	r3, [r4, #13]
   2105e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21062:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   21064:	4d1a      	ldr	r5, [pc, #104]	; (210d0 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21066:	7b63      	ldrb	r3, [r4, #13]
   21068:	68a8      	ldr	r0, [r5, #8]
   2106a:	f043 0310 	orr.w	r3, r3, #16
   2106e:	7363      	strb	r3, [r4, #13]
   21070:	1b03      	subs	r3, r0, r4
   21072:	4258      	negs	r0, r3
   21074:	4158      	adcs	r0, r3
   21076:	f7ff fcdb 	bl	20a30 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2107a:	480f      	ldr	r0, [pc, #60]	; (210b8 <z_impl_k_thread_suspend+0xb0>)
   2107c:	f000 ff28 	bl	21ed0 <z_spin_unlock_valid>
   21080:	b968      	cbnz	r0, 2109e <z_impl_k_thread_suspend+0x96>
   21082:	4a0e      	ldr	r2, [pc, #56]	; (210bc <z_impl_k_thread_suspend+0xb4>)
   21084:	4913      	ldr	r1, [pc, #76]	; (210d4 <z_impl_k_thread_suspend+0xcc>)
   21086:	480f      	ldr	r0, [pc, #60]	; (210c4 <z_impl_k_thread_suspend+0xbc>)
   21088:	235d      	movs	r3, #93	; 0x5d
   2108a:	f002 f91e 	bl	232ca <printk>
   2108e:	490a      	ldr	r1, [pc, #40]	; (210b8 <z_impl_k_thread_suspend+0xb0>)
   21090:	4811      	ldr	r0, [pc, #68]	; (210d8 <z_impl_k_thread_suspend+0xd0>)
   21092:	f002 f91a 	bl	232ca <printk>
   21096:	4809      	ldr	r0, [pc, #36]	; (210bc <z_impl_k_thread_suspend+0xb4>)
   21098:	215d      	movs	r1, #93	; 0x5d
   2109a:	f002 f959 	bl	23350 <assert_post_action>
	__asm__ volatile(
   2109e:	f386 8811 	msr	BASEPRI, r6
   210a2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   210a6:	68ab      	ldr	r3, [r5, #8]
   210a8:	42a3      	cmp	r3, r4
   210aa:	d103      	bne.n	210b4 <z_impl_k_thread_suspend+0xac>
}
   210ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   210b0:	f007 b935 	b.w	2831e <z_reschedule_unlocked>
}
   210b4:	bd70      	pop	{r4, r5, r6, pc}
   210b6:	bf00      	nop
   210b8:	20001bf8 	.word	0x20001bf8
   210bc:	00029daf 	.word	0x00029daf
   210c0:	00029dd1 	.word	0x00029dd1
   210c4:	000297e6 	.word	0x000297e6
   210c8:	00029de6 	.word	0x00029de6
   210cc:	20001bec 	.word	0x20001bec
   210d0:	20001bc4 	.word	0x20001bc4
   210d4:	00029dfe 	.word	0x00029dfe
   210d8:	00029e15 	.word	0x00029e15

000210dc <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   210dc:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
   210de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   210e2:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   210e4:	b103      	cbz	r3, 210e8 <z_thread_single_abort+0xc>
		thread->fn_abort();
   210e6:	4798      	blx	r3
   210e8:	f104 0018 	add.w	r0, r4, #24
   210ec:	f001 f90a 	bl	22304 <z_abort_timeout>
	__asm__ volatile(
   210f0:	f04f 0320 	mov.w	r3, #32
   210f4:	f3ef 8611 	mrs	r6, BASEPRI
   210f8:	f383 8811 	msr	BASEPRI, r3
   210fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21100:	4838      	ldr	r0, [pc, #224]	; (211e4 <z_thread_single_abort+0x108>)
   21102:	f000 fed7 	bl	21eb4 <z_spin_lock_valid>
   21106:	b968      	cbnz	r0, 21124 <z_thread_single_abort+0x48>
   21108:	4a37      	ldr	r2, [pc, #220]	; (211e8 <z_thread_single_abort+0x10c>)
   2110a:	4938      	ldr	r1, [pc, #224]	; (211ec <z_thread_single_abort+0x110>)
   2110c:	4838      	ldr	r0, [pc, #224]	; (211f0 <z_thread_single_abort+0x114>)
   2110e:	234a      	movs	r3, #74	; 0x4a
   21110:	f002 f8db 	bl	232ca <printk>
   21114:	4933      	ldr	r1, [pc, #204]	; (211e4 <z_thread_single_abort+0x108>)
   21116:	4837      	ldr	r0, [pc, #220]	; (211f4 <z_thread_single_abort+0x118>)
   21118:	f002 f8d7 	bl	232ca <printk>
   2111c:	4832      	ldr	r0, [pc, #200]	; (211e8 <z_thread_single_abort+0x10c>)
   2111e:	214a      	movs	r1, #74	; 0x4a
   21120:	f002 f916 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   21124:	482f      	ldr	r0, [pc, #188]	; (211e4 <z_thread_single_abort+0x108>)
   21126:	f000 fee3 	bl	21ef0 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2112a:	7b63      	ldrb	r3, [r4, #13]
   2112c:	06d8      	lsls	r0, r3, #27
   2112e:	d136      	bne.n	2119e <z_thread_single_abort+0xc2>
		if (z_is_thread_ready(thread)) {
   21130:	69a2      	ldr	r2, [r4, #24]
   21132:	2a00      	cmp	r2, #0
   21134:	d133      	bne.n	2119e <z_thread_single_abort+0xc2>
			if (z_is_thread_queued(thread)) {
   21136:	0619      	lsls	r1, r3, #24
   21138:	d507      	bpl.n	2114a <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
   2113a:	482f      	ldr	r0, [pc, #188]	; (211f8 <z_thread_single_abort+0x11c>)
   2113c:	4621      	mov	r1, r4
   2113e:	f7ff fbf3 	bl	20928 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   21142:	7b63      	ldrb	r3, [r4, #13]
   21144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21148:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   2114a:	4b2c      	ldr	r3, [pc, #176]	; (211fc <z_thread_single_abort+0x120>)
   2114c:	6898      	ldr	r0, [r3, #8]
   2114e:	1b02      	subs	r2, r0, r4
   21150:	4250      	negs	r0, r2
   21152:	4150      	adcs	r0, r2
   21154:	f7ff fc6c 	bl	20a30 <update_cache>
		thread->base.thread_state |= mask;
   21158:	7b63      	ldrb	r3, [r4, #13]
   2115a:	f043 0308 	orr.w	r3, r3, #8
   2115e:	7363      	strb	r3, [r4, #13]
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   21160:	f104 0828 	add.w	r8, r4, #40	; 0x28
			waiter->base.pended_on = NULL;
   21164:	2700      	movs	r7, #0
	return list->head == list;
   21166:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21168:	4545      	cmp	r5, r8
   2116a:	d000      	beq.n	2116e <z_thread_single_abort+0x92>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   2116c:	bb3d      	cbnz	r5, 211be <z_thread_single_abort+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2116e:	481d      	ldr	r0, [pc, #116]	; (211e4 <z_thread_single_abort+0x108>)
   21170:	f000 feae 	bl	21ed0 <z_spin_unlock_valid>
   21174:	b968      	cbnz	r0, 21192 <z_thread_single_abort+0xb6>
   21176:	4a1c      	ldr	r2, [pc, #112]	; (211e8 <z_thread_single_abort+0x10c>)
   21178:	4921      	ldr	r1, [pc, #132]	; (21200 <z_thread_single_abort+0x124>)
   2117a:	481d      	ldr	r0, [pc, #116]	; (211f0 <z_thread_single_abort+0x114>)
   2117c:	235d      	movs	r3, #93	; 0x5d
   2117e:	f002 f8a4 	bl	232ca <printk>
   21182:	4918      	ldr	r1, [pc, #96]	; (211e4 <z_thread_single_abort+0x108>)
   21184:	481f      	ldr	r0, [pc, #124]	; (21204 <z_thread_single_abort+0x128>)
   21186:	f002 f8a0 	bl	232ca <printk>
   2118a:	4817      	ldr	r0, [pc, #92]	; (211e8 <z_thread_single_abort+0x10c>)
   2118c:	215d      	movs	r1, #93	; 0x5d
   2118e:	f002 f8df 	bl	23350 <assert_post_action>
	__asm__ volatile(
   21192:	f386 8811 	msr	BASEPRI, r6
   21196:	f3bf 8f6f 	isb	sy
}
   2119a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   2119e:	079b      	lsls	r3, r3, #30
   211a0:	d5da      	bpl.n	21158 <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
   211a2:	f104 0008 	add.w	r0, r4, #8
   211a6:	f7ff f9e1 	bl	2056c <pended_on.isra.0>
   211aa:	4621      	mov	r1, r4
   211ac:	f7ff fbbc 	bl	20928 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   211b0:	7b63      	ldrb	r3, [r4, #13]
   211b2:	f023 0302 	bic.w	r3, r3, #2
   211b6:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   211b8:	2300      	movs	r3, #0
   211ba:	60a3      	str	r3, [r4, #8]
   211bc:	e7cc      	b.n	21158 <z_thread_single_abort+0x7c>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   211be:	f105 0008 	add.w	r0, r5, #8
   211c2:	f7ff f9d3 	bl	2056c <pended_on.isra.0>
   211c6:	4629      	mov	r1, r5
   211c8:	f7ff fbae 	bl	20928 <z_priq_dumb_remove>
   211cc:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   211ce:	60af      	str	r7, [r5, #8]
   211d0:	f023 0302 	bic.w	r3, r3, #2
   211d4:	736b      	strb	r3, [r5, #13]
   211d6:	f8c5 7090 	str.w	r7, [r5, #144]	; 0x90
			ready_thread(waiter);
   211da:	4628      	mov	r0, r5
   211dc:	f7ff fcc8 	bl	20b70 <ready_thread>
   211e0:	e7c1      	b.n	21166 <z_thread_single_abort+0x8a>
   211e2:	bf00      	nop
   211e4:	20001bf8 	.word	0x20001bf8
   211e8:	00029daf 	.word	0x00029daf
   211ec:	00029dd1 	.word	0x00029dd1
   211f0:	000297e6 	.word	0x000297e6
   211f4:	00029de6 	.word	0x00029de6
   211f8:	20001bec 	.word	0x20001bec
   211fc:	20001bc4 	.word	0x20001bc4
   21200:	00029dfe 	.word	0x00029dfe
   21204:	00029e15 	.word	0x00029e15

00021208 <unready_thread>:
{
   21208:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2120a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2120e:	2b00      	cmp	r3, #0
{
   21210:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21212:	da07      	bge.n	21224 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   21214:	4601      	mov	r1, r0
   21216:	4808      	ldr	r0, [pc, #32]	; (21238 <unready_thread+0x30>)
   21218:	f7ff fb86 	bl	20928 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2121c:	7b63      	ldrb	r3, [r4, #13]
   2121e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21222:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   21224:	4b05      	ldr	r3, [pc, #20]	; (2123c <unready_thread+0x34>)
   21226:	6898      	ldr	r0, [r3, #8]
   21228:	1b03      	subs	r3, r0, r4
   2122a:	4258      	negs	r0, r3
}
   2122c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   21230:	4158      	adcs	r0, r3
   21232:	f7ff bbfd 	b.w	20a30 <update_cache>
   21236:	bf00      	nop
   21238:	20001bec 	.word	0x20001bec
   2123c:	20001bc4 	.word	0x20001bc4

00021240 <z_remove_thread_from_ready_q>:
{
   21240:	b538      	push	{r3, r4, r5, lr}
   21242:	4604      	mov	r4, r0
	__asm__ volatile(
   21244:	f04f 0320 	mov.w	r3, #32
   21248:	f3ef 8511 	mrs	r5, BASEPRI
   2124c:	f383 8811 	msr	BASEPRI, r3
   21250:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21254:	4817      	ldr	r0, [pc, #92]	; (212b4 <z_remove_thread_from_ready_q+0x74>)
   21256:	f000 fe2d 	bl	21eb4 <z_spin_lock_valid>
   2125a:	b968      	cbnz	r0, 21278 <z_remove_thread_from_ready_q+0x38>
   2125c:	4a16      	ldr	r2, [pc, #88]	; (212b8 <z_remove_thread_from_ready_q+0x78>)
   2125e:	4917      	ldr	r1, [pc, #92]	; (212bc <z_remove_thread_from_ready_q+0x7c>)
   21260:	4817      	ldr	r0, [pc, #92]	; (212c0 <z_remove_thread_from_ready_q+0x80>)
   21262:	234a      	movs	r3, #74	; 0x4a
   21264:	f002 f831 	bl	232ca <printk>
   21268:	4912      	ldr	r1, [pc, #72]	; (212b4 <z_remove_thread_from_ready_q+0x74>)
   2126a:	4816      	ldr	r0, [pc, #88]	; (212c4 <z_remove_thread_from_ready_q+0x84>)
   2126c:	f002 f82d 	bl	232ca <printk>
   21270:	4811      	ldr	r0, [pc, #68]	; (212b8 <z_remove_thread_from_ready_q+0x78>)
   21272:	214a      	movs	r1, #74	; 0x4a
   21274:	f002 f86c 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   21278:	480e      	ldr	r0, [pc, #56]	; (212b4 <z_remove_thread_from_ready_q+0x74>)
   2127a:	f000 fe39 	bl	21ef0 <z_spin_lock_set_owner>
		unready_thread(thread);
   2127e:	4620      	mov	r0, r4
   21280:	f7ff ffc2 	bl	21208 <unready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21284:	480b      	ldr	r0, [pc, #44]	; (212b4 <z_remove_thread_from_ready_q+0x74>)
   21286:	f000 fe23 	bl	21ed0 <z_spin_unlock_valid>
   2128a:	b968      	cbnz	r0, 212a8 <z_remove_thread_from_ready_q+0x68>
   2128c:	4a0a      	ldr	r2, [pc, #40]	; (212b8 <z_remove_thread_from_ready_q+0x78>)
   2128e:	490e      	ldr	r1, [pc, #56]	; (212c8 <z_remove_thread_from_ready_q+0x88>)
   21290:	480b      	ldr	r0, [pc, #44]	; (212c0 <z_remove_thread_from_ready_q+0x80>)
   21292:	235d      	movs	r3, #93	; 0x5d
   21294:	f002 f819 	bl	232ca <printk>
   21298:	4906      	ldr	r1, [pc, #24]	; (212b4 <z_remove_thread_from_ready_q+0x74>)
   2129a:	480c      	ldr	r0, [pc, #48]	; (212cc <z_remove_thread_from_ready_q+0x8c>)
   2129c:	f002 f815 	bl	232ca <printk>
   212a0:	4805      	ldr	r0, [pc, #20]	; (212b8 <z_remove_thread_from_ready_q+0x78>)
   212a2:	215d      	movs	r1, #93	; 0x5d
   212a4:	f002 f854 	bl	23350 <assert_post_action>
	__asm__ volatile(
   212a8:	f385 8811 	msr	BASEPRI, r5
   212ac:	f3bf 8f6f 	isb	sy
}
   212b0:	bd38      	pop	{r3, r4, r5, pc}
   212b2:	bf00      	nop
   212b4:	20001bf8 	.word	0x20001bf8
   212b8:	00029daf 	.word	0x00029daf
   212bc:	00029dd1 	.word	0x00029dd1
   212c0:	000297e6 	.word	0x000297e6
   212c4:	00029de6 	.word	0x00029de6
   212c8:	00029dfe 	.word	0x00029dfe
   212cc:	00029e15 	.word	0x00029e15

000212d0 <add_to_waitq_locked>:
{
   212d0:	b538      	push	{r3, r4, r5, lr}
   212d2:	4604      	mov	r4, r0
   212d4:	460d      	mov	r5, r1
	unready_thread(thread);
   212d6:	f7ff ff97 	bl	21208 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   212da:	7b63      	ldrb	r3, [r4, #13]
   212dc:	f043 0302 	orr.w	r3, r3, #2
   212e0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   212e2:	b33d      	cbz	r5, 21334 <add_to_waitq_locked+0x64>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   212e4:	4b17      	ldr	r3, [pc, #92]	; (21344 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   212e6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   212e8:	429c      	cmp	r4, r3
   212ea:	d10b      	bne.n	21304 <add_to_waitq_locked+0x34>
   212ec:	4916      	ldr	r1, [pc, #88]	; (21348 <add_to_waitq_locked+0x78>)
   212ee:	4817      	ldr	r0, [pc, #92]	; (2134c <add_to_waitq_locked+0x7c>)
   212f0:	4a17      	ldr	r2, [pc, #92]	; (21350 <add_to_waitq_locked+0x80>)
   212f2:	f44f 7355 	mov.w	r3, #852	; 0x354
   212f6:	f001 ffe8 	bl	232ca <printk>
   212fa:	4815      	ldr	r0, [pc, #84]	; (21350 <add_to_waitq_locked+0x80>)
   212fc:	f44f 7155 	mov.w	r1, #852	; 0x354
   21300:	f002 f826 	bl	23350 <assert_post_action>
	return list->head == list;
   21304:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21306:	429d      	cmp	r5, r3
   21308:	bf08      	it	eq
   2130a:	2300      	moveq	r3, #0
   2130c:	2b00      	cmp	r3, #0
   2130e:	bf38      	it	cc
   21310:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21312:	b183      	cbz	r3, 21336 <add_to_waitq_locked+0x66>
	if (thread_1->base.prio < thread_2->base.prio) {
   21314:	f994 100e 	ldrsb.w	r1, [r4, #14]
   21318:	f993 200e 	ldrsb.w	r2, [r3, #14]
   2131c:	4291      	cmp	r1, r2
   2131e:	db04      	blt.n	2132a <add_to_waitq_locked+0x5a>
	return (node == list->tail) ? NULL : node->next;
   21320:	686a      	ldr	r2, [r5, #4]
   21322:	429a      	cmp	r2, r3
   21324:	d007      	beq.n	21336 <add_to_waitq_locked+0x66>
   21326:	681b      	ldr	r3, [r3, #0]
   21328:	e7f3      	b.n	21312 <add_to_waitq_locked+0x42>
	node->prev = successor->prev;
   2132a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2132c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   21330:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21332:	605c      	str	r4, [r3, #4]
}
   21334:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   21336:	686b      	ldr	r3, [r5, #4]
   21338:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2133a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2133c:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   2133e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21340:	606c      	str	r4, [r5, #4]
   21342:	e7f7      	b.n	21334 <add_to_waitq_locked+0x64>
   21344:	20001a90 	.word	0x20001a90
   21348:	0002fd63 	.word	0x0002fd63
   2134c:	000297e6 	.word	0x000297e6
   21350:	0002fd2a 	.word	0x0002fd2a

00021354 <pend>:
{
   21354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21356:	4604      	mov	r4, r0
   21358:	460e      	mov	r6, r1
   2135a:	4615      	mov	r5, r2
	__asm__ volatile(
   2135c:	f04f 0320 	mov.w	r3, #32
   21360:	f3ef 8711 	mrs	r7, BASEPRI
   21364:	f383 8811 	msr	BASEPRI, r3
   21368:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2136c:	4822      	ldr	r0, [pc, #136]	; (213f8 <pend+0xa4>)
   2136e:	f000 fda1 	bl	21eb4 <z_spin_lock_valid>
   21372:	b968      	cbnz	r0, 21390 <pend+0x3c>
   21374:	4a21      	ldr	r2, [pc, #132]	; (213fc <pend+0xa8>)
   21376:	4922      	ldr	r1, [pc, #136]	; (21400 <pend+0xac>)
   21378:	4822      	ldr	r0, [pc, #136]	; (21404 <pend+0xb0>)
   2137a:	234a      	movs	r3, #74	; 0x4a
   2137c:	f001 ffa5 	bl	232ca <printk>
   21380:	491d      	ldr	r1, [pc, #116]	; (213f8 <pend+0xa4>)
   21382:	4821      	ldr	r0, [pc, #132]	; (21408 <pend+0xb4>)
   21384:	f001 ffa1 	bl	232ca <printk>
   21388:	481c      	ldr	r0, [pc, #112]	; (213fc <pend+0xa8>)
   2138a:	214a      	movs	r1, #74	; 0x4a
   2138c:	f001 ffe0 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   21390:	4819      	ldr	r0, [pc, #100]	; (213f8 <pend+0xa4>)
   21392:	f000 fdad 	bl	21ef0 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   21396:	4620      	mov	r0, r4
   21398:	4631      	mov	r1, r6
   2139a:	f7ff ff99 	bl	212d0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2139e:	4816      	ldr	r0, [pc, #88]	; (213f8 <pend+0xa4>)
   213a0:	f000 fd96 	bl	21ed0 <z_spin_unlock_valid>
   213a4:	b968      	cbnz	r0, 213c2 <pend+0x6e>
   213a6:	4a15      	ldr	r2, [pc, #84]	; (213fc <pend+0xa8>)
   213a8:	4918      	ldr	r1, [pc, #96]	; (2140c <pend+0xb8>)
   213aa:	4816      	ldr	r0, [pc, #88]	; (21404 <pend+0xb0>)
   213ac:	235d      	movs	r3, #93	; 0x5d
   213ae:	f001 ff8c 	bl	232ca <printk>
   213b2:	4911      	ldr	r1, [pc, #68]	; (213f8 <pend+0xa4>)
   213b4:	4816      	ldr	r0, [pc, #88]	; (21410 <pend+0xbc>)
   213b6:	f001 ff88 	bl	232ca <printk>
   213ba:	4810      	ldr	r0, [pc, #64]	; (213fc <pend+0xa8>)
   213bc:	215d      	movs	r1, #93	; 0x5d
   213be:	f001 ffc7 	bl	23350 <assert_post_action>
	__asm__ volatile(
   213c2:	f387 8811 	msr	BASEPRI, r7
   213c6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   213ca:	1c6b      	adds	r3, r5, #1
   213cc:	d013      	beq.n	213f6 <pend+0xa2>
   213ce:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   213d2:	f240 30e7 	movw	r0, #999	; 0x3e7
   213d6:	2100      	movs	r1, #0
   213d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   213dc:	2300      	movs	r3, #0
   213de:	fbe6 0105 	umlal	r0, r1, r6, r5
   213e2:	f7de fecd 	bl	180 <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   213e6:	490b      	ldr	r1, [pc, #44]	; (21414 <pend+0xc0>)
   213e8:	1c42      	adds	r2, r0, #1
   213ea:	f104 0018 	add.w	r0, r4, #24
}
   213ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   213f2:	f000 bedf 	b.w	221b4 <z_add_timeout>
   213f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   213f8:	20001bf8 	.word	0x20001bf8
   213fc:	00029daf 	.word	0x00029daf
   21400:	00029dd1 	.word	0x00029dd1
   21404:	000297e6 	.word	0x000297e6
   21408:	00029de6 	.word	0x00029de6
   2140c:	00029dfe 	.word	0x00029dfe
   21410:	00029e15 	.word	0x00029e15
   21414:	00020c9d 	.word	0x00020c9d

00021418 <z_pend_curr_irqlock>:
{
   21418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pend(_current, wait_q, timeout);
   2141a:	4d23      	ldr	r5, [pc, #140]	; (214a8 <z_pend_curr_irqlock+0x90>)
	pending_current = _current;
   2141c:	4c23      	ldr	r4, [pc, #140]	; (214ac <z_pend_curr_irqlock+0x94>)
{
   2141e:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   21420:	68a8      	ldr	r0, [r5, #8]
   21422:	f7ff ff97 	bl	21354 <pend>
	pending_current = _current;
   21426:	68ab      	ldr	r3, [r5, #8]
   21428:	6023      	str	r3, [r4, #0]
   2142a:	4630      	mov	r0, r6
   2142c:	f7e3 f8fa 	bl	4624 <arch_swap>
   21430:	4606      	mov	r6, r0
	__asm__ volatile(
   21432:	f04f 0320 	mov.w	r3, #32
   21436:	f3ef 8711 	mrs	r7, BASEPRI
   2143a:	f383 8811 	msr	BASEPRI, r3
   2143e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21442:	481b      	ldr	r0, [pc, #108]	; (214b0 <z_pend_curr_irqlock+0x98>)
   21444:	f000 fd36 	bl	21eb4 <z_spin_lock_valid>
   21448:	b968      	cbnz	r0, 21466 <z_pend_curr_irqlock+0x4e>
   2144a:	4a1a      	ldr	r2, [pc, #104]	; (214b4 <z_pend_curr_irqlock+0x9c>)
   2144c:	491a      	ldr	r1, [pc, #104]	; (214b8 <z_pend_curr_irqlock+0xa0>)
   2144e:	481b      	ldr	r0, [pc, #108]	; (214bc <z_pend_curr_irqlock+0xa4>)
   21450:	234a      	movs	r3, #74	; 0x4a
   21452:	f001 ff3a 	bl	232ca <printk>
   21456:	4916      	ldr	r1, [pc, #88]	; (214b0 <z_pend_curr_irqlock+0x98>)
   21458:	4819      	ldr	r0, [pc, #100]	; (214c0 <z_pend_curr_irqlock+0xa8>)
   2145a:	f001 ff36 	bl	232ca <printk>
   2145e:	4815      	ldr	r0, [pc, #84]	; (214b4 <z_pend_curr_irqlock+0x9c>)
   21460:	214a      	movs	r1, #74	; 0x4a
   21462:	f001 ff75 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   21466:	4812      	ldr	r0, [pc, #72]	; (214b0 <z_pend_curr_irqlock+0x98>)
   21468:	f000 fd42 	bl	21ef0 <z_spin_lock_set_owner>
		if (pending_current == _current) {
   2146c:	6823      	ldr	r3, [r4, #0]
   2146e:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21470:	480f      	ldr	r0, [pc, #60]	; (214b0 <z_pend_curr_irqlock+0x98>)
   21472:	429a      	cmp	r2, r3
			pending_current = NULL;
   21474:	bf04      	itt	eq
   21476:	2300      	moveq	r3, #0
   21478:	6023      	streq	r3, [r4, #0]
   2147a:	f000 fd29 	bl	21ed0 <z_spin_unlock_valid>
   2147e:	b968      	cbnz	r0, 2149c <z_pend_curr_irqlock+0x84>
   21480:	4a0c      	ldr	r2, [pc, #48]	; (214b4 <z_pend_curr_irqlock+0x9c>)
   21482:	4910      	ldr	r1, [pc, #64]	; (214c4 <z_pend_curr_irqlock+0xac>)
   21484:	480d      	ldr	r0, [pc, #52]	; (214bc <z_pend_curr_irqlock+0xa4>)
   21486:	235d      	movs	r3, #93	; 0x5d
   21488:	f001 ff1f 	bl	232ca <printk>
   2148c:	4908      	ldr	r1, [pc, #32]	; (214b0 <z_pend_curr_irqlock+0x98>)
   2148e:	480e      	ldr	r0, [pc, #56]	; (214c8 <z_pend_curr_irqlock+0xb0>)
   21490:	f001 ff1b 	bl	232ca <printk>
   21494:	4807      	ldr	r0, [pc, #28]	; (214b4 <z_pend_curr_irqlock+0x9c>)
   21496:	215d      	movs	r1, #93	; 0x5d
   21498:	f001 ff5a 	bl	23350 <assert_post_action>
	__asm__ volatile(
   2149c:	f387 8811 	msr	BASEPRI, r7
   214a0:	f3bf 8f6f 	isb	sy
}
   214a4:	4630      	mov	r0, r6
   214a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   214a8:	20001bc4 	.word	0x20001bc4
   214ac:	20001bf4 	.word	0x20001bf4
   214b0:	20001bf8 	.word	0x20001bf8
   214b4:	00029daf 	.word	0x00029daf
   214b8:	00029dd1 	.word	0x00029dd1
   214bc:	000297e6 	.word	0x000297e6
   214c0:	00029de6 	.word	0x00029de6
   214c4:	00029dfe 	.word	0x00029dfe
   214c8:	00029e15 	.word	0x00029e15

000214cc <z_pend_curr>:
{
   214cc:	b538      	push	{r3, r4, r5, lr}
   214ce:	460d      	mov	r5, r1
   214d0:	4611      	mov	r1, r2
	pending_current = _current;
   214d2:	4a0f      	ldr	r2, [pc, #60]	; (21510 <z_pend_curr+0x44>)
{
   214d4:	4604      	mov	r4, r0
	pending_current = _current;
   214d6:	6890      	ldr	r0, [r2, #8]
   214d8:	4a0e      	ldr	r2, [pc, #56]	; (21514 <z_pend_curr+0x48>)
   214da:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   214dc:	461a      	mov	r2, r3
   214de:	f7ff ff39 	bl	21354 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   214e2:	4620      	mov	r0, r4
   214e4:	f000 fcf4 	bl	21ed0 <z_spin_unlock_valid>
   214e8:	b968      	cbnz	r0, 21506 <z_pend_curr+0x3a>
   214ea:	4a0b      	ldr	r2, [pc, #44]	; (21518 <z_pend_curr+0x4c>)
   214ec:	490b      	ldr	r1, [pc, #44]	; (2151c <z_pend_curr+0x50>)
   214ee:	480c      	ldr	r0, [pc, #48]	; (21520 <z_pend_curr+0x54>)
   214f0:	2374      	movs	r3, #116	; 0x74
   214f2:	f001 feea 	bl	232ca <printk>
   214f6:	480b      	ldr	r0, [pc, #44]	; (21524 <z_pend_curr+0x58>)
   214f8:	4621      	mov	r1, r4
   214fa:	f001 fee6 	bl	232ca <printk>
   214fe:	4806      	ldr	r0, [pc, #24]	; (21518 <z_pend_curr+0x4c>)
   21500:	2174      	movs	r1, #116	; 0x74
   21502:	f001 ff25 	bl	23350 <assert_post_action>
   21506:	4628      	mov	r0, r5
}
   21508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2150c:	f7e3 b88a 	b.w	4624 <arch_swap>
   21510:	20001bc4 	.word	0x20001bc4
   21514:	20001bf4 	.word	0x20001bf4
   21518:	00029daf 	.word	0x00029daf
   2151c:	00029dfe 	.word	0x00029dfe
   21520:	000297e6 	.word	0x000297e6
   21524:	00029e15 	.word	0x00029e15

00021528 <z_set_prio>:
{
   21528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2152a:	4604      	mov	r4, r0
   2152c:	460e      	mov	r6, r1
	__asm__ volatile(
   2152e:	f04f 0320 	mov.w	r3, #32
   21532:	f3ef 8711 	mrs	r7, BASEPRI
   21536:	f383 8811 	msr	BASEPRI, r3
   2153a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2153e:	4839      	ldr	r0, [pc, #228]	; (21624 <z_set_prio+0xfc>)
   21540:	f000 fcb8 	bl	21eb4 <z_spin_lock_valid>
   21544:	b968      	cbnz	r0, 21562 <z_set_prio+0x3a>
   21546:	4a38      	ldr	r2, [pc, #224]	; (21628 <z_set_prio+0x100>)
   21548:	4938      	ldr	r1, [pc, #224]	; (2162c <z_set_prio+0x104>)
   2154a:	4839      	ldr	r0, [pc, #228]	; (21630 <z_set_prio+0x108>)
   2154c:	234a      	movs	r3, #74	; 0x4a
   2154e:	f001 febc 	bl	232ca <printk>
   21552:	4934      	ldr	r1, [pc, #208]	; (21624 <z_set_prio+0xfc>)
   21554:	4837      	ldr	r0, [pc, #220]	; (21634 <z_set_prio+0x10c>)
   21556:	f001 feb8 	bl	232ca <printk>
   2155a:	4833      	ldr	r0, [pc, #204]	; (21628 <z_set_prio+0x100>)
   2155c:	214a      	movs	r1, #74	; 0x4a
   2155e:	f001 fef7 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   21562:	4830      	ldr	r0, [pc, #192]	; (21624 <z_set_prio+0xfc>)
   21564:	f000 fcc4 	bl	21ef0 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   21568:	7b63      	ldrb	r3, [r4, #13]
   2156a:	06db      	lsls	r3, r3, #27
   2156c:	b276      	sxtb	r6, r6
   2156e:	d155      	bne.n	2161c <z_set_prio+0xf4>
	return !sys_dnode_is_linked(&t->node);
   21570:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   21572:	2d00      	cmp	r5, #0
   21574:	d152      	bne.n	2161c <z_set_prio+0xf4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   21576:	4830      	ldr	r0, [pc, #192]	; (21638 <z_set_prio+0x110>)
   21578:	4621      	mov	r1, r4
   2157a:	f7ff f9d5 	bl	20928 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2157e:	4b2f      	ldr	r3, [pc, #188]	; (2163c <z_set_prio+0x114>)
				thread->base.prio = prio;
   21580:	73a6      	strb	r6, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21582:	429c      	cmp	r4, r3
   21584:	d10b      	bne.n	2159e <z_set_prio+0x76>
   21586:	492e      	ldr	r1, [pc, #184]	; (21640 <z_set_prio+0x118>)
   21588:	4829      	ldr	r0, [pc, #164]	; (21630 <z_set_prio+0x108>)
   2158a:	4a2e      	ldr	r2, [pc, #184]	; (21644 <z_set_prio+0x11c>)
   2158c:	f44f 7355 	mov.w	r3, #852	; 0x354
   21590:	f001 fe9b 	bl	232ca <printk>
   21594:	482b      	ldr	r0, [pc, #172]	; (21644 <z_set_prio+0x11c>)
   21596:	f44f 7155 	mov.w	r1, #852	; 0x354
   2159a:	f001 fed9 	bl	23350 <assert_post_action>
	return list->head == list;
   2159e:	4a2a      	ldr	r2, [pc, #168]	; (21648 <z_set_prio+0x120>)
   215a0:	4613      	mov	r3, r2
   215a2:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   215a6:	4298      	cmp	r0, r3
   215a8:	bf18      	it	ne
   215aa:	4605      	movne	r5, r0
   215ac:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   215ae:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   215b0:	4619      	mov	r1, r3
   215b2:	462b      	mov	r3, r5
   215b4:	bf38      	it	cc
   215b6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   215b8:	b353      	cbz	r3, 21610 <z_set_prio+0xe8>
	if (thread_1->base.prio < thread_2->base.prio) {
   215ba:	f994 600e 	ldrsb.w	r6, [r4, #14]
   215be:	f993 500e 	ldrsb.w	r5, [r3, #14]
   215c2:	42ae      	cmp	r6, r5
   215c4:	db03      	blt.n	215ce <z_set_prio+0xa6>
	return (node == list->tail) ? NULL : node->next;
   215c6:	4298      	cmp	r0, r3
   215c8:	d022      	beq.n	21610 <z_set_prio+0xe8>
   215ca:	681b      	ldr	r3, [r3, #0]
   215cc:	e7f4      	b.n	215b8 <z_set_prio+0x90>
	node->prev = successor->prev;
   215ce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   215d0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   215d4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   215d6:	605c      	str	r4, [r3, #4]
			update_cache(1);
   215d8:	2001      	movs	r0, #1
   215da:	f7ff fa29 	bl	20a30 <update_cache>
   215de:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   215e0:	4810      	ldr	r0, [pc, #64]	; (21624 <z_set_prio+0xfc>)
   215e2:	f000 fc75 	bl	21ed0 <z_spin_unlock_valid>
   215e6:	b968      	cbnz	r0, 21604 <z_set_prio+0xdc>
   215e8:	4a0f      	ldr	r2, [pc, #60]	; (21628 <z_set_prio+0x100>)
   215ea:	4918      	ldr	r1, [pc, #96]	; (2164c <z_set_prio+0x124>)
   215ec:	4810      	ldr	r0, [pc, #64]	; (21630 <z_set_prio+0x108>)
   215ee:	235d      	movs	r3, #93	; 0x5d
   215f0:	f001 fe6b 	bl	232ca <printk>
   215f4:	490b      	ldr	r1, [pc, #44]	; (21624 <z_set_prio+0xfc>)
   215f6:	4816      	ldr	r0, [pc, #88]	; (21650 <z_set_prio+0x128>)
   215f8:	f001 fe67 	bl	232ca <printk>
   215fc:	480a      	ldr	r0, [pc, #40]	; (21628 <z_set_prio+0x100>)
   215fe:	215d      	movs	r1, #93	; 0x5d
   21600:	f001 fea6 	bl	23350 <assert_post_action>
	__asm__ volatile(
   21604:	f387 8811 	msr	BASEPRI, r7
   21608:	f3bf 8f6f 	isb	sy
}
   2160c:	4620      	mov	r0, r4
   2160e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   21610:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   21614:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   21616:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21618:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   2161a:	e7dd      	b.n	215d8 <z_set_prio+0xb0>
			thread->base.prio = prio;
   2161c:	73a6      	strb	r6, [r4, #14]
   2161e:	2400      	movs	r4, #0
   21620:	e7de      	b.n	215e0 <z_set_prio+0xb8>
   21622:	bf00      	nop
   21624:	20001bf8 	.word	0x20001bf8
   21628:	00029daf 	.word	0x00029daf
   2162c:	00029dd1 	.word	0x00029dd1
   21630:	000297e6 	.word	0x000297e6
   21634:	00029de6 	.word	0x00029de6
   21638:	20001bec 	.word	0x20001bec
   2163c:	20001a90 	.word	0x20001a90
   21640:	0002fd63 	.word	0x0002fd63
   21644:	0002fd2a 	.word	0x0002fd2a
   21648:	20001bc4 	.word	0x20001bc4
   2164c:	00029dfe 	.word	0x00029dfe
   21650:	00029e15 	.word	0x00029e15

00021654 <z_unpend_first_thread>:
{
   21654:	b538      	push	{r3, r4, r5, lr}
   21656:	4604      	mov	r4, r0
	__asm__ volatile(
   21658:	f04f 0320 	mov.w	r3, #32
   2165c:	f3ef 8511 	mrs	r5, BASEPRI
   21660:	f383 8811 	msr	BASEPRI, r3
   21664:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21668:	483b      	ldr	r0, [pc, #236]	; (21758 <z_unpend_first_thread+0x104>)
   2166a:	f000 fc23 	bl	21eb4 <z_spin_lock_valid>
   2166e:	b968      	cbnz	r0, 2168c <z_unpend_first_thread+0x38>
   21670:	4a3a      	ldr	r2, [pc, #232]	; (2175c <z_unpend_first_thread+0x108>)
   21672:	493b      	ldr	r1, [pc, #236]	; (21760 <z_unpend_first_thread+0x10c>)
   21674:	483b      	ldr	r0, [pc, #236]	; (21764 <z_unpend_first_thread+0x110>)
   21676:	234a      	movs	r3, #74	; 0x4a
   21678:	f001 fe27 	bl	232ca <printk>
   2167c:	4936      	ldr	r1, [pc, #216]	; (21758 <z_unpend_first_thread+0x104>)
   2167e:	483a      	ldr	r0, [pc, #232]	; (21768 <z_unpend_first_thread+0x114>)
   21680:	f001 fe23 	bl	232ca <printk>
   21684:	4835      	ldr	r0, [pc, #212]	; (2175c <z_unpend_first_thread+0x108>)
   21686:	214a      	movs	r1, #74	; 0x4a
   21688:	f001 fe62 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   2168c:	4832      	ldr	r0, [pc, #200]	; (21758 <z_unpend_first_thread+0x104>)
   2168e:	f000 fc2f 	bl	21ef0 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   21692:	4620      	mov	r0, r4
   21694:	f006 fe4d 	bl	28332 <z_priq_dumb_best>
   21698:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2169a:	482f      	ldr	r0, [pc, #188]	; (21758 <z_unpend_first_thread+0x104>)
   2169c:	f000 fc18 	bl	21ed0 <z_spin_unlock_valid>
   216a0:	b968      	cbnz	r0, 216be <z_unpend_first_thread+0x6a>
   216a2:	4a2e      	ldr	r2, [pc, #184]	; (2175c <z_unpend_first_thread+0x108>)
   216a4:	4931      	ldr	r1, [pc, #196]	; (2176c <z_unpend_first_thread+0x118>)
   216a6:	482f      	ldr	r0, [pc, #188]	; (21764 <z_unpend_first_thread+0x110>)
   216a8:	235d      	movs	r3, #93	; 0x5d
   216aa:	f001 fe0e 	bl	232ca <printk>
   216ae:	492a      	ldr	r1, [pc, #168]	; (21758 <z_unpend_first_thread+0x104>)
   216b0:	482f      	ldr	r0, [pc, #188]	; (21770 <z_unpend_first_thread+0x11c>)
   216b2:	f001 fe0a 	bl	232ca <printk>
   216b6:	4829      	ldr	r0, [pc, #164]	; (2175c <z_unpend_first_thread+0x108>)
   216b8:	215d      	movs	r1, #93	; 0x5d
   216ba:	f001 fe49 	bl	23350 <assert_post_action>
	__asm__ volatile(
   216be:	f385 8811 	msr	BASEPRI, r5
   216c2:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   216c6:	2c00      	cmp	r4, #0
   216c8:	d043      	beq.n	21752 <z_unpend_first_thread+0xfe>
	__asm__ volatile(
   216ca:	f04f 0320 	mov.w	r3, #32
   216ce:	f3ef 8511 	mrs	r5, BASEPRI
   216d2:	f383 8811 	msr	BASEPRI, r3
   216d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   216da:	481f      	ldr	r0, [pc, #124]	; (21758 <z_unpend_first_thread+0x104>)
   216dc:	f000 fbea 	bl	21eb4 <z_spin_lock_valid>
   216e0:	b968      	cbnz	r0, 216fe <z_unpend_first_thread+0xaa>
   216e2:	4a1e      	ldr	r2, [pc, #120]	; (2175c <z_unpend_first_thread+0x108>)
   216e4:	491e      	ldr	r1, [pc, #120]	; (21760 <z_unpend_first_thread+0x10c>)
   216e6:	481f      	ldr	r0, [pc, #124]	; (21764 <z_unpend_first_thread+0x110>)
   216e8:	234a      	movs	r3, #74	; 0x4a
   216ea:	f001 fdee 	bl	232ca <printk>
   216ee:	491a      	ldr	r1, [pc, #104]	; (21758 <z_unpend_first_thread+0x104>)
   216f0:	481d      	ldr	r0, [pc, #116]	; (21768 <z_unpend_first_thread+0x114>)
   216f2:	f001 fdea 	bl	232ca <printk>
   216f6:	4819      	ldr	r0, [pc, #100]	; (2175c <z_unpend_first_thread+0x108>)
   216f8:	214a      	movs	r1, #74	; 0x4a
   216fa:	f001 fe29 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   216fe:	4816      	ldr	r0, [pc, #88]	; (21758 <z_unpend_first_thread+0x104>)
   21700:	f000 fbf6 	bl	21ef0 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   21704:	f104 0008 	add.w	r0, r4, #8
   21708:	f7fe ff30 	bl	2056c <pended_on.isra.0>
   2170c:	4621      	mov	r1, r4
   2170e:	f7ff f90b 	bl	20928 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   21712:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21714:	4810      	ldr	r0, [pc, #64]	; (21758 <z_unpend_first_thread+0x104>)
   21716:	f023 0302 	bic.w	r3, r3, #2
   2171a:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   2171c:	2300      	movs	r3, #0
   2171e:	60a3      	str	r3, [r4, #8]
   21720:	f000 fbd6 	bl	21ed0 <z_spin_unlock_valid>
   21724:	b968      	cbnz	r0, 21742 <z_unpend_first_thread+0xee>
   21726:	4a0d      	ldr	r2, [pc, #52]	; (2175c <z_unpend_first_thread+0x108>)
   21728:	4910      	ldr	r1, [pc, #64]	; (2176c <z_unpend_first_thread+0x118>)
   2172a:	480e      	ldr	r0, [pc, #56]	; (21764 <z_unpend_first_thread+0x110>)
   2172c:	235d      	movs	r3, #93	; 0x5d
   2172e:	f001 fdcc 	bl	232ca <printk>
   21732:	4909      	ldr	r1, [pc, #36]	; (21758 <z_unpend_first_thread+0x104>)
   21734:	480e      	ldr	r0, [pc, #56]	; (21770 <z_unpend_first_thread+0x11c>)
   21736:	f001 fdc8 	bl	232ca <printk>
   2173a:	4808      	ldr	r0, [pc, #32]	; (2175c <z_unpend_first_thread+0x108>)
   2173c:	215d      	movs	r1, #93	; 0x5d
   2173e:	f001 fe07 	bl	23350 <assert_post_action>
	__asm__ volatile(
   21742:	f385 8811 	msr	BASEPRI, r5
   21746:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   2174a:	f104 0018 	add.w	r0, r4, #24
   2174e:	f000 fdd9 	bl	22304 <z_abort_timeout>
}
   21752:	4620      	mov	r0, r4
   21754:	bd38      	pop	{r3, r4, r5, pc}
   21756:	bf00      	nop
   21758:	20001bf8 	.word	0x20001bf8
   2175c:	00029daf 	.word	0x00029daf
   21760:	00029dd1 	.word	0x00029dd1
   21764:	000297e6 	.word	0x000297e6
   21768:	00029de6 	.word	0x00029de6
   2176c:	00029dfe 	.word	0x00029dfe
   21770:	00029e15 	.word	0x00029e15

00021774 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   21774:	4b04      	ldr	r3, [pc, #16]	; (21788 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   21776:	2100      	movs	r1, #0
   21778:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2177c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   21780:	4608      	mov	r0, r1
   21782:	f7fe bf21 	b.w	205c8 <k_sched_time_slice_set>
   21786:	bf00      	nop
   21788:	20001bc4 	.word	0x20001bc4

0002178c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   2178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2178e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21792:	b173      	cbz	r3, 217b2 <z_impl_k_yield+0x26>
   21794:	4946      	ldr	r1, [pc, #280]	; (218b0 <z_impl_k_yield+0x124>)
   21796:	4a47      	ldr	r2, [pc, #284]	; (218b4 <z_impl_k_yield+0x128>)
   21798:	4847      	ldr	r0, [pc, #284]	; (218b8 <z_impl_k_yield+0x12c>)
   2179a:	f240 435f 	movw	r3, #1119	; 0x45f
   2179e:	f001 fd94 	bl	232ca <printk>
   217a2:	4846      	ldr	r0, [pc, #280]	; (218bc <z_impl_k_yield+0x130>)
   217a4:	f001 fd91 	bl	232ca <printk>
   217a8:	4842      	ldr	r0, [pc, #264]	; (218b4 <z_impl_k_yield+0x128>)
   217aa:	f240 415f 	movw	r1, #1119	; 0x45f
   217ae:	f001 fdcf 	bl	23350 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   217b2:	4c43      	ldr	r4, [pc, #268]	; (218c0 <z_impl_k_yield+0x134>)
   217b4:	4e43      	ldr	r6, [pc, #268]	; (218c4 <z_impl_k_yield+0x138>)
   217b6:	68a2      	ldr	r2, [r4, #8]
   217b8:	42b2      	cmp	r2, r6
   217ba:	d067      	beq.n	2188c <z_impl_k_yield+0x100>
	__asm__ volatile(
   217bc:	f04f 0320 	mov.w	r3, #32
   217c0:	f3ef 8711 	mrs	r7, BASEPRI
   217c4:	f383 8811 	msr	BASEPRI, r3
   217c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   217cc:	483e      	ldr	r0, [pc, #248]	; (218c8 <z_impl_k_yield+0x13c>)
   217ce:	f000 fb71 	bl	21eb4 <z_spin_lock_valid>
   217d2:	b968      	cbnz	r0, 217f0 <z_impl_k_yield+0x64>
   217d4:	4a3d      	ldr	r2, [pc, #244]	; (218cc <z_impl_k_yield+0x140>)
   217d6:	493e      	ldr	r1, [pc, #248]	; (218d0 <z_impl_k_yield+0x144>)
   217d8:	4837      	ldr	r0, [pc, #220]	; (218b8 <z_impl_k_yield+0x12c>)
   217da:	234a      	movs	r3, #74	; 0x4a
   217dc:	f001 fd75 	bl	232ca <printk>
   217e0:	4939      	ldr	r1, [pc, #228]	; (218c8 <z_impl_k_yield+0x13c>)
   217e2:	483c      	ldr	r0, [pc, #240]	; (218d4 <z_impl_k_yield+0x148>)
   217e4:	f001 fd71 	bl	232ca <printk>
   217e8:	4838      	ldr	r0, [pc, #224]	; (218cc <z_impl_k_yield+0x140>)
   217ea:	214a      	movs	r1, #74	; 0x4a
   217ec:	f001 fdb0 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   217f0:	4835      	ldr	r0, [pc, #212]	; (218c8 <z_impl_k_yield+0x13c>)
   217f2:	f000 fb7d 	bl	21ef0 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   217f6:	68a1      	ldr	r1, [r4, #8]
   217f8:	4837      	ldr	r0, [pc, #220]	; (218d8 <z_impl_k_yield+0x14c>)
   217fa:	f7ff f895 	bl	20928 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   217fe:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21800:	42b5      	cmp	r5, r6
   21802:	d10b      	bne.n	2181c <z_impl_k_yield+0x90>
   21804:	4935      	ldr	r1, [pc, #212]	; (218dc <z_impl_k_yield+0x150>)
   21806:	482c      	ldr	r0, [pc, #176]	; (218b8 <z_impl_k_yield+0x12c>)
   21808:	4a2a      	ldr	r2, [pc, #168]	; (218b4 <z_impl_k_yield+0x128>)
   2180a:	f44f 7355 	mov.w	r3, #852	; 0x354
   2180e:	f001 fd5c 	bl	232ca <printk>
   21812:	4828      	ldr	r0, [pc, #160]	; (218b4 <z_impl_k_yield+0x128>)
   21814:	f44f 7155 	mov.w	r1, #852	; 0x354
   21818:	f001 fd9a 	bl	23350 <assert_post_action>
	return list->head == list;
   2181c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2181e:	492e      	ldr	r1, [pc, #184]	; (218d8 <z_impl_k_yield+0x14c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21820:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21822:	428b      	cmp	r3, r1
   21824:	bf08      	it	eq
   21826:	2300      	moveq	r3, #0
   21828:	2b00      	cmp	r3, #0
   2182a:	bf38      	it	cc
   2182c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2182e:	2b00      	cmp	r3, #0
   21830:	d038      	beq.n	218a4 <z_impl_k_yield+0x118>
	if (thread_1->base.prio < thread_2->base.prio) {
   21832:	f995 600e 	ldrsb.w	r6, [r5, #14]
   21836:	f993 000e 	ldrsb.w	r0, [r3, #14]
   2183a:	4286      	cmp	r6, r0
   2183c:	db03      	blt.n	21846 <z_impl_k_yield+0xba>
	return (node == list->tail) ? NULL : node->next;
   2183e:	4293      	cmp	r3, r2
   21840:	d030      	beq.n	218a4 <z_impl_k_yield+0x118>
   21842:	681b      	ldr	r3, [r3, #0]
   21844:	e7f3      	b.n	2182e <z_impl_k_yield+0xa2>
	node->prev = successor->prev;
   21846:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21848:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   2184c:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   2184e:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   21850:	68a2      	ldr	r2, [r4, #8]
	thread->base.thread_state |= states;
   21852:	7b53      	ldrb	r3, [r2, #13]
   21854:	f063 037f 	orn	r3, r3, #127	; 0x7f
			update_cache(1);
   21858:	2001      	movs	r0, #1
   2185a:	7353      	strb	r3, [r2, #13]
   2185c:	f7ff f8e8 	bl	20a30 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21860:	4819      	ldr	r0, [pc, #100]	; (218c8 <z_impl_k_yield+0x13c>)
   21862:	f000 fb35 	bl	21ed0 <z_spin_unlock_valid>
   21866:	b968      	cbnz	r0, 21884 <z_impl_k_yield+0xf8>
   21868:	4a18      	ldr	r2, [pc, #96]	; (218cc <z_impl_k_yield+0x140>)
   2186a:	491d      	ldr	r1, [pc, #116]	; (218e0 <z_impl_k_yield+0x154>)
   2186c:	4812      	ldr	r0, [pc, #72]	; (218b8 <z_impl_k_yield+0x12c>)
   2186e:	235d      	movs	r3, #93	; 0x5d
   21870:	f001 fd2b 	bl	232ca <printk>
   21874:	4914      	ldr	r1, [pc, #80]	; (218c8 <z_impl_k_yield+0x13c>)
   21876:	481b      	ldr	r0, [pc, #108]	; (218e4 <z_impl_k_yield+0x158>)
   21878:	f001 fd27 	bl	232ca <printk>
   2187c:	4813      	ldr	r0, [pc, #76]	; (218cc <z_impl_k_yield+0x140>)
   2187e:	215d      	movs	r1, #93	; 0x5d
   21880:	f001 fd66 	bl	23350 <assert_post_action>
	__asm__ volatile(
   21884:	f387 8811 	msr	BASEPRI, r7
   21888:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2188c:	f04f 0320 	mov.w	r3, #32
   21890:	f3ef 8011 	mrs	r0, BASEPRI
   21894:	f383 8811 	msr	BASEPRI, r3
   21898:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   2189c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   218a0:	f7e2 bec0 	b.w	4624 <arch_swap>
	node->prev = list->tail;
   218a4:	e9c5 1200 	strd	r1, r2, [r5]
	list->tail->next = node;
   218a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   218aa:	601d      	str	r5, [r3, #0]
	list->tail = node;
   218ac:	62e5      	str	r5, [r4, #44]	; 0x2c
}
   218ae:	e7cf      	b.n	21850 <z_impl_k_yield+0xc4>
   218b0:	0002fcf0 	.word	0x0002fcf0
   218b4:	0002fd2a 	.word	0x0002fd2a
   218b8:	000297e6 	.word	0x000297e6
   218bc:	0002f76a 	.word	0x0002f76a
   218c0:	20001bc4 	.word	0x20001bc4
   218c4:	20001a90 	.word	0x20001a90
   218c8:	20001bf8 	.word	0x20001bf8
   218cc:	00029daf 	.word	0x00029daf
   218d0:	00029dd1 	.word	0x00029dd1
   218d4:	00029de6 	.word	0x00029de6
   218d8:	20001bec 	.word	0x20001bec
   218dc:	0002fd63 	.word	0x0002fd63
   218e0:	00029dfe 	.word	0x00029dfe
   218e4:	00029e15 	.word	0x00029e15

000218e8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   218e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   218ea:	4604      	mov	r4, r0
   218ec:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   218f0:	b173      	cbz	r3, 21910 <z_tick_sleep+0x28>
   218f2:	493b      	ldr	r1, [pc, #236]	; (219e0 <z_tick_sleep+0xf8>)
   218f4:	4a3b      	ldr	r2, [pc, #236]	; (219e4 <z_tick_sleep+0xfc>)
   218f6:	483c      	ldr	r0, [pc, #240]	; (219e8 <z_tick_sleep+0x100>)
   218f8:	f240 437d 	movw	r3, #1149	; 0x47d
   218fc:	f001 fce5 	bl	232ca <printk>
   21900:	483a      	ldr	r0, [pc, #232]	; (219ec <z_tick_sleep+0x104>)
   21902:	f001 fce2 	bl	232ca <printk>
   21906:	4837      	ldr	r0, [pc, #220]	; (219e4 <z_tick_sleep+0xfc>)
   21908:	f240 417d 	movw	r1, #1149	; 0x47d
   2190c:	f001 fd20 	bl	23350 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   21910:	b924      	cbnz	r4, 2191c <z_tick_sleep+0x34>
	z_impl_k_yield();
   21912:	f7ff ff3b 	bl	2178c <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   21916:	4620      	mov	r0, r4
   21918:	b003      	add	sp, #12
   2191a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   2191c:	f006 fdbc 	bl	28498 <z_tick_get_32>
	ticks += _TICK_ALIGN;
   21920:	1c66      	adds	r6, r4, #1
	struct k_spinlock local_lock = {};
   21922:	2300      	movs	r3, #0
	expected_wakeup_time = ticks + z_tick_get_32();
   21924:	1834      	adds	r4, r6, r0
	struct k_spinlock local_lock = {};
   21926:	9301      	str	r3, [sp, #4]
   21928:	f04f 0320 	mov.w	r3, #32
   2192c:	f3ef 8711 	mrs	r7, BASEPRI
   21930:	f383 8811 	msr	BASEPRI, r3
   21934:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21938:	a801      	add	r0, sp, #4
   2193a:	f000 fabb 	bl	21eb4 <z_spin_lock_valid>
   2193e:	b968      	cbnz	r0, 2195c <z_tick_sleep+0x74>
   21940:	4a2b      	ldr	r2, [pc, #172]	; (219f0 <z_tick_sleep+0x108>)
   21942:	492c      	ldr	r1, [pc, #176]	; (219f4 <z_tick_sleep+0x10c>)
   21944:	4828      	ldr	r0, [pc, #160]	; (219e8 <z_tick_sleep+0x100>)
   21946:	234a      	movs	r3, #74	; 0x4a
   21948:	f001 fcbf 	bl	232ca <printk>
   2194c:	482a      	ldr	r0, [pc, #168]	; (219f8 <z_tick_sleep+0x110>)
   2194e:	a901      	add	r1, sp, #4
   21950:	f001 fcbb 	bl	232ca <printk>
   21954:	4826      	ldr	r0, [pc, #152]	; (219f0 <z_tick_sleep+0x108>)
   21956:	214a      	movs	r1, #74	; 0x4a
   21958:	f001 fcfa 	bl	23350 <assert_post_action>
	pending_current = _current;
   2195c:	4d27      	ldr	r5, [pc, #156]	; (219fc <z_tick_sleep+0x114>)
	z_spin_lock_set_owner(l);
   2195e:	a801      	add	r0, sp, #4
   21960:	f000 fac6 	bl	21ef0 <z_spin_lock_set_owner>
   21964:	4b26      	ldr	r3, [pc, #152]	; (21a00 <z_tick_sleep+0x118>)
   21966:	68a8      	ldr	r0, [r5, #8]
   21968:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   2196a:	f7ff fc69 	bl	21240 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2196e:	68a8      	ldr	r0, [r5, #8]
   21970:	4924      	ldr	r1, [pc, #144]	; (21a04 <z_tick_sleep+0x11c>)
   21972:	4632      	mov	r2, r6
   21974:	3018      	adds	r0, #24
   21976:	f000 fc1d 	bl	221b4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2197a:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2197c:	7b53      	ldrb	r3, [r2, #13]
   2197e:	f043 0310 	orr.w	r3, r3, #16
   21982:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21984:	a801      	add	r0, sp, #4
   21986:	f000 faa3 	bl	21ed0 <z_spin_unlock_valid>
   2198a:	b968      	cbnz	r0, 219a8 <z_tick_sleep+0xc0>
   2198c:	4a18      	ldr	r2, [pc, #96]	; (219f0 <z_tick_sleep+0x108>)
   2198e:	491e      	ldr	r1, [pc, #120]	; (21a08 <z_tick_sleep+0x120>)
   21990:	4815      	ldr	r0, [pc, #84]	; (219e8 <z_tick_sleep+0x100>)
   21992:	2374      	movs	r3, #116	; 0x74
   21994:	f001 fc99 	bl	232ca <printk>
   21998:	481c      	ldr	r0, [pc, #112]	; (21a0c <z_tick_sleep+0x124>)
   2199a:	a901      	add	r1, sp, #4
   2199c:	f001 fc95 	bl	232ca <printk>
   219a0:	4813      	ldr	r0, [pc, #76]	; (219f0 <z_tick_sleep+0x108>)
   219a2:	2174      	movs	r1, #116	; 0x74
   219a4:	f001 fcd4 	bl	23350 <assert_post_action>
   219a8:	4638      	mov	r0, r7
   219aa:	f7e2 fe3b 	bl	4624 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   219ae:	68ab      	ldr	r3, [r5, #8]
   219b0:	7b5b      	ldrb	r3, [r3, #13]
   219b2:	06db      	lsls	r3, r3, #27
   219b4:	d50e      	bpl.n	219d4 <z_tick_sleep+0xec>
   219b6:	4916      	ldr	r1, [pc, #88]	; (21a10 <z_tick_sleep+0x128>)
   219b8:	4a0a      	ldr	r2, [pc, #40]	; (219e4 <z_tick_sleep+0xfc>)
   219ba:	480b      	ldr	r0, [pc, #44]	; (219e8 <z_tick_sleep+0x100>)
   219bc:	f240 43a2 	movw	r3, #1186	; 0x4a2
   219c0:	f001 fc83 	bl	232ca <printk>
   219c4:	4809      	ldr	r0, [pc, #36]	; (219ec <z_tick_sleep+0x104>)
   219c6:	f001 fc80 	bl	232ca <printk>
   219ca:	4806      	ldr	r0, [pc, #24]	; (219e4 <z_tick_sleep+0xfc>)
   219cc:	f240 41a2 	movw	r1, #1186	; 0x4a2
   219d0:	f001 fcbe 	bl	23350 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   219d4:	f006 fd60 	bl	28498 <z_tick_get_32>
   219d8:	1a24      	subs	r4, r4, r0
   219da:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   219de:	e79a      	b.n	21916 <z_tick_sleep+0x2e>
   219e0:	0002fcf0 	.word	0x0002fcf0
   219e4:	0002fd2a 	.word	0x0002fd2a
   219e8:	000297e6 	.word	0x000297e6
   219ec:	0002f76a 	.word	0x0002f76a
   219f0:	00029daf 	.word	0x00029daf
   219f4:	00029dd1 	.word	0x00029dd1
   219f8:	00029de6 	.word	0x00029de6
   219fc:	20001bc4 	.word	0x20001bc4
   21a00:	20001bf4 	.word	0x20001bf4
   21a04:	00020c9d 	.word	0x00020c9d
   21a08:	00029dfe 	.word	0x00029dfe
   21a0c:	00029e15 	.word	0x00029e15
   21a10:	0002fdac 	.word	0x0002fdac

00021a14 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
   21a14:	b538      	push	{r3, r4, r5, lr}
   21a16:	4604      	mov	r4, r0
   21a18:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   21a1c:	b173      	cbz	r3, 21a3c <z_impl_k_sleep+0x28>
   21a1e:	4916      	ldr	r1, [pc, #88]	; (21a78 <z_impl_k_sleep+0x64>)
   21a20:	4a16      	ldr	r2, [pc, #88]	; (21a7c <z_impl_k_sleep+0x68>)
   21a22:	4817      	ldr	r0, [pc, #92]	; (21a80 <z_impl_k_sleep+0x6c>)
   21a24:	f240 43b1 	movw	r3, #1201	; 0x4b1
   21a28:	f001 fc4f 	bl	232ca <printk>
   21a2c:	4815      	ldr	r0, [pc, #84]	; (21a84 <z_impl_k_sleep+0x70>)
   21a2e:	f001 fc4c 	bl	232ca <printk>
   21a32:	4812      	ldr	r0, [pc, #72]	; (21a7c <z_impl_k_sleep+0x68>)
   21a34:	f240 41b1 	movw	r1, #1201	; 0x4b1
   21a38:	f001 fc8a 	bl	23350 <assert_post_action>

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21a3c:	1c63      	adds	r3, r4, #1
   21a3e:	d105      	bne.n	21a4c <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   21a40:	4b11      	ldr	r3, [pc, #68]	; (21a88 <z_impl_k_sleep+0x74>)
   21a42:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   21a44:	f7ff fae0 	bl	21008 <z_impl_k_thread_suspend>
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   21a48:	4620      	mov	r0, r4
   21a4a:	bd38      	pop	{r3, r4, r5, pc}
   21a4c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   21a50:	f240 30e7 	movw	r0, #999	; 0x3e7
   21a54:	2100      	movs	r1, #0
   21a56:	2300      	movs	r3, #0
   21a58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21a5c:	fbe5 0104 	umlal	r0, r1, r5, r4
   21a60:	f7de fb8e 	bl	180 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   21a64:	f7ff ff40 	bl	218e8 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   21a68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21a6c:	fba0 0103 	umull	r0, r1, r0, r3
   21a70:	0bc4      	lsrs	r4, r0, #15
   21a72:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   21a76:	e7e7      	b.n	21a48 <z_impl_k_sleep+0x34>
   21a78:	0002fcf0 	.word	0x0002fcf0
   21a7c:	0002fd2a 	.word	0x0002fd2a
   21a80:	000297e6 	.word	0x000297e6
   21a84:	0002f76a 	.word	0x0002f76a
   21a88:	20001bc4 	.word	0x20001bc4

00021a8c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   21a8c:	4b01      	ldr	r3, [pc, #4]	; (21a94 <z_impl_k_current_get+0x8>)
   21a8e:	6898      	ldr	r0, [r3, #8]
   21a90:	4770      	bx	lr
   21a92:	bf00      	nop
   21a94:	20001bc4 	.word	0x20001bc4

00021a98 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   21a98:	b538      	push	{r3, r4, r5, lr}
   21a9a:	4604      	mov	r4, r0
   21a9c:	f04f 0320 	mov.w	r3, #32
   21aa0:	f3ef 8511 	mrs	r5, BASEPRI
   21aa4:	f383 8811 	msr	BASEPRI, r3
   21aa8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21aac:	4817      	ldr	r0, [pc, #92]	; (21b0c <z_impl_k_sem_give+0x74>)
   21aae:	f000 fa01 	bl	21eb4 <z_spin_lock_valid>
   21ab2:	b968      	cbnz	r0, 21ad0 <z_impl_k_sem_give+0x38>
   21ab4:	4a16      	ldr	r2, [pc, #88]	; (21b10 <z_impl_k_sem_give+0x78>)
   21ab6:	4917      	ldr	r1, [pc, #92]	; (21b14 <z_impl_k_sem_give+0x7c>)
   21ab8:	4817      	ldr	r0, [pc, #92]	; (21b18 <z_impl_k_sem_give+0x80>)
   21aba:	234a      	movs	r3, #74	; 0x4a
   21abc:	f001 fc05 	bl	232ca <printk>
   21ac0:	4912      	ldr	r1, [pc, #72]	; (21b0c <z_impl_k_sem_give+0x74>)
   21ac2:	4816      	ldr	r0, [pc, #88]	; (21b1c <z_impl_k_sem_give+0x84>)
   21ac4:	f001 fc01 	bl	232ca <printk>
   21ac8:	4811      	ldr	r0, [pc, #68]	; (21b10 <z_impl_k_sem_give+0x78>)
   21aca:	214a      	movs	r1, #74	; 0x4a
   21acc:	f001 fc40 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   21ad0:	480e      	ldr	r0, [pc, #56]	; (21b0c <z_impl_k_sem_give+0x74>)
   21ad2:	f000 fa0d 	bl	21ef0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   21ad6:	4620      	mov	r0, r4
   21ad8:	f7ff fdbc 	bl	21654 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   21adc:	b150      	cbz	r0, 21af4 <z_impl_k_sem_give+0x5c>
   21ade:	2200      	movs	r2, #0
   21ae0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   21ae4:	f7ff f892 	bl	20c0c <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   21ae8:	4629      	mov	r1, r5
   21aea:	4808      	ldr	r0, [pc, #32]	; (21b0c <z_impl_k_sem_give+0x74>)
}
   21aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   21af0:	f7fe be66 	b.w	207c0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21af4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   21af8:	429a      	cmp	r2, r3
   21afa:	bf18      	it	ne
   21afc:	3301      	addne	r3, #1
   21afe:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21b00:	2102      	movs	r1, #2
   21b02:	f104 0010 	add.w	r0, r4, #16
   21b06:	f006 fd6e 	bl	285e6 <z_handle_obj_poll_events>
}
   21b0a:	e7ed      	b.n	21ae8 <z_impl_k_sem_give+0x50>
   21b0c:	20001c04 	.word	0x20001c04
   21b10:	00029daf 	.word	0x00029daf
   21b14:	00029dd1 	.word	0x00029dd1
   21b18:	000297e6 	.word	0x000297e6
   21b1c:	00029de6 	.word	0x00029de6

00021b20 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   21b20:	b570      	push	{r4, r5, r6, lr}
   21b22:	4604      	mov	r4, r0
   21b24:	460d      	mov	r5, r1
   21b26:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   21b2a:	b16b      	cbz	r3, 21b48 <z_impl_k_sem_take+0x28>
   21b2c:	b161      	cbz	r1, 21b48 <z_impl_k_sem_take+0x28>
   21b2e:	4934      	ldr	r1, [pc, #208]	; (21c00 <z_impl_k_sem_take+0xe0>)
   21b30:	4a34      	ldr	r2, [pc, #208]	; (21c04 <z_impl_k_sem_take+0xe4>)
   21b32:	4835      	ldr	r0, [pc, #212]	; (21c08 <z_impl_k_sem_take+0xe8>)
   21b34:	238c      	movs	r3, #140	; 0x8c
   21b36:	f001 fbc8 	bl	232ca <printk>
   21b3a:	4834      	ldr	r0, [pc, #208]	; (21c0c <z_impl_k_sem_take+0xec>)
   21b3c:	f001 fbc5 	bl	232ca <printk>
   21b40:	4830      	ldr	r0, [pc, #192]	; (21c04 <z_impl_k_sem_take+0xe4>)
   21b42:	218c      	movs	r1, #140	; 0x8c
   21b44:	f001 fc04 	bl	23350 <assert_post_action>
   21b48:	f04f 0320 	mov.w	r3, #32
   21b4c:	f3ef 8611 	mrs	r6, BASEPRI
   21b50:	f383 8811 	msr	BASEPRI, r3
   21b54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b58:	482d      	ldr	r0, [pc, #180]	; (21c10 <z_impl_k_sem_take+0xf0>)
   21b5a:	f000 f9ab 	bl	21eb4 <z_spin_lock_valid>
   21b5e:	b968      	cbnz	r0, 21b7c <z_impl_k_sem_take+0x5c>
   21b60:	4a2c      	ldr	r2, [pc, #176]	; (21c14 <z_impl_k_sem_take+0xf4>)
   21b62:	492d      	ldr	r1, [pc, #180]	; (21c18 <z_impl_k_sem_take+0xf8>)
   21b64:	4828      	ldr	r0, [pc, #160]	; (21c08 <z_impl_k_sem_take+0xe8>)
   21b66:	234a      	movs	r3, #74	; 0x4a
   21b68:	f001 fbaf 	bl	232ca <printk>
   21b6c:	4928      	ldr	r1, [pc, #160]	; (21c10 <z_impl_k_sem_take+0xf0>)
   21b6e:	482b      	ldr	r0, [pc, #172]	; (21c1c <z_impl_k_sem_take+0xfc>)
   21b70:	f001 fbab 	bl	232ca <printk>
   21b74:	4827      	ldr	r0, [pc, #156]	; (21c14 <z_impl_k_sem_take+0xf4>)
   21b76:	214a      	movs	r1, #74	; 0x4a
   21b78:	f001 fbea 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   21b7c:	4824      	ldr	r0, [pc, #144]	; (21c10 <z_impl_k_sem_take+0xf0>)
   21b7e:	f000 f9b7 	bl	21ef0 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   21b82:	68a3      	ldr	r3, [r4, #8]
   21b84:	b1cb      	cbz	r3, 21bba <z_impl_k_sem_take+0x9a>
		sem->count--;
   21b86:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b88:	4821      	ldr	r0, [pc, #132]	; (21c10 <z_impl_k_sem_take+0xf0>)
   21b8a:	60a3      	str	r3, [r4, #8]
   21b8c:	f000 f9a0 	bl	21ed0 <z_spin_unlock_valid>
   21b90:	b968      	cbnz	r0, 21bae <z_impl_k_sem_take+0x8e>
   21b92:	4a20      	ldr	r2, [pc, #128]	; (21c14 <z_impl_k_sem_take+0xf4>)
   21b94:	4922      	ldr	r1, [pc, #136]	; (21c20 <z_impl_k_sem_take+0x100>)
   21b96:	481c      	ldr	r0, [pc, #112]	; (21c08 <z_impl_k_sem_take+0xe8>)
   21b98:	235d      	movs	r3, #93	; 0x5d
   21b9a:	f001 fb96 	bl	232ca <printk>
   21b9e:	491c      	ldr	r1, [pc, #112]	; (21c10 <z_impl_k_sem_take+0xf0>)
   21ba0:	4820      	ldr	r0, [pc, #128]	; (21c24 <z_impl_k_sem_take+0x104>)
   21ba2:	f001 fb92 	bl	232ca <printk>
   21ba6:	481b      	ldr	r0, [pc, #108]	; (21c14 <z_impl_k_sem_take+0xf4>)
   21ba8:	215d      	movs	r1, #93	; 0x5d
   21baa:	f001 fbd1 	bl	23350 <assert_post_action>
	__asm__ volatile(
   21bae:	f386 8811 	msr	BASEPRI, r6
   21bb2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   21bb6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   21bb8:	bd70      	pop	{r4, r5, r6, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21bba:	b9c5      	cbnz	r5, 21bee <z_impl_k_sem_take+0xce>
   21bbc:	4814      	ldr	r0, [pc, #80]	; (21c10 <z_impl_k_sem_take+0xf0>)
   21bbe:	f000 f987 	bl	21ed0 <z_spin_unlock_valid>
   21bc2:	b968      	cbnz	r0, 21be0 <z_impl_k_sem_take+0xc0>
   21bc4:	4a13      	ldr	r2, [pc, #76]	; (21c14 <z_impl_k_sem_take+0xf4>)
   21bc6:	4916      	ldr	r1, [pc, #88]	; (21c20 <z_impl_k_sem_take+0x100>)
   21bc8:	480f      	ldr	r0, [pc, #60]	; (21c08 <z_impl_k_sem_take+0xe8>)
   21bca:	235d      	movs	r3, #93	; 0x5d
   21bcc:	f001 fb7d 	bl	232ca <printk>
   21bd0:	490f      	ldr	r1, [pc, #60]	; (21c10 <z_impl_k_sem_take+0xf0>)
   21bd2:	4814      	ldr	r0, [pc, #80]	; (21c24 <z_impl_k_sem_take+0x104>)
   21bd4:	f001 fb79 	bl	232ca <printk>
   21bd8:	480e      	ldr	r0, [pc, #56]	; (21c14 <z_impl_k_sem_take+0xf4>)
   21bda:	215d      	movs	r1, #93	; 0x5d
   21bdc:	f001 fbb8 	bl	23350 <assert_post_action>
   21be0:	f386 8811 	msr	BASEPRI, r6
   21be4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   21be8:	f06f 000f 	mvn.w	r0, #15
		goto out;
   21bec:	e7e4      	b.n	21bb8 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   21bee:	462b      	mov	r3, r5
   21bf0:	4622      	mov	r2, r4
   21bf2:	4631      	mov	r1, r6
   21bf4:	4806      	ldr	r0, [pc, #24]	; (21c10 <z_impl_k_sem_take+0xf0>)
}
   21bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   21bfa:	f7ff bc67 	b.w	214cc <z_pend_curr>
   21bfe:	bf00      	nop
   21c00:	0002fe04 	.word	0x0002fe04
   21c04:	0002fde4 	.word	0x0002fde4
   21c08:	000297e6 	.word	0x000297e6
   21c0c:	0002f76a 	.word	0x0002f76a
   21c10:	20001c04 	.word	0x20001c04
   21c14:	00029daf 	.word	0x00029daf
   21c18:	00029dd1 	.word	0x00029dd1
   21c1c:	00029de6 	.word	0x00029de6
   21c20:	00029dfe 	.word	0x00029dfe
   21c24:	00029e15 	.word	0x00029e15

00021c28 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   21c28:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   21c2a:	4c08      	ldr	r4, [pc, #32]	; (21c4c <k_sys_work_q_init+0x24>)
   21c2c:	4908      	ldr	r1, [pc, #32]	; (21c50 <k_sys_work_q_init+0x28>)
   21c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21c36:	4620      	mov	r0, r4
   21c38:	f000 f962 	bl	21f00 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   21c3c:	4905      	ldr	r1, [pc, #20]	; (21c54 <k_sys_work_q_init+0x2c>)
   21c3e:	f104 0014 	add.w	r0, r4, #20
   21c42:	f000 f809 	bl	21c58 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   21c46:	2000      	movs	r0, #0
   21c48:	bd10      	pop	{r4, pc}
   21c4a:	bf00      	nop
   21c4c:	20001c08 	.word	0x20001c08
   21c50:	20004a20 	.word	0x20004a20
   21c54:	0002fe34 	.word	0x0002fe34

00021c58 <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   21c58:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   21c5a:	4604      	mov	r4, r0
   21c5c:	b908      	cbnz	r0, 21c62 <z_impl_k_thread_name_set+0xa>
		thread = _current;
   21c5e:	4b05      	ldr	r3, [pc, #20]	; (21c74 <z_impl_k_thread_name_set+0x1c>)
   21c60:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   21c62:	2220      	movs	r2, #32
   21c64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   21c68:	f003 f9bf 	bl	24fea <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   21c6c:	2000      	movs	r0, #0
   21c6e:	f884 007b 	strb.w	r0, [r4, #123]	; 0x7b
#else
	ARG_UNUSED(thread);
	ARG_UNUSED(value);
	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   21c72:	bd10      	pop	{r4, pc}
   21c74:	20001bc4 	.word	0x20001bc4

00021c78 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   21c78:	b570      	push	{r4, r5, r6, lr}
   21c7a:	b086      	sub	sp, #24
	sys_dlist_init(&w->waitq);
   21c7c:	f100 0628 	add.w	r6, r0, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   21c80:	e9c0 660a 	strd	r6, r6, [r0, #40]	; 0x28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21c84:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   21c86:	9604      	str	r6, [sp, #16]
   21c88:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   21c8a:	9603      	str	r6, [sp, #12]
   21c8c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   21c8e:	9602      	str	r6, [sp, #8]
   21c90:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   21c92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21c94:	9601      	str	r6, [sp, #4]
   21c96:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   21c98:	9600      	str	r6, [sp, #0]
{
   21c9a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21c9c:	f7e2 fd8c 	bl	47b8 <arch_new_thread>
	new_thread->next_thread = _kernel.threads;
	_kernel.threads = new_thread;
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   21ca0:	b145      	cbz	r5, 21cb4 <z_setup_new_thread+0x3c>
		strncpy(new_thread->name, name,
   21ca2:	221f      	movs	r2, #31
   21ca4:	4629      	mov	r1, r5
   21ca6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   21caa:	f003 f99e 	bl	24fea <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   21cae:	2300      	movs	r3, #0
   21cb0:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   21cb4:	4b04      	ldr	r3, [pc, #16]	; (21cc8 <z_setup_new_thread+0x50>)
   21cb6:	689b      	ldr	r3, [r3, #8]
   21cb8:	b10b      	cbz	r3, 21cbe <z_setup_new_thread+0x46>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   21cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   21cbe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	sys_trace_thread_create(new_thread);
}
   21cc2:	b006      	add	sp, #24
   21cc4:	bd70      	pop	{r4, r5, r6, pc}
   21cc6:	bf00      	nop
   21cc8:	20001bc4 	.word	0x20001bc4

00021ccc <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, k_timeout_t delay)
{
   21ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21cd0:	b087      	sub	sp, #28
   21cd2:	e9dd 9512 	ldrd	r9, r5, [sp, #72]	; 0x48
   21cd6:	4604      	mov	r4, r0
   21cd8:	460e      	mov	r6, r1
   21cda:	4617      	mov	r7, r2
   21cdc:	4698      	mov	r8, r3
   21cde:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   21ce2:	b173      	cbz	r3, 21d02 <z_impl_k_thread_create+0x36>
   21ce4:	4927      	ldr	r1, [pc, #156]	; (21d84 <z_impl_k_thread_create+0xb8>)
   21ce6:	4a28      	ldr	r2, [pc, #160]	; (21d88 <z_impl_k_thread_create+0xbc>)
   21ce8:	4828      	ldr	r0, [pc, #160]	; (21d8c <z_impl_k_thread_create+0xc0>)
   21cea:	f240 236b 	movw	r3, #619	; 0x26b
   21cee:	f001 faec 	bl	232ca <printk>
   21cf2:	4827      	ldr	r0, [pc, #156]	; (21d90 <z_impl_k_thread_create+0xc4>)
   21cf4:	f001 fae9 	bl	232ca <printk>
   21cf8:	4823      	ldr	r0, [pc, #140]	; (21d88 <z_impl_k_thread_create+0xbc>)
   21cfa:	f240 216b 	movw	r1, #619	; 0x26b
   21cfe:	f001 fb27 	bl	23350 <assert_post_action>

	/* Special case, only for unit tests */
#if defined(CONFIG_TEST) && defined(CONFIG_ARCH_HAS_USERSPACE) && !defined(CONFIG_USERSPACE)
	__ASSERT((options & K_USER) == 0,
   21d02:	f019 0f04 	tst.w	r9, #4
   21d06:	d00e      	beq.n	21d26 <z_impl_k_thread_create+0x5a>
   21d08:	4922      	ldr	r1, [pc, #136]	; (21d94 <z_impl_k_thread_create+0xc8>)
   21d0a:	4a1f      	ldr	r2, [pc, #124]	; (21d88 <z_impl_k_thread_create+0xbc>)
   21d0c:	481f      	ldr	r0, [pc, #124]	; (21d8c <z_impl_k_thread_create+0xc0>)
   21d0e:	f240 236f 	movw	r3, #623	; 0x26f
   21d12:	f001 fada 	bl	232ca <printk>
   21d16:	4820      	ldr	r0, [pc, #128]	; (21d98 <z_impl_k_thread_create+0xcc>)
   21d18:	f001 fad7 	bl	232ca <printk>
   21d1c:	481a      	ldr	r0, [pc, #104]	; (21d88 <z_impl_k_thread_create+0xbc>)
   21d1e:	f240 216f 	movw	r1, #623	; 0x26f
   21d22:	f001 fb15 	bl	23350 <assert_post_action>
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21d26:	2300      	movs	r3, #0
   21d28:	e9cd 9304 	strd	r9, r3, [sp, #16]
   21d2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21d2e:	9303      	str	r3, [sp, #12]
   21d30:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21d32:	9302      	str	r3, [sp, #8]
   21d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21d36:	9301      	str	r3, [sp, #4]
   21d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21d3a:	9300      	str	r3, [sp, #0]
   21d3c:	463a      	mov	r2, r7
   21d3e:	4643      	mov	r3, r8
   21d40:	4631      	mov	r1, r6
   21d42:	4620      	mov	r0, r4
   21d44:	f7ff ff98 	bl	21c78 <z_setup_new_thread>
			  prio, options, NULL);

	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   21d48:	1c6b      	adds	r3, r5, #1
   21d4a:	d003      	beq.n	21d54 <z_impl_k_thread_create+0x88>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21d4c:	b935      	cbnz	r5, 21d5c <z_impl_k_thread_create+0x90>
	z_sched_start(thread);
   21d4e:	4620      	mov	r0, r4
   21d50:	f7ff f808 	bl	20d64 <z_sched_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   21d54:	4620      	mov	r0, r4
   21d56:	b007      	add	sp, #28
   21d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   21d5c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   21d60:	f240 30e7 	movw	r0, #999	; 0x3e7
   21d64:	2100      	movs	r1, #0
   21d66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21d6a:	2300      	movs	r3, #0
   21d6c:	fbe6 0105 	umlal	r0, r1, r6, r5
   21d70:	f7de fa06 	bl	180 <__aeabi_uldivmod>
   21d74:	4909      	ldr	r1, [pc, #36]	; (21d9c <z_impl_k_thread_create+0xd0>)
   21d76:	1c42      	adds	r2, r0, #1
   21d78:	f104 0018 	add.w	r0, r4, #24
   21d7c:	f000 fa1a 	bl	221b4 <z_add_timeout>
}
   21d80:	e7e8      	b.n	21d54 <z_impl_k_thread_create+0x88>
   21d82:	bf00      	nop
   21d84:	0002fcf0 	.word	0x0002fcf0
   21d88:	0002fe3d 	.word	0x0002fe3d
   21d8c:	000297e6 	.word	0x000297e6
   21d90:	0002fe60 	.word	0x0002fe60
   21d94:	0002fe85 	.word	0x0002fe85
   21d98:	0002fea5 	.word	0x0002fea5
   21d9c:	00020c9d 	.word	0x00020c9d

00021da0 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   21da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   21da4:	4f3c      	ldr	r7, [pc, #240]	; (21e98 <z_init_static_threads+0xf8>)
   21da6:	4d3d      	ldr	r5, [pc, #244]	; (21e9c <z_init_static_threads+0xfc>)
   21da8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 21eac <z_init_static_threads+0x10c>
{
   21dac:	b087      	sub	sp, #28
   21dae:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   21db0:	42bd      	cmp	r5, r7
   21db2:	d90e      	bls.n	21dd2 <z_init_static_threads+0x32>
   21db4:	493a      	ldr	r1, [pc, #232]	; (21ea0 <z_init_static_threads+0x100>)
   21db6:	483b      	ldr	r0, [pc, #236]	; (21ea4 <z_init_static_threads+0x104>)
   21db8:	f44f 7334 	mov.w	r3, #720	; 0x2d0
   21dbc:	4642      	mov	r2, r8
   21dbe:	f001 fa84 	bl	232ca <printk>
   21dc2:	4839      	ldr	r0, [pc, #228]	; (21ea8 <z_init_static_threads+0x108>)
   21dc4:	f001 fa81 	bl	232ca <printk>
   21dc8:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   21dcc:	4640      	mov	r0, r8
   21dce:	f001 fabf 	bl	23350 <assert_post_action>
   21dd2:	42b5      	cmp	r5, r6
   21dd4:	f105 0430 	add.w	r4, r5, #48	; 0x30
   21dd8:	d31f      	bcc.n	21e1a <z_init_static_threads+0x7a>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   21dda:	f7fe fd2d 	bl	20838 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   21dde:	4c2f      	ldr	r4, [pc, #188]	; (21e9c <z_init_static_threads+0xfc>)
   21de0:	4d32      	ldr	r5, [pc, #200]	; (21eac <z_init_static_threads+0x10c>)
   21de2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 21ea0 <z_init_static_threads+0x100>
   21de6:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 21ea4 <z_init_static_threads+0x104>
   21dea:	42b4      	cmp	r4, r6
   21dec:	d90e      	bls.n	21e0c <z_init_static_threads+0x6c>
   21dee:	4641      	mov	r1, r8
   21df0:	f240 23ef 	movw	r3, #751	; 0x2ef
   21df4:	462a      	mov	r2, r5
   21df6:	4648      	mov	r0, r9
   21df8:	f001 fa67 	bl	232ca <printk>
   21dfc:	482a      	ldr	r0, [pc, #168]	; (21ea8 <z_init_static_threads+0x108>)
   21dfe:	f001 fa64 	bl	232ca <printk>
   21e02:	f240 21ef 	movw	r1, #751	; 0x2ef
   21e06:	4628      	mov	r0, r5
   21e08:	f001 faa2 	bl	23350 <assert_post_action>
   21e0c:	42b4      	cmp	r4, r6
   21e0e:	d321      	bcc.n	21e54 <z_init_static_threads+0xb4>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
		}
	}
	k_sched_unlock();
}
   21e10:	b007      	add	sp, #28
   21e12:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   21e16:	f7fe be2f 	b.w	20a78 <k_sched_unlock>
		z_setup_new_thread(
   21e1a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   21e1e:	9305      	str	r3, [sp, #20]
   21e20:	f854 3c10 	ldr.w	r3, [r4, #-16]
   21e24:	9304      	str	r3, [sp, #16]
   21e26:	f854 3c14 	ldr.w	r3, [r4, #-20]
   21e2a:	9303      	str	r3, [sp, #12]
   21e2c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   21e30:	9302      	str	r3, [sp, #8]
   21e32:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   21e36:	9301      	str	r3, [sp, #4]
   21e38:	f854 3c20 	ldr.w	r3, [r4, #-32]
   21e3c:	9300      	str	r3, [sp, #0]
   21e3e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   21e42:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   21e46:	f7ff ff17 	bl	21c78 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   21e4a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   21e4e:	655d      	str	r5, [r3, #84]	; 0x54
   21e50:	4625      	mov	r5, r4
   21e52:	e7ad      	b.n	21db0 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   21e54:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   21e58:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   21e5c:	d006      	beq.n	21e6c <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   21e5e:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21e60:	f1bc 0f00 	cmp.w	ip, #0
   21e64:	d104      	bne.n	21e70 <z_init_static_threads+0xd0>
	z_sched_start(thread);
   21e66:	4638      	mov	r0, r7
   21e68:	f7fe ff7c 	bl	20d64 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   21e6c:	3430      	adds	r4, #48	; 0x30
   21e6e:	e7bc      	b.n	21dea <z_init_static_threads+0x4a>
   21e70:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   21e74:	f240 30e7 	movw	r0, #999	; 0x3e7
   21e78:	2100      	movs	r1, #0
   21e7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21e7e:	2300      	movs	r3, #0
   21e80:	fbee 010c 	umlal	r0, r1, lr, ip
   21e84:	f7de f97c 	bl	180 <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   21e88:	4909      	ldr	r1, [pc, #36]	; (21eb0 <z_init_static_threads+0x110>)
   21e8a:	1c42      	adds	r2, r0, #1
   21e8c:	f107 0018 	add.w	r0, r7, #24
   21e90:	f000 f990 	bl	221b4 <z_add_timeout>
}
   21e94:	e7ea      	b.n	21e6c <z_init_static_threads+0xcc>
   21e96:	bf00      	nop
   21e98:	20007448 	.word	0x20007448
   21e9c:	20007418 	.word	0x20007418
   21ea0:	0002ff34 	.word	0x0002ff34
   21ea4:	000297e6 	.word	0x000297e6
   21ea8:	00029c4a 	.word	0x00029c4a
   21eac:	0002fe3d 	.word	0x0002fe3d
   21eb0:	00020c9d 	.word	0x00020c9d

00021eb4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   21eb4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   21eb6:	b138      	cbz	r0, 21ec8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   21eb8:	4b04      	ldr	r3, [pc, #16]	; (21ecc <z_spin_lock_valid+0x18>)
   21eba:	7d1b      	ldrb	r3, [r3, #20]
   21ebc:	f000 0003 	and.w	r0, r0, #3
   21ec0:	1ac0      	subs	r0, r0, r3
   21ec2:	bf18      	it	ne
   21ec4:	2001      	movne	r0, #1
   21ec6:	4770      	bx	lr
			return false;
		}
	}
	return true;
   21ec8:	2001      	movs	r0, #1
}
   21eca:	4770      	bx	lr
   21ecc:	20001bc4 	.word	0x20001bc4

00021ed0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   21ed0:	4906      	ldr	r1, [pc, #24]	; (21eec <z_spin_unlock_valid+0x1c>)
{
   21ed2:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   21ed4:	688a      	ldr	r2, [r1, #8]
   21ed6:	7d08      	ldrb	r0, [r1, #20]
   21ed8:	6819      	ldr	r1, [r3, #0]
   21eda:	4302      	orrs	r2, r0
   21edc:	4291      	cmp	r1, r2
   21ede:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   21ee2:	bf04      	itt	eq
   21ee4:	6018      	streq	r0, [r3, #0]
	return true;
   21ee6:	2001      	moveq	r0, #1
}
   21ee8:	4770      	bx	lr
   21eea:	bf00      	nop
   21eec:	20001bc4 	.word	0x20001bc4

00021ef0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   21ef0:	4a02      	ldr	r2, [pc, #8]	; (21efc <z_spin_lock_set_owner+0xc>)
   21ef2:	7d11      	ldrb	r1, [r2, #20]
   21ef4:	6893      	ldr	r3, [r2, #8]
   21ef6:	430b      	orrs	r3, r1
   21ef8:	6003      	str	r3, [r0, #0]
}
   21efa:	4770      	bx	lr
   21efc:	20001bc4 	.word	0x20001bc4

00021f00 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   21f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f04:	4604      	mov	r4, r0
   21f06:	b086      	sub	sp, #24
   21f08:	460d      	mov	r5, r1
   21f0a:	4616      	mov	r6, r2
   21f0c:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   21f0e:	f006 f9de 	bl	282ce <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   21f12:	f104 0814 	add.w	r8, r4, #20
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   21f16:	2000      	movs	r0, #0
   21f18:	e9cd 0004 	strd	r0, r0, [sp, #16]
   21f1c:	e9cd 0702 	strd	r0, r7, [sp, #8]
   21f20:	e9cd 4000 	strd	r4, r0, [sp]
   21f24:	4b06      	ldr	r3, [pc, #24]	; (21f40 <k_work_q_start+0x40>)
   21f26:	4632      	mov	r2, r6
   21f28:	4629      	mov	r1, r5
   21f2a:	4640      	mov	r0, r8
   21f2c:	f7ff fece 	bl	21ccc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   21f30:	4904      	ldr	r1, [pc, #16]	; (21f44 <k_work_q_start+0x44>)
   21f32:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   21f34:	b006      	add	sp, #24
   21f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21f3a:	f7ff be8d 	b.w	21c58 <z_impl_k_thread_name_set>
   21f3e:	bf00      	nop
   21f40:	00023313 	.word	0x00023313
   21f44:	0002ff61 	.word	0x0002ff61

00021f48 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   21f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f4c:	4606      	mov	r6, r0
   21f4e:	460d      	mov	r5, r1
   21f50:	4617      	mov	r7, r2
	__asm__ volatile(
   21f52:	f04f 0320 	mov.w	r3, #32
   21f56:	f3ef 8811 	mrs	r8, BASEPRI
   21f5a:	f383 8811 	msr	BASEPRI, r3
   21f5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f62:	4839      	ldr	r0, [pc, #228]	; (22048 <k_delayed_work_submit_to_queue+0x100>)
   21f64:	f7ff ffa6 	bl	21eb4 <z_spin_lock_valid>
   21f68:	b968      	cbnz	r0, 21f86 <k_delayed_work_submit_to_queue+0x3e>
   21f6a:	4a38      	ldr	r2, [pc, #224]	; (2204c <k_delayed_work_submit_to_queue+0x104>)
   21f6c:	4938      	ldr	r1, [pc, #224]	; (22050 <k_delayed_work_submit_to_queue+0x108>)
   21f6e:	4839      	ldr	r0, [pc, #228]	; (22054 <k_delayed_work_submit_to_queue+0x10c>)
   21f70:	234a      	movs	r3, #74	; 0x4a
   21f72:	f001 f9aa 	bl	232ca <printk>
   21f76:	4934      	ldr	r1, [pc, #208]	; (22048 <k_delayed_work_submit_to_queue+0x100>)
   21f78:	4837      	ldr	r0, [pc, #220]	; (22058 <k_delayed_work_submit_to_queue+0x110>)
   21f7a:	f001 f9a6 	bl	232ca <printk>
   21f7e:	4833      	ldr	r0, [pc, #204]	; (2204c <k_delayed_work_submit_to_queue+0x104>)
   21f80:	214a      	movs	r1, #74	; 0x4a
   21f82:	f001 f9e5 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   21f86:	4830      	ldr	r0, [pc, #192]	; (22048 <k_delayed_work_submit_to_queue+0x100>)
   21f88:	f7ff ffb2 	bl	21ef0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   21f8c:	69eb      	ldr	r3, [r5, #28]
   21f8e:	b30b      	cbz	r3, 21fd4 <k_delayed_work_submit_to_queue+0x8c>
   21f90:	42b3      	cmp	r3, r6
   21f92:	d155      	bne.n	22040 <k_delayed_work_submit_to_queue+0xf8>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   21f94:	4628      	mov	r0, r5
   21f96:	f006 fa2e 	bl	283f6 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   21f9a:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   21f9e:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   21fa0:	d01a      	beq.n	21fd8 <k_delayed_work_submit_to_queue+0x90>
			err = 0;
		} else if (err < 0) {
   21fa2:	2800      	cmp	r0, #0
   21fa4:	da19      	bge.n	21fda <k_delayed_work_submit_to_queue+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21fa6:	4828      	ldr	r0, [pc, #160]	; (22048 <k_delayed_work_submit_to_queue+0x100>)
   21fa8:	f7ff ff92 	bl	21ed0 <z_spin_unlock_valid>
   21fac:	b968      	cbnz	r0, 21fca <k_delayed_work_submit_to_queue+0x82>
   21fae:	4a27      	ldr	r2, [pc, #156]	; (2204c <k_delayed_work_submit_to_queue+0x104>)
   21fb0:	492a      	ldr	r1, [pc, #168]	; (2205c <k_delayed_work_submit_to_queue+0x114>)
   21fb2:	4828      	ldr	r0, [pc, #160]	; (22054 <k_delayed_work_submit_to_queue+0x10c>)
   21fb4:	235d      	movs	r3, #93	; 0x5d
   21fb6:	f001 f988 	bl	232ca <printk>
   21fba:	4923      	ldr	r1, [pc, #140]	; (22048 <k_delayed_work_submit_to_queue+0x100>)
   21fbc:	4828      	ldr	r0, [pc, #160]	; (22060 <k_delayed_work_submit_to_queue+0x118>)
   21fbe:	f001 f984 	bl	232ca <printk>
   21fc2:	4822      	ldr	r0, [pc, #136]	; (2204c <k_delayed_work_submit_to_queue+0x104>)
   21fc4:	215d      	movs	r1, #93	; 0x5d
   21fc6:	f001 f9c3 	bl	23350 <assert_post_action>
	__asm__ volatile(
   21fca:	f388 8811 	msr	BASEPRI, r8
   21fce:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   21fd2:	e01f      	b.n	22014 <k_delayed_work_submit_to_queue+0xcc>
	if (work->work_q == work_q) {
   21fd4:	2e00      	cmp	r6, #0
   21fd6:	d0dd      	beq.n	21f94 <k_delayed_work_submit_to_queue+0x4c>
	int err = 0;
   21fd8:	2400      	movs	r4, #0
	work->work_q = work_q;
   21fda:	61ee      	str	r6, [r5, #28]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21fdc:	b9ef      	cbnz	r7, 2201a <k_delayed_work_submit_to_queue+0xd2>
   21fde:	481a      	ldr	r0, [pc, #104]	; (22048 <k_delayed_work_submit_to_queue+0x100>)
   21fe0:	f7ff ff76 	bl	21ed0 <z_spin_unlock_valid>
   21fe4:	b968      	cbnz	r0, 22002 <k_delayed_work_submit_to_queue+0xba>
   21fe6:	4a19      	ldr	r2, [pc, #100]	; (2204c <k_delayed_work_submit_to_queue+0x104>)
   21fe8:	491c      	ldr	r1, [pc, #112]	; (2205c <k_delayed_work_submit_to_queue+0x114>)
   21fea:	481a      	ldr	r0, [pc, #104]	; (22054 <k_delayed_work_submit_to_queue+0x10c>)
   21fec:	235d      	movs	r3, #93	; 0x5d
   21fee:	f001 f96c 	bl	232ca <printk>
   21ff2:	4915      	ldr	r1, [pc, #84]	; (22048 <k_delayed_work_submit_to_queue+0x100>)
   21ff4:	481a      	ldr	r0, [pc, #104]	; (22060 <k_delayed_work_submit_to_queue+0x118>)
   21ff6:	f001 f968 	bl	232ca <printk>
   21ffa:	4814      	ldr	r0, [pc, #80]	; (2204c <k_delayed_work_submit_to_queue+0x104>)
   21ffc:	215d      	movs	r1, #93	; 0x5d
   21ffe:	f001 f9a7 	bl	23350 <assert_post_action>
   22002:	f388 8811 	msr	BASEPRI, r8
   22006:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   2200a:	4629      	mov	r1, r5
   2200c:	4630      	mov	r0, r6
   2200e:	f006 f9d5 	bl	283bc <k_work_submit_to_queue>
		return 0;
   22012:	2400      	movs	r4, #0
}
   22014:	4620      	mov	r0, r4
   22016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2201a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2201e:	f240 30e7 	movw	r0, #999	; 0x3e7
   22022:	2100      	movs	r1, #0
   22024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22028:	2300      	movs	r3, #0
   2202a:	fbe6 0107 	umlal	r0, r1, r6, r7
   2202e:	f7de f8a7 	bl	180 <__aeabi_uldivmod>
	z_add_timeout(&work->timeout, work_timeout, delay);
   22032:	490c      	ldr	r1, [pc, #48]	; (22064 <k_delayed_work_submit_to_queue+0x11c>)
   22034:	1c42      	adds	r2, r0, #1
   22036:	f105 000c 	add.w	r0, r5, #12
   2203a:	f000 f8bb 	bl	221b4 <z_add_timeout>
   2203e:	e7b2      	b.n	21fa6 <k_delayed_work_submit_to_queue+0x5e>
		err = -EADDRINUSE;
   22040:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   22044:	e7af      	b.n	21fa6 <k_delayed_work_submit_to_queue+0x5e>
   22046:	bf00      	nop
   22048:	20001cb0 	.word	0x20001cb0
   2204c:	00029daf 	.word	0x00029daf
   22050:	00029dd1 	.word	0x00029dd1
   22054:	000297e6 	.word	0x000297e6
   22058:	00029de6 	.word	0x00029de6
   2205c:	00029dfe 	.word	0x00029dfe
   22060:	00029e15 	.word	0x00029e15
   22064:	000283ed 	.word	0x000283ed

00022068 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   22068:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   2206a:	69c3      	ldr	r3, [r0, #28]
{
   2206c:	4604      	mov	r4, r0
	if (!work->work_q) {
   2206e:	2b00      	cmp	r3, #0
   22070:	d038      	beq.n	220e4 <k_delayed_work_cancel+0x7c>
	__asm__ volatile(
   22072:	f04f 0320 	mov.w	r3, #32
   22076:	f3ef 8511 	mrs	r5, BASEPRI
   2207a:	f383 8811 	msr	BASEPRI, r3
   2207e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22082:	481a      	ldr	r0, [pc, #104]	; (220ec <k_delayed_work_cancel+0x84>)
   22084:	f7ff ff16 	bl	21eb4 <z_spin_lock_valid>
   22088:	b968      	cbnz	r0, 220a6 <k_delayed_work_cancel+0x3e>
   2208a:	4a19      	ldr	r2, [pc, #100]	; (220f0 <k_delayed_work_cancel+0x88>)
   2208c:	4919      	ldr	r1, [pc, #100]	; (220f4 <k_delayed_work_cancel+0x8c>)
   2208e:	481a      	ldr	r0, [pc, #104]	; (220f8 <k_delayed_work_cancel+0x90>)
   22090:	234a      	movs	r3, #74	; 0x4a
   22092:	f001 f91a 	bl	232ca <printk>
   22096:	4915      	ldr	r1, [pc, #84]	; (220ec <k_delayed_work_cancel+0x84>)
   22098:	4818      	ldr	r0, [pc, #96]	; (220fc <k_delayed_work_cancel+0x94>)
   2209a:	f001 f916 	bl	232ca <printk>
   2209e:	4814      	ldr	r0, [pc, #80]	; (220f0 <k_delayed_work_cancel+0x88>)
   220a0:	214a      	movs	r1, #74	; 0x4a
   220a2:	f001 f955 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   220a6:	4811      	ldr	r0, [pc, #68]	; (220ec <k_delayed_work_cancel+0x84>)
   220a8:	f7ff ff22 	bl	21ef0 <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   220ac:	4620      	mov	r0, r4
   220ae:	f006 f9a2 	bl	283f6 <work_cancel>
   220b2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   220b4:	480d      	ldr	r0, [pc, #52]	; (220ec <k_delayed_work_cancel+0x84>)
   220b6:	f7ff ff0b 	bl	21ed0 <z_spin_unlock_valid>
   220ba:	b968      	cbnz	r0, 220d8 <k_delayed_work_cancel+0x70>
   220bc:	4a0c      	ldr	r2, [pc, #48]	; (220f0 <k_delayed_work_cancel+0x88>)
   220be:	4910      	ldr	r1, [pc, #64]	; (22100 <k_delayed_work_cancel+0x98>)
   220c0:	480d      	ldr	r0, [pc, #52]	; (220f8 <k_delayed_work_cancel+0x90>)
   220c2:	235d      	movs	r3, #93	; 0x5d
   220c4:	f001 f901 	bl	232ca <printk>
   220c8:	4908      	ldr	r1, [pc, #32]	; (220ec <k_delayed_work_cancel+0x84>)
   220ca:	480e      	ldr	r0, [pc, #56]	; (22104 <k_delayed_work_cancel+0x9c>)
   220cc:	f001 f8fd 	bl	232ca <printk>
   220d0:	4807      	ldr	r0, [pc, #28]	; (220f0 <k_delayed_work_cancel+0x88>)
   220d2:	215d      	movs	r1, #93	; 0x5d
   220d4:	f001 f93c 	bl	23350 <assert_post_action>
	__asm__ volatile(
   220d8:	f385 8811 	msr	BASEPRI, r5
   220dc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   220e0:	4620      	mov	r0, r4
   220e2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   220e4:	f06f 0415 	mvn.w	r4, #21
   220e8:	e7fa      	b.n	220e0 <k_delayed_work_cancel+0x78>
   220ea:	bf00      	nop
   220ec:	20001cb0 	.word	0x20001cb0
   220f0:	00029daf 	.word	0x00029daf
   220f4:	00029dd1 	.word	0x00029dd1
   220f8:	000297e6 	.word	0x000297e6
   220fc:	00029de6 	.word	0x00029de6
   22100:	00029dfe 	.word	0x00029dfe
   22104:	00029e15 	.word	0x00029e15

00022108 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   22108:	4b03      	ldr	r3, [pc, #12]	; (22118 <elapsed+0x10>)
   2210a:	681b      	ldr	r3, [r3, #0]
   2210c:	b90b      	cbnz	r3, 22112 <elapsed+0xa>
   2210e:	f7e1 bfc1 	b.w	4094 <z_clock_elapsed>
}
   22112:	2000      	movs	r0, #0
   22114:	4770      	bx	lr
   22116:	bf00      	nop
   22118:	20001cb4 	.word	0x20001cb4

0002211c <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2211c:	6803      	ldr	r3, [r0, #0]
   2211e:	b140      	cbz	r0, 22132 <remove_timeout+0x16>
   22120:	4a07      	ldr	r2, [pc, #28]	; (22140 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   22122:	6852      	ldr	r2, [r2, #4]
   22124:	4290      	cmp	r0, r2
   22126:	d004      	beq.n	22132 <remove_timeout+0x16>
	if (next(t) != NULL) {
   22128:	b11b      	cbz	r3, 22132 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   2212a:	689a      	ldr	r2, [r3, #8]
   2212c:	6881      	ldr	r1, [r0, #8]
   2212e:	440a      	add	r2, r1
   22130:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   22132:	6842      	ldr	r2, [r0, #4]
   22134:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   22136:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22138:	2300      	movs	r3, #0
	node->prev = NULL;
   2213a:	e9c0 3300 	strd	r3, r3, [r0]
}
   2213e:	4770      	bx	lr
   22140:	20007298 	.word	0x20007298

00022144 <next_timeout>:
	return list->head == list;
   22144:	4b0b      	ldr	r3, [pc, #44]	; (22174 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   22146:	b510      	push	{r4, lr}
   22148:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2214a:	429c      	cmp	r4, r3
   2214c:	bf08      	it	eq
   2214e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   22150:	f7ff ffda 	bl	22108 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   22154:	b154      	cbz	r4, 2216c <next_timeout+0x28>
   22156:	68a3      	ldr	r3, [r4, #8]
   22158:	1a18      	subs	r0, r3, r0
   2215a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2215e:	4b06      	ldr	r3, [pc, #24]	; (22178 <next_timeout+0x34>)
   22160:	691b      	ldr	r3, [r3, #16]
   22162:	b113      	cbz	r3, 2216a <next_timeout+0x26>
   22164:	4298      	cmp	r0, r3
   22166:	bfa8      	it	ge
   22168:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2216a:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   2216c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22170:	e7f5      	b.n	2215e <next_timeout+0x1a>
   22172:	bf00      	nop
   22174:	20007298 	.word	0x20007298
   22178:	20001bc4 	.word	0x20001bc4

0002217c <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(struct _timeout *timeout)
{
   2217c:	4602      	mov	r2, r0
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   2217e:	6800      	ldr	r0, [r0, #0]
{
   22180:	b510      	push	{r4, lr}
	if (z_is_inactive_timeout(timeout)) {
   22182:	b148      	cbz	r0, 22198 <timeout_rem+0x1c>
	return list->head == list;
   22184:	490a      	ldr	r1, [pc, #40]	; (221b0 <timeout_rem+0x34>)
   22186:	680b      	ldr	r3, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22188:	428b      	cmp	r3, r1
   2218a:	d00e      	beq.n	221aa <timeout_rem+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2218c:	6849      	ldr	r1, [r1, #4]
   2218e:	2400      	movs	r4, #0
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   22190:	b91b      	cbnz	r3, 2219a <timeout_rem+0x1e>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   22192:	f7ff ffb9 	bl	22108 <elapsed>
   22196:	1a20      	subs	r0, r4, r0
}
   22198:	bd10      	pop	{r4, pc}
		ticks += t->dticks;
   2219a:	6898      	ldr	r0, [r3, #8]
		if (timeout == t) {
   2219c:	4293      	cmp	r3, r2
		ticks += t->dticks;
   2219e:	4404      	add	r4, r0
		if (timeout == t) {
   221a0:	d0f7      	beq.n	22192 <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   221a2:	428b      	cmp	r3, r1
   221a4:	d0f5      	beq.n	22192 <timeout_rem+0x16>
   221a6:	681b      	ldr	r3, [r3, #0]
   221a8:	e7f2      	b.n	22190 <timeout_rem+0x14>
   221aa:	2400      	movs	r4, #0
   221ac:	e7f1      	b.n	22192 <timeout_rem+0x16>
   221ae:	bf00      	nop
   221b0:	20007298 	.word	0x20007298

000221b4 <z_add_timeout>:
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   221b4:	6803      	ldr	r3, [r0, #0]
{
   221b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   221ba:	4604      	mov	r4, r0
   221bc:	460e      	mov	r6, r1
   221be:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   221c0:	b163      	cbz	r3, 221dc <z_add_timeout+0x28>
   221c2:	4944      	ldr	r1, [pc, #272]	; (222d4 <z_add_timeout+0x120>)
   221c4:	4a44      	ldr	r2, [pc, #272]	; (222d8 <z_add_timeout+0x124>)
   221c6:	4845      	ldr	r0, [pc, #276]	; (222dc <z_add_timeout+0x128>)
   221c8:	2363      	movs	r3, #99	; 0x63
   221ca:	f001 f87e 	bl	232ca <printk>
   221ce:	4844      	ldr	r0, [pc, #272]	; (222e0 <z_add_timeout+0x12c>)
   221d0:	f001 f87b 	bl	232ca <printk>
   221d4:	4840      	ldr	r0, [pc, #256]	; (222d8 <z_add_timeout+0x124>)
   221d6:	2163      	movs	r1, #99	; 0x63
   221d8:	f001 f8ba 	bl	23350 <assert_post_action>
	to->fn = fn;
   221dc:	2d01      	cmp	r5, #1
   221de:	bf38      	it	cc
   221e0:	2501      	movcc	r5, #1
   221e2:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   221e4:	f04f 0320 	mov.w	r3, #32
   221e8:	f3ef 8711 	mrs	r7, BASEPRI
   221ec:	f383 8811 	msr	BASEPRI, r3
   221f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   221f4:	483b      	ldr	r0, [pc, #236]	; (222e4 <z_add_timeout+0x130>)
   221f6:	f7ff fe5d 	bl	21eb4 <z_spin_lock_valid>
   221fa:	b968      	cbnz	r0, 22218 <z_add_timeout+0x64>
   221fc:	4a3a      	ldr	r2, [pc, #232]	; (222e8 <z_add_timeout+0x134>)
   221fe:	493b      	ldr	r1, [pc, #236]	; (222ec <z_add_timeout+0x138>)
   22200:	4836      	ldr	r0, [pc, #216]	; (222dc <z_add_timeout+0x128>)
   22202:	234a      	movs	r3, #74	; 0x4a
   22204:	f001 f861 	bl	232ca <printk>
   22208:	4936      	ldr	r1, [pc, #216]	; (222e4 <z_add_timeout+0x130>)
   2220a:	4839      	ldr	r0, [pc, #228]	; (222f0 <z_add_timeout+0x13c>)
   2220c:	f001 f85d 	bl	232ca <printk>
   22210:	4835      	ldr	r0, [pc, #212]	; (222e8 <z_add_timeout+0x134>)
   22212:	214a      	movs	r1, #74	; 0x4a
   22214:	f001 f89c 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   22218:	4832      	ldr	r0, [pc, #200]	; (222e4 <z_add_timeout+0x130>)
   2221a:	f7ff fe69 	bl	21ef0 <z_spin_lock_set_owner>
		to->dticks = ticks + elapsed();
   2221e:	f7ff ff73 	bl	22108 <elapsed>
   22222:	4405      	add	r5, r0
   22224:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   22226:	4d33      	ldr	r5, [pc, #204]	; (222f4 <z_add_timeout+0x140>)
   22228:	682e      	ldr	r6, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2222a:	42ae      	cmp	r6, r5
   2222c:	d006      	beq.n	2223c <z_add_timeout+0x88>
			__ASSERT(t->dticks >= 0, "");
   2222e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 222d8 <z_add_timeout+0x124>
   22232:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 22300 <z_add_timeout+0x14c>
   22236:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 222dc <z_add_timeout+0x128>
		for (t = first(); t != NULL; t = next(t)) {
   2223a:	b936      	cbnz	r6, 2224a <z_add_timeout+0x96>
	node->prev = list->tail;
   2223c:	686b      	ldr	r3, [r5, #4]
   2223e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   22240:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   22242:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   22244:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22246:	606c      	str	r4, [r5, #4]
}
   22248:	e01a      	b.n	22280 <z_add_timeout+0xcc>
			__ASSERT(t->dticks >= 0, "");
   2224a:	68b3      	ldr	r3, [r6, #8]
   2224c:	2b00      	cmp	r3, #0
   2224e:	da0c      	bge.n	2226a <z_add_timeout+0xb6>
   22250:	4641      	mov	r1, r8
   22252:	236c      	movs	r3, #108	; 0x6c
   22254:	4652      	mov	r2, sl
   22256:	4648      	mov	r0, r9
   22258:	f001 f837 	bl	232ca <printk>
   2225c:	4820      	ldr	r0, [pc, #128]	; (222e0 <z_add_timeout+0x12c>)
   2225e:	f001 f834 	bl	232ca <printk>
   22262:	216c      	movs	r1, #108	; 0x6c
   22264:	4650      	mov	r0, sl
   22266:	f001 f873 	bl	23350 <assert_post_action>
			if (t->dticks > to->dticks) {
   2226a:	68b2      	ldr	r2, [r6, #8]
   2226c:	68a3      	ldr	r3, [r4, #8]
   2226e:	429a      	cmp	r2, r3
   22270:	dd28      	ble.n	222c4 <z_add_timeout+0x110>
				t->dticks -= to->dticks;
   22272:	1ad3      	subs	r3, r2, r3
   22274:	60b3      	str	r3, [r6, #8]
	node->prev = successor->prev;
   22276:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   22278:	e9c4 6300 	strd	r6, r3, [r4]
	successor->prev->next = node;
   2227c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2227e:	6074      	str	r4, [r6, #4]
	return list->head == list;
   22280:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22282:	42ab      	cmp	r3, r5
   22284:	d006      	beq.n	22294 <z_add_timeout+0xe0>
		if (to == first()) {
   22286:	429c      	cmp	r4, r3
   22288:	d104      	bne.n	22294 <z_add_timeout+0xe0>
			z_clock_set_timeout(next_timeout(), false);
   2228a:	f7ff ff5b 	bl	22144 <next_timeout>
   2228e:	2100      	movs	r1, #0
   22290:	f7e1 fe74 	bl	3f7c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22294:	4813      	ldr	r0, [pc, #76]	; (222e4 <z_add_timeout+0x130>)
   22296:	f7ff fe1b 	bl	21ed0 <z_spin_unlock_valid>
   2229a:	b968      	cbnz	r0, 222b8 <z_add_timeout+0x104>
   2229c:	4a12      	ldr	r2, [pc, #72]	; (222e8 <z_add_timeout+0x134>)
   2229e:	4916      	ldr	r1, [pc, #88]	; (222f8 <z_add_timeout+0x144>)
   222a0:	480e      	ldr	r0, [pc, #56]	; (222dc <z_add_timeout+0x128>)
   222a2:	235d      	movs	r3, #93	; 0x5d
   222a4:	f001 f811 	bl	232ca <printk>
   222a8:	490e      	ldr	r1, [pc, #56]	; (222e4 <z_add_timeout+0x130>)
   222aa:	4814      	ldr	r0, [pc, #80]	; (222fc <z_add_timeout+0x148>)
   222ac:	f001 f80d 	bl	232ca <printk>
   222b0:	480d      	ldr	r0, [pc, #52]	; (222e8 <z_add_timeout+0x134>)
   222b2:	215d      	movs	r1, #93	; 0x5d
   222b4:	f001 f84c 	bl	23350 <assert_post_action>
	__asm__ volatile(
   222b8:	f387 8811 	msr	BASEPRI, r7
   222bc:	f3bf 8f6f 	isb	sy
}
   222c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   222c4:	1a9b      	subs	r3, r3, r2
   222c6:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   222c8:	686b      	ldr	r3, [r5, #4]
   222ca:	429e      	cmp	r6, r3
   222cc:	d0b6      	beq.n	2223c <z_add_timeout+0x88>
   222ce:	6836      	ldr	r6, [r6, #0]
   222d0:	e7b3      	b.n	2223a <z_add_timeout+0x86>
   222d2:	bf00      	nop
   222d4:	0002ff8f 	.word	0x0002ff8f
   222d8:	0002ff6b 	.word	0x0002ff6b
   222dc:	000297e6 	.word	0x000297e6
   222e0:	0002f76a 	.word	0x0002f76a
   222e4:	20001cb8 	.word	0x20001cb8
   222e8:	00029daf 	.word	0x00029daf
   222ec:	00029dd1 	.word	0x00029dd1
   222f0:	00029de6 	.word	0x00029de6
   222f4:	20007298 	.word	0x20007298
   222f8:	00029dfe 	.word	0x00029dfe
   222fc:	00029e15 	.word	0x00029e15
   22300:	0002ffaf 	.word	0x0002ffaf

00022304 <z_abort_timeout>:
{
   22304:	b538      	push	{r3, r4, r5, lr}
   22306:	4604      	mov	r4, r0
	__asm__ volatile(
   22308:	f04f 0320 	mov.w	r3, #32
   2230c:	f3ef 8511 	mrs	r5, BASEPRI
   22310:	f383 8811 	msr	BASEPRI, r3
   22314:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22318:	481a      	ldr	r0, [pc, #104]	; (22384 <z_abort_timeout+0x80>)
   2231a:	f7ff fdcb 	bl	21eb4 <z_spin_lock_valid>
   2231e:	b968      	cbnz	r0, 2233c <z_abort_timeout+0x38>
   22320:	4a19      	ldr	r2, [pc, #100]	; (22388 <z_abort_timeout+0x84>)
   22322:	491a      	ldr	r1, [pc, #104]	; (2238c <z_abort_timeout+0x88>)
   22324:	481a      	ldr	r0, [pc, #104]	; (22390 <z_abort_timeout+0x8c>)
   22326:	234a      	movs	r3, #74	; 0x4a
   22328:	f000 ffcf 	bl	232ca <printk>
   2232c:	4915      	ldr	r1, [pc, #84]	; (22384 <z_abort_timeout+0x80>)
   2232e:	4819      	ldr	r0, [pc, #100]	; (22394 <z_abort_timeout+0x90>)
   22330:	f000 ffcb 	bl	232ca <printk>
   22334:	4814      	ldr	r0, [pc, #80]	; (22388 <z_abort_timeout+0x84>)
   22336:	214a      	movs	r1, #74	; 0x4a
   22338:	f001 f80a 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   2233c:	4811      	ldr	r0, [pc, #68]	; (22384 <z_abort_timeout+0x80>)
   2233e:	f7ff fdd7 	bl	21ef0 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   22342:	6823      	ldr	r3, [r4, #0]
   22344:	b1db      	cbz	r3, 2237e <z_abort_timeout+0x7a>
			remove_timeout(to);
   22346:	4620      	mov	r0, r4
   22348:	f7ff fee8 	bl	2211c <remove_timeout>
			ret = 0;
   2234c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2234e:	480d      	ldr	r0, [pc, #52]	; (22384 <z_abort_timeout+0x80>)
   22350:	f7ff fdbe 	bl	21ed0 <z_spin_unlock_valid>
   22354:	b968      	cbnz	r0, 22372 <z_abort_timeout+0x6e>
   22356:	4a0c      	ldr	r2, [pc, #48]	; (22388 <z_abort_timeout+0x84>)
   22358:	490f      	ldr	r1, [pc, #60]	; (22398 <z_abort_timeout+0x94>)
   2235a:	480d      	ldr	r0, [pc, #52]	; (22390 <z_abort_timeout+0x8c>)
   2235c:	235d      	movs	r3, #93	; 0x5d
   2235e:	f000 ffb4 	bl	232ca <printk>
   22362:	4908      	ldr	r1, [pc, #32]	; (22384 <z_abort_timeout+0x80>)
   22364:	480d      	ldr	r0, [pc, #52]	; (2239c <z_abort_timeout+0x98>)
   22366:	f000 ffb0 	bl	232ca <printk>
   2236a:	4807      	ldr	r0, [pc, #28]	; (22388 <z_abort_timeout+0x84>)
   2236c:	215d      	movs	r1, #93	; 0x5d
   2236e:	f000 ffef 	bl	23350 <assert_post_action>
	__asm__ volatile(
   22372:	f385 8811 	msr	BASEPRI, r5
   22376:	f3bf 8f6f 	isb	sy
}
   2237a:	4620      	mov	r0, r4
   2237c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   2237e:	f06f 0415 	mvn.w	r4, #21
   22382:	e7e4      	b.n	2234e <z_abort_timeout+0x4a>
   22384:	20001cb8 	.word	0x20001cb8
   22388:	00029daf 	.word	0x00029daf
   2238c:	00029dd1 	.word	0x00029dd1
   22390:	000297e6 	.word	0x000297e6
   22394:	00029de6 	.word	0x00029de6
   22398:	00029dfe 	.word	0x00029dfe
   2239c:	00029e15 	.word	0x00029e15

000223a0 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(struct _timeout *timeout)
{
   223a0:	b538      	push	{r3, r4, r5, lr}
   223a2:	4604      	mov	r4, r0
	__asm__ volatile(
   223a4:	f04f 0320 	mov.w	r3, #32
   223a8:	f3ef 8511 	mrs	r5, BASEPRI
   223ac:	f383 8811 	msr	BASEPRI, r3
   223b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   223b4:	4818      	ldr	r0, [pc, #96]	; (22418 <z_timeout_remaining+0x78>)
   223b6:	f7ff fd7d 	bl	21eb4 <z_spin_lock_valid>
   223ba:	b968      	cbnz	r0, 223d8 <z_timeout_remaining+0x38>
   223bc:	4a17      	ldr	r2, [pc, #92]	; (2241c <z_timeout_remaining+0x7c>)
   223be:	4918      	ldr	r1, [pc, #96]	; (22420 <z_timeout_remaining+0x80>)
   223c0:	4818      	ldr	r0, [pc, #96]	; (22424 <z_timeout_remaining+0x84>)
   223c2:	234a      	movs	r3, #74	; 0x4a
   223c4:	f000 ff81 	bl	232ca <printk>
   223c8:	4913      	ldr	r1, [pc, #76]	; (22418 <z_timeout_remaining+0x78>)
   223ca:	4817      	ldr	r0, [pc, #92]	; (22428 <z_timeout_remaining+0x88>)
   223cc:	f000 ff7d 	bl	232ca <printk>
   223d0:	4812      	ldr	r0, [pc, #72]	; (2241c <z_timeout_remaining+0x7c>)
   223d2:	214a      	movs	r1, #74	; 0x4a
   223d4:	f000 ffbc 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   223d8:	480f      	ldr	r0, [pc, #60]	; (22418 <z_timeout_remaining+0x78>)
   223da:	f7ff fd89 	bl	21ef0 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   223de:	4620      	mov	r0, r4
   223e0:	f7ff fecc 	bl	2217c <timeout_rem>
   223e4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223e6:	480c      	ldr	r0, [pc, #48]	; (22418 <z_timeout_remaining+0x78>)
   223e8:	f7ff fd72 	bl	21ed0 <z_spin_unlock_valid>
   223ec:	b968      	cbnz	r0, 2240a <z_timeout_remaining+0x6a>
   223ee:	4a0b      	ldr	r2, [pc, #44]	; (2241c <z_timeout_remaining+0x7c>)
   223f0:	490e      	ldr	r1, [pc, #56]	; (2242c <z_timeout_remaining+0x8c>)
   223f2:	480c      	ldr	r0, [pc, #48]	; (22424 <z_timeout_remaining+0x84>)
   223f4:	235d      	movs	r3, #93	; 0x5d
   223f6:	f000 ff68 	bl	232ca <printk>
   223fa:	4907      	ldr	r1, [pc, #28]	; (22418 <z_timeout_remaining+0x78>)
   223fc:	480c      	ldr	r0, [pc, #48]	; (22430 <z_timeout_remaining+0x90>)
   223fe:	f000 ff64 	bl	232ca <printk>
   22402:	4806      	ldr	r0, [pc, #24]	; (2241c <z_timeout_remaining+0x7c>)
   22404:	215d      	movs	r1, #93	; 0x5d
   22406:	f000 ffa3 	bl	23350 <assert_post_action>
	__asm__ volatile(
   2240a:	f385 8811 	msr	BASEPRI, r5
   2240e:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   22412:	4620      	mov	r0, r4
   22414:	bd38      	pop	{r3, r4, r5, pc}
   22416:	bf00      	nop
   22418:	20001cb8 	.word	0x20001cb8
   2241c:	00029daf 	.word	0x00029daf
   22420:	00029dd1 	.word	0x00029dd1
   22424:	000297e6 	.word	0x000297e6
   22428:	00029de6 	.word	0x00029de6
   2242c:	00029dfe 	.word	0x00029dfe
   22430:	00029e15 	.word	0x00029e15

00022434 <z_get_next_timeout_expiry>:

	return ticks;
}

s32_t z_get_next_timeout_expiry(void)
{
   22434:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22436:	f04f 0320 	mov.w	r3, #32
   2243a:	f3ef 8511 	mrs	r5, BASEPRI
   2243e:	f383 8811 	msr	BASEPRI, r3
   22442:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22446:	4818      	ldr	r0, [pc, #96]	; (224a8 <z_get_next_timeout_expiry+0x74>)
   22448:	f7ff fd34 	bl	21eb4 <z_spin_lock_valid>
   2244c:	b968      	cbnz	r0, 2246a <z_get_next_timeout_expiry+0x36>
   2244e:	4a17      	ldr	r2, [pc, #92]	; (224ac <z_get_next_timeout_expiry+0x78>)
   22450:	4917      	ldr	r1, [pc, #92]	; (224b0 <z_get_next_timeout_expiry+0x7c>)
   22452:	4818      	ldr	r0, [pc, #96]	; (224b4 <z_get_next_timeout_expiry+0x80>)
   22454:	234a      	movs	r3, #74	; 0x4a
   22456:	f000 ff38 	bl	232ca <printk>
   2245a:	4913      	ldr	r1, [pc, #76]	; (224a8 <z_get_next_timeout_expiry+0x74>)
   2245c:	4816      	ldr	r0, [pc, #88]	; (224b8 <z_get_next_timeout_expiry+0x84>)
   2245e:	f000 ff34 	bl	232ca <printk>
   22462:	4812      	ldr	r0, [pc, #72]	; (224ac <z_get_next_timeout_expiry+0x78>)
   22464:	214a      	movs	r1, #74	; 0x4a
   22466:	f000 ff73 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   2246a:	480f      	ldr	r0, [pc, #60]	; (224a8 <z_get_next_timeout_expiry+0x74>)
   2246c:	f7ff fd40 	bl	21ef0 <z_spin_lock_set_owner>
	s32_t ret = (s32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   22470:	f7ff fe68 	bl	22144 <next_timeout>
   22474:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22476:	480c      	ldr	r0, [pc, #48]	; (224a8 <z_get_next_timeout_expiry+0x74>)
   22478:	f7ff fd2a 	bl	21ed0 <z_spin_unlock_valid>
   2247c:	b968      	cbnz	r0, 2249a <z_get_next_timeout_expiry+0x66>
   2247e:	4a0b      	ldr	r2, [pc, #44]	; (224ac <z_get_next_timeout_expiry+0x78>)
   22480:	490e      	ldr	r1, [pc, #56]	; (224bc <z_get_next_timeout_expiry+0x88>)
   22482:	480c      	ldr	r0, [pc, #48]	; (224b4 <z_get_next_timeout_expiry+0x80>)
   22484:	235d      	movs	r3, #93	; 0x5d
   22486:	f000 ff20 	bl	232ca <printk>
   2248a:	4907      	ldr	r1, [pc, #28]	; (224a8 <z_get_next_timeout_expiry+0x74>)
   2248c:	480c      	ldr	r0, [pc, #48]	; (224c0 <z_get_next_timeout_expiry+0x8c>)
   2248e:	f000 ff1c 	bl	232ca <printk>
   22492:	4806      	ldr	r0, [pc, #24]	; (224ac <z_get_next_timeout_expiry+0x78>)
   22494:	215d      	movs	r1, #93	; 0x5d
   22496:	f000 ff5b 	bl	23350 <assert_post_action>
	__asm__ volatile(
   2249a:	f385 8811 	msr	BASEPRI, r5
   2249e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   224a2:	4620      	mov	r0, r4
   224a4:	bd38      	pop	{r3, r4, r5, pc}
   224a6:	bf00      	nop
   224a8:	20001cb8 	.word	0x20001cb8
   224ac:	00029daf 	.word	0x00029daf
   224b0:	00029dd1 	.word	0x00029dd1
   224b4:	000297e6 	.word	0x000297e6
   224b8:	00029de6 	.word	0x00029de6
   224bc:	00029dfe 	.word	0x00029dfe
   224c0:	00029e15 	.word	0x00029e15

000224c4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   224c4:	b570      	push	{r4, r5, r6, lr}
   224c6:	4604      	mov	r4, r0
   224c8:	460d      	mov	r5, r1
	__asm__ volatile(
   224ca:	f04f 0320 	mov.w	r3, #32
   224ce:	f3ef 8611 	mrs	r6, BASEPRI
   224d2:	f383 8811 	msr	BASEPRI, r3
   224d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   224da:	481b      	ldr	r0, [pc, #108]	; (22548 <z_set_timeout_expiry+0x84>)
   224dc:	f7ff fcea 	bl	21eb4 <z_spin_lock_valid>
   224e0:	b968      	cbnz	r0, 224fe <z_set_timeout_expiry+0x3a>
   224e2:	4a1a      	ldr	r2, [pc, #104]	; (2254c <z_set_timeout_expiry+0x88>)
   224e4:	491a      	ldr	r1, [pc, #104]	; (22550 <z_set_timeout_expiry+0x8c>)
   224e6:	481b      	ldr	r0, [pc, #108]	; (22554 <z_set_timeout_expiry+0x90>)
   224e8:	234a      	movs	r3, #74	; 0x4a
   224ea:	f000 feee 	bl	232ca <printk>
   224ee:	4916      	ldr	r1, [pc, #88]	; (22548 <z_set_timeout_expiry+0x84>)
   224f0:	4819      	ldr	r0, [pc, #100]	; (22558 <z_set_timeout_expiry+0x94>)
   224f2:	f000 feea 	bl	232ca <printk>
   224f6:	4815      	ldr	r0, [pc, #84]	; (2254c <z_set_timeout_expiry+0x88>)
   224f8:	214a      	movs	r1, #74	; 0x4a
   224fa:	f000 ff29 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   224fe:	4812      	ldr	r0, [pc, #72]	; (22548 <z_set_timeout_expiry+0x84>)
   22500:	f7ff fcf6 	bl	21ef0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   22504:	f7ff fe1e 	bl	22144 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   22508:	2801      	cmp	r0, #1
   2250a:	dd05      	ble.n	22518 <z_set_timeout_expiry+0x54>
   2250c:	42a0      	cmp	r0, r4
   2250e:	dd03      	ble.n	22518 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
   22510:	4629      	mov	r1, r5
   22512:	4620      	mov	r0, r4
   22514:	f7e1 fd32 	bl	3f7c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22518:	480b      	ldr	r0, [pc, #44]	; (22548 <z_set_timeout_expiry+0x84>)
   2251a:	f7ff fcd9 	bl	21ed0 <z_spin_unlock_valid>
   2251e:	b968      	cbnz	r0, 2253c <z_set_timeout_expiry+0x78>
   22520:	4a0a      	ldr	r2, [pc, #40]	; (2254c <z_set_timeout_expiry+0x88>)
   22522:	490e      	ldr	r1, [pc, #56]	; (2255c <z_set_timeout_expiry+0x98>)
   22524:	480b      	ldr	r0, [pc, #44]	; (22554 <z_set_timeout_expiry+0x90>)
   22526:	235d      	movs	r3, #93	; 0x5d
   22528:	f000 fecf 	bl	232ca <printk>
   2252c:	4906      	ldr	r1, [pc, #24]	; (22548 <z_set_timeout_expiry+0x84>)
   2252e:	480c      	ldr	r0, [pc, #48]	; (22560 <z_set_timeout_expiry+0x9c>)
   22530:	f000 fecb 	bl	232ca <printk>
   22534:	4805      	ldr	r0, [pc, #20]	; (2254c <z_set_timeout_expiry+0x88>)
   22536:	215d      	movs	r1, #93	; 0x5d
   22538:	f000 ff0a 	bl	23350 <assert_post_action>
	__asm__ volatile(
   2253c:	f386 8811 	msr	BASEPRI, r6
   22540:	f3bf 8f6f 	isb	sy
		}
	}
}
   22544:	bd70      	pop	{r4, r5, r6, pc}
   22546:	bf00      	nop
   22548:	20001cb8 	.word	0x20001cb8
   2254c:	00029daf 	.word	0x00029daf
   22550:	00029dd1 	.word	0x00029dd1
   22554:	000297e6 	.word	0x000297e6
   22558:	00029de6 	.word	0x00029de6
   2255c:	00029dfe 	.word	0x00029dfe
   22560:	00029e15 	.word	0x00029e15

00022564 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   22564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22568:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2256a:	f7fe fd17 	bl	20f9c <z_time_slice>
	__asm__ volatile(
   2256e:	f04f 0320 	mov.w	r3, #32
   22572:	f3ef 8511 	mrs	r5, BASEPRI
   22576:	f383 8811 	msr	BASEPRI, r3
   2257a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2257e:	4847      	ldr	r0, [pc, #284]	; (2269c <z_clock_announce+0x138>)
   22580:	f7ff fc98 	bl	21eb4 <z_spin_lock_valid>
   22584:	b968      	cbnz	r0, 225a2 <z_clock_announce+0x3e>
   22586:	4a46      	ldr	r2, [pc, #280]	; (226a0 <z_clock_announce+0x13c>)
   22588:	4946      	ldr	r1, [pc, #280]	; (226a4 <z_clock_announce+0x140>)
   2258a:	4847      	ldr	r0, [pc, #284]	; (226a8 <z_clock_announce+0x144>)
   2258c:	234a      	movs	r3, #74	; 0x4a
   2258e:	f000 fe9c 	bl	232ca <printk>
   22592:	4942      	ldr	r1, [pc, #264]	; (2269c <z_clock_announce+0x138>)
   22594:	4845      	ldr	r0, [pc, #276]	; (226ac <z_clock_announce+0x148>)
   22596:	f000 fe98 	bl	232ca <printk>
   2259a:	4841      	ldr	r0, [pc, #260]	; (226a0 <z_clock_announce+0x13c>)
   2259c:	214a      	movs	r1, #74	; 0x4a
   2259e:	f000 fed7 	bl	23350 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   225a2:	4e43      	ldr	r6, [pc, #268]	; (226b0 <z_clock_announce+0x14c>)
   225a4:	4f43      	ldr	r7, [pc, #268]	; (226b4 <z_clock_announce+0x150>)
	z_spin_lock_set_owner(l);
   225a6:	483d      	ldr	r0, [pc, #244]	; (2269c <z_clock_announce+0x138>)
	return list->head == list;
   225a8:	f8df 8114 	ldr.w	r8, [pc, #276]	; 226c0 <z_clock_announce+0x15c>
   225ac:	f7ff fca0 	bl	21ef0 <z_spin_lock_set_owner>
   225b0:	46b9      	mov	r9, r7
   225b2:	6034      	str	r4, [r6, #0]
   225b4:	f8d8 4000 	ldr.w	r4, [r8]
   225b8:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   225ba:	4544      	cmp	r4, r8
   225bc:	e9d7 0100 	ldrd	r0, r1, [r7]
   225c0:	d005      	beq.n	225ce <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   225c2:	b124      	cbz	r4, 225ce <z_clock_announce+0x6a>
   225c4:	68a3      	ldr	r3, [r4, #8]
   225c6:	4293      	cmp	r3, r2
   225c8:	dd25      	ble.n	22616 <z_clock_announce+0xb2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   225ca:	1a9b      	subs	r3, r3, r2
   225cc:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
   225ce:	1880      	adds	r0, r0, r2
   225d0:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
	announce_remaining = 0;
   225d4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   225d6:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   225da:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   225dc:	f7ff fdb2 	bl	22144 <next_timeout>
   225e0:	4621      	mov	r1, r4
   225e2:	f7e1 fccb 	bl	3f7c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   225e6:	482d      	ldr	r0, [pc, #180]	; (2269c <z_clock_announce+0x138>)
   225e8:	f7ff fc72 	bl	21ed0 <z_spin_unlock_valid>
   225ec:	b968      	cbnz	r0, 2260a <z_clock_announce+0xa6>
   225ee:	4a2c      	ldr	r2, [pc, #176]	; (226a0 <z_clock_announce+0x13c>)
   225f0:	4931      	ldr	r1, [pc, #196]	; (226b8 <z_clock_announce+0x154>)
   225f2:	482d      	ldr	r0, [pc, #180]	; (226a8 <z_clock_announce+0x144>)
   225f4:	235d      	movs	r3, #93	; 0x5d
   225f6:	f000 fe68 	bl	232ca <printk>
   225fa:	4928      	ldr	r1, [pc, #160]	; (2269c <z_clock_announce+0x138>)
   225fc:	482f      	ldr	r0, [pc, #188]	; (226bc <z_clock_announce+0x158>)
   225fe:	f000 fe64 	bl	232ca <printk>
   22602:	4827      	ldr	r0, [pc, #156]	; (226a0 <z_clock_announce+0x13c>)
   22604:	215d      	movs	r1, #93	; 0x5d
   22606:	f000 fea3 	bl	23350 <assert_post_action>
	__asm__ volatile(
   2260a:	f385 8811 	msr	BASEPRI, r5
   2260e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   22612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   22616:	18c0      	adds	r0, r0, r3
   22618:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
		announce_remaining -= dt;
   2261c:	1ad3      	subs	r3, r2, r3
   2261e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   22620:	2300      	movs	r3, #0
		curr_tick += dt;
   22622:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   22626:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   22628:	4620      	mov	r0, r4
   2262a:	f7ff fd77 	bl	2211c <remove_timeout>
   2262e:	481b      	ldr	r0, [pc, #108]	; (2269c <z_clock_announce+0x138>)
   22630:	f7ff fc4e 	bl	21ed0 <z_spin_unlock_valid>
   22634:	b968      	cbnz	r0, 22652 <z_clock_announce+0xee>
   22636:	4a1a      	ldr	r2, [pc, #104]	; (226a0 <z_clock_announce+0x13c>)
   22638:	491f      	ldr	r1, [pc, #124]	; (226b8 <z_clock_announce+0x154>)
   2263a:	481b      	ldr	r0, [pc, #108]	; (226a8 <z_clock_announce+0x144>)
   2263c:	235d      	movs	r3, #93	; 0x5d
   2263e:	f000 fe44 	bl	232ca <printk>
   22642:	4916      	ldr	r1, [pc, #88]	; (2269c <z_clock_announce+0x138>)
   22644:	481d      	ldr	r0, [pc, #116]	; (226bc <z_clock_announce+0x158>)
   22646:	f000 fe40 	bl	232ca <printk>
   2264a:	4815      	ldr	r0, [pc, #84]	; (226a0 <z_clock_announce+0x13c>)
   2264c:	215d      	movs	r1, #93	; 0x5d
   2264e:	f000 fe7f 	bl	23350 <assert_post_action>
   22652:	f385 8811 	msr	BASEPRI, r5
   22656:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2265a:	68e3      	ldr	r3, [r4, #12]
   2265c:	4620      	mov	r0, r4
   2265e:	4798      	blx	r3
	__asm__ volatile(
   22660:	f04f 0320 	mov.w	r3, #32
   22664:	f3ef 8511 	mrs	r5, BASEPRI
   22668:	f383 8811 	msr	BASEPRI, r3
   2266c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22670:	480a      	ldr	r0, [pc, #40]	; (2269c <z_clock_announce+0x138>)
   22672:	f7ff fc1f 	bl	21eb4 <z_spin_lock_valid>
   22676:	b968      	cbnz	r0, 22694 <z_clock_announce+0x130>
   22678:	4a09      	ldr	r2, [pc, #36]	; (226a0 <z_clock_announce+0x13c>)
   2267a:	490a      	ldr	r1, [pc, #40]	; (226a4 <z_clock_announce+0x140>)
   2267c:	480a      	ldr	r0, [pc, #40]	; (226a8 <z_clock_announce+0x144>)
   2267e:	234a      	movs	r3, #74	; 0x4a
   22680:	f000 fe23 	bl	232ca <printk>
   22684:	4905      	ldr	r1, [pc, #20]	; (2269c <z_clock_announce+0x138>)
   22686:	4809      	ldr	r0, [pc, #36]	; (226ac <z_clock_announce+0x148>)
   22688:	f000 fe1f 	bl	232ca <printk>
   2268c:	4804      	ldr	r0, [pc, #16]	; (226a0 <z_clock_announce+0x13c>)
   2268e:	214a      	movs	r1, #74	; 0x4a
   22690:	f000 fe5e 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   22694:	4801      	ldr	r0, [pc, #4]	; (2269c <z_clock_announce+0x138>)
   22696:	f7ff fc2b 	bl	21ef0 <z_spin_lock_set_owner>
	return k;
   2269a:	e78b      	b.n	225b4 <z_clock_announce+0x50>
   2269c:	20001cb8 	.word	0x20001cb8
   226a0:	00029daf 	.word	0x00029daf
   226a4:	00029dd1 	.word	0x00029dd1
   226a8:	000297e6 	.word	0x000297e6
   226ac:	00029de6 	.word	0x00029de6
   226b0:	20001cb4 	.word	0x20001cb4
   226b4:	20000140 	.word	0x20000140
   226b8:	00029dfe 	.word	0x00029dfe
   226bc:	00029e15 	.word	0x00029e15
   226c0:	20007298 	.word	0x20007298

000226c4 <z_tick_get>:

s64_t z_tick_get(void)
{
   226c4:	b570      	push	{r4, r5, r6, lr}
   226c6:	f04f 0320 	mov.w	r3, #32
   226ca:	f3ef 8611 	mrs	r6, BASEPRI
   226ce:	f383 8811 	msr	BASEPRI, r3
   226d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   226d6:	481b      	ldr	r0, [pc, #108]	; (22744 <z_tick_get+0x80>)
   226d8:	f7ff fbec 	bl	21eb4 <z_spin_lock_valid>
   226dc:	b968      	cbnz	r0, 226fa <z_tick_get+0x36>
   226de:	4a1a      	ldr	r2, [pc, #104]	; (22748 <z_tick_get+0x84>)
   226e0:	491a      	ldr	r1, [pc, #104]	; (2274c <z_tick_get+0x88>)
   226e2:	481b      	ldr	r0, [pc, #108]	; (22750 <z_tick_get+0x8c>)
   226e4:	234a      	movs	r3, #74	; 0x4a
   226e6:	f000 fdf0 	bl	232ca <printk>
   226ea:	4916      	ldr	r1, [pc, #88]	; (22744 <z_tick_get+0x80>)
   226ec:	4819      	ldr	r0, [pc, #100]	; (22754 <z_tick_get+0x90>)
   226ee:	f000 fdec 	bl	232ca <printk>
   226f2:	4815      	ldr	r0, [pc, #84]	; (22748 <z_tick_get+0x84>)
   226f4:	214a      	movs	r1, #74	; 0x4a
   226f6:	f000 fe2b 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   226fa:	4812      	ldr	r0, [pc, #72]	; (22744 <z_tick_get+0x80>)
   226fc:	f7ff fbf8 	bl	21ef0 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   22700:	f7e1 fcc8 	bl	4094 <z_clock_elapsed>
   22704:	4b14      	ldr	r3, [pc, #80]	; (22758 <z_tick_get+0x94>)
   22706:	e9d3 4500 	ldrd	r4, r5, [r3]
   2270a:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2270c:	480d      	ldr	r0, [pc, #52]	; (22744 <z_tick_get+0x80>)
   2270e:	f145 0500 	adc.w	r5, r5, #0
   22712:	f7ff fbdd 	bl	21ed0 <z_spin_unlock_valid>
   22716:	b968      	cbnz	r0, 22734 <z_tick_get+0x70>
   22718:	4a0b      	ldr	r2, [pc, #44]	; (22748 <z_tick_get+0x84>)
   2271a:	4910      	ldr	r1, [pc, #64]	; (2275c <z_tick_get+0x98>)
   2271c:	480c      	ldr	r0, [pc, #48]	; (22750 <z_tick_get+0x8c>)
   2271e:	235d      	movs	r3, #93	; 0x5d
   22720:	f000 fdd3 	bl	232ca <printk>
   22724:	4907      	ldr	r1, [pc, #28]	; (22744 <z_tick_get+0x80>)
   22726:	480e      	ldr	r0, [pc, #56]	; (22760 <z_tick_get+0x9c>)
   22728:	f000 fdcf 	bl	232ca <printk>
   2272c:	4806      	ldr	r0, [pc, #24]	; (22748 <z_tick_get+0x84>)
   2272e:	215d      	movs	r1, #93	; 0x5d
   22730:	f000 fe0e 	bl	23350 <assert_post_action>
	__asm__ volatile(
   22734:	f386 8811 	msr	BASEPRI, r6
   22738:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2273c:	4620      	mov	r0, r4
   2273e:	4629      	mov	r1, r5
   22740:	bd70      	pop	{r4, r5, r6, pc}
   22742:	bf00      	nop
   22744:	20001cb8 	.word	0x20001cb8
   22748:	00029daf 	.word	0x00029daf
   2274c:	00029dd1 	.word	0x00029dd1
   22750:	000297e6 	.word	0x000297e6
   22754:	00029de6 	.word	0x00029de6
   22758:	20000140 	.word	0x20000140
   2275c:	00029dfe 	.word	0x00029dfe
   22760:	00029e15 	.word	0x00029e15

00022764 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   22764:	6a02      	ldr	r2, [r0, #32]
{
   22766:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   22768:	1c53      	adds	r3, r2, #1
   2276a:	2b01      	cmp	r3, #1
{
   2276c:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2276e:	d902      	bls.n	22776 <z_timer_expiration_handler+0x12>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22770:	490c      	ldr	r1, [pc, #48]	; (227a4 <z_timer_expiration_handler+0x40>)
   22772:	f7ff fd1f 	bl	221b4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   22776:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22778:	3301      	adds	r3, #1
   2277a:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2277c:	69a3      	ldr	r3, [r4, #24]
   2277e:	b10b      	cbz	r3, 22784 <z_timer_expiration_handler+0x20>
		timer->expiry_fn(timer);
   22780:	4620      	mov	r0, r4
   22782:	4798      	blx	r3
	return list->head == list;
   22784:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22788:	42a5      	cmp	r5, r4
   2278a:	d009      	beq.n	227a0 <z_timer_expiration_handler+0x3c>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2278c:	b145      	cbz	r5, 227a0 <z_timer_expiration_handler+0x3c>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   2278e:	4628      	mov	r0, r5
   22790:	f7fd ffc4 	bl	2071c <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   22794:	4628      	mov	r0, r5
   22796:	f7fe fa39 	bl	20c0c <z_ready_thread>
   2279a:	2300      	movs	r3, #0
   2279c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90

	arch_thread_return_value_set(thread, 0);
}
   227a0:	bd38      	pop	{r3, r4, r5, pc}
   227a2:	bf00      	nop
   227a4:	00022765 	.word	0x00022765

000227a8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   227a8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   227ac:	f240 38e7 	movw	r8, #999	; 0x3e7
   227b0:	f04f 0900 	mov.w	r9, #0
   227b4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   227b8:	46c3      	mov	fp, r8
   227ba:	46cc      	mov	ip, r9
   227bc:	fbe7 bc01 	umlal	fp, ip, r7, r1
   227c0:	4604      	mov	r4, r0
   227c2:	4616      	mov	r6, r2
   227c4:	4661      	mov	r1, ip
   227c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   227ca:	2300      	movs	r3, #0
   227cc:	4658      	mov	r0, fp
   227ce:	f7dd fcd7 	bl	180 <__aeabi_uldivmod>
   227d2:	4649      	mov	r1, r9
   227d4:	4605      	mov	r5, r0
   227d6:	4640      	mov	r0, r8
   227d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   227dc:	2300      	movs	r3, #0
   227de:	fbe7 0106 	umlal	r0, r1, r7, r6
   227e2:	f7dd fccd 	bl	180 <__aeabi_uldivmod>
   227e6:	4606      	mov	r6, r0
	if (Z_TICK_ABS(duration.ticks) < 0) {
		duration.ticks = MAX(duration.ticks - 1, 0);
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   227e8:	4620      	mov	r0, r4
   227ea:	f7ff fd8b 	bl	22304 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   227ee:	2300      	movs	r3, #0
	period = k_ms_to_ticks_ceil32(period);
   227f0:	6226      	str	r6, [r4, #32]
	timer->status = 0U;
   227f2:	6263      	str	r3, [r4, #36]	; 0x24

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   227f4:	462a      	mov	r2, r5
   227f6:	4620      	mov	r0, r4
   227f8:	4902      	ldr	r1, [pc, #8]	; (22804 <z_impl_k_timer_start+0x5c>)
		     duration);
}
   227fa:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   227fe:	f7ff bcd9 	b.w	221b4 <z_add_timeout>
   22802:	bf00      	nop
   22804:	00022765 	.word	0x00022765

00022808 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   22808:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   2280a:	6883      	ldr	r3, [r0, #8]
   2280c:	685c      	ldr	r4, [r3, #4]
{
   2280e:	460d      	mov	r5, r1

	__ASSERT(thread != NULL, "poller should have a thread\n");
   22810:	b964      	cbnz	r4, 2282c <k_poll_poller_cb+0x24>
   22812:	4916      	ldr	r1, [pc, #88]	; (2286c <k_poll_poller_cb+0x64>)
   22814:	4a16      	ldr	r2, [pc, #88]	; (22870 <k_poll_poller_cb+0x68>)
   22816:	4817      	ldr	r0, [pc, #92]	; (22874 <k_poll_poller_cb+0x6c>)
   22818:	23e0      	movs	r3, #224	; 0xe0
   2281a:	f000 fd56 	bl	232ca <printk>
   2281e:	4816      	ldr	r0, [pc, #88]	; (22878 <k_poll_poller_cb+0x70>)
   22820:	f000 fd53 	bl	232ca <printk>
   22824:	4812      	ldr	r0, [pc, #72]	; (22870 <k_poll_poller_cb+0x68>)
   22826:	21e0      	movs	r1, #224	; 0xe0
   22828:	f000 fd92 	bl	23350 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   2282c:	7b63      	ldrb	r3, [r4, #13]
   2282e:	079a      	lsls	r2, r3, #30
   22830:	d50f      	bpl.n	22852 <k_poll_poller_cb+0x4a>
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   22832:	6a23      	ldr	r3, [r4, #32]
   22834:	3302      	adds	r3, #2
   22836:	d015      	beq.n	22864 <k_poll_poller_cb+0x5c>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   22838:	4620      	mov	r0, r4
   2283a:	f7fe f8a3 	bl	20984 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2283e:	2d08      	cmp	r5, #8
   22840:	bf0c      	ite	eq
   22842:	f06f 0303 	mvneq.w	r3, #3
   22846:	2300      	movne	r3, #0
   22848:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2284c:	7b63      	ldrb	r3, [r4, #13]
   2284e:	06db      	lsls	r3, r3, #27
   22850:	d001      	beq.n	22856 <k_poll_poller_cb+0x4e>
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
		return 0;
   22852:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   22854:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   22856:	69a5      	ldr	r5, [r4, #24]
   22858:	2d00      	cmp	r5, #0
   2285a:	d1fa      	bne.n	22852 <k_poll_poller_cb+0x4a>
	z_ready_thread(thread);
   2285c:	4620      	mov	r0, r4
   2285e:	f7fe f9d5 	bl	20c0c <z_ready_thread>
	return 0;
   22862:	e7f6      	b.n	22852 <k_poll_poller_cb+0x4a>
		return -EAGAIN;
   22864:	f06f 000a 	mvn.w	r0, #10
   22868:	e7f4      	b.n	22854 <k_poll_poller_cb+0x4c>
   2286a:	bf00      	nop
   2286c:	0002ffdf 	.word	0x0002ffdf
   22870:	0002ffbe 	.word	0x0002ffbe
   22874:	000297e6 	.word	0x000297e6
   22878:	0002fff5 	.word	0x0002fff5

0002287c <clear_event_registrations>:
{
   2287c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22880:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   22882:	4d4a      	ldr	r5, [pc, #296]	; (229ac <clear_event_registrations+0x130>)
   22884:	f8df 9160 	ldr.w	r9, [pc, #352]	; 229e8 <clear_event_registrations+0x16c>
   22888:	4f49      	ldr	r7, [pc, #292]	; (229b0 <clear_event_registrations+0x134>)
{
   2288a:	4680      	mov	r8, r0
   2288c:	4616      	mov	r6, r2
	while (num_events--) {
   2288e:	fb04 0401 	mla	r4, r4, r1, r0
   22892:	4544      	cmp	r4, r8
   22894:	d101      	bne.n	2289a <clear_event_registrations+0x1e>
}
   22896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   2289a:	2300      	movs	r3, #0
   2289c:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   228a0:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   228a4:	f003 030f 	and.w	r3, r3, #15
   228a8:	2b04      	cmp	r3, #4
   228aa:	d83d      	bhi.n	22928 <clear_event_registrations+0xac>
   228ac:	e8df f003 	tbb	[pc, r3]
   228b0:	3c032d49 	.word	0x3c032d49
   228b4:	1e          	.byte	0x1e
   228b5:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   228b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   228ba:	b963      	cbnz	r3, 228d6 <clear_event_registrations+0x5a>
   228bc:	493d      	ldr	r1, [pc, #244]	; (229b4 <clear_event_registrations+0x138>)
   228be:	2396      	movs	r3, #150	; 0x96
   228c0:	462a      	mov	r2, r5
   228c2:	4638      	mov	r0, r7
   228c4:	f000 fd01 	bl	232ca <printk>
   228c8:	483b      	ldr	r0, [pc, #236]	; (229b8 <clear_event_registrations+0x13c>)
   228ca:	f000 fcfe 	bl	232ca <printk>
   228ce:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   228d0:	4628      	mov	r0, r5
   228d2:	f000 fd3d 	bl	23350 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   228d6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   228da:	b393      	cbz	r3, 22942 <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   228dc:	f854 2c10 	ldr.w	r2, [r4, #-16]
   228e0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   228e2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   228e4:	2300      	movs	r3, #0
	node->prev = NULL;
   228e6:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   228ea:	e02a      	b.n	22942 <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   228ec:	f854 3c04 	ldr.w	r3, [r4, #-4]
   228f0:	2b00      	cmp	r3, #0
   228f2:	d1f0      	bne.n	228d6 <clear_event_registrations+0x5a>
   228f4:	4931      	ldr	r1, [pc, #196]	; (229bc <clear_event_registrations+0x140>)
   228f6:	239a      	movs	r3, #154	; 0x9a
   228f8:	462a      	mov	r2, r5
   228fa:	4638      	mov	r0, r7
   228fc:	f000 fce5 	bl	232ca <printk>
   22900:	482f      	ldr	r0, [pc, #188]	; (229c0 <clear_event_registrations+0x144>)
   22902:	f000 fce2 	bl	232ca <printk>
   22906:	219a      	movs	r1, #154	; 0x9a
   22908:	e7e2      	b.n	228d0 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2290a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2290e:	2b00      	cmp	r3, #0
   22910:	d1e1      	bne.n	228d6 <clear_event_registrations+0x5a>
   22912:	492c      	ldr	r1, [pc, #176]	; (229c4 <clear_event_registrations+0x148>)
   22914:	239e      	movs	r3, #158	; 0x9e
   22916:	462a      	mov	r2, r5
   22918:	4638      	mov	r0, r7
   2291a:	f000 fcd6 	bl	232ca <printk>
   2291e:	482a      	ldr	r0, [pc, #168]	; (229c8 <clear_event_registrations+0x14c>)
   22920:	f000 fcd3 	bl	232ca <printk>
   22924:	219e      	movs	r1, #158	; 0x9e
   22926:	e7d3      	b.n	228d0 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   22928:	4649      	mov	r1, r9
   2292a:	23a5      	movs	r3, #165	; 0xa5
   2292c:	462a      	mov	r2, r5
   2292e:	4638      	mov	r0, r7
   22930:	f000 fccb 	bl	232ca <printk>
   22934:	4825      	ldr	r0, [pc, #148]	; (229cc <clear_event_registrations+0x150>)
   22936:	f000 fcc8 	bl	232ca <printk>
   2293a:	21a5      	movs	r1, #165	; 0xa5
   2293c:	4628      	mov	r0, r5
   2293e:	f000 fd07 	bl	23350 <assert_post_action>
   22942:	4823      	ldr	r0, [pc, #140]	; (229d0 <clear_event_registrations+0x154>)
   22944:	f7ff fac4 	bl	21ed0 <z_spin_unlock_valid>
   22948:	b968      	cbnz	r0, 22966 <clear_event_registrations+0xea>
   2294a:	4a22      	ldr	r2, [pc, #136]	; (229d4 <clear_event_registrations+0x158>)
   2294c:	4922      	ldr	r1, [pc, #136]	; (229d8 <clear_event_registrations+0x15c>)
   2294e:	235d      	movs	r3, #93	; 0x5d
   22950:	4638      	mov	r0, r7
   22952:	f000 fcba 	bl	232ca <printk>
   22956:	491e      	ldr	r1, [pc, #120]	; (229d0 <clear_event_registrations+0x154>)
   22958:	4820      	ldr	r0, [pc, #128]	; (229dc <clear_event_registrations+0x160>)
   2295a:	f000 fcb6 	bl	232ca <printk>
   2295e:	481d      	ldr	r0, [pc, #116]	; (229d4 <clear_event_registrations+0x158>)
   22960:	215d      	movs	r1, #93	; 0x5d
   22962:	f000 fcf5 	bl	23350 <assert_post_action>
   22966:	f386 8811 	msr	BASEPRI, r6
   2296a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2296e:	f04f 0320 	mov.w	r3, #32
   22972:	f3ef 8611 	mrs	r6, BASEPRI
   22976:	f383 8811 	msr	BASEPRI, r3
   2297a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2297e:	4814      	ldr	r0, [pc, #80]	; (229d0 <clear_event_registrations+0x154>)
   22980:	f7ff fa98 	bl	21eb4 <z_spin_lock_valid>
   22984:	b968      	cbnz	r0, 229a2 <clear_event_registrations+0x126>
   22986:	4a13      	ldr	r2, [pc, #76]	; (229d4 <clear_event_registrations+0x158>)
   22988:	4915      	ldr	r1, [pc, #84]	; (229e0 <clear_event_registrations+0x164>)
   2298a:	234a      	movs	r3, #74	; 0x4a
   2298c:	4638      	mov	r0, r7
   2298e:	f000 fc9c 	bl	232ca <printk>
   22992:	490f      	ldr	r1, [pc, #60]	; (229d0 <clear_event_registrations+0x154>)
   22994:	4813      	ldr	r0, [pc, #76]	; (229e4 <clear_event_registrations+0x168>)
   22996:	f000 fc98 	bl	232ca <printk>
   2299a:	480e      	ldr	r0, [pc, #56]	; (229d4 <clear_event_registrations+0x158>)
   2299c:	214a      	movs	r1, #74	; 0x4a
   2299e:	f000 fcd7 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   229a2:	480b      	ldr	r0, [pc, #44]	; (229d0 <clear_event_registrations+0x154>)
   229a4:	f7ff faa4 	bl	21ef0 <z_spin_lock_set_owner>
	return k;
   229a8:	3c14      	subs	r4, #20
   229aa:	e772      	b.n	22892 <clear_event_registrations+0x16>
   229ac:	0002ffbe 	.word	0x0002ffbe
   229b0:	000297e6 	.word	0x000297e6
   229b4:	00030014 	.word	0x00030014
   229b8:	0003002e 	.word	0x0003002e
   229bc:	00030043 	.word	0x00030043
   229c0:	0003005f 	.word	0x0003005f
   229c4:	00030070 	.word	0x00030070
   229c8:	0003008d 	.word	0x0003008d
   229cc:	000300a4 	.word	0x000300a4
   229d0:	20001cbc 	.word	0x20001cbc
   229d4:	00029daf 	.word	0x00029daf
   229d8:	00029dfe 	.word	0x00029dfe
   229dc:	00029e15 	.word	0x00029e15
   229e0:	00029dd1 	.word	0x00029dd1
   229e4:	00029de6 	.word	0x00029de6
   229e8:	0002d2c6 	.word	0x0002d2c6

000229ec <register_events>:
{
   229ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   229f0:	2700      	movs	r7, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   229f2:	4e6c      	ldr	r6, [pc, #432]	; (22ba4 <register_events+0x1b8>)
   229f4:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 22be0 <register_events+0x1f4>
   229f8:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 22be4 <register_events+0x1f8>
{
   229fc:	9100      	str	r1, [sp, #0]
   229fe:	4615      	mov	r5, r2
   22a00:	9301      	str	r3, [sp, #4]
   22a02:	4604      	mov	r4, r0
	int events_registered = 0;
   22a04:	46b9      	mov	r9, r7
	for (int ii = 0; ii < num_events; ii++) {
   22a06:	9b00      	ldr	r3, [sp, #0]
   22a08:	429f      	cmp	r7, r3
   22a0a:	db03      	blt.n	22a14 <register_events+0x28>
}
   22a0c:	4648      	mov	r0, r9
   22a0e:	b003      	add	sp, #12
   22a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a14:	f04f 0320 	mov.w	r3, #32
   22a18:	f3ef 8b11 	mrs	fp, BASEPRI
   22a1c:	f383 8811 	msr	BASEPRI, r3
   22a20:	f3bf 8f6f 	isb	sy
   22a24:	4630      	mov	r0, r6
   22a26:	f7ff fa45 	bl	21eb4 <z_spin_lock_valid>
   22a2a:	b968      	cbnz	r0, 22a48 <register_events+0x5c>
   22a2c:	485e      	ldr	r0, [pc, #376]	; (22ba8 <register_events+0x1bc>)
   22a2e:	234a      	movs	r3, #74	; 0x4a
   22a30:	4642      	mov	r2, r8
   22a32:	4651      	mov	r1, sl
   22a34:	f000 fc49 	bl	232ca <printk>
   22a38:	485c      	ldr	r0, [pc, #368]	; (22bac <register_events+0x1c0>)
   22a3a:	4631      	mov	r1, r6
   22a3c:	f000 fc45 	bl	232ca <printk>
   22a40:	214a      	movs	r1, #74	; 0x4a
   22a42:	4640      	mov	r0, r8
   22a44:	f000 fc84 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   22a48:	4630      	mov	r0, r6
   22a4a:	f7ff fa51 	bl	21ef0 <z_spin_lock_set_owner>
	switch (event->type) {
   22a4e:	7b63      	ldrb	r3, [r4, #13]
   22a50:	f003 030f 	and.w	r3, r3, #15
   22a54:	2b04      	cmp	r3, #4
   22a56:	d844      	bhi.n	22ae2 <register_events+0xf6>
   22a58:	e8df f003 	tbb	[pc, r3]
   22a5c:	43033d2d 	.word	0x43033d2d
   22a60:	2a          	.byte	0x2a
   22a61:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   22a62:	6923      	ldr	r3, [r4, #16]
   22a64:	689b      	ldr	r3, [r3, #8]
   22a66:	b333      	cbz	r3, 22ab6 <register_events+0xca>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   22a68:	2202      	movs	r2, #2
	event->state |= state;
   22a6a:	68e3      	ldr	r3, [r4, #12]
   22a6c:	f3c3 3004 	ubfx	r0, r3, #12, #5
   22a70:	4302      	orrs	r2, r0
	event->poller = NULL;
   22a72:	2100      	movs	r1, #0
	event->state |= state;
   22a74:	f362 3310 	bfi	r3, r2, #12, #5
	event->poller = NULL;
   22a78:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   22a7a:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   22a7c:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a7e:	4630      	mov	r0, r6
   22a80:	f7ff fa26 	bl	21ed0 <z_spin_unlock_valid>
   22a84:	b968      	cbnz	r0, 22aa2 <register_events+0xb6>
   22a86:	494a      	ldr	r1, [pc, #296]	; (22bb0 <register_events+0x1c4>)
   22a88:	4847      	ldr	r0, [pc, #284]	; (22ba8 <register_events+0x1bc>)
   22a8a:	235d      	movs	r3, #93	; 0x5d
   22a8c:	4642      	mov	r2, r8
   22a8e:	f000 fc1c 	bl	232ca <printk>
   22a92:	4848      	ldr	r0, [pc, #288]	; (22bb4 <register_events+0x1c8>)
   22a94:	4631      	mov	r1, r6
   22a96:	f000 fc18 	bl	232ca <printk>
   22a9a:	215d      	movs	r1, #93	; 0x5d
   22a9c:	4640      	mov	r0, r8
   22a9e:	f000 fc57 	bl	23350 <assert_post_action>
	__asm__ volatile(
   22aa2:	f38b 8811 	msr	BASEPRI, fp
   22aa6:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   22aaa:	3701      	adds	r7, #1
   22aac:	3414      	adds	r4, #20
   22aae:	e7aa      	b.n	22a06 <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   22ab0:	6923      	ldr	r3, [r4, #16]
   22ab2:	681b      	ldr	r3, [r3, #0]
   22ab4:	bb33      	cbnz	r3, 22b04 <register_events+0x118>
		} else if (!just_check && poller->is_polling) {
   22ab6:	9b01      	ldr	r3, [sp, #4]
   22ab8:	2b00      	cmp	r3, #0
   22aba:	d1e0      	bne.n	22a7e <register_events+0x92>
   22abc:	782b      	ldrb	r3, [r5, #0]
   22abe:	2b00      	cmp	r3, #0
   22ac0:	d0dd      	beq.n	22a7e <register_events+0x92>
	switch (event->type) {
   22ac2:	7b63      	ldrb	r3, [r4, #13]
   22ac4:	f003 030f 	and.w	r3, r3, #15
   22ac8:	2b04      	cmp	r3, #4
   22aca:	d85d      	bhi.n	22b88 <register_events+0x19c>
   22acc:	e8df f003 	tbb	[pc, r3]
   22ad0:	5c1c4931 	.word	0x5c1c4931
   22ad4:	35          	.byte	0x35
   22ad5:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   22ad6:	6923      	ldr	r3, [r4, #16]
   22ad8:	689b      	ldr	r3, [r3, #8]
   22ada:	2b00      	cmp	r3, #0
   22adc:	d0eb      	beq.n	22ab6 <register_events+0xca>
			*state = K_POLL_STATE_SIGNALED;
   22ade:	2201      	movs	r2, #1
   22ae0:	e7c3      	b.n	22a6a <register_events+0x7e>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   22ae2:	4a35      	ldr	r2, [pc, #212]	; (22bb8 <register_events+0x1cc>)
   22ae4:	4935      	ldr	r1, [pc, #212]	; (22bbc <register_events+0x1d0>)
   22ae6:	4830      	ldr	r0, [pc, #192]	; (22ba8 <register_events+0x1bc>)
   22ae8:	2350      	movs	r3, #80	; 0x50
   22aea:	f000 fbee 	bl	232ca <printk>
   22aee:	7b61      	ldrb	r1, [r4, #13]
   22af0:	4833      	ldr	r0, [pc, #204]	; (22bc0 <register_events+0x1d4>)
   22af2:	f001 010f 	and.w	r1, r1, #15
   22af6:	f000 fbe8 	bl	232ca <printk>
   22afa:	482f      	ldr	r0, [pc, #188]	; (22bb8 <register_events+0x1cc>)
   22afc:	2150      	movs	r1, #80	; 0x50
   22afe:	f000 fc27 	bl	23350 <assert_post_action>
		break;
   22b02:	e7d8      	b.n	22ab6 <register_events+0xca>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   22b04:	2204      	movs	r2, #4
   22b06:	e7b0      	b.n	22a6a <register_events+0x7e>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22b08:	6923      	ldr	r3, [r4, #16]
   22b0a:	b963      	cbnz	r3, 22b26 <register_events+0x13a>
   22b0c:	492d      	ldr	r1, [pc, #180]	; (22bc4 <register_events+0x1d8>)
   22b0e:	4a2a      	ldr	r2, [pc, #168]	; (22bb8 <register_events+0x1cc>)
   22b10:	4825      	ldr	r0, [pc, #148]	; (22ba8 <register_events+0x1bc>)
   22b12:	2375      	movs	r3, #117	; 0x75
   22b14:	f000 fbd9 	bl	232ca <printk>
   22b18:	482b      	ldr	r0, [pc, #172]	; (22bc8 <register_events+0x1dc>)
   22b1a:	f000 fbd6 	bl	232ca <printk>
   22b1e:	4826      	ldr	r0, [pc, #152]	; (22bb8 <register_events+0x1cc>)
   22b20:	2175      	movs	r1, #117	; 0x75
   22b22:	f000 fc15 	bl	23350 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   22b26:	6920      	ldr	r0, [r4, #16]
   22b28:	462a      	mov	r2, r5
   22b2a:	4621      	mov	r1, r4
   22b2c:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   22b2e:	f005 fd29 	bl	28584 <add_event>
	event->poller = poller;
   22b32:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   22b34:	f109 0901 	add.w	r9, r9, #1
   22b38:	e7a1      	b.n	22a7e <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22b3a:	6923      	ldr	r3, [r4, #16]
   22b3c:	b963      	cbnz	r3, 22b58 <register_events+0x16c>
   22b3e:	4923      	ldr	r1, [pc, #140]	; (22bcc <register_events+0x1e0>)
   22b40:	4a1d      	ldr	r2, [pc, #116]	; (22bb8 <register_events+0x1cc>)
   22b42:	4819      	ldr	r0, [pc, #100]	; (22ba8 <register_events+0x1bc>)
   22b44:	2379      	movs	r3, #121	; 0x79
   22b46:	f000 fbc0 	bl	232ca <printk>
   22b4a:	4821      	ldr	r0, [pc, #132]	; (22bd0 <register_events+0x1e4>)
   22b4c:	f000 fbbd 	bl	232ca <printk>
   22b50:	4819      	ldr	r0, [pc, #100]	; (22bb8 <register_events+0x1cc>)
   22b52:	2179      	movs	r1, #121	; 0x79
   22b54:	f000 fbfc 	bl	23350 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   22b58:	6920      	ldr	r0, [r4, #16]
   22b5a:	462a      	mov	r2, r5
   22b5c:	4621      	mov	r1, r4
   22b5e:	300c      	adds	r0, #12
   22b60:	e7e5      	b.n	22b2e <register_events+0x142>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22b62:	6923      	ldr	r3, [r4, #16]
   22b64:	b963      	cbnz	r3, 22b80 <register_events+0x194>
   22b66:	491b      	ldr	r1, [pc, #108]	; (22bd4 <register_events+0x1e8>)
   22b68:	4a13      	ldr	r2, [pc, #76]	; (22bb8 <register_events+0x1cc>)
   22b6a:	480f      	ldr	r0, [pc, #60]	; (22ba8 <register_events+0x1bc>)
   22b6c:	237d      	movs	r3, #125	; 0x7d
   22b6e:	f000 fbac 	bl	232ca <printk>
   22b72:	4819      	ldr	r0, [pc, #100]	; (22bd8 <register_events+0x1ec>)
   22b74:	f000 fba9 	bl	232ca <printk>
   22b78:	480f      	ldr	r0, [pc, #60]	; (22bb8 <register_events+0x1cc>)
   22b7a:	217d      	movs	r1, #125	; 0x7d
   22b7c:	f000 fbe8 	bl	23350 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   22b80:	6920      	ldr	r0, [r4, #16]
   22b82:	462a      	mov	r2, r5
   22b84:	4621      	mov	r1, r4
   22b86:	e7d2      	b.n	22b2e <register_events+0x142>
		__ASSERT(false, "invalid event type\n");
   22b88:	4a0b      	ldr	r2, [pc, #44]	; (22bb8 <register_events+0x1cc>)
   22b8a:	490c      	ldr	r1, [pc, #48]	; (22bbc <register_events+0x1d0>)
   22b8c:	4806      	ldr	r0, [pc, #24]	; (22ba8 <register_events+0x1bc>)
   22b8e:	2384      	movs	r3, #132	; 0x84
   22b90:	f000 fb9b 	bl	232ca <printk>
   22b94:	4811      	ldr	r0, [pc, #68]	; (22bdc <register_events+0x1f0>)
   22b96:	f000 fb98 	bl	232ca <printk>
   22b9a:	4807      	ldr	r0, [pc, #28]	; (22bb8 <register_events+0x1cc>)
   22b9c:	2184      	movs	r1, #132	; 0x84
   22b9e:	f000 fbd7 	bl	23350 <assert_post_action>
		break;
   22ba2:	e7c6      	b.n	22b32 <register_events+0x146>
   22ba4:	20001cbc 	.word	0x20001cbc
   22ba8:	000297e6 	.word	0x000297e6
   22bac:	00029de6 	.word	0x00029de6
   22bb0:	00029dfe 	.word	0x00029dfe
   22bb4:	00029e15 	.word	0x00029e15
   22bb8:	0002ffbe 	.word	0x0002ffbe
   22bbc:	0002d2c6 	.word	0x0002d2c6
   22bc0:	000300ba 	.word	0x000300ba
   22bc4:	00030014 	.word	0x00030014
   22bc8:	0003002e 	.word	0x0003002e
   22bcc:	00030043 	.word	0x00030043
   22bd0:	0003005f 	.word	0x0003005f
   22bd4:	00030070 	.word	0x00030070
   22bd8:	0003008d 	.word	0x0003008d
   22bdc:	000300a4 	.word	0x000300a4
   22be0:	00029daf 	.word	0x00029daf
   22be4:	00029dd1 	.word	0x00029dd1

00022be8 <k_poll_event_init>:
{
   22be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22bea:	4605      	mov	r5, r0
   22bec:	460f      	mov	r7, r1
   22bee:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   22bf0:	4614      	mov	r4, r2
   22bf2:	b162      	cbz	r2, 22c0e <k_poll_event_init+0x26>
   22bf4:	491b      	ldr	r1, [pc, #108]	; (22c64 <k_poll_event_init+0x7c>)
   22bf6:	4a1c      	ldr	r2, [pc, #112]	; (22c68 <k_poll_event_init+0x80>)
   22bf8:	481c      	ldr	r0, [pc, #112]	; (22c6c <k_poll_event_init+0x84>)
   22bfa:	2329      	movs	r3, #41	; 0x29
   22bfc:	f000 fb65 	bl	232ca <printk>
   22c00:	481b      	ldr	r0, [pc, #108]	; (22c70 <k_poll_event_init+0x88>)
   22c02:	f000 fb62 	bl	232ca <printk>
   22c06:	4818      	ldr	r0, [pc, #96]	; (22c68 <k_poll_event_init+0x80>)
   22c08:	2129      	movs	r1, #41	; 0x29
   22c0a:	f000 fba1 	bl	23350 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   22c0e:	2f0f      	cmp	r7, #15
   22c10:	d90c      	bls.n	22c2c <k_poll_event_init+0x44>
   22c12:	4918      	ldr	r1, [pc, #96]	; (22c74 <k_poll_event_init+0x8c>)
   22c14:	4a14      	ldr	r2, [pc, #80]	; (22c68 <k_poll_event_init+0x80>)
   22c16:	4815      	ldr	r0, [pc, #84]	; (22c6c <k_poll_event_init+0x84>)
   22c18:	232b      	movs	r3, #43	; 0x2b
   22c1a:	f000 fb56 	bl	232ca <printk>
   22c1e:	4816      	ldr	r0, [pc, #88]	; (22c78 <k_poll_event_init+0x90>)
   22c20:	f000 fb53 	bl	232ca <printk>
   22c24:	4810      	ldr	r0, [pc, #64]	; (22c68 <k_poll_event_init+0x80>)
   22c26:	212b      	movs	r1, #43	; 0x2b
   22c28:	f000 fb92 	bl	23350 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   22c2c:	b966      	cbnz	r6, 22c48 <k_poll_event_init+0x60>
   22c2e:	4913      	ldr	r1, [pc, #76]	; (22c7c <k_poll_event_init+0x94>)
   22c30:	4a0d      	ldr	r2, [pc, #52]	; (22c68 <k_poll_event_init+0x80>)
   22c32:	480e      	ldr	r0, [pc, #56]	; (22c6c <k_poll_event_init+0x84>)
   22c34:	232c      	movs	r3, #44	; 0x2c
   22c36:	f000 fb48 	bl	232ca <printk>
   22c3a:	4811      	ldr	r0, [pc, #68]	; (22c80 <k_poll_event_init+0x98>)
   22c3c:	f000 fb45 	bl	232ca <printk>
   22c40:	4809      	ldr	r0, [pc, #36]	; (22c68 <k_poll_event_init+0x80>)
   22c42:	212c      	movs	r1, #44	; 0x2c
   22c44:	f000 fb84 	bl	23350 <assert_post_action>
	event->poller = NULL;
   22c48:	2300      	movs	r3, #0
	event->type = type;
   22c4a:	0464      	lsls	r4, r4, #17
   22c4c:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   22c4e:	60ab      	str	r3, [r5, #8]
	event->type = type;
   22c50:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   22c54:	7b2b      	ldrb	r3, [r5, #12]
   22c56:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   22c5a:	433c      	orrs	r4, r7
   22c5c:	431c      	orrs	r4, r3
	event->obj = obj;
   22c5e:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   22c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22c64:	000300d7 	.word	0x000300d7
   22c68:	0002ffbe 	.word	0x0002ffbe
   22c6c:	000297e6 	.word	0x000297e6
   22c70:	000300f7 	.word	0x000300f7
   22c74:	0003011d 	.word	0x0003011d
   22c78:	00030141 	.word	0x00030141
   22c7c:	00030151 	.word	0x00030151
   22c80:	00030164 	.word	0x00030164

00022c84 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   22c84:	b5f0      	push	{r4, r5, r6, r7, lr}
   22c86:	b087      	sub	sp, #28
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   22c88:	2301      	movs	r3, #1
   22c8a:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   22c8e:	4b71      	ldr	r3, [pc, #452]	; (22e54 <z_impl_k_poll+0x1d0>)
	struct _poller poller = { .is_polling = true,
   22c90:	689b      	ldr	r3, [r3, #8]
   22c92:	9304      	str	r3, [sp, #16]
   22c94:	4b70      	ldr	r3, [pc, #448]	; (22e58 <z_impl_k_poll+0x1d4>)
   22c96:	9305      	str	r3, [sp, #20]
{
   22c98:	4604      	mov	r4, r0
   22c9a:	460e      	mov	r6, r1
   22c9c:	4615      	mov	r5, r2
   22c9e:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   22ca2:	b173      	cbz	r3, 22cc2 <z_impl_k_poll+0x3e>
   22ca4:	496d      	ldr	r1, [pc, #436]	; (22e5c <z_impl_k_poll+0x1d8>)
   22ca6:	4a6e      	ldr	r2, [pc, #440]	; (22e60 <z_impl_k_poll+0x1dc>)
   22ca8:	486e      	ldr	r0, [pc, #440]	; (22e64 <z_impl_k_poll+0x1e0>)
   22caa:	f44f 7380 	mov.w	r3, #256	; 0x100
   22cae:	f000 fb0c 	bl	232ca <printk>
   22cb2:	486d      	ldr	r0, [pc, #436]	; (22e68 <z_impl_k_poll+0x1e4>)
   22cb4:	f000 fb09 	bl	232ca <printk>
   22cb8:	4869      	ldr	r0, [pc, #420]	; (22e60 <z_impl_k_poll+0x1dc>)
   22cba:	f44f 7180 	mov.w	r1, #256	; 0x100
   22cbe:	f000 fb47 	bl	23350 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   22cc2:	b974      	cbnz	r4, 22ce2 <z_impl_k_poll+0x5e>
   22cc4:	4969      	ldr	r1, [pc, #420]	; (22e6c <z_impl_k_poll+0x1e8>)
   22cc6:	4a66      	ldr	r2, [pc, #408]	; (22e60 <z_impl_k_poll+0x1dc>)
   22cc8:	4866      	ldr	r0, [pc, #408]	; (22e64 <z_impl_k_poll+0x1e0>)
   22cca:	f240 1301 	movw	r3, #257	; 0x101
   22cce:	f000 fafc 	bl	232ca <printk>
   22cd2:	4867      	ldr	r0, [pc, #412]	; (22e70 <z_impl_k_poll+0x1ec>)
   22cd4:	f000 faf9 	bl	232ca <printk>
   22cd8:	4861      	ldr	r0, [pc, #388]	; (22e60 <z_impl_k_poll+0x1dc>)
   22cda:	f240 1101 	movw	r1, #257	; 0x101
   22cde:	f000 fb37 	bl	23350 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   22ce2:	2e00      	cmp	r6, #0
   22ce4:	da0e      	bge.n	22d04 <z_impl_k_poll+0x80>
   22ce6:	4963      	ldr	r1, [pc, #396]	; (22e74 <z_impl_k_poll+0x1f0>)
   22ce8:	4a5d      	ldr	r2, [pc, #372]	; (22e60 <z_impl_k_poll+0x1dc>)
   22cea:	485e      	ldr	r0, [pc, #376]	; (22e64 <z_impl_k_poll+0x1e0>)
   22cec:	f44f 7381 	mov.w	r3, #258	; 0x102
   22cf0:	f000 faeb 	bl	232ca <printk>
   22cf4:	4860      	ldr	r0, [pc, #384]	; (22e78 <z_impl_k_poll+0x1f4>)
   22cf6:	f000 fae8 	bl	232ca <printk>
   22cfa:	4859      	ldr	r0, [pc, #356]	; (22e60 <z_impl_k_poll+0x1dc>)
   22cfc:	f44f 7181 	mov.w	r1, #258	; 0x102
   22d00:	f000 fb26 	bl	23350 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   22d04:	fab5 f385 	clz	r3, r5
   22d08:	4631      	mov	r1, r6
   22d0a:	095b      	lsrs	r3, r3, #5
   22d0c:	aa03      	add	r2, sp, #12
   22d0e:	4620      	mov	r0, r4
   22d10:	f7ff fe6c 	bl	229ec <register_events>
   22d14:	4606      	mov	r6, r0
	__asm__ volatile(
   22d16:	f04f 0320 	mov.w	r3, #32
   22d1a:	f3ef 8711 	mrs	r7, BASEPRI
   22d1e:	f383 8811 	msr	BASEPRI, r3
   22d22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d26:	4855      	ldr	r0, [pc, #340]	; (22e7c <z_impl_k_poll+0x1f8>)
   22d28:	f7ff f8c4 	bl	21eb4 <z_spin_lock_valid>
   22d2c:	b968      	cbnz	r0, 22d4a <z_impl_k_poll+0xc6>
   22d2e:	4a54      	ldr	r2, [pc, #336]	; (22e80 <z_impl_k_poll+0x1fc>)
   22d30:	4954      	ldr	r1, [pc, #336]	; (22e84 <z_impl_k_poll+0x200>)
   22d32:	484c      	ldr	r0, [pc, #304]	; (22e64 <z_impl_k_poll+0x1e0>)
   22d34:	234a      	movs	r3, #74	; 0x4a
   22d36:	f000 fac8 	bl	232ca <printk>
   22d3a:	4950      	ldr	r1, [pc, #320]	; (22e7c <z_impl_k_poll+0x1f8>)
   22d3c:	4852      	ldr	r0, [pc, #328]	; (22e88 <z_impl_k_poll+0x204>)
   22d3e:	f000 fac4 	bl	232ca <printk>
   22d42:	484f      	ldr	r0, [pc, #316]	; (22e80 <z_impl_k_poll+0x1fc>)
   22d44:	214a      	movs	r1, #74	; 0x4a
   22d46:	f000 fb03 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   22d4a:	484c      	ldr	r0, [pc, #304]	; (22e7c <z_impl_k_poll+0x1f8>)
   22d4c:	f7ff f8d0 	bl	21ef0 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   22d50:	f89d 300c 	ldrb.w	r3, [sp, #12]
   22d54:	b9f3      	cbnz	r3, 22d94 <z_impl_k_poll+0x110>
		clear_event_registrations(events, events_registered, key);
   22d56:	4620      	mov	r0, r4
   22d58:	463a      	mov	r2, r7
   22d5a:	4631      	mov	r1, r6
   22d5c:	f7ff fd8e 	bl	2287c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d60:	4846      	ldr	r0, [pc, #280]	; (22e7c <z_impl_k_poll+0x1f8>)
   22d62:	f7ff f8b5 	bl	21ed0 <z_spin_unlock_valid>
   22d66:	b968      	cbnz	r0, 22d84 <z_impl_k_poll+0x100>
   22d68:	4a45      	ldr	r2, [pc, #276]	; (22e80 <z_impl_k_poll+0x1fc>)
   22d6a:	4948      	ldr	r1, [pc, #288]	; (22e8c <z_impl_k_poll+0x208>)
   22d6c:	483d      	ldr	r0, [pc, #244]	; (22e64 <z_impl_k_poll+0x1e0>)
   22d6e:	235d      	movs	r3, #93	; 0x5d
   22d70:	f000 faab 	bl	232ca <printk>
   22d74:	4941      	ldr	r1, [pc, #260]	; (22e7c <z_impl_k_poll+0x1f8>)
   22d76:	4846      	ldr	r0, [pc, #280]	; (22e90 <z_impl_k_poll+0x20c>)
   22d78:	f000 faa7 	bl	232ca <printk>
   22d7c:	4840      	ldr	r0, [pc, #256]	; (22e80 <z_impl_k_poll+0x1fc>)
   22d7e:	215d      	movs	r1, #93	; 0x5d
   22d80:	f000 fae6 	bl	23350 <assert_post_action>
	__asm__ volatile(
   22d84:	f387 8811 	msr	BASEPRI, r7
   22d88:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   22d8c:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   22d8e:	4628      	mov	r0, r5
   22d90:	b007      	add	sp, #28
   22d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   22d94:	2300      	movs	r3, #0
   22d96:	f88d 300c 	strb.w	r3, [sp, #12]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22d9a:	b9c5      	cbnz	r5, 22dce <z_impl_k_poll+0x14a>
   22d9c:	4837      	ldr	r0, [pc, #220]	; (22e7c <z_impl_k_poll+0x1f8>)
   22d9e:	f7ff f897 	bl	21ed0 <z_spin_unlock_valid>
   22da2:	b968      	cbnz	r0, 22dc0 <z_impl_k_poll+0x13c>
   22da4:	4a36      	ldr	r2, [pc, #216]	; (22e80 <z_impl_k_poll+0x1fc>)
   22da6:	4939      	ldr	r1, [pc, #228]	; (22e8c <z_impl_k_poll+0x208>)
   22da8:	482e      	ldr	r0, [pc, #184]	; (22e64 <z_impl_k_poll+0x1e0>)
   22daa:	235d      	movs	r3, #93	; 0x5d
   22dac:	f000 fa8d 	bl	232ca <printk>
   22db0:	4932      	ldr	r1, [pc, #200]	; (22e7c <z_impl_k_poll+0x1f8>)
   22db2:	4837      	ldr	r0, [pc, #220]	; (22e90 <z_impl_k_poll+0x20c>)
   22db4:	f000 fa89 	bl	232ca <printk>
   22db8:	4831      	ldr	r0, [pc, #196]	; (22e80 <z_impl_k_poll+0x1fc>)
   22dba:	215d      	movs	r1, #93	; 0x5d
   22dbc:	f000 fac8 	bl	23350 <assert_post_action>
   22dc0:	f387 8811 	msr	BASEPRI, r7
   22dc4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   22dc8:	f06f 050a 	mvn.w	r5, #10
   22dcc:	e7df      	b.n	22d8e <z_impl_k_poll+0x10a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   22dce:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   22dd0:	462b      	mov	r3, r5
   22dd2:	4639      	mov	r1, r7
   22dd4:	4829      	ldr	r0, [pc, #164]	; (22e7c <z_impl_k_poll+0x1f8>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   22dd6:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   22dda:	f7fe fb77 	bl	214cc <z_pend_curr>
   22dde:	4605      	mov	r5, r0
	__asm__ volatile(
   22de0:	f04f 0320 	mov.w	r3, #32
   22de4:	f3ef 8711 	mrs	r7, BASEPRI
   22de8:	f383 8811 	msr	BASEPRI, r3
   22dec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22df0:	4822      	ldr	r0, [pc, #136]	; (22e7c <z_impl_k_poll+0x1f8>)
   22df2:	f7ff f85f 	bl	21eb4 <z_spin_lock_valid>
   22df6:	b968      	cbnz	r0, 22e14 <z_impl_k_poll+0x190>
   22df8:	4a21      	ldr	r2, [pc, #132]	; (22e80 <z_impl_k_poll+0x1fc>)
   22dfa:	4922      	ldr	r1, [pc, #136]	; (22e84 <z_impl_k_poll+0x200>)
   22dfc:	4819      	ldr	r0, [pc, #100]	; (22e64 <z_impl_k_poll+0x1e0>)
   22dfe:	234a      	movs	r3, #74	; 0x4a
   22e00:	f000 fa63 	bl	232ca <printk>
   22e04:	491d      	ldr	r1, [pc, #116]	; (22e7c <z_impl_k_poll+0x1f8>)
   22e06:	4820      	ldr	r0, [pc, #128]	; (22e88 <z_impl_k_poll+0x204>)
   22e08:	f000 fa5f 	bl	232ca <printk>
   22e0c:	481c      	ldr	r0, [pc, #112]	; (22e80 <z_impl_k_poll+0x1fc>)
   22e0e:	214a      	movs	r1, #74	; 0x4a
   22e10:	f000 fa9e 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   22e14:	4819      	ldr	r0, [pc, #100]	; (22e7c <z_impl_k_poll+0x1f8>)
   22e16:	f7ff f86b 	bl	21ef0 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   22e1a:	4620      	mov	r0, r4
   22e1c:	463a      	mov	r2, r7
   22e1e:	4631      	mov	r1, r6
   22e20:	f7ff fd2c 	bl	2287c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e24:	4815      	ldr	r0, [pc, #84]	; (22e7c <z_impl_k_poll+0x1f8>)
   22e26:	f7ff f853 	bl	21ed0 <z_spin_unlock_valid>
   22e2a:	b968      	cbnz	r0, 22e48 <z_impl_k_poll+0x1c4>
   22e2c:	4a14      	ldr	r2, [pc, #80]	; (22e80 <z_impl_k_poll+0x1fc>)
   22e2e:	4917      	ldr	r1, [pc, #92]	; (22e8c <z_impl_k_poll+0x208>)
   22e30:	480c      	ldr	r0, [pc, #48]	; (22e64 <z_impl_k_poll+0x1e0>)
   22e32:	235d      	movs	r3, #93	; 0x5d
   22e34:	f000 fa49 	bl	232ca <printk>
   22e38:	4910      	ldr	r1, [pc, #64]	; (22e7c <z_impl_k_poll+0x1f8>)
   22e3a:	4815      	ldr	r0, [pc, #84]	; (22e90 <z_impl_k_poll+0x20c>)
   22e3c:	f000 fa45 	bl	232ca <printk>
   22e40:	480f      	ldr	r0, [pc, #60]	; (22e80 <z_impl_k_poll+0x1fc>)
   22e42:	215d      	movs	r1, #93	; 0x5d
   22e44:	f000 fa84 	bl	23350 <assert_post_action>
	__asm__ volatile(
   22e48:	f387 8811 	msr	BASEPRI, r7
   22e4c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   22e50:	e79d      	b.n	22d8e <z_impl_k_poll+0x10a>
   22e52:	bf00      	nop
   22e54:	20001bc4 	.word	0x20001bc4
   22e58:	00022809 	.word	0x00022809
   22e5c:	0002fcf0 	.word	0x0002fcf0
   22e60:	0002ffbe 	.word	0x0002ffbe
   22e64:	000297e6 	.word	0x000297e6
   22e68:	0002f76a 	.word	0x0002f76a
   22e6c:	0003017e 	.word	0x0003017e
   22e70:	00030194 	.word	0x00030194
   22e74:	000301a3 	.word	0x000301a3
   22e78:	000301b3 	.word	0x000301b3
   22e7c:	20001cbc 	.word	0x20001cbc
   22e80:	00029daf 	.word	0x00029daf
   22e84:	00029dd1 	.word	0x00029dd1
   22e88:	00029de6 	.word	0x00029de6
   22e8c:	00029dfe 	.word	0x00029dfe
   22e90:	00029e15 	.word	0x00029e15

00022e94 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   22e94:	b570      	push	{r4, r5, r6, lr}
   22e96:	4604      	mov	r4, r0
   22e98:	460d      	mov	r5, r1
	__asm__ volatile(
   22e9a:	f04f 0320 	mov.w	r3, #32
   22e9e:	f3ef 8611 	mrs	r6, BASEPRI
   22ea2:	f383 8811 	msr	BASEPRI, r3
   22ea6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22eaa:	4821      	ldr	r0, [pc, #132]	; (22f30 <z_impl_k_poll_signal_raise+0x9c>)
   22eac:	f7ff f802 	bl	21eb4 <z_spin_lock_valid>
   22eb0:	b968      	cbnz	r0, 22ece <z_impl_k_poll_signal_raise+0x3a>
   22eb2:	4a20      	ldr	r2, [pc, #128]	; (22f34 <z_impl_k_poll_signal_raise+0xa0>)
   22eb4:	4920      	ldr	r1, [pc, #128]	; (22f38 <z_impl_k_poll_signal_raise+0xa4>)
   22eb6:	4821      	ldr	r0, [pc, #132]	; (22f3c <z_impl_k_poll_signal_raise+0xa8>)
   22eb8:	234a      	movs	r3, #74	; 0x4a
   22eba:	f000 fa06 	bl	232ca <printk>
   22ebe:	491c      	ldr	r1, [pc, #112]	; (22f30 <z_impl_k_poll_signal_raise+0x9c>)
   22ec0:	481f      	ldr	r0, [pc, #124]	; (22f40 <z_impl_k_poll_signal_raise+0xac>)
   22ec2:	f000 fa02 	bl	232ca <printk>
   22ec6:	481b      	ldr	r0, [pc, #108]	; (22f34 <z_impl_k_poll_signal_raise+0xa0>)
   22ec8:	214a      	movs	r1, #74	; 0x4a
   22eca:	f000 fa41 	bl	23350 <assert_post_action>
	z_spin_lock_set_owner(l);
   22ece:	4818      	ldr	r0, [pc, #96]	; (22f30 <z_impl_k_poll_signal_raise+0x9c>)
   22ed0:	f7ff f80e 	bl	21ef0 <z_spin_lock_set_owner>
	return list->head == list;
   22ed4:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   22ed6:	60e5      	str	r5, [r4, #12]
	signal->signaled = 1U;
   22ed8:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   22eda:	4284      	cmp	r4, r0
   22edc:	60a1      	str	r1, [r4, #8]
   22ede:	d117      	bne.n	22f10 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ee0:	4813      	ldr	r0, [pc, #76]	; (22f30 <z_impl_k_poll_signal_raise+0x9c>)
   22ee2:	f7fe fff5 	bl	21ed0 <z_spin_unlock_valid>
   22ee6:	b968      	cbnz	r0, 22f04 <z_impl_k_poll_signal_raise+0x70>
   22ee8:	4a12      	ldr	r2, [pc, #72]	; (22f34 <z_impl_k_poll_signal_raise+0xa0>)
   22eea:	4916      	ldr	r1, [pc, #88]	; (22f44 <z_impl_k_poll_signal_raise+0xb0>)
   22eec:	4813      	ldr	r0, [pc, #76]	; (22f3c <z_impl_k_poll_signal_raise+0xa8>)
   22eee:	235d      	movs	r3, #93	; 0x5d
   22ef0:	f000 f9eb 	bl	232ca <printk>
   22ef4:	490e      	ldr	r1, [pc, #56]	; (22f30 <z_impl_k_poll_signal_raise+0x9c>)
   22ef6:	4814      	ldr	r0, [pc, #80]	; (22f48 <z_impl_k_poll_signal_raise+0xb4>)
   22ef8:	f000 f9e7 	bl	232ca <printk>
   22efc:	480d      	ldr	r0, [pc, #52]	; (22f34 <z_impl_k_poll_signal_raise+0xa0>)
   22efe:	215d      	movs	r1, #93	; 0x5d
   22f00:	f000 fa26 	bl	23350 <assert_post_action>
	__asm__ volatile(
   22f04:	f386 8811 	msr	BASEPRI, r6
   22f08:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   22f0c:	2400      	movs	r4, #0
   22f0e:	e00d      	b.n	22f2c <z_impl_k_poll_signal_raise+0x98>
	node->prev->next = node->next;
   22f10:	e9d0 3200 	ldrd	r3, r2, [r0]
   22f14:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   22f16:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22f18:	2300      	movs	r3, #0
	node->prev = NULL;
   22f1a:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22f1e:	f005 fb16 	bl	2854e <signal_poll_event>

	z_reschedule(&lock, key);
   22f22:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22f24:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   22f26:	4802      	ldr	r0, [pc, #8]	; (22f30 <z_impl_k_poll_signal_raise+0x9c>)
   22f28:	f7fd fc4a 	bl	207c0 <z_reschedule>
	return rc;
}
   22f2c:	4620      	mov	r0, r4
   22f2e:	bd70      	pop	{r4, r5, r6, pc}
   22f30:	20001cbc 	.word	0x20001cbc
   22f34:	00029daf 	.word	0x00029daf
   22f38:	00029dd1 	.word	0x00029dd1
   22f3c:	000297e6 	.word	0x000297e6
   22f40:	00029de6 	.word	0x00029de6
   22f44:	00029dfe 	.word	0x00029dfe
   22f48:	00029e15 	.word	0x00029e15

00022f4c <prov_reset>:
	bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
   22f4c:	2003      	movs	r0, #3
   22f4e:	f7f2 bcf1 	b.w	15934 <bt_mesh_prov_enable>

00022f52 <u8_to_dec>:
 */

#include <sys/util.h>

u8_t u8_to_dec(char *buf, u8_t buflen, u8_t value)
{
   22f52:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   22f54:	f04f 0c0a 	mov.w	ip, #10
{
   22f58:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   22f5a:	2604      	movs	r6, #4
	u8_t num_digits = 0;
   22f5c:	2000      	movs	r0, #0
	u8_t divisor = 100;
   22f5e:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   22f60:	b111      	cbz	r1, 22f68 <u8_to_dec+0x16>
   22f62:	3e01      	subs	r6, #1
   22f64:	d101      	bne.n	22f6a <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   22f66:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   22f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   22f6a:	42a2      	cmp	r2, r4
		digit = value / divisor;
   22f6c:	fbb2 f7f4 	udiv	r7, r2, r4
   22f70:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   22f72:	d202      	bcs.n	22f7a <u8_to_dec+0x28>
   22f74:	2c01      	cmp	r4, #1
   22f76:	d000      	beq.n	22f7a <u8_to_dec+0x28>
   22f78:	b130      	cbz	r0, 22f88 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   22f7a:	3330      	adds	r3, #48	; 0x30
   22f7c:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   22f80:	3901      	subs	r1, #1
			num_digits++;
   22f82:	1c43      	adds	r3, r0, #1
			buflen--;
   22f84:	b2c9      	uxtb	r1, r1
			num_digits++;
   22f86:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   22f88:	fb04 2217 	mls	r2, r4, r7, r2
   22f8c:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   22f8e:	fbb4 f4fc 	udiv	r4, r4, ip
   22f92:	e7e5      	b.n	22f60 <u8_to_dec+0xe>

00022f94 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, u8_t *x)
{
	if (c >= '0' && c <= '9') {
   22f94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   22f98:	b2db      	uxtb	r3, r3
   22f9a:	2b09      	cmp	r3, #9
   22f9c:	d802      	bhi.n	22fa4 <char2hex+0x10>
		*x = c - '0';
   22f9e:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   22fa0:	2000      	movs	r0, #0
   22fa2:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   22fa4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   22fa8:	2b05      	cmp	r3, #5
   22faa:	d802      	bhi.n	22fb2 <char2hex+0x1e>
		*x = c - 'a' + 10;
   22fac:	3857      	subs	r0, #87	; 0x57
   22fae:	7008      	strb	r0, [r1, #0]
   22fb0:	e7f6      	b.n	22fa0 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   22fb2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   22fb6:	2b05      	cmp	r3, #5
   22fb8:	d801      	bhi.n	22fbe <char2hex+0x2a>
		*x = c - 'A' + 10;
   22fba:	3837      	subs	r0, #55	; 0x37
   22fbc:	e7f7      	b.n	22fae <char2hex+0x1a>
		return -EINVAL;
   22fbe:	f06f 0015 	mvn.w	r0, #21
}
   22fc2:	4770      	bx	lr

00022fc4 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, u8_t *buf, size_t buflen)
{
   22fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22fc6:	4604      	mov	r4, r0
	u8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   22fc8:	f001 0001 	and.w	r0, r1, #1
   22fcc:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   22fd0:	429d      	cmp	r5, r3
   22fd2:	ea4f 0651 	mov.w	r6, r1, lsr #1
   22fd6:	d903      	bls.n	22fe0 <hex2bin+0x1c>
		return 0;
   22fd8:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   22fda:	4628      	mov	r0, r5
   22fdc:	b003      	add	sp, #12
   22fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   22fe0:	b158      	cbz	r0, 22ffa <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   22fe2:	7820      	ldrb	r0, [r4, #0]
   22fe4:	f10d 0107 	add.w	r1, sp, #7
   22fe8:	f7ff ffd4 	bl	22f94 <char2hex>
   22fec:	2800      	cmp	r0, #0
   22fee:	dbf3      	blt.n	22fd8 <hex2bin+0x14>
		buf[0] = dec;
   22ff0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22ff4:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   22ff8:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   22ffa:	3401      	adds	r4, #1
   22ffc:	4416      	add	r6, r2
   22ffe:	42b2      	cmp	r2, r6
   23000:	d0eb      	beq.n	22fda <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   23002:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   23006:	f10d 0107 	add.w	r1, sp, #7
   2300a:	f7ff ffc3 	bl	22f94 <char2hex>
   2300e:	2800      	cmp	r0, #0
   23010:	dbe2      	blt.n	22fd8 <hex2bin+0x14>
		buf[i] = dec << 4;
   23012:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23016:	011b      	lsls	r3, r3, #4
   23018:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2301a:	f814 0b02 	ldrb.w	r0, [r4], #2
   2301e:	f10d 0107 	add.w	r1, sp, #7
   23022:	f7ff ffb7 	bl	22f94 <char2hex>
   23026:	2800      	cmp	r0, #0
   23028:	dbd6      	blt.n	22fd8 <hex2bin+0x14>
		buf[i] += dec;
   2302a:	7813      	ldrb	r3, [r2, #0]
   2302c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   23030:	440b      	add	r3, r1
   23032:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   23036:	e7e2      	b.n	22ffe <hex2bin+0x3a>

00023038 <get_bit_ptr>:
{
   23038:	b570      	push	{r4, r5, r6, lr}
   2303a:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   2303c:	f990 000b 	ldrsb.w	r0, [r0, #11]
   23040:	240c      	movs	r4, #12
{
   23042:	460d      	mov	r5, r1
   23044:	434c      	muls	r4, r1
		p->levels[level].bits : p->levels[level].bits_p;
   23046:	42a8      	cmp	r0, r5
   23048:	eb06 0104 	add.w	r1, r6, r4
   2304c:	bfb8      	it	lt
   2304e:	5931      	ldrlt	r1, [r6, r4]
	*word = &bitarray[bn / 32];
   23050:	2a00      	cmp	r2, #0
   23052:	4610      	mov	r0, r2
   23054:	bfb8      	it	lt
   23056:	f102 001f 	addlt.w	r0, r2, #31
   2305a:	1140      	asrs	r0, r0, #5
   2305c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   23060:	6019      	str	r1, [r3, #0]
}
   23062:	f002 001f 	and.w	r0, r2, #31
   23066:	bd70      	pop	{r4, r5, r6, pc}

00023068 <pool_irq_lock.isra.0.part.0>:
	__asm__ volatile(
   23068:	f04f 0320 	mov.w	r3, #32
   2306c:	f3ef 8011 	mrs	r0, BASEPRI
   23070:	f383 8811 	msr	BASEPRI, r3
   23074:	f3bf 8f6f 	isb	sy
}
   23078:	4770      	bx	lr

0002307a <pool_irq_unlock.isra.0>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   2307a:	07c3      	lsls	r3, r0, #31
   2307c:	d503      	bpl.n	23086 <pool_irq_unlock.isra.0+0xc>
	__asm__ volatile(
   2307e:	f381 8811 	msr	BASEPRI, r1
   23082:	f3bf 8f6f 	isb	sy
}
   23086:	4770      	bx	lr

00023088 <z_sys_mem_pool_base_init>:
{
   23088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2308c:	6846      	ldr	r6, [r0, #4]
   2308e:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   23090:	6801      	ldr	r1, [r0, #0]
	for (i = 0; i < p->n_levels; i++) {
   23092:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
   23096:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   23098:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
   2309c:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   2309e:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   230a0:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   230a2:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   230a4:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
   230a8:	4598      	cmp	r8, r3
   230aa:	dc05      	bgt.n	230b8 <z_sys_mem_pool_base_init+0x30>
   230ac:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   230ae:	4619      	mov	r1, r3
   230b0:	428f      	cmp	r7, r1
   230b2:	dc20      	bgt.n	230f6 <z_sys_mem_pool_base_init+0x6e>
}
   230b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
   230b8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
   230bc:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   230c0:	fb09 fe03 	mul.w	lr, r9, r3
   230c4:	eb0a 040e 	add.w	r4, sl, lr
   230c8:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   230cc:	2d20      	cmp	r5, #32
	list->tail = (sys_dnode_t *)list;
   230ce:	e9c4 bb01 	strd	fp, fp, [r4, #4]
   230d2:	d805      	bhi.n	230e0 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   230d4:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   230d6:	0892      	lsrs	r2, r2, #2
   230d8:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   230dc:	3301      	adds	r3, #1
   230de:	e7e3      	b.n	230a8 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   230e0:	f115 041f 	adds.w	r4, r5, #31
   230e4:	bf48      	it	mi
   230e6:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   230ea:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   230ec:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   230f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   230f4:	e7ef      	b.n	230d6 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   230f6:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   230f8:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   230fa:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   230fe:	18ec      	adds	r4, r5, r3
	node->next = list;
   23100:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   23104:	6895      	ldr	r5, [r2, #8]
   23106:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   23108:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   2310a:	3101      	adds	r1, #1
   2310c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2310e:	4433      	add	r3, r6
   23110:	6094      	str	r4, [r2, #8]
   23112:	e7cd      	b.n	230b0 <z_sys_mem_pool_base_init+0x28>

00023114 <z_sys_mem_pool_block_alloc>:
{
   23114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23118:	b087      	sub	sp, #28
   2311a:	af00      	add	r7, sp, #0
   2311c:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   23120:	7a82      	ldrb	r2, [r0, #10]
   23122:	0093      	lsls	r3, r2, #2
   23124:	3307      	adds	r3, #7
   23126:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   2312a:	ebad 0d03 	sub.w	sp, sp, r3
   2312e:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   23130:	4653      	mov	r3, sl
{
   23132:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   23134:	6840      	ldr	r0, [r0, #4]
   23136:	f843 0904 	str.w	r0, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   2313a:	2400      	movs	r4, #0
   2313c:	42a2      	cmp	r2, r4
   2313e:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
   23142:	dd09      	ble.n	23158 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   23144:	b124      	cbz	r4, 23150 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   23146:	6818      	ldr	r0, [r3, #0]
   23148:	0880      	lsrs	r0, r0, #2
   2314a:	f020 0003 	bic.w	r0, r0, #3
   2314e:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   23150:	f853 0f04 	ldr.w	r0, [r3, #4]!
   23154:	4288      	cmp	r0, r1
   23156:	d208      	bcs.n	2316a <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   23158:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2315c:	d107      	bne.n	2316e <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   2315e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   23160:	2300      	movs	r3, #0
   23162:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   23164:	f06f 000b 	mvn.w	r0, #11
   23168:	e02e      	b.n	231c8 <z_sys_mem_pool_block_alloc+0xb4>
	for (i = 0; i < p->n_levels; i++) {
   2316a:	3401      	adds	r4, #1
   2316c:	e7e6      	b.n	2313c <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   2316e:	7c2e      	ldrb	r6, [r5, #16]
   23170:	f016 0601 	ands.w	r6, r6, #1
   23174:	d002      	beq.n	2317c <z_sys_mem_pool_block_alloc+0x68>
   23176:	f7ff ff77 	bl	23068 <pool_irq_lock.isra.0.part.0>
   2317a:	4606      	mov	r6, r0
	for (i = alloc_l; i >= 0; i--) {
   2317c:	68ea      	ldr	r2, [r5, #12]
   2317e:	230c      	movs	r3, #12
   23180:	fb03 2309 	mla	r3, r3, r9, r2
	block = sys_dlist_get(&p->levels[l].free_list);
   23184:	46c8      	mov	r8, r9
	return list->head == list;
   23186:	461a      	mov	r2, r3
   23188:	f852 4f04 	ldr.w	r4, [r2, #4]!
	if (!sys_dlist_is_empty(list)) {
   2318c:	4294      	cmp	r4, r2
   2318e:	d11f      	bne.n	231d0 <z_sys_mem_pool_block_alloc+0xbc>
	for (i = alloc_l; i >= 0; i--) {
   23190:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   23194:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   23198:	f1a3 030c 	sub.w	r3, r3, #12
   2319c:	d1f3      	bne.n	23186 <z_sys_mem_pool_block_alloc+0x72>
   2319e:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   231a0:	7c28      	ldrb	r0, [r5, #16]
   231a2:	4631      	mov	r1, r6
   231a4:	f7ff ff69 	bl	2307a <pool_irq_unlock.isra.0>
	*data_p = data;
   231a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   231aa:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   231ac:	2c00      	cmp	r4, #0
   231ae:	d0d9      	beq.n	23164 <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   231b0:	68bb      	ldr	r3, [r7, #8]
   231b2:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   231b6:	682b      	ldr	r3, [r5, #0]
   231b8:	1ae4      	subs	r4, r4, r3
   231ba:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   231be:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   231c2:	687b      	ldr	r3, [r7, #4]
	return 0;
   231c4:	2000      	movs	r0, #0
	*block_p = block_num(p, data, lsizes[alloc_l]);
   231c6:	601c      	str	r4, [r3, #0]
}
   231c8:	371c      	adds	r7, #28
   231ca:	46bd      	mov	sp, r7
   231cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   231d0:	e9d4 3200 	ldrd	r3, r2, [r4]
   231d4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   231d6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   231d8:	2300      	movs	r3, #0
	node->prev = NULL;
   231da:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   231de:	6829      	ldr	r1, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   231e0:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   231e4:	f107 0314 	add.w	r3, r7, #20
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   231e8:	1a62      	subs	r2, r4, r1
	int bit = get_bit_ptr(p, level, bn, &word);
   231ea:	4641      	mov	r1, r8
   231ec:	fb92 f2f0 	sdiv	r2, r2, r0
   231f0:	4628      	mov	r0, r5
   231f2:	f7ff ff21 	bl	23038 <get_bit_ptr>
	*word |= (1<<bit);
   231f6:	f8d7 c014 	ldr.w	ip, [r7, #20]
   231fa:	2101      	movs	r1, #1
   231fc:	f8dc 2000 	ldr.w	r2, [ip]
   23200:	6039      	str	r1, [r7, #0]
   23202:	fa01 f000 	lsl.w	r0, r1, r0
   23206:	4302      	orrs	r2, r0
   23208:	f8cc 2000 	str.w	r2, [ip]
	int bit = get_bit_ptr(p, level, bn, &word);
   2320c:	469b      	mov	fp, r3
			for (from_l = i; from_l < alloc_l; from_l++) {
   2320e:	45c8      	cmp	r8, r9
   23210:	dac6      	bge.n	231a0 <z_sys_mem_pool_block_alloc+0x8c>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   23212:	682a      	ldr	r2, [r5, #0]
   23214:	f85a 3028 	ldr.w	r3, [sl, r8, lsl #2]
	set_alloc_bit(p, l + 1, 4*bn);
   23218:	f108 0801 	add.w	r8, r8, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   2321c:	4641      	mov	r1, r8
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   2321e:	1aa2      	subs	r2, r4, r2
	int bit = get_bit_ptr(p, level, bn, &word);
   23220:	4628      	mov	r0, r5
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   23222:	fb92 f2f3 	sdiv	r2, r2, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   23226:	465b      	mov	r3, fp
   23228:	0092      	lsls	r2, r2, #2
   2322a:	f7ff ff05 	bl	23038 <get_bit_ptr>
	*word |= (1<<bit);
   2322e:	697a      	ldr	r2, [r7, #20]
   23230:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   23232:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   23234:	fa03 f000 	lsl.w	r0, r3, r0
   23238:	6813      	ldr	r3, [r2, #0]
   2323a:	4303      	orrs	r3, r0
   2323c:	6013      	str	r3, [r2, #0]
		int lsz = lsizes[l + 1];
   2323e:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   23242:	230c      	movs	r3, #12
   23244:	fb03 1108 	mla	r1, r3, r8, r1
   23248:	2203      	movs	r2, #3
   2324a:	f101 0e04 	add.w	lr, r1, #4
   2324e:	1823      	adds	r3, r4, r0
   23250:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   23252:	688a      	ldr	r2, [r1, #8]
   23254:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   23256:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   23258:	f8c3 e000 	str.w	lr, [r3]
	list->tail->next = node;
   2325c:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   2325e:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   23260:	608b      	str	r3, [r1, #8]
   23262:	3a01      	subs	r2, #1
   23264:	4403      	add	r3, r0
   23266:	60fa      	str	r2, [r7, #12]
   23268:	d1f3      	bne.n	23252 <z_sys_mem_pool_block_alloc+0x13e>
				pool_irq_unlock(p, key);
   2326a:	7c28      	ldrb	r0, [r5, #16]
   2326c:	4631      	mov	r1, r6
   2326e:	f7ff ff04 	bl	2307a <pool_irq_unlock.isra.0>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23272:	7c2b      	ldrb	r3, [r5, #16]
   23274:	07db      	lsls	r3, r3, #31
   23276:	d503      	bpl.n	23280 <z_sys_mem_pool_block_alloc+0x16c>
   23278:	f7ff fef6 	bl	23068 <pool_irq_lock.isra.0.part.0>
   2327c:	4606      	mov	r6, r0
   2327e:	e7c6      	b.n	2320e <z_sys_mem_pool_block_alloc+0xfa>
		return 0;
   23280:	68fe      	ldr	r6, [r7, #12]
			for (from_l = i; from_l < alloc_l; from_l++) {
   23282:	e7c4      	b.n	2320e <z_sys_mem_pool_block_alloc+0xfa>

00023284 <arch_printk_char_out>:
}
   23284:	2000      	movs	r0, #0
   23286:	4770      	bx	lr

00023288 <print_err>:
{
   23288:	b570      	push	{r4, r5, r6, lr}
   2328a:	4604      	mov	r4, r0
   2328c:	460d      	mov	r5, r1
	out('E', ctx);
   2328e:	2045      	movs	r0, #69	; 0x45
   23290:	47a0      	blx	r4
	out('R', ctx);
   23292:	4629      	mov	r1, r5
   23294:	2052      	movs	r0, #82	; 0x52
   23296:	47a0      	blx	r4
	out('R', ctx);
   23298:	4629      	mov	r1, r5
   2329a:	4623      	mov	r3, r4
   2329c:	2052      	movs	r0, #82	; 0x52
}
   2329e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   232a2:	4718      	bx	r3

000232a4 <str_out>:
{
   232a4:	b530      	push	{r4, r5, lr}
   232a6:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   232a8:	680c      	ldr	r4, [r1, #0]
   232aa:	1c55      	adds	r5, r2, #1
   232ac:	b114      	cbz	r4, 232b4 <str_out+0x10>
   232ae:	684b      	ldr	r3, [r1, #4]
   232b0:	4293      	cmp	r3, r2
   232b2:	dc01      	bgt.n	232b8 <str_out+0x14>
		ctx->count++;
   232b4:	608d      	str	r5, [r1, #8]
}
   232b6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   232b8:	3b01      	subs	r3, #1
   232ba:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   232bc:	bf08      	it	eq
   232be:	2200      	moveq	r2, #0
   232c0:	608d      	str	r5, [r1, #8]
   232c2:	bf0c      	ite	eq
   232c4:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   232c6:	54a0      	strbne	r0, [r4, r2]
   232c8:	e7f5      	b.n	232b6 <str_out+0x12>

000232ca <printk>:
{
   232ca:	b40f      	push	{r0, r1, r2, r3}
   232cc:	b507      	push	{r0, r1, r2, lr}
   232ce:	a904      	add	r1, sp, #16
   232d0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   232d4:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   232d6:	f7de fedb 	bl	2090 <vprintk>
}
   232da:	b003      	add	sp, #12
   232dc:	f85d eb04 	ldr.w	lr, [sp], #4
   232e0:	b004      	add	sp, #16
   232e2:	4770      	bx	lr

000232e4 <snprintk>:
{
   232e4:	b40c      	push	{r2, r3}
   232e6:	b507      	push	{r0, r1, r2, lr}
   232e8:	ab04      	add	r3, sp, #16
   232ea:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   232ee:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   232f0:	f7de fedc 	bl	20ac <vsnprintk>
}
   232f4:	b003      	add	sp, #12
   232f6:	f85d eb04 	ldr.w	lr, [sp], #4
   232fa:	b002      	add	sp, #8
   232fc:	4770      	bx	lr

000232fe <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   232fe:	4604      	mov	r4, r0
   23300:	b508      	push	{r3, lr}
   23302:	4608      	mov	r0, r1
   23304:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   23306:	461a      	mov	r2, r3
   23308:	47a0      	blx	r4
	return z_impl_k_current_get();
   2330a:	f7fe fbbf 	bl	21a8c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   2330e:	f7e1 fdef 	bl	4ef0 <z_impl_k_thread_abort>

00023312 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   23312:	b510      	push	{r4, lr}
   23314:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   23316:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2331a:	4620      	mov	r0, r4
   2331c:	f7fd f860 	bl	203e0 <z_impl_k_queue_get>
   23320:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   23322:	2800      	cmp	r0, #0
   23324:	d0f7      	beq.n	23316 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23326:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   23328:	6842      	ldr	r2, [r0, #4]
   2332a:	f3bf 8f5b 	dmb	ish
   2332e:	e853 1f00 	ldrex	r1, [r3]
   23332:	f021 0c01 	bic.w	ip, r1, #1
   23336:	e843 ce00 	strex	lr, ip, [r3]
   2333a:	f1be 0f00 	cmp.w	lr, #0
   2333e:	d1f6      	bne.n	2332e <z_work_q_main+0x1c>
   23340:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   23344:	07cb      	lsls	r3, r1, #31
   23346:	d500      	bpl.n	2334a <z_work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   23348:	4790      	blx	r2
	z_impl_k_yield();
   2334a:	f7fe fa1f 	bl	2178c <z_impl_k_yield>
}
   2334e:	e7e2      	b.n	23316 <z_work_q_main+0x4>

00023350 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   23350:	4040      	eors	r0, r0
   23352:	f380 8811 	msr	BASEPRI, r0
   23356:	f04f 0004 	mov.w	r0, #4
   2335a:	df02      	svc	2
}
   2335c:	4770      	bx	lr

0002335e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2335e:	4770      	bx	lr

00023360 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   23360:	2300      	movs	r3, #0
	list->head = NULL;
   23362:	e9c0 3300 	strd	r3, r3, [r0]
}
   23366:	4770      	bx	lr

00023368 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   23368:	6803      	ldr	r3, [r0, #0]
   2336a:	b923      	cbnz	r3, 23376 <log_list_add_tail+0xe>
		list->head = msg;
   2336c:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   2336e:	2300      	movs	r3, #0
	list->tail = msg;
   23370:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   23372:	600b      	str	r3, [r1, #0]
}
   23374:	4770      	bx	lr
		list->tail->next = msg;
   23376:	6843      	ldr	r3, [r0, #4]
   23378:	6019      	str	r1, [r3, #0]
   2337a:	e7f8      	b.n	2336e <log_list_add_tail+0x6>

0002337c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   2337c:	6800      	ldr	r0, [r0, #0]
   2337e:	4770      	bx	lr

00023380 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   23380:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   23382:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   23384:	b108      	cbz	r0, 2338a <log_list_head_get+0xa>
		list->head = list->head->next;
   23386:	6802      	ldr	r2, [r0, #0]
   23388:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   2338a:	4770      	bx	lr

0002338c <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   2338c:	6843      	ldr	r3, [r0, #4]
}
   2338e:	7958      	ldrb	r0, [r3, #5]
   23390:	4770      	bx	lr

00023392 <z_log_msg_std_alloc>:
{
   23392:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   23394:	f7df f9d0 	bl	2738 <log_msg_chunk_alloc>
	if (msg != NULL) {
   23398:	b118      	cbz	r0, 233a2 <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
   2339a:	2301      	movs	r3, #1
   2339c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2339e:	2300      	movs	r3, #0
   233a0:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   233a2:	bd08      	pop	{r3, pc}

000233a4 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   233a4:	f7e0 bec6 	b.w	4134 <z_timer_cycle_get_32>

000233a8 <dummy_timestamp>:
   233a8:	2000      	movs	r0, #0
   233aa:	4770      	bx	lr

000233ac <log_0>:
{
   233ac:	b538      	push	{r3, r4, r5, lr}
   233ae:	4605      	mov	r5, r0
   233b0:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   233b2:	f7ff ffee 	bl	23392 <z_log_msg_std_alloc>

	if (msg != NULL) {
   233b6:	b128      	cbz	r0, 233c4 <log_0+0x18>
		msg->str = str;
   233b8:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   233ba:	4621      	mov	r1, r4
}
   233bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   233c0:	f7df b8c0 	b.w	2544 <msg_finalize>
}
   233c4:	bd38      	pop	{r3, r4, r5, pc}

000233c6 <log_1>:
{
   233c6:	b570      	push	{r4, r5, r6, lr}
   233c8:	4606      	mov	r6, r0
   233ca:	460d      	mov	r5, r1
   233cc:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   233ce:	f7ff ffe0 	bl	23392 <z_log_msg_std_alloc>

	if (msg != NULL) {
   233d2:	b158      	cbz	r0, 233ec <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   233d4:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   233d6:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   233d8:	2101      	movs	r1, #1
   233da:	f361 1207 	bfi	r2, r1, #4, #4
   233de:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   233e0:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   233e2:	4621      	mov	r1, r4
}
   233e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   233e8:	f7df b8ac 	b.w	2544 <msg_finalize>
}
   233ec:	bd70      	pop	{r4, r5, r6, pc}

000233ee <log_2>:
{
   233ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   233f2:	4680      	mov	r8, r0
   233f4:	460f      	mov	r7, r1
   233f6:	4616      	mov	r6, r2
   233f8:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   233fa:	f7ff ffca 	bl	23392 <z_log_msg_std_alloc>

	if (msg != NULL) {
   233fe:	b168      	cbz	r0, 2341c <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   23400:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   23402:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   23406:	2202      	movs	r2, #2
   23408:	f362 1307 	bfi	r3, r2, #4, #4
   2340c:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2340e:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   23412:	4629      	mov	r1, r5
}
   23414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   23418:	f7df b894 	b.w	2544 <msg_finalize>
}
   2341c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023420 <log_3>:
{
   23420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23424:	4680      	mov	r8, r0
   23426:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   2342a:	460f      	mov	r7, r1
   2342c:	4616      	mov	r6, r2
   2342e:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23430:	f7ff ffaf 	bl	23392 <z_log_msg_std_alloc>

	if (msg != NULL) {
   23434:	b170      	cbz	r0, 23454 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   23436:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   23438:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   2343c:	2203      	movs	r2, #3
   2343e:	f362 1307 	bfi	r3, r2, #4, #4
   23442:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   23444:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   23448:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   2344a:	4649      	mov	r1, r9
}
   2344c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   23450:	f7df b878 	b.w	2544 <msg_finalize>
}
   23454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00023458 <log_n>:
{
   23458:	b510      	push	{r4, lr}
   2345a:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   2345c:	f7df f9c0 	bl	27e0 <log_msg_create_n>
		if (msg == NULL) {
   23460:	b120      	cbz	r0, 2346c <log_n+0x14>
		msg_finalize(msg, src_level);
   23462:	4621      	mov	r1, r4
}
   23464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   23468:	f7df b86c 	b.w	2544 <msg_finalize>
}
   2346c:	bd10      	pop	{r4, pc}

0002346e <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   2346e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23472:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   23474:	8903      	ldrh	r3, [r0, #8]
{
   23476:	f89d 8020 	ldrb.w	r8, [sp, #32]
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   2347a:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
{
   2347e:	460e      	mov	r6, r1
   23480:	4611      	mov	r1, r2
	u32_t available_len = msg->hdr.params.hexdump.length;
   23482:	ea4f 0293 	mov.w	r2, r3, lsr #2
	if (offset >= available_len) {
   23486:	d303      	bcc.n	23490 <log_msg_hexdump_data_op+0x22>
		*length = 0;
   23488:	2300      	movs	r3, #0
   2348a:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   2348c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   23490:	680b      	ldr	r3, [r1, #0]
   23492:	4423      	add	r3, r4
   23494:	4293      	cmp	r3, r2
		*length = available_len - offset;
   23496:	bf84      	itt	hi
   23498:	1b13      	subhi	r3, r2, r4
   2349a:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2349c:	2a0c      	cmp	r2, #12
	req_len = *length;
   2349e:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   234a2:	d929      	bls.n	234f8 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   234a4:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   234a6:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
   234a8:	d82c      	bhi.n	23504 <log_msg_hexdump_data_op+0x96>
		head_data = msg->payload.ext.data.bytes;
   234aa:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   234ac:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   234ae:	454a      	cmp	r2, r9
   234b0:	bf28      	it	cs
   234b2:	464a      	movcs	r2, r9
   234b4:	4615      	mov	r5, r2
		if (put_op) {
   234b6:	4420      	add	r0, r4
   234b8:	f1b8 0f00 	cmp.w	r8, #0
   234bc:	d01f      	beq.n	234fe <log_msg_hexdump_data_op+0x90>
			(void)memcpy(&head_data[offset], data, cpy_len);
   234be:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   234c0:	f001 fde6 	bl	25090 <memcpy>
		req_len -= cpy_len;
   234c4:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   234c8:	442e      	add	r6, r5
	while (req_len > 0) {
   234ca:	f1b9 0f00 	cmp.w	r9, #0
   234ce:	d0dd      	beq.n	2348c <log_msg_hexdump_data_op+0x1e>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   234d0:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   234d4:	454d      	cmp	r5, r9
   234d6:	bf28      	it	cs
   234d8:	464d      	movcs	r5, r9
		if (put_op) {
   234da:	1d20      	adds	r0, r4, #4
   234dc:	4438      	add	r0, r7
			(void)memcpy(&cont->payload.bytes[offset],
   234de:	462a      	mov	r2, r5
		if (put_op) {
   234e0:	f1b8 0f00 	cmp.w	r8, #0
   234e4:	d014      	beq.n	23510 <log_msg_hexdump_data_op+0xa2>
			(void)memcpy(&cont->payload.bytes[offset],
   234e6:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   234e8:	f001 fdd2 	bl	25090 <memcpy>
		req_len -= cpy_len;
   234ec:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   234f0:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
   234f2:	442e      	add	r6, r5
		offset = 0;
   234f4:	2400      	movs	r4, #0
   234f6:	e7e8      	b.n	234ca <log_msg_hexdump_data_op+0x5c>
		head_data = msg->payload.single.bytes;
   234f8:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   234fa:	2700      	movs	r7, #0
   234fc:	e7d7      	b.n	234ae <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   234fe:	4601      	mov	r1, r0
   23500:	4630      	mov	r0, r6
   23502:	e7dd      	b.n	234c0 <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
   23504:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   23506:	2c1b      	cmp	r4, #27
   23508:	d9df      	bls.n	234ca <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
   2350a:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
   2350c:	3c1c      	subs	r4, #28
   2350e:	e7fa      	b.n	23506 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   23510:	4601      	mov	r1, r0
   23512:	4630      	mov	r0, r6
   23514:	e7e8      	b.n	234e8 <log_msg_hexdump_data_op+0x7a>

00023516 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23516:	3004      	adds	r0, #4
   23518:	f3bf 8f5b 	dmb	ish
   2351c:	e850 3f00 	ldrex	r3, [r0]
   23520:	3301      	adds	r3, #1
   23522:	e840 3200 	strex	r2, r3, [r0]
   23526:	2a00      	cmp	r2, #0
   23528:	d1f8      	bne.n	2351c <log_msg_get+0x6>
   2352a:	f3bf 8f5b 	dmb	ish
}
   2352e:	4770      	bx	lr

00023530 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   23530:	7a40      	ldrb	r0, [r0, #9]
}
   23532:	0900      	lsrs	r0, r0, #4
   23534:	4770      	bx	lr

00023536 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   23536:	7a43      	ldrb	r3, [r0, #9]
   23538:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   2353c:	ea4f 1213 	mov.w	r2, r3, lsr #4
   23540:	d216      	bcs.n	23570 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   23542:	2a03      	cmp	r2, #3
   23544:	d803      	bhi.n	2354e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   23546:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2354a:	6948      	ldr	r0, [r1, #20]
   2354c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   2354e:	2901      	cmp	r1, #1
   23550:	d803      	bhi.n	2355a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   23552:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   23556:	6988      	ldr	r0, [r1, #24]
   23558:	4770      	bx	lr
	cont = msg->payload.ext.next;
   2355a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   2355c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   2355e:	2906      	cmp	r1, #6
   23560:	d803      	bhi.n	2356a <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   23562:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   23566:	6848      	ldr	r0, [r1, #4]
   23568:	4770      	bx	lr
		cont = cont->next;
   2356a:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   2356c:	3907      	subs	r1, #7
		cont = cont->next;
   2356e:	e7f6      	b.n	2355e <log_msg_arg_get+0x28>
		return 0;
   23570:	2000      	movs	r0, #0
}
   23572:	4770      	bx	lr

00023574 <log_msg_put>:
{
   23574:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   23576:	1d02      	adds	r2, r0, #4
   23578:	f3bf 8f5b 	dmb	ish
   2357c:	e852 1f00 	ldrex	r1, [r2]
   23580:	3901      	subs	r1, #1
   23582:	e842 1c00 	strex	ip, r1, [r2]
   23586:	f1bc 0f00 	cmp.w	ip, #0
   2358a:	d1f7      	bne.n	2357c <log_msg_put+0x8>
   2358c:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   23590:	685b      	ldr	r3, [r3, #4]
   23592:	b90b      	cbnz	r3, 23598 <log_msg_put+0x24>
		msg_free(msg);
   23594:	f7df b8e2 	b.w	275c <msg_free>
}
   23598:	4770      	bx	lr

0002359a <log_msg_str_get>:
}
   2359a:	6900      	ldr	r0, [r0, #16]
   2359c:	4770      	bx	lr

0002359e <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   2359e:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   235a0:	2400      	movs	r4, #0
   235a2:	9400      	str	r4, [sp, #0]
   235a4:	f7ff ff63 	bl	2346e <log_msg_hexdump_data_op>
}
   235a8:	b002      	add	sp, #8
   235aa:	bd10      	pop	{r4, pc}

000235ac <buffer_write>:
{
   235ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   235ae:	4606      	mov	r6, r0
   235b0:	460d      	mov	r5, r1
   235b2:	4614      	mov	r4, r2
   235b4:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   235b6:	4621      	mov	r1, r4
   235b8:	4628      	mov	r0, r5
   235ba:	463a      	mov	r2, r7
   235bc:	47b0      	blx	r6
	} while (len != 0);
   235be:	1a24      	subs	r4, r4, r0
		buf += processed;
   235c0:	4405      	add	r5, r0
	} while (len != 0);
   235c2:	d1f8      	bne.n	235b6 <buffer_write+0xa>
}
   235c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000235c6 <std_print>:
{
   235c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   235ca:	b08e      	sub	sp, #56	; 0x38
   235cc:	af0e      	add	r7, sp, #56	; 0x38
   235ce:	4680      	mov	r8, r0
   235d0:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   235d2:	f7ff ffe2 	bl	2359a <log_msg_str_get>
   235d6:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   235d8:	4640      	mov	r0, r8
   235da:	f7ff ffa9 	bl	23530 <log_msg_nargs_get>
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   235de:	0083      	lsls	r3, r0, #2
   235e0:	3307      	adds	r3, #7
   235e2:	f023 0307 	bic.w	r3, r3, #7
   235e6:	ebad 0d03 	sub.w	sp, sp, r3
	u32_t nargs = log_msg_nargs_get(msg);
   235ea:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   235ec:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   235ee:	f04f 0900 	mov.w	r9, #0
   235f2:	45d1      	cmp	r9, sl
   235f4:	d116      	bne.n	23624 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   235f6:	4640      	mov	r0, r8
   235f8:	f7ff ff9a 	bl	23530 <log_msg_nargs_get>
   235fc:	280f      	cmp	r0, #15
   235fe:	d81e      	bhi.n	2363e <std_print+0x78>
   23600:	e8df f010 	tbh	[pc, r0, lsl #1]
   23604:	00200019 	.word	0x00200019
   23608:	002d0026 	.word	0x002d0026
   2360c:	00410036 	.word	0x00410036
   23610:	005d004e 	.word	0x005d004e
   23614:	0081006e 	.word	0x0081006e
   23618:	00ad0096 	.word	0x00ad0096
   2361c:	00e100c6 	.word	0x00e100c6
   23620:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   23624:	4649      	mov	r1, r9
   23626:	4640      	mov	r0, r8
   23628:	f7ff ff85 	bl	23536 <log_msg_arg_get>
   2362c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   23630:	f109 0901 	add.w	r9, r9, #1
   23634:	e7dd      	b.n	235f2 <std_print+0x2c>
		print_formatted(log_output, str);
   23636:	4631      	mov	r1, r6
   23638:	4628      	mov	r0, r5
   2363a:	f7df f939 	bl	28b0 <print_formatted>
}
   2363e:	46bd      	mov	sp, r7
   23640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   23644:	6822      	ldr	r2, [r4, #0]
   23646:	4631      	mov	r1, r6
   23648:	4628      	mov	r0, r5
   2364a:	f7df f931 	bl	28b0 <print_formatted>
		break;
   2364e:	e7f6      	b.n	2363e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   23650:	e9d4 2300 	ldrd	r2, r3, [r4]
   23654:	4631      	mov	r1, r6
   23656:	4628      	mov	r0, r5
   23658:	f7df f92a 	bl	28b0 <print_formatted>
		break;
   2365c:	e7ef      	b.n	2363e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   2365e:	68a3      	ldr	r3, [r4, #8]
   23660:	9300      	str	r3, [sp, #0]
   23662:	e9d4 2300 	ldrd	r2, r3, [r4]
   23666:	4631      	mov	r1, r6
   23668:	4628      	mov	r0, r5
   2366a:	f7df f921 	bl	28b0 <print_formatted>
		break;
   2366e:	e7e6      	b.n	2363e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23670:	68e3      	ldr	r3, [r4, #12]
   23672:	9301      	str	r3, [sp, #4]
   23674:	68a3      	ldr	r3, [r4, #8]
   23676:	9300      	str	r3, [sp, #0]
   23678:	e9d4 2300 	ldrd	r2, r3, [r4]
   2367c:	4631      	mov	r1, r6
   2367e:	4628      	mov	r0, r5
   23680:	f7df f916 	bl	28b0 <print_formatted>
		break;
   23684:	e7db      	b.n	2363e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23686:	6923      	ldr	r3, [r4, #16]
   23688:	9302      	str	r3, [sp, #8]
   2368a:	68e3      	ldr	r3, [r4, #12]
   2368c:	9301      	str	r3, [sp, #4]
   2368e:	68a3      	ldr	r3, [r4, #8]
   23690:	9300      	str	r3, [sp, #0]
   23692:	e9d4 2300 	ldrd	r2, r3, [r4]
   23696:	4631      	mov	r1, r6
   23698:	4628      	mov	r0, r5
   2369a:	f7df f909 	bl	28b0 <print_formatted>
		break;
   2369e:	e7ce      	b.n	2363e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   236a0:	6963      	ldr	r3, [r4, #20]
   236a2:	9303      	str	r3, [sp, #12]
   236a4:	6923      	ldr	r3, [r4, #16]
   236a6:	9302      	str	r3, [sp, #8]
   236a8:	68e3      	ldr	r3, [r4, #12]
   236aa:	9301      	str	r3, [sp, #4]
   236ac:	68a3      	ldr	r3, [r4, #8]
   236ae:	9300      	str	r3, [sp, #0]
   236b0:	e9d4 2300 	ldrd	r2, r3, [r4]
   236b4:	4631      	mov	r1, r6
   236b6:	4628      	mov	r0, r5
   236b8:	f7df f8fa 	bl	28b0 <print_formatted>
		break;
   236bc:	e7bf      	b.n	2363e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   236be:	69a3      	ldr	r3, [r4, #24]
   236c0:	9304      	str	r3, [sp, #16]
   236c2:	6963      	ldr	r3, [r4, #20]
   236c4:	9303      	str	r3, [sp, #12]
   236c6:	6923      	ldr	r3, [r4, #16]
   236c8:	9302      	str	r3, [sp, #8]
   236ca:	68e3      	ldr	r3, [r4, #12]
   236cc:	9301      	str	r3, [sp, #4]
   236ce:	68a3      	ldr	r3, [r4, #8]
   236d0:	9300      	str	r3, [sp, #0]
   236d2:	e9d4 2300 	ldrd	r2, r3, [r4]
   236d6:	4631      	mov	r1, r6
   236d8:	4628      	mov	r0, r5
   236da:	f7df f8e9 	bl	28b0 <print_formatted>
		break;
   236de:	e7ae      	b.n	2363e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   236e0:	69e3      	ldr	r3, [r4, #28]
   236e2:	9305      	str	r3, [sp, #20]
   236e4:	69a3      	ldr	r3, [r4, #24]
   236e6:	9304      	str	r3, [sp, #16]
   236e8:	6963      	ldr	r3, [r4, #20]
   236ea:	9303      	str	r3, [sp, #12]
   236ec:	6923      	ldr	r3, [r4, #16]
   236ee:	9302      	str	r3, [sp, #8]
   236f0:	68e3      	ldr	r3, [r4, #12]
   236f2:	9301      	str	r3, [sp, #4]
   236f4:	68a3      	ldr	r3, [r4, #8]
   236f6:	9300      	str	r3, [sp, #0]
   236f8:	e9d4 2300 	ldrd	r2, r3, [r4]
   236fc:	4631      	mov	r1, r6
   236fe:	4628      	mov	r0, r5
   23700:	f7df f8d6 	bl	28b0 <print_formatted>
		break;
   23704:	e79b      	b.n	2363e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23706:	6a23      	ldr	r3, [r4, #32]
   23708:	9306      	str	r3, [sp, #24]
   2370a:	69e3      	ldr	r3, [r4, #28]
   2370c:	9305      	str	r3, [sp, #20]
   2370e:	69a3      	ldr	r3, [r4, #24]
   23710:	9304      	str	r3, [sp, #16]
   23712:	6963      	ldr	r3, [r4, #20]
   23714:	9303      	str	r3, [sp, #12]
   23716:	6923      	ldr	r3, [r4, #16]
   23718:	9302      	str	r3, [sp, #8]
   2371a:	68e3      	ldr	r3, [r4, #12]
   2371c:	9301      	str	r3, [sp, #4]
   2371e:	68a3      	ldr	r3, [r4, #8]
   23720:	9300      	str	r3, [sp, #0]
   23722:	e9d4 2300 	ldrd	r2, r3, [r4]
   23726:	4631      	mov	r1, r6
   23728:	4628      	mov	r0, r5
   2372a:	f7df f8c1 	bl	28b0 <print_formatted>
		break;
   2372e:	e786      	b.n	2363e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23730:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23732:	9307      	str	r3, [sp, #28]
   23734:	6a23      	ldr	r3, [r4, #32]
   23736:	9306      	str	r3, [sp, #24]
   23738:	69e3      	ldr	r3, [r4, #28]
   2373a:	9305      	str	r3, [sp, #20]
   2373c:	69a3      	ldr	r3, [r4, #24]
   2373e:	9304      	str	r3, [sp, #16]
   23740:	6963      	ldr	r3, [r4, #20]
   23742:	9303      	str	r3, [sp, #12]
   23744:	6923      	ldr	r3, [r4, #16]
   23746:	9302      	str	r3, [sp, #8]
   23748:	68e3      	ldr	r3, [r4, #12]
   2374a:	9301      	str	r3, [sp, #4]
   2374c:	68a3      	ldr	r3, [r4, #8]
   2374e:	9300      	str	r3, [sp, #0]
   23750:	e9d4 2300 	ldrd	r2, r3, [r4]
   23754:	4631      	mov	r1, r6
   23756:	4628      	mov	r0, r5
   23758:	f7df f8aa 	bl	28b0 <print_formatted>
		break;
   2375c:	e76f      	b.n	2363e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2375e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23760:	9308      	str	r3, [sp, #32]
   23762:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23764:	9307      	str	r3, [sp, #28]
   23766:	6a23      	ldr	r3, [r4, #32]
   23768:	9306      	str	r3, [sp, #24]
   2376a:	69e3      	ldr	r3, [r4, #28]
   2376c:	9305      	str	r3, [sp, #20]
   2376e:	69a3      	ldr	r3, [r4, #24]
   23770:	9304      	str	r3, [sp, #16]
   23772:	6963      	ldr	r3, [r4, #20]
   23774:	9303      	str	r3, [sp, #12]
   23776:	6923      	ldr	r3, [r4, #16]
   23778:	9302      	str	r3, [sp, #8]
   2377a:	68e3      	ldr	r3, [r4, #12]
   2377c:	9301      	str	r3, [sp, #4]
   2377e:	68a3      	ldr	r3, [r4, #8]
   23780:	9300      	str	r3, [sp, #0]
   23782:	e9d4 2300 	ldrd	r2, r3, [r4]
   23786:	4631      	mov	r1, r6
   23788:	4628      	mov	r0, r5
   2378a:	f7df f891 	bl	28b0 <print_formatted>
		break;
   2378e:	e756      	b.n	2363e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23790:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23792:	9309      	str	r3, [sp, #36]	; 0x24
   23794:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23796:	9308      	str	r3, [sp, #32]
   23798:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2379a:	9307      	str	r3, [sp, #28]
   2379c:	6a23      	ldr	r3, [r4, #32]
   2379e:	9306      	str	r3, [sp, #24]
   237a0:	69e3      	ldr	r3, [r4, #28]
   237a2:	9305      	str	r3, [sp, #20]
   237a4:	69a3      	ldr	r3, [r4, #24]
   237a6:	9304      	str	r3, [sp, #16]
   237a8:	6963      	ldr	r3, [r4, #20]
   237aa:	9303      	str	r3, [sp, #12]
   237ac:	6923      	ldr	r3, [r4, #16]
   237ae:	9302      	str	r3, [sp, #8]
   237b0:	68e3      	ldr	r3, [r4, #12]
   237b2:	9301      	str	r3, [sp, #4]
   237b4:	68a3      	ldr	r3, [r4, #8]
   237b6:	9300      	str	r3, [sp, #0]
   237b8:	e9d4 2300 	ldrd	r2, r3, [r4]
   237bc:	4631      	mov	r1, r6
   237be:	4628      	mov	r0, r5
   237c0:	f7df f876 	bl	28b0 <print_formatted>
		break;
   237c4:	e73b      	b.n	2363e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   237c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   237c8:	930a      	str	r3, [sp, #40]	; 0x28
   237ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   237cc:	9309      	str	r3, [sp, #36]	; 0x24
   237ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   237d0:	9308      	str	r3, [sp, #32]
   237d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   237d4:	9307      	str	r3, [sp, #28]
   237d6:	6a23      	ldr	r3, [r4, #32]
   237d8:	9306      	str	r3, [sp, #24]
   237da:	69e3      	ldr	r3, [r4, #28]
   237dc:	9305      	str	r3, [sp, #20]
   237de:	69a3      	ldr	r3, [r4, #24]
   237e0:	9304      	str	r3, [sp, #16]
   237e2:	6963      	ldr	r3, [r4, #20]
   237e4:	9303      	str	r3, [sp, #12]
   237e6:	6923      	ldr	r3, [r4, #16]
   237e8:	9302      	str	r3, [sp, #8]
   237ea:	68e3      	ldr	r3, [r4, #12]
   237ec:	9301      	str	r3, [sp, #4]
   237ee:	68a3      	ldr	r3, [r4, #8]
   237f0:	9300      	str	r3, [sp, #0]
   237f2:	e9d4 2300 	ldrd	r2, r3, [r4]
   237f6:	4631      	mov	r1, r6
   237f8:	4628      	mov	r0, r5
   237fa:	f7df f859 	bl	28b0 <print_formatted>
		break;
   237fe:	e71e      	b.n	2363e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23800:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23802:	930b      	str	r3, [sp, #44]	; 0x2c
   23804:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23806:	930a      	str	r3, [sp, #40]	; 0x28
   23808:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2380a:	9309      	str	r3, [sp, #36]	; 0x24
   2380c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2380e:	9308      	str	r3, [sp, #32]
   23810:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23812:	9307      	str	r3, [sp, #28]
   23814:	6a23      	ldr	r3, [r4, #32]
   23816:	9306      	str	r3, [sp, #24]
   23818:	69e3      	ldr	r3, [r4, #28]
   2381a:	9305      	str	r3, [sp, #20]
   2381c:	69a3      	ldr	r3, [r4, #24]
   2381e:	9304      	str	r3, [sp, #16]
   23820:	6963      	ldr	r3, [r4, #20]
   23822:	9303      	str	r3, [sp, #12]
   23824:	6923      	ldr	r3, [r4, #16]
   23826:	9302      	str	r3, [sp, #8]
   23828:	68e3      	ldr	r3, [r4, #12]
   2382a:	9301      	str	r3, [sp, #4]
   2382c:	68a3      	ldr	r3, [r4, #8]
   2382e:	9300      	str	r3, [sp, #0]
   23830:	e9d4 2300 	ldrd	r2, r3, [r4]
   23834:	4631      	mov	r1, r6
   23836:	4628      	mov	r0, r5
   23838:	f7df f83a 	bl	28b0 <print_formatted>
		break;
   2383c:	e6ff      	b.n	2363e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2383e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   23840:	930c      	str	r3, [sp, #48]	; 0x30
   23842:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23844:	930b      	str	r3, [sp, #44]	; 0x2c
   23846:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23848:	930a      	str	r3, [sp, #40]	; 0x28
   2384a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2384c:	9309      	str	r3, [sp, #36]	; 0x24
   2384e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23850:	9308      	str	r3, [sp, #32]
   23852:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23854:	9307      	str	r3, [sp, #28]
   23856:	6a23      	ldr	r3, [r4, #32]
   23858:	9306      	str	r3, [sp, #24]
   2385a:	69e3      	ldr	r3, [r4, #28]
   2385c:	9305      	str	r3, [sp, #20]
   2385e:	69a3      	ldr	r3, [r4, #24]
   23860:	9304      	str	r3, [sp, #16]
   23862:	6963      	ldr	r3, [r4, #20]
   23864:	9303      	str	r3, [sp, #12]
   23866:	6923      	ldr	r3, [r4, #16]
   23868:	9302      	str	r3, [sp, #8]
   2386a:	68e3      	ldr	r3, [r4, #12]
   2386c:	9301      	str	r3, [sp, #4]
   2386e:	68a3      	ldr	r3, [r4, #8]
   23870:	9300      	str	r3, [sp, #0]
   23872:	e9d4 2300 	ldrd	r2, r3, [r4]
   23876:	4631      	mov	r1, r6
   23878:	4628      	mov	r0, r5
   2387a:	f7df f819 	bl	28b0 <print_formatted>
}
   2387e:	e6de      	b.n	2363e <std_print+0x78>

00023880 <log_output_flush>:
		     log_output->control_block->offset,
   23880:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   23882:	6881      	ldr	r1, [r0, #8]
{
   23884:	b510      	push	{r4, lr}
   23886:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   23888:	e9d2 2300 	ldrd	r2, r3, [r2]
   2388c:	6800      	ldr	r0, [r0, #0]
   2388e:	f7ff fe8d 	bl	235ac <buffer_write>
	log_output->control_block->offset = 0;
   23892:	6863      	ldr	r3, [r4, #4]
   23894:	2200      	movs	r2, #0
   23896:	601a      	str	r2, [r3, #0]
}
   23898:	bd10      	pop	{r4, pc}

0002389a <char_out>:
{
   2389a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2389c:	460d      	mov	r5, r1
   2389e:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   238a0:	4604      	mov	r4, r0
   238a2:	1847      	adds	r7, r0, r1
   238a4:	42bc      	cmp	r4, r7
   238a6:	d101      	bne.n	238ac <char_out+0x12>
}
   238a8:	4628      	mov	r0, r5
   238aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   238ac:	f814 1b01 	ldrb.w	r1, [r4], #1
   238b0:	6873      	ldr	r3, [r6, #4]
   238b2:	4630      	mov	r0, r6
   238b4:	685b      	ldr	r3, [r3, #4]
   238b6:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   238b8:	e7f4      	b.n	238a4 <char_out+0xa>

000238ba <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   238ba:	6843      	ldr	r3, [r0, #4]
   238bc:	68db      	ldr	r3, [r3, #12]
   238be:	4718      	bx	r3

000238c0 <nvs_flash_rd>:
{
   238c0:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   238c2:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   238c4:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   238c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   238c8:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   238ca:	fa16 f181 	uxtah	r1, r6, r1
   238ce:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   238d2:	6844      	ldr	r4, [r0, #4]
   238d4:	6824      	ldr	r4, [r4, #0]
   238d6:	46a4      	mov	ip, r4
}
   238d8:	bc70      	pop	{r4, r5, r6}
   238da:	4760      	bx	ip

000238dc <nvs_flash_block_cmp>:
{
   238dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   238e0:	7c05      	ldrb	r5, [r0, #16]
   238e2:	426d      	negs	r5, r5
{
   238e4:	b089      	sub	sp, #36	; 0x24
   238e6:	4681      	mov	r9, r0
   238e8:	460e      	mov	r6, r1
   238ea:	4617      	mov	r7, r2
   238ec:	461c      	mov	r4, r3
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   238ee:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   238f2:	b91c      	cbnz	r4, 238fc <nvs_flash_block_cmp+0x20>
	return 0;
   238f4:	4620      	mov	r0, r4
}
   238f6:	b009      	add	sp, #36	; 0x24
   238f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   238fc:	42ac      	cmp	r4, r5
   238fe:	46a0      	mov	r8, r4
   23900:	bf28      	it	cs
   23902:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   23904:	4643      	mov	r3, r8
   23906:	466a      	mov	r2, sp
   23908:	4631      	mov	r1, r6
   2390a:	4648      	mov	r0, r9
   2390c:	f7ff ffd8 	bl	238c0 <nvs_flash_rd>
		if (rc) {
   23910:	2800      	cmp	r0, #0
   23912:	d1f0      	bne.n	238f6 <nvs_flash_block_cmp+0x1a>
		rc = memcmp(data8, buf, bytes_to_cmp);
   23914:	4642      	mov	r2, r8
   23916:	4669      	mov	r1, sp
   23918:	4638      	mov	r0, r7
   2391a:	f001 fba9 	bl	25070 <memcmp>
		if (rc) {
   2391e:	b920      	cbnz	r0, 2392a <nvs_flash_block_cmp+0x4e>
		len -= bytes_to_cmp;
   23920:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   23924:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   23926:	4447      	add	r7, r8
   23928:	e7e3      	b.n	238f2 <nvs_flash_block_cmp+0x16>
			return 1;
   2392a:	2001      	movs	r0, #1
   2392c:	e7e3      	b.n	238f6 <nvs_flash_block_cmp+0x1a>

0002392e <nvs_ate_crc8_check>:
{
   2392e:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   23930:	4601      	mov	r1, r0
{
   23932:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   23934:	2207      	movs	r2, #7
   23936:	20ff      	movs	r0, #255	; 0xff
   23938:	f7de f8d2 	bl	1ae0 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2393c:	79e3      	ldrb	r3, [r4, #7]
}
   2393e:	1a18      	subs	r0, r3, r0
   23940:	bf18      	it	ne
   23942:	2001      	movne	r0, #1
   23944:	bd10      	pop	{r4, pc}

00023946 <nvs_ate_crc8_update>:
{
   23946:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   23948:	4601      	mov	r1, r0
{
   2394a:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2394c:	2207      	movs	r2, #7
   2394e:	20ff      	movs	r0, #255	; 0xff
   23950:	f7de f8c6 	bl	1ae0 <crc8_ccitt>
	entry->crc8 = crc8;
   23954:	71e0      	strb	r0, [r4, #7]
}
   23956:	bd10      	pop	{r4, pc}

00023958 <nvs_al_size.isra.0>:
static inline size_t nvs_al_size(struct nvs_fs *fs, size_t len)
   23958:	4603      	mov	r3, r0
	if (fs->write_block_size <= 1U) {
   2395a:	2b01      	cmp	r3, #1
static inline size_t nvs_al_size(struct nvs_fs *fs, size_t len)
   2395c:	4608      	mov	r0, r1
	return (len + (fs->write_block_size - 1U)) & ~(fs->write_block_size - 1U);
   2395e:	bf81      	itttt	hi
   23960:	f103 31ff 	addhi.w	r1, r3, #4294967295	; 0xffffffff
   23964:	1809      	addhi	r1, r1, r0
   23966:	4258      	neghi	r0, r3
   23968:	4008      	andhi	r0, r1
}
   2396a:	4770      	bx	lr

0002396c <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2396c:	680b      	ldr	r3, [r1, #0]
   2396e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   23972:	0c1a      	lsrs	r2, r3, #16
   23974:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   23978:	bf08      	it	eq
   2397a:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2397e:	600b      	str	r3, [r1, #0]
}
   23980:	4770      	bx	lr

00023982 <nvs_flash_cmp_const.constprop.0>:
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   23982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   23986:	7c05      	ldrb	r5, [r0, #16]
   23988:	426d      	negs	r5, r5
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   2398a:	b088      	sub	sp, #32
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   2398c:	f005 0520 	and.w	r5, r5, #32
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   23990:	4607      	mov	r7, r0
   23992:	460e      	mov	r6, r1
   23994:	4614      	mov	r4, r2
	(void)memset(cmp, value, block_size);
   23996:	21ff      	movs	r1, #255	; 0xff
   23998:	462a      	mov	r2, r5
   2399a:	4668      	mov	r0, sp
   2399c:	f001 fba3 	bl	250e6 <memset>
	while (len) {
   239a0:	b91c      	cbnz	r4, 239aa <nvs_flash_cmp_const.constprop.0+0x28>
	return 0;
   239a2:	4620      	mov	r0, r4
}
   239a4:	b008      	add	sp, #32
   239a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   239aa:	42a5      	cmp	r5, r4
   239ac:	46a8      	mov	r8, r5
   239ae:	bf28      	it	cs
   239b0:	46a0      	movcs	r8, r4
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   239b2:	4643      	mov	r3, r8
   239b4:	466a      	mov	r2, sp
   239b6:	4631      	mov	r1, r6
   239b8:	4638      	mov	r0, r7
   239ba:	f7ff ff8f 	bl	238dc <nvs_flash_block_cmp>
		if (rc) {
   239be:	2800      	cmp	r0, #0
   239c0:	d1f0      	bne.n	239a4 <nvs_flash_cmp_const.constprop.0+0x22>
		len -= bytes_to_cmp;
   239c2:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   239c6:	4446      	add	r6, r8
   239c8:	e7ea      	b.n	239a0 <nvs_flash_cmp_const.constprop.0+0x1e>

000239ca <nvs_flash_erase_sector>:
{
   239ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	addr &= ADDR_SECT_MASK;
   239ce:	0c0e      	lsrs	r6, r1, #16
   239d0:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
   239d2:	8982      	ldrh	r2, [r0, #12]
   239d4:	4631      	mov	r1, r6
{
   239d6:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
   239d8:	f7ff ffd3 	bl	23982 <nvs_flash_cmp_const.constprop.0>
	if (rc <= 0) {
   239dc:	1e04      	subs	r4, r0, #0
   239de:	dd17      	ble.n	23a10 <nvs_flash_erase_sector+0x46>
	rc = flash_write_protection_set(fs->flash_device, 0);
   239e0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   239e2:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   239e4:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, 0);
   239e8:	2100      	movs	r1, #0
   239ea:	f7ff ff66 	bl	238ba <flash_write_protection_set>
	if (rc) {
   239ee:	4604      	mov	r4, r0
   239f0:	b970      	cbnz	r0, 23a10 <nvs_flash_erase_sector+0x46>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   239f2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   239f4:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   239f6:	6843      	ldr	r3, [r0, #4]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   239f8:	0c31      	lsrs	r1, r6, #16
   239fa:	689b      	ldr	r3, [r3, #8]
   239fc:	fb08 7101 	mla	r1, r8, r1, r7
   23a00:	4798      	blx	r3
	if (rc) {
   23a02:	4604      	mov	r4, r0
   23a04:	b920      	cbnz	r0, 23a10 <nvs_flash_erase_sector+0x46>
	(void) flash_write_protection_set(fs->flash_device, 1);
   23a06:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write_protection(dev, enable);
   23a08:	6843      	ldr	r3, [r0, #4]
   23a0a:	2101      	movs	r1, #1
   23a0c:	68db      	ldr	r3, [r3, #12]
   23a0e:	4798      	blx	r3
}
   23a10:	4620      	mov	r0, r4
   23a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023a16 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   23a16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset = fs->offset;
   23a1a:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23a1e:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   23a20:	b088      	sub	sp, #32
   23a22:	4605      	mov	r5, r0
   23a24:	460c      	mov	r4, r1
	rc = flash_write_protection_set(fs->flash_device, 0);
   23a26:	6a80      	ldr	r0, [r0, #40]	; 0x28
   23a28:	2100      	movs	r1, #0
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   23a2a:	4690      	mov	r8, r2
   23a2c:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, 0);
   23a2e:	f7ff ff44 	bl	238ba <flash_write_protection_set>
	if (rc) {
   23a32:	bb78      	cbnz	r0, 23a94 <nvs_flash_al_wrt.part.0+0x7e>
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23a34:	ea4f 4914 	mov.w	r9, r4, lsr #16
	offset += addr & ADDR_OFFS_MASK;
   23a38:	fa1a f484 	uxtah	r4, sl, r4
   23a3c:	fb07 4909 	mla	r9, r7, r9, r4
	blen = len & ~(fs->write_block_size - 1U);
   23a40:	7c2f      	ldrb	r7, [r5, #16]
   23a42:	427f      	negs	r7, r7
	if (blen > 0) {
   23a44:	4037      	ands	r7, r6
   23a46:	d00b      	beq.n	23a60 <nvs_flash_al_wrt.part.0+0x4a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   23a48:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   23a4a:	6843      	ldr	r3, [r0, #4]
   23a4c:	4642      	mov	r2, r8
   23a4e:	685c      	ldr	r4, [r3, #4]
   23a50:	4649      	mov	r1, r9
   23a52:	463b      	mov	r3, r7
   23a54:	47a0      	blx	r4
		if (rc) {
   23a56:	4604      	mov	r4, r0
   23a58:	b9b8      	cbnz	r0, 23a8a <nvs_flash_al_wrt.part.0+0x74>
		len -= blen;
   23a5a:	1bf6      	subs	r6, r6, r7
		offset += blen;
   23a5c:	44b9      	add	r9, r7
		data8 += blen;
   23a5e:	44b8      	add	r8, r7
	if (len) {
   23a60:	b1de      	cbz	r6, 23a9a <nvs_flash_al_wrt.part.0+0x84>
		memcpy(buf, data8, len);
   23a62:	4632      	mov	r2, r6
   23a64:	4641      	mov	r1, r8
   23a66:	4668      	mov	r0, sp
   23a68:	f001 fb12 	bl	25090 <memcpy>
		(void)memset(buf + len, 0xff, fs->write_block_size - len);
   23a6c:	7c2a      	ldrb	r2, [r5, #16]
   23a6e:	21ff      	movs	r1, #255	; 0xff
   23a70:	1b92      	subs	r2, r2, r6
   23a72:	eb0d 0006 	add.w	r0, sp, r6
   23a76:	f001 fb36 	bl	250e6 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   23a7a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   23a7c:	7c2b      	ldrb	r3, [r5, #16]
   23a7e:	6842      	ldr	r2, [r0, #4]
   23a80:	4649      	mov	r1, r9
   23a82:	6854      	ldr	r4, [r2, #4]
   23a84:	466a      	mov	r2, sp
   23a86:	47a0      	blx	r4
   23a88:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, 1);
   23a8a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   23a8c:	2101      	movs	r1, #1
   23a8e:	f7ff ff14 	bl	238ba <flash_write_protection_set>
	return rc;
   23a92:	4620      	mov	r0, r4
}
   23a94:	b008      	add	sp, #32
   23a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   23a9a:	4634      	mov	r4, r6
   23a9c:	e7f5      	b.n	23a8a <nvs_flash_al_wrt.part.0+0x74>

00023a9e <nvs_flash_ate_wrt>:
{
   23a9e:	b510      	push	{r4, lr}
   23aa0:	460a      	mov	r2, r1
	if (!len) {
   23aa2:	2308      	movs	r3, #8
   23aa4:	6841      	ldr	r1, [r0, #4]
{
   23aa6:	4604      	mov	r4, r0
   23aa8:	f7ff ffb5 	bl	23a16 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   23aac:	2108      	movs	r1, #8
   23aae:	4602      	mov	r2, r0
   23ab0:	7c20      	ldrb	r0, [r4, #16]
   23ab2:	f7ff ff51 	bl	23958 <nvs_al_size.isra.0>
   23ab6:	6863      	ldr	r3, [r4, #4]
   23ab8:	1a1b      	subs	r3, r3, r0
   23aba:	6063      	str	r3, [r4, #4]
}
   23abc:	4610      	mov	r0, r2
   23abe:	bd10      	pop	{r4, pc}

00023ac0 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   23ac0:	2300      	movs	r3, #0
   23ac2:	461a      	mov	r2, r3
   23ac4:	f7df bc3e 	b.w	3344 <nvs_write>

00023ac8 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, u16_t id, void *data, size_t len)
{
   23ac8:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   23aca:	2400      	movs	r4, #0
   23acc:	9400      	str	r4, [sp, #0]
   23ace:	f7df fd19 	bl	3504 <nvs_read_hist>
	return rc;
}
   23ad2:	b002      	add	sp, #8
   23ad4:	bd10      	pop	{r4, pc}

00023ad6 <get_sectors_cb>:
{
   23ad6:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   23ad8:	6802      	ldr	r2, [r0, #0]
   23ada:	684c      	ldr	r4, [r1, #4]
   23adc:	42a2      	cmp	r2, r4
   23ade:	d316      	bcc.n	23b0e <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   23ae0:	688b      	ldr	r3, [r1, #8]
   23ae2:	4423      	add	r3, r4
   23ae4:	429a      	cmp	r2, r3
   23ae6:	d206      	bcs.n	23af6 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   23ae8:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   23aec:	42ab      	cmp	r3, r5
   23aee:	d304      	bcc.n	23afa <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   23af0:	f06f 030b 	mvn.w	r3, #11
   23af4:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   23af6:	2000      	movs	r0, #0
   23af8:	e00a      	b.n	23b10 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   23afa:	68cd      	ldr	r5, [r1, #12]
   23afc:	1b12      	subs	r2, r2, r4
   23afe:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   23b02:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   23b06:	6842      	ldr	r2, [r0, #4]
   23b08:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   23b0a:	3301      	adds	r3, #1
   23b0c:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   23b0e:	2001      	movs	r0, #1
}
   23b10:	bd70      	pop	{r4, r5, r6, pc}

00023b12 <settings_load>:
	return settings_load_subtree(NULL);
   23b12:	2000      	movs	r0, #0
   23b14:	f7df bdea 	b.w	36ec <settings_load_subtree>

00023b18 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   23b18:	2200      	movs	r2, #0
   23b1a:	4611      	mov	r1, r2
   23b1c:	f7df bdae 	b.w	367c <settings_save_one>

00023b20 <settings_name_steq>:
{
   23b20:	4603      	mov	r3, r0
   23b22:	b530      	push	{r4, r5, lr}
   23b24:	4608      	mov	r0, r1
	if (next) {
   23b26:	b10a      	cbz	r2, 23b2c <settings_name_steq+0xc>
		*next = NULL;
   23b28:	2100      	movs	r1, #0
   23b2a:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   23b2c:	b163      	cbz	r3, 23b48 <settings_name_steq+0x28>
   23b2e:	b190      	cbz	r0, 23b56 <settings_name_steq+0x36>
   23b30:	1e41      	subs	r1, r0, #1
   23b32:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   23b34:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   23b38:	4604      	mov	r4, r0
   23b3a:	f810 3b01 	ldrb.w	r3, [r0], #1
   23b3e:	b15d      	cbz	r5, 23b58 <settings_name_steq+0x38>
   23b40:	429d      	cmp	r5, r3
   23b42:	d101      	bne.n	23b48 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   23b44:	2d3d      	cmp	r5, #61	; 0x3d
   23b46:	d1f5      	bne.n	23b34 <settings_name_steq+0x14>
	return 0;
   23b48:	2000      	movs	r0, #0
   23b4a:	e004      	b.n	23b56 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   23b4c:	2b3d      	cmp	r3, #61	; 0x3d
   23b4e:	d008      	beq.n	23b62 <settings_name_steq+0x42>
   23b50:	fab3 f083 	clz	r0, r3
   23b54:	0940      	lsrs	r0, r0, #5
}
   23b56:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   23b58:	2b2f      	cmp	r3, #47	; 0x2f
   23b5a:	d1f7      	bne.n	23b4c <settings_name_steq+0x2c>
		if (next) {
   23b5c:	b10a      	cbz	r2, 23b62 <settings_name_steq+0x42>
			*next = name + 1;
   23b5e:	3401      	adds	r4, #1
   23b60:	6014      	str	r4, [r2, #0]
		return 1;
   23b62:	2001      	movs	r0, #1
   23b64:	e7f7      	b.n	23b56 <settings_name_steq+0x36>

00023b66 <settings_name_next>:
{
   23b66:	b530      	push	{r4, r5, lr}
   23b68:	4603      	mov	r3, r0
	if (next) {
   23b6a:	b109      	cbz	r1, 23b70 <settings_name_next+0xa>
		*next = NULL;
   23b6c:	2200      	movs	r2, #0
   23b6e:	600a      	str	r2, [r1, #0]
	if (!name) {
   23b70:	b16b      	cbz	r3, 23b8e <settings_name_next+0x28>
   23b72:	461a      	mov	r2, r3
   23b74:	4614      	mov	r4, r2
   23b76:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   23b78:	f812 5b01 	ldrb.w	r5, [r2], #1
   23b7c:	b135      	cbz	r5, 23b8c <settings_name_next+0x26>
   23b7e:	2d3d      	cmp	r5, #61	; 0x3d
   23b80:	d004      	beq.n	23b8c <settings_name_next+0x26>
   23b82:	2d2f      	cmp	r5, #47	; 0x2f
   23b84:	d1f6      	bne.n	23b74 <settings_name_next+0xe>
		if (next) {
   23b86:	b109      	cbz	r1, 23b8c <settings_name_next+0x26>
			*next = name + 1;
   23b88:	3401      	adds	r4, #1
   23b8a:	600c      	str	r4, [r1, #0]
}
   23b8c:	bd30      	pop	{r4, r5, pc}
		return 0;
   23b8e:	4618      	mov	r0, r3
   23b90:	e7fc      	b.n	23b8c <settings_name_next+0x26>

00023b92 <settings_nvs_read_fn>:
{
   23b92:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   23b94:	4613      	mov	r3, r2
{
   23b96:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   23b98:	460a      	mov	r2, r1
   23b9a:	8881      	ldrh	r1, [r0, #4]
   23b9c:	6800      	ldr	r0, [r0, #0]
   23b9e:	f7ff ff93 	bl	23ac8 <nvs_read>
}
   23ba2:	42a0      	cmp	r0, r4
   23ba4:	bfa8      	it	ge
   23ba6:	4620      	movge	r0, r4
   23ba8:	bd10      	pop	{r4, pc}

00023baa <settings_nvs_save>:
{
   23baa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23bae:	b097      	sub	sp, #92	; 0x5c
   23bb0:	4604      	mov	r4, r0
   23bb2:	9201      	str	r2, [sp, #4]
   23bb4:	469b      	mov	fp, r3
	if (!name) {
   23bb6:	4689      	mov	r9, r1
   23bb8:	2900      	cmp	r1, #0
   23bba:	d067      	beq.n	23c8c <settings_nvs_save+0xe2>
	delete = ((value == NULL) || (val_len == 0));
   23bbc:	b1da      	cbz	r2, 23bf6 <settings_nvs_save+0x4c>
   23bbe:	fabb f78b 	clz	r7, fp
   23bc2:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   23bc4:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
   23bc6:	3501      	adds	r5, #1
   23bc8:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   23bca:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   23bcc:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   23bd0:	1e6e      	subs	r6, r5, #1
   23bd2:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   23bd4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   23bd8:	d02e      	beq.n	23c38 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   23bda:	234a      	movs	r3, #74	; 0x4a
   23bdc:	aa03      	add	r2, sp, #12
   23bde:	4631      	mov	r1, r6
   23be0:	4650      	mov	r0, sl
   23be2:	f7ff ff71 	bl	23ac8 <nvs_read>
		if (rc < 0) {
   23be6:	2800      	cmp	r0, #0
   23be8:	da07      	bge.n	23bfa <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   23bea:	f110 0f02 	cmn.w	r0, #2
   23bee:	bf08      	it	eq
   23bf0:	46b0      	moveq	r8, r6
   23bf2:	4635      	mov	r5, r6
   23bf4:	e7ec      	b.n	23bd0 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   23bf6:	2701      	movs	r7, #1
   23bf8:	e7e4      	b.n	23bc4 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   23bfa:	ab16      	add	r3, sp, #88	; 0x58
   23bfc:	4418      	add	r0, r3
   23bfe:	2300      	movs	r3, #0
   23c00:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   23c04:	a903      	add	r1, sp, #12
   23c06:	4648      	mov	r0, r9
   23c08:	f001 fa17 	bl	2503a <strcmp>
   23c0c:	2800      	cmp	r0, #0
   23c0e:	d1f0      	bne.n	23bf2 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   23c10:	2f00      	cmp	r7, #0
   23c12:	d039      	beq.n	23c88 <settings_nvs_save+0xde>
   23c14:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   23c16:	42b3      	cmp	r3, r6
   23c18:	d140      	bne.n	23c9c <settings_nvs_save+0xf2>
			cf->last_name_id--;
   23c1a:	4622      	mov	r2, r4
   23c1c:	1e73      	subs	r3, r6, #1
   23c1e:	f822 3f34 	strh.w	r3, [r2, #52]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   23c22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   23c26:	2302      	movs	r3, #2
   23c28:	4650      	mov	r0, sl
   23c2a:	f7df fb8b 	bl	3344 <nvs_write>
			if (rc < 0) {
   23c2e:	2800      	cmp	r0, #0
   23c30:	da34      	bge.n	23c9c <settings_nvs_save+0xf2>
}
   23c32:	b017      	add	sp, #92	; 0x5c
   23c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   23c38:	bb5f      	cbnz	r7, 23c92 <settings_nvs_save+0xe8>
	write_name = true;
   23c3a:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   23c3c:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   23c40:	d029      	beq.n	23c96 <settings_nvs_save+0xec>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   23c42:	f104 0508 	add.w	r5, r4, #8
   23c46:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   23c4a:	9a01      	ldr	r2, [sp, #4]
   23c4c:	465b      	mov	r3, fp
   23c4e:	b289      	uxth	r1, r1
   23c50:	4628      	mov	r0, r5
   23c52:	f7df fb77 	bl	3344 <nvs_write>
	if (write_name) {
   23c56:	b157      	cbz	r7, 23c6e <settings_nvs_save+0xc4>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   23c58:	4648      	mov	r0, r9
   23c5a:	f001 f9e7 	bl	2502c <strlen>
   23c5e:	464a      	mov	r2, r9
   23c60:	4603      	mov	r3, r0
   23c62:	4641      	mov	r1, r8
   23c64:	4628      	mov	r0, r5
   23c66:	f7df fb6d 	bl	3344 <nvs_write>
		if (rc < 0) {
   23c6a:	2800      	cmp	r0, #0
   23c6c:	dbe1      	blt.n	23c32 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   23c6e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   23c70:	4543      	cmp	r3, r8
   23c72:	d220      	bcs.n	23cb6 <settings_nvs_save+0x10c>
		cf->last_name_id = write_name_id;
   23c74:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   23c76:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   23c78:	f822 8f34 	strh.w	r8, [r2, #52]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   23c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   23c80:	4628      	mov	r0, r5
   23c82:	f7df fb5f 	bl	3344 <nvs_write>
   23c86:	e016      	b.n	23cb6 <settings_nvs_save+0x10c>
   23c88:	46b0      	mov	r8, r6
   23c8a:	e7d7      	b.n	23c3c <settings_nvs_save+0x92>
		return -EINVAL;
   23c8c:	f06f 0015 	mvn.w	r0, #21
   23c90:	e7cf      	b.n	23c32 <settings_nvs_save+0x88>
		return 0;
   23c92:	2000      	movs	r0, #0
   23c94:	e7cd      	b.n	23c32 <settings_nvs_save+0x88>
		return -ENOMEM;
   23c96:	f06f 000b 	mvn.w	r0, #11
   23c9a:	e7ca      	b.n	23c32 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   23c9c:	4631      	mov	r1, r6
   23c9e:	4650      	mov	r0, sl
   23ca0:	f7ff ff0e 	bl	23ac0 <nvs_delete>
			if (rc >= 0) {
   23ca4:	2800      	cmp	r0, #0
   23ca6:	dbc4      	blt.n	23c32 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   23ca8:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   23cac:	313f      	adds	r1, #63	; 0x3f
   23cae:	b289      	uxth	r1, r1
   23cb0:	4650      	mov	r0, sl
   23cb2:	f7ff ff05 	bl	23ac0 <nvs_delete>
	if (rc < 0) {
   23cb6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   23cba:	e7ba      	b.n	23c32 <settings_nvs_save+0x88>

00023cbc <settings_nvs_backend_init>:
{
   23cbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   23cbe:	f100 0608 	add.w	r6, r0, #8
   23cc2:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
   23cc4:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   23cc6:	4630      	mov	r0, r6
   23cc8:	f7df f9f4 	bl	30b4 <nvs_init>
	if (rc) {
   23ccc:	4605      	mov	r5, r0
   23cce:	b970      	cbnz	r0, 23cee <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   23cd0:	2302      	movs	r3, #2
   23cd2:	f10d 0206 	add.w	r2, sp, #6
   23cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   23cda:	4630      	mov	r0, r6
   23cdc:	f7ff fef4 	bl	23ac8 <nvs_read>
	if (rc < 0) {
   23ce0:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   23ce2:	bfac      	ite	ge
   23ce4:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   23ce8:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   23cec:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   23cee:	4628      	mov	r0, r5
   23cf0:	b002      	add	sp, #8
   23cf2:	bd70      	pop	{r4, r5, r6, pc}

00023cf4 <clk_init>:
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   23cf4:	2200      	movs	r2, #0
{
   23cf6:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   23cf8:	2101      	movs	r1, #1
{
   23cfa:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   23cfc:	4610      	mov	r0, r2
   23cfe:	f7e0 fd1b 	bl	4738 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   23d02:	2000      	movs	r0, #0
   23d04:	f7e0 fce6 	bl	46d4 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   23d08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23d0c:	2201      	movs	r2, #1
   23d0e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   23d12:	2203      	movs	r2, #3
   23d14:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
   23d18:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
   23d1a:	2000      	movs	r0, #0
	list->tail = NULL;
   23d1c:	e9c3 0000 	strd	r0, r0, [r3]
   23d20:	68a3      	ldr	r3, [r4, #8]
   23d22:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
   23d26:	bd10      	pop	{r4, pc}

00023d28 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   23d28:	2200      	movs	r2, #0
   23d2a:	f7df bfad 	b.w	3c88 <clock_async_start>

00023d2e <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   23d2e:	4770      	bx	lr

00023d30 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   23d30:	f7e0 ba52 	b.w	41d8 <_DoInit>

00023d34 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   23d34:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   23d36:	f7ff fffb 	bl	23d30 <SEGGER_RTT_Init>

	return 0;
}
   23d3a:	2000      	movs	r0, #0
   23d3c:	bd08      	pop	{r3, pc}

00023d3e <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   23d3e:	b538      	push	{r3, r4, r5, lr}
   23d40:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   23d42:	42ab      	cmp	r3, r5
{
   23d44:	4611      	mov	r1, r2
   23d46:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   23d48:	d804      	bhi.n	23d54 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   23d4a:	461a      	mov	r2, r3
   23d4c:	f001 f9a0 	bl	25090 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   23d50:	4620      	mov	r0, r4
   23d52:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   23d54:	2400      	movs	r4, #0
   23d56:	e7fb      	b.n	23d50 <_copy+0x12>

00023d58 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   23d58:	f001 b9c5 	b.w	250e6 <memset>

00023d5c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   23d5c:	09c3      	lsrs	r3, r0, #7
   23d5e:	005a      	lsls	r2, r3, #1
   23d60:	4413      	add	r3, r2
   23d62:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   23d66:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   23d6a:	b2c0      	uxtb	r0, r0
   23d6c:	4770      	bx	lr

00023d6e <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   23d6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23d72:	4606      	mov	r6, r0
   23d74:	b0a9      	sub	sp, #164	; 0xa4
   23d76:	4688      	mov	r8, r1
   23d78:	4614      	mov	r4, r2
   23d7a:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   23d7c:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   23d80:	f7e0 fab0 	bl	42e4 <uECC_get_rng>
		if (!rng_function ||
   23d84:	4603      	mov	r3, r0
   23d86:	2800      	cmp	r0, #0
   23d88:	d03e      	beq.n	23e08 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   23d8a:	2140      	movs	r1, #64	; 0x40
   23d8c:	a808      	add	r0, sp, #32
   23d8e:	4798      	blx	r3
		if (!rng_function ||
   23d90:	b3d0      	cbz	r0, 23e08 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   23d92:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   23d96:	f112 031f 	adds.w	r3, r2, #31
   23d9a:	bf48      	it	mi
   23d9c:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   23da0:	466d      	mov	r5, sp
   23da2:	464a      	mov	r2, r9
   23da4:	a908      	add	r1, sp, #32
   23da6:	4628      	mov	r0, r5
   23da8:	f343 1347 	sbfx	r3, r3, #5, #8
   23dac:	f000 fa03 	bl	241b6 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   23db0:	4622      	mov	r2, r4
   23db2:	4629      	mov	r1, r5
   23db4:	a818      	add	r0, sp, #96	; 0x60
   23db6:	f000 fe19 	bl	249ec <EccPoint_compute_public_key>
   23dba:	b318      	cbz	r0, 23e04 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   23dbc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   23dc0:	1dd9      	adds	r1, r3, #7
   23dc2:	bf48      	it	mi
   23dc4:	f103 010e 	addmi.w	r1, r3, #14
   23dc8:	462a      	mov	r2, r5
   23dca:	4640      	mov	r0, r8
   23dcc:	10c9      	asrs	r1, r1, #3
   23dce:	f000 fe35 	bl	24a3c <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   23dd2:	f994 1001 	ldrsb.w	r1, [r4, #1]
   23dd6:	aa18      	add	r2, sp, #96	; 0x60
   23dd8:	4630      	mov	r0, r6
   23dda:	f000 fe2f 	bl	24a3c <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   23dde:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   23de2:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   23de6:	ab18      	add	r3, sp, #96	; 0x60
   23de8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   23dec:	1870      	adds	r0, r6, r1
   23dee:	f000 fe25 	bl	24a3c <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   23df2:	2220      	movs	r2, #32
   23df4:	2100      	movs	r1, #0
   23df6:	4628      	mov	r0, r5
   23df8:	f001 f975 	bl	250e6 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   23dfc:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   23dfe:	b029      	add	sp, #164	; 0xa4
   23e00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   23e04:	3f01      	subs	r7, #1
   23e06:	d1bb      	bne.n	23d80 <uECC_make_key+0x12>
        		return 0;
   23e08:	2000      	movs	r0, #0
   23e0a:	e7f8      	b.n	23dfe <uECC_make_key+0x90>

00023e0c <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   23e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23e10:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   23e12:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   23e16:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   23e1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   23e1e:	b0a4      	sub	sp, #144	; 0x90
   23e20:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   23e22:	1dda      	adds	r2, r3, #7
   23e24:	bf48      	it	mi
   23e26:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   23e2a:	ad04      	add	r5, sp, #16
{
   23e2c:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   23e2e:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   23e30:	4628      	mov	r0, r5
   23e32:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   23e34:	9502      	str	r5, [sp, #8]
   23e36:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   23e38:	f000 fe14 	bl	24a64 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   23e3c:	463a      	mov	r2, r7
   23e3e:	4649      	mov	r1, r9
   23e40:	a814      	add	r0, sp, #80	; 0x50
   23e42:	f000 fe0f 	bl	24a64 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   23e46:	ab14      	add	r3, sp, #80	; 0x50
   23e48:	eb09 0107 	add.w	r1, r9, r7
   23e4c:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   23e50:	463a      	mov	r2, r7
   23e52:	f000 fe07 	bl	24a64 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   23e56:	4623      	mov	r3, r4
   23e58:	4632      	mov	r2, r6
   23e5a:	4629      	mov	r1, r5
   23e5c:	4628      	mov	r0, r5
   23e5e:	f000 fd99 	bl	24994 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   23e62:	fab0 f080 	clz	r0, r0
   23e66:	9401      	str	r4, [sp, #4]
   23e68:	ab24      	add	r3, sp, #144	; 0x90
   23e6a:	0940      	lsrs	r0, r0, #5
   23e6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23e70:	8863      	ldrh	r3, [r4, #2]
   23e72:	3301      	adds	r3, #1
   23e74:	b21b      	sxth	r3, r3
   23e76:	9300      	str	r3, [sp, #0]
   23e78:	a914      	add	r1, sp, #80	; 0x50
   23e7a:	2300      	movs	r3, #0
   23e7c:	f850 2c88 	ldr.w	r2, [r0, #-136]
   23e80:	4608      	mov	r0, r1
   23e82:	f000 fcb8 	bl	247f6 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   23e86:	aa14      	add	r2, sp, #80	; 0x50
   23e88:	4639      	mov	r1, r7
   23e8a:	4640      	mov	r0, r8
   23e8c:	f000 fdd6 	bl	24a3c <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   23e90:	4621      	mov	r1, r4
   23e92:	a814      	add	r0, sp, #80	; 0x50
   23e94:	f000 fc24 	bl	246e0 <EccPoint_isZero>
   23e98:	af02      	add	r7, sp, #8
   23e9a:	4604      	mov	r4, r0
   23e9c:	2208      	movs	r2, #8
   23e9e:	2100      	movs	r1, #0
   23ea0:	4638      	mov	r0, r7
   23ea2:	f001 f920 	bl	250e6 <memset>
   23ea6:	2220      	movs	r2, #32
   23ea8:	2100      	movs	r1, #0
   23eaa:	4630      	mov	r0, r6
   23eac:	f001 f91b 	bl	250e6 <memset>
   23eb0:	2220      	movs	r2, #32
   23eb2:	2100      	movs	r1, #0
   23eb4:	4628      	mov	r0, r5
   23eb6:	f001 f916 	bl	250e6 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   23eba:	fab4 f084 	clz	r0, r4
   23ebe:	0940      	lsrs	r0, r0, #5
   23ec0:	b024      	add	sp, #144	; 0x90
   23ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023ec6 <uECC_vli_add>:
{
   23ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   23ec8:	2400      	movs	r4, #0
{
   23eca:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   23ecc:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   23ece:	b265      	sxtb	r5, r4
   23ed0:	42ab      	cmp	r3, r5
   23ed2:	dc00      	bgt.n	23ed6 <uECC_vli_add+0x10>
}
   23ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   23ed6:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   23eda:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   23ede:	443d      	add	r5, r7
   23ee0:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   23ee2:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   23ee4:	bf8c      	ite	hi
   23ee6:	2701      	movhi	r7, #1
   23ee8:	2700      	movls	r7, #0
		result[i] = sum;
   23eea:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   23eee:	bf18      	it	ne
   23ef0:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   23ef2:	3401      	adds	r4, #1
   23ef4:	e7eb      	b.n	23ece <uECC_vli_add+0x8>

00023ef6 <uECC_vli_rshift1>:
	vli += num_words;
   23ef6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   23efa:	2300      	movs	r3, #0
	while (vli-- > end) {
   23efc:	4288      	cmp	r0, r1
   23efe:	d300      	bcc.n	23f02 <uECC_vli_rshift1+0xc>
}
   23f00:	4770      	bx	lr
		uECC_word_t temp = *vli;
   23f02:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   23f06:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   23f0a:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   23f0c:	07d3      	lsls	r3, r2, #31
   23f0e:	e7f5      	b.n	23efc <uECC_vli_rshift1+0x6>

00023f10 <vli_modInv_update>:
	if (!EVEN(uv)) {
   23f10:	6803      	ldr	r3, [r0, #0]
{
   23f12:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   23f14:	f013 0601 	ands.w	r6, r3, #1
{
   23f18:	4605      	mov	r5, r0
   23f1a:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   23f1c:	d005      	beq.n	23f2a <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   23f1e:	4613      	mov	r3, r2
   23f20:	460a      	mov	r2, r1
   23f22:	4601      	mov	r1, r0
   23f24:	f7ff ffcf 	bl	23ec6 <uECC_vli_add>
   23f28:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   23f2a:	4621      	mov	r1, r4
   23f2c:	4628      	mov	r0, r5
   23f2e:	f7ff ffe2 	bl	23ef6 <uECC_vli_rshift1>
	if (carry) {
   23f32:	b146      	cbz	r6, 23f46 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   23f34:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   23f38:	3a01      	subs	r2, #1
   23f3a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   23f3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   23f42:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   23f46:	bd70      	pop	{r4, r5, r6, pc}

00023f48 <uECC_vli_mult>:
{
   23f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   23f4c:	2500      	movs	r5, #0
{
   23f4e:	b087      	sub	sp, #28
   23f50:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   23f54:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   23f56:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   23f58:	fa4f f885 	sxtb.w	r8, r5
   23f5c:	4543      	cmp	r3, r8
   23f5e:	dc16      	bgt.n	23f8e <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   23f60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23f64:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   23f68:	9502      	str	r5, [sp, #8]
   23f6a:	f04f 0a00 	mov.w	sl, #0
   23f6e:	9e02      	ldr	r6, [sp, #8]
   23f70:	fa53 fe8a 	uxtab	lr, r3, sl
   23f74:	fa4f fe8e 	sxtb.w	lr, lr
   23f78:	45b6      	cmp	lr, r6
   23f7a:	fa5f f58a 	uxtb.w	r5, sl
   23f7e:	db2d      	blt.n	23fdc <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   23f80:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   23f84:	f840 2c04 	str.w	r2, [r0, #-4]
}
   23f88:	b007      	add	sp, #28
   23f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f8e:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   23f90:	f04f 0c00 	mov.w	ip, #0
   23f94:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   23f98:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   23f9a:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   23f9e:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   23fa0:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   23fa4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   23fa8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   23fac:	fba7 ab06 	umull	sl, fp, r7, r6
   23fb0:	eb1a 0601 	adds.w	r6, sl, r1
   23fb4:	f10c 0c01 	add.w	ip, ip, #1
   23fb8:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   23fbc:	fa4f fa8c 	sxtb.w	sl, ip
   23fc0:	bf2c      	ite	cs
   23fc2:	2201      	movcs	r2, #1
   23fc4:	2200      	movcc	r2, #0
   23fc6:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   23fc8:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   23fca:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   23fcc:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   23fce:	dde4      	ble.n	23f9a <uECC_vli_mult+0x52>
		result[k] = r0;
   23fd0:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   23fd4:	463a      	mov	r2, r7
   23fd6:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   23fd8:	4674      	mov	r4, lr
   23fda:	e7bd      	b.n	23f58 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   23fdc:	3501      	adds	r5, #1
   23fde:	9900      	ldr	r1, [sp, #0]
   23fe0:	9e01      	ldr	r6, [sp, #4]
   23fe2:	fa4f fc85 	sxtb.w	ip, r5
   23fe6:	ebae 0b0c 	sub.w	fp, lr, ip
   23fea:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   23fee:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   23ff2:	4621      	mov	r1, r4
   23ff4:	2400      	movs	r4, #0
   23ff6:	459c      	cmp	ip, r3
   23ff8:	db05      	blt.n	24006 <uECC_vli_mult+0xbe>
		result[k] = r0;
   23ffa:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   23ffe:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   24002:	460a      	mov	r2, r1
   24004:	e7b3      	b.n	23f6e <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   24006:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2400a:	f855 7b04 	ldr.w	r7, [r5], #4
   2400e:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   24012:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   24016:	fba7 6706 	umull	r6, r7, r7, r6
   2401a:	eb16 0801 	adds.w	r8, r6, r1
   2401e:	eb57 0902 	adcs.w	r9, r7, r2
   24022:	bf2c      	ite	cs
   24024:	2201      	movcs	r2, #1
   24026:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   24028:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   2402c:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   2402e:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   24030:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   24032:	fa4f fc8c 	sxtb.w	ip, ip
   24036:	e7de      	b.n	23ff6 <uECC_vli_mult+0xae>

00024038 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   24038:	2300      	movs	r3, #0
{
   2403a:	b510      	push	{r4, lr}
		 vli[i] = 0;
   2403c:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   2403e:	b25a      	sxtb	r2, r3
   24040:	4291      	cmp	r1, r2
   24042:	dc00      	bgt.n	24046 <uECC_vli_clear+0xe>
}
   24044:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   24046:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2404a:	3301      	adds	r3, #1
   2404c:	e7f7      	b.n	2403e <uECC_vli_clear+0x6>

0002404e <uECC_vli_isZero>:
{
   2404e:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   24050:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   24052:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   24054:	b25c      	sxtb	r4, r3
   24056:	42a1      	cmp	r1, r4
   24058:	dc03      	bgt.n	24062 <uECC_vli_isZero+0x14>
}
   2405a:	fab2 f082 	clz	r0, r2
   2405e:	0940      	lsrs	r0, r0, #5
   24060:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   24062:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   24066:	3301      	adds	r3, #1
   24068:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   2406a:	e7f3      	b.n	24054 <uECC_vli_isZero+0x6>

0002406c <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2406c:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2406e:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   24070:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   24074:	f001 011f 	and.w	r1, r1, #31
   24078:	fa03 f101 	lsl.w	r1, r3, r1
}
   2407c:	4008      	ands	r0, r1
   2407e:	4770      	bx	lr

00024080 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   24080:	3901      	subs	r1, #1
   24082:	b24b      	sxtb	r3, r1
{
   24084:	4602      	mov	r2, r0
   24086:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2408a:	2b00      	cmp	r3, #0
   2408c:	da03      	bge.n	24096 <uECC_vli_numBits+0x16>
	return (i + 1);
   2408e:	3301      	adds	r3, #1
   24090:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   24092:	b938      	cbnz	r0, 240a4 <uECC_vli_numBits+0x24>
   24094:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   24096:	f851 0904 	ldr.w	r0, [r1], #-4
   2409a:	2800      	cmp	r0, #0
   2409c:	d1f7      	bne.n	2408e <uECC_vli_numBits+0xe>
   2409e:	3b01      	subs	r3, #1
   240a0:	b25b      	sxtb	r3, r3
   240a2:	e7f2      	b.n	2408a <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   240a4:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   240a8:	3b01      	subs	r3, #1
   240aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   240ae:	2300      	movs	r3, #0
   240b0:	b922      	cbnz	r2, 240bc <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   240b2:	3801      	subs	r0, #1
   240b4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   240b8:	b200      	sxth	r0, r0
}
   240ba:	4770      	bx	lr
		digit >>= 1;
   240bc:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   240be:	3301      	adds	r3, #1
   240c0:	e7f6      	b.n	240b0 <uECC_vli_numBits+0x30>

000240c2 <uECC_vli_set>:
{
   240c2:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   240c4:	2300      	movs	r3, #0
   240c6:	b25c      	sxtb	r4, r3
   240c8:	42a2      	cmp	r2, r4
   240ca:	dc00      	bgt.n	240ce <uECC_vli_set+0xc>
}
   240cc:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   240ce:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   240d2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   240d6:	3301      	adds	r3, #1
   240d8:	e7f5      	b.n	240c6 <uECC_vli_set+0x4>

000240da <uECC_vli_cmp_unsafe>:
{
   240da:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   240dc:	3a01      	subs	r2, #1
   240de:	b253      	sxtb	r3, r2
   240e0:	009a      	lsls	r2, r3, #2
   240e2:	2b00      	cmp	r3, #0
   240e4:	da01      	bge.n	240ea <uECC_vli_cmp_unsafe+0x10>
	return 0;
   240e6:	2000      	movs	r0, #0
}
   240e8:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   240ea:	5885      	ldr	r5, [r0, r2]
   240ec:	588c      	ldr	r4, [r1, r2]
   240ee:	42a5      	cmp	r5, r4
   240f0:	d805      	bhi.n	240fe <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   240f2:	f1a2 0204 	sub.w	r2, r2, #4
   240f6:	d304      	bcc.n	24102 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   240f8:	3b01      	subs	r3, #1
   240fa:	b25b      	sxtb	r3, r3
   240fc:	e7f1      	b.n	240e2 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   240fe:	2001      	movs	r0, #1
   24100:	e7f2      	b.n	240e8 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   24102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24106:	e7ef      	b.n	240e8 <uECC_vli_cmp_unsafe+0xe>

00024108 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   24108:	3a01      	subs	r2, #1
   2410a:	b253      	sxtb	r3, r2
{
   2410c:	b570      	push	{r4, r5, r6, lr}
   2410e:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   24110:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   24112:	2b00      	cmp	r3, #0
   24114:	da03      	bge.n	2411e <uECC_vli_equal+0x16>
}
   24116:	1e20      	subs	r0, r4, #0
   24118:	bf18      	it	ne
   2411a:	2001      	movne	r0, #1
   2411c:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   2411e:	5885      	ldr	r5, [r0, r2]
   24120:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   24122:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   24124:	4075      	eors	r5, r6
   24126:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   24128:	b25b      	sxtb	r3, r3
   2412a:	3a04      	subs	r2, #4
   2412c:	e7f1      	b.n	24112 <uECC_vli_equal+0xa>

0002412e <uECC_vli_sub>:
{
   2412e:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   24130:	2400      	movs	r4, #0
{
   24132:	4606      	mov	r6, r0
   24134:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   24136:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   24138:	b265      	sxtb	r5, r4
   2413a:	45ac      	cmp	ip, r5
   2413c:	dc00      	bgt.n	24140 <uECC_vli_sub+0x12>
}
   2413e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   24140:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   24144:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   24148:	1a3d      	subs	r5, r7, r0
   2414a:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   2414c:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   2414e:	bf34      	ite	cc
   24150:	2701      	movcc	r7, #1
   24152:	2700      	movcs	r7, #0
		result[i] = diff;
   24154:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   24158:	bf18      	it	ne
   2415a:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   2415c:	3401      	adds	r4, #1
   2415e:	e7eb      	b.n	24138 <uECC_vli_sub+0xa>

00024160 <uECC_vli_modAdd>:
{
   24160:	b570      	push	{r4, r5, r6, lr}
   24162:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   24166:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   24168:	4633      	mov	r3, r6
{
   2416a:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2416c:	f7ff feab 	bl	23ec6 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   24170:	b930      	cbnz	r0, 24180 <uECC_vli_modAdd+0x20>
   24172:	4632      	mov	r2, r6
   24174:	4621      	mov	r1, r4
   24176:	4628      	mov	r0, r5
   24178:	f7ff ffaf 	bl	240da <uECC_vli_cmp_unsafe>
   2417c:	2801      	cmp	r0, #1
   2417e:	d007      	beq.n	24190 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   24180:	4633      	mov	r3, r6
   24182:	462a      	mov	r2, r5
   24184:	4621      	mov	r1, r4
   24186:	4620      	mov	r0, r4
}
   24188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   2418c:	f7ff bfcf 	b.w	2412e <uECC_vli_sub>
}
   24190:	bd70      	pop	{r4, r5, r6, pc}

00024192 <uECC_vli_modSub>:
{
   24192:	b570      	push	{r4, r5, r6, lr}
   24194:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   24198:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   2419a:	4633      	mov	r3, r6
{
   2419c:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   2419e:	f7ff ffc6 	bl	2412e <uECC_vli_sub>
	if (l_borrow) {
   241a2:	b138      	cbz	r0, 241b4 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   241a4:	4633      	mov	r3, r6
   241a6:	462a      	mov	r2, r5
   241a8:	4621      	mov	r1, r4
   241aa:	4620      	mov	r0, r4
}
   241ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   241b0:	f7ff be89 	b.w	23ec6 <uECC_vli_add>
}
   241b4:	bd70      	pop	{r4, r5, r6, pc}

000241b6 <uECC_vli_mmod>:
{
   241b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241ba:	b0a5      	sub	sp, #148	; 0x94
   241bc:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   241be:	ab14      	add	r3, sp, #80	; 0x50
   241c0:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   241c4:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   241c6:	4629      	mov	r1, r5
   241c8:	4610      	mov	r0, r2
{
   241ca:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   241cc:	f7ff ff58 	bl	24080 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   241d0:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   241d4:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   241d6:	2c00      	cmp	r4, #0
   241d8:	4621      	mov	r1, r4
   241da:	bfb8      	it	lt
   241dc:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   241e0:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   241e2:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   241e6:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   241ea:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   241ec:	f004 071f 	and.w	r7, r4, #31
   241f0:	bf58      	it	pl
   241f2:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   241f4:	f7ff ff20 	bl	24038 <uECC_vli_clear>
	if (bit_shift > 0) {
   241f8:	2f00      	cmp	r7, #0
   241fa:	b208      	sxth	r0, r1
   241fc:	dd2b      	ble.n	24256 <uECC_vli_mmod+0xa0>
   241fe:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   24200:	2200      	movs	r2, #0
   24202:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   24206:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2420a:	4613      	mov	r3, r2
   2420c:	429d      	cmp	r5, r3
   2420e:	d817      	bhi.n	24240 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   24210:	006b      	lsls	r3, r5, #1
   24212:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   24214:	ab04      	add	r3, sp, #16
   24216:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2421a:	1e6f      	subs	r7, r5, #1
   2421c:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2421e:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   24220:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   24224:	2c00      	cmp	r4, #0
   24226:	da54      	bge.n	242d2 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   24228:	ab24      	add	r3, sp, #144	; 0x90
   2422a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2422e:	462a      	mov	r2, r5
   24230:	f856 1c88 	ldr.w	r1, [r6, #-136]
   24234:	4640      	mov	r0, r8
   24236:	f7ff ff44 	bl	240c2 <uECC_vli_set>
}
   2423a:	b025      	add	sp, #148	; 0x94
   2423c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   24240:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   24244:	fa0c f007 	lsl.w	r0, ip, r7
   24248:	4302      	orrs	r2, r0
   2424a:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2424e:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   24250:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   24254:	e7da      	b.n	2420c <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   24256:	ab04      	add	r3, sp, #16
   24258:	462a      	mov	r2, r5
   2425a:	4631      	mov	r1, r6
   2425c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   24260:	f7ff ff2f 	bl	240c2 <uECC_vli_set>
   24264:	e7d4      	b.n	24210 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   24266:	fa0f fe82 	sxth.w	lr, r2
   2426a:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   2426e:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   24272:	ab24      	add	r3, sp, #144	; 0x90
   24274:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   24278:	3001      	adds	r0, #1
   2427a:	f852 3c80 	ldr.w	r3, [r2, #-128]
   2427e:	440b      	add	r3, r1
   24280:	ebbb 0303 	subs.w	r3, fp, r3
   24284:	bf34      	ite	cc
   24286:	2201      	movcc	r2, #1
   24288:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   2428a:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   2428c:	bf18      	it	ne
   2428e:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   24290:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   24294:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   24298:	9b01      	ldr	r3, [sp, #4]
   2429a:	b242      	sxtb	r2, r0
   2429c:	429a      	cmp	r2, r3
   2429e:	dbe2      	blt.n	24266 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   242a0:	1a73      	subs	r3, r6, r1
   242a2:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   242a4:	4629      	mov	r1, r5
   242a6:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   242a8:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   242aa:	f7ff fe24 	bl	23ef6 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   242ae:	ab24      	add	r3, sp, #144	; 0x90
   242b0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   242b4:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   242b6:	f853 2c80 	ldr.w	r2, [r3, #-128]
   242ba:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   242be:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   242c0:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   242c4:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   242c6:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   242ca:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   242cc:	f7ff fe13 	bl	23ef6 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   242d0:	e7a8      	b.n	24224 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   242d2:	ab24      	add	r3, sp, #144	; 0x90
   242d4:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   242d6:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   242da:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   242dc:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   242e0:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   242e4:	e7d8      	b.n	24298 <uECC_vli_mmod+0xe2>

000242e6 <uECC_vli_modMult_fast>:
{
   242e6:	b530      	push	{r4, r5, lr}
   242e8:	461c      	mov	r4, r3
   242ea:	b091      	sub	sp, #68	; 0x44
   242ec:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   242ee:	f993 3000 	ldrsb.w	r3, [r3]
   242f2:	4668      	mov	r0, sp
   242f4:	f7ff fe28 	bl	23f48 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   242f8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   242fc:	4669      	mov	r1, sp
   242fe:	4628      	mov	r0, r5
   24300:	4798      	blx	r3
}
   24302:	b011      	add	sp, #68	; 0x44
   24304:	bd30      	pop	{r4, r5, pc}

00024306 <uECC_vli_modSquare_fast>:
{
   24306:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   24308:	460a      	mov	r2, r1
   2430a:	f7ff bfec 	b.w	242e6 <uECC_vli_modMult_fast>

0002430e <double_jacobian_default>:
{
   2430e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   24312:	f993 6000 	ldrsb.w	r6, [r3]
{
   24316:	b092      	sub	sp, #72	; 0x48
   24318:	4604      	mov	r4, r0
   2431a:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   2431c:	4610      	mov	r0, r2
   2431e:	4631      	mov	r1, r6
{
   24320:	4615      	mov	r5, r2
   24322:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   24324:	f7ff fe93 	bl	2404e <uECC_vli_isZero>
   24328:	2800      	cmp	r0, #0
   2432a:	f040 8091 	bne.w	24450 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   2432e:	463a      	mov	r2, r7
   24330:	4649      	mov	r1, r9
   24332:	a802      	add	r0, sp, #8
   24334:	f7ff ffe7 	bl	24306 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   24338:	463b      	mov	r3, r7
   2433a:	aa02      	add	r2, sp, #8
   2433c:	4621      	mov	r1, r4
   2433e:	a80a      	add	r0, sp, #40	; 0x28
   24340:	f7ff ffd1 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   24344:	a902      	add	r1, sp, #8
   24346:	4608      	mov	r0, r1
   24348:	463a      	mov	r2, r7
   2434a:	f7ff ffdc 	bl	24306 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   2434e:	463b      	mov	r3, r7
   24350:	462a      	mov	r2, r5
   24352:	4649      	mov	r1, r9
   24354:	4648      	mov	r0, r9
   24356:	f7ff ffc6 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   2435a:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   2435e:	463a      	mov	r2, r7
   24360:	4629      	mov	r1, r5
   24362:	4628      	mov	r0, r5
   24364:	f7ff ffcf 	bl	24306 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   24368:	4643      	mov	r3, r8
   2436a:	462a      	mov	r2, r5
   2436c:	4621      	mov	r1, r4
   2436e:	4620      	mov	r0, r4
   24370:	9600      	str	r6, [sp, #0]
   24372:	f7ff fef5 	bl	24160 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   24376:	4643      	mov	r3, r8
   24378:	462a      	mov	r2, r5
   2437a:	4629      	mov	r1, r5
   2437c:	4628      	mov	r0, r5
   2437e:	9600      	str	r6, [sp, #0]
   24380:	f7ff feee 	bl	24160 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   24384:	4643      	mov	r3, r8
   24386:	462a      	mov	r2, r5
   24388:	4621      	mov	r1, r4
   2438a:	4628      	mov	r0, r5
   2438c:	9600      	str	r6, [sp, #0]
   2438e:	f7ff ff00 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   24392:	463b      	mov	r3, r7
   24394:	462a      	mov	r2, r5
   24396:	4621      	mov	r1, r4
   24398:	4620      	mov	r0, r4
   2439a:	f7ff ffa4 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   2439e:	4643      	mov	r3, r8
   243a0:	4622      	mov	r2, r4
   243a2:	4621      	mov	r1, r4
   243a4:	4628      	mov	r0, r5
   243a6:	9600      	str	r6, [sp, #0]
   243a8:	f7ff feda 	bl	24160 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   243ac:	4643      	mov	r3, r8
   243ae:	9600      	str	r6, [sp, #0]
   243b0:	462a      	mov	r2, r5
   243b2:	4621      	mov	r1, r4
   243b4:	4620      	mov	r0, r4
   243b6:	f7ff fed3 	bl	24160 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   243ba:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   243bc:	07db      	lsls	r3, r3, #31
   243be:	d54a      	bpl.n	24456 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   243c0:	4633      	mov	r3, r6
   243c2:	4642      	mov	r2, r8
   243c4:	4621      	mov	r1, r4
   243c6:	4620      	mov	r0, r4
   243c8:	f7ff fd7d 	bl	23ec6 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   243cc:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   243ce:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   243d0:	4620      	mov	r0, r4
   243d2:	f7ff fd90 	bl	23ef6 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   243d6:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   243da:	3b01      	subs	r3, #1
   243dc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   243e0:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   243e4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   243e8:	463a      	mov	r2, r7
   243ea:	4621      	mov	r1, r4
   243ec:	4628      	mov	r0, r5
   243ee:	f7ff ff8a 	bl	24306 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   243f2:	4643      	mov	r3, r8
   243f4:	aa0a      	add	r2, sp, #40	; 0x28
   243f6:	4629      	mov	r1, r5
   243f8:	4628      	mov	r0, r5
   243fa:	9600      	str	r6, [sp, #0]
   243fc:	f7ff fec9 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   24400:	4643      	mov	r3, r8
   24402:	aa0a      	add	r2, sp, #40	; 0x28
   24404:	4629      	mov	r1, r5
   24406:	4628      	mov	r0, r5
   24408:	9600      	str	r6, [sp, #0]
   2440a:	f7ff fec2 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   2440e:	a90a      	add	r1, sp, #40	; 0x28
   24410:	4608      	mov	r0, r1
   24412:	4643      	mov	r3, r8
   24414:	462a      	mov	r2, r5
   24416:	9600      	str	r6, [sp, #0]
   24418:	f7ff febb 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   2441c:	463b      	mov	r3, r7
   2441e:	aa0a      	add	r2, sp, #40	; 0x28
   24420:	4621      	mov	r1, r4
   24422:	4620      	mov	r0, r4
   24424:	f7ff ff5f 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   24428:	aa02      	add	r2, sp, #8
   2442a:	4643      	mov	r3, r8
   2442c:	4610      	mov	r0, r2
   2442e:	4621      	mov	r1, r4
   24430:	9600      	str	r6, [sp, #0]
   24432:	f7ff feae 	bl	24192 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   24436:	4632      	mov	r2, r6
   24438:	4629      	mov	r1, r5
   2443a:	4620      	mov	r0, r4
   2443c:	f7ff fe41 	bl	240c2 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   24440:	4649      	mov	r1, r9
   24442:	4628      	mov	r0, r5
   24444:	f7ff fe3d 	bl	240c2 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   24448:	a902      	add	r1, sp, #8
   2444a:	4648      	mov	r0, r9
   2444c:	f7ff fe39 	bl	240c2 <uECC_vli_set>
}
   24450:	b012      	add	sp, #72	; 0x48
   24452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   24456:	4631      	mov	r1, r6
   24458:	4620      	mov	r0, r4
   2445a:	f7ff fd4c 	bl	23ef6 <uECC_vli_rshift1>
   2445e:	e7c3      	b.n	243e8 <double_jacobian_default+0xda>

00024460 <x_side_default>:
{
   24460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24464:	4615      	mov	r5, r2
   24466:	b08a      	sub	sp, #40	; 0x28
   24468:	4604      	mov	r4, r0
   2446a:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2446c:	221c      	movs	r2, #28
   2446e:	2100      	movs	r1, #0
   24470:	a803      	add	r0, sp, #12
   24472:	f000 fe38 	bl	250e6 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   24476:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   24478:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2447c:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   2447e:	462a      	mov	r2, r5
   24480:	4631      	mov	r1, r6
   24482:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   24484:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   24486:	f7ff ff3e 	bl	24306 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2448a:	463b      	mov	r3, r7
   2448c:	aa02      	add	r2, sp, #8
   2448e:	4621      	mov	r1, r4
   24490:	4620      	mov	r0, r4
   24492:	f8cd 8000 	str.w	r8, [sp]
   24496:	f7ff fe7c 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   2449a:	462b      	mov	r3, r5
   2449c:	4632      	mov	r2, r6
   2449e:	4621      	mov	r1, r4
   244a0:	4620      	mov	r0, r4
   244a2:	f7ff ff20 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   244a6:	f8cd 8000 	str.w	r8, [sp]
   244aa:	463b      	mov	r3, r7
   244ac:	f105 0284 	add.w	r2, r5, #132	; 0x84
   244b0:	4621      	mov	r1, r4
   244b2:	4620      	mov	r0, r4
   244b4:	f7ff fe54 	bl	24160 <uECC_vli_modAdd>
}
   244b8:	b00a      	add	sp, #40	; 0x28
   244ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000244be <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   244be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   244c2:	b09a      	sub	sp, #104	; 0x68
   244c4:	4616      	mov	r6, r2
   244c6:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   244ca:	4644      	mov	r4, r8
{
   244cc:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   244ce:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   244d2:	9500      	str	r5, [sp, #0]
{
   244d4:	4607      	mov	r7, r0
   244d6:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   244d8:	4623      	mov	r3, r4
   244da:	4602      	mov	r2, r0
   244dc:	4631      	mov	r1, r6
   244de:	a802      	add	r0, sp, #8
   244e0:	f7ff fe57 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   244e4:	a902      	add	r1, sp, #8
   244e6:	4642      	mov	r2, r8
   244e8:	4608      	mov	r0, r1
   244ea:	f7ff ff0c 	bl	24306 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   244ee:	4643      	mov	r3, r8
   244f0:	aa02      	add	r2, sp, #8
   244f2:	4639      	mov	r1, r7
   244f4:	4638      	mov	r0, r7
   244f6:	f7ff fef6 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   244fa:	4643      	mov	r3, r8
   244fc:	aa02      	add	r2, sp, #8
   244fe:	4631      	mov	r1, r6
   24500:	4630      	mov	r0, r6
   24502:	f7ff fef0 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   24506:	4623      	mov	r3, r4
   24508:	4652      	mov	r2, sl
   2450a:	4649      	mov	r1, r9
   2450c:	a802      	add	r0, sp, #8
   2450e:	9500      	str	r5, [sp, #0]
   24510:	f7ff fe26 	bl	24160 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   24514:	4623      	mov	r3, r4
   24516:	4652      	mov	r2, sl
   24518:	4649      	mov	r1, r9
   2451a:	4648      	mov	r0, r9
   2451c:	9500      	str	r5, [sp, #0]
   2451e:	f7ff fe38 	bl	24192 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   24522:	4623      	mov	r3, r4
   24524:	463a      	mov	r2, r7
   24526:	4631      	mov	r1, r6
   24528:	a80a      	add	r0, sp, #40	; 0x28
   2452a:	9500      	str	r5, [sp, #0]
   2452c:	f7ff fe31 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   24530:	4643      	mov	r3, r8
   24532:	aa0a      	add	r2, sp, #40	; 0x28
   24534:	4651      	mov	r1, sl
   24536:	4650      	mov	r0, sl
   24538:	f7ff fed5 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   2453c:	4623      	mov	r3, r4
   2453e:	4632      	mov	r2, r6
   24540:	4639      	mov	r1, r7
   24542:	a80a      	add	r0, sp, #40	; 0x28
   24544:	9500      	str	r5, [sp, #0]
   24546:	f7ff fe0b 	bl	24160 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   2454a:	4642      	mov	r2, r8
   2454c:	4649      	mov	r1, r9
   2454e:	4630      	mov	r0, r6
   24550:	f7ff fed9 	bl	24306 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   24554:	4623      	mov	r3, r4
   24556:	aa0a      	add	r2, sp, #40	; 0x28
   24558:	4631      	mov	r1, r6
   2455a:	4630      	mov	r0, r6
   2455c:	9500      	str	r5, [sp, #0]
   2455e:	f7ff fe18 	bl	24192 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   24562:	4623      	mov	r3, r4
   24564:	4632      	mov	r2, r6
   24566:	4639      	mov	r1, r7
   24568:	a812      	add	r0, sp, #72	; 0x48
   2456a:	9500      	str	r5, [sp, #0]
   2456c:	f7ff fe11 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   24570:	4643      	mov	r3, r8
   24572:	aa12      	add	r2, sp, #72	; 0x48
   24574:	4649      	mov	r1, r9
   24576:	4648      	mov	r0, r9
   24578:	f7ff feb5 	bl	242e6 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   2457c:	4623      	mov	r3, r4
   2457e:	4652      	mov	r2, sl
   24580:	4649      	mov	r1, r9
   24582:	4648      	mov	r0, r9
   24584:	9500      	str	r5, [sp, #0]
   24586:	f7ff fe04 	bl	24192 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   2458a:	4642      	mov	r2, r8
   2458c:	a902      	add	r1, sp, #8
   2458e:	a812      	add	r0, sp, #72	; 0x48
   24590:	f7ff feb9 	bl	24306 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   24594:	a912      	add	r1, sp, #72	; 0x48
   24596:	4623      	mov	r3, r4
   24598:	aa0a      	add	r2, sp, #40	; 0x28
   2459a:	4608      	mov	r0, r1
   2459c:	9500      	str	r5, [sp, #0]
   2459e:	f7ff fdf8 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   245a2:	4623      	mov	r3, r4
   245a4:	463a      	mov	r2, r7
   245a6:	a912      	add	r1, sp, #72	; 0x48
   245a8:	a80a      	add	r0, sp, #40	; 0x28
   245aa:	9500      	str	r5, [sp, #0]
   245ac:	f7ff fdf1 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   245b0:	a90a      	add	r1, sp, #40	; 0x28
   245b2:	4643      	mov	r3, r8
   245b4:	aa02      	add	r2, sp, #8
   245b6:	4608      	mov	r0, r1
   245b8:	f7ff fe95 	bl	242e6 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   245bc:	4623      	mov	r3, r4
   245be:	4652      	mov	r2, sl
   245c0:	a90a      	add	r1, sp, #40	; 0x28
   245c2:	4650      	mov	r0, sl
   245c4:	9500      	str	r5, [sp, #0]
   245c6:	f7ff fde4 	bl	24192 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   245ca:	462a      	mov	r2, r5
   245cc:	a912      	add	r1, sp, #72	; 0x48
   245ce:	4638      	mov	r0, r7
   245d0:	f7ff fd77 	bl	240c2 <uECC_vli_set>
}
   245d4:	b01a      	add	sp, #104	; 0x68
   245d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000245da <uECC_vli_modInv>:
{
   245da:	b5f0      	push	{r4, r5, r6, r7, lr}
   245dc:	460f      	mov	r7, r1
   245de:	b0a1      	sub	sp, #132	; 0x84
   245e0:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   245e2:	4619      	mov	r1, r3
   245e4:	4638      	mov	r0, r7
{
   245e6:	4615      	mov	r5, r2
   245e8:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   245ea:	f7ff fd30 	bl	2404e <uECC_vli_isZero>
   245ee:	b120      	cbz	r0, 245fa <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   245f0:	4630      	mov	r0, r6
   245f2:	f7ff fd21 	bl	24038 <uECC_vli_clear>
}
   245f6:	b021      	add	sp, #132	; 0x84
   245f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   245fa:	4622      	mov	r2, r4
   245fc:	4639      	mov	r1, r7
   245fe:	4668      	mov	r0, sp
   24600:	f7ff fd5f 	bl	240c2 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   24604:	4629      	mov	r1, r5
   24606:	a808      	add	r0, sp, #32
   24608:	f7ff fd5b 	bl	240c2 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   2460c:	a810      	add	r0, sp, #64	; 0x40
   2460e:	4621      	mov	r1, r4
   24610:	f7ff fd12 	bl	24038 <uECC_vli_clear>
	u[0] = 1;
   24614:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   24616:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   24618:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   2461a:	f7ff fd0d 	bl	24038 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   2461e:	4622      	mov	r2, r4
   24620:	a908      	add	r1, sp, #32
   24622:	4668      	mov	r0, sp
   24624:	f7ff fd59 	bl	240da <uECC_vli_cmp_unsafe>
   24628:	b928      	cbnz	r0, 24636 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   2462a:	4622      	mov	r2, r4
   2462c:	a910      	add	r1, sp, #64	; 0x40
   2462e:	4630      	mov	r0, r6
   24630:	f7ff fd47 	bl	240c2 <uECC_vli_set>
   24634:	e7df      	b.n	245f6 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   24636:	9b00      	ldr	r3, [sp, #0]
   24638:	07da      	lsls	r2, r3, #31
   2463a:	d409      	bmi.n	24650 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   2463c:	4621      	mov	r1, r4
   2463e:	4668      	mov	r0, sp
   24640:	f7ff fc59 	bl	23ef6 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   24644:	4622      	mov	r2, r4
   24646:	4629      	mov	r1, r5
   24648:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   2464a:	f7ff fc61 	bl	23f10 <vli_modInv_update>
   2464e:	e7e6      	b.n	2461e <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   24650:	9b08      	ldr	r3, [sp, #32]
   24652:	07db      	lsls	r3, r3, #31
   24654:	d407      	bmi.n	24666 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   24656:	4621      	mov	r1, r4
   24658:	a808      	add	r0, sp, #32
   2465a:	f7ff fc4c 	bl	23ef6 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   2465e:	4622      	mov	r2, r4
   24660:	4629      	mov	r1, r5
   24662:	a818      	add	r0, sp, #96	; 0x60
   24664:	e7f1      	b.n	2464a <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   24666:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   24668:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   2466a:	dd1c      	ble.n	246a6 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   2466c:	aa08      	add	r2, sp, #32
   2466e:	4669      	mov	r1, sp
   24670:	4668      	mov	r0, sp
   24672:	f7ff fd5c 	bl	2412e <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   24676:	4621      	mov	r1, r4
   24678:	4668      	mov	r0, sp
   2467a:	f7ff fc3c 	bl	23ef6 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   2467e:	4622      	mov	r2, r4
   24680:	a918      	add	r1, sp, #96	; 0x60
   24682:	a810      	add	r0, sp, #64	; 0x40
   24684:	f7ff fd29 	bl	240da <uECC_vli_cmp_unsafe>
   24688:	2800      	cmp	r0, #0
   2468a:	da05      	bge.n	24698 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   2468c:	a910      	add	r1, sp, #64	; 0x40
   2468e:	4623      	mov	r3, r4
   24690:	462a      	mov	r2, r5
   24692:	4608      	mov	r0, r1
   24694:	f7ff fc17 	bl	23ec6 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   24698:	a910      	add	r1, sp, #64	; 0x40
   2469a:	4623      	mov	r3, r4
   2469c:	aa18      	add	r2, sp, #96	; 0x60
   2469e:	4608      	mov	r0, r1
   246a0:	f7ff fd45 	bl	2412e <uECC_vli_sub>
   246a4:	e7ce      	b.n	24644 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   246a6:	a908      	add	r1, sp, #32
   246a8:	466a      	mov	r2, sp
   246aa:	4608      	mov	r0, r1
   246ac:	f7ff fd3f 	bl	2412e <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   246b0:	4621      	mov	r1, r4
   246b2:	a808      	add	r0, sp, #32
   246b4:	f7ff fc1f 	bl	23ef6 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   246b8:	4622      	mov	r2, r4
   246ba:	a910      	add	r1, sp, #64	; 0x40
   246bc:	a818      	add	r0, sp, #96	; 0x60
   246be:	f7ff fd0c 	bl	240da <uECC_vli_cmp_unsafe>
   246c2:	2800      	cmp	r0, #0
   246c4:	da05      	bge.n	246d2 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   246c6:	a918      	add	r1, sp, #96	; 0x60
   246c8:	4623      	mov	r3, r4
   246ca:	462a      	mov	r2, r5
   246cc:	4608      	mov	r0, r1
   246ce:	f7ff fbfa 	bl	23ec6 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   246d2:	a918      	add	r1, sp, #96	; 0x60
   246d4:	4623      	mov	r3, r4
   246d6:	aa10      	add	r2, sp, #64	; 0x40
   246d8:	4608      	mov	r0, r1
   246da:	f7ff fd28 	bl	2412e <uECC_vli_sub>
   246de:	e7be      	b.n	2465e <uECC_vli_modInv+0x84>

000246e0 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   246e0:	7809      	ldrb	r1, [r1, #0]
   246e2:	0049      	lsls	r1, r1, #1
   246e4:	b249      	sxtb	r1, r1
   246e6:	f7ff bcb2 	b.w	2404e <uECC_vli_isZero>

000246ea <apply_z>:
{
   246ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   246ec:	4615      	mov	r5, r2
   246ee:	b089      	sub	sp, #36	; 0x24
   246f0:	461c      	mov	r4, r3
   246f2:	4607      	mov	r7, r0
   246f4:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   246f6:	461a      	mov	r2, r3
   246f8:	4629      	mov	r1, r5
   246fa:	4668      	mov	r0, sp
   246fc:	f7ff fe03 	bl	24306 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   24700:	4623      	mov	r3, r4
   24702:	466a      	mov	r2, sp
   24704:	4639      	mov	r1, r7
   24706:	4638      	mov	r0, r7
   24708:	f7ff fded 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   2470c:	4623      	mov	r3, r4
   2470e:	462a      	mov	r2, r5
   24710:	4669      	mov	r1, sp
   24712:	4668      	mov	r0, sp
   24714:	f7ff fde7 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   24718:	4623      	mov	r3, r4
   2471a:	466a      	mov	r2, sp
   2471c:	4631      	mov	r1, r6
   2471e:	4630      	mov	r0, r6
   24720:	f7ff fde1 	bl	242e6 <uECC_vli_modMult_fast>
}
   24724:	b009      	add	sp, #36	; 0x24
   24726:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024728 <XYcZ_add>:
{
   24728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2472c:	b08a      	sub	sp, #40	; 0x28
   2472e:	4614      	mov	r4, r2
   24730:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   24734:	4655      	mov	r5, sl
{
   24736:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   24738:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2473c:	9600      	str	r6, [sp, #0]
{
   2473e:	4680      	mov	r8, r0
   24740:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   24742:	462b      	mov	r3, r5
   24744:	4602      	mov	r2, r0
   24746:	4621      	mov	r1, r4
   24748:	a802      	add	r0, sp, #8
   2474a:	f7ff fd22 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2474e:	a902      	add	r1, sp, #8
   24750:	4652      	mov	r2, sl
   24752:	4608      	mov	r0, r1
   24754:	f7ff fdd7 	bl	24306 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   24758:	4653      	mov	r3, sl
   2475a:	aa02      	add	r2, sp, #8
   2475c:	4641      	mov	r1, r8
   2475e:	4640      	mov	r0, r8
   24760:	f7ff fdc1 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   24764:	4653      	mov	r3, sl
   24766:	aa02      	add	r2, sp, #8
   24768:	4621      	mov	r1, r4
   2476a:	4620      	mov	r0, r4
   2476c:	f7ff fdbb 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   24770:	462b      	mov	r3, r5
   24772:	464a      	mov	r2, r9
   24774:	4639      	mov	r1, r7
   24776:	4638      	mov	r0, r7
   24778:	9600      	str	r6, [sp, #0]
   2477a:	f7ff fd0a 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   2477e:	4652      	mov	r2, sl
   24780:	4639      	mov	r1, r7
   24782:	a802      	add	r0, sp, #8
   24784:	f7ff fdbf 	bl	24306 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   24788:	a902      	add	r1, sp, #8
   2478a:	462b      	mov	r3, r5
   2478c:	4642      	mov	r2, r8
   2478e:	4608      	mov	r0, r1
   24790:	9600      	str	r6, [sp, #0]
   24792:	f7ff fcfe 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   24796:	a902      	add	r1, sp, #8
   24798:	462b      	mov	r3, r5
   2479a:	4622      	mov	r2, r4
   2479c:	4608      	mov	r0, r1
   2479e:	9600      	str	r6, [sp, #0]
   247a0:	f7ff fcf7 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   247a4:	462b      	mov	r3, r5
   247a6:	4642      	mov	r2, r8
   247a8:	4621      	mov	r1, r4
   247aa:	4620      	mov	r0, r4
   247ac:	9600      	str	r6, [sp, #0]
   247ae:	f7ff fcf0 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   247b2:	4653      	mov	r3, sl
   247b4:	4622      	mov	r2, r4
   247b6:	4649      	mov	r1, r9
   247b8:	4648      	mov	r0, r9
   247ba:	f7ff fd94 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   247be:	462b      	mov	r3, r5
   247c0:	aa02      	add	r2, sp, #8
   247c2:	4641      	mov	r1, r8
   247c4:	4620      	mov	r0, r4
   247c6:	9600      	str	r6, [sp, #0]
   247c8:	f7ff fce3 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   247cc:	4653      	mov	r3, sl
   247ce:	4622      	mov	r2, r4
   247d0:	4639      	mov	r1, r7
   247d2:	4638      	mov	r0, r7
   247d4:	f7ff fd87 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   247d8:	462b      	mov	r3, r5
   247da:	464a      	mov	r2, r9
   247dc:	4639      	mov	r1, r7
   247de:	4638      	mov	r0, r7
   247e0:	9600      	str	r6, [sp, #0]
   247e2:	f7ff fcd6 	bl	24192 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   247e6:	4632      	mov	r2, r6
   247e8:	a902      	add	r1, sp, #8
   247ea:	4620      	mov	r0, r4
   247ec:	f7ff fc69 	bl	240c2 <uECC_vli_set>
}
   247f0:	b00a      	add	sp, #40	; 0x28
   247f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000247f6 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   247f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   247fa:	b0b1      	sub	sp, #196	; 0xc4
   247fc:	e9cd 0103 	strd	r0, r1, [sp, #12]
   24800:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   24802:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   24806:	a818      	add	r0, sp, #96	; 0x60
{
   24808:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   2480a:	463a      	mov	r2, r7
{
   2480c:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   2480e:	f7ff fc58 	bl	240c2 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   24812:	00bb      	lsls	r3, r7, #2
   24814:	9305      	str	r3, [sp, #20]
   24816:	9b04      	ldr	r3, [sp, #16]
   24818:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   2481c:	4619      	mov	r1, r3
   2481e:	a828      	add	r0, sp, #160	; 0xa0
   24820:	9302      	str	r3, [sp, #8]
   24822:	f7ff fc4e 	bl	240c2 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   24826:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   2482a:	2e00      	cmp	r6, #0
   2482c:	f000 8088 	beq.w	24940 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   24830:	462a      	mov	r2, r5
   24832:	4631      	mov	r1, r6
   24834:	a808      	add	r0, sp, #32
   24836:	f7ff fc44 	bl	240c2 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   2483a:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2483e:	462a      	mov	r2, r5
   24840:	a918      	add	r1, sp, #96	; 0x60
   24842:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   24844:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   24848:	f7ff fc3b 	bl	240c2 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   2484c:	a928      	add	r1, sp, #160	; 0xa0
   2484e:	4648      	mov	r0, r9
   24850:	f7ff fc37 	bl	240c2 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   24854:	4623      	mov	r3, r4
   24856:	aa08      	add	r2, sp, #32
   24858:	a928      	add	r1, sp, #160	; 0xa0
   2485a:	a818      	add	r0, sp, #96	; 0x60
   2485c:	f7ff ff45 	bl	246ea <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   24860:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   24864:	4623      	mov	r3, r4
   24866:	aa08      	add	r2, sp, #32
   24868:	a928      	add	r1, sp, #160	; 0xa0
   2486a:	a818      	add	r0, sp, #96	; 0x60
   2486c:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   2486e:	4623      	mov	r3, r4
   24870:	aa08      	add	r2, sp, #32
   24872:	4649      	mov	r1, r9
   24874:	4640      	mov	r0, r8
   24876:	f7ff ff38 	bl	246ea <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   2487a:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   2487e:	3d02      	subs	r5, #2
   24880:	b22d      	sxth	r5, r5
   24882:	2d00      	cmp	r5, #0
   24884:	dc63      	bgt.n	2494e <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   24886:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2488a:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2488c:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   24890:	ab10      	add	r3, sp, #64	; 0x40
   24892:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   24896:	43ed      	mvns	r5, r5
   24898:	ab20      	add	r3, sp, #128	; 0x80
   2489a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   2489e:	f005 0501 	and.w	r5, r5, #1
   248a2:	ab10      	add	r3, sp, #64	; 0x40
   248a4:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   248a8:	ab20      	add	r3, sp, #128	; 0x80
   248aa:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   248ae:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   248b2:	462b      	mov	r3, r5
   248b4:	464a      	mov	r2, r9
   248b6:	4631      	mov	r1, r6
   248b8:	4640      	mov	r0, r8
   248ba:	f7ff fe00 	bl	244be <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   248be:	4653      	mov	r3, sl
   248c0:	aa10      	add	r2, sp, #64	; 0x40
   248c2:	a918      	add	r1, sp, #96	; 0x60
   248c4:	a808      	add	r0, sp, #32
   248c6:	9700      	str	r7, [sp, #0]
   248c8:	f7ff fc63 	bl	24192 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   248cc:	a908      	add	r1, sp, #32
   248ce:	4623      	mov	r3, r4
   248d0:	4632      	mov	r2, r6
   248d2:	4608      	mov	r0, r1
   248d4:	f7ff fd07 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   248d8:	a908      	add	r1, sp, #32
   248da:	9a04      	ldr	r2, [sp, #16]
   248dc:	4623      	mov	r3, r4
   248de:	4608      	mov	r0, r1
   248e0:	f7ff fd01 	bl	242e6 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   248e4:	a908      	add	r1, sp, #32
   248e6:	463b      	mov	r3, r7
   248e8:	4652      	mov	r2, sl
   248ea:	4608      	mov	r0, r1
   248ec:	f7ff fe75 	bl	245da <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   248f0:	a908      	add	r1, sp, #32
   248f2:	9a02      	ldr	r2, [sp, #8]
   248f4:	4623      	mov	r3, r4
   248f6:	4608      	mov	r0, r1
   248f8:	f7ff fcf5 	bl	242e6 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   248fc:	a908      	add	r1, sp, #32
   248fe:	4623      	mov	r3, r4
   24900:	4642      	mov	r2, r8
   24902:	4608      	mov	r0, r1
   24904:	f7ff fcef 	bl	242e6 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   24908:	9400      	str	r4, [sp, #0]
   2490a:	4633      	mov	r3, r6
   2490c:	4642      	mov	r2, r8
   2490e:	4629      	mov	r1, r5
   24910:	4648      	mov	r0, r9
   24912:	f7ff ff09 	bl	24728 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   24916:	4623      	mov	r3, r4
   24918:	aa08      	add	r2, sp, #32
   2491a:	a920      	add	r1, sp, #128	; 0x80
   2491c:	a810      	add	r0, sp, #64	; 0x40
   2491e:	f7ff fee4 	bl	246ea <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   24922:	9803      	ldr	r0, [sp, #12]
   24924:	463a      	mov	r2, r7
   24926:	a910      	add	r1, sp, #64	; 0x40
   24928:	f7ff fbcb 	bl	240c2 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   2492c:	9b03      	ldr	r3, [sp, #12]
   2492e:	9c05      	ldr	r4, [sp, #20]
   24930:	4423      	add	r3, r4
   24932:	a920      	add	r1, sp, #128	; 0x80
   24934:	4618      	mov	r0, r3
   24936:	f7ff fbc4 	bl	240c2 <uECC_vli_set>
}
   2493a:	b031      	add	sp, #196	; 0xc4
   2493c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   24940:	4629      	mov	r1, r5
   24942:	a808      	add	r0, sp, #32
   24944:	f7ff fb78 	bl	24038 <uECC_vli_clear>
		z[0] = 1;
   24948:	2301      	movs	r3, #1
   2494a:	9308      	str	r3, [sp, #32]
   2494c:	e775      	b.n	2483a <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   2494e:	4629      	mov	r1, r5
   24950:	4650      	mov	r0, sl
   24952:	f7ff fb8b 	bl	2406c <uECC_vli_testBit>
   24956:	fab0 f680 	clz	r6, r0
   2495a:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2495c:	f1c6 0101 	rsb	r1, r6, #1
   24960:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   24964:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   24968:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   2496c:	4633      	mov	r3, r6
   2496e:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   24972:	465a      	mov	r2, fp
   24974:	9400      	str	r4, [sp, #0]
   24976:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2497a:	f7ff fda0 	bl	244be <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2497e:	9907      	ldr	r1, [sp, #28]
   24980:	9806      	ldr	r0, [sp, #24]
   24982:	9400      	str	r4, [sp, #0]
   24984:	460b      	mov	r3, r1
   24986:	4602      	mov	r2, r0
   24988:	4631      	mov	r1, r6
   2498a:	4658      	mov	r0, fp
   2498c:	f7ff fecc 	bl	24728 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   24990:	3d01      	subs	r5, #1
   24992:	e775      	b.n	24880 <EccPoint_mult+0x8a>

00024994 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   24994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   24998:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   2499c:	f119 081f 	adds.w	r8, r9, #31
{
   249a0:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   249a2:	bf48      	it	mi
   249a4:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   249a8:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   249aa:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   249ae:	3524      	adds	r5, #36	; 0x24
   249b0:	4601      	mov	r1, r0
{
   249b2:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   249b4:	4643      	mov	r3, r8
   249b6:	462a      	mov	r2, r5
   249b8:	4630      	mov	r0, r6
   249ba:	f7ff fa84 	bl	23ec6 <uECC_vli_add>
   249be:	4604      	mov	r4, r0
   249c0:	b990      	cbnz	r0, 249e8 <regularize_k+0x54>
   249c2:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   249c6:	da06      	bge.n	249d6 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   249c8:	4649      	mov	r1, r9
   249ca:	4630      	mov	r0, r6
   249cc:	f7ff fb4e 	bl	2406c <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   249d0:	1e04      	subs	r4, r0, #0
   249d2:	bf18      	it	ne
   249d4:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   249d6:	4643      	mov	r3, r8
   249d8:	462a      	mov	r2, r5
   249da:	4631      	mov	r1, r6
   249dc:	4638      	mov	r0, r7
   249de:	f7ff fa72 	bl	23ec6 <uECC_vli_add>

	return carry;
}
   249e2:	4620      	mov	r0, r4
   249e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   249e8:	2401      	movs	r4, #1
   249ea:	e7f4      	b.n	249d6 <regularize_k+0x42>

000249ec <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   249ec:	b530      	push	{r4, r5, lr}
   249ee:	4614      	mov	r4, r2
   249f0:	b095      	sub	sp, #84	; 0x54
   249f2:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   249f4:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   249f6:	4623      	mov	r3, r4
{
   249f8:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   249fa:	a904      	add	r1, sp, #16
   249fc:	9102      	str	r1, [sp, #8]
   249fe:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   24a00:	f7ff ffc8 	bl	24994 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   24a04:	fab0 f380 	clz	r3, r0
   24a08:	095b      	lsrs	r3, r3, #5
   24a0a:	aa14      	add	r2, sp, #80	; 0x50
   24a0c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   24a10:	8863      	ldrh	r3, [r4, #2]
   24a12:	9401      	str	r4, [sp, #4]
   24a14:	3301      	adds	r3, #1
   24a16:	b21b      	sxth	r3, r3
   24a18:	9300      	str	r3, [sp, #0]
   24a1a:	f852 2c48 	ldr.w	r2, [r2, #-72]
   24a1e:	2300      	movs	r3, #0
   24a20:	f104 0144 	add.w	r1, r4, #68	; 0x44
   24a24:	4628      	mov	r0, r5
   24a26:	f7ff fee6 	bl	247f6 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   24a2a:	4621      	mov	r1, r4
   24a2c:	4628      	mov	r0, r5
   24a2e:	f7ff fe57 	bl	246e0 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   24a32:	fab0 f080 	clz	r0, r0
   24a36:	0940      	lsrs	r0, r0, #5
   24a38:	b015      	add	sp, #84	; 0x54
   24a3a:	bd30      	pop	{r4, r5, pc}

00024a3c <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   24a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   24a3e:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   24a40:	1e4f      	subs	r7, r1, #1
   24a42:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   24a44:	428c      	cmp	r4, r1
   24a46:	f105 0501 	add.w	r5, r5, #1
   24a4a:	db00      	blt.n	24a4e <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   24a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   24a4e:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   24a50:	f023 0603 	bic.w	r6, r3, #3
   24a54:	f003 0303 	and.w	r3, r3, #3
   24a58:	5996      	ldr	r6, [r2, r6]
   24a5a:	00db      	lsls	r3, r3, #3
   24a5c:	fa26 f303 	lsr.w	r3, r6, r3
   24a60:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   24a62:	e7ee      	b.n	24a42 <uECC_vli_nativeToBytes+0x6>

00024a64 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   24a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24a66:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   24a68:	1cd1      	adds	r1, r2, #3
   24a6a:	bf48      	it	mi
   24a6c:	1d91      	addmi	r1, r2, #6
   24a6e:	f341 0187 	sbfx	r1, r1, #2, #8
{
   24a72:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   24a74:	f7ff fae0 	bl	24038 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   24a78:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   24a7a:	1e67      	subs	r7, r4, #1
   24a7c:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   24a7e:	42a2      	cmp	r2, r4
   24a80:	f105 0501 	add.w	r5, r5, #1
   24a84:	db00      	blt.n	24a88 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   24a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   24a88:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   24a8a:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   24a8e:	5cb2      	ldrb	r2, [r6, r2]
   24a90:	f003 0303 	and.w	r3, r3, #3
   24a94:	00db      	lsls	r3, r3, #3
   24a96:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   24a9a:	5842      	ldr	r2, [r0, r1]
   24a9c:	431a      	orrs	r2, r3
   24a9e:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   24aa0:	e7ec      	b.n	24a7c <uECC_vli_bytesToNative+0x18>

00024aa2 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   24aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
   24aa4:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   24aa6:	f991 6000 	ldrsb.w	r6, [r1]
{
   24aaa:	4605      	mov	r5, r0
   24aac:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   24aae:	f7ff fe17 	bl	246e0 <EccPoint_isZero>
   24ab2:	bb28      	cbnz	r0, 24b00 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   24ab4:	1d27      	adds	r7, r4, #4
   24ab6:	4632      	mov	r2, r6
   24ab8:	4629      	mov	r1, r5
   24aba:	4638      	mov	r0, r7
   24abc:	f7ff fb0d 	bl	240da <uECC_vli_cmp_unsafe>
   24ac0:	2801      	cmp	r0, #1
   24ac2:	d120      	bne.n	24b06 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   24ac4:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   24ac8:	4632      	mov	r2, r6
   24aca:	4638      	mov	r0, r7
   24acc:	f7ff fb05 	bl	240da <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   24ad0:	2801      	cmp	r0, #1
   24ad2:	d118      	bne.n	24b06 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   24ad4:	4622      	mov	r2, r4
   24ad6:	4668      	mov	r0, sp
   24ad8:	f7ff fc15 	bl	24306 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   24adc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   24ae0:	4622      	mov	r2, r4
   24ae2:	4629      	mov	r1, r5
   24ae4:	a808      	add	r0, sp, #32
   24ae6:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   24ae8:	4632      	mov	r2, r6
   24aea:	a908      	add	r1, sp, #32
   24aec:	4668      	mov	r0, sp
   24aee:	f7ff fb0b 	bl	24108 <uECC_vli_equal>
   24af2:	2800      	cmp	r0, #0
		return -3;
   24af4:	bf0c      	ite	eq
   24af6:	2000      	moveq	r0, #0
   24af8:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   24afc:	b011      	add	sp, #68	; 0x44
   24afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   24b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24b04:	e7fa      	b.n	24afc <uECC_valid_point+0x5a>
		return -2;
   24b06:	f06f 0001 	mvn.w	r0, #1
   24b0a:	e7f7      	b.n	24afc <uECC_valid_point+0x5a>

00024b0c <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   24b0c:	b570      	push	{r4, r5, r6, lr}
   24b0e:	460c      	mov	r4, r1
   24b10:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   24b12:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   24b14:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   24b18:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   24b1a:	4601      	mov	r1, r0
   24b1c:	4668      	mov	r0, sp
   24b1e:	f7ff ffa1 	bl	24a64 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   24b22:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   24b26:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   24b2a:	18a9      	adds	r1, r5, r2
   24b2c:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   24b30:	f7ff ff98 	bl	24a64 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   24b34:	2210      	movs	r2, #16
   24b36:	4631      	mov	r1, r6
   24b38:	4668      	mov	r0, sp
   24b3a:	f7ff face 	bl	240da <uECC_vli_cmp_unsafe>
   24b3e:	b128      	cbz	r0, 24b4c <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   24b40:	4621      	mov	r1, r4
   24b42:	4668      	mov	r0, sp
   24b44:	f7ff ffad 	bl	24aa2 <uECC_valid_point>
}
   24b48:	b010      	add	sp, #64	; 0x40
   24b4a:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   24b4c:	f06f 0003 	mvn.w	r0, #3
   24b50:	e7fa      	b.n	24b48 <uECC_valid_public_key+0x3c>

00024b52 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   24b52:	78cb      	ldrb	r3, [r1, #3]
   24b54:	7802      	ldrb	r2, [r0, #0]
   24b56:	4053      	eors	r3, r2
   24b58:	7003      	strb	r3, [r0, #0]
   24b5a:	884b      	ldrh	r3, [r1, #2]
   24b5c:	7842      	ldrb	r2, [r0, #1]
   24b5e:	4053      	eors	r3, r2
   24b60:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   24b62:	680a      	ldr	r2, [r1, #0]
   24b64:	7883      	ldrb	r3, [r0, #2]
   24b66:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24b6a:	7083      	strb	r3, [r0, #2]
   24b6c:	680a      	ldr	r2, [r1, #0]
   24b6e:	78c3      	ldrb	r3, [r0, #3]
   24b70:	4053      	eors	r3, r2
   24b72:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   24b74:	79cb      	ldrb	r3, [r1, #7]
   24b76:	7902      	ldrb	r2, [r0, #4]
   24b78:	4053      	eors	r3, r2
   24b7a:	7103      	strb	r3, [r0, #4]
   24b7c:	88cb      	ldrh	r3, [r1, #6]
   24b7e:	7942      	ldrb	r2, [r0, #5]
   24b80:	4053      	eors	r3, r2
   24b82:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   24b84:	684a      	ldr	r2, [r1, #4]
   24b86:	7983      	ldrb	r3, [r0, #6]
   24b88:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24b8c:	7183      	strb	r3, [r0, #6]
   24b8e:	684a      	ldr	r2, [r1, #4]
   24b90:	79c3      	ldrb	r3, [r0, #7]
   24b92:	4053      	eors	r3, r2
   24b94:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   24b96:	7acb      	ldrb	r3, [r1, #11]
   24b98:	7a02      	ldrb	r2, [r0, #8]
   24b9a:	4053      	eors	r3, r2
   24b9c:	7203      	strb	r3, [r0, #8]
   24b9e:	7a42      	ldrb	r2, [r0, #9]
   24ba0:	894b      	ldrh	r3, [r1, #10]
   24ba2:	4053      	eors	r3, r2
   24ba4:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   24ba6:	688a      	ldr	r2, [r1, #8]
   24ba8:	7a83      	ldrb	r3, [r0, #10]
   24baa:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24bae:	7283      	strb	r3, [r0, #10]
   24bb0:	688a      	ldr	r2, [r1, #8]
   24bb2:	7ac3      	ldrb	r3, [r0, #11]
   24bb4:	4053      	eors	r3, r2
   24bb6:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   24bb8:	7bcb      	ldrb	r3, [r1, #15]
   24bba:	7b02      	ldrb	r2, [r0, #12]
   24bbc:	4053      	eors	r3, r2
   24bbe:	7303      	strb	r3, [r0, #12]
   24bc0:	89cb      	ldrh	r3, [r1, #14]
   24bc2:	7b42      	ldrb	r2, [r0, #13]
   24bc4:	4053      	eors	r3, r2
   24bc6:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   24bc8:	68ca      	ldr	r2, [r1, #12]
   24bca:	7b83      	ldrb	r3, [r0, #14]
   24bcc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24bd0:	7383      	strb	r3, [r0, #14]
   24bd2:	68ca      	ldr	r2, [r1, #12]
   24bd4:	7bc3      	ldrb	r3, [r0, #15]
   24bd6:	4053      	eors	r3, r2
   24bd8:	73c3      	strb	r3, [r0, #15]
}
   24bda:	4770      	bx	lr

00024bdc <shift_rows>:
{
   24bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   24bde:	7802      	ldrb	r2, [r0, #0]
   24be0:	f88d 2000 	strb.w	r2, [sp]
   24be4:	7942      	ldrb	r2, [r0, #5]
   24be6:	f88d 2001 	strb.w	r2, [sp, #1]
   24bea:	7a82      	ldrb	r2, [r0, #10]
   24bec:	f88d 2002 	strb.w	r2, [sp, #2]
   24bf0:	7bc2      	ldrb	r2, [r0, #15]
   24bf2:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   24bf6:	7902      	ldrb	r2, [r0, #4]
   24bf8:	f88d 2004 	strb.w	r2, [sp, #4]
   24bfc:	7a42      	ldrb	r2, [r0, #9]
   24bfe:	f88d 2005 	strb.w	r2, [sp, #5]
   24c02:	7b82      	ldrb	r2, [r0, #14]
   24c04:	f88d 2006 	strb.w	r2, [sp, #6]
   24c08:	78c2      	ldrb	r2, [r0, #3]
   24c0a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   24c0e:	7a02      	ldrb	r2, [r0, #8]
   24c10:	f88d 2008 	strb.w	r2, [sp, #8]
   24c14:	7b42      	ldrb	r2, [r0, #13]
   24c16:	f88d 2009 	strb.w	r2, [sp, #9]
   24c1a:	7882      	ldrb	r2, [r0, #2]
   24c1c:	f88d 200a 	strb.w	r2, [sp, #10]
   24c20:	79c2      	ldrb	r2, [r0, #7]
   24c22:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   24c26:	7b02      	ldrb	r2, [r0, #12]
   24c28:	f88d 200c 	strb.w	r2, [sp, #12]
   24c2c:	7842      	ldrb	r2, [r0, #1]
   24c2e:	7ac3      	ldrb	r3, [r0, #11]
   24c30:	f88d 200d 	strb.w	r2, [sp, #13]
   24c34:	7982      	ldrb	r2, [r0, #6]
   24c36:	f88d 200e 	strb.w	r2, [sp, #14]
   24c3a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   24c3e:	2310      	movs	r3, #16
   24c40:	466a      	mov	r2, sp
   24c42:	4619      	mov	r1, r3
   24c44:	f7ff f87b 	bl	23d3e <_copy>
}
   24c48:	b005      	add	sp, #20
   24c4a:	f85d fb04 	ldr.w	pc, [sp], #4

00024c4e <mult_row_column>:
{
   24c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24c50:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   24c52:	7808      	ldrb	r0, [r1, #0]
{
   24c54:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   24c56:	f7ff f881 	bl	23d5c <_double_byte>
   24c5a:	4605      	mov	r5, r0
   24c5c:	7860      	ldrb	r0, [r4, #1]
   24c5e:	f7ff f87d 	bl	23d5c <_double_byte>
   24c62:	78a2      	ldrb	r2, [r4, #2]
   24c64:	7863      	ldrb	r3, [r4, #1]
   24c66:	4053      	eors	r3, r2
   24c68:	78e2      	ldrb	r2, [r4, #3]
   24c6a:	4053      	eors	r3, r2
   24c6c:	405d      	eors	r5, r3
   24c6e:	4045      	eors	r5, r0
   24c70:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   24c72:	7860      	ldrb	r0, [r4, #1]
   24c74:	7827      	ldrb	r7, [r4, #0]
   24c76:	f7ff f871 	bl	23d5c <_double_byte>
   24c7a:	4605      	mov	r5, r0
   24c7c:	78a0      	ldrb	r0, [r4, #2]
   24c7e:	f7ff f86d 	bl	23d5c <_double_byte>
   24c82:	78a3      	ldrb	r3, [r4, #2]
   24c84:	405f      	eors	r7, r3
   24c86:	78e3      	ldrb	r3, [r4, #3]
   24c88:	405f      	eors	r7, r3
   24c8a:	407d      	eors	r5, r7
   24c8c:	4045      	eors	r5, r0
   24c8e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   24c90:	78a0      	ldrb	r0, [r4, #2]
   24c92:	7865      	ldrb	r5, [r4, #1]
   24c94:	7827      	ldrb	r7, [r4, #0]
   24c96:	f7ff f861 	bl	23d5c <_double_byte>
   24c9a:	406f      	eors	r7, r5
   24c9c:	4605      	mov	r5, r0
   24c9e:	78e0      	ldrb	r0, [r4, #3]
   24ca0:	f7ff f85c 	bl	23d5c <_double_byte>
   24ca4:	78e3      	ldrb	r3, [r4, #3]
   24ca6:	405f      	eors	r7, r3
   24ca8:	407d      	eors	r5, r7
   24caa:	4045      	eors	r5, r0
   24cac:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   24cae:	7820      	ldrb	r0, [r4, #0]
   24cb0:	f7ff f854 	bl	23d5c <_double_byte>
   24cb4:	7863      	ldrb	r3, [r4, #1]
   24cb6:	7825      	ldrb	r5, [r4, #0]
   24cb8:	405d      	eors	r5, r3
   24cba:	78a3      	ldrb	r3, [r4, #2]
   24cbc:	405d      	eors	r5, r3
   24cbe:	4045      	eors	r5, r0
   24cc0:	78e0      	ldrb	r0, [r4, #3]
   24cc2:	f7ff f84b 	bl	23d5c <_double_byte>
   24cc6:	b2ed      	uxtb	r5, r5
   24cc8:	4045      	eors	r5, r0
   24cca:	70f5      	strb	r5, [r6, #3]
}
   24ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024cce <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   24cce:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24cd0:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   24cd2:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24cd4:	f912 3b10 	ldrsb.w	r3, [r2], #16
   24cd8:	2b00      	cmp	r3, #0
   24cda:	bfb4      	ite	lt
   24cdc:	2387      	movlt	r3, #135	; 0x87
   24cde:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   24ce0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   24ce4:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   24ce8:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   24cea:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   24cee:	d002      	beq.n	24cf6 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   24cf0:	7813      	ldrb	r3, [r2, #0]
   24cf2:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   24cf4:	e7f4      	b.n	24ce0 <gf_double+0x12>
	}
}
   24cf6:	bd10      	pop	{r4, pc}

00024cf8 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   24cf8:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   24cfa:	b120      	cbz	r0, 24d06 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   24cfc:	2258      	movs	r2, #88	; 0x58
   24cfe:	2100      	movs	r1, #0
   24d00:	f7ff f82a 	bl	23d58 <_set>
   24d04:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   24d06:	bd08      	pop	{r3, pc}

00024d08 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   24d08:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24d0a:	4604      	mov	r4, r0
   24d0c:	b188      	cbz	r0, 24d32 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24d0e:	2210      	movs	r2, #16
   24d10:	2100      	movs	r1, #0
   24d12:	f7ff f821 	bl	23d58 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   24d16:	2210      	movs	r2, #16
   24d18:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24d1c:	2100      	movs	r1, #0
   24d1e:	f7ff f81b 	bl	23d58 <_set>
	s->leftover_offset = 0;
   24d22:	2300      	movs	r3, #0
   24d24:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   24d26:	2200      	movs	r2, #0
   24d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   24d2c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   24d30:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   24d32:	bd10      	pop	{r4, pc}

00024d34 <tc_cmac_setup>:
{
   24d34:	b570      	push	{r4, r5, r6, lr}
   24d36:	460d      	mov	r5, r1
   24d38:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   24d3a:	4604      	mov	r4, r0
   24d3c:	b310      	cbz	r0, 24d84 <tc_cmac_setup+0x50>
   24d3e:	b311      	cbz	r1, 24d86 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   24d40:	2258      	movs	r2, #88	; 0x58
   24d42:	2100      	movs	r1, #0
   24d44:	f7ff f808 	bl	23d58 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   24d48:	4629      	mov	r1, r5
	s->sched = sched;
   24d4a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   24d4c:	4630      	mov	r0, r6
   24d4e:	f7df fb9f 	bl	4490 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24d52:	2210      	movs	r2, #16
   24d54:	2100      	movs	r1, #0
   24d56:	4620      	mov	r0, r4
   24d58:	f7fe fffe 	bl	23d58 <_set>
	gf_double (s->K1, s->iv);
   24d5c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   24d60:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24d62:	4621      	mov	r1, r4
   24d64:	4620      	mov	r0, r4
   24d66:	f7df fbe5 	bl	4534 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   24d6a:	4621      	mov	r1, r4
   24d6c:	4628      	mov	r0, r5
   24d6e:	f7ff ffae 	bl	24cce <gf_double>
	gf_double (s->K2, s->K1);
   24d72:	4629      	mov	r1, r5
   24d74:	f104 0020 	add.w	r0, r4, #32
   24d78:	f7ff ffa9 	bl	24cce <gf_double>
	tc_cmac_init(s);
   24d7c:	4620      	mov	r0, r4
   24d7e:	f7ff ffc3 	bl	24d08 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   24d82:	2001      	movs	r0, #1
}
   24d84:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   24d86:	4608      	mov	r0, r1
   24d88:	e7fc      	b.n	24d84 <tc_cmac_setup+0x50>

00024d8a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   24d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d8e:	460d      	mov	r5, r1
   24d90:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24d92:	4604      	mov	r4, r0
   24d94:	2800      	cmp	r0, #0
   24d96:	d062      	beq.n	24e5e <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   24d98:	b912      	cbnz	r2, 24da0 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   24d9a:	2001      	movs	r0, #1
}
   24d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   24da0:	2900      	cmp	r1, #0
   24da2:	d05c      	beq.n	24e5e <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   24da4:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   24da8:	ea50 0301 	orrs.w	r3, r0, r1
   24dac:	d057      	beq.n	24e5e <tc_cmac_update+0xd4>
	s->countdown--;
   24dae:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   24db2:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   24db6:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   24dba:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   24dbe:	f1b8 0f00 	cmp.w	r8, #0
   24dc2:	d02a      	beq.n	24e1a <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   24dc4:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   24dc8:	f108 0030 	add.w	r0, r8, #48	; 0x30
   24dcc:	42be      	cmp	r6, r7
   24dce:	4420      	add	r0, r4
   24dd0:	d208      	bcs.n	24de4 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24dd2:	462a      	mov	r2, r5
   24dd4:	4633      	mov	r3, r6
   24dd6:	4631      	mov	r1, r6
   24dd8:	f7fe ffb1 	bl	23d3e <_copy>
			s->leftover_offset += data_length;
   24ddc:	6c62      	ldr	r2, [r4, #68]	; 0x44
   24dde:	4432      	add	r2, r6
   24de0:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   24de2:	e7da      	b.n	24d9a <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   24de4:	463b      	mov	r3, r7
   24de6:	462a      	mov	r2, r5
   24de8:	4639      	mov	r1, r7
   24dea:	f7fe ffa8 	bl	23d3e <_copy>
		data_length -= remaining_space;
   24dee:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   24df0:	2300      	movs	r3, #0
   24df2:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   24df4:	4446      	add	r6, r8
		data += remaining_space;
   24df6:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24df8:	1e63      	subs	r3, r4, #1
   24dfa:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   24dfe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24e02:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e06:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   24e08:	ea82 0200 	eor.w	r2, r2, r0
   24e0c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e0e:	d1f6      	bne.n	24dfe <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24e10:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24e12:	4621      	mov	r1, r4
   24e14:	4620      	mov	r0, r4
   24e16:	f7df fb8d 	bl	4534 <tc_aes_encrypt>
   24e1a:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   24e1e:	2e10      	cmp	r6, #16
   24e20:	d80a      	bhi.n	24e38 <tc_cmac_update+0xae>
	if (data_length > 0) {
   24e22:	2e00      	cmp	r6, #0
   24e24:	d0b9      	beq.n	24d9a <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   24e26:	4633      	mov	r3, r6
   24e28:	462a      	mov	r2, r5
   24e2a:	4631      	mov	r1, r6
   24e2c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24e30:	f7fe ff85 	bl	23d3e <_copy>
		s->leftover_offset = data_length;
   24e34:	6466      	str	r6, [r4, #68]	; 0x44
   24e36:	e7b0      	b.n	24d9a <tc_cmac_update+0x10>
   24e38:	1e63      	subs	r3, r4, #1
   24e3a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   24e3c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24e40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e44:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   24e46:	ea82 0200 	eor.w	r2, r2, r0
   24e4a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e4c:	d1f6      	bne.n	24e3c <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24e4e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24e50:	4621      	mov	r1, r4
   24e52:	4620      	mov	r0, r4
   24e54:	f7df fb6e 	bl	4534 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   24e58:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   24e5a:	3e10      	subs	r6, #16
   24e5c:	e7df      	b.n	24e1e <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   24e5e:	2000      	movs	r0, #0
   24e60:	e79c      	b.n	24d9c <tc_cmac_update+0x12>

00024e62 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   24e62:	b570      	push	{r4, r5, r6, lr}
   24e64:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   24e66:	4605      	mov	r5, r0
   24e68:	b1e8      	cbz	r0, 24ea6 <tc_cmac_final+0x44>
   24e6a:	b369      	cbz	r1, 24ec8 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   24e6c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   24e6e:	2a10      	cmp	r2, #16
   24e70:	d11a      	bne.n	24ea8 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   24e72:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e74:	1e63      	subs	r3, r4, #1
   24e76:	3901      	subs	r1, #1
   24e78:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   24e7c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24e80:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   24e84:	4072      	eors	r2, r6
   24e86:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e8a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   24e8c:	ea82 0206 	eor.w	r2, r2, r6
   24e90:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e92:	d1f3      	bne.n	24e7c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   24e94:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24e96:	4621      	mov	r1, r4
   24e98:	4628      	mov	r0, r5
   24e9a:	f7df fb4b 	bl	4534 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   24e9e:	4620      	mov	r0, r4
   24ea0:	f7ff ff2a 	bl	24cf8 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   24ea4:	2001      	movs	r0, #1
}
   24ea6:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   24ea8:	f102 0030 	add.w	r0, r2, #48	; 0x30
   24eac:	2100      	movs	r1, #0
   24eae:	f1c2 0210 	rsb	r2, r2, #16
   24eb2:	4420      	add	r0, r4
   24eb4:	f7fe ff50 	bl	23d58 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   24eb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   24eba:	4423      	add	r3, r4
   24ebc:	2280      	movs	r2, #128	; 0x80
   24ebe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   24ec2:	f104 0120 	add.w	r1, r4, #32
   24ec6:	e7d5      	b.n	24e74 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   24ec8:	4608      	mov	r0, r1
   24eca:	e7ec      	b.n	24ea6 <tc_cmac_final+0x44>

00024ecc <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   24ecc:	2100      	movs	r1, #0
   24ece:	2001      	movs	r0, #1
   24ed0:	f7df bd1c 	b.w	490c <z_arm_fatal_error>

00024ed4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   24ed4:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   24ed6:	6800      	ldr	r0, [r0, #0]
   24ed8:	f7df bd18 	b.w	490c <z_arm_fatal_error>

00024edc <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   24edc:	b508      	push	{r3, lr}
	handler();
   24ede:	f7df fd4d 	bl	497c <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   24ee2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   24ee6:	f7df bb8f 	b.w	4608 <z_arm_exc_exit>

00024eea <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   24eea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24eee:	4684      	mov	ip, r0
   24ef0:	4688      	mov	r8, r1
	register const char *s = nptr;
   24ef2:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   24ef4:	460c      	mov	r4, r1
   24ef6:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   24efa:	2b20      	cmp	r3, #32
   24efc:	d033      	beq.n	24f66 <strtol+0x7c>
   24efe:	f1a3 0009 	sub.w	r0, r3, #9
   24f02:	2804      	cmp	r0, #4
   24f04:	d92f      	bls.n	24f66 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   24f06:	2b2d      	cmp	r3, #45	; 0x2d
   24f08:	d12f      	bne.n	24f6a <strtol+0x80>
		neg = 1;
		c = *s++;
   24f0a:	784b      	ldrb	r3, [r1, #1]
   24f0c:	1c8c      	adds	r4, r1, #2
		neg = 1;
   24f0e:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   24f10:	2a00      	cmp	r2, #0
   24f12:	d05c      	beq.n	24fce <strtol+0xe4>
   24f14:	2a10      	cmp	r2, #16
   24f16:	d109      	bne.n	24f2c <strtol+0x42>
   24f18:	2b30      	cmp	r3, #48	; 0x30
   24f1a:	d107      	bne.n	24f2c <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   24f1c:	7823      	ldrb	r3, [r4, #0]
   24f1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24f22:	2b58      	cmp	r3, #88	; 0x58
   24f24:	d14e      	bne.n	24fc4 <strtol+0xda>
		c = s[1];
   24f26:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   24f28:	2210      	movs	r2, #16
		s += 2;
   24f2a:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   24f2c:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   24f30:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   24f32:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   24f34:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   24f38:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   24f3a:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   24f3e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   24f42:	2d09      	cmp	r5, #9
   24f44:	d817      	bhi.n	24f76 <strtol+0x8c>
			c -= '0';
   24f46:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   24f48:	429a      	cmp	r2, r3
   24f4a:	dd24      	ble.n	24f96 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   24f4c:	1c75      	adds	r5, r6, #1
   24f4e:	d007      	beq.n	24f60 <strtol+0x76>
   24f50:	4570      	cmp	r0, lr
   24f52:	d81d      	bhi.n	24f90 <strtol+0xa6>
   24f54:	d101      	bne.n	24f5a <strtol+0x70>
   24f56:	454b      	cmp	r3, r9
   24f58:	dc1a      	bgt.n	24f90 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   24f5a:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   24f5e:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   24f60:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   24f64:	e7eb      	b.n	24f3e <strtol+0x54>
{
   24f66:	4621      	mov	r1, r4
   24f68:	e7c4      	b.n	24ef4 <strtol+0xa>
	} else if (c == '+') {
   24f6a:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   24f6c:	bf04      	itt	eq
   24f6e:	784b      	ldrbeq	r3, [r1, #1]
   24f70:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   24f72:	2100      	movs	r1, #0
   24f74:	e7cc      	b.n	24f10 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   24f76:	f043 0520 	orr.w	r5, r3, #32
   24f7a:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   24f7c:	2d19      	cmp	r5, #25
   24f7e:	d80a      	bhi.n	24f96 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   24f80:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   24f84:	2d1a      	cmp	r5, #26
   24f86:	bf34      	ite	cc
   24f88:	2537      	movcc	r5, #55	; 0x37
   24f8a:	2557      	movcs	r5, #87	; 0x57
   24f8c:	1b5b      	subs	r3, r3, r5
   24f8e:	e7db      	b.n	24f48 <strtol+0x5e>
			any = -1;
   24f90:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   24f94:	e7e4      	b.n	24f60 <strtol+0x76>
		}
	}

	if (any < 0) {
   24f96:	1c73      	adds	r3, r6, #1
   24f98:	d109      	bne.n	24fae <strtol+0xc4>
   24f9a:	f7fa fbf9 	bl	1f790 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   24f9e:	2326      	movs	r3, #38	; 0x26
   24fa0:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   24fa2:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   24fa4:	f1b8 0f00 	cmp.w	r8, #0
   24fa8:	d107      	bne.n	24fba <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   24faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   24fae:	b101      	cbz	r1, 24fb2 <strtol+0xc8>
		acc = -acc;
   24fb0:	4240      	negs	r0, r0
	if (endptr != NULL) {
   24fb2:	f1b8 0f00 	cmp.w	r8, #0
   24fb6:	d0f8      	beq.n	24faa <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   24fb8:	b10e      	cbz	r6, 24fbe <strtol+0xd4>
   24fba:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   24fbe:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   24fc2:	e7f2      	b.n	24faa <strtol+0xc0>
	if (base == 0) {
   24fc4:	2330      	movs	r3, #48	; 0x30
   24fc6:	2a00      	cmp	r2, #0
   24fc8:	d1b0      	bne.n	24f2c <strtol+0x42>
		base = c == '0' ? 8 : 10;
   24fca:	2208      	movs	r2, #8
   24fcc:	e7ae      	b.n	24f2c <strtol+0x42>
	if ((base == 0 || base == 16) &&
   24fce:	2b30      	cmp	r3, #48	; 0x30
   24fd0:	d0a4      	beq.n	24f1c <strtol+0x32>
		base = c == '0' ? 8 : 10;
   24fd2:	220a      	movs	r2, #10
   24fd4:	e7aa      	b.n	24f2c <strtol+0x42>

00024fd6 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   24fd6:	3901      	subs	r1, #1
   24fd8:	4603      	mov	r3, r0
   24fda:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24fde:	b90a      	cbnz	r2, 24fe4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   24fe0:	701a      	strb	r2, [r3, #0]

	return dest;
}
   24fe2:	4770      	bx	lr
		*d = *s;
   24fe4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   24fe8:	e7f7      	b.n	24fda <strcpy+0x4>

00024fea <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   24fea:	b570      	push	{r4, r5, r6, lr}
   24fec:	3901      	subs	r1, #1
   24fee:	4605      	mov	r5, r0
   24ff0:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   24ff2:	b142      	cbz	r2, 25006 <strncpy+0x1c>
   24ff4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   24ff8:	1e56      	subs	r6, r2, #1
   24ffa:	b92b      	cbnz	r3, 25008 <strncpy+0x1e>
   24ffc:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   24ffe:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   25002:	42a2      	cmp	r2, r4
   25004:	d1fb      	bne.n	24ffe <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   25006:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   25008:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   2500c:	4632      	mov	r2, r6
   2500e:	e7ef      	b.n	24ff0 <strncpy+0x6>

00025010 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   25010:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   25012:	4603      	mov	r3, r0
   25014:	781a      	ldrb	r2, [r3, #0]
   25016:	428a      	cmp	r2, r1
   25018:	4618      	mov	r0, r3
   2501a:	f103 0301 	add.w	r3, r3, #1
   2501e:	d004      	beq.n	2502a <strchr+0x1a>
   25020:	2a00      	cmp	r2, #0
   25022:	d1f7      	bne.n	25014 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   25024:	2900      	cmp	r1, #0
   25026:	bf18      	it	ne
   25028:	2000      	movne	r0, #0
}
   2502a:	4770      	bx	lr

0002502c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2502c:	4603      	mov	r3, r0
	size_t n = 0;
   2502e:	2000      	movs	r0, #0

	while (*s != '\0') {
   25030:	5c1a      	ldrb	r2, [r3, r0]
   25032:	b902      	cbnz	r2, 25036 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   25034:	4770      	bx	lr
		n++;
   25036:	3001      	adds	r0, #1
   25038:	e7fa      	b.n	25030 <strlen+0x4>

0002503a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2503a:	1e43      	subs	r3, r0, #1
   2503c:	3901      	subs	r1, #1
   2503e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   25042:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   25046:	4282      	cmp	r2, r0
   25048:	d101      	bne.n	2504e <strcmp+0x14>
   2504a:	2a00      	cmp	r2, #0
   2504c:	d1f7      	bne.n	2503e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2504e:	1a10      	subs	r0, r2, r0
   25050:	4770      	bx	lr

00025052 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   25052:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   25054:	2400      	movs	r4, #0
   25056:	42a2      	cmp	r2, r4
   25058:	d008      	beq.n	2506c <strncmp+0x1a>
   2505a:	5d03      	ldrb	r3, [r0, r4]
   2505c:	5d0d      	ldrb	r5, [r1, r4]
   2505e:	42ab      	cmp	r3, r5
   25060:	d102      	bne.n	25068 <strncmp+0x16>
   25062:	3401      	adds	r4, #1
   25064:	2b00      	cmp	r3, #0
   25066:	d1f6      	bne.n	25056 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   25068:	1b58      	subs	r0, r3, r5
   2506a:	e000      	b.n	2506e <strncmp+0x1c>
   2506c:	2000      	movs	r0, #0
}
   2506e:	bd30      	pop	{r4, r5, pc}

00025070 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   25070:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   25072:	b15a      	cbz	r2, 2508c <memcmp+0x1c>
   25074:	3901      	subs	r1, #1
   25076:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   25078:	f810 2b01 	ldrb.w	r2, [r0], #1
   2507c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   25080:	42a0      	cmp	r0, r4
   25082:	d001      	beq.n	25088 <memcmp+0x18>
   25084:	429a      	cmp	r2, r3
   25086:	d0f7      	beq.n	25078 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   25088:	1ad0      	subs	r0, r2, r3
}
   2508a:	bd10      	pop	{r4, pc}
		return 0;
   2508c:	4610      	mov	r0, r2
   2508e:	e7fc      	b.n	2508a <memcmp+0x1a>

00025090 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   25090:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   25092:	ea81 0400 	eor.w	r4, r1, r0
   25096:	07a5      	lsls	r5, r4, #30
   25098:	4603      	mov	r3, r0
   2509a:	d00b      	beq.n	250b4 <memcpy+0x24>
   2509c:	3b01      	subs	r3, #1
   2509e:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   250a0:	4291      	cmp	r1, r2
   250a2:	d11b      	bne.n	250dc <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   250a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   250a6:	2a00      	cmp	r2, #0
   250a8:	d0fc      	beq.n	250a4 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   250aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   250ae:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   250b2:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   250b4:	079c      	lsls	r4, r3, #30
   250b6:	d1f6      	bne.n	250a6 <memcpy+0x16>
   250b8:	f022 0403 	bic.w	r4, r2, #3
   250bc:	1f1d      	subs	r5, r3, #4
   250be:	0896      	lsrs	r6, r2, #2
   250c0:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   250c2:	42b9      	cmp	r1, r7
   250c4:	d105      	bne.n	250d2 <memcpy+0x42>
   250c6:	f06f 0503 	mvn.w	r5, #3
   250ca:	fb05 2206 	mla	r2, r5, r6, r2
   250ce:	4423      	add	r3, r4
   250d0:	e7e4      	b.n	2509c <memcpy+0xc>
			*(d_word++) = *(s_word++);
   250d2:	f851 cb04 	ldr.w	ip, [r1], #4
   250d6:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   250da:	e7f2      	b.n	250c2 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   250dc:	f811 4b01 	ldrb.w	r4, [r1], #1
   250e0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   250e4:	e7dc      	b.n	250a0 <memcpy+0x10>

000250e6 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   250e6:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   250e8:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   250ea:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   250ec:	079c      	lsls	r4, r3, #30
   250ee:	d111      	bne.n	25114 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   250f0:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   250f4:	f022 0603 	bic.w	r6, r2, #3
   250f8:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   250fc:	441e      	add	r6, r3
   250fe:	0894      	lsrs	r4, r2, #2
   25100:	42b3      	cmp	r3, r6
   25102:	d10d      	bne.n	25120 <memset+0x3a>
   25104:	f06f 0503 	mvn.w	r5, #3
   25108:	fb05 2204 	mla	r2, r5, r4, r2
   2510c:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   2510e:	4293      	cmp	r3, r2
   25110:	d109      	bne.n	25126 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   25112:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   25114:	2a00      	cmp	r2, #0
   25116:	d0fc      	beq.n	25112 <memset+0x2c>
		*(d_byte++) = c_byte;
   25118:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2511c:	3a01      	subs	r2, #1
   2511e:	e7e5      	b.n	250ec <memset+0x6>
		*(d_word++) = c_word;
   25120:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   25124:	e7ec      	b.n	25100 <memset+0x1a>
		*(d_byte++) = c_byte;
   25126:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2512a:	e7f0      	b.n	2510e <memset+0x28>

0002512c <_to_x>:
{
   2512c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2512e:	4603      	mov	r3, r0
   25130:	4614      	mov	r4, r2
   25132:	4602      	mov	r2, r0
		unsigned int d = n % base;
   25134:	fbb1 f0f4 	udiv	r0, r1, r4
   25138:	fb04 1510 	mls	r5, r4, r0, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   2513c:	2d09      	cmp	r5, #9
   2513e:	460f      	mov	r7, r1
   25140:	bf8c      	ite	hi
   25142:	2627      	movhi	r6, #39	; 0x27
   25144:	2600      	movls	r6, #0
		n /= base;
   25146:	4601      	mov	r1, r0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   25148:	3530      	adds	r5, #48	; 0x30
   2514a:	4610      	mov	r0, r2
   2514c:	4435      	add	r5, r6
	} while (n);
   2514e:	42a7      	cmp	r7, r4
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   25150:	f800 5b01 	strb.w	r5, [r0], #1
	} while (n);
   25154:	d205      	bcs.n	25162 <_to_x+0x36>
	*buf = 0;
   25156:	2100      	movs	r1, #0
   25158:	7001      	strb	r1, [r0, #0]
	len = buf - start;
   2515a:	1ac0      	subs	r0, r0, r3
	for (buf--; buf > start; buf--, start++) {
   2515c:	429a      	cmp	r2, r3
   2515e:	d802      	bhi.n	25166 <_to_x+0x3a>
}
   25160:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25162:	4602      	mov	r2, r0
   25164:	e7e6      	b.n	25134 <_to_x+0x8>
		char tmp = *buf;
   25166:	7811      	ldrb	r1, [r2, #0]
		*buf = *start;
   25168:	781c      	ldrb	r4, [r3, #0]
   2516a:	f802 4901 	strb.w	r4, [r2], #-1
		*start = tmp;
   2516e:	f803 1b01 	strb.w	r1, [r3], #1
	for (buf--; buf > start; buf--, start++) {
   25172:	e7f3      	b.n	2515c <_to_x+0x30>

00025174 <_rlrshift>:
{
   25174:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   25176:	e9d0 6500 	ldrd	r6, r5, [r0]
   2517a:	0872      	lsrs	r2, r6, #1
   2517c:	f006 0301 	and.w	r3, r6, #1
   25180:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   25184:	189b      	adds	r3, r3, r2
   25186:	f04f 0100 	mov.w	r1, #0
   2518a:	ea4f 0455 	mov.w	r4, r5, lsr #1
   2518e:	eb44 0101 	adc.w	r1, r4, r1
   25192:	e9c0 3100 	strd	r3, r1, [r0]
}
   25196:	bd70      	pop	{r4, r5, r6, pc}

00025198 <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
   25198:	e9d0 3200 	ldrd	r3, r2, [r0]
{
   2519c:	b5f0      	push	{r4, r5, r6, r7, lr}
	rem += 2U;
   2519e:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
   251a0:	f04f 0705 	mov.w	r7, #5
   251a4:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
   251a8:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
   251ac:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
   251b0:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
   251b4:	fb07 f10e 	mul.w	r1, r7, lr
   251b8:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   251bc:	08f2      	lsrs	r2, r6, #3
   251be:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   251c2:	fbb2 f1f7 	udiv	r1, r2, r7
   251c6:	00ca      	lsls	r2, r1, #3
		quot += q;
   251c8:	eb1c 0402 	adds.w	r4, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   251cc:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   251d0:	eb4e 0503 	adc.w	r5, lr, r3
		rem -= q * 5U;
   251d4:	fba2 2307 	umull	r2, r3, r2, r7
   251d8:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   251da:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   251de:	18e4      	adds	r4, r4, r3
   251e0:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
   251e4:	e9c0 4500 	strd	r4, r5, [r0]
}
   251e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000251ea <_get_digit>:
	if (*digit_count > 0) {
   251ea:	680b      	ldr	r3, [r1, #0]
   251ec:	2b00      	cmp	r3, #0
{
   251ee:	b570      	push	{r4, r5, r6, lr}
   251f0:	4604      	mov	r4, r0
	if (*digit_count > 0) {
   251f2:	dd0f      	ble.n	25214 <_get_digit+0x2a>
		*fr = *fr * 10U;
   251f4:	6822      	ldr	r2, [r4, #0]
   251f6:	6840      	ldr	r0, [r0, #4]
		*digit_count -= 1;
   251f8:	3b01      	subs	r3, #1
   251fa:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   251fc:	210a      	movs	r1, #10
   251fe:	fba2 5601 	umull	r5, r6, r2, r1
   25202:	fb01 6600 	mla	r6, r1, r0, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   25206:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   2520a:	e9c4 5300 	strd	r5, r3, [r4]
		rval = ((*fr >> 60) & 0xF) + '0';
   2520e:	0f30      	lsrs	r0, r6, #28
   25210:	3030      	adds	r0, #48	; 0x30
}
   25212:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   25214:	2030      	movs	r0, #48	; 0x30
   25216:	e7fc      	b.n	25212 <_get_digit+0x28>

00025218 <_stdout_hook_default>:
}
   25218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2521c:	4770      	bx	lr

0002521e <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   2521e:	684b      	ldr	r3, [r1, #4]
   25220:	2b01      	cmp	r3, #1
   25222:	dd07      	ble.n	25234 <sprintf_out+0x16>
		*(p->ptr) = c;
   25224:	680b      	ldr	r3, [r1, #0]
   25226:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   25228:	680b      	ldr	r3, [r1, #0]
   2522a:	3301      	adds	r3, #1
   2522c:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   2522e:	684b      	ldr	r3, [r1, #4]
   25230:	3b01      	subs	r3, #1
   25232:	604b      	str	r3, [r1, #4]
}
   25234:	2000      	movs	r0, #0
   25236:	4770      	bx	lr

00025238 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   25238:	f7fa b8ce 	b.w	1f3d8 <SystemInit>

0002523c <send_cmd_status>:
{
   2523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   25240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   25244:	4606      	mov	r6, r0
   25246:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   25248:	200f      	movs	r0, #15
   2524a:	2100      	movs	r1, #0
   2524c:	f7e3 fa9a 	bl	8784 <bt_buf_get_evt>
	*(u8_t *)net_buf_user_data(buf) = type;
   25250:	2701      	movs	r7, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   25252:	f100 0808 	add.w	r8, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   25256:	4604      	mov	r4, r0
   25258:	7507      	strb	r7, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   2525a:	2102      	movs	r1, #2
   2525c:	4640      	mov	r0, r8
   2525e:	f7f9 f9dd 	bl	1e61c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   25262:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   25264:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   25266:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   25268:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   2526a:	4640      	mov	r0, r8
   2526c:	f7f9 f9d6 	bl	1e61c <net_buf_simple_add>
	evt->ncmd = 1U;
   25270:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   25272:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   25274:	8046      	strh	r6, [r0, #2]
	bt_recv_prio(buf);
   25276:	4620      	mov	r0, r4
}
   25278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_recv_prio(buf);
   2527c:	f7e2 b988 	b.w	7590 <bt_recv_prio>

00025280 <default_CSPRNG>:
{
   25280:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   25282:	f002 f927 	bl	274d4 <bt_rand>
}
   25286:	fab0 f080 	clz	r0, r0
   2528a:	0940      	lsrs	r0, r0, #5
   2528c:	bd08      	pop	{r3, pc}

0002528e <bt_settings_decode_key>:
{
   2528e:	b570      	push	{r4, r5, r6, lr}
   25290:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   25292:	2100      	movs	r1, #0
{
   25294:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   25296:	f7fe fc66 	bl	23b66 <settings_name_next>
   2529a:	280d      	cmp	r0, #13
   2529c:	d118      	bne.n	252d0 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2529e:	7b23      	ldrb	r3, [r4, #12]
   252a0:	2b30      	cmp	r3, #48	; 0x30
   252a2:	d111      	bne.n	252c8 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   252a4:	2300      	movs	r3, #0
   252a6:	702b      	strb	r3, [r5, #0]
   252a8:	f104 060c 	add.w	r6, r4, #12
   252ac:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   252ae:	462a      	mov	r2, r5
   252b0:	4620      	mov	r0, r4
   252b2:	2301      	movs	r3, #1
   252b4:	2102      	movs	r1, #2
   252b6:	3402      	adds	r4, #2
   252b8:	f7fd fe84 	bl	22fc4 <hex2bin>
	for (u8_t i = 0; i < 6; i++) {
   252bc:	42b4      	cmp	r4, r6
   252be:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   252c2:	d1f4      	bne.n	252ae <bt_settings_decode_key+0x20>
	return 0;
   252c4:	2000      	movs	r0, #0
}
   252c6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   252c8:	2b31      	cmp	r3, #49	; 0x31
   252ca:	d101      	bne.n	252d0 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   252cc:	2301      	movs	r3, #1
   252ce:	e7ea      	b.n	252a6 <bt_settings_decode_key+0x18>
		return -EINVAL;
   252d0:	f06f 0015 	mvn.w	r0, #21
   252d4:	e7f7      	b.n	252c6 <bt_settings_decode_key+0x38>

000252d6 <xor16>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_HCI_CORE)
#define LOG_MODULE_NAME bt_aes_ccm
#include "common/log.h"

static inline void xor16(u8_t *dst, const u8_t *a, const u8_t *b)
{
   252d6:	b510      	push	{r4, lr}
	dst[0] = a[0] ^ b[0];
   252d8:	780b      	ldrb	r3, [r1, #0]
   252da:	7814      	ldrb	r4, [r2, #0]
   252dc:	4063      	eors	r3, r4
   252de:	7003      	strb	r3, [r0, #0]
	dst[1] = a[1] ^ b[1];
   252e0:	7854      	ldrb	r4, [r2, #1]
   252e2:	784b      	ldrb	r3, [r1, #1]
   252e4:	4063      	eors	r3, r4
   252e6:	7043      	strb	r3, [r0, #1]
	dst[2] = a[2] ^ b[2];
   252e8:	7894      	ldrb	r4, [r2, #2]
   252ea:	788b      	ldrb	r3, [r1, #2]
   252ec:	4063      	eors	r3, r4
   252ee:	7083      	strb	r3, [r0, #2]
	dst[3] = a[3] ^ b[3];
   252f0:	78d4      	ldrb	r4, [r2, #3]
   252f2:	78cb      	ldrb	r3, [r1, #3]
   252f4:	4063      	eors	r3, r4
   252f6:	70c3      	strb	r3, [r0, #3]
	dst[4] = a[4] ^ b[4];
   252f8:	7914      	ldrb	r4, [r2, #4]
   252fa:	790b      	ldrb	r3, [r1, #4]
   252fc:	4063      	eors	r3, r4
   252fe:	7103      	strb	r3, [r0, #4]
	dst[5] = a[5] ^ b[5];
   25300:	7954      	ldrb	r4, [r2, #5]
   25302:	794b      	ldrb	r3, [r1, #5]
   25304:	4063      	eors	r3, r4
   25306:	7143      	strb	r3, [r0, #5]
	dst[6] = a[6] ^ b[6];
   25308:	7994      	ldrb	r4, [r2, #6]
   2530a:	798b      	ldrb	r3, [r1, #6]
   2530c:	4063      	eors	r3, r4
   2530e:	7183      	strb	r3, [r0, #6]
	dst[7] = a[7] ^ b[7];
   25310:	79d4      	ldrb	r4, [r2, #7]
   25312:	79cb      	ldrb	r3, [r1, #7]
   25314:	4063      	eors	r3, r4
   25316:	71c3      	strb	r3, [r0, #7]
	dst[8] = a[8] ^ b[8];
   25318:	7a14      	ldrb	r4, [r2, #8]
   2531a:	7a0b      	ldrb	r3, [r1, #8]
   2531c:	4063      	eors	r3, r4
   2531e:	7203      	strb	r3, [r0, #8]
	dst[9] = a[9] ^ b[9];
   25320:	7a54      	ldrb	r4, [r2, #9]
   25322:	7a4b      	ldrb	r3, [r1, #9]
   25324:	4063      	eors	r3, r4
   25326:	7243      	strb	r3, [r0, #9]
	dst[10] = a[10] ^ b[10];
   25328:	7a8b      	ldrb	r3, [r1, #10]
   2532a:	7a94      	ldrb	r4, [r2, #10]
   2532c:	4063      	eors	r3, r4
   2532e:	7283      	strb	r3, [r0, #10]
	dst[11] = a[11] ^ b[11];
   25330:	7ad4      	ldrb	r4, [r2, #11]
   25332:	7acb      	ldrb	r3, [r1, #11]
   25334:	4063      	eors	r3, r4
   25336:	72c3      	strb	r3, [r0, #11]
	dst[12] = a[12] ^ b[12];
   25338:	7b14      	ldrb	r4, [r2, #12]
   2533a:	7b0b      	ldrb	r3, [r1, #12]
   2533c:	4063      	eors	r3, r4
   2533e:	7303      	strb	r3, [r0, #12]
	dst[13] = a[13] ^ b[13];
   25340:	7b54      	ldrb	r4, [r2, #13]
   25342:	7b4b      	ldrb	r3, [r1, #13]
   25344:	4063      	eors	r3, r4
   25346:	7343      	strb	r3, [r0, #13]
	dst[14] = a[14] ^ b[14];
   25348:	7b94      	ldrb	r4, [r2, #14]
   2534a:	7b8b      	ldrb	r3, [r1, #14]
   2534c:	4063      	eors	r3, r4
   2534e:	7383      	strb	r3, [r0, #14]
	dst[15] = a[15] ^ b[15];
   25350:	7bcb      	ldrb	r3, [r1, #15]
   25352:	7bd2      	ldrb	r2, [r2, #15]
   25354:	4053      	eors	r3, r2
   25356:	73c3      	strb	r3, [r0, #15]
}
   25358:	bd10      	pop	{r4, pc}

0002535a <ccm_crypt>:
	return 0;
}

static int ccm_crypt(const u8_t key[16], const u8_t nonce[13],
		     const u8_t *in_msg, u8_t *out_msg, size_t msg_len)
{
   2535a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2535e:	b089      	sub	sp, #36	; 0x24
   25360:	4699      	mov	r9, r3
   25362:	9d12      	ldr	r5, [sp, #72]	; 0x48
	blk_cnt = (msg_len + 15) / 16;
	if (!last_blk) {
		last_blk = 16U;
	}

	a_i[0] = 0x01;
   25364:	2301      	movs	r3, #1
	blk_cnt = (msg_len + 15) / 16;
   25366:	f105 060f 	add.w	r6, r5, #15
{
   2536a:	4607      	mov	r7, r0
		last_blk = 16U;
   2536c:	f015 050f 	ands.w	r5, r5, #15
{
   25370:	4690      	mov	r8, r2
	memcpy(&a_i[1], nonce, 13);
   25372:	eb0d 0003 	add.w	r0, sp, r3
   25376:	f04f 020d 	mov.w	r2, #13
	blk_cnt = (msg_len + 15) / 16;
   2537a:	ea4f 1616 	mov.w	r6, r6, lsr #4
		last_blk = 16U;
   2537e:	bf08      	it	eq
   25380:	2510      	moveq	r5, #16
	a_i[0] = 0x01;
   25382:	f88d 3000 	strb.w	r3, [sp]
	memcpy(&a_i[1], nonce, 13);
   25386:	f7ff fe83 	bl	25090 <memcpy>

	for (j = 0; j < blk_cnt; j++) {
   2538a:	b2b6      	uxth	r6, r6
   2538c:	2400      	movs	r4, #0
		if (err) {
			return err;
		}

		/* Encrypted = Payload[0-15] ^ C_1 */
		if (j < blk_cnt - 1) {
   2538e:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
	for (j = 0; j < blk_cnt; j++) {
   25392:	42b4      	cmp	r4, r6
   25394:	d304      	bcc.n	253a0 <ccm_crypt+0x46>
				out_msg[(j * 16) + i] =
					in_msg[(j * 16) + i] ^ s_i[i];
			}
		}
	}
	return 0;
   25396:	2100      	movs	r1, #0
}
   25398:	4608      	mov	r0, r1
   2539a:	b009      	add	sp, #36	; 0x24
   2539c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dst[0] = val >> 8;
   253a0:	f104 0b01 	add.w	fp, r4, #1
   253a4:	f3cb 2307 	ubfx	r3, fp, #8, #8
		err = bt_encrypt_be(key, a_i, s_i);
   253a8:	4669      	mov	r1, sp
   253aa:	aa04      	add	r2, sp, #16
   253ac:	4638      	mov	r0, r7
   253ae:	f88d 300e 	strb.w	r3, [sp, #14]
	dst[1] = val;
   253b2:	f88d b00f 	strb.w	fp, [sp, #15]
   253b6:	f002 f88f 	bl	274d8 <bt_encrypt_be>
		if (err) {
   253ba:	4601      	mov	r1, r0
   253bc:	2800      	cmp	r0, #0
   253be:	d1eb      	bne.n	25398 <ccm_crypt+0x3e>
		if (j < blk_cnt - 1) {
   253c0:	45a2      	cmp	sl, r4
   253c2:	eb08 1204 	add.w	r2, r8, r4, lsl #4
   253c6:	eb09 1004 	add.w	r0, r9, r4, lsl #4
   253ca:	d904      	bls.n	253d6 <ccm_crypt+0x7c>
			xor16(&out_msg[j * 16], s_i, &in_msg[j * 16]);
   253cc:	a904      	add	r1, sp, #16
   253ce:	f7ff ff82 	bl	252d6 <xor16>
	for (j = 0; j < blk_cnt; j++) {
   253d2:	465c      	mov	r4, fp
   253d4:	e7dd      	b.n	25392 <ccm_crypt+0x38>
   253d6:	f10d 0c10 	add.w	ip, sp, #16
					in_msg[(j * 16) + i] ^ s_i[i];
   253da:	f812 3b01 	ldrb.w	r3, [r2], #1
   253de:	f81c 4b01 	ldrb.w	r4, [ip], #1
			for (i = 0; i < last_blk; i++) {
   253e2:	3101      	adds	r1, #1
				out_msg[(j * 16) + i] =
   253e4:	4063      	eors	r3, r4
			for (i = 0; i < last_blk; i++) {
   253e6:	428d      	cmp	r5, r1
				out_msg[(j * 16) + i] =
   253e8:	f800 3b01 	strb.w	r3, [r0], #1
			for (i = 0; i < last_blk; i++) {
   253ec:	d8f5      	bhi.n	253da <ccm_crypt+0x80>
   253ee:	e7f0      	b.n	253d2 <ccm_crypt+0x78>

000253f0 <ccm_auth>:
{
   253f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   253f4:	b08f      	sub	sp, #60	; 0x3c
		last_blk = 16U;
   253f6:	f013 0a0f 	ands.w	sl, r3, #15
{
   253fa:	4680      	mov	r8, r0
   253fc:	9201      	str	r2, [sp, #4]
   253fe:	461d      	mov	r5, r3
	memcpy(b + 1, nonce, 13);
   25400:	f04f 020d 	mov.w	r2, #13
	b[0] = 0x01;
   25404:	f04f 0301 	mov.w	r3, #1
	memcpy(b + 1, nonce, 13);
   25408:	f10d 0b08 	add.w	fp, sp, #8
   2540c:	f10d 0009 	add.w	r0, sp, #9
	err = bt_encrypt_be(key, b, s0);
   25410:	f10d 0928 	add.w	r9, sp, #40	; 0x28
		last_blk = 16U;
   25414:	bf08      	it	eq
   25416:	f04f 0a10 	moveq.w	sl, #16
	b[0] = 0x01;
   2541a:	f88d 3008 	strb.w	r3, [sp, #8]
{
   2541e:	9c19      	ldr	r4, [sp, #100]	; 0x64
	memcpy(b + 1, nonce, 13);
   25420:	f7ff fe36 	bl	25090 <memcpy>
	dst[0] = val >> 8;
   25424:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, b, s0);
   25426:	464a      	mov	r2, r9
   25428:	4659      	mov	r1, fp
   2542a:	4640      	mov	r0, r8
   2542c:	f8ad 3016 	strh.w	r3, [sp, #22]
   25430:	f002 f852 	bl	274d8 <bt_encrypt_be>
	if (err) {
   25434:	4606      	mov	r6, r0
   25436:	2800      	cmp	r0, #0
   25438:	d15f      	bne.n	254fa <ccm_auth+0x10a>
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   2543a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2543c:	f88d 0016 	strb.w	r0, [sp, #22]
   25440:	3b02      	subs	r3, #2
   25442:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   25446:	ea4f 0383 	mov.w	r3, r3, lsl #2
   2544a:	bf14      	ite	ne
   2544c:	2240      	movne	r2, #64	; 0x40
   2544e:	2200      	moveq	r2, #0
   25450:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   25454:	4313      	orrs	r3, r2
   25456:	f043 0301 	orr.w	r3, r3, #1
	err = bt_encrypt_be(key, b, X0);
   2545a:	aa06      	add	r2, sp, #24
   2545c:	4659      	mov	r1, fp
   2545e:	4640      	mov	r0, r8
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   25460:	f88d 3008 	strb.w	r3, [sp, #8]
	dst[1] = val;
   25464:	f88d 5017 	strb.w	r5, [sp, #23]
	err = bt_encrypt_be(key, b, X0);
   25468:	f002 f836 	bl	274d8 <bt_encrypt_be>
	if (err) {
   2546c:	4607      	mov	r7, r0
   2546e:	bbb0      	cbnz	r0, 254de <ccm_auth+0xee>
	if (aad_len) {
   25470:	b3ac      	cbz	r4, 254de <ccm_auth+0xee>
			b[i] = X0[i] ^ b[i];
   25472:	f89d 1018 	ldrb.w	r1, [sp, #24]
   25476:	f88d 1008 	strb.w	r1, [sp, #8]
   2547a:	f89d 1019 	ldrb.w	r1, [sp, #25]
   2547e:	4061      	eors	r1, r4
		aad_len += sizeof(u16_t);
   25480:	3402      	adds	r4, #2
			b[i] = X0[i] ^ b[i];
   25482:	f88d 1009 	strb.w	r1, [sp, #9]
		aad_len += sizeof(u16_t);
   25486:	b2e4      	uxtb	r4, r4
		while (aad_len > 16) {
   25488:	2002      	movs	r0, #2
				b[i] = X0[i] ^ aad[j];
   2548a:	aa06      	add	r2, sp, #24
		while (aad_len > 16) {
   2548c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2548e:	2c10      	cmp	r4, #16
   25490:	eb03 0107 	add.w	r1, r3, r7
   25494:	460b      	mov	r3, r1
   25496:	d80a      	bhi.n	254ae <ccm_auth+0xbe>
   25498:	aa06      	add	r2, sp, #24
		for (; i < aad_len; i++, j++) {
   2549a:	42a0      	cmp	r0, r4
   2549c:	4621      	mov	r1, r4
   2549e:	db30      	blt.n	25502 <ccm_auth+0x112>
		for (i = aad_len; i < 16; i++) {
   254a0:	290f      	cmp	r1, #15
   254a2:	dd36      	ble.n	25512 <ccm_auth+0x122>
		err = bt_encrypt_be(key, b, X0);
   254a4:	a902      	add	r1, sp, #8
   254a6:	4640      	mov	r0, r8
   254a8:	f002 f816 	bl	274d8 <bt_encrypt_be>
		if (err) {
   254ac:	e017      	b.n	254de <ccm_auth+0xee>
		while (aad_len > 16) {
   254ae:	4601      	mov	r1, r0
				b[i] = X0[i] ^ aad[j];
   254b0:	f811 e002 	ldrb.w	lr, [r1, r2]
   254b4:	f813 cb01 	ldrb.w	ip, [r3], #1
   254b8:	ea8c 0c0e 	eor.w	ip, ip, lr
   254bc:	f801 c00b 	strb.w	ip, [r1, fp]
				i++, j++;
   254c0:	3101      	adds	r1, #1
			} while (i < 16);
   254c2:	2910      	cmp	r1, #16
   254c4:	d1f4      	bne.n	254b0 <ccm_auth+0xc0>
   254c6:	f1c0 0010 	rsb	r0, r0, #16
   254ca:	4407      	add	r7, r0
			err = bt_encrypt_be(key, b, X0);
   254cc:	4659      	mov	r1, fp
   254ce:	4640      	mov	r0, r8
   254d0:	f002 f802 	bl	274d8 <bt_encrypt_be>
   254d4:	3c10      	subs	r4, #16
   254d6:	b2e4      	uxtb	r4, r4
			if (err) {
   254d8:	aa06      	add	r2, sp, #24
   254da:	2800      	cmp	r0, #0
   254dc:	d0d6      	beq.n	2548c <ccm_auth+0x9c>
	blk_cnt = (msg_len + 15) / 16;
   254de:	350f      	adds	r5, #15
			memcpy(&b[i], &Xn[i], 16 - i);
   254e0:	ab06      	add	r3, sp, #24
	for (j = 0; j < blk_cnt; j++) {
   254e2:	f3c5 150f 	ubfx	r5, r5, #4, #16
   254e6:	2700      	movs	r7, #0
			memcpy(&b[i], &Xn[i], 16 - i);
   254e8:	eb03 040a 	add.w	r4, r3, sl
	for (j = 0; j < blk_cnt; j++) {
   254ec:	42bd      	cmp	r5, r7
   254ee:	dc15      	bgt.n	2551c <ccm_auth+0x12c>
	for (i = 0; i < mic_size; i++) {
   254f0:	2300      	movs	r3, #0
		mic[i] = s0[i] ^ Xn[i];
   254f2:	a906      	add	r1, sp, #24
	for (i = 0; i < mic_size; i++) {
   254f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   254f6:	4293      	cmp	r3, r2
   254f8:	d13b      	bne.n	25572 <ccm_auth+0x182>
}
   254fa:	4630      	mov	r0, r6
   254fc:	b00f      	add	sp, #60	; 0x3c
   254fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			b[i] = X0[i] ^ aad[j];
   25502:	5c17      	ldrb	r7, [r2, r0]
   25504:	f813 1b01 	ldrb.w	r1, [r3], #1
   25508:	4079      	eors	r1, r7
   2550a:	af02      	add	r7, sp, #8
   2550c:	5439      	strb	r1, [r7, r0]
		for (; i < aad_len; i++, j++) {
   2550e:	3001      	adds	r0, #1
   25510:	e7c3      	b.n	2549a <ccm_auth+0xaa>
			b[i] = X0[i];
   25512:	a802      	add	r0, sp, #8
   25514:	5c53      	ldrb	r3, [r2, r1]
   25516:	5443      	strb	r3, [r0, r1]
		for (i = aad_len; i < 16; i++) {
   25518:	3101      	adds	r1, #1
   2551a:	e7c1      	b.n	254a0 <ccm_auth+0xb0>
		if (j + 1 == blk_cnt) {
   2551c:	013a      	lsls	r2, r7, #4
   2551e:	9b01      	ldr	r3, [sp, #4]
   25520:	3701      	adds	r7, #1
   25522:	42bd      	cmp	r5, r7
   25524:	441a      	add	r2, r3
   25526:	d11f      	bne.n	25568 <ccm_auth+0x178>
   25528:	f10d 0c18 	add.w	ip, sp, #24
   2552c:	a802      	add	r0, sp, #8
			for (i = 0; i < last_blk; i++) {
   2552e:	2300      	movs	r3, #0
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   25530:	f81c 1b01 	ldrb.w	r1, [ip], #1
   25534:	f812 eb01 	ldrb.w	lr, [r2], #1
			for (i = 0; i < last_blk; i++) {
   25538:	3301      	adds	r3, #1
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   2553a:	ea81 010e 	eor.w	r1, r1, lr
			for (i = 0; i < last_blk; i++) {
   2553e:	459a      	cmp	sl, r3
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   25540:	f800 1b01 	strb.w	r1, [r0], #1
			for (i = 0; i < last_blk; i++) {
   25544:	dcf4      	bgt.n	25530 <ccm_auth+0x140>
			memcpy(&b[i], &Xn[i], 16 - i);
   25546:	ab02      	add	r3, sp, #8
   25548:	f1ca 0210 	rsb	r2, sl, #16
   2554c:	4621      	mov	r1, r4
   2554e:	eb03 000a 	add.w	r0, r3, sl
   25552:	f7ff fd9d 	bl	25090 <memcpy>
		err = bt_encrypt_be(key, b, Xn);
   25556:	aa06      	add	r2, sp, #24
   25558:	a902      	add	r1, sp, #8
   2555a:	4640      	mov	r0, r8
   2555c:	f001 ffbc 	bl	274d8 <bt_encrypt_be>
		if (err) {
   25560:	2800      	cmp	r0, #0
   25562:	d0c3      	beq.n	254ec <ccm_auth+0xfc>
		err = bt_encrypt_be(key, b, Xn);
   25564:	4606      	mov	r6, r0
   25566:	e7c8      	b.n	254fa <ccm_auth+0x10a>
			xor16(b, Xn, &cleartext_msg[j * 16]);
   25568:	a906      	add	r1, sp, #24
   2556a:	a802      	add	r0, sp, #8
   2556c:	f7ff feb3 	bl	252d6 <xor16>
   25570:	e7f1      	b.n	25556 <ccm_auth+0x166>
		mic[i] = s0[i] ^ Xn[i];
   25572:	5c58      	ldrb	r0, [r3, r1]
   25574:	f819 2003 	ldrb.w	r2, [r9, r3]
   25578:	4042      	eors	r2, r0
   2557a:	981a      	ldr	r0, [sp, #104]	; 0x68
   2557c:	54c2      	strb	r2, [r0, r3]
	for (i = 0; i < mic_size; i++) {
   2557e:	3301      	adds	r3, #1
   25580:	e7b8      	b.n	254f4 <ccm_auth+0x104>

00025582 <bt_ccm_decrypt>:

int bt_ccm_decrypt(const u8_t key[16], u8_t nonce[13], const u8_t *enc_msg,
		   size_t msg_len, const u8_t *aad, size_t aad_len,
		   u8_t *out_msg, size_t mic_size)
{
   25582:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25586:	b089      	sub	sp, #36	; 0x24
   25588:	e9dd ba13 	ldrd	fp, sl, [sp, #76]	; 0x4c
	u8_t mic[16];

	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   2558c:	f5bb 4f7f 	cmp.w	fp, #65280	; 0xff00
{
   25590:	9e15      	ldr	r6, [sp, #84]	; 0x54
   25592:	4607      	mov	r7, r0
   25594:	4688      	mov	r8, r1
   25596:	4615      	mov	r5, r2
   25598:	461c      	mov	r4, r3
	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   2559a:	d21e      	bcs.n	255da <bt_ccm_decrypt+0x58>
   2559c:	2e10      	cmp	r6, #16
   2559e:	d81c      	bhi.n	255da <bt_ccm_decrypt+0x58>
		return -EINVAL;
	}

	ccm_crypt(key, nonce, enc_msg, out_msg, msg_len);
   255a0:	9300      	str	r3, [sp, #0]
   255a2:	4653      	mov	r3, sl
   255a4:	f7ff fed9 	bl	2535a <ccm_crypt>

	ccm_auth(key, nonce, out_msg, msg_len, aad, aad_len, mic, mic_size);
   255a8:	f10d 0910 	add.w	r9, sp, #16
   255ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   255ae:	9300      	str	r3, [sp, #0]
   255b0:	4652      	mov	r2, sl
   255b2:	4623      	mov	r3, r4
   255b4:	4641      	mov	r1, r8
   255b6:	e9cd b901 	strd	fp, r9, [sp, #4]
   255ba:	9603      	str	r6, [sp, #12]
   255bc:	4638      	mov	r0, r7
   255be:	f7ff ff17 	bl	253f0 <ccm_auth>

	if (memcmp(mic, enc_msg + msg_len, mic_size)) {
   255c2:	4632      	mov	r2, r6
   255c4:	1929      	adds	r1, r5, r4
   255c6:	4648      	mov	r0, r9
   255c8:	f7ff fd52 	bl	25070 <memcmp>
   255cc:	2800      	cmp	r0, #0
		return -EBADMSG;
   255ce:	bf18      	it	ne
   255d0:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}

	return 0;
}
   255d4:	b009      	add	sp, #36	; 0x24
   255d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   255da:	f06f 0015 	mvn.w	r0, #21
   255de:	e7f9      	b.n	255d4 <bt_ccm_decrypt+0x52>

000255e0 <bt_ccm_encrypt>:

int bt_ccm_encrypt(const u8_t key[16], u8_t nonce[13], const u8_t *msg,
		   size_t msg_len, const u8_t *aad, size_t aad_len,
		   u8_t *out_msg, size_t mic_size)
{
   255e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   255e4:	4617      	mov	r7, r2
   255e6:	e9dd 280b 	ldrd	r2, r8, [sp, #44]	; 0x2c
	BT_DBG("nonce %s", bt_hex(nonce, 13));
	BT_DBG("msg (len %zu) %s", msg_len, bt_hex(msg, msg_len));
	BT_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00 || mic_size > 16) {
   255ea:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
{
   255ee:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   255f2:	4605      	mov	r5, r0
   255f4:	460e      	mov	r6, r1
   255f6:	461c      	mov	r4, r3
	u8_t *mic = out_msg + msg_len;
   255f8:	eb08 0e03 	add.w	lr, r8, r3
	if (aad_len >= 0xff00 || mic_size > 16) {
   255fc:	d215      	bcs.n	2562a <bt_ccm_encrypt+0x4a>
   255fe:	f1bc 0f10 	cmp.w	ip, #16
   25602:	d812      	bhi.n	2562a <bt_ccm_encrypt+0x4a>
		return -EINVAL;
	}

	ccm_auth(key, nonce, out_msg, msg_len, aad, aad_len, mic, mic_size);
   25604:	9201      	str	r2, [sp, #4]
   25606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25608:	9200      	str	r2, [sp, #0]
   2560a:	e9cd ec02 	strd	lr, ip, [sp, #8]
   2560e:	4642      	mov	r2, r8
   25610:	f7ff feee 	bl	253f0 <ccm_auth>

	ccm_crypt(key, nonce, msg, out_msg, msg_len);
   25614:	9400      	str	r4, [sp, #0]
   25616:	4643      	mov	r3, r8
   25618:	463a      	mov	r2, r7
   2561a:	4631      	mov	r1, r6
   2561c:	4628      	mov	r0, r5
   2561e:	f7ff fe9c 	bl	2535a <ccm_crypt>

	return 0;
   25622:	2000      	movs	r0, #0
}
   25624:	b004      	add	sp, #16
   25626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   2562a:	f06f 0015 	mvn.w	r0, #21
   2562e:	e7f9      	b.n	25624 <bt_ccm_encrypt+0x44>

00025630 <bt_uuid_cmp>:
{
   25630:	b510      	push	{r4, lr}
   25632:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   25634:	7801      	ldrb	r1, [r0, #0]
   25636:	7822      	ldrb	r2, [r4, #0]
   25638:	428a      	cmp	r2, r1
{
   2563a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2563c:	d00e      	beq.n	2565c <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   2563e:	4669      	mov	r1, sp
   25640:	f7e0 feaa 	bl	6398 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   25644:	a905      	add	r1, sp, #20
   25646:	4620      	mov	r0, r4
   25648:	f7e0 fea6 	bl	6398 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2564c:	2210      	movs	r2, #16
   2564e:	f10d 0115 	add.w	r1, sp, #21
   25652:	f10d 0001 	add.w	r0, sp, #1
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   25656:	f7ff fd0b 	bl	25070 <memcmp>
   2565a:	e007      	b.n	2566c <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   2565c:	2a01      	cmp	r2, #1
   2565e:	d007      	beq.n	25670 <bt_uuid_cmp+0x40>
   25660:	2a02      	cmp	r2, #2
   25662:	d008      	beq.n	25676 <bt_uuid_cmp+0x46>
   25664:	b95a      	cbnz	r2, 2567e <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   25666:	8840      	ldrh	r0, [r0, #2]
   25668:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2566a:	1ac0      	subs	r0, r0, r3
}
   2566c:	b00a      	add	sp, #40	; 0x28
   2566e:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   25670:	6840      	ldr	r0, [r0, #4]
   25672:	6863      	ldr	r3, [r4, #4]
   25674:	e7f9      	b.n	2566a <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   25676:	2210      	movs	r2, #16
   25678:	1c61      	adds	r1, r4, #1
   2567a:	3001      	adds	r0, #1
   2567c:	e7eb      	b.n	25656 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   2567e:	f06f 0015 	mvn.w	r0, #21
   25682:	e7f3      	b.n	2566c <bt_uuid_cmp+0x3c>

00025684 <bt_uuid_create>:
	switch (data_len) {
   25684:	2a04      	cmp	r2, #4
{
   25686:	b538      	push	{r3, r4, r5, lr}
   25688:	460c      	mov	r4, r1
	switch (data_len) {
   2568a:	d00d      	beq.n	256a8 <bt_uuid_create+0x24>
   2568c:	2a10      	cmp	r2, #16
   2568e:	d019      	beq.n	256c4 <bt_uuid_create+0x40>
   25690:	2a02      	cmp	r2, #2
   25692:	f04f 0300 	mov.w	r3, #0
   25696:	d11b      	bne.n	256d0 <bt_uuid_create+0x4c>
		uuid->type = BT_UUID_TYPE_16;
   25698:	7003      	strb	r3, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
   2569a:	784a      	ldrb	r2, [r1, #1]
   2569c:	780b      	ldrb	r3, [r1, #0]
   2569e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   256a2:	8043      	strh	r3, [r0, #2]
	return true;
   256a4:	2001      	movs	r0, #1
}
   256a6:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   256a8:	2301      	movs	r3, #1
   256aa:	7003      	strb	r3, [r0, #0]
   256ac:	78a2      	ldrb	r2, [r4, #2]
   256ae:	78c9      	ldrb	r1, [r1, #3]
   256b0:	7865      	ldrb	r5, [r4, #1]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   256b2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((u16_t)src[1] << 8) | src[0];
   256b6:	7822      	ldrb	r2, [r4, #0]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   256b8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   256bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   256c0:	6042      	str	r2, [r0, #4]
		break;
   256c2:	e7ef      	b.n	256a4 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   256c4:	2302      	movs	r3, #2
   256c6:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   256ca:	f7ff fce1 	bl	25090 <memcpy>
		break;
   256ce:	e7e9      	b.n	256a4 <bt_uuid_create+0x20>
	switch (data_len) {
   256d0:	4618      	mov	r0, r3
   256d2:	e7e8      	b.n	256a6 <bt_uuid_create+0x22>

000256d4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   256d4:	f3bf 8f5b 	dmb	ish
   256d8:	6800      	ldr	r0, [r0, #0]
   256da:	f3bf 8f5b 	dmb	ish
}
   256de:	4770      	bx	lr

000256e0 <bt_addr_le_copy>:
   256e0:	2207      	movs	r2, #7
   256e2:	f7ff bcd5 	b.w	25090 <memcpy>

000256e6 <atomic_or>:
{
   256e6:	4603      	mov	r3, r0
}
   256e8:	f3bf 8f5b 	dmb	ish
   256ec:	e853 0f00 	ldrex	r0, [r3]
   256f0:	ea40 0201 	orr.w	r2, r0, r1
   256f4:	e843 2c00 	strex	ip, r2, [r3]
   256f8:	f1bc 0f00 	cmp.w	ip, #0
   256fc:	d1f6      	bne.n	256ec <atomic_or+0x6>
   256fe:	f3bf 8f5b 	dmb	ish
   25702:	4770      	bx	lr

00025704 <atomic_test_and_set_bit>:
{
   25704:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   25706:	2301      	movs	r3, #1
   25708:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2570c:	f7ff ffeb 	bl	256e6 <atomic_or>
	return (old & mask) != 0;
   25710:	4201      	tst	r1, r0
}
   25712:	bf14      	ite	ne
   25714:	2001      	movne	r0, #1
   25716:	2000      	moveq	r0, #0
   25718:	bd08      	pop	{r3, pc}

0002571a <atomic_and>:
{
   2571a:	4603      	mov	r3, r0
}
   2571c:	f3bf 8f5b 	dmb	ish
   25720:	e853 0f00 	ldrex	r0, [r3]
   25724:	ea00 0201 	and.w	r2, r0, r1
   25728:	e843 2c00 	strex	ip, r2, [r3]
   2572c:	f1bc 0f00 	cmp.w	ip, #0
   25730:	d1f6      	bne.n	25720 <atomic_and+0x6>
   25732:	f3bf 8f5b 	dmb	ish
   25736:	4770      	bx	lr

00025738 <atomic_set_bit_to>:
{
   25738:	460b      	mov	r3, r1
   2573a:	b410      	push	{r4}
   2573c:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2573e:	f001 041f 	and.w	r4, r1, #31
   25742:	2101      	movs	r1, #1
   25744:	40a1      	lsls	r1, r4
	if (val) {
   25746:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2574a:	b112      	cbz	r2, 25752 <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   2574c:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2574e:	f7ff bfca 	b.w	256e6 <atomic_or>
}
   25752:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25754:	43c9      	mvns	r1, r1
   25756:	f7ff bfe0 	b.w	2571a <atomic_and>

0002575a <le_adv_set_private_addr.isra.0>:
static int le_adv_set_private_addr(struct bt_le_ext_adv *adv)
   2575a:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2575c:	2106      	movs	r1, #6
   2575e:	4668      	mov	r0, sp
   25760:	f001 feb8 	bl	274d4 <bt_rand>
	if (err) {
   25764:	b940      	cbnz	r0, 25778 <le_adv_set_private_addr.isra.0+0x1e>
	nrpa.val[5] &= 0x3f;
   25766:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   2576a:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   2576c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   25770:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   25774:	f7e1 fdba 	bl	72ec <set_random_address>
}
   25778:	b003      	add	sp, #12
   2577a:	f85d fb04 	ldr.w	pc, [sp], #4

0002577e <bt_hci_disconnect>:
{
   2577e:	b570      	push	{r4, r5, r6, lr}
   25780:	4606      	mov	r6, r0
   25782:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   25784:	f240 4006 	movw	r0, #1030	; 0x406
   25788:	2103      	movs	r1, #3
   2578a:	f7e1 fadf 	bl	6d4c <bt_hci_cmd_create>
	if (!buf) {
   2578e:	4604      	mov	r4, r0
   25790:	b160      	cbz	r0, 257ac <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   25792:	2103      	movs	r1, #3
   25794:	3008      	adds	r0, #8
   25796:	f7f8 ff41 	bl	1e61c <net_buf_simple_add>
	disconn->reason = reason;
   2579a:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   2579c:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   2579e:	4621      	mov	r1, r4
   257a0:	f240 4006 	movw	r0, #1030	; 0x406
}
   257a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   257a8:	f7e1 bb18 	b.w	6ddc <bt_hci_cmd_send>
}
   257ac:	f06f 0036 	mvn.w	r0, #54	; 0x36
   257b0:	bd70      	pop	{r4, r5, r6, pc}

000257b2 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   257b2:	8802      	ldrh	r2, [r0, #0]
   257b4:	8843      	ldrh	r3, [r0, #2]
   257b6:	429a      	cmp	r2, r3
{
   257b8:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   257ba:	d818      	bhi.n	257ee <bt_le_conn_params_valid+0x3c>
   257bc:	2a05      	cmp	r2, #5
   257be:	d916      	bls.n	257ee <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   257c0:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   257c4:	d813      	bhi.n	257ee <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   257c6:	8884      	ldrh	r4, [r0, #4]
   257c8:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   257cc:	d20f      	bcs.n	257ee <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   257ce:	88c1      	ldrh	r1, [r0, #6]
   257d0:	f1a1 020a 	sub.w	r2, r1, #10
   257d4:	b292      	uxth	r2, r2
   257d6:	f640 4076 	movw	r0, #3190	; 0xc76
   257da:	4282      	cmp	r2, r0
   257dc:	d807      	bhi.n	257ee <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
   257de:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   257e2:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   257e6:	bf34      	ite	cc
   257e8:	2001      	movcc	r0, #1
   257ea:	2000      	movcs	r0, #0
}
   257ec:	bd10      	pop	{r4, pc}
		return false;
   257ee:	2000      	movs	r0, #0
   257f0:	e7fc      	b.n	257ec <bt_le_conn_params_valid+0x3a>

000257f2 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   257f2:	2301      	movs	r3, #1
{
   257f4:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   257f6:	2106      	movs	r1, #6
{
   257f8:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   257fa:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   257fe:	f001 fe69 	bl	274d4 <bt_rand>
	if (err) {
   25802:	b918      	cbnz	r0, 2580c <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   25804:	79a3      	ldrb	r3, [r4, #6]
   25806:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2580a:	71a3      	strb	r3, [r4, #6]
}
   2580c:	bd10      	pop	{r4, pc}

0002580e <bt_send>:
		return bt_hci_ecc_send(buf);
   2580e:	f7e0 bbc1 	b.w	5f94 <bt_hci_ecc_send>

00025812 <bt_addr_le_is_bonded>:
}
   25812:	2000      	movs	r0, #0
   25814:	4770      	bx	lr

00025816 <bt_le_adv_start>:
{
   25816:	b513      	push	{r0, r1, r4, lr}
	if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   25818:	6844      	ldr	r4, [r0, #4]
   2581a:	f014 0410 	ands.w	r4, r4, #16
   2581e:	d106      	bne.n	2582e <bt_le_adv_start+0x18>
	return bt_le_adv_start_legacy(param, ad, ad_len, sd, sd_len, peer);
   25820:	9401      	str	r4, [sp, #4]
   25822:	9c04      	ldr	r4, [sp, #16]
   25824:	9400      	str	r4, [sp, #0]
   25826:	f7e2 fbff 	bl	8028 <bt_le_adv_start_legacy>
}
   2582a:	b002      	add	sp, #8
   2582c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2582e:	f06f 0015 	mvn.w	r0, #21
   25832:	e7fa      	b.n	2582a <bt_le_adv_start+0x14>

00025834 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   25834:	6880      	ldr	r0, [r0, #8]
   25836:	f7e2 bdc9 	b.w	83cc <enh_conn_complete>

0002583a <le_legacy_conn_complete>:
{
   2583a:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2583c:	6881      	ldr	r1, [r0, #8]
{
   2583e:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   25840:	780b      	ldrb	r3, [r1, #0]
   25842:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   25846:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   2584a:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   2584e:	78cb      	ldrb	r3, [r1, #3]
   25850:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   25854:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   25858:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   2585c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   25860:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   25864:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   25868:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   2586c:	7c4b      	ldrb	r3, [r1, #17]
   2586e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   25872:	a803      	add	r0, sp, #12
   25874:	3104      	adds	r1, #4
   25876:	f7ff ff33 	bl	256e0 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2587a:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   2587c:	4669      	mov	r1, sp
   2587e:	2206      	movs	r2, #6
   25880:	f10d 0013 	add.w	r0, sp, #19
   25884:	9400      	str	r4, [sp, #0]
   25886:	f8ad 4004 	strh.w	r4, [sp, #4]
   2588a:	f7ff fc01 	bl	25090 <memcpy>
   2588e:	2206      	movs	r2, #6
   25890:	4669      	mov	r1, sp
   25892:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   25896:	9400      	str	r4, [sp, #0]
   25898:	f8ad 4004 	strh.w	r4, [sp, #4]
   2589c:	f7ff fbf8 	bl	25090 <memcpy>
	enh_conn_complete(&enh);
   258a0:	a802      	add	r0, sp, #8
   258a2:	f7e2 fd93 	bl	83cc <enh_conn_complete>
}
   258a6:	b00a      	add	sp, #40	; 0x28
   258a8:	bd10      	pop	{r4, pc}

000258aa <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   258aa:	f3bf 8f5b 	dmb	ish
   258ae:	6800      	ldr	r0, [r0, #0]
   258b0:	f3bf 8f5b 	dmb	ish
}
   258b4:	4770      	bx	lr

000258b6 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   258b6:	8983      	ldrh	r3, [r0, #12]
{
   258b8:	b510      	push	{r4, lr}
   258ba:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   258bc:	b12b      	cbz	r3, 258ca <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   258be:	6900      	ldr	r0, [r0, #16]
   258c0:	f7f8 fde6 	bl	1e490 <net_buf_unref>
	conn->rx = NULL;
   258c4:	2300      	movs	r3, #0
   258c6:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   258c8:	81a3      	strh	r3, [r4, #12]
}
   258ca:	bd10      	pop	{r4, pc}

000258cc <atomic_dec>:
{
   258cc:	4603      	mov	r3, r0
}
   258ce:	f3bf 8f5b 	dmb	ish
   258d2:	e853 0f00 	ldrex	r0, [r3]
   258d6:	1e42      	subs	r2, r0, #1
   258d8:	e843 2100 	strex	r1, r2, [r3]
   258dc:	2900      	cmp	r1, #0
   258de:	d1f8      	bne.n	258d2 <atomic_dec+0x6>
   258e0:	f3bf 8f5b 	dmb	ish
   258e4:	4770      	bx	lr

000258e6 <atomic_inc>:
{
   258e6:	4603      	mov	r3, r0
}
   258e8:	f3bf 8f5b 	dmb	ish
   258ec:	e853 0f00 	ldrex	r0, [r3]
   258f0:	1c42      	adds	r2, r0, #1
   258f2:	e843 2100 	strex	r1, r2, [r3]
   258f6:	2900      	cmp	r1, #0
   258f8:	d1f8      	bne.n	258ec <atomic_inc+0x6>
   258fa:	f3bf 8f5b 	dmb	ish
   258fe:	4770      	bx	lr

00025900 <tx_notify>:
{
   25900:	b570      	push	{r4, r5, r6, lr}
   25902:	4604      	mov	r4, r0
	__asm__ volatile(
   25904:	f04f 0220 	mov.w	r2, #32
   25908:	f3ef 8311 	mrs	r3, BASEPRI
   2590c:	f382 8811 	msr	BASEPRI, r2
   25910:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   25914:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   25916:	b920      	cbnz	r0, 25922 <tx_notify+0x22>
	__asm__ volatile(
   25918:	f383 8811 	msr	BASEPRI, r3
   2591c:	f3bf 8f6f 	isb	sy
}
   25920:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25922:	6a61      	ldr	r1, [r4, #36]	; 0x24
   25924:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   25926:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25928:	4288      	cmp	r0, r1
	list->tail = node;
   2592a:	bf08      	it	eq
   2592c:	6262      	streq	r2, [r4, #36]	; 0x24
   2592e:	f383 8811 	msr	BASEPRI, r3
   25932:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   25936:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2593a:	f7e2 ffe3 	bl	8904 <tx_free>
		cb(conn, user_data);
   2593e:	4631      	mov	r1, r6
   25940:	4620      	mov	r0, r4
   25942:	47a8      	blx	r5
	while (1) {
   25944:	e7de      	b.n	25904 <tx_notify+0x4>

00025946 <tx_complete_work>:
	tx_notify(conn);
   25946:	3828      	subs	r0, #40	; 0x28
   25948:	f7ff bfda 	b.w	25900 <tx_notify>

0002594c <bt_conn_get_security>:
}
   2594c:	2001      	movs	r0, #1
   2594e:	4770      	bx	lr

00025950 <bt_conn_is_peer_addr_le>:
{
   25950:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   25952:	7a03      	ldrb	r3, [r0, #8]
   25954:	428b      	cmp	r3, r1
{
   25956:	4604      	mov	r4, r0
   25958:	4615      	mov	r5, r2
	if (id != conn->id) {
   2595a:	d115      	bne.n	25988 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2595c:	f100 0174 	add.w	r1, r0, #116	; 0x74
   25960:	2207      	movs	r2, #7
   25962:	4628      	mov	r0, r5
   25964:	f7ff fb84 	bl	25070 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   25968:	b180      	cbz	r0, 2598c <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   2596a:	78e3      	ldrb	r3, [r4, #3]
   2596c:	2207      	movs	r2, #7
   2596e:	b943      	cbnz	r3, 25982 <bt_conn_is_peer_addr_le+0x32>
   25970:	f104 0182 	add.w	r1, r4, #130	; 0x82
   25974:	4628      	mov	r0, r5
   25976:	f7ff fb7b 	bl	25070 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2597a:	fab0 f080 	clz	r0, r0
   2597e:	0940      	lsrs	r0, r0, #5
}
   25980:	bd38      	pop	{r3, r4, r5, pc}
   25982:	f104 017b 	add.w	r1, r4, #123	; 0x7b
   25986:	e7f5      	b.n	25974 <bt_conn_is_peer_addr_le+0x24>
		return false;
   25988:	2000      	movs	r0, #0
   2598a:	e7f9      	b.n	25980 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2598c:	2001      	movs	r0, #1
   2598e:	e7f7      	b.n	25980 <bt_conn_is_peer_addr_le+0x30>

00025990 <bt_conn_ref>:
{
   25990:	b510      	push	{r4, lr}
   25992:	4604      	mov	r4, r0
	atomic_val_t old = atomic_inc(&conn->ref);
   25994:	3050      	adds	r0, #80	; 0x50
   25996:	f7ff ffa6 	bl	258e6 <atomic_inc>
}
   2599a:	4620      	mov	r0, r4
   2599c:	bd10      	pop	{r4, pc}

0002599e <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   2599e:	3050      	adds	r0, #80	; 0x50
   259a0:	f7ff bf94 	b.w	258cc <atomic_dec>

000259a4 <bt_conn_disconnect>:
{
   259a4:	b538      	push	{r3, r4, r5, lr}
   259a6:	7a83      	ldrb	r3, [r0, #10]
   259a8:	3b01      	subs	r3, #1
   259aa:	4604      	mov	r4, r0
   259ac:	2b06      	cmp	r3, #6
   259ae:	d805      	bhi.n	259bc <bt_conn_disconnect+0x18>
   259b0:	e8df f003 	tbb	[pc, r3]
   259b4:	0e040408 	.word	0x0e040408
   259b8:	160c      	.short	0x160c
   259ba:	0c          	.byte	0x0c
   259bb:	00          	.byte	0x00
	switch (conn->state) {
   259bc:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   259c0:	4628      	mov	r0, r5
   259c2:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   259c4:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   259c6:	2100      	movs	r1, #0
   259c8:	f7e3 fa8e 	bl	8ee8 <bt_conn_set_state>
		return 0;
   259cc:	2500      	movs	r5, #0
   259ce:	e7f7      	b.n	259c0 <bt_conn_disconnect+0x1c>
		conn->err = reason;
   259d0:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   259d2:	2100      	movs	r1, #0
   259d4:	f7e3 fa88 	bl	8ee8 <bt_conn_set_state>
}
   259d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   259dc:	f7e2 bc2a 	b.w	8234 <bt_le_adv_stop>
	err = bt_hci_disconnect(conn->handle, reason);
   259e0:	8800      	ldrh	r0, [r0, #0]
   259e2:	f7ff fecc 	bl	2577e <bt_hci_disconnect>
	if (err) {
   259e6:	4605      	mov	r5, r0
   259e8:	2800      	cmp	r0, #0
   259ea:	d1e9      	bne.n	259c0 <bt_conn_disconnect+0x1c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   259ec:	2107      	movs	r1, #7
   259ee:	4620      	mov	r0, r4
   259f0:	f7e3 fa7a 	bl	8ee8 <bt_conn_set_state>
	return 0;
   259f4:	e7e4      	b.n	259c0 <bt_conn_disconnect+0x1c>

000259f6 <bt_conn_le_conn_update>:
{
   259f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   259f8:	4607      	mov	r7, r0
   259fa:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   259fc:	f242 0013 	movw	r0, #8211	; 0x2013
   25a00:	210e      	movs	r1, #14
   25a02:	f7e1 f9a3 	bl	6d4c <bt_hci_cmd_create>
	if (!buf) {
   25a06:	4606      	mov	r6, r0
   25a08:	b1d0      	cbz	r0, 25a40 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   25a0a:	210e      	movs	r1, #14
   25a0c:	3008      	adds	r0, #8
   25a0e:	f7f8 fe05 	bl	1e61c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   25a12:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   25a14:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   25a16:	2100      	movs	r1, #0
   25a18:	f7ff fb65 	bl	250e6 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   25a1c:	883b      	ldrh	r3, [r7, #0]
   25a1e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   25a20:	882b      	ldrh	r3, [r5, #0]
   25a22:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   25a24:	886b      	ldrh	r3, [r5, #2]
   25a26:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   25a28:	88ab      	ldrh	r3, [r5, #4]
   25a2a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   25a2c:	88eb      	ldrh	r3, [r5, #6]
   25a2e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   25a30:	4631      	mov	r1, r6
   25a32:	2200      	movs	r2, #0
}
   25a34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   25a38:	f242 0013 	movw	r0, #8211	; 0x2013
   25a3c:	f7e1 bafe 	b.w	703c <bt_hci_cmd_send_sync>
}
   25a40:	f06f 0036 	mvn.w	r0, #54	; 0x36
   25a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025a46 <l2cap_connected>:
}
   25a46:	4770      	bx	lr

00025a48 <l2cap_disconnected>:
   25a48:	4770      	bx	lr

00025a4a <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25a4a:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   25a4c:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25a4e:	b17b      	cbz	r3, 25a70 <bt_l2cap_chan_remove+0x26>
   25a50:	3b08      	subs	r3, #8
   25a52:	2200      	movs	r2, #0
   25a54:	b163      	cbz	r3, 25a70 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   25a56:	428b      	cmp	r3, r1
   25a58:	f103 0408 	add.w	r4, r3, #8
   25a5c:	d10f      	bne.n	25a7e <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   25a5e:	688b      	ldr	r3, [r1, #8]
   25a60:	b93a      	cbnz	r2, 25a72 <bt_l2cap_chan_remove+0x28>
   25a62:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
	list->head = node;
   25a64:	6483      	str	r3, [r0, #72]	; 0x48
Z_GENLIST_REMOVE(slist, snode)
   25a66:	4294      	cmp	r4, r2
   25a68:	d100      	bne.n	25a6c <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   25a6a:	64c3      	str	r3, [r0, #76]	; 0x4c
	parent->next = child;
   25a6c:	2300      	movs	r3, #0
   25a6e:	608b      	str	r3, [r1, #8]
}
   25a70:	bd10      	pop	{r4, pc}
   25a72:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   25a74:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   25a76:	429c      	cmp	r4, r3
	list->tail = node;
   25a78:	bf08      	it	eq
   25a7a:	64c2      	streq	r2, [r0, #76]	; 0x4c
}
   25a7c:	e7f6      	b.n	25a6c <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25a7e:	2c00      	cmp	r4, #0
   25a80:	d0f6      	beq.n	25a70 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25a82:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25a84:	2b00      	cmp	r3, #0
   25a86:	d0f3      	beq.n	25a70 <bt_l2cap_chan_remove+0x26>
   25a88:	3b08      	subs	r3, #8
   25a8a:	4622      	mov	r2, r4
   25a8c:	e7e2      	b.n	25a54 <bt_l2cap_chan_remove+0xa>

00025a8e <bt_l2cap_chan_del>:
	if (!chan->conn) {
   25a8e:	6803      	ldr	r3, [r0, #0]
{
   25a90:	b510      	push	{r4, lr}
   25a92:	4604      	mov	r4, r0
	if (!chan->conn) {
   25a94:	b12b      	cbz	r3, 25aa2 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
   25a96:	6843      	ldr	r3, [r0, #4]
   25a98:	685b      	ldr	r3, [r3, #4]
   25a9a:	b103      	cbz	r3, 25a9e <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
   25a9c:	4798      	blx	r3
	chan->conn = NULL;
   25a9e:	2300      	movs	r3, #0
   25aa0:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   25aa2:	68e3      	ldr	r3, [r4, #12]
   25aa4:	b11b      	cbz	r3, 25aae <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
   25aa6:	4620      	mov	r0, r4
}
   25aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
   25aac:	4718      	bx	r3
}
   25aae:	bd10      	pop	{r4, pc}

00025ab0 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25ab0:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   25ab2:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25ab4:	b18b      	cbz	r3, 25ada <bt_l2cap_disconnected+0x2a>
   25ab6:	f1b3 0008 	subs.w	r0, r3, #8
   25aba:	d00e      	beq.n	25ada <bt_l2cap_disconnected+0x2a>
   25abc:	681c      	ldr	r4, [r3, #0]
   25abe:	b104      	cbz	r4, 25ac2 <bt_l2cap_disconnected+0x12>
   25ac0:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   25ac2:	f7ff ffe4 	bl	25a8e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25ac6:	b144      	cbz	r4, 25ada <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25ac8:	f114 0308 	adds.w	r3, r4, #8
   25acc:	d002      	beq.n	25ad4 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25ace:	68a3      	ldr	r3, [r4, #8]
   25ad0:	b103      	cbz	r3, 25ad4 <bt_l2cap_disconnected+0x24>
   25ad2:	3b08      	subs	r3, #8
{
   25ad4:	4620      	mov	r0, r4
   25ad6:	461c      	mov	r4, r3
   25ad8:	e7f3      	b.n	25ac2 <bt_l2cap_disconnected+0x12>
}
   25ada:	bd10      	pop	{r4, pc}

00025adc <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   25adc:	3104      	adds	r1, #4
   25ade:	f7e3 bbb3 	b.w	9248 <bt_conn_create_pdu_timeout>

00025ae2 <bt_l2cap_send_cb>:
{
   25ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25ae6:	4614      	mov	r4, r2
   25ae8:	4605      	mov	r5, r0
   25aea:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   25aec:	f102 0008 	add.w	r0, r2, #8
   25af0:	2104      	movs	r1, #4
{
   25af2:	461e      	mov	r6, r3
   25af4:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   25af8:	f7f8 fd2c 	bl	1e554 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   25afc:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   25afe:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   25b00:	3a04      	subs	r2, #4
   25b02:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   25b04:	4643      	mov	r3, r8
   25b06:	4632      	mov	r2, r6
   25b08:	4621      	mov	r1, r4
   25b0a:	4628      	mov	r0, r5
}
   25b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   25b10:	f7e3 b906 	b.w	8d20 <bt_conn_send_cb>

00025b14 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25b14:	6c80      	ldr	r0, [r0, #72]	; 0x48
   25b16:	b160      	cbz	r0, 25b32 <bt_l2cap_le_lookup_tx_cid+0x1e>
   25b18:	3808      	subs	r0, #8
   25b1a:	b900      	cbnz	r0, 25b1e <bt_l2cap_le_lookup_tx_cid+0xa>
   25b1c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   25b1e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   25b22:	428b      	cmp	r3, r1
   25b24:	d005      	beq.n	25b32 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25b26:	f110 0308 	adds.w	r3, r0, #8
   25b2a:	d001      	beq.n	25b30 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25b2c:	6880      	ldr	r0, [r0, #8]
   25b2e:	e7f2      	b.n	25b16 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   25b30:	4618      	mov	r0, r3
}
   25b32:	4770      	bx	lr

00025b34 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25b34:	6c80      	ldr	r0, [r0, #72]	; 0x48
   25b36:	b158      	cbz	r0, 25b50 <bt_l2cap_le_lookup_rx_cid+0x1c>
   25b38:	3808      	subs	r0, #8
   25b3a:	b900      	cbnz	r0, 25b3e <bt_l2cap_le_lookup_rx_cid+0xa>
   25b3c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   25b3e:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   25b40:	428b      	cmp	r3, r1
   25b42:	d005      	beq.n	25b50 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25b44:	f110 0308 	adds.w	r3, r0, #8
   25b48:	d001      	beq.n	25b4e <bt_l2cap_le_lookup_rx_cid+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25b4a:	6880      	ldr	r0, [r0, #8]
   25b4c:	e7f3      	b.n	25b36 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   25b4e:	4618      	mov	r0, r3
}
   25b50:	4770      	bx	lr

00025b52 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   25b52:	4770      	bx	lr

00025b54 <att_prepare_write_req>:
}
   25b54:	2006      	movs	r0, #6
   25b56:	4770      	bx	lr

00025b58 <att_op_get_type>:
	switch (op) {
   25b58:	281e      	cmp	r0, #30
   25b5a:	d816      	bhi.n	25b8a <att_op_get_type+0x32>
   25b5c:	b308      	cbz	r0, 25ba2 <att_op_get_type+0x4a>
   25b5e:	1e43      	subs	r3, r0, #1
   25b60:	2b1d      	cmp	r3, #29
   25b62:	d81e      	bhi.n	25ba2 <att_op_get_type+0x4a>
   25b64:	e8df f003 	tbb	[pc, r3]
   25b68:	23172317 	.word	0x23172317
   25b6c:	23172317 	.word	0x23172317
   25b70:	23172317 	.word	0x23172317
   25b74:	23172317 	.word	0x23172317
   25b78:	1d172317 	.word	0x1d172317
   25b7c:	2317231d 	.word	0x2317231d
   25b80:	1d191d17 	.word	0x1d191d17
   25b84:	0f1b      	.short	0x0f1b
   25b86:	2004      	movs	r0, #4
   25b88:	4770      	bx	lr
   25b8a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   25b8e:	2b52      	cmp	r3, #82	; 0x52
   25b90:	d107      	bne.n	25ba2 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   25b92:	2000      	movs	r0, #0
}
   25b94:	4770      	bx	lr
		return ATT_RESPONSE;
   25b96:	2002      	movs	r0, #2
   25b98:	4770      	bx	lr
		return ATT_NOTIFICATION;
   25b9a:	2003      	movs	r0, #3
   25b9c:	4770      	bx	lr
		return ATT_INDICATION;
   25b9e:	2005      	movs	r0, #5
   25ba0:	4770      	bx	lr
		return ATT_COMMAND;
   25ba2:	f010 0f40 	tst.w	r0, #64	; 0x40
   25ba6:	bf0c      	ite	eq
   25ba8:	2006      	moveq	r0, #6
   25baa:	2000      	movne	r0, #0
   25bac:	4770      	bx	lr
		return ATT_REQUEST;
   25bae:	2001      	movs	r0, #1
   25bb0:	4770      	bx	lr

00025bb2 <bt_gatt_foreach_attr>:
{
   25bb2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   25bb4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   25bb8:	2300      	movs	r3, #0
   25bba:	9300      	str	r3, [sp, #0]
   25bbc:	461a      	mov	r2, r3
   25bbe:	f7e5 fa55 	bl	b06c <bt_gatt_foreach_attr_type>
}
   25bc2:	b005      	add	sp, #20
   25bc4:	f85d fb04 	ldr.w	pc, [sp], #4

00025bc8 <read_group_cb>:
{
   25bc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
   25bcc:	680e      	ldr	r6, [r1, #0]
{
   25bce:	4605      	mov	r5, r0
   25bd0:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   25bd2:	f04f 0800 	mov.w	r8, #0
   25bd6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   25bda:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
   25bdc:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   25bde:	f88d 8008 	strb.w	r8, [sp, #8]
   25be2:	a902      	add	r1, sp, #8
   25be4:	f8ad 300a 	strh.w	r3, [sp, #10]
   25be8:	f7ff fd22 	bl	25630 <bt_uuid_cmp>
   25bec:	b198      	cbz	r0, 25c16 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   25bee:	f642 0301 	movw	r3, #10241	; 0x2801
   25bf2:	6828      	ldr	r0, [r5, #0]
   25bf4:	f88d 800c 	strb.w	r8, [sp, #12]
   25bf8:	a903      	add	r1, sp, #12
   25bfa:	f8ad 300e 	strh.w	r3, [sp, #14]
   25bfe:	f7ff fd17 	bl	25630 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   25c02:	b140      	cbz	r0, 25c16 <read_group_cb+0x4e>
		if (data->group &&
   25c04:	6923      	ldr	r3, [r4, #16]
   25c06:	b123      	cbz	r3, 25c12 <read_group_cb+0x4a>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   25c08:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
   25c0a:	8859      	ldrh	r1, [r3, #2]
   25c0c:	4291      	cmp	r1, r2
   25c0e:	d200      	bcs.n	25c12 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   25c10:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   25c12:	2001      	movs	r0, #1
   25c14:	e012      	b.n	25c3c <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   25c16:	6861      	ldr	r1, [r4, #4]
   25c18:	6828      	ldr	r0, [r5, #0]
   25c1a:	f7ff fd09 	bl	25630 <bt_uuid_cmp>
   25c1e:	b110      	cbz	r0, 25c26 <read_group_cb+0x5e>
		data->group = NULL;
   25c20:	2300      	movs	r3, #0
   25c22:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   25c24:	e7f5      	b.n	25c12 <read_group_cb+0x4a>
	if (data->rsp->len &&
   25c26:	68e3      	ldr	r3, [r4, #12]
   25c28:	68a0      	ldr	r0, [r4, #8]
   25c2a:	781a      	ldrb	r2, [r3, #0]
   25c2c:	b14a      	cbz	r2, 25c42 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
   25c2e:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
   25c32:	8981      	ldrh	r1, [r0, #12]
   25c34:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   25c36:	4293      	cmp	r3, r2
   25c38:	da03      	bge.n	25c42 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
   25c3a:	2000      	movs	r0, #0
}
   25c3c:	b004      	add	sp, #16
   25c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   25c42:	2104      	movs	r1, #4
   25c44:	3008      	adds	r0, #8
   25c46:	f7f8 fce9 	bl	1e61c <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   25c4a:	68a1      	ldr	r1, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   25c4c:	8a2b      	ldrh	r3, [r5, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   25c4e:	898a      	ldrh	r2, [r1, #12]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   25c50:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   25c52:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   25c54:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   25c56:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
   25c5a:	6889      	ldr	r1, [r1, #8]
   25c5c:	2600      	movs	r6, #0
   25c5e:	1a9b      	subs	r3, r3, r2
   25c60:	9600      	str	r6, [sp, #0]
   25c62:	440a      	add	r2, r1
   25c64:	f8d5 8004 	ldr.w	r8, [r5, #4]
   25c68:	4629      	mov	r1, r5
   25c6a:	b29b      	uxth	r3, r3
   25c6c:	4638      	mov	r0, r7
   25c6e:	47c0      	blx	r8
	if (read < 0) {
   25c70:	1e01      	subs	r1, r0, #0
   25c72:	dbe2      	blt.n	25c3a <read_group_cb+0x72>
	if (!data->rsp->len) {
   25c74:	68e5      	ldr	r5, [r4, #12]
   25c76:	68a0      	ldr	r0, [r4, #8]
   25c78:	782a      	ldrb	r2, [r5, #0]
   25c7a:	1d0b      	adds	r3, r1, #4
   25c7c:	b922      	cbnz	r2, 25c88 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
   25c7e:	702b      	strb	r3, [r5, #0]
	net_buf_add(data->buf, read);
   25c80:	3008      	adds	r0, #8
   25c82:	f7f8 fccb 	bl	1e61c <net_buf_simple_add>
   25c86:	e7c4      	b.n	25c12 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   25c88:	429a      	cmp	r2, r3
   25c8a:	d0f9      	beq.n	25c80 <read_group_cb+0xb8>
		data->buf->len -= sizeof(*data->group);
   25c8c:	8983      	ldrh	r3, [r0, #12]
   25c8e:	3b04      	subs	r3, #4
   25c90:	8183      	strh	r3, [r0, #12]
		return false;
   25c92:	e7d2      	b.n	25c3a <read_group_cb+0x72>

00025c94 <read_type_cb>:
{
   25c94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
   25c98:	f8d1 8000 	ldr.w	r8, [r1]
{
   25c9c:	4606      	mov	r6, r0
   25c9e:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   25ca0:	6800      	ldr	r0, [r0, #0]
   25ca2:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
   25ca4:	f8d8 9000 	ldr.w	r9, [r8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   25ca8:	f7ff fcc2 	bl	25630 <bt_uuid_cmp>
   25cac:	4607      	mov	r7, r0
   25cae:	2800      	cmp	r0, #0
   25cb0:	d14a      	bne.n	25d48 <read_type_cb+0xb4>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25cb2:	2215      	movs	r2, #21
   25cb4:	4631      	mov	r1, r6
   25cb6:	4648      	mov	r0, r9
   25cb8:	f000 fb35 	bl	26326 <bt_gatt_check_perm>
   25cbc:	4604      	mov	r4, r0
   25cbe:	7528      	strb	r0, [r5, #20]
	if (data->err) {
   25cc0:	b140      	cbz	r0, 25cd4 <read_type_cb+0x40>
		if (data->rsp->len) {
   25cc2:	68eb      	ldr	r3, [r5, #12]
   25cc4:	781c      	ldrb	r4, [r3, #0]
   25cc6:	b10c      	cbz	r4, 25ccc <read_type_cb+0x38>
			data->err = 0x00;
   25cc8:	752f      	strb	r7, [r5, #20]
		return BT_GATT_ITER_STOP;
   25cca:	463c      	mov	r4, r7
}
   25ccc:	4620      	mov	r0, r4
   25cce:	b003      	add	sp, #12
   25cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   25cd4:	68a8      	ldr	r0, [r5, #8]
   25cd6:	2102      	movs	r1, #2
   25cd8:	3008      	adds	r0, #8
   25cda:	f7f8 fc9f 	bl	1e61c <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   25cde:	68a9      	ldr	r1, [r5, #8]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   25ce0:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   25ce2:	898a      	ldrh	r2, [r1, #12]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   25ce4:	6128      	str	r0, [r5, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   25ce6:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   25ce8:	f8b8 3042 	ldrh.w	r3, [r8, #66]	; 0x42
   25cec:	6889      	ldr	r1, [r1, #8]
   25cee:	9400      	str	r4, [sp, #0]
   25cf0:	1a9b      	subs	r3, r3, r2
   25cf2:	6877      	ldr	r7, [r6, #4]
   25cf4:	440a      	add	r2, r1
   25cf6:	b29b      	uxth	r3, r3
   25cf8:	4631      	mov	r1, r6
   25cfa:	4648      	mov	r0, r9
   25cfc:	47b8      	blx	r7
	if (read < 0) {
   25cfe:	1e01      	subs	r1, r0, #0
   25d00:	da07      	bge.n	25d12 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   25d02:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   25d06:	bf26      	itte	cs
   25d08:	4249      	negcs	r1, r1
   25d0a:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   25d0c:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   25d0e:	7529      	strb	r1, [r5, #20]
		return BT_GATT_ITER_STOP;
   25d10:	e7dc      	b.n	25ccc <read_type_cb+0x38>
	if (!data->rsp->len) {
   25d12:	68ee      	ldr	r6, [r5, #12]
   25d14:	68a8      	ldr	r0, [r5, #8]
   25d16:	7832      	ldrb	r2, [r6, #0]
   25d18:	1c8b      	adds	r3, r1, #2
   25d1a:	b97a      	cbnz	r2, 25d3c <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
   25d1c:	7033      	strb	r3, [r6, #0]
	net_buf_add(data->buf, read);
   25d1e:	3008      	adds	r0, #8
   25d20:	f7f8 fc7c 	bl	1e61c <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
   25d24:	68ab      	ldr	r3, [r5, #8]
   25d26:	f8b8 4042 	ldrh.w	r4, [r8, #66]	; 0x42
   25d2a:	8998      	ldrh	r0, [r3, #12]
   25d2c:	68eb      	ldr	r3, [r5, #12]
   25d2e:	1a24      	subs	r4, r4, r0
   25d30:	7818      	ldrb	r0, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   25d32:	4284      	cmp	r4, r0
   25d34:	bfd4      	ite	le
   25d36:	2400      	movle	r4, #0
   25d38:	2401      	movgt	r4, #1
   25d3a:	e7c7      	b.n	25ccc <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   25d3c:	429a      	cmp	r2, r3
   25d3e:	d0ee      	beq.n	25d1e <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
   25d40:	8983      	ldrh	r3, [r0, #12]
   25d42:	3b02      	subs	r3, #2
   25d44:	8183      	strh	r3, [r0, #12]
		return BT_GATT_ITER_STOP;
   25d46:	e7c1      	b.n	25ccc <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   25d48:	2401      	movs	r4, #1
   25d4a:	e7bf      	b.n	25ccc <read_type_cb+0x38>

00025d4c <find_info_cb>:
	if (!data->rsp) {
   25d4c:	688b      	ldr	r3, [r1, #8]
{
   25d4e:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = data->att;
   25d50:	680e      	ldr	r6, [r1, #0]
{
   25d52:	4605      	mov	r5, r0
   25d54:	460c      	mov	r4, r1
	if (!data->rsp) {
   25d56:	b963      	cbnz	r3, 25d72 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   25d58:	6848      	ldr	r0, [r1, #4]
   25d5a:	2101      	movs	r1, #1
   25d5c:	3008      	adds	r0, #8
   25d5e:	f7f8 fc5d 	bl	1e61c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   25d62:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   25d64:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   25d66:	781b      	ldrb	r3, [r3, #0]
   25d68:	2b00      	cmp	r3, #0
   25d6a:	bf0c      	ite	eq
   25d6c:	2301      	moveq	r3, #1
   25d6e:	2302      	movne	r3, #2
   25d70:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   25d72:	68a3      	ldr	r3, [r4, #8]
   25d74:	781b      	ldrb	r3, [r3, #0]
   25d76:	2b01      	cmp	r3, #1
   25d78:	d003      	beq.n	25d82 <find_info_cb+0x36>
   25d7a:	2b02      	cmp	r3, #2
   25d7c:	d01a      	beq.n	25db4 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   25d7e:	2000      	movs	r0, #0
   25d80:	e017      	b.n	25db2 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   25d82:	682b      	ldr	r3, [r5, #0]
   25d84:	781b      	ldrb	r3, [r3, #0]
   25d86:	2b00      	cmp	r3, #0
   25d88:	d1f9      	bne.n	25d7e <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   25d8a:	6860      	ldr	r0, [r4, #4]
   25d8c:	2104      	movs	r1, #4
   25d8e:	3008      	adds	r0, #8
   25d90:	f7f8 fc44 	bl	1e61c <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   25d94:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   25d96:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   25d98:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   25d9a:	682b      	ldr	r3, [r5, #0]
   25d9c:	885b      	ldrh	r3, [r3, #2]
   25d9e:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
   25da0:	6863      	ldr	r3, [r4, #4]
   25da2:	f8b6 0042 	ldrh.w	r0, [r6, #66]	; 0x42
   25da6:	899b      	ldrh	r3, [r3, #12]
   25da8:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   25daa:	2804      	cmp	r0, #4
   25dac:	bf94      	ite	ls
   25dae:	2000      	movls	r0, #0
   25db0:	2001      	movhi	r0, #1
}
   25db2:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   25db4:	682b      	ldr	r3, [r5, #0]
   25db6:	781b      	ldrb	r3, [r3, #0]
   25db8:	2b02      	cmp	r3, #2
   25dba:	d1e0      	bne.n	25d7e <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   25dbc:	6860      	ldr	r0, [r4, #4]
   25dbe:	2112      	movs	r1, #18
   25dc0:	3008      	adds	r0, #8
   25dc2:	f7f8 fc2b 	bl	1e61c <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   25dc6:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   25dc8:	8a2b      	ldrh	r3, [r5, #16]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   25dca:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   25dcc:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   25dce:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   25dd2:	3101      	adds	r1, #1
   25dd4:	f7ff f95c 	bl	25090 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
   25dd8:	6863      	ldr	r3, [r4, #4]
   25dda:	f8b6 0042 	ldrh.w	r0, [r6, #66]	; 0x42
   25dde:	899b      	ldrh	r3, [r3, #12]
   25de0:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   25de2:	2812      	cmp	r0, #18
   25de4:	e7e2      	b.n	25dac <find_info_cb+0x60>

00025de6 <att_exec_write_req>:
   25de6:	2006      	movs	r0, #6
   25de8:	4770      	bx	lr

00025dea <att_pdu_sent>:
{
   25dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25dee:	4607      	mov	r7, r0
	struct bt_att *att = att_get(conn);
   25df0:	f7e3 fdee 	bl	99d0 <att_get>
   25df4:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   25df6:	f100 08e0 	add.w	r8, r0, #224	; 0xe0
   25dfa:	2100      	movs	r1, #0
   25dfc:	4640      	mov	r0, r8
   25dfe:	f7f8 fa0f 	bl	1e220 <net_buf_get>
   25e02:	4604      	mov	r4, r0
   25e04:	b928      	cbnz	r0, 25e12 <att_pdu_sent+0x28>
	z_impl_k_sem_give(sem);
   25e06:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
}
   25e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25e0e:	f7fb be43 	b.w	21a98 <z_impl_k_sem_give>
		if (att->req && att->req->buf == buf) {
   25e12:	f8d5 609c 	ldr.w	r6, [r5, #156]	; 0x9c
   25e16:	b14e      	cbz	r6, 25e2c <att_pdu_sent+0x42>
   25e18:	6933      	ldr	r3, [r6, #16]
   25e1a:	42a3      	cmp	r3, r4
   25e1c:	d106      	bne.n	25e2c <att_pdu_sent+0x42>
	state->offset = net_buf_simple_headroom(buf);
   25e1e:	f104 0008 	add.w	r0, r4, #8
   25e22:	f002 f857 	bl	27ed4 <net_buf_simple_headroom>
	state->len = buf->len;
   25e26:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   25e28:	81b0      	strh	r0, [r6, #12]
	state->len = buf->len;
   25e2a:	81f3      	strh	r3, [r6, #14]
		if (!att_send(conn, buf, NULL, NULL)) {
   25e2c:	2300      	movs	r3, #0
   25e2e:	461a      	mov	r2, r3
   25e30:	4621      	mov	r1, r4
   25e32:	4638      	mov	r0, r7
   25e34:	f7e3 fd8c 	bl	9950 <att_send>
   25e38:	2800      	cmp	r0, #0
   25e3a:	d1de      	bne.n	25dfa <att_pdu_sent+0x10>
}
   25e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025e40 <att_cfm_sent>:
{
   25e40:	b538      	push	{r3, r4, r5, lr}
   25e42:	4604      	mov	r4, r0
   25e44:	460d      	mov	r5, r1
	struct bt_att *att = att_get(conn);
   25e46:	f7e3 fdc3 	bl	99d0 <att_get>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25e4a:	f3bf 8f5b 	dmb	ish
   25e4e:	f100 0398 	add.w	r3, r0, #152	; 0x98
   25e52:	e853 2f00 	ldrex	r2, [r3]
   25e56:	f022 0202 	bic.w	r2, r2, #2
   25e5a:	e843 2100 	strex	r1, r2, [r3]
   25e5e:	2900      	cmp	r1, #0
   25e60:	d1f7      	bne.n	25e52 <att_cfm_sent+0x12>
   25e62:	f3bf 8f5b 	dmb	ish
	att_pdu_sent(conn, user_data);
   25e66:	4629      	mov	r1, r5
   25e68:	4620      	mov	r0, r4
}
   25e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   25e6e:	f7ff bfbc 	b.w	25dea <att_pdu_sent>

00025e72 <att_rsp_sent>:
{
   25e72:	b538      	push	{r3, r4, r5, lr}
   25e74:	4604      	mov	r4, r0
   25e76:	460d      	mov	r5, r1
	struct bt_att *att = att_get(conn);
   25e78:	f7e3 fdaa 	bl	99d0 <att_get>
   25e7c:	f3bf 8f5b 	dmb	ish
   25e80:	f100 0398 	add.w	r3, r0, #152	; 0x98
   25e84:	e853 2f00 	ldrex	r2, [r3]
   25e88:	f022 0201 	bic.w	r2, r2, #1
   25e8c:	e843 2100 	strex	r1, r2, [r3]
   25e90:	2900      	cmp	r1, #0
   25e92:	d1f7      	bne.n	25e84 <att_rsp_sent+0x12>
   25e94:	f3bf 8f5b 	dmb	ish
	att_pdu_sent(conn, user_data);
   25e98:	4629      	mov	r1, r5
   25e9a:	4620      	mov	r0, r4
}
   25e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   25ea0:	f7ff bfa3 	b.w	25dea <att_pdu_sent>

00025ea4 <write_cb>:
{
   25ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25ea6:	460c      	mov	r4, r1
   25ea8:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   25eaa:	4601      	mov	r1, r0
   25eac:	222a      	movs	r2, #42	; 0x2a
   25eae:	6820      	ldr	r0, [r4, #0]
   25eb0:	f000 fa39 	bl	26326 <bt_gatt_check_perm>
   25eb4:	4605      	mov	r5, r0
   25eb6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   25eb8:	bb00      	cbnz	r0, 25efc <write_cb+0x58>
	if (!data->req) {
   25eba:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   25ebc:	68b7      	ldr	r7, [r6, #8]
   25ebe:	68e2      	ldr	r2, [r4, #12]
   25ec0:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   25ec2:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   25ec4:	bf14      	ite	ne
   25ec6:	2300      	movne	r3, #0
   25ec8:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   25eca:	9301      	str	r3, [sp, #4]
   25ecc:	8a63      	ldrh	r3, [r4, #18]
   25ece:	9300      	str	r3, [sp, #0]
   25ed0:	4631      	mov	r1, r6
   25ed2:	8a23      	ldrh	r3, [r4, #16]
   25ed4:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   25ed6:	1e03      	subs	r3, r0, #0
   25ed8:	db05      	blt.n	25ee6 <write_cb+0x42>
   25eda:	8a22      	ldrh	r2, [r4, #16]
   25edc:	4293      	cmp	r3, r2
   25ede:	d10b      	bne.n	25ef8 <write_cb+0x54>
	data->err = 0U;
   25ee0:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   25ee2:	2501      	movs	r5, #1
   25ee4:	e005      	b.n	25ef2 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   25ee6:	f113 0fff 	cmn.w	r3, #255	; 0xff
   25eea:	d305      	bcc.n	25ef8 <write_cb+0x54>
		return -err;
   25eec:	425b      	negs	r3, r3
   25eee:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   25ef0:	7523      	strb	r3, [r4, #20]
}
   25ef2:	4628      	mov	r0, r5
   25ef4:	b003      	add	sp, #12
   25ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   25ef8:	230e      	movs	r3, #14
   25efa:	e7f9      	b.n	25ef0 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   25efc:	2500      	movs	r5, #0
   25efe:	e7f8      	b.n	25ef2 <write_cb+0x4e>

00025f00 <read_cb>:
{
   25f00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25f04:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   25f06:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
   25f08:	f8d1 9000 	ldr.w	r9, [r1]
{
   25f0c:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   25f0e:	3008      	adds	r0, #8
   25f10:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
   25f12:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   25f16:	f7f8 fb81 	bl	1e61c <net_buf_simple_add>
	data->err = 0x00;
   25f1a:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   25f1c:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
   25f1e:	7427      	strb	r7, [r4, #16]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25f20:	2215      	movs	r2, #21
   25f22:	4631      	mov	r1, r6
   25f24:	4640      	mov	r0, r8
   25f26:	f000 f9fe 	bl	26326 <bt_gatt_check_perm>
   25f2a:	4605      	mov	r5, r0
   25f2c:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   25f2e:	bb00      	cbnz	r0, 25f72 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   25f30:	68a1      	ldr	r1, [r4, #8]
   25f32:	f8b9 3042 	ldrh.w	r3, [r9, #66]	; 0x42
   25f36:	898a      	ldrh	r2, [r1, #12]
   25f38:	6889      	ldr	r1, [r1, #8]
   25f3a:	88a0      	ldrh	r0, [r4, #4]
   25f3c:	9000      	str	r0, [sp, #0]
   25f3e:	1a9b      	subs	r3, r3, r2
   25f40:	6877      	ldr	r7, [r6, #4]
   25f42:	440a      	add	r2, r1
   25f44:	b29b      	uxth	r3, r3
   25f46:	4631      	mov	r1, r6
   25f48:	4640      	mov	r0, r8
   25f4a:	47b8      	blx	r7
	if (read < 0) {
   25f4c:	1e01      	subs	r1, r0, #0
   25f4e:	da0a      	bge.n	25f66 <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
   25f50:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   25f54:	bf26      	itte	cs
   25f56:	4249      	negcs	r1, r1
   25f58:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   25f5a:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   25f5c:	7421      	strb	r1, [r4, #16]
}
   25f5e:	4628      	mov	r0, r5
   25f60:	b003      	add	sp, #12
   25f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
   25f66:	68a0      	ldr	r0, [r4, #8]
   25f68:	3008      	adds	r0, #8
   25f6a:	f7f8 fb57 	bl	1e61c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   25f6e:	2501      	movs	r5, #1
   25f70:	e7f5      	b.n	25f5e <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
   25f72:	463d      	mov	r5, r7
   25f74:	e7f3      	b.n	25f5e <read_cb+0x5e>

00025f76 <att_read_blob_req>:
{
   25f76:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   25f78:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
   25f7a:	8813      	ldrh	r3, [r2, #0]
   25f7c:	8852      	ldrh	r2, [r2, #2]
   25f7e:	9200      	str	r2, [sp, #0]
   25f80:	210c      	movs	r1, #12
   25f82:	220d      	movs	r2, #13
   25f84:	f7e4 f88e 	bl	a0a4 <att_read_rsp>
}
   25f88:	b003      	add	sp, #12
   25f8a:	f85d fb04 	ldr.w	pc, [sp], #4

00025f8e <att_read_req>:
{
   25f8e:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   25f90:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   25f92:	2200      	movs	r2, #0
   25f94:	881b      	ldrh	r3, [r3, #0]
   25f96:	9200      	str	r2, [sp, #0]
   25f98:	210a      	movs	r1, #10
   25f9a:	220b      	movs	r2, #11
   25f9c:	f7e4 f882 	bl	a0a4 <att_read_rsp>
}
   25fa0:	b003      	add	sp, #12
   25fa2:	f85d fb04 	ldr.w	pc, [sp], #4

00025fa6 <bt_att_init>:
	bt_gatt_init();
   25fa6:	f7e4 bfab 	b.w	af00 <bt_gatt_init>

00025faa <bt_att_get_mtu>:
{
   25faa:	b508      	push	{r3, lr}
	att = att_chan_get(conn);
   25fac:	f7e3 fd62 	bl	9a74 <att_chan_get>
	if (!att) {
   25fb0:	b108      	cbz	r0, 25fb6 <bt_att_get_mtu+0xc>
	return att->chan.tx.mtu;
   25fb2:	f8b0 0042 	ldrh.w	r0, [r0, #66]	; 0x42
}
   25fb6:	bd08      	pop	{r3, pc}

00025fb8 <att_req_destroy>:
{
   25fb8:	b510      	push	{r4, lr}
   25fba:	4604      	mov	r4, r0
	if (req->buf) {
   25fbc:	6900      	ldr	r0, [r0, #16]
   25fbe:	b108      	cbz	r0, 25fc4 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   25fc0:	f7f8 fa66 	bl	1e490 <net_buf_unref>
	if (req->destroy) {
   25fc4:	68a3      	ldr	r3, [r4, #8]
   25fc6:	b10b      	cbz	r3, 25fcc <att_req_destroy+0x14>
		req->destroy(req);
   25fc8:	4620      	mov	r0, r4
   25fca:	4798      	blx	r3
	bt_att_req_free(req);
   25fcc:	4620      	mov	r0, r4
}
   25fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   25fd2:	f7e4 ba3d 	b.w	a450 <bt_att_req_free>

00025fd6 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
   25fd6:	898a      	ldrh	r2, [r1, #12]
   25fd8:	6889      	ldr	r1, [r1, #8]
   25fda:	2300      	movs	r3, #0
   25fdc:	f7e4 ba44 	b.w	a468 <att_handle_rsp>

00025fe0 <att_reset>:
{
   25fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25fe2:	4604      	mov	r4, r0
	while ((buf = k_fifo_get(&att->tx_queue, K_NO_WAIT))) {
   25fe4:	f100 05e0 	add.w	r5, r0, #224	; 0xe0
	return z_impl_k_queue_get(queue, timeout);
   25fe8:	2100      	movs	r1, #0
   25fea:	4628      	mov	r0, r5
   25fec:	f7fa f9f8 	bl	203e0 <z_impl_k_queue_get>
   25ff0:	bb00      	cbnz	r0, 26034 <att_reset+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25ff2:	f3bf 8f5b 	dmb	ish
   25ff6:	f104 0398 	add.w	r3, r4, #152	; 0x98
   25ffa:	e853 2f00 	ldrex	r2, [r3]
   25ffe:	f042 0204 	orr.w	r2, r2, #4
   26002:	e843 2100 	strex	r1, r2, [r3]
   26006:	2900      	cmp	r1, #0
   26008:	d1f7      	bne.n	25ffa <att_reset+0x1a>
   2600a:	f3bf 8f5b 	dmb	ish
   2600e:	2504      	movs	r5, #4
		k_sem_give(&att->tx_sem);
   26010:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
	z_impl_k_sem_give(sem);
   26014:	4630      	mov	r0, r6
   26016:	f7fb fd3f 	bl	21a98 <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   2601a:	3d01      	subs	r5, #1
   2601c:	d1fa      	bne.n	26014 <att_reset+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   2601e:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
   26022:	b956      	cbnz	r6, 2603a <att_reset+0x5a>
	if (!att->req) {
   26024:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
	list->head = NULL;
   26028:	2200      	movs	r2, #0
	list->tail = NULL;
   2602a:	e9c4 2228 	strd	r2, r2, [r4, #160]	; 0xa0
   2602e:	b9e3      	cbnz	r3, 2606a <att_reset+0x8a>
}
   26030:	b003      	add	sp, #12
   26032:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   26034:	f7f8 fa2c 	bl	1e490 <net_buf_unref>
   26038:	e7d6      	b.n	25fe8 <att_reset+0x8>
	return node->next;
   2603a:	6835      	ldr	r5, [r6, #0]
   2603c:	2d00      	cmp	r5, #0
   2603e:	bf38      	it	cc
   26040:	2500      	movcc	r5, #0
		if (req->func) {
   26042:	6877      	ldr	r7, [r6, #4]
   26044:	b12f      	cbz	r7, 26052 <att_reset+0x72>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
   26046:	2300      	movs	r3, #0
   26048:	9600      	str	r6, [sp, #0]
   2604a:	461a      	mov	r2, r3
   2604c:	210e      	movs	r1, #14
   2604e:	4618      	mov	r0, r3
   26050:	47b8      	blx	r7
		att_req_destroy(req);
   26052:	4630      	mov	r0, r6
   26054:	f7ff ffb0 	bl	25fb8 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   26058:	2d00      	cmp	r5, #0
   2605a:	d0e3      	beq.n	26024 <att_reset+0x44>
   2605c:	682b      	ldr	r3, [r5, #0]
   2605e:	2b00      	cmp	r3, #0
   26060:	bf38      	it	cc
   26062:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26064:	462e      	mov	r6, r5
   26066:	461d      	mov	r5, r3
   26068:	e7eb      	b.n	26042 <att_reset+0x62>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2606a:	230e      	movs	r3, #14
   2606c:	4611      	mov	r1, r2
   2606e:	4620      	mov	r0, r4
}
   26070:	b003      	add	sp, #12
   26072:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   26076:	f7e4 b9f7 	b.w	a468 <att_handle_rsp>

0002607a <bt_att_disconnected>:
{
   2607a:	b510      	push	{r4, lr}
   2607c:	4604      	mov	r4, r0
	att_reset(att);
   2607e:	f7ff ffaf 	bl	25fe0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   26082:	6820      	ldr	r0, [r4, #0]
}
   26084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
   26088:	f7e5 bcda 	b.w	ba40 <bt_gatt_disconnected>

0002608c <found_attr>:
	*found = attr;
   2608c:	6008      	str	r0, [r1, #0]
}
   2608e:	2000      	movs	r0, #0
   26090:	4770      	bx	lr

00026092 <gatt_ccc_changed>:
{
   26092:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   26094:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   26096:	895a      	ldrh	r2, [r3, #10]
   26098:	428a      	cmp	r2, r1
   2609a:	d003      	beq.n	260a4 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2609c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2609e:	68db      	ldr	r3, [r3, #12]
   260a0:	b103      	cbz	r3, 260a4 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   260a2:	4718      	bx	r3
}
   260a4:	4770      	bx	lr

000260a6 <gatt_indicate_rsp>:
{
   260a6:	b410      	push	{r4}
   260a8:	9b01      	ldr	r3, [sp, #4]
   260aa:	460a      	mov	r2, r1
	params->func(conn, params->attr, err);
   260ac:	e9d3 1401 	ldrd	r1, r4, [r3, #4]
   260b0:	4623      	mov	r3, r4
}
   260b2:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   260b4:	4718      	bx	r3

000260b6 <sc_restore_rsp>:
}
   260b6:	4770      	bx	lr

000260b8 <write_name>:
{
   260b8:	b570      	push	{r4, r5, r6, lr}
   260ba:	b088      	sub	sp, #32
   260bc:	4615      	mov	r5, r2
   260be:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   260c2:	2100      	movs	r1, #0
   260c4:	2218      	movs	r2, #24
   260c6:	a802      	add	r0, sp, #8
{
   260c8:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   260ca:	9101      	str	r1, [sp, #4]
   260cc:	f7ff f80b 	bl	250e6 <memset>
	if (offset) {
   260d0:	b966      	cbnz	r6, 260ec <write_name+0x34>
	if (len >= sizeof(value)) {
   260d2:	2c1b      	cmp	r4, #27
   260d4:	d80d      	bhi.n	260f2 <write_name+0x3a>
	memcpy(value, buf, len);
   260d6:	4622      	mov	r2, r4
   260d8:	4629      	mov	r1, r5
   260da:	a801      	add	r0, sp, #4
   260dc:	f7fe ffd8 	bl	25090 <memcpy>
	bt_set_name(value);
   260e0:	a801      	add	r0, sp, #4
   260e2:	f7e1 fddb 	bl	7c9c <bt_set_name>
	return len;
   260e6:	4620      	mov	r0, r4
}
   260e8:	b008      	add	sp, #32
   260ea:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   260ec:	f06f 0006 	mvn.w	r0, #6
   260f0:	e7fa      	b.n	260e8 <write_name+0x30>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   260f2:	f06f 000c 	mvn.w	r0, #12
   260f6:	e7f7      	b.n	260e8 <write_name+0x30>

000260f8 <match_uuid>:
   260f8:	6008      	str	r0, [r1, #0]
   260fa:	2000      	movs	r0, #0
   260fc:	4770      	bx	lr

000260fe <ccc_find_cfg>:
{
   260fe:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   26100:	7803      	ldrb	r3, [r0, #0]
   26102:	4293      	cmp	r3, r2
{
   26104:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   26106:	d001      	beq.n	2610c <ccc_find_cfg+0xe>
	return NULL;
   26108:	2000      	movs	r0, #0
}
   2610a:	bd10      	pop	{r4, pc}
   2610c:	2207      	movs	r2, #7
   2610e:	3001      	adds	r0, #1
   26110:	f7fe ffae 	bl	25070 <memcmp>
		if (id == ccc->cfg[i].id &&
   26114:	2800      	cmp	r0, #0
   26116:	d1f7      	bne.n	26108 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   26118:	4620      	mov	r0, r4
   2611a:	e7f6      	b.n	2610a <ccc_find_cfg+0xc>

0002611c <sc_clear_by_conn>:
{
   2611c:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2611e:	f100 0174 	add.w	r1, r0, #116	; 0x74
   26122:	7a00      	ldrb	r0, [r0, #8]
   26124:	f7e4 fc2e 	bl	a984 <find_sc_cfg>
	if (cfg) {
   26128:	b118      	cbz	r0, 26132 <sc_clear_by_conn+0x16>
}
   2612a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sc_clear(cfg);
   2612e:	f7e4 badb 	b.w	a6e8 <sc_clear>
}
   26132:	bd08      	pop	{r3, pc}

00026134 <find_ccc_cfg>:
{
   26134:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26136:	460c      	mov	r4, r1
   26138:	1c4d      	adds	r5, r1, #1
		if (conn) {
   2613a:	b148      	cbz	r0, 26150 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2613c:	7809      	ldrb	r1, [r1, #0]
   2613e:	462a      	mov	r2, r5
   26140:	f7ff fc06 	bl	25950 <bt_conn_is_peer_addr_le>
   26144:	2800      	cmp	r0, #0
	return NULL;
   26146:	bf08      	it	eq
   26148:	2400      	moveq	r4, #0
}
   2614a:	4620      	mov	r0, r4
   2614c:	b003      	add	sp, #12
   2614e:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   26150:	9000      	str	r0, [sp, #0]
   26152:	2207      	movs	r2, #7
   26154:	f8cd 0003 	str.w	r0, [sp, #3]
   26158:	4669      	mov	r1, sp
   2615a:	4628      	mov	r0, r5
   2615c:	f7fe ff88 	bl	25070 <memcmp>
   26160:	2800      	cmp	r0, #0
	return NULL;
   26162:	bf18      	it	ne
   26164:	2400      	movne	r4, #0
   26166:	e7f0      	b.n	2614a <find_ccc_cfg+0x16>

00026168 <clear_ccc_cfg>:
{
   26168:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2616a:	2500      	movs	r5, #0
{
   2616c:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   2616e:	2207      	movs	r2, #7
   26170:	4669      	mov	r1, sp
   26172:	3001      	adds	r0, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   26174:	9500      	str	r5, [sp, #0]
   26176:	f8cd 5003 	str.w	r5, [sp, #3]
   2617a:	f7fe ff89 	bl	25090 <memcpy>
	cfg->id = 0U;
   2617e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   26180:	8125      	strh	r5, [r4, #8]
}
   26182:	b003      	add	sp, #12
   26184:	bd30      	pop	{r4, r5, pc}

00026186 <read_appearance>:
{
   26186:	b513      	push	{r0, r1, r4, lr}
   26188:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2618c:	4610      	mov	r0, r2
	if (offset > value_len) {
   2618e:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
   26190:	f04f 0200 	mov.w	r2, #0
   26194:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   26198:	d80d      	bhi.n	261b6 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   2619a:	f1c1 0402 	rsb	r4, r1, #2
   2619e:	429c      	cmp	r4, r3
   261a0:	bfa8      	it	ge
   261a2:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   261a4:	f10d 0306 	add.w	r3, sp, #6
   261a8:	4622      	mov	r2, r4
   261aa:	4419      	add	r1, r3
   261ac:	f7fe ff70 	bl	25090 <memcpy>
}
   261b0:	4620      	mov	r0, r4
   261b2:	b002      	add	sp, #8
   261b4:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   261b6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   261ba:	e7f9      	b.n	261b0 <read_appearance+0x2a>

000261bc <read_name>:
{
   261bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   261c0:	4698      	mov	r8, r3
   261c2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   261c6:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   261c8:	f7e1 fdb6 	bl	7d38 <bt_get_name>
   261cc:	4607      	mov	r7, r0
				 strlen(name));
   261ce:	f7fe ff2d 	bl	2502c <strlen>
	if (offset > value_len) {
   261d2:	b283      	uxth	r3, r0
   261d4:	42b3      	cmp	r3, r6
   261d6:	d30c      	bcc.n	261f2 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   261d8:	1b9c      	subs	r4, r3, r6
   261da:	4544      	cmp	r4, r8
   261dc:	bfa8      	it	ge
   261de:	4644      	movge	r4, r8
   261e0:	b2a4      	uxth	r4, r4
	memcpy(buf, (u8_t *)value + offset, len);
   261e2:	4622      	mov	r2, r4
   261e4:	19b9      	adds	r1, r7, r6
   261e6:	4628      	mov	r0, r5
   261e8:	f7fe ff52 	bl	25090 <memcpy>
}
   261ec:	4620      	mov	r0, r4
   261ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   261f2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   261f6:	e7f9      	b.n	261ec <read_name+0x30>

000261f8 <bt_gatt_attr_read_ccc>:
{
   261f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   261fa:	68c9      	ldr	r1, [r1, #12]
{
   261fc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   26200:	4615      	mov	r5, r2
   26202:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   26204:	f7ff ff96 	bl	26134 <find_ccc_cfg>
	if (cfg) {
   26208:	b100      	cbz	r0, 2620c <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2620a:	8900      	ldrh	r0, [r0, #8]
   2620c:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   26210:	2e02      	cmp	r6, #2
   26212:	d80e      	bhi.n	26232 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   26214:	f1c6 0402 	rsb	r4, r6, #2
   26218:	42bc      	cmp	r4, r7
   2621a:	bfa8      	it	ge
   2621c:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   2621e:	f10d 0306 	add.w	r3, sp, #6
   26222:	4622      	mov	r2, r4
   26224:	1999      	adds	r1, r3, r6
   26226:	4628      	mov	r0, r5
   26228:	f7fe ff32 	bl	25090 <memcpy>
}
   2622c:	4620      	mov	r0, r4
   2622e:	b003      	add	sp, #12
   26230:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26232:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   26236:	e7f9      	b.n	2622c <bt_gatt_attr_read_ccc+0x34>

00026238 <bt_gatt_attr_read_service>:
{
   26238:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   2623a:	68c9      	ldr	r1, [r1, #12]
{
   2623c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   26240:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   26242:	780b      	ldrb	r3, [r1, #0]
{
   26244:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   26246:	b993      	cbnz	r3, 2626e <bt_gatt_attr_read_service+0x36>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   26248:	884b      	ldrh	r3, [r1, #2]
   2624a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   2624e:	2d02      	cmp	r5, #2
   26250:	d819      	bhi.n	26286 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   26252:	f1c5 0202 	rsb	r2, r5, #2
   26256:	4294      	cmp	r4, r2
   26258:	bfa8      	it	ge
   2625a:	4614      	movge	r4, r2
	memcpy(buf, (u8_t *)value + offset, len);
   2625c:	f10d 0306 	add.w	r3, sp, #6
   26260:	4622      	mov	r2, r4
   26262:	1959      	adds	r1, r3, r5
   26264:	f7fe ff14 	bl	25090 <memcpy>
}
   26268:	4620      	mov	r0, r4
   2626a:	b003      	add	sp, #12
   2626c:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   2626e:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   26270:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   26274:	d807      	bhi.n	26286 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   26276:	f1c5 0210 	rsb	r2, r5, #16
   2627a:	4294      	cmp	r4, r2
   2627c:	bfa8      	it	ge
   2627e:	4614      	movge	r4, r2
	memcpy(buf, (u8_t *)value + offset, len);
   26280:	4622      	mov	r2, r4
   26282:	4429      	add	r1, r5
   26284:	e7ee      	b.n	26264 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26286:	f06f 0406 	mvn.w	r4, #6
   2628a:	e7ed      	b.n	26268 <bt_gatt_attr_read_service+0x30>

0002628c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2628c:	2a02      	cmp	r2, #2
{
   2628e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   26290:	d108      	bne.n	262a4 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   26292:	2300      	movs	r3, #0
   26294:	f100 0174 	add.w	r1, r0, #116	; 0x74
   26298:	461a      	mov	r2, r3
   2629a:	7a00      	ldrb	r0, [r0, #8]
   2629c:	f7e4 fc4c 	bl	ab38 <sc_save>
}
   262a0:	2002      	movs	r0, #2
   262a2:	bd10      	pop	{r4, pc}
		sc_clear_by_conn(conn);
   262a4:	f7ff ff3a 	bl	2611c <sc_clear_by_conn>
   262a8:	e7fa      	b.n	262a0 <sc_ccc_cfg_write+0x14>

000262aa <bt_gatt_attr_read_chrc>:
{
   262aa:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   262ac:	68cf      	ldr	r7, [r1, #12]
{
   262ae:	b087      	sub	sp, #28
   262b0:	4608      	mov	r0, r1
   262b2:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   262b4:	79bb      	ldrb	r3, [r7, #6]
   262b6:	f88d 3004 	strb.w	r3, [sp, #4]
{
   262ba:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   262be:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   262c0:	f7e4 febc 	bl	b03c <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   262c4:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   262c6:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   262ca:	780b      	ldrb	r3, [r1, #0]
   262cc:	b99b      	cbnz	r3, 262f6 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   262ce:	884b      	ldrh	r3, [r1, #2]
   262d0:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   262d4:	2105      	movs	r1, #5
	if (offset > value_len) {
   262d6:	42b1      	cmp	r1, r6
   262d8:	d315      	bcc.n	26306 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   262da:	1b89      	subs	r1, r1, r6
   262dc:	42a1      	cmp	r1, r4
   262de:	bfa8      	it	ge
   262e0:	4621      	movge	r1, r4
   262e2:	b28c      	uxth	r4, r1
	memcpy(buf, (u8_t *)value + offset, len);
   262e4:	ab01      	add	r3, sp, #4
   262e6:	4622      	mov	r2, r4
   262e8:	1999      	adds	r1, r3, r6
   262ea:	4628      	mov	r0, r5
   262ec:	f7fe fed0 	bl	25090 <memcpy>
}
   262f0:	4620      	mov	r0, r4
   262f2:	b007      	add	sp, #28
   262f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   262f6:	3101      	adds	r1, #1
   262f8:	2210      	movs	r2, #16
   262fa:	f10d 0007 	add.w	r0, sp, #7
   262fe:	f7fe fec7 	bl	25090 <memcpy>
		value_len += 16U;
   26302:	2113      	movs	r1, #19
   26304:	e7e7      	b.n	262d6 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26306:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2630a:	e7f1      	b.n	262f0 <bt_gatt_attr_read_chrc+0x46>

0002630c <bt_gatt_foreach_attr>:
{
   2630c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2630e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   26312:	2300      	movs	r3, #0
   26314:	9300      	str	r3, [sp, #0]
   26316:	461a      	mov	r2, r3
   26318:	f7e4 fea8 	bl	b06c <bt_gatt_foreach_attr_type>
}
   2631c:	b005      	add	sp, #20
   2631e:	f85d fb04 	ldr.w	pc, [sp], #4

00026322 <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   26322:	f7ff be42 	b.w	25faa <bt_att_get_mtu>

00026326 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   26326:	07d3      	lsls	r3, r2, #31
{
   26328:	b510      	push	{r4, lr}
   2632a:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2632c:	d504      	bpl.n	26338 <bt_gatt_check_perm+0x12>
   2632e:	f014 0f15 	tst.w	r4, #21
   26332:	d017      	beq.n	26364 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   26334:	684b      	ldr	r3, [r1, #4]
   26336:	b1ab      	cbz	r3, 26364 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   26338:	0793      	lsls	r3, r2, #30
   2633a:	d504      	bpl.n	26346 <bt_gatt_check_perm+0x20>
   2633c:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   26340:	d012      	beq.n	26368 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   26342:	688b      	ldr	r3, [r1, #8]
   26344:	b183      	cbz	r3, 26368 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   26346:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   26348:	f014 0f30 	tst.w	r4, #48	; 0x30
   2634c:	d104      	bne.n	26358 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2634e:	f014 000c 	ands.w	r0, r4, #12
   26352:	bf18      	it	ne
   26354:	200f      	movne	r0, #15
}
   26356:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   26358:	f7ff faf8 	bl	2594c <bt_conn_get_security>
   2635c:	2802      	cmp	r0, #2
   2635e:	d8f6      	bhi.n	2634e <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   26360:	2005      	movs	r0, #5
   26362:	e7f8      	b.n	26356 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   26364:	2002      	movs	r0, #2
   26366:	e7f6      	b.n	26356 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   26368:	2003      	movs	r0, #3
   2636a:	e7f4      	b.n	26356 <bt_gatt_check_perm+0x30>

0002636c <bt_gatt_change_aware>:
}
   2636c:	2001      	movs	r0, #1
   2636e:	4770      	bx	lr

00026370 <bt_smp_recv>:
{
   26370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   26372:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->conn;
   26374:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   26376:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2637a:	4608      	mov	r0, r1
   2637c:	f7ff fbae 	bl	25adc <bt_l2cap_create_pdu_timeout>
	hdr = net_buf_add(buf, sizeof(*hdr));
   26380:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
   26384:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   26386:	2101      	movs	r1, #1
   26388:	4630      	mov	r0, r6
   2638a:	f7f8 f947 	bl	1e61c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2638e:	2505      	movs	r5, #5
   26390:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
   26392:	2101      	movs	r1, #1
   26394:	4630      	mov	r0, r6
   26396:	f7f8 f941 	bl	1e61c <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2639a:	7005      	strb	r5, [r0, #0]
   2639c:	2500      	movs	r5, #0
   2639e:	9500      	str	r5, [sp, #0]
   263a0:	462b      	mov	r3, r5
   263a2:	4622      	mov	r2, r4
   263a4:	2106      	movs	r1, #6
   263a6:	4638      	mov	r0, r7
   263a8:	f7ff fb9b 	bl	25ae2 <bt_l2cap_send_cb>
}
   263ac:	4628      	mov	r0, r5
   263ae:	b003      	add	sp, #12
   263b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000263b2 <bt_smp_sign>:
   263b2:	f06f 0022 	mvn.w	r0, #34	; 0x22
   263b6:	4770      	bx	lr

000263b8 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   263b8:	2000      	movs	r0, #0
   263ba:	4770      	bx	lr

000263bc <model_start>:
	if (mod->cb && mod->cb->start) {
   263bc:	6983      	ldr	r3, [r0, #24]
   263be:	b113      	cbz	r3, 263c6 <model_start+0xa>
   263c0:	685b      	ldr	r3, [r3, #4]
   263c2:	b103      	cbz	r3, 263c6 <model_start+0xa>
		mod->cb->start(mod);
   263c4:	4718      	bx	r3
}
   263c6:	4770      	bx	lr

000263c8 <bt_mesh_init>:
{
   263c8:	b538      	push	{r3, r4, r5, lr}
   263ca:	4605      	mov	r5, r0
	err = bt_mesh_comp_register(comp);
   263cc:	4608      	mov	r0, r1
   263ce:	f7e9 f9df 	bl	f790 <bt_mesh_comp_register>
	if (err) {
   263d2:	4604      	mov	r4, r0
   263d4:	b980      	cbnz	r0, 263f8 <bt_mesh_init+0x30>
		bt_mesh_proxy_init();
   263d6:	f7f1 f823 	bl	17420 <bt_mesh_proxy_init>
		err = bt_mesh_prov_init(prov);
   263da:	4628      	mov	r0, r5
   263dc:	f7ef fa88 	bl	158f0 <bt_mesh_prov_init>
		if (err) {
   263e0:	4604      	mov	r4, r0
   263e2:	b948      	cbnz	r0, 263f8 <bt_mesh_init+0x30>
	bt_mesh_net_init();
   263e4:	f7e7 fa96 	bl	d914 <bt_mesh_net_init>
	bt_mesh_trans_init();
   263e8:	f7e8 fd80 	bl	eeec <bt_mesh_trans_init>
	bt_mesh_beacon_init();
   263ec:	f7e5 ff7a 	bl	c2e4 <bt_mesh_beacon_init>
	bt_mesh_adv_init();
   263f0:	f7e5 fd8a 	bl	bf08 <bt_mesh_adv_init>
		bt_mesh_settings_init();
   263f4:	f7ed fbd2 	bl	13b9c <bt_mesh_settings_init>
}
   263f8:	4620      	mov	r0, r4
   263fa:	bd38      	pop	{r3, r4, r5, pc}

000263fc <beacon_complete>:
{
   263fc:	b510      	push	{r4, lr}
   263fe:	460c      	mov	r4, r1
	return z_impl_k_uptime_ticks();
   26400:	f002 f84e 	bl	284a0 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   26404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   26408:	460a      	mov	r2, r1
   2640a:	fba0 0103 	umull	r0, r1, r0, r3
   2640e:	fb03 1102 	mla	r1, r3, r2, r1
   26412:	0bc3      	lsrs	r3, r0, #15
   26414:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return (u32_t)k_uptime_get();
   26418:	6023      	str	r3, [r4, #0]
}
   2641a:	bd10      	pop	{r4, pc}

0002641c <friend_cred_clear>:
	cred->addr = BT_MESH_ADDR_UNASSIGNED;
   2641c:	2100      	movs	r1, #0
	cred->net_idx = BT_MESH_KEY_UNUSED;
   2641e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26422:	8003      	strh	r3, [r0, #0]
	cred->addr = BT_MESH_ADDR_UNASSIGNED;
   26424:	8041      	strh	r1, [r0, #2]
	cred->lpn_counter = 0U;
   26426:	8081      	strh	r1, [r0, #4]
	cred->frnd_counter = 0U;
   26428:	80c1      	strh	r1, [r0, #6]
	(void)memset(cred->cred, 0, sizeof(cred->cred));
   2642a:	2242      	movs	r2, #66	; 0x42
   2642c:	3008      	adds	r0, #8
   2642e:	f7fe be5a 	b.w	250e6 <memset>

00026432 <bt_mesh_net_flags>:
{
   26432:	b508      	push	{r3, lr}
	if (sub && sub->kr_flag) {
   26434:	4602      	mov	r2, r0
   26436:	b100      	cbz	r0, 2643a <bt_mesh_net_flags+0x8>
	u8_t flags = 0x00;
   26438:	7f82      	ldrb	r2, [r0, #30]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2643a:	f7e6 f90f 	bl	c65c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
   2643e:	0743      	lsls	r3, r0, #29
		flags |= BT_MESH_NET_FLAG_IVU;
   26440:	bf48      	it	mi
   26442:	f042 0202 	orrmi.w	r2, r2, #2
}
   26446:	4610      	mov	r0, r2
   26448:	bd08      	pop	{r3, pc}

0002644a <bt_mesh_net_sec_update>:
{
   2644a:	b510      	push	{r4, lr}
   2644c:	4604      	mov	r4, r0
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   2644e:	f7eb ff45 	bl	122dc <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
   26452:	2801      	cmp	r0, #1
   26454:	d104      	bne.n	26460 <bt_mesh_net_sec_update+0x16>
		bt_mesh_proxy_beacon_send(sub);
   26456:	4620      	mov	r0, r4
}
   26458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_proxy_beacon_send(sub);
   2645c:	f7f0 bc88 	b.w	16d70 <bt_mesh_proxy_beacon_send>
}
   26460:	bd10      	pop	{r4, pc}

00026462 <ack_timeout>:
{
   26462:	b538      	push	{r3, r4, r5, lr}
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   26464:	f890 4020 	ldrb.w	r4, [r0, #32]
   26468:	2cff      	cmp	r4, #255	; 0xff
{
   2646a:	4605      	mov	r5, r0
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   2646c:	d102      	bne.n	26474 <ack_timeout+0x12>
		ttl = bt_mesh_default_ttl_get();
   2646e:	f7eb ffad 	bl	123cc <bt_mesh_default_ttl_get>
   26472:	4604      	mov	r4, r0
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100U);
   26474:	6a68      	ldr	r0, [r5, #36]	; 0x24
   26476:	f7d9 fe9b 	bl	1b0 <__popcountsi2>
   2647a:	7feb      	ldrb	r3, [r5, #31]
   2647c:	f003 031f 	and.w	r3, r3, #31
   26480:	1a18      	subs	r0, r3, r0
   26482:	2364      	movs	r3, #100	; 0x64
   26484:	fb00 3303 	mla	r3, r0, r3, r3
	to = K_MSEC(150 + (ttl * 50U));
   26488:	2296      	movs	r2, #150	; 0x96
   2648a:	2032      	movs	r0, #50	; 0x32
   2648c:	fb10 2004 	smlabb	r0, r0, r4, r2
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100U);
   26490:	4418      	add	r0, r3
}
   26492:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   26496:	bfb8      	it	lt
   26498:	f44f 70c8 	movlt.w	r0, #400	; 0x190
   2649c:	bd38      	pop	{r3, r4, r5, pc}

0002649e <seg_rx_assemble>:
{
   2649e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->data = buf->__buf;
   264a2:	688b      	ldr	r3, [r1, #8]
   264a4:	600b      	str	r3, [r1, #0]
	buf->len  = 0U;
   264a6:	2500      	movs	r5, #0
   264a8:	4606      	mov	r6, r0
   264aa:	460c      	mov	r4, r1
   264ac:	4617      	mov	r7, r2
   264ae:	808d      	strh	r5, [r1, #4]
	for (i = 0; i <= rx->seg_n; i++) {
   264b0:	f100 0804 	add.w	r8, r0, #4
				       MIN(seg_len(rx->ctl),
   264b4:	7ff3      	ldrb	r3, [r6, #31]
		net_buf_simple_add_mem(buf, rx->seg[i],
   264b6:	f858 1b04 	ldr.w	r1, [r8], #4
		return BT_MESH_APP_SEG_SDU_MAX;
   264ba:	f013 0f20 	tst.w	r3, #32
				       MIN(seg_len(rx->ctl),
   264be:	8bb3      	ldrh	r3, [r6, #28]
		return BT_MESH_APP_SEG_SDU_MAX;
   264c0:	bf14      	ite	ne
   264c2:	2208      	movne	r2, #8
   264c4:	220c      	moveq	r2, #12
				       MIN(seg_len(rx->ctl),
   264c6:	fb05 3312 	mls	r3, r5, r2, r3
		net_buf_simple_add_mem(buf, rx->seg[i],
   264ca:	429a      	cmp	r2, r3
   264cc:	bfa8      	it	ge
   264ce:	461a      	movge	r2, r3
   264d0:	4620      	mov	r0, r4
   264d2:	f001 fd0b 	bl	27eec <net_buf_simple_add_mem>
	for (i = 0; i <= rx->seg_n; i++) {
   264d6:	7ff3      	ldrb	r3, [r6, #31]
   264d8:	3501      	adds	r5, #1
   264da:	461a      	mov	r2, r3
   264dc:	f003 031f 	and.w	r3, r3, #31
   264e0:	42ab      	cmp	r3, r5
   264e2:	dae7      	bge.n	264b4 <seg_rx_assemble+0x16>
	if (!rx->ctl) {
   264e4:	0693      	lsls	r3, r2, #26
   264e6:	d407      	bmi.n	264f8 <seg_rx_assemble+0x5a>
		buf->len -= APP_MIC_LEN(aszmic);
   264e8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   264ec:	2f00      	cmp	r7, #0
   264ee:	bf14      	ite	ne
   264f0:	2208      	movne	r2, #8
   264f2:	2204      	moveq	r2, #4
   264f4:	1a9b      	subs	r3, r3, r2
   264f6:	80a3      	strh	r3, [r4, #4]
}
   264f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000264fc <seg_sent>:
	schedule_retransmit(tx);
   264fc:	4608      	mov	r0, r1
   264fe:	f7e7 bb89 	b.w	dc14 <schedule_retransmit>

00026502 <seg_send_start>:
{
   26502:	b538      	push	{r3, r4, r5, lr}
	if (!tx->started && tx->cb && tx->cb->start) {
   26504:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
   26508:	069b      	lsls	r3, r3, #26
{
   2650a:	460d      	mov	r5, r1
   2650c:	4614      	mov	r4, r2
	if (!tx->started && tx->cb && tx->cb->start) {
   2650e:	d40b      	bmi.n	26528 <seg_send_start+0x26>
   26510:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26512:	b14b      	cbz	r3, 26528 <seg_send_start+0x26>
   26514:	681b      	ldr	r3, [r3, #0]
   26516:	b13b      	cbz	r3, 26528 <seg_send_start+0x26>
		tx->cb->start(duration, err, tx->cb_data);
   26518:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   2651a:	4798      	blx	r3
		tx->started = 1U;
   2651c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   26520:	f043 0320 	orr.w	r3, r3, #32
   26524:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	if (err) {
   26528:	b125      	cbz	r5, 26534 <seg_send_start+0x32>
		schedule_retransmit(tx);
   2652a:	4620      	mov	r0, r4
}
   2652c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		schedule_retransmit(tx);
   26530:	f7e7 bb70 	b.w	dc14 <schedule_retransmit>
}
   26534:	bd38      	pop	{r3, r4, r5, pc}

00026536 <seg_retransmit>:
	seg_tx_send_unacked(tx);
   26536:	3830      	subs	r0, #48	; 0x30
   26538:	f7e7 bbb2 	b.w	dca0 <seg_tx_send_unacked>

0002653c <bt_mesh_ctl_send>:
{
   2653c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2653e:	b089      	sub	sp, #36	; 0x24
   26540:	4604      	mov	r4, r0
   26542:	4608      	mov	r0, r1
   26544:	f88d 000f 	strb.w	r0, [sp, #15]
   26548:	4611      	mov	r1, r2
	net_buf_simple_init_with_data(&buf, data, data_len);
   2654a:	a805      	add	r0, sp, #20
   2654c:	461a      	mov	r2, r3
{
   2654e:	461d      	mov	r5, r3
   26550:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
	net_buf_simple_init_with_data(&buf, data, data_len);
   26554:	f001 fc78 	bl	27e48 <net_buf_simple_init_with_data>
	if (data_len > BT_MESH_SDU_UNSEG_MAX) {
   26558:	6862      	ldr	r2, [r4, #4]
   2655a:	2d0b      	cmp	r5, #11
		tx->ctx->send_rel = true;
   2655c:	bf84      	itt	hi
   2655e:	2301      	movhi	r3, #1
   26560:	7293      	strbhi	r3, [r2, #10]
	tx->ctx->app_idx = BT_MESH_KEY_UNUSED;
   26562:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26566:	8053      	strh	r3, [r2, #2]
	if (tx->ctx->send_rel) {
   26568:	7a92      	ldrb	r2, [r2, #10]
   2656a:	f10d 030f 	add.w	r3, sp, #15
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   2656e:	9300      	str	r3, [sp, #0]
   26570:	463b      	mov	r3, r7
	if (tx->ctx->send_rel) {
   26572:	b132      	cbz	r2, 26582 <bt_mesh_ctl_send+0x46>
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   26574:	4632      	mov	r2, r6
   26576:	a905      	add	r1, sp, #20
   26578:	4620      	mov	r0, r4
   2657a:	f7e7 fde9 	bl	e150 <send_seg>
}
   2657e:	b009      	add	sp, #36	; 0x24
   26580:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return send_unseg(tx, &buf, cb, cb_data, &ctl_op);
   26582:	4632      	mov	r2, r6
   26584:	a905      	add	r1, sp, #20
   26586:	4620      	mov	r0, r4
   26588:	f7e7 f9d8 	bl	d93c <send_unseg>
   2658c:	e7f7      	b.n	2657e <bt_mesh_ctl_send+0x42>

0002658e <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   2658e:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   26590:	0e02      	lsrs	r2, r0, #24
	dst[1] = val;
   26592:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   26594:	f3c0 2307 	ubfx	r3, r0, #8, #8
   26598:	700a      	strb	r2, [r1, #0]
   2659a:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   2659c:	70c8      	strb	r0, [r1, #3]
}
   2659e:	4770      	bx	lr

000265a0 <bt_mesh_aes_cmac>:
{
   265a0:	b570      	push	{r4, r5, r6, lr}
   265a2:	b0c2      	sub	sp, #264	; 0x108
   265a4:	460d      	mov	r5, r1
   265a6:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   265a8:	4601      	mov	r1, r0
   265aa:	aa16      	add	r2, sp, #88	; 0x58
   265ac:	4668      	mov	r0, sp
{
   265ae:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   265b0:	f7fe fbc0 	bl	24d34 <tc_cmac_setup>
   265b4:	b130      	cbz	r0, 265c4 <bt_mesh_aes_cmac+0x24>
   265b6:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
   265b8:	b944      	cbnz	r4, 265cc <bt_mesh_aes_cmac+0x2c>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   265ba:	4669      	mov	r1, sp
   265bc:	4630      	mov	r0, r6
   265be:	f7fe fc50 	bl	24e62 <tc_cmac_final>
   265c2:	b968      	cbnz	r0, 265e0 <bt_mesh_aes_cmac+0x40>
		return -EIO;
   265c4:	f06f 0004 	mvn.w	r0, #4
}
   265c8:	b042      	add	sp, #264	; 0x108
   265ca:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
   265cc:	e955 1202 	ldrd	r1, r2, [r5, #-8]
   265d0:	4668      	mov	r0, sp
   265d2:	f7fe fbda 	bl	24d8a <tc_cmac_update>
   265d6:	3508      	adds	r5, #8
   265d8:	2800      	cmp	r0, #0
   265da:	d0f3      	beq.n	265c4 <bt_mesh_aes_cmac+0x24>
	for (; sg_len; sg_len--, sg++) {
   265dc:	3c01      	subs	r4, #1
   265de:	e7eb      	b.n	265b8 <bt_mesh_aes_cmac+0x18>
	return 0;
   265e0:	4620      	mov	r0, r4
   265e2:	e7f1      	b.n	265c8 <bt_mesh_aes_cmac+0x28>

000265e4 <bt_mesh_aes_cmac_one>:
{
   265e4:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   265e6:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   265ea:	2201      	movs	r2, #1
   265ec:	4669      	mov	r1, sp
   265ee:	f7ff ffd7 	bl	265a0 <bt_mesh_aes_cmac>
}
   265f2:	b003      	add	sp, #12
   265f4:	f85d fb04 	ldr.w	pc, [sp], #4

000265f8 <bt_mesh_s1>:
{
   265f8:	b530      	push	{r4, r5, lr}
	const u8_t zero[16] = { 0 };
   265fa:	2200      	movs	r2, #0
{
   265fc:	b085      	sub	sp, #20
   265fe:	460d      	mov	r5, r1
	const u8_t zero[16] = { 0 };
   26600:	e9cd 2200 	strd	r2, r2, [sp]
   26604:	e9cd 2202 	strd	r2, r2, [sp, #8]
{
   26608:	4604      	mov	r4, r0
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   2660a:	f7fe fd0f 	bl	2502c <strlen>
   2660e:	462b      	mov	r3, r5
   26610:	4602      	mov	r2, r0
   26612:	4621      	mov	r1, r4
   26614:	4668      	mov	r0, sp
   26616:	f7ff ffe5 	bl	265e4 <bt_mesh_aes_cmac_one>
}
   2661a:	3800      	subs	r0, #0
   2661c:	bf18      	it	ne
   2661e:	2001      	movne	r0, #1
   26620:	b005      	add	sp, #20
   26622:	bd30      	pop	{r4, r5, pc}

00026624 <bt_mesh_k1>:
{
   26624:	b570      	push	{r4, r5, r6, lr}
   26626:	9d04      	ldr	r5, [sp, #16]
   26628:	4606      	mov	r6, r0
   2662a:	461c      	mov	r4, r3
   2662c:	4610      	mov	r0, r2
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   2662e:	462b      	mov	r3, r5
   26630:	460a      	mov	r2, r1
   26632:	4631      	mov	r1, r6
   26634:	f7ff ffd6 	bl	265e4 <bt_mesh_aes_cmac_one>
	if (err < 0) {
   26638:	2800      	cmp	r0, #0
   2663a:	db0a      	blt.n	26652 <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   2663c:	4620      	mov	r0, r4
   2663e:	f7fe fcf5 	bl	2502c <strlen>
   26642:	462b      	mov	r3, r5
   26644:	4602      	mov	r2, r0
   26646:	4621      	mov	r1, r4
   26648:	4628      	mov	r0, r5
}
   2664a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   2664e:	f7ff bfc9 	b.w	265e4 <bt_mesh_aes_cmac_one>
}
   26652:	bd70      	pop	{r4, r5, r6, pc}

00026654 <bt_mesh_net_encrypt>:
{
   26654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t mic_len = NET_MIC_LEN(buf->data);
   26658:	680c      	ldr	r4, [r1, #0]
{
   2665a:	4607      	mov	r7, r0
   2665c:	4610      	mov	r0, r2
	u8_t mic_len = NET_MIC_LEN(buf->data);
   2665e:	f994 2001 	ldrsb.w	r2, [r4, #1]
   26662:	f894 9001 	ldrb.w	r9, [r4, #1]
   26666:	f894 8002 	ldrb.w	r8, [r4, #2]
   2666a:	f894 e003 	ldrb.w	lr, [r4, #3]
   2666e:	f894 c004 	ldrb.w	ip, [r4, #4]
   26672:	2a00      	cmp	r2, #0
{
   26674:	460d      	mov	r5, r1
   26676:	79a2      	ldrb	r2, [r4, #6]
   26678:	7961      	ldrb	r1, [r4, #5]
   2667a:	b089      	sub	sp, #36	; 0x24
	u8_t mic_len = NET_MIC_LEN(buf->data);
   2667c:	bfb4      	ite	lt
   2667e:	2608      	movlt	r6, #8
   26680:	2604      	movge	r6, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   26682:	b363      	cbz	r3, 266de <bt_mesh_net_encrypt+0x8a>
	nonce[0] = 0x03;
   26684:	2303      	movs	r3, #3
   26686:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   2668a:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   2668e:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   26692:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   26696:	f88d 1015 	strb.w	r1, [sp, #21]
	nonce[6] = pdu[6];
   2669a:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   2669e:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   266a0:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   266a4:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   266a8:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   266ac:	f7ff ff6f 	bl	2658e <sys_put_be32>
	err = bt_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   266b0:	682a      	ldr	r2, [r5, #0]
   266b2:	88ab      	ldrh	r3, [r5, #4]
   266b4:	3207      	adds	r2, #7
   266b6:	2100      	movs	r1, #0
   266b8:	e9cd 1100 	strd	r1, r1, [sp]
   266bc:	e9cd 2602 	strd	r2, r6, [sp, #8]
   266c0:	3b07      	subs	r3, #7
   266c2:	a904      	add	r1, sp, #16
   266c4:	4638      	mov	r0, r7
   266c6:	f7fe ff8b 	bl	255e0 <bt_ccm_encrypt>
	if (!err) {
   266ca:	4604      	mov	r4, r0
   266cc:	b918      	cbnz	r0, 266d6 <bt_mesh_net_encrypt+0x82>
		net_buf_simple_add(buf, mic_len);
   266ce:	4631      	mov	r1, r6
   266d0:	4628      	mov	r0, r5
   266d2:	f7f7 ffa3 	bl	1e61c <net_buf_simple_add>
}
   266d6:	4620      	mov	r0, r4
   266d8:	b009      	add	sp, #36	; 0x24
   266da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   266de:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   266e2:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   266e6:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   266ea:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   266ee:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   266f2:	f88d 1015 	strb.w	r1, [sp, #21]
	nonce[6] = pdu[6];
   266f6:	f88d 2016 	strb.w	r2, [sp, #22]
   266fa:	e7d1      	b.n	266a0 <bt_mesh_net_encrypt+0x4c>

000266fc <bt_mesh_net_decrypt>:
{
   266fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t mic_len = NET_MIC_LEN(buf->data);
   26700:	680c      	ldr	r4, [r1, #0]
{
   26702:	4606      	mov	r6, r0
   26704:	4610      	mov	r0, r2
	u8_t mic_len = NET_MIC_LEN(buf->data);
   26706:	f994 2001 	ldrsb.w	r2, [r4, #1]
   2670a:	f894 9001 	ldrb.w	r9, [r4, #1]
   2670e:	f894 8002 	ldrb.w	r8, [r4, #2]
   26712:	f894 e003 	ldrb.w	lr, [r4, #3]
   26716:	f894 c004 	ldrb.w	ip, [r4, #4]
   2671a:	2a00      	cmp	r2, #0
{
   2671c:	460d      	mov	r5, r1
   2671e:	79a2      	ldrb	r2, [r4, #6]
   26720:	7961      	ldrb	r1, [r4, #5]
   26722:	b089      	sub	sp, #36	; 0x24
	u8_t mic_len = NET_MIC_LEN(buf->data);
   26724:	bfb4      	ite	lt
   26726:	2708      	movlt	r7, #8
   26728:	2704      	movge	r7, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   2672a:	b343      	cbz	r3, 2677e <bt_mesh_net_decrypt+0x82>
	nonce[0] = 0x03;
   2672c:	2303      	movs	r3, #3
   2672e:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   26732:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   26736:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2673a:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2673e:	f88d 1015 	strb.w	r1, [sp, #21]
	nonce[6] = pdu[6];
   26742:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   26746:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   26748:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   2674c:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   26750:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   26754:	f7ff ff1b 	bl	2658e <sys_put_be32>
	buf->len -= mic_len;
   26758:	88ab      	ldrh	r3, [r5, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2675a:	682a      	ldr	r2, [r5, #0]
	buf->len -= mic_len;
   2675c:	1bdb      	subs	r3, r3, r7
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2675e:	3207      	adds	r2, #7
	buf->len -= mic_len;
   26760:	b29b      	uxth	r3, r3
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   26762:	2100      	movs	r1, #0
   26764:	e9cd 1100 	strd	r1, r1, [sp]
	buf->len -= mic_len;
   26768:	80ab      	strh	r3, [r5, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2676a:	e9cd 2702 	strd	r2, r7, [sp, #8]
   2676e:	3b07      	subs	r3, #7
   26770:	a904      	add	r1, sp, #16
   26772:	4630      	mov	r0, r6
   26774:	f7fe ff05 	bl	25582 <bt_ccm_decrypt>
}
   26778:	b009      	add	sp, #36	; 0x24
   2677a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   2677e:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   26782:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   26786:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   2678a:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2678e:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   26792:	f88d 1015 	strb.w	r1, [sp, #21]
	nonce[6] = pdu[6];
   26796:	f88d 2016 	strb.w	r2, [sp, #22]
   2679a:	e7d5      	b.n	26748 <bt_mesh_net_decrypt+0x4c>

0002679c <bt_mesh_app_encrypt>:
{
   2679c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   267a0:	b089      	sub	sp, #36	; 0x24
   267a2:	4606      	mov	r6, r0
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   267a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
{
   267a6:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
   267aa:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
   267ae:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	if (dev_key) {
   267b2:	2900      	cmp	r1, #0
{
   267b4:	461c      	mov	r4, r3
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   267b6:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
		nonce[0] = 0x01;
   267ba:	bf14      	ite	ne
   267bc:	2302      	movne	r3, #2
   267be:	2301      	moveq	r3, #1
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   267c0:	f10d 0111 	add.w	r1, sp, #17
{
   267c4:	4615      	mov	r5, r2
   267c6:	f88d 3010 	strb.w	r3, [sp, #16]
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   267ca:	f7ff fee0 	bl	2658e <sys_put_be32>
	dst[0] = val >> 8;
   267ce:	ea4f 2319 	mov.w	r3, r9, lsr #8
	sys_put_be32(iv_index, &nonce[9]);
   267d2:	9814      	ldr	r0, [sp, #80]	; 0x50
   267d4:	f88d 3015 	strb.w	r3, [sp, #21]
   267d8:	f10d 0119 	add.w	r1, sp, #25
   267dc:	0a3b      	lsrs	r3, r7, #8
   267de:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[1] = val;
   267e2:	f88d 7018 	strb.w	r7, [sp, #24]
   267e6:	f88d 9016 	strb.w	r9, [sp, #22]
   267ea:	f7ff fed0 	bl	2658e <sys_put_be32>
	err = bt_ccm_encrypt(key, nonce, buf->data, buf->len, ad, ad ? 16 : 0,
   267ee:	f1b8 0f00 	cmp.w	r8, #0
   267f2:	bf14      	ite	ne
   267f4:	2310      	movne	r3, #16
   267f6:	2300      	moveq	r3, #0
   267f8:	6822      	ldr	r2, [r4, #0]
   267fa:	2d00      	cmp	r5, #0
   267fc:	bf14      	ite	ne
   267fe:	2708      	movne	r7, #8
   26800:	2704      	moveq	r7, #4
   26802:	e9cd 8300 	strd	r8, r3, [sp]
   26806:	e9cd 2702 	strd	r2, r7, [sp, #8]
   2680a:	88a3      	ldrh	r3, [r4, #4]
   2680c:	a904      	add	r1, sp, #16
   2680e:	4630      	mov	r0, r6
   26810:	f7fe fee6 	bl	255e0 <bt_ccm_encrypt>
	if (!err) {
   26814:	4605      	mov	r5, r0
   26816:	b918      	cbnz	r0, 26820 <bt_mesh_app_encrypt+0x84>
		net_buf_simple_add(buf, APP_MIC_LEN(aszmic));
   26818:	4639      	mov	r1, r7
   2681a:	4620      	mov	r0, r4
   2681c:	f7f7 fefe 	bl	1e61c <net_buf_simple_add>
}
   26820:	4628      	mov	r0, r5
   26822:	b009      	add	sp, #36	; 0x24
   26824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00026828 <bt_mesh_app_decrypt>:
{
   26828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2682c:	b088      	sub	sp, #32
   2682e:	4606      	mov	r6, r0
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   26830:	9814      	ldr	r0, [sp, #80]	; 0x50
{
   26832:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
   26836:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
	if (dev_key) {
   2683a:	2900      	cmp	r1, #0
{
   2683c:	461c      	mov	r4, r3
   2683e:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
		nonce[0] = 0x01;
   26842:	bf14      	ite	ne
   26844:	2302      	movne	r3, #2
   26846:	2301      	moveq	r3, #1
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   26848:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
   2684c:	f10d 0111 	add.w	r1, sp, #17
{
   26850:	4615      	mov	r5, r2
   26852:	f88d 3010 	strb.w	r3, [sp, #16]
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   26856:	f7ff fe9a 	bl	2658e <sys_put_be32>
	dst[0] = val >> 8;
   2685a:	ea4f 231a 	mov.w	r3, sl, lsr #8
	sys_put_be32(iv_index, &nonce[9]);
   2685e:	f10d 0119 	add.w	r1, sp, #25
   26862:	9815      	ldr	r0, [sp, #84]	; 0x54
   26864:	f88d 3015 	strb.w	r3, [sp, #21]
   26868:	ea4f 2319 	mov.w	r3, r9, lsr #8
   2686c:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[1] = val;
   26870:	f88d a016 	strb.w	sl, [sp, #22]
   26874:	f88d 9018 	strb.w	r9, [sp, #24]
   26878:	f7ff fe89 	bl	2658e <sys_put_be32>
	err = bt_ccm_decrypt(key, nonce, buf->data, buf->len, ad, ad ? 16 : 0,
   2687c:	f1b8 0f00 	cmp.w	r8, #0
   26880:	683a      	ldr	r2, [r7, #0]
   26882:	bf14      	ite	ne
   26884:	2310      	movne	r3, #16
   26886:	2300      	moveq	r3, #0
   26888:	2d00      	cmp	r5, #0
   2688a:	bf14      	ite	ne
   2688c:	2108      	movne	r1, #8
   2688e:	2104      	moveq	r1, #4
   26890:	e9cd 2102 	strd	r2, r1, [sp, #8]
   26894:	e9cd 8300 	strd	r8, r3, [sp]
   26898:	6822      	ldr	r2, [r4, #0]
   2689a:	88a3      	ldrh	r3, [r4, #4]
   2689c:	a904      	add	r1, sp, #16
   2689e:	4630      	mov	r0, r6
   268a0:	f7fe fe6f 	bl	25582 <bt_ccm_decrypt>
	if (!err) {
   268a4:	4605      	mov	r5, r0
   268a6:	b918      	cbnz	r0, 268b0 <bt_mesh_app_decrypt+0x88>
		net_buf_simple_add(out, buf->len);
   268a8:	88a1      	ldrh	r1, [r4, #4]
   268aa:	4638      	mov	r0, r7
   268ac:	f7f7 feb6 	bl	1e61c <net_buf_simple_add>
}
   268b0:	4628      	mov	r0, r5
   268b2:	b008      	add	sp, #32
   268b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000268b8 <bt_mesh_prov_conf_salt>:
{
   268b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const u8_t conf_salt_key[16] = { 0 };
   268ba:	2200      	movs	r2, #0
   268bc:	e9cd 2200 	strd	r2, r2, [sp]
   268c0:	e9cd 2202 	strd	r2, r2, [sp, #8]
{
   268c4:	460b      	mov	r3, r1
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
   268c6:	2291      	movs	r2, #145	; 0x91
   268c8:	4601      	mov	r1, r0
   268ca:	4668      	mov	r0, sp
   268cc:	f7ff fe8a 	bl	265e4 <bt_mesh_aes_cmac_one>
}
   268d0:	b005      	add	sp, #20
   268d2:	f85d fb04 	ldr.w	pc, [sp], #4

000268d6 <bt_mesh_prov_conf>:

int bt_mesh_prov_conf(const u8_t conf_key[16], const u8_t rand[16],
		      const u8_t auth[16], u8_t conf[16])
{
   268d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_mesh_sg sg[] = { { rand, 16 }, { auth, 16 } };
   268d8:	9100      	str	r1, [sp, #0]
   268da:	2110      	movs	r1, #16
   268dc:	e9cd 1201 	strd	r1, r2, [sp, #4]
   268e0:	9103      	str	r1, [sp, #12]

	BT_DBG("ConfirmationKey %s", bt_hex(conf_key, 16));
	BT_DBG("RandomDevice %s", bt_hex(rand, 16));
	BT_DBG("AuthValue %s", bt_hex(auth, 16));

	return bt_mesh_aes_cmac(conf_key, sg, ARRAY_SIZE(sg), conf);
   268e2:	2202      	movs	r2, #2
   268e4:	4669      	mov	r1, sp
   268e6:	f7ff fe5b 	bl	265a0 <bt_mesh_aes_cmac>
}
   268ea:	b005      	add	sp, #20
   268ec:	f85d fb04 	ldr.w	pc, [sp], #4

000268f0 <bt_mesh_prov_decrypt>:

int bt_mesh_prov_decrypt(const u8_t key[16], u8_t nonce[13],
			 const u8_t data[25 + 8], u8_t out[25])
{
   268f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_ccm_decrypt(key, nonce, data, 25, NULL, 0, out, 8);
   268f2:	2408      	movs	r4, #8
   268f4:	e9cd 3402 	strd	r3, r4, [sp, #8]
   268f8:	2300      	movs	r3, #0
   268fa:	e9cd 3300 	strd	r3, r3, [sp]
   268fe:	2319      	movs	r3, #25
   26900:	f7fe fe3f 	bl	25582 <bt_ccm_decrypt>
}
   26904:	b004      	add	sp, #16
   26906:	bd10      	pop	{r4, pc}

00026908 <bt_mesh_beacon_auth>:
}

int bt_mesh_beacon_auth(const u8_t beacon_key[16], u8_t flags,
			const u8_t net_id[8], u32_t iv_index,
			u8_t auth[8])
{
   26908:	b530      	push	{r4, r5, lr}
   2690a:	b089      	sub	sp, #36	; 0x24
   2690c:	4604      	mov	r4, r0
   2690e:	4608      	mov	r0, r1
   26910:	461d      	mov	r5, r3
   26912:	4611      	mov	r1, r2

	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
   26914:	f88d 0000 	strb.w	r0, [sp]
	memcpy(&msg[1], net_id, 8);
   26918:	2208      	movs	r2, #8
   2691a:	f10d 0001 	add.w	r0, sp, #1
   2691e:	f7fe fbb7 	bl	25090 <memcpy>
	sys_put_be32(iv_index, &msg[9]);
   26922:	f10d 0109 	add.w	r1, sp, #9
   26926:	4628      	mov	r0, r5
   26928:	f7ff fe31 	bl	2658e <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   2692c:	4620      	mov	r0, r4
   2692e:	ab04      	add	r3, sp, #16
   26930:	220d      	movs	r2, #13
   26932:	4669      	mov	r1, sp
   26934:	f7ff fe56 	bl	265e4 <bt_mesh_aes_cmac_one>
	if (!err) {
   26938:	4604      	mov	r4, r0
   2693a:	b920      	cbnz	r0, 26946 <bt_mesh_beacon_auth+0x3e>
		memcpy(auth, tmp, 8);
   2693c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2693e:	2208      	movs	r2, #8
   26940:	a904      	add	r1, sp, #16
   26942:	f7fe fba5 	bl	25090 <memcpy>
	}

	return err;
}
   26946:	4620      	mov	r0, r4
   26948:	b009      	add	sp, #36	; 0x24
   2694a:	bd30      	pop	{r4, r5, pc}

0002694c <k_uptime_get_32>:
{
   2694c:	b510      	push	{r4, lr}
   2694e:	f001 fda7 	bl	284a0 <z_impl_k_uptime_ticks>
   26952:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   26956:	fba0 2304 	umull	r2, r3, r0, r4
   2695a:	fb04 3301 	mla	r3, r4, r1, r3
   2695e:	0bd0      	lsrs	r0, r2, #15
}
   26960:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   26964:	bd10      	pop	{r4, pc}

00026966 <bt_mesh_model_find_group>:
		.mod = *mod,
   26966:	6800      	ldr	r0, [r0, #0]
		if (mod->groups[i] == addr) {
   26968:	8a03      	ldrh	r3, [r0, #16]
   2696a:	428b      	cmp	r3, r1
   2696c:	d007      	beq.n	2697e <bt_mesh_model_find_group+0x18>
   2696e:	8a43      	ldrh	r3, [r0, #18]
   26970:	428b      	cmp	r3, r1
   26972:	d106      	bne.n	26982 <bt_mesh_model_find_group+0x1c>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   26974:	2301      	movs	r3, #1
			return &mod->groups[i];
   26976:	3308      	adds	r3, #8
   26978:	eb00 0043 	add.w	r0, r0, r3, lsl #1
	if (ctx->entry) {
   2697c:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   2697e:	2300      	movs	r3, #0
   26980:	e7f9      	b.n	26976 <bt_mesh_model_find_group+0x10>
	ctx->entry = model_group_get(mod, ctx->addr);
   26982:	2000      	movs	r0, #0
}
   26984:	4770      	bx	lr

00026986 <bt_mesh_fixed_group_match>:
	switch (addr) {
   26986:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
   2698a:	38fc      	subs	r0, #252	; 0xfc
{
   2698c:	b508      	push	{r3, lr}
   2698e:	2803      	cmp	r0, #3
   26990:	d803      	bhi.n	2699a <bt_mesh_fixed_group_match+0x14>
   26992:	e8df f000 	tbb	[pc, r0]
   26996:	0a04      	.short	0x0a04
   26998:	100d      	.short	0x100d
		return true;
   2699a:	2000      	movs	r0, #0
}
   2699c:	bd08      	pop	{r3, pc}
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   2699e:	f7eb fc9d 	bl	122dc <bt_mesh_gatt_proxy_get>
		return (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED);
   269a2:	1e43      	subs	r3, r0, #1
   269a4:	4258      	negs	r0, r3
   269a6:	4158      	adcs	r0, r3
   269a8:	e7f8      	b.n	2699c <bt_mesh_fixed_group_match+0x16>
   269aa:	f7eb fb51 	bl	12050 <bt_mesh_friend_get>
   269ae:	e7f8      	b.n	269a2 <bt_mesh_fixed_group_match+0x1c>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
   269b0:	f7eb fb44 	bl	1203c <bt_mesh_relay_get>
   269b4:	e7f5      	b.n	269a2 <bt_mesh_fixed_group_match+0x1c>
		return true;
   269b6:	2001      	movs	r0, #1
   269b8:	e7f0      	b.n	2699c <bt_mesh_fixed_group_match+0x16>

000269ba <bt_mesh_model_msg_init>:
{
   269ba:	b538      	push	{r3, r4, r5, lr}
	if (!buf->__buf) {
   269bc:	6883      	ldr	r3, [r0, #8]
   269be:	4604      	mov	r4, r0
   269c0:	b913      	cbnz	r3, 269c8 <bt_mesh_model_msg_init+0xe>
		buf->__buf = (u8_t *)buf + sizeof(*buf);
   269c2:	f100 030c 	add.w	r3, r0, #12
   269c6:	6083      	str	r3, [r0, #8]
	buf->data = buf->__buf + reserve_head;
   269c8:	68a3      	ldr	r3, [r4, #8]
   269ca:	6023      	str	r3, [r4, #0]
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   269cc:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0U;
   269ce:	f04f 0300 	mov.w	r3, #0
   269d2:	80a3      	strh	r3, [r4, #4]
   269d4:	d805      	bhi.n	269e2 <bt_mesh_model_msg_init+0x28>
		net_buf_simple_add_u8(msg, opcode);
   269d6:	4620      	mov	r0, r4
   269d8:	b2c9      	uxtb	r1, r1
}
   269da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
   269de:	f001 ba91 	b.w	27f04 <net_buf_simple_add_u8>
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   269e2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   269e6:	b28d      	uxth	r5, r1
   269e8:	d205      	bcs.n	269f6 <bt_mesh_model_msg_init+0x3c>
		net_buf_simple_add_be16(msg, opcode);
   269ea:	4629      	mov	r1, r5
   269ec:	4620      	mov	r0, r4
}
   269ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
   269f2:	f001 ba97 	b.w	27f24 <net_buf_simple_add_be16>
		net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
   269f6:	f3c1 4107 	ubfx	r1, r1, #16, #8
   269fa:	4620      	mov	r0, r4
   269fc:	f001 fa82 	bl	27f04 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   26a00:	4629      	mov	r1, r5
   26a02:	4620      	mov	r0, r4
}
   26a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   26a08:	f001 ba83 	b.w	27f12 <net_buf_simple_add_le16>

00026a0c <bt_mesh_model_send>:
{
   26a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a10:	b086      	sub	sp, #24
   26a12:	4604      	mov	r4, r0
	struct bt_mesh_net_tx tx = {
   26a14:	2500      	movs	r5, #0
		.sub = bt_mesh_subnet_get(ctx->net_idx),
   26a16:	8808      	ldrh	r0, [r1, #0]
	struct bt_mesh_net_tx tx = {
   26a18:	9505      	str	r5, [sp, #20]
{
   26a1a:	460e      	mov	r6, r1
   26a1c:	4617      	mov	r7, r2
   26a1e:	4698      	mov	r8, r3
	struct bt_mesh_net_tx tx = {
   26a20:	e9cd 5503 	strd	r5, r5, [sp, #12]
		.sub = bt_mesh_subnet_get(ctx->net_idx),
   26a24:	f7e5 fe9e 	bl	c764 <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
   26a28:	e9cd 0603 	strd	r0, r6, [sp, #12]
		.src = bt_mesh_model_elem(model)->addr,
   26a2c:	4620      	mov	r0, r4
   26a2e:	f7e8 fe5f 	bl	f6f0 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   26a32:	8803      	ldrh	r3, [r0, #0]
   26a34:	f8ad 3014 	strh.w	r3, [sp, #20]
		.xmit = bt_mesh_net_transmit_get(),
   26a38:	f7eb fa84 	bl	11f44 <bt_mesh_net_transmit_get>
	return model_send(model, &tx, false, msg, cb, cb_data);
   26a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	struct bt_mesh_net_tx tx = {
   26a3e:	f88d 0016 	strb.w	r0, [sp, #22]
	return model_send(model, &tx, false, msg, cb, cb_data);
   26a42:	e9cd 8300 	strd	r8, r3, [sp]
   26a46:	462a      	mov	r2, r5
   26a48:	463b      	mov	r3, r7
   26a4a:	a903      	add	r1, sp, #12
   26a4c:	4620      	mov	r0, r4
   26a4e:	f7e8 fd25 	bl	f49c <model_send>
}
   26a52:	b006      	add	sp, #24
   26a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026a58 <bt_mesh_model_find_vnd>:
{
   26a58:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->vnd_model_count; i++) {
   26a5a:	7947      	ldrb	r7, [r0, #5]
{
   26a5c:	4604      	mov	r4, r0
	for (i = 0U; i < elem->vnd_model_count; i++) {
   26a5e:	2300      	movs	r3, #0
   26a60:	b2d8      	uxtb	r0, r3
   26a62:	4287      	cmp	r7, r0
   26a64:	d801      	bhi.n	26a6a <bt_mesh_model_find_vnd+0x12>
	return NULL;
   26a66:	2000      	movs	r0, #0
}
   26a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
   26a6a:	68e6      	ldr	r6, [r4, #12]
   26a6c:	015d      	lsls	r5, r3, #5
   26a6e:	eb06 1043 	add.w	r0, r6, r3, lsl #5
   26a72:	5b75      	ldrh	r5, [r6, r5]
   26a74:	428d      	cmp	r5, r1
   26a76:	d102      	bne.n	26a7e <bt_mesh_model_find_vnd+0x26>
   26a78:	8845      	ldrh	r5, [r0, #2]
   26a7a:	4295      	cmp	r5, r2
   26a7c:	d0f4      	beq.n	26a68 <bt_mesh_model_find_vnd+0x10>
	for (i = 0U; i < elem->vnd_model_count; i++) {
   26a7e:	3301      	adds	r3, #1
   26a80:	e7ee      	b.n	26a60 <bt_mesh_model_find_vnd+0x8>

00026a82 <bt_mesh_model_find>:
{
   26a82:	b570      	push	{r4, r5, r6, lr}
	for (i = 0U; i < elem->model_count; i++) {
   26a84:	7906      	ldrb	r6, [r0, #4]
{
   26a86:	4602      	mov	r2, r0
	for (i = 0U; i < elem->model_count; i++) {
   26a88:	2300      	movs	r3, #0
   26a8a:	b2d8      	uxtb	r0, r3
   26a8c:	4286      	cmp	r6, r0
   26a8e:	d801      	bhi.n	26a94 <bt_mesh_model_find+0x12>
	return NULL;
   26a90:	2000      	movs	r0, #0
   26a92:	e008      	b.n	26aa6 <bt_mesh_model_find+0x24>
		if (elem->models[i].id == id) {
   26a94:	6895      	ldr	r5, [r2, #8]
   26a96:	015c      	lsls	r4, r3, #5
   26a98:	eb05 1043 	add.w	r0, r5, r3, lsl #5
   26a9c:	5b2c      	ldrh	r4, [r5, r4]
   26a9e:	428c      	cmp	r4, r1
   26aa0:	f103 0301 	add.w	r3, r3, #1
   26aa4:	d1f1      	bne.n	26a8a <bt_mesh_model_find+0x8>
}
   26aa6:	bd70      	pop	{r4, r5, r6, pc}

00026aa8 <bt_mesh_model_root>:
	while (mod->next) {
		mod = mod->next;
	}
#endif
	return mod;
}
   26aa8:	4770      	bx	lr

00026aaa <bt_mesh_model_tree_walk>:
void bt_mesh_model_tree_walk(struct bt_mesh_model *root,
			     enum bt_mesh_walk (*cb)(struct bt_mesh_model *mod,
						     u32_t depth,
						     void *user_data),
			     void *user_data)
{
   26aaa:	460b      	mov	r3, r1
	struct bt_mesh_model *m = root;
	u32_t depth = 0;

	do {
		if (cb(m, depth, user_data) == BT_MESH_WALK_STOP) {
   26aac:	2100      	movs	r1, #0
   26aae:	4718      	bx	r3

00026ab0 <key_idx_pack>:

#include <sys/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				u16_t idx1, u16_t idx2)
{
   26ab0:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   26ab2:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
   26ab6:	4605      	mov	r5, r0
   26ab8:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   26aba:	b289      	uxth	r1, r1
   26abc:	f001 fa29 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   26ac0:	f3c4 1107 	ubfx	r1, r4, #4, #8
   26ac4:	4628      	mov	r0, r5
}
   26ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
   26aca:	f001 ba1b 	b.w	27f04 <net_buf_simple_add_u8>

00026ace <heartbeat_pub_get>:
	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
   26ace:	2300      	movs	r3, #0
   26ad0:	461a      	mov	r2, r3
   26ad2:	f7e9 b9fb 	b.w	fecc <hb_pub_send_status>

00026ad6 <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  u16_t *idx1, u16_t *idx2)
{
   26ad6:	b430      	push	{r4, r5}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   26ad8:	6804      	ldr	r4, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
   26ada:	7865      	ldrb	r5, [r4, #1]
   26adc:	7823      	ldrb	r3, [r4, #0]
   26ade:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   26ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
   26ae6:	800b      	strh	r3, [r1, #0]
   26ae8:	78a1      	ldrb	r1, [r4, #2]
   26aea:	7863      	ldrb	r3, [r4, #1]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   26aec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   26af0:	091b      	lsrs	r3, r3, #4
	net_buf_simple_pull(buf, 3);
}
   26af2:	bc30      	pop	{r4, r5}
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   26af4:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   26af6:	2103      	movs	r1, #3
   26af8:	f7f7 bd4e 	b.w	1e598 <net_buf_simple_pull>

00026afc <friend_get>:
	send_friend_status(model, ctx);
   26afc:	f7e9 bd58 	b.w	105b0 <send_friend_status>

00026b00 <create_mod_app_status.isra.0>:
static void create_mod_app_status(struct net_buf_simple *msg,
   26b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26b04:	f89d 9020 	ldrb.w	r9, [sp, #32]
   26b08:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   26b0c:	4604      	mov	r4, r0
   26b0e:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   26b10:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
   26b14:	4617      	mov	r7, r2
   26b16:	461e      	mov	r6, r3
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   26b18:	f7ff ff4f 	bl	269ba <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
   26b1c:	4649      	mov	r1, r9
   26b1e:	4620      	mov	r0, r4
   26b20:	f001 f9f0 	bl	27f04 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
   26b24:	4639      	mov	r1, r7
   26b26:	4620      	mov	r0, r4
   26b28:	f001 f9f3 	bl	27f12 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
   26b2c:	4631      	mov	r1, r6
   26b2e:	4620      	mov	r0, r4
   26b30:	f001 f9ef 	bl	27f12 <net_buf_simple_add_le16>
	if (vnd) {
   26b34:	b14d      	cbz	r5, 26b4a <create_mod_app_status.isra.0+0x4a>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
   26b36:	2104      	movs	r1, #4
   26b38:	4620      	mov	r0, r4
   26b3a:	f7f7 fd6f 	bl	1e61c <net_buf_simple_add>
   26b3e:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   26b40:	4641      	mov	r1, r8
}
   26b42:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   26b46:	f7fe baa3 	b.w	25090 <memcpy>
   26b4a:	2102      	movs	r1, #2
   26b4c:	4620      	mov	r0, r4
   26b4e:	f7f7 fd65 	bl	1e61c <net_buf_simple_add>
   26b52:	2202      	movs	r2, #2
   26b54:	e7f4      	b.n	26b40 <create_mod_app_status.isra.0+0x40>

00026b56 <get_model>:
{
   26b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
   26b58:	888b      	ldrh	r3, [r1, #4]
   26b5a:	2b03      	cmp	r3, #3
{
   26b5c:	4605      	mov	r5, r0
   26b5e:	460c      	mov	r4, r1
   26b60:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
   26b62:	4608      	mov	r0, r1
	if (buf->len < 4) {
   26b64:	d809      	bhi.n	26b7a <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
   26b66:	f001 f999 	bl	27e9c <net_buf_simple_pull_le16>
		*vnd = false;
   26b6a:	2300      	movs	r3, #0
		id = net_buf_simple_pull_le16(buf);
   26b6c:	4601      	mov	r1, r0
		*vnd = false;
   26b6e:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
   26b70:	4628      	mov	r0, r5
}
   26b72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
   26b76:	f7ff bf84 	b.w	26a82 <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
   26b7a:	f001 f98f 	bl	27e9c <net_buf_simple_pull_le16>
   26b7e:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
   26b80:	4620      	mov	r0, r4
   26b82:	f001 f98b 	bl	27e9c <net_buf_simple_pull_le16>
		*vnd = true;
   26b86:	2301      	movs	r3, #1
		id = net_buf_simple_pull_le16(buf);
   26b88:	4602      	mov	r2, r0
		*vnd = true;
   26b8a:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
   26b8c:	4639      	mov	r1, r7
   26b8e:	4628      	mov	r0, r5
}
   26b90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
   26b94:	f7ff bf60 	b.w	26a58 <bt_mesh_model_find_vnd>

00026b98 <hb_pwr2.constprop.0>:
	if (!val) {
   26b98:	b158      	cbz	r0, 26bb2 <hb_pwr2.constprop.0+0x1a>
	} else if (val == 0xff || val == 0x11) {
   26b9a:	28ff      	cmp	r0, #255	; 0xff
   26b9c:	d007      	beq.n	26bae <hb_pwr2.constprop.0+0x16>
   26b9e:	2811      	cmp	r0, #17
   26ba0:	d005      	beq.n	26bae <hb_pwr2.constprop.0+0x16>
		return (1 << (val - sub));
   26ba2:	2301      	movs	r3, #1
   26ba4:	3801      	subs	r0, #1
   26ba6:	fa03 f000 	lsl.w	r0, r3, r0
   26baa:	b280      	uxth	r0, r0
   26bac:	4770      	bx	lr
		return 0xffff;
   26bae:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   26bb2:	4770      	bx	lr

00026bb4 <va_store>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26bb4:	3014      	adds	r0, #20
   26bb6:	f3bf 8f5b 	dmb	ish
   26bba:	e850 3f00 	ldrex	r3, [r0]
   26bbe:	f043 0301 	orr.w	r3, r3, #1
   26bc2:	e840 3200 	strex	r2, r3, [r0]
   26bc6:	2a00      	cmp	r2, #0
   26bc8:	d1f7      	bne.n	26bba <va_store+0x6>
   26bca:	f3bf 8f5b 	dmb	ish
		bt_mesh_store_label();
   26bce:	f000 b9d0 	b.w	26f72 <bt_mesh_store_label>

00026bd2 <mod_unbind.part.0>:
static u8_t mod_unbind(struct bt_mesh_model *model, u16_t key_idx, bool store)
   26bd2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   26bd6:	4604      	mov	r4, r0
   26bd8:	460e      	mov	r6, r1
   26bda:	4617      	mov	r7, r2
   26bdc:	f100 050c 	add.w	r5, r0, #12
   26be0:	f100 0910 	add.w	r9, r0, #16
		model->keys[i] = BT_MESH_KEY_UNUSED;
   26be4:	f64f 7aff 	movw	sl, #65535	; 0xffff
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   26be8:	f04f 0800 	mov.w	r8, #0
		if (model->keys[i] != key_idx) {
   26bec:	f835 3b02 	ldrh.w	r3, [r5], #2
   26bf0:	42b3      	cmp	r3, r6
   26bf2:	d116      	bne.n	26c22 <mod_unbind.part.0+0x50>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   26bf4:	f825 ac02 	strh.w	sl, [r5, #-2]
		if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   26bf8:	b117      	cbz	r7, 26c00 <mod_unbind.part.0+0x2e>
			bt_mesh_store_mod_bind(model);
   26bfa:	4620      	mov	r0, r4
   26bfc:	f000 f9a4 	bl	26f48 <bt_mesh_store_mod_bind>
		if (model->pub && model->pub->key == key_idx) {
   26c00:	68a3      	ldr	r3, [r4, #8]
   26c02:	b173      	cbz	r3, 26c22 <mod_unbind.part.0+0x50>
   26c04:	88db      	ldrh	r3, [r3, #6]
   26c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
   26c0a:	42b3      	cmp	r3, r6
   26c0c:	d109      	bne.n	26c22 <mod_unbind.part.0+0x50>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   26c0e:	2300      	movs	r3, #0
   26c10:	e9cd 8702 	strd	r8, r7, [sp, #8]
   26c14:	e9cd 8800 	strd	r8, r8, [sp]
   26c18:	461a      	mov	r2, r3
   26c1a:	4619      	mov	r1, r3
   26c1c:	4620      	mov	r0, r4
   26c1e:	f7ea fc9f 	bl	11560 <_mod_pub_set>
	for (i = 0; i < ARRAY_SIZE(model->keys); i++) {
   26c22:	454d      	cmp	r5, r9
   26c24:	d1e2      	bne.n	26bec <mod_unbind.part.0+0x1a>
}
   26c26:	2000      	movs	r0, #0
   26c28:	b004      	add	sp, #16
   26c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026c2e <_mod_unbind>:
{
   26c2e:	b570      	push	{r4, r5, r6, lr}
   26c30:	9e04      	ldr	r6, [sp, #16]
	mod_unbind(mod, data->app_idx, data->store);
   26c32:	8835      	ldrh	r5, [r6, #0]
{
   26c34:	4604      	mov	r4, r0
	if (!app_key_is_valid(key_idx)) {
   26c36:	4628      	mov	r0, r5
   26c38:	f7e9 f862 	bl	fd00 <app_key_is_valid>
   26c3c:	b130      	cbz	r0, 26c4c <_mod_unbind+0x1e>
   26c3e:	78b2      	ldrb	r2, [r6, #2]
   26c40:	4629      	mov	r1, r5
   26c42:	4620      	mov	r0, r4
}
   26c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26c48:	f7ff bfc3 	b.w	26bd2 <mod_unbind.part.0>
   26c4c:	bd70      	pop	{r4, r5, r6, pc}

00026c4e <heartbeat_sub_get>:
	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
   26c4e:	f7ea bee5 	b.w	11a1c <hb_sub_send_status.constprop.0>

00026c52 <app_key_set>:
{
   26c52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26c56:	4680      	mov	r8, r0
   26c58:	460f      	mov	r7, r1
   26c5a:	4616      	mov	r6, r2
   26c5c:	4699      	mov	r9, r3
	sub = bt_mesh_subnet_get(net_idx);
   26c5e:	f7e5 fd81 	bl	c764 <bt_mesh_subnet_get>
	if (!sub) {
   26c62:	4605      	mov	r5, r0
   26c64:	2800      	cmp	r0, #0
   26c66:	d039      	beq.n	26cdc <app_key_set+0x8a>
	key = bt_mesh_app_key_find(app_idx);
   26c68:	4638      	mov	r0, r7
   26c6a:	f7e7 fbef 	bl	e44c <bt_mesh_app_key_find>
   26c6e:	4604      	mov	r4, r0
	if (update) {
   26c70:	f1b9 0f00 	cmp.w	r9, #0
   26c74:	d024      	beq.n	26cc0 <app_key_set+0x6e>
		if (!key) {
   26c76:	2800      	cmp	r0, #0
   26c78:	d047      	beq.n	26d0a <app_key_set+0xb8>
		if (key->net_idx != net_idx) {
   26c7a:	8803      	ldrh	r3, [r0, #0]
   26c7c:	4543      	cmp	r3, r8
   26c7e:	d146      	bne.n	26d0e <app_key_set+0xbc>
		if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
   26c80:	7feb      	ldrb	r3, [r5, #31]
   26c82:	2b01      	cmp	r3, #1
   26c84:	d002      	beq.n	26c8c <app_key_set+0x3a>
			return STATUS_CANNOT_UPDATE;
   26c86:	200b      	movs	r0, #11
}
   26c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (key->updated) {
   26c8c:	7902      	ldrb	r2, [r0, #4]
   26c8e:	b142      	cbz	r2, 26ca2 <app_key_set+0x50>
			if (memcmp(keys->val, val, 16)) {
   26c90:	2210      	movs	r2, #16
   26c92:	4631      	mov	r1, r6
   26c94:	3017      	adds	r0, #23
   26c96:	f7fe f9eb 	bl	25070 <memcmp>
   26c9a:	2800      	cmp	r0, #0
   26c9c:	d1f3      	bne.n	26c86 <app_key_set+0x34>
				return STATUS_SUCCESS;
   26c9e:	2000      	movs	r0, #0
   26ca0:	e7f2      	b.n	26c88 <app_key_set+0x36>
		keys = &key->keys[1];
   26ca2:	f100 0a16 	add.w	sl, r0, #22
		key->updated = true;
   26ca6:	7103      	strb	r3, [r0, #4]
	return bt_mesh_k4(app_key, app_id);
   26ca8:	4651      	mov	r1, sl
   26caa:	4630      	mov	r0, r6
   26cac:	f7e8 fb04 	bl	f2b8 <bt_mesh_k4>
	if (bt_mesh_app_id(val, &keys->id)) {
   26cb0:	b1f0      	cbz	r0, 26cf0 <app_key_set+0x9e>
		if (update) {
   26cb2:	f1b9 0f00 	cmp.w	r9, #0
   26cb6:	d001      	beq.n	26cbc <app_key_set+0x6a>
			key->updated = false;
   26cb8:	2300      	movs	r3, #0
   26cba:	7123      	strb	r3, [r4, #4]
		return STATUS_STORAGE_FAIL;
   26cbc:	2009      	movs	r0, #9
   26cbe:	e7e3      	b.n	26c88 <app_key_set+0x36>
		if (key) {
   26cc0:	b170      	cbz	r0, 26ce0 <app_key_set+0x8e>
			if (key->net_idx == net_idx &&
   26cc2:	8805      	ldrh	r5, [r0, #0]
   26cc4:	4545      	cmp	r5, r8
   26cc6:	d109      	bne.n	26cdc <app_key_set+0x8a>
			    !memcmp(key->keys[0].val, val, 16)) {
   26cc8:	2210      	movs	r2, #16
   26cca:	4631      	mov	r1, r6
   26ccc:	3006      	adds	r0, #6
   26cce:	f7fe f9cf 	bl	25070 <memcmp>
			if (key->net_idx == net_idx &&
   26cd2:	2800      	cmp	r0, #0
   26cd4:	d0e3      	beq.n	26c9e <app_key_set+0x4c>
			if (key->net_idx == net_idx) {
   26cd6:	8823      	ldrh	r3, [r4, #0]
   26cd8:	42ab      	cmp	r3, r5
   26cda:	d01a      	beq.n	26d12 <app_key_set+0xc0>
				return STATUS_INVALID_NETKEY;
   26cdc:	2004      	movs	r0, #4
   26cde:	e7d3      	b.n	26c88 <app_key_set+0x36>
		key = bt_mesh_app_key_alloc(app_idx);
   26ce0:	4638      	mov	r0, r7
   26ce2:	f7ea ffb1 	bl	11c48 <bt_mesh_app_key_alloc>
		if (!key) {
   26ce6:	4604      	mov	r4, r0
   26ce8:	b1a8      	cbz	r0, 26d16 <app_key_set+0xc4>
		keys = &key->keys[0];
   26cea:	f100 0a05 	add.w	sl, r0, #5
   26cee:	e7db      	b.n	26ca8 <app_key_set+0x56>
	key->net_idx = net_idx;
   26cf0:	f8a4 8000 	strh.w	r8, [r4]
	key->app_idx = app_idx;
   26cf4:	8067      	strh	r7, [r4, #2]
	memcpy(keys->val, val, 16);
   26cf6:	2210      	movs	r2, #16
   26cf8:	4631      	mov	r1, r6
   26cfa:	f10a 0001 	add.w	r0, sl, #1
   26cfe:	f7fe f9c7 	bl	25090 <memcpy>
		bt_mesh_store_app_key(key);
   26d02:	4620      	mov	r0, r4
   26d04:	f000 f8a7 	bl	26e56 <bt_mesh_store_app_key>
	return STATUS_SUCCESS;
   26d08:	e7c9      	b.n	26c9e <app_key_set+0x4c>
			return STATUS_INVALID_APPKEY;
   26d0a:	2003      	movs	r0, #3
   26d0c:	e7bc      	b.n	26c88 <app_key_set+0x36>
			return STATUS_INVALID_BINDING;
   26d0e:	2011      	movs	r0, #17
   26d10:	e7ba      	b.n	26c88 <app_key_set+0x36>
				return STATUS_IDX_ALREADY_STORED;
   26d12:	2006      	movs	r0, #6
   26d14:	e7b8      	b.n	26c88 <app_key_set+0x36>
			return STATUS_INSUFF_RESOURCES;
   26d16:	2005      	movs	r0, #5
   26d18:	e7b6      	b.n	26c88 <app_key_set+0x36>

00026d1a <gatt_proxy_get>:
	send_gatt_proxy_status(model, ctx);
   26d1a:	f7eb bae9 	b.w	122f0 <send_gatt_proxy_status>

00026d1e <mod_sub_clear_visitor>:
{
   26d1e:	b510      	push	{r4, lr}
		bt_mesh_lpn_group_del(mod->groups, ARRAY_SIZE(mod->groups));
   26d20:	2102      	movs	r1, #2
{
   26d22:	4604      	mov	r4, r0
		bt_mesh_lpn_group_del(mod->groups, ARRAY_SIZE(mod->groups));
   26d24:	3010      	adds	r0, #16
   26d26:	f7ed fd4d 	bl	147c4 <bt_mesh_lpn_group_del>
	mod_sub_list_clear(mod);
   26d2a:	4620      	mov	r0, r4
   26d2c:	f7eb fbfe 	bl	1252c <mod_sub_list_clear>
}
   26d30:	2001      	movs	r0, #1
   26d32:	bd10      	pop	{r4, pc}

00026d34 <mod_reset>:
{
   26d34:	b570      	push	{r4, r5, r6, lr}
   26d36:	4604      	mov	r4, r0
   26d38:	4615      	mov	r5, r2
	clear_count = mod_sub_list_clear(mod);
   26d3a:	f7eb fbf7 	bl	1252c <mod_sub_list_clear>
		if (clear_count) {
   26d3e:	b110      	cbz	r0, 26d46 <mod_reset+0x12>
			bt_mesh_store_mod_sub(mod);
   26d40:	4620      	mov	r0, r4
   26d42:	f000 f908 	bl	26f56 <bt_mesh_store_mod_sub>
		bt_mesh_model_data_store(mod, vnd, NULL, 0);
   26d46:	2300      	movs	r3, #0
   26d48:	461a      	mov	r2, r3
   26d4a:	4629      	mov	r1, r5
   26d4c:	4620      	mov	r0, r4
   26d4e:	f7ec feeb 	bl	13b28 <bt_mesh_model_data_store>
	if (mod->cb && mod->cb->reset) {
   26d52:	69a3      	ldr	r3, [r4, #24]
   26d54:	b12b      	cbz	r3, 26d62 <mod_reset+0x2e>
   26d56:	68db      	ldr	r3, [r3, #12]
   26d58:	b11b      	cbz	r3, 26d62 <mod_reset+0x2e>
		mod->cb->reset(mod);
   26d5a:	4620      	mov	r0, r4
}
   26d5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		mod->cb->reset(mod);
   26d60:	4718      	bx	r3
}
   26d62:	bd70      	pop	{r4, r5, r6, pc}

00026d64 <atomic_or>:
{
   26d64:	4603      	mov	r3, r0
}
   26d66:	f3bf 8f5b 	dmb	ish
   26d6a:	e853 0f00 	ldrex	r0, [r3]
   26d6e:	ea40 0201 	orr.w	r2, r0, r1
   26d72:	e843 2c00 	strex	ip, r2, [r3]
   26d76:	f1bc 0f00 	cmp.w	ip, #0
   26d7a:	d1f6      	bne.n	26d6a <atomic_or+0x6>
   26d7c:	f3bf 8f5b 	dmb	ish
   26d80:	4770      	bx	lr

00026d82 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26d82:	f3bf 8f5b 	dmb	ish
   26d86:	6800      	ldr	r0, [r0, #0]
   26d88:	f3bf 8f5b 	dmb	ish
}
   26d8c:	4770      	bx	lr

00026d8e <vnd_mod_set>:
{
   26d8e:	b507      	push	{r0, r1, r2, lr}
	return mod_set(true, name, len_rd, read_cb, cb_arg);
   26d90:	9300      	str	r3, [sp, #0]
   26d92:	4613      	mov	r3, r2
   26d94:	460a      	mov	r2, r1
   26d96:	4601      	mov	r1, r0
   26d98:	2001      	movs	r0, #1
   26d9a:	f7eb ffc9 	bl	12d30 <mod_set>
}
   26d9e:	b003      	add	sp, #12
   26da0:	f85d fb04 	ldr.w	pc, [sp], #4

00026da4 <sig_mod_set>:
{
   26da4:	b507      	push	{r0, r1, r2, lr}
	return mod_set(false, name, len_rd, read_cb, cb_arg);
   26da6:	9300      	str	r3, [sp, #0]
   26da8:	4613      	mov	r3, r2
   26daa:	460a      	mov	r2, r1
   26dac:	4601      	mov	r1, r0
   26dae:	2000      	movs	r0, #0
   26db0:	f7eb ffbe 	bl	12d30 <mod_set>
}
   26db4:	b003      	add	sp, #12
   26db6:	f85d fb04 	ldr.w	pc, [sp], #4

00026dba <atomic_test_and_clear_bit>:
{
   26dba:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   26dbc:	2301      	movs	r3, #1
   26dbe:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26dc2:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26dc4:	f3bf 8f5b 	dmb	ish
   26dc8:	e850 3f00 	ldrex	r3, [r0]
   26dcc:	ea03 0c02 	and.w	ip, r3, r2
   26dd0:	e840 ce00 	strex	lr, ip, [r0]
   26dd4:	f1be 0f00 	cmp.w	lr, #0
   26dd8:	d1f6      	bne.n	26dc8 <atomic_test_and_clear_bit+0xe>
   26dda:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   26dde:	420b      	tst	r3, r1
}
   26de0:	bf14      	ite	ne
   26de2:	2001      	movne	r0, #1
   26de4:	2000      	moveq	r0, #0
   26de6:	f85d fb04 	ldr.w	pc, [sp], #4

00026dea <bt_mesh_store_net>:
	schedule_store(BT_MESH_NET_PENDING);
   26dea:	2008      	movs	r0, #8
   26dec:	f7ec bd34 	b.w	13858 <schedule_store>

00026df0 <bt_mesh_store_iv>:
{
   26df0:	b510      	push	{r4, lr}
   26df2:	4604      	mov	r4, r0
	schedule_store(BT_MESH_IV_PENDING);
   26df4:	2009      	movs	r0, #9
   26df6:	f7ec fd2f 	bl	13858 <schedule_store>
	if (!only_duration) {
   26dfa:	b924      	cbnz	r4, 26e06 <bt_mesh_store_iv+0x16>
}
   26dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		schedule_store(BT_MESH_SEQ_PENDING);
   26e00:	200a      	movs	r0, #10
   26e02:	f7ec bd29 	b.w	13858 <schedule_store>
}
   26e06:	bd10      	pop	{r4, pc}

00026e08 <bt_mesh_store_rpl>:
	entry->store = true;
   26e08:	2301      	movs	r3, #1
   26e0a:	70c3      	strb	r3, [r0, #3]
	schedule_store(BT_MESH_RPL_PENDING);
   26e0c:	2006      	movs	r0, #6
   26e0e:	f7ec bd23 	b.w	13858 <schedule_store>

00026e12 <bt_mesh_store_subnet>:
{
   26e12:	b513      	push	{r0, r1, r4, lr}
	update = key_update_find(false, sub->net_idx, &free_slot);
   26e14:	8b81      	ldrh	r1, [r0, #28]
{
   26e16:	4604      	mov	r4, r0
	update = key_update_find(false, sub->net_idx, &free_slot);
   26e18:	aa01      	add	r2, sp, #4
   26e1a:	2000      	movs	r0, #0
   26e1c:	f7eb fcb0 	bl	12780 <key_update_find>
	if (update) {
   26e20:	b138      	cbz	r0, 26e32 <bt_mesh_store_subnet+0x20>
		update->clear = 0U;
   26e22:	7843      	ldrb	r3, [r0, #1]
   26e24:	f36f 1386 	bfc	r3, #6, #1
   26e28:	7043      	strb	r3, [r0, #1]
	schedule_store(BT_MESH_KEYS_PENDING);
   26e2a:	2007      	movs	r0, #7
   26e2c:	f7ec fd14 	bl	13858 <schedule_store>
   26e30:	e004      	b.n	26e3c <bt_mesh_store_subnet+0x2a>
	if (!free_slot) {
   26e32:	9a01      	ldr	r2, [sp, #4]
   26e34:	b922      	cbnz	r2, 26e40 <bt_mesh_store_subnet+0x2e>
		store_net_key(sub);
   26e36:	4620      	mov	r0, r4
   26e38:	f7ec f90a 	bl	13050 <store_net_key>
}
   26e3c:	b002      	add	sp, #8
   26e3e:	bd10      	pop	{r4, pc}
	free_slot->key_idx = sub->net_idx;
   26e40:	8ba3      	ldrh	r3, [r4, #28]
   26e42:	8811      	ldrh	r1, [r2, #0]
   26e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
   26e48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   26e4c:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
   26e50:	430b      	orrs	r3, r1
   26e52:	8013      	strh	r3, [r2, #0]
   26e54:	e7e9      	b.n	26e2a <bt_mesh_store_subnet+0x18>

00026e56 <bt_mesh_store_app_key>:
{
   26e56:	b513      	push	{r0, r1, r4, lr}
	update = key_update_find(true, key->app_idx, &free_slot);
   26e58:	8841      	ldrh	r1, [r0, #2]
{
   26e5a:	4604      	mov	r4, r0
	update = key_update_find(true, key->app_idx, &free_slot);
   26e5c:	aa01      	add	r2, sp, #4
   26e5e:	2001      	movs	r0, #1
   26e60:	f7eb fc8e 	bl	12780 <key_update_find>
	if (update) {
   26e64:	b138      	cbz	r0, 26e76 <bt_mesh_store_app_key+0x20>
		update->clear = 0U;
   26e66:	7843      	ldrb	r3, [r0, #1]
   26e68:	f36f 1386 	bfc	r3, #6, #1
   26e6c:	7043      	strb	r3, [r0, #1]
	schedule_store(BT_MESH_KEYS_PENDING);
   26e6e:	2007      	movs	r0, #7
   26e70:	f7ec fcf2 	bl	13858 <schedule_store>
   26e74:	e004      	b.n	26e80 <bt_mesh_store_app_key+0x2a>
	if (!free_slot) {
   26e76:	9a01      	ldr	r2, [sp, #4]
   26e78:	b922      	cbnz	r2, 26e84 <bt_mesh_store_app_key+0x2e>
		store_app_key(key);
   26e7a:	4620      	mov	r0, r4
   26e7c:	f7eb ff1c 	bl	12cb8 <store_app_key>
}
   26e80:	b002      	add	sp, #8
   26e82:	bd10      	pop	{r4, pc}
	free_slot->key_idx = key->app_idx;
   26e84:	8863      	ldrh	r3, [r4, #2]
   26e86:	8811      	ldrh	r1, [r2, #0]
   26e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
   26e8c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   26e90:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
   26e94:	430b      	orrs	r3, r1
   26e96:	8013      	strh	r3, [r2, #0]
   26e98:	e7e9      	b.n	26e6e <bt_mesh_store_app_key+0x18>

00026e9a <bt_mesh_store_hb_pub>:
	schedule_store(BT_MESH_HB_PUB_PENDING);
   26e9a:	200b      	movs	r0, #11
   26e9c:	f7ec bcdc 	b.w	13858 <schedule_store>

00026ea0 <bt_mesh_store_cfg>:
	schedule_store(BT_MESH_CFG_PENDING);
   26ea0:	200c      	movs	r0, #12
   26ea2:	f7ec bcd9 	b.w	13858 <schedule_store>

00026ea6 <bt_mesh_clear_net>:
{
   26ea6:	b508      	push	{r3, lr}
	schedule_store(BT_MESH_NET_PENDING);
   26ea8:	2008      	movs	r0, #8
   26eaa:	f7ec fcd5 	bl	13858 <schedule_store>
	schedule_store(BT_MESH_IV_PENDING);
   26eae:	2009      	movs	r0, #9
   26eb0:	f7ec fcd2 	bl	13858 <schedule_store>
}
   26eb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	schedule_store(BT_MESH_CFG_PENDING);
   26eb8:	200c      	movs	r0, #12
   26eba:	f7ec bccd 	b.w	13858 <schedule_store>

00026ebe <bt_mesh_clear_subnet>:
{
   26ebe:	b513      	push	{r0, r1, r4, lr}
	update = key_update_find(false, sub->net_idx, &free_slot);
   26ec0:	8b81      	ldrh	r1, [r0, #28]
{
   26ec2:	4604      	mov	r4, r0
	update = key_update_find(false, sub->net_idx, &free_slot);
   26ec4:	aa01      	add	r2, sp, #4
   26ec6:	2000      	movs	r0, #0
   26ec8:	f7eb fc5a 	bl	12780 <key_update_find>
	if (update) {
   26ecc:	b138      	cbz	r0, 26ede <bt_mesh_clear_subnet+0x20>
		update->clear = 1U;
   26ece:	7843      	ldrb	r3, [r0, #1]
   26ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26ed4:	7043      	strb	r3, [r0, #1]
	schedule_store(BT_MESH_KEYS_PENDING);
   26ed6:	2007      	movs	r0, #7
   26ed8:	f7ec fcbe 	bl	13858 <schedule_store>
   26edc:	e004      	b.n	26ee8 <bt_mesh_clear_subnet+0x2a>
	if (!free_slot) {
   26ede:	9b01      	ldr	r3, [sp, #4]
   26ee0:	8ba0      	ldrh	r0, [r4, #28]
   26ee2:	b91b      	cbnz	r3, 26eec <bt_mesh_clear_subnet+0x2e>
		clear_net_key(sub->net_idx);
   26ee4:	f7ec f8ec 	bl	130c0 <clear_net_key>
}
   26ee8:	b002      	add	sp, #8
   26eea:	bd10      	pop	{r4, pc}
	free_slot->key_idx = sub->net_idx;
   26eec:	881a      	ldrh	r2, [r3, #0]
   26eee:	f3c0 000b 	ubfx	r0, r0, #0, #12
   26ef2:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
   26ef6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
   26efa:	4310      	orrs	r0, r2
   26efc:	8018      	strh	r0, [r3, #0]
   26efe:	e7ea      	b.n	26ed6 <bt_mesh_clear_subnet+0x18>

00026f00 <bt_mesh_clear_app_key>:
{
   26f00:	b513      	push	{r0, r1, r4, lr}
	update = key_update_find(true, key->app_idx, &free_slot);
   26f02:	8841      	ldrh	r1, [r0, #2]
{
   26f04:	4604      	mov	r4, r0
	update = key_update_find(true, key->app_idx, &free_slot);
   26f06:	aa01      	add	r2, sp, #4
   26f08:	2001      	movs	r0, #1
   26f0a:	f7eb fc39 	bl	12780 <key_update_find>
	if (update) {
   26f0e:	b138      	cbz	r0, 26f20 <bt_mesh_clear_app_key+0x20>
		update->clear = 1U;
   26f10:	7843      	ldrb	r3, [r0, #1]
   26f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26f16:	7043      	strb	r3, [r0, #1]
	schedule_store(BT_MESH_KEYS_PENDING);
   26f18:	2007      	movs	r0, #7
   26f1a:	f7ec fc9d 	bl	13858 <schedule_store>
   26f1e:	e004      	b.n	26f2a <bt_mesh_clear_app_key+0x2a>
	if (!free_slot) {
   26f20:	9b01      	ldr	r3, [sp, #4]
   26f22:	8860      	ldrh	r0, [r4, #2]
   26f24:	b91b      	cbnz	r3, 26f2e <bt_mesh_clear_app_key+0x2e>
		clear_app_key(key->app_idx);
   26f26:	f7ec f8ed 	bl	13104 <clear_app_key>
}
   26f2a:	b002      	add	sp, #8
   26f2c:	bd10      	pop	{r4, pc}
	free_slot->key_idx = key->app_idx;
   26f2e:	881a      	ldrh	r2, [r3, #0]
   26f30:	f3c0 000b 	ubfx	r0, r0, #0, #12
   26f34:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
   26f38:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
   26f3c:	4310      	orrs	r0, r2
   26f3e:	8018      	strh	r0, [r3, #0]
   26f40:	e7ea      	b.n	26f18 <bt_mesh_clear_app_key+0x18>

00026f42 <bt_mesh_clear_rpl>:
	schedule_store(BT_MESH_RPL_PENDING);
   26f42:	2006      	movs	r0, #6
   26f44:	f7ec bc88 	b.w	13858 <schedule_store>

00026f48 <bt_mesh_store_mod_bind>:
	mod->flags |= BT_MESH_MOD_BIND_PENDING;
   26f48:	88c3      	ldrh	r3, [r0, #6]
   26f4a:	f043 0301 	orr.w	r3, r3, #1
   26f4e:	80c3      	strh	r3, [r0, #6]
	schedule_store(BT_MESH_MOD_PENDING);
   26f50:	200d      	movs	r0, #13
   26f52:	f7ec bc81 	b.w	13858 <schedule_store>

00026f56 <bt_mesh_store_mod_sub>:
	mod->flags |= BT_MESH_MOD_SUB_PENDING;
   26f56:	88c3      	ldrh	r3, [r0, #6]
   26f58:	f043 0302 	orr.w	r3, r3, #2
   26f5c:	80c3      	strh	r3, [r0, #6]
	schedule_store(BT_MESH_MOD_PENDING);
   26f5e:	200d      	movs	r0, #13
   26f60:	f7ec bc7a 	b.w	13858 <schedule_store>

00026f64 <bt_mesh_store_mod_pub>:
	mod->flags |= BT_MESH_MOD_PUB_PENDING;
   26f64:	88c3      	ldrh	r3, [r0, #6]
   26f66:	f043 0304 	orr.w	r3, r3, #4
   26f6a:	80c3      	strh	r3, [r0, #6]
	schedule_store(BT_MESH_MOD_PENDING);
   26f6c:	200d      	movs	r0, #13
   26f6e:	f7ec bc73 	b.w	13858 <schedule_store>

00026f72 <bt_mesh_store_label>:
	schedule_store(BT_MESH_VA_PENDING);
   26f72:	200e      	movs	r0, #14
   26f74:	f7ec bc70 	b.w	13858 <schedule_store>

00026f78 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   26f78:	2301      	movs	r3, #1
   26f7a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26f7c:	f3bf 8f5b 	dmb	ish
   26f80:	e850 2f00 	ldrex	r2, [r0]
   26f84:	431a      	orrs	r2, r3
   26f86:	e840 2100 	strex	r1, r2, [r0]
   26f8a:	2900      	cmp	r1, #0
   26f8c:	d1f8      	bne.n	26f80 <atomic_set_bit+0x8>
   26f8e:	f3bf 8f5b 	dmb	ish
}
   26f92:	4770      	bx	lr

00026f94 <group_zero>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26f94:	2300      	movs	r3, #0
   26f96:	f3bf 8f5b 	dmb	ish
   26f9a:	e850 2f00 	ldrex	r2, [r0]
   26f9e:	e840 3100 	strex	r1, r3, [r0]
   26fa2:	2900      	cmp	r1, #0
   26fa4:	d1f9      	bne.n	26f9a <group_zero+0x6>
   26fa6:	f3bf 8f5b 	dmb	ish
}
   26faa:	4770      	bx	lr

00026fac <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26fac:	f3bf 8f5b 	dmb	ish
   26fb0:	6800      	ldr	r0, [r0, #0]
   26fb2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   26fb6:	4108      	asrs	r0, r1
}
   26fb8:	f000 0001 	and.w	r0, r0, #1
   26fbc:	4770      	bx	lr

00026fbe <atomic_test_and_clear_bit>:
{
   26fbe:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   26fc0:	2301      	movs	r3, #1
   26fc2:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26fc6:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26fc8:	f3bf 8f5b 	dmb	ish
   26fcc:	e850 3f00 	ldrex	r3, [r0]
   26fd0:	ea03 0c02 	and.w	ip, r3, r2
   26fd4:	e840 ce00 	strex	lr, ip, [r0]
   26fd8:	f1be 0f00 	cmp.w	lr, #0
   26fdc:	d1f6      	bne.n	26fcc <atomic_test_and_clear_bit+0xe>
   26fde:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   26fe2:	420b      	tst	r3, r1
}
   26fe4:	bf14      	ite	ne
   26fe6:	2001      	movne	r0, #1
   26fe8:	2000      	moveq	r0, #0
   26fea:	f85d fb04 	ldr.w	pc, [sp], #4

00026fee <prov_capabilities>:
}
   26fee:	4770      	bx	lr

00026ff0 <prov_buf_init>:
{
   26ff0:	b538      	push	{r3, r4, r5, lr}
   26ff2:	4604      	mov	r4, r0
   26ff4:	460d      	mov	r5, r1
	net_buf_simple_reserve(buf, PROV_BEARER_BUF_HEADROOM);
   26ff6:	2105      	movs	r1, #5
   26ff8:	f7f7 f946 	bl	1e288 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, type);
   26ffc:	4629      	mov	r1, r5
   26ffe:	4620      	mov	r0, r4
}
   27000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, type);
   27004:	f000 bf7e 	b.w	27f04 <net_buf_simple_add_u8>

00027008 <atomic_or>:
{
   27008:	4603      	mov	r3, r0
}
   2700a:	f3bf 8f5b 	dmb	ish
   2700e:	e853 0f00 	ldrex	r0, [r3]
   27012:	ea40 0201 	orr.w	r2, r0, r1
   27016:	e843 2c00 	strex	ip, r2, [r3]
   2701a:	f1bc 0f00 	cmp.w	ip, #0
   2701e:	d1f6      	bne.n	2700e <atomic_or+0x6>
   27020:	f3bf 8f5b 	dmb	ish
   27024:	4770      	bx	lr

00027026 <prov_bearer_error>:
	prov_fail(err);
   27026:	4610      	mov	r0, r2
   27028:	f7ed bfa2 	b.w	14f70 <prov_fail>

0002702c <prov_complete>:
   2702c:	4770      	bx	lr

0002702e <prov_input_complete>:
	notify_input_complete();
   2702e:	f7ee bc29 	b.w	15884 <notify_input_complete>

00027032 <bt_prov_active>:
{
   27032:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   27034:	f7ed ff14 	bl	14e60 <atomic_get.constprop.0>
}
   27038:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2703c:	bd08      	pop	{r3, pc}

0002703e <clear_tx>:
}
   2703e:	4770      	bx	lr

00027040 <prov_ccc_changed>:
}
   27040:	4770      	bx	lr

00027042 <filter_add>:
{
   27042:	b510      	push	{r4, lr}
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   27044:	b179      	cbz	r1, 27066 <filter_add+0x24>
		if (client->filter[i] == addr) {
   27046:	8883      	ldrh	r3, [r0, #4]
   27048:	4299      	cmp	r1, r3
   2704a:	d00c      	beq.n	27066 <filter_add+0x24>
   2704c:	88c4      	ldrh	r4, [r0, #6]
   2704e:	42a1      	cmp	r1, r4
   27050:	d009      	beq.n	27066 <filter_add+0x24>
   27052:	8902      	ldrh	r2, [r0, #8]
   27054:	4291      	cmp	r1, r2
   27056:	d006      	beq.n	27066 <filter_add+0x24>
		if (client->filter[i] == BT_MESH_ADDR_UNASSIGNED) {
   27058:	b113      	cbz	r3, 27060 <filter_add+0x1e>
   2705a:	b12c      	cbz	r4, 27068 <filter_add+0x26>
   2705c:	b91a      	cbnz	r2, 27066 <filter_add+0x24>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   2705e:	2302      	movs	r3, #2
			client->filter[i] = addr;
   27060:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   27064:	8081      	strh	r1, [r0, #4]
}
   27066:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   27068:	2301      	movs	r3, #1
   2706a:	e7f9      	b.n	27060 <filter_add+0x1e>

0002706c <proxy_ccc_changed>:
   2706c:	4770      	bx	lr

0002706e <proxy_segment_and_send>:
{
   2706e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27072:	4688      	mov	r8, r1
   27074:	4614      	mov	r4, r2
   27076:	4606      	mov	r6, r0
	mtu = bt_gatt_get_mtu(conn) - 3;
   27078:	f7ff f953 	bl	26322 <bt_gatt_get_mtu>
	if (mtu > msg->len) {
   2707c:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
   2707e:	1ec5      	subs	r5, r0, #3
   27080:	b2ad      	uxth	r5, r5
	if (mtu > msg->len) {
   27082:	42ab      	cmp	r3, r5
   27084:	f008 073f 	and.w	r7, r8, #63	; 0x3f
   27088:	d20a      	bcs.n	270a0 <proxy_segment_and_send+0x32>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   2708a:	4639      	mov	r1, r7
   2708c:	4620      	mov	r0, r4
   2708e:	f000 feea 	bl	27e66 <net_buf_simple_push_u8>
		return proxy_send(conn, msg->data, msg->len);
   27092:	88a2      	ldrh	r2, [r4, #4]
   27094:	6821      	ldr	r1, [r4, #0]
   27096:	4630      	mov	r0, r6
}
   27098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return proxy_send(conn, msg->data, msg->len);
   2709c:	f7ef bba4 	b.w	167e8 <proxy_send>
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
   270a0:	f047 0140 	orr.w	r1, r7, #64	; 0x40
   270a4:	4620      	mov	r0, r4
   270a6:	f000 fede 	bl	27e66 <net_buf_simple_push_u8>
	proxy_send(conn, msg->data, mtu);
   270aa:	6821      	ldr	r1, [r4, #0]
   270ac:	462a      	mov	r2, r5
   270ae:	4630      	mov	r0, r6
   270b0:	f7ef fb9a 	bl	167e8 <proxy_send>
	net_buf_simple_pull(msg, mtu);
   270b4:	4629      	mov	r1, r5
   270b6:	4620      	mov	r0, r4
   270b8:	f7f7 fa6e 	bl	1e598 <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   270bc:	f047 0780 	orr.w	r7, r7, #128	; 0x80
	while (msg->len) {
   270c0:	88a3      	ldrh	r3, [r4, #4]
   270c2:	b163      	cbz	r3, 270de <proxy_segment_and_send+0x70>
		if (msg->len + 1 < mtu) {
   270c4:	3301      	adds	r3, #1
   270c6:	42ab      	cmp	r3, r5
   270c8:	da0c      	bge.n	270e4 <proxy_segment_and_send+0x76>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   270ca:	f048 01c0 	orr.w	r1, r8, #192	; 0xc0
   270ce:	4620      	mov	r0, r4
   270d0:	f000 fec9 	bl	27e66 <net_buf_simple_push_u8>
			proxy_send(conn, msg->data, msg->len);
   270d4:	88a2      	ldrh	r2, [r4, #4]
   270d6:	6821      	ldr	r1, [r4, #0]
   270d8:	4630      	mov	r0, r6
   270da:	f7ef fb85 	bl	167e8 <proxy_send>
}
   270de:	2000      	movs	r0, #0
   270e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   270e4:	4639      	mov	r1, r7
   270e6:	4620      	mov	r0, r4
   270e8:	f000 febd 	bl	27e66 <net_buf_simple_push_u8>
		proxy_send(conn, msg->data, mtu);
   270ec:	6821      	ldr	r1, [r4, #0]
   270ee:	462a      	mov	r2, r5
   270f0:	4630      	mov	r0, r6
   270f2:	f7ef fb79 	bl	167e8 <proxy_send>
		net_buf_simple_pull(msg, mtu);
   270f6:	4629      	mov	r1, r5
   270f8:	4620      	mov	r0, r4
   270fa:	f7f7 fa4d 	bl	1e598 <net_buf_simple_pull>
   270fe:	e7df      	b.n	270c0 <proxy_segment_and_send+0x52>

00027100 <beacon_send>:
{
   27100:	b530      	push	{r4, r5, lr}
   27102:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   27104:	ab04      	add	r3, sp, #16
   27106:	f44f 12b8 	mov.w	r2, #1507328	; 0x170000
{
   2710a:	4604      	mov	r4, r0
   2710c:	460d      	mov	r5, r1
	net_buf_simple_reserve(&buf, 1);
   2710e:	a801      	add	r0, sp, #4
   27110:	2101      	movs	r1, #1
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   27112:	e9cd 2302 	strd	r2, r3, [sp, #8]
   27116:	9301      	str	r3, [sp, #4]
	net_buf_simple_reserve(&buf, 1);
   27118:	f7f7 f8b6 	bl	1e288 <net_buf_simple_reserve>
	bt_mesh_beacon_create(sub, &buf);
   2711c:	a901      	add	r1, sp, #4
   2711e:	4628      	mov	r0, r5
   27120:	f7e4 ff84 	bl	c02c <bt_mesh_beacon_create>
	return proxy_segment_and_send(conn, BT_MESH_PROXY_BEACON, &buf);
   27124:	aa01      	add	r2, sp, #4
   27126:	2101      	movs	r1, #1
   27128:	4620      	mov	r0, r4
   2712a:	f7ff ffa0 	bl	2706e <proxy_segment_and_send>
}
   2712e:	b00b      	add	sp, #44	; 0x2c
   27130:	bd30      	pop	{r4, r5, pc}

00027132 <bt_mesh_proxy_identity_stop>:
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   27132:	2300      	movs	r3, #0
   27134:	f880 3020 	strb.w	r3, [r0, #32]
	sub->node_id_start = 0U;
   27138:	6243      	str	r3, [r0, #36]	; 0x24
}
   2713a:	4770      	bx	lr

0002713c <bt_mesh_proxy_addr_add>:
	if (client->filter_type == WHITELIST) {
   2713c:	f810 3c2e 	ldrb.w	r3, [r0, #-46]
   27140:	2b01      	cmp	r3, #1
{
   27142:	460a      	mov	r2, r1
	if (client->filter_type == WHITELIST) {
   27144:	d102      	bne.n	2714c <bt_mesh_proxy_addr_add+0x10>
		filter_add(client, addr);
   27146:	3838      	subs	r0, #56	; 0x38
   27148:	f7ff bf7b 	b.w	27042 <filter_add>
	} else if (client->filter_type == BLACKLIST) {
   2714c:	2b02      	cmp	r3, #2
   2714e:	d111      	bne.n	27174 <bt_mesh_proxy_addr_add+0x38>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   27150:	b181      	cbz	r1, 27174 <bt_mesh_proxy_addr_add+0x38>
		if (client->filter[i] == addr) {
   27152:	f830 1c34 	ldrh.w	r1, [r0, #-52]
   27156:	4291      	cmp	r1, r2
   27158:	d00d      	beq.n	27176 <bt_mesh_proxy_addr_add+0x3a>
   2715a:	f830 1c32 	ldrh.w	r1, [r0, #-50]
   2715e:	4291      	cmp	r1, r2
   27160:	d00b      	beq.n	2717a <bt_mesh_proxy_addr_add+0x3e>
   27162:	f830 1c30 	ldrh.w	r1, [r0, #-48]
   27166:	4291      	cmp	r1, r2
   27168:	d104      	bne.n	27174 <bt_mesh_proxy_addr_add+0x38>
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   2716a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   2716e:	2300      	movs	r3, #0
   27170:	f820 3c34 	strh.w	r3, [r0, #-52]
}
   27174:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   27176:	2300      	movs	r3, #0
   27178:	e7f7      	b.n	2716a <bt_mesh_proxy_addr_add+0x2e>
   2717a:	2301      	movs	r3, #1
   2717c:	e7f5      	b.n	2716a <bt_mesh_proxy_addr_add+0x2e>

0002717e <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
   2717e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   27180:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   27182:	1dc3      	adds	r3, r0, #7
   27184:	f023 0303 	bic.w	r3, r3, #3
{
   27188:	460e      	mov	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   2718a:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2718c:	3a01      	subs	r2, #1
   2718e:	b294      	uxth	r4, r2
{
   27190:	4605      	mov	r5, r0
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   27192:	2204      	movs	r2, #4
   27194:	2100      	movs	r1, #0
   27196:	fb06 0004 	mla	r0, r6, r4, r0
   2719a:	f7fd ffa4 	bl	250e6 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   2719e:	f64f 77ff 	movw	r7, #65535	; 0xffff
   271a2:	3c01      	subs	r4, #1
   271a4:	b2a4      	uxth	r4, r4
   271a6:	42bc      	cmp	r4, r7
   271a8:	d101      	bne.n	271ae <mem_init+0x30>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   271aa:	b003      	add	sp, #12
   271ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   271ae:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
   271b2:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   271b4:	2204      	movs	r2, #4
   271b6:	1b80      	subs	r0, r0, r6
   271b8:	eb0d 0102 	add.w	r1, sp, r2
   271bc:	4428      	add	r0, r5
		next = (u32_t)((u8_t *) mem_pool +
   271be:	9301      	str	r3, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   271c0:	f7fd ff66 	bl	25090 <memcpy>
   271c4:	e7ed      	b.n	271a2 <mem_init+0x24>

000271c6 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   271c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   271c8:	6804      	ldr	r4, [r0, #0]
{
   271ca:	4605      	mov	r5, r0
	if (*mem_head) {
   271cc:	b18c      	cbz	r4, 271f2 <mem_acquire+0x2c>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   271ce:	1de3      	adds	r3, r4, #7
   271d0:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   271d4:	2204      	movs	r2, #4
   271d6:	4621      	mov	r1, r4
   271d8:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   271dc:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   271de:	f7fd ff57 	bl	25090 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   271e2:	9b01      	ldr	r3, [sp, #4]
   271e4:	b123      	cbz	r3, 271f0 <mem_acquire+0x2a>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   271e6:	1dda      	adds	r2, r3, #7
   271e8:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   271ec:	3e01      	subs	r6, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   271ee:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   271f0:	602b      	str	r3, [r5, #0]
		return mem;
	}

	return NULL;
}
   271f2:	4620      	mov	r0, r4
   271f4:	b002      	add	sp, #8
   271f6:	bd70      	pop	{r4, r5, r6, pc}

000271f8 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   271f8:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   271fa:	680c      	ldr	r4, [r1, #0]
{
   271fc:	4606      	mov	r6, r0
   271fe:	460d      	mov	r5, r1
	if (*mem_head) {
   27200:	b11c      	cbz	r4, 2720a <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   27202:	1de3      	adds	r3, r4, #7
   27204:	f023 0303 	bic.w	r3, r3, #3
   27208:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   2720a:	2204      	movs	r2, #4
   2720c:	4629      	mov	r1, r5
   2720e:	4630      	mov	r0, r6
   27210:	f7fd ff3e 	bl	25090 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   27214:	1df2      	adds	r2, r6, #7
   27216:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   2721a:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   2721c:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   2721e:	602e      	str	r6, [r5, #0]
}
   27220:	bd70      	pop	{r4, r5, r6, pc}

00027222 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
   27222:	fb02 0001 	mla	r0, r2, r1, r0
   27226:	4770      	bx	lr

00027228 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
   27228:	1a40      	subs	r0, r0, r1
   2722a:	b280      	uxth	r0, r0
}
   2722c:	fbb0 f0f2 	udiv	r0, r0, r2
   27230:	4770      	bx	lr

00027232 <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
   27232:	b510      	push	{r4, lr}
	src += len;
   27234:	4411      	add	r1, r2
	while (len--) {
   27236:	3801      	subs	r0, #1
   27238:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2723c:	3a01      	subs	r2, #1
   2723e:	b292      	uxth	r2, r2
   27240:	429a      	cmp	r2, r3
   27242:	d100      	bne.n	27246 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   27244:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   27246:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   2724a:	f800 4f01 	strb.w	r4, [r0, #1]!
   2724e:	e7f5      	b.n	2723c <mem_rcopy+0xa>

00027250 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
   27250:	4401      	add	r1, r0
   27252:	4288      	cmp	r0, r1
   27254:	d101      	bne.n	2725a <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   27256:	2000      	movs	r0, #0
   27258:	4770      	bx	lr
		if (*src++) {
   2725a:	f810 3b01 	ldrb.w	r3, [r0], #1
   2725e:	2b00      	cmp	r3, #0
   27260:	d0f7      	beq.n	27252 <mem_nz+0x2>
			return 1;
   27262:	2001      	movs	r0, #1
}
   27264:	4770      	bx	lr

00027266 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   27266:	6010      	str	r0, [r2, #0]
   27268:	6008      	str	r0, [r1, #0]

	return link;
}
   2726a:	4770      	bx	lr

0002726c <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   2726c:	680a      	ldr	r2, [r1, #0]
{
   2726e:	4603      	mov	r3, r0
	if (*head != *tail) {
   27270:	6800      	ldr	r0, [r0, #0]
   27272:	4290      	cmp	r0, r2
   27274:	f04f 0200 	mov.w	r2, #0
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   27278:	bf0a      	itet	eq
   2727a:	600a      	streq	r2, [r1, #0]
		return NULL;
   2727c:	4610      	movne	r0, r2
	*head = *tail = NULL;
   2727e:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   27280:	4770      	bx	lr

00027282 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   27282:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   27284:	6814      	ldr	r4, [r2, #0]
   27286:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   27288:	6814      	ldr	r4, [r2, #0]
   2728a:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;
   2728c:	6010      	str	r0, [r2, #0]

	return link;
}
   2728e:	bd10      	pop	{r4, pc}

00027290 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   27290:	4288      	cmp	r0, r1
   27292:	d003      	beq.n	2729c <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   27294:	b11a      	cbz	r2, 2729e <memq_peek+0xe>
		*mem = head->mem;
   27296:	6843      	ldr	r3, [r0, #4]
   27298:	6013      	str	r3, [r2, #0]
   2729a:	4770      	bx	lr
		return NULL;
   2729c:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   2729e:	4770      	bx	lr

000272a0 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   272a0:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   272a2:	4283      	cmp	r3, r0
   272a4:	d009      	beq.n	272ba <memq_dequeue+0x1a>
	if (mem) {
   272a6:	b122      	cbz	r2, 272b2 <memq_dequeue+0x12>
		*mem = head->mem;
   272a8:	6858      	ldr	r0, [r3, #4]
   272aa:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   272ac:	681a      	ldr	r2, [r3, #0]
   272ae:	600a      	str	r2, [r1, #0]

	return old_head;
   272b0:	e001      	b.n	272b6 <memq_dequeue+0x16>
	if (old_head == NULL) {
   272b2:	2b00      	cmp	r3, #0
   272b4:	d1fa      	bne.n	272ac <memq_dequeue+0xc>
}
   272b6:	4618      	mov	r0, r3
   272b8:	4770      	bx	lr
		return NULL; /* queue is empty */
   272ba:	2300      	movs	r3, #0
   272bc:	e7fb      	b.n	272b6 <memq_dequeue+0x16>

000272be <util_ones_count_get>:
{
   272be:	b510      	push	{r4, lr}
   272c0:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0U;
   272c2:	2000      	movs	r0, #0
	while (octets_len--) {
   272c4:	3901      	subs	r1, #1
   272c6:	b2c9      	uxtb	r1, r1
   272c8:	29ff      	cmp	r1, #255	; 0xff
   272ca:	d100      	bne.n	272ce <util_ones_count_get+0x10>
}
   272cc:	bd10      	pop	{r4, pc}
		bite = *octets;
   272ce:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   272d2:	2b00      	cmp	r3, #0
   272d4:	d0f6      	beq.n	272c4 <util_ones_count_get+0x6>
			bite &= (bite - 1);
   272d6:	b25b      	sxtb	r3, r3
   272d8:	1e5c      	subs	r4, r3, #1
   272da:	4023      	ands	r3, r4
			one_count++;
   272dc:	3001      	adds	r0, #1
			bite &= (bite - 1);
   272de:	b2db      	uxtb	r3, r3
			one_count++;
   272e0:	b2c0      	uxtb	r0, r0
   272e2:	e7f6      	b.n	272d2 <util_ones_count_get+0x14>

000272e4 <ticker_dequeue>:
{
   272e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	previous = instance->ticker_id_head;
   272e6:	7f42      	ldrb	r2, [r0, #29]
	node = &instance->nodes[0];
   272e8:	6804      	ldr	r4, [r0, #0]
{
   272ea:	4605      	mov	r5, r0
	previous = instance->ticker_id_head;
   272ec:	4613      	mov	r3, r2
	total = 0U;
   272ee:	2000      	movs	r0, #0
	while (current != TICKER_NULL) {
   272f0:	2aff      	cmp	r2, #255	; 0xff
   272f2:	d101      	bne.n	272f8 <ticker_dequeue+0x14>
		return 0;
   272f4:	2000      	movs	r0, #0
}
   272f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
   272f8:	eb02 0682 	add.w	r6, r2, r2, lsl #2
   272fc:	eb04 0cc6 	add.w	ip, r4, r6, lsl #3
		if (current == id) {
   27300:	428a      	cmp	r2, r1
   27302:	f8dc 7008 	ldr.w	r7, [ip, #8]
   27306:	f814 6036 	ldrb.w	r6, [r4, r6, lsl #3]
   2730a:	4438      	add	r0, r7
   2730c:	d002      	beq.n	27314 <ticker_dequeue+0x30>
   2730e:	4613      	mov	r3, r2
   27310:	4632      	mov	r2, r6
   27312:	e7ed      	b.n	272f0 <ticker_dequeue+0xc>
	if (previous == current) {
   27314:	4293      	cmp	r3, r2
   27316:	d100      	bne.n	2731a <ticker_dequeue+0x36>
		instance->ticker_id_head = ticker_current->next;
   27318:	776e      	strb	r6, [r5, #29]
	node[previous].next = ticker_current->next;
   2731a:	b21b      	sxth	r3, r3
   2731c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   27320:	f804 6033 	strb.w	r6, [r4, r3, lsl #3]
	if (ticker_current->next != TICKER_NULL) {
   27324:	f89c 3000 	ldrb.w	r3, [ip]
   27328:	2bff      	cmp	r3, #255	; 0xff
   2732a:	d0e4      	beq.n	272f6 <ticker_dequeue+0x12>
		node[ticker_current->next].ticks_to_expire += timeout;
   2732c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   27330:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   27334:	68a3      	ldr	r3, [r4, #8]
   27336:	443b      	add	r3, r7
   27338:	60a3      	str	r3, [r4, #8]
	return (total + timeout);
   2733a:	e7dc      	b.n	272f6 <ticker_dequeue+0x12>

0002733c <ticks_to_expire_prep>:
{
   2733c:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   2733e:	1a55      	subs	r5, r2, r1
   27340:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   27344:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   27346:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   27348:	d109      	bne.n	2735e <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2734a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   2734e:	442b      	add	r3, r5
	if (ticks_to_expire > ticks_to_expire_minus) {
   27350:	42a3      	cmp	r3, r4
   27352:	d90e      	bls.n	27372 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   27354:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   27356:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   27358:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   2735a:	6144      	str	r4, [r0, #20]
}
   2735c:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2735e:	1a8a      	subs	r2, r1, r2
   27360:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   27364:	4293      	cmp	r3, r2
   27366:	d901      	bls.n	2736c <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   27368:	1a9b      	subs	r3, r3, r2
   2736a:	e7f1      	b.n	27350 <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   2736c:	4414      	add	r4, r2
   2736e:	1ae4      	subs	r4, r4, r3
			ticks_to_expire = 0U;
   27370:	2300      	movs	r3, #0
		ticks_to_expire_minus -= ticks_to_expire;
   27372:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
   27374:	2300      	movs	r3, #0
   27376:	e7ef      	b.n	27358 <ticks_to_expire_prep+0x1c>

00027378 <ticker_job_op_cb>:
{
   27378:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   2737a:	2200      	movs	r2, #0
   2737c:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   2737e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
   27380:	6259      	str	r1, [r3, #36]	; 0x24
{
   27382:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   27384:	b10a      	cbz	r2, 2738a <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   27386:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   27388:	4710      	bx	r2
}
   2738a:	4770      	bx	lr

0002738c <ticker_worker>:
{
   2738c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
   27390:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1U;
   27392:	2301      	movs	r3, #1
{
   27394:	4604      	mov	r4, r0
	instance->worker_trigger = 1U;
   27396:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   27398:	b91d      	cbnz	r5, 273a2 <ticker_worker+0x16>
	if (instance->ticker_id_head == TICKER_NULL) {
   2739a:	7f43      	ldrb	r3, [r0, #29]
   2739c:	2bff      	cmp	r3, #255	; 0xff
   2739e:	d102      	bne.n	273a6 <ticker_worker+0x1a>
		instance->worker_trigger = 0U;
   273a0:	77c5      	strb	r5, [r0, #31]
}
   273a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   273a6:	f7f6 f9c9 	bl	1d73c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   273aa:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
   273ac:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->nodes[0];
   273ae:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   273b2:	1bc7      	subs	r7, r0, r7
   273b4:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
   273b8:	2eff      	cmp	r6, #255	; 0xff
   273ba:	d006      	beq.n	273ca <ticker_worker+0x3e>
		ticker = &node[ticker_id_head];
   273bc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   273c0:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
   273c4:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   273c6:	429f      	cmp	r7, r3
   273c8:	d218      	bcs.n	273fc <ticker_worker+0x70>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   273ca:	7ae2      	ldrb	r2, [r4, #11]
   273cc:	7aa3      	ldrb	r3, [r4, #10]
   273ce:	4293      	cmp	r3, r2
   273d0:	d105      	bne.n	273de <ticker_worker+0x52>
	u8_t idx = *ticks_elapsed_index + 1;
   273d2:	3301      	adds	r3, #1
   273d4:	b2db      	uxtb	r3, r3
		idx = 0U;
   273d6:	2b02      	cmp	r3, #2
   273d8:	bf08      	it	eq
   273da:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   273dc:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   273de:	7ae3      	ldrb	r3, [r4, #11]
   273e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   273e4:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   273e6:	60dd      	str	r5, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   273e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0U;
   273ea:	2300      	movs	r3, #0
   273ec:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   273ee:	46ac      	mov	ip, r5
   273f0:	4623      	mov	r3, r4
   273f2:	2104      	movs	r1, #4
}
   273f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   273f8:	2003      	movs	r0, #3
   273fa:	4760      	bx	ip
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   273fc:	788a      	ldrb	r2, [r1, #2]
		ticker_id_head = ticker->next;
   273fe:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		ticks_elapsed -= ticks_to_expire;
   27402:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   27404:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   27406:	784b      	ldrb	r3, [r1, #1]
   27408:	1a9b      	subs	r3, r3, r2
   2740a:	b2db      	uxtb	r3, r3
   2740c:	2b01      	cmp	r3, #1
   2740e:	d1d3      	bne.n	273b8 <ticker_worker+0x2c>
		if (ticker->timeout_func) {
   27410:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
   27414:	3a01      	subs	r2, #1
   27416:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   27418:	f1b9 0f00 	cmp.w	r9, #0
   2741c:	d0cc      	beq.n	273b8 <ticker_worker+0x2c>
					   ticks_expired -
   2741e:	6948      	ldr	r0, [r1, #20]
   27420:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   27422:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
   27424:	1a28      	subs	r0, r5, r0
   27426:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
   27428:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2742c:	690b      	ldr	r3, [r1, #16]
   2742e:	6a49      	ldr	r1, [r1, #36]	; 0x24
   27430:	47c8      	blx	r9
   27432:	e7c1      	b.n	273b8 <ticker_worker+0x2c>

00027434 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   27434:	f7f6 b982 	b.w	1d73c <cntr_cnt_get>

00027438 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   27438:	1a40      	subs	r0, r0, r1
}
   2743a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2743e:	4770      	bx	lr

00027440 <ll_tx_pwr_lvl_get>:
#include "ull_conn_types.h"
#include "ull_conn_internal.h"

u8_t ll_tx_pwr_lvl_get(u8_t handle_type,
		       u16_t handle, u8_t type, s8_t *tx_pwr_lvl)
{
   27440:	b538      	push	{r3, r4, r5, lr}
   27442:	4604      	mov	r4, r0
	switch (handle_type) {
   27444:	2c02      	cmp	r4, #2
{
   27446:	4608      	mov	r0, r1
   27448:	461d      	mov	r5, r3
	switch (handle_type) {
   2744a:	d106      	bne.n	2745a <ll_tx_pwr_lvl_get+0x1a>
#endif /* CONFIG_BT_OBSERVER && CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL*/
#if defined(CONFIG_BT_CONN)
		case (BT_HCI_VS_LL_HANDLE_TYPE_CONN): {
			struct ll_conn *conn;

			conn = ll_connected_get(handle);
   2744c:	f000 f95d 	bl	2770a <ll_connected_get>
			if (!conn) {
   27450:	b108      	cbz	r0, 27456 <ll_tx_pwr_lvl_get+0x16>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
				/* Level desired is maximum available */
				*tx_pwr_lvl = lll_radio_tx_pwr_max_get();
#else  /* !CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
				/* Return default if not multiple TXP */
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   27452:	2400      	movs	r4, #0
   27454:	702c      	strb	r4, [r5, #0]
			return BT_HCI_ERR_UNKNOWN_CMD;
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   27456:	4620      	mov	r0, r4
   27458:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_UNKNOWN_CMD;
   2745a:	2401      	movs	r4, #1
   2745c:	e7fb      	b.n	27456 <ll_tx_pwr_lvl_get+0x16>

0002745e <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   2745e:	2300      	movs	r3, #0
   27460:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   27462:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   27464:	4770      	bx	lr

00027466 <sys_get_le64>:
{
   27466:	4603      	mov	r3, r0
}
   27468:	6800      	ldr	r0, [r0, #0]
   2746a:	6859      	ldr	r1, [r3, #4]
   2746c:	4770      	bx	lr

0002746e <hci_evt_create>:
{
   2746e:	b538      	push	{r3, r4, r5, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   27470:	3008      	adds	r0, #8
{
   27472:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   27474:	2102      	movs	r1, #2
{
   27476:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   27478:	f7f7 f8d0 	bl	1e61c <net_buf_simple_add>
	hdr->evt = evt;
   2747c:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
   2747e:	7044      	strb	r4, [r0, #1]
}
   27480:	bd38      	pop	{r3, r4, r5, pc}

00027482 <meta_evt>:
{
   27482:	b570      	push	{r4, r5, r6, lr}
   27484:	4604      	mov	r4, r0
   27486:	4615      	mov	r5, r2
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   27488:	3201      	adds	r2, #1
{
   2748a:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
   2748c:	3408      	adds	r4, #8
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   2748e:	b2d2      	uxtb	r2, r2
   27490:	213e      	movs	r1, #62	; 0x3e
   27492:	f7ff ffec 	bl	2746e <hci_evt_create>
	me = net_buf_add(buf, sizeof(*me));
   27496:	2101      	movs	r1, #1
   27498:	4620      	mov	r0, r4
   2749a:	f7f7 f8bf 	bl	1e61c <net_buf_simple_add>
	me->subevent = subevt;
   2749e:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
   274a0:	4629      	mov	r1, r5
   274a2:	4620      	mov	r0, r4
}
   274a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   274a8:	f7f7 b8b8 	b.w	1e61c <net_buf_simple_add>

000274ac <hci_num_cmplt_encode>:
{
   274ac:	b570      	push	{r4, r5, r6, lr}
   274ae:	4606      	mov	r6, r0
   274b0:	460d      	mov	r5, r1
   274b2:	4614      	mov	r4, r2
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
   274b4:	2113      	movs	r1, #19
   274b6:	2205      	movs	r2, #5
   274b8:	f7ff ffd9 	bl	2746e <hci_evt_create>
	ep = net_buf_add(buf, len);
   274bc:	2105      	movs	r1, #5
   274be:	f106 0008 	add.w	r0, r6, #8
   274c2:	f7f7 f8ab 	bl	1e61c <net_buf_simple_add>
	ep->num_handles = num_handles;
   274c6:	2301      	movs	r3, #1
   274c8:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   274ca:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   274ce:	f8a0 4003 	strh.w	r4, [r0, #3]
}
   274d2:	bd70      	pop	{r4, r5, r6, pc}

000274d4 <bt_rand>:

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
	return util_rand(buf, len);
   274d4:	f7f0 b91c 	b.w	17710 <util_rand>

000274d8 <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   274d8:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt_be(key, plaintext, enc_data);
   274da:	f000 fbab 	bl	27c34 <ecb_encrypt_be>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   274de:	2000      	movs	r0, #0
   274e0:	bd08      	pop	{r3, pc}

000274e2 <disabled_cb>:
	z_impl_k_sem_give(sem);
   274e2:	f7fa bad9 	b.w	21a98 <z_impl_k_sem_give>

000274e6 <rx_demux_conn_tx_ack>:
{
   274e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   274e8:	4606      	mov	r6, r0
   274ea:	4614      	mov	r4, r2
   274ec:	9300      	str	r3, [sp, #0]
   274ee:	f8ad 1006 	strh.w	r1, [sp, #6]
		ull_conn_ack_dequeue();
   274f2:	f7f4 faf9 	bl	1bae8 <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   274f6:	9a00      	ldr	r2, [sp, #0]
   274f8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   274fc:	4621      	mov	r1, r4
   274fe:	f7f4 fb37 	bl	1bb70 <ull_conn_tx_ack>
   27502:	4605      	mov	r5, r0
		ull_conn_link_tx_release(link);
   27504:	4620      	mov	r0, r4
   27506:	f7f4 fab5 	bl	1ba74 <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   2750a:	2001      	movs	r0, #1
   2750c:	f7f4 f8f4 	bl	1b6f8 <ull_conn_tx_demux>
		if (conn) {
   27510:	b11d      	cbz	r5, 2751a <rx_demux_conn_tx_ack+0x34>
			ull_conn_tx_lll_enqueue(conn, 1);
   27512:	2101      	movs	r1, #1
   27514:	4628      	mov	r0, r5
   27516:	f7f4 fa75 	bl	1ba04 <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   2751a:	466a      	mov	r2, sp
   2751c:	f10d 0106 	add.w	r1, sp, #6
   27520:	4630      	mov	r0, r6
   27522:	f7f4 facb 	bl	1babc <ull_conn_ack_by_last_peek>
	} while (link);
   27526:	4604      	mov	r4, r0
   27528:	2800      	cmp	r0, #0
   2752a:	d1e2      	bne.n	274f2 <rx_demux_conn_tx_ack+0xc>
			ll_rx_sched();
   2752c:	f7f2 f9d6 	bl	198dc <ll_rx_sched>
}
   27530:	b002      	add	sp, #8
   27532:	bd70      	pop	{r4, r5, r6, pc}

00027534 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   27534:	2300      	movs	r3, #0
   27536:	7003      	strb	r3, [r0, #0]
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   27538:	2306      	movs	r3, #6
   2753a:	700b      	strb	r3, [r1, #0]
}
   2753c:	4770      	bx	lr

0002753e <ll_radio_state_is_idle>:
	return lll_radio_is_idle();
   2753e:	f000 b9f0 	b.w	27922 <lll_radio_is_idle>

00027542 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CONN */

#if defined(CONFIG_BT_CONN)
u8_t lll_chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		    u8_t chan_count)
{
   27542:	b570      	push	{r4, r5, r6, lr}
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   27544:	fb02 1101 	mla	r1, r2, r1, r1
   27548:	7802      	ldrb	r2, [r0, #0]
{
   2754a:	f89d 6010 	ldrb.w	r6, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   2754e:	4411      	add	r1, r2
   27550:	2225      	movs	r2, #37	; 0x25
   27552:	fbb1 f4f2 	udiv	r4, r1, r2
   27556:	fb02 1114 	mls	r1, r2, r4, r1
{
   2755a:	4605      	mov	r5, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   2755c:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   2755e:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   27560:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   27562:	5c9c      	ldrb	r4, [r3, r2]
   27564:	f001 0107 	and.w	r1, r1, #7
   27568:	fa44 f101 	asr.w	r1, r4, r1
   2756c:	f011 0101 	ands.w	r1, r1, #1
   27570:	d109      	bne.n	27586 <lll_chan_sel_1+0x44>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
   27572:	fbb0 f2f6 	udiv	r2, r0, r6
   27576:	fb06 0212 	mls	r2, r6, r2, r0
   2757a:	1e5c      	subs	r4, r3, #1
   2757c:	b2d2      	uxtb	r2, r2
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   2757e:	3304      	adds	r3, #4
	chan_next = 0U;
   27580:	4608      	mov	r0, r1
	while (byte_count--) {
   27582:	42a3      	cmp	r3, r4
   27584:	d100      	bne.n	27588 <lll_chan_sel_1+0x46>
}
   27586:	bd70      	pop	{r4, r5, r6, pc}
		u8_t bite;
		u8_t bit_count;

		bite = *chan_map;
   27588:	f100 0108 	add.w	r1, r0, #8
   2758c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
		bit_count = 8U;
		while (bit_count--) {
   27590:	b2c9      	uxtb	r1, r1
   27592:	4288      	cmp	r0, r1
   27594:	d0f5      	beq.n	27582 <lll_chan_sel_1+0x40>
			if (bite & 0x01) {
   27596:	07ee      	lsls	r6, r5, #31
   27598:	d503      	bpl.n	275a2 <lll_chan_sel_1+0x60>
				if (chan_index == 0U) {
   2759a:	2a00      	cmp	r2, #0
   2759c:	d0f3      	beq.n	27586 <lll_chan_sel_1+0x44>
					break;
				}
				chan_index--;
   2759e:	3a01      	subs	r2, #1
   275a0:	b2d2      	uxtb	r2, r2
			}
			chan_next++;
   275a2:	3001      	adds	r0, #1
   275a4:	b2c0      	uxtb	r0, r0
			bite >>= 1;
   275a6:	086d      	lsrs	r5, r5, #1
   275a8:	e7f3      	b.n	27592 <lll_chan_sel_1+0x50>

000275aa <ull_adv_init>:
}
   275aa:	2000      	movs	r0, #0
   275ac:	4770      	bx	lr

000275ae <ull_adv_reset>:
{
   275ae:	b508      	push	{r3, lr}
		(void)disable(handle);
   275b0:	f7f2 ff5c 	bl	1a46c <disable.constprop.0>
}
   275b4:	2000      	movs	r0, #0
   275b6:	bd08      	pop	{r3, pc}

000275b8 <ull_adv_is_enabled>:
{
   275b8:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   275ba:	f7f2 ff49 	bl	1a450 <ull_adv_is_enabled_get>
}
   275be:	3800      	subs	r0, #0
   275c0:	bf18      	it	ne
   275c2:	2001      	movne	r0, #1
   275c4:	bd08      	pop	{r3, pc}

000275c6 <ull_scan_init>:
}
   275c6:	2000      	movs	r0, #0
   275c8:	4770      	bx	lr

000275ca <disable.constprop.0>:

static u8_t disable(u16_t handle)
   275ca:	b510      	push	{r4, lr}
{
	struct ll_scan_set *scan;
	u8_t ret;

	scan = ull_scan_is_enabled_get(handle);
   275cc:	2000      	movs	r0, #0
   275ce:	f7f3 f891 	bl	1a6f4 <ull_scan_is_enabled_get>
	if (!scan) {
   275d2:	4604      	mov	r4, r0
   275d4:	b158      	cbz	r0, 275ee <disable.constprop.0+0x24>
	if (scan->lll.conn) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   275d6:	4601      	mov	r1, r0
   275d8:	2000      	movs	r0, #0
   275da:	f7f3 f817 	bl	1a60c <ull_scan_disable>
	if (ret) {
   275de:	b928      	cbnz	r0, 275ec <disable.constprop.0+0x22>
		return ret;
	}

	scan->is_enabled = 0U;
   275e0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   275e4:	f360 0300 	bfi	r3, r0, #0, #1
   275e8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   275ec:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   275ee:	200c      	movs	r0, #12
   275f0:	e7fc      	b.n	275ec <disable.constprop.0+0x22>

000275f2 <ull_scan_reset>:
{
   275f2:	b508      	push	{r3, lr}
		(void)disable(handle);
   275f4:	f7ff ffe9 	bl	275ca <disable.constprop.0>
}
   275f8:	2000      	movs	r0, #0
   275fa:	bd08      	pop	{r3, pc}

000275fc <ll_scan_enable>:
{
   275fc:	b510      	push	{r4, lr}
	if (!enable) {
   275fe:	b918      	cbnz	r0, 27608 <ll_scan_enable+0xc>
}
   27600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return disable(0);
   27604:	f7ff bfe1 	b.w	275ca <disable.constprop.0>
	scan = ull_scan_is_disabled_get(0);
   27608:	2000      	movs	r0, #0
   2760a:	f7f3 f881 	bl	1a710 <ull_scan_is_disabled_get>
	if (!scan) {
   2760e:	4604      	mov	r4, r0
   27610:	b198      	cbz	r0, 2763a <ll_scan_enable+0x3e>
	if (scan->own_addr_type & 0x1) {
   27612:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   27616:	079b      	lsls	r3, r3, #30
   27618:	d404      	bmi.n	27624 <ll_scan_enable+0x28>
	return ull_scan_enable(scan);
   2761a:	4620      	mov	r0, r4
}
   2761c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return ull_scan_enable(scan);
   27620:	f7d9 b8f6 	b.w	810 <ull_scan_enable>
		if (!mem_nz(ll_addr_get(1, NULL), BDADDR_SIZE)) {
   27624:	2100      	movs	r1, #0
   27626:	2001      	movs	r0, #1
   27628:	f7f0 fdc6 	bl	181b8 <ll_addr_get>
   2762c:	2106      	movs	r1, #6
   2762e:	f7ff fe0f 	bl	27250 <mem_nz>
   27632:	2800      	cmp	r0, #0
   27634:	d1f1      	bne.n	2761a <ll_scan_enable+0x1e>
			return BT_HCI_ERR_INVALID_PARAM;
   27636:	2012      	movs	r0, #18
}
   27638:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2763a:	200c      	movs	r0, #12
   2763c:	e7fc      	b.n	27638 <ll_scan_enable+0x3c>

0002763e <ull_scan_is_enabled>:
{
   2763e:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   27640:	f7f3 f858 	bl	1a6f4 <ull_scan_is_enabled_get>
	if (!scan) {
   27644:	b140      	cbz	r0, 27658 <ull_scan_is_enabled+0x1a>
	return (((u32_t)scan->is_enabled << scan->lll.type) |
   27646:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   2764a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   2764e:	f003 0301 	and.w	r3, r3, #1
   27652:	09c0      	lsrs	r0, r0, #7
   27654:	fa03 f000 	lsl.w	r0, r3, r0
}
   27658:	bd08      	pop	{r3, pc}

0002765a <tx_ull_dequeue>:
{
   2765a:	4603      	mov	r3, r0
   2765c:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   2765e:	e9d3 2145 	ldrd	r2, r1, [r3, #276]	; 0x114
{
   27662:	b510      	push	{r4, lr}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   27664:	b979      	cbnz	r1, 27686 <tx_ull_dequeue+0x2c>
   27666:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2766a:	4291      	cmp	r1, r2
   2766c:	d00b      	beq.n	27686 <tx_ull_dequeue+0x2c>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2766e:	7911      	ldrb	r1, [r2, #4]
   27670:	f001 0103 	and.w	r1, r1, #3
   27674:	2903      	cmp	r1, #3
   27676:	d104      	bne.n	27682 <tx_ull_dequeue+0x28>
		    ((pdu_data_tx->llctrl.opcode !=
   27678:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2767a:	2903      	cmp	r1, #3
   2767c:	d003      	beq.n	27686 <tx_ull_dequeue+0x2c>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   2767e:	290a      	cmp	r1, #10
   27680:	d001      	beq.n	27686 <tx_ull_dequeue+0x2c>
			conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   27682:	e9c3 2246 	strd	r2, r2, [r3, #280]	; 0x118
	if (conn->tx_head == conn->tx_ctrl) {
   27686:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
   2768a:	6811      	ldr	r1, [r2, #0]
   2768c:	4294      	cmp	r4, r2
   2768e:	d10c      	bne.n	276aa <tx_ull_dequeue+0x50>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   27690:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
		conn->tx_head = conn->tx_head->next;
   27694:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   27698:	42a2      	cmp	r2, r4
			conn->tx_ctrl = NULL;
   2769a:	bf06      	itte	eq
   2769c:	2200      	moveq	r2, #0
			conn->tx_ctrl_last = NULL;
   2769e:	e9c3 2246 	strdeq	r2, r2, [r3, #280]	; 0x118
			conn->tx_ctrl = conn->tx_head;
   276a2:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
		tx->next = tx;
   276a6:	6000      	str	r0, [r0, #0]
}
   276a8:	bd10      	pop	{r4, pc}
		if (conn->tx_head == conn->tx_data) {
   276aa:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
		conn->tx_head = conn->tx_head->next;
   276ae:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
		if (conn->tx_head == conn->tx_data) {
   276b2:	4294      	cmp	r4, r2
			conn->tx_data = conn->tx_data->next;
   276b4:	bf08      	it	eq
   276b6:	f8c3 1120 	streq.w	r1, [r3, #288]	; 0x120
		tx->next = NULL;
   276ba:	2300      	movs	r3, #0
   276bc:	6003      	str	r3, [r0, #0]
   276be:	e7f3      	b.n	276a8 <tx_ull_dequeue+0x4e>

000276c0 <ctrl_tx_enqueue>:
	if (
   276c0:	e9d0 3245 	ldrd	r3, r2, [r0, #276]	; 0x114
{
   276c4:	b510      	push	{r4, lr}
	if (
   276c6:	b18b      	cbz	r3, 276ec <ctrl_tx_enqueue+0x2c>
		if (conn->tx_head == conn->tx_data) {
   276c8:	f8d0 4120 	ldr.w	r4, [r0, #288]	; 0x120
   276cc:	42a3      	cmp	r3, r4
			conn->tx_data = conn->tx_data->next;
   276ce:	bf04      	itt	eq
   276d0:	681c      	ldreq	r4, [r3, #0]
   276d2:	f8c0 4120 	streq.w	r4, [r0, #288]	; 0x120
		if (!conn->tx_ctrl) {
   276d6:	b992      	cbnz	r2, 276fe <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head->next;
   276d8:	681a      	ldr	r2, [r3, #0]
   276da:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   276dc:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl = tx;
   276de:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
	conn->tx_ctrl_last = tx;
   276e2:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
	if (!tx->next) {
   276e6:	680b      	ldr	r3, [r1, #0]
   276e8:	b133      	cbz	r3, 276f8 <ctrl_tx_enqueue+0x38>
}
   276ea:	bd10      	pop	{r4, pc}
		if (!conn->tx_ctrl) {
   276ec:	b93a      	cbnz	r2, 276fe <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head;
   276ee:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl = tx;
   276f0:	e9c0 1145 	strd	r1, r1, [r0, #276]	; 0x114
				conn->tx_ctrl_last = tx;
   276f4:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
		conn->tx_data_last = tx;
   276f8:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
}
   276fc:	e7f5      	b.n	276ea <ctrl_tx_enqueue+0x2a>
	tx->next = conn->tx_ctrl_last->next;
   276fe:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   27702:	681a      	ldr	r2, [r3, #0]
   27704:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   27706:	6019      	str	r1, [r3, #0]
   27708:	e7eb      	b.n	276e2 <ctrl_tx_enqueue+0x22>

0002770a <ll_connected_get>:
{
   2770a:	b508      	push	{r3, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   2770c:	b918      	cbnz	r0, 27716 <ll_connected_get+0xc>
	conn = ll_conn_get(handle);
   2770e:	f7f3 f9bd 	bl	1aa8c <ll_conn_get>
	if (conn->lll.handle != handle) {
   27712:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   27714:	b103      	cbz	r3, 27718 <ll_connected_get+0xe>
		return NULL;
   27716:	2000      	movs	r0, #0
}
   27718:	bd08      	pop	{r3, pc}

0002771a <ll_conn_update>:
{
   2771a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2771e:	460c      	mov	r4, r1
   27720:	f8bd a020 	ldrh.w	sl, [sp, #32]
   27724:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
   27728:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   2772c:	4617      	mov	r7, r2
   2772e:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   27730:	f7ff ffeb 	bl	2770a <ll_connected_get>
	if (!conn) {
   27734:	4605      	mov	r5, r0
   27736:	2800      	cmp	r0, #0
   27738:	d068      	beq.n	2780c <ll_conn_update+0xf2>
	if (!cmd) {
   2773a:	bb7c      	cbnz	r4, 2779c <ll_conn_update+0x82>
		if (!conn->llcp_conn_param.disabled &&
   2773c:	f890 30ee 	ldrb.w	r3, [r0, #238]	; 0xee
   27740:	06da      	lsls	r2, r3, #27
   27742:	d408      	bmi.n	27756 <ll_conn_update+0x3c>
		    (!conn->common.fex_valid ||
   27744:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
		if (!conn->llcp_conn_param.disabled &&
   27748:	f011 0101 	ands.w	r1, r1, #1
   2774c:	d044      	beq.n	277d8 <ll_conn_update+0xbe>
		     (conn->llcp_feature.features &
   2774e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
		    (!conn->common.fex_valid ||
   27752:	079b      	lsls	r3, r3, #30
   27754:	d423      	bmi.n	2779e <ll_conn_update+0x84>
		} else if (conn->lll.role) {
   27756:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   2775a:	2b00      	cmp	r3, #0
   2775c:	db54      	blt.n	27808 <ll_conn_update+0xee>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   2775e:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   27762:	f895 20a1 	ldrb.w	r2, [r5, #161]	; 0xa1
   27766:	429a      	cmp	r2, r3
   27768:	d150      	bne.n	2780c <ll_conn_update+0xf2>
		conn->llcp_cu.win_size = 1U;
   2776a:	2301      	movs	r3, #1
   2776c:	f885 30b0 	strb.w	r3, [r5, #176]	; 0xb0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   27770:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
		conn->llcp_cu.interval = interval_max;
   27774:	f8a5 a0a4 	strh.w	sl, [r5, #164]	; 0xa4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   27778:	f023 0307 	bic.w	r3, r3, #7
		conn->llcp_cu.win_offset_us = 0U;
   2777c:	2000      	movs	r0, #0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2777e:	f043 0305 	orr.w	r3, r3, #5
		conn->llcp_cu.req++;
   27782:	3201      	adds	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   27784:	f8c5 00ac 	str.w	r0, [r5, #172]	; 0xac
		conn->llcp_cu.latency = latency;
   27788:	f8a5 90a6 	strh.w	r9, [r5, #166]	; 0xa6
		conn->llcp_cu.timeout = timeout;
   2778c:	f8a5 80a8 	strh.w	r8, [r5, #168]	; 0xa8
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   27790:	f885 30a2 	strb.w	r3, [r5, #162]	; 0xa2
		conn->llcp_cu.req++;
   27794:	f885 20a0 	strb.w	r2, [r5, #160]	; 0xa0
}
   27798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2779c:	4621      	mov	r1, r4
		cmd--;
   2779e:	3901      	subs	r1, #1
		if (cmd) {
   277a0:	f011 00ff 	ands.w	r0, r1, #255	; 0xff
   277a4:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
   277a8:	f895 20ed 	ldrb.w	r2, [r5, #237]	; 0xed
   277ac:	d016      	beq.n	277dc <ll_conn_update+0xc2>
			if ((conn->llcp_conn_param.req ==
   277ae:	4293      	cmp	r3, r2
   277b0:	d02c      	beq.n	2780c <ll_conn_update+0xf2>
			    (conn->llcp_conn_param.state !=
   277b2:	f895 30ee 	ldrb.w	r3, [r5, #238]	; 0xee
			     conn->llcp_conn_param.ack) ||
   277b6:	f003 0207 	and.w	r2, r3, #7
   277ba:	2a03      	cmp	r2, #3
   277bc:	d126      	bne.n	2780c <ll_conn_update+0xf2>
			conn->llcp_conn_param.state = cmd;
   277be:	f000 0007 	and.w	r0, r0, #7
   277c2:	f040 0008 	orr.w	r0, r0, #8
   277c6:	f023 030f 	bic.w	r3, r3, #15
   277ca:	4318      	orrs	r0, r3
   277cc:	f885 00ee 	strb.w	r0, [r5, #238]	; 0xee
			conn->llcp_conn_param.status = status;
   277d0:	f885 70ef 	strb.w	r7, [r5, #239]	; 0xef
	return 0;
   277d4:	2000      	movs	r0, #0
   277d6:	e7df      	b.n	27798 <ll_conn_update+0x7e>
			cmd++;
   277d8:	2101      	movs	r1, #1
   277da:	e7e0      	b.n	2779e <ll_conn_update+0x84>
			if (conn->llcp_conn_param.req !=
   277dc:	4293      	cmp	r3, r2
   277de:	d115      	bne.n	2780c <ll_conn_update+0xf2>
			conn->llcp_conn_param.state = cmd;
   277e0:	f8b5 20ee 	ldrh.w	r2, [r5, #238]	; 0xee
			conn->llcp_conn_param.interval_min = interval_min;
   277e4:	f8a5 60f0 	strh.w	r6, [r5, #240]	; 0xf0
			conn->llcp_conn_param.state = cmd;
   277e8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   277ec:	f042 0208 	orr.w	r2, r2, #8
			conn->llcp_conn_param.req++;
   277f0:	3301      	adds	r3, #1
			conn->llcp_conn_param.interval_max = interval_max;
   277f2:	f8a5 a0f2 	strh.w	sl, [r5, #242]	; 0xf2
			conn->llcp_conn_param.latency = latency;
   277f6:	f8a5 90f4 	strh.w	r9, [r5, #244]	; 0xf4
			conn->llcp_conn_param.timeout = timeout;
   277fa:	f8a5 80f6 	strh.w	r8, [r5, #246]	; 0xf6
			conn->llcp_conn_param.state = cmd;
   277fe:	f8a5 20ee 	strh.w	r2, [r5, #238]	; 0xee
			conn->llcp_conn_param.req++;
   27802:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
   27806:	e7c7      	b.n	27798 <ll_conn_update+0x7e>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   27808:	201a      	movs	r0, #26
   2780a:	e7c5      	b.n	27798 <ll_conn_update+0x7e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   2780c:	200c      	movs	r0, #12
   2780e:	e7c3      	b.n	27798 <ll_conn_update+0x7e>

00027810 <ll_chm_get>:
{
   27810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27812:	460d      	mov	r5, r1
	conn = ll_connected_get(handle);
   27814:	f7ff ff79 	bl	2770a <ll_connected_get>
	if (!conn) {
   27818:	4604      	mov	r4, r0
   2781a:	b170      	cbz	r0, 2783a <ll_chm_get+0x2a>
		conn->chm_updated = 0U;
   2781c:	2700      	movs	r7, #0
		memcpy(chm, conn->lll.data_chan_map,
   2781e:	f100 0638 	add.w	r6, r0, #56	; 0x38
		conn->chm_updated = 0U;
   27822:	f884 7128 	strb.w	r7, [r4, #296]	; 0x128
		memcpy(chm, conn->lll.data_chan_map,
   27826:	2205      	movs	r2, #5
   27828:	4631      	mov	r1, r6
   2782a:	4628      	mov	r0, r5
   2782c:	f7fd fc30 	bl	25090 <memcpy>
	} while (conn->chm_updated);
   27830:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   27834:	2800      	cmp	r0, #0
   27836:	d1f4      	bne.n	27822 <ll_chm_get+0x12>
}
   27838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2783a:	200c      	movs	r0, #12
   2783c:	e7fc      	b.n	27838 <ll_chm_get+0x28>

0002783e <ll_terminate_ind_send>:
{
   2783e:	b510      	push	{r4, lr}
   27840:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   27842:	f7ff ff62 	bl	2770a <ll_connected_get>
	if (!conn) {
   27846:	b140      	cbz	r0, 2785a <ll_terminate_ind_send+0x1c>
	conn->llcp_terminate.req++;
   27848:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
	conn->llcp_terminate.reason_own = reason;
   2784c:	f880 40c6 	strb.w	r4, [r0, #198]	; 0xc6
	conn->llcp_terminate.req++;
   27850:	3301      	adds	r3, #1
   27852:	f880 30c4 	strb.w	r3, [r0, #196]	; 0xc4
	return 0;
   27856:	2000      	movs	r0, #0
}
   27858:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2785a:	200c      	movs	r0, #12
   2785c:	e7fc      	b.n	27858 <ll_terminate_ind_send+0x1a>

0002785e <ll_feature_req_send>:
{
   2785e:	b508      	push	{r3, lr}
	conn = ll_connected_get(handle);
   27860:	f7ff ff53 	bl	2770a <ll_connected_get>
	if (!conn) {
   27864:	b150      	cbz	r0, 2787c <ll_feature_req_send+0x1e>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   27866:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
   2786a:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
   2786e:	4293      	cmp	r3, r2
   27870:	d104      	bne.n	2787c <ll_feature_req_send+0x1e>
	conn->llcp_feature.req++;
   27872:	3301      	adds	r3, #1
   27874:	f880 30b4 	strb.w	r3, [r0, #180]	; 0xb4
	return 0;
   27878:	2000      	movs	r0, #0
}
   2787a:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2787c:	200c      	movs	r0, #12
   2787e:	e7fc      	b.n	2787a <ll_feature_req_send+0x1c>

00027880 <ll_version_ind_send>:
{
   27880:	b508      	push	{r3, lr}
	conn = ll_connected_get(handle);
   27882:	f7ff ff42 	bl	2770a <ll_connected_get>
	if (!conn) {
   27886:	b150      	cbz	r0, 2789e <ll_version_ind_send+0x1e>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   27888:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
   2788c:	f890 30bd 	ldrb.w	r3, [r0, #189]	; 0xbd
   27890:	4293      	cmp	r3, r2
   27892:	d104      	bne.n	2789e <ll_version_ind_send+0x1e>
	conn->llcp_version.req++;
   27894:	3301      	adds	r3, #1
   27896:	f880 30bc 	strb.w	r3, [r0, #188]	; 0xbc
	return 0;
   2789a:	2000      	movs	r0, #0
}
   2789c:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2789e:	200c      	movs	r0, #12
   278a0:	e7fc      	b.n	2789c <ll_version_ind_send+0x1c>

000278a2 <ull_conn_lll_max_tx_octets_get>:
}
   278a2:	201b      	movs	r0, #27
   278a4:	4770      	bx	lr

000278a6 <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   278a6:	2000      	movs	r0, #0
   278a8:	f7ef be74 	b.w	17594 <mayfly_run>

000278ac <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   278ac:	4668      	mov	r0, sp
   278ae:	f020 0107 	bic.w	r1, r0, #7
   278b2:	468d      	mov	sp, r1
   278b4:	b501      	push	{r0, lr}
	isr_radio();
   278b6:	f7f5 fff1 	bl	1d89c <isr_radio>
	ISR_DIRECT_PM();
   278ba:	f7dc ff6f 	bl	479c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   278be:	f7dc fea3 	bl	4608 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   278c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   278c6:	4685      	mov	sp, r0
   278c8:	4770      	bx	lr

000278ca <lll_reset>:
}
   278ca:	2000      	movs	r0, #0
   278cc:	4770      	bx	lr

000278ce <lll_prepare>:
{
   278ce:	b513      	push	{r0, r1, r4, lr}
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   278d0:	2400      	movs	r4, #0
   278d2:	9401      	str	r4, [sp, #4]
   278d4:	9c04      	ldr	r4, [sp, #16]
   278d6:	9400      	str	r4, [sp, #0]
   278d8:	f7f4 fb16 	bl	1bf08 <prepare>
}
   278dc:	b002      	add	sp, #8
   278de:	bd10      	pop	{r4, pc}

000278e0 <lll_prepare_done>:
}
   278e0:	2000      	movs	r0, #0
   278e2:	4770      	bx	lr

000278e4 <lll_evt_offset_get>:
{
   278e4:	4603      	mov	r3, r0
   278e6:	e9d0 2000 	ldrd	r2, r0, [r0]
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   278ea:	2a00      	cmp	r2, #0
   278ec:	da04      	bge.n	278f8 <lll_evt_offset_get+0x14>
		return MAX(evt->ticks_active_to_start,
   278ee:	689b      	ldr	r3, [r3, #8]
   278f0:	4298      	cmp	r0, r3
   278f2:	bf38      	it	cc
   278f4:	4618      	movcc	r0, r3
   278f6:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   278f8:	4290      	cmp	r0, r2
   278fa:	bf38      	it	cc
   278fc:	4610      	movcc	r0, r2
}
   278fe:	4770      	bx	lr

00027900 <lll_preempt_calc>:
{
   27900:	b510      	push	{r4, lr}
   27902:	4614      	mov	r4, r2
	u32_t ticks_now = ticker_ticks_now_get();
   27904:	f7ff fd96 	bl	27434 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   27908:	4621      	mov	r1, r4
   2790a:	f7ff fd95 	bl	27438 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   2790e:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   27910:	0203      	lsls	r3, r0, #8
   27912:	d404      	bmi.n	2791e <lll_preempt_calc+0x1e>
   27914:	2809      	cmp	r0, #9
   27916:	bf94      	ite	ls
   27918:	2000      	movls	r0, #0
   2791a:	2001      	movhi	r0, #1
}
   2791c:	bd10      	pop	{r4, pc}
	return 0;
   2791e:	2000      	movs	r0, #0
   27920:	e7fc      	b.n	2791c <lll_preempt_calc+0x1c>

00027922 <lll_radio_is_idle>:
	return radio_is_idle();
   27922:	f7f6 b8cb 	b.w	1dabc <radio_is_idle>

00027926 <clock_ready>:
	return err;
}

static void clock_ready(struct device *dev, clock_control_subsys_t subsys,
			void *user_data)
{
   27926:	4610      	mov	r0, r2
   27928:	f7fa b8b6 	b.w	21a98 <z_impl_k_sem_give>

0002792c <isr_race>:
	radio_status_reset();
   2792c:	f7f6 b8a6 	b.w	1da7c <radio_status_reset>

00027930 <isr_abort>:
{
   27930:	b510      	push	{r4, lr}
   27932:	4604      	mov	r4, r0
	radio_status_reset();
   27934:	f7f6 f8a2 	bl	1da7c <radio_status_reset>
	radio_tmr_status_reset();
   27938:	f7f6 f950 	bl	1dbdc <radio_tmr_status_reset>
	radio_filter_status_reset();
   2793c:	f7f6 f936 	bl	1dbac <radio_filter_status_reset>
	radio_ar_status_reset();
   27940:	f7f6 fa62 	bl	1de08 <radio_ar_status_reset>
	radio_rssi_status_reset();
   27944:	f7f6 f916 	bl	1db74 <radio_rssi_status_reset>
	radio_filter_disable();
   27948:	f7f6 f926 	bl	1db98 <radio_filter_disable>
	isr_cleanup(param);
   2794c:	4620      	mov	r0, r4
}
   2794e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   27952:	f7f4 bcbd 	b.w	1c2d0 <isr_cleanup>

00027956 <isr_rx_ci_adva_check>:
		       BDADDR_SIZE);
}

static inline bool isr_rx_ci_adva_check(struct pdu_adv *adv,
					struct pdu_adv *ci)
{
   27956:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
   27958:	7804      	ldrb	r4, [r0, #0]
   2795a:	780a      	ldrb	r2, [r1, #0]
   2795c:	f3c4 1380 	ubfx	r3, r4, #6, #1
   27960:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   27964:	d119      	bne.n	2799a <isr_rx_ci_adva_check+0x44>
   27966:	f004 040f 	and.w	r4, r4, #15
   2796a:	2c01      	cmp	r4, #1
   2796c:	f100 0502 	add.w	r5, r0, #2
   27970:	f101 0608 	add.w	r6, r1, #8
   27974:	d008      	beq.n	27988 <isr_rx_ci_adva_check+0x32>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
			 BDADDR_SIZE)) ||
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   27976:	2206      	movs	r2, #6
   27978:	4631      	mov	r1, r6
   2797a:	4628      	mov	r0, r5
   2797c:	f7fd fb78 	bl	25070 <memcmp>
			 BDADDR_SIZE)) ||
   27980:	fab0 f080 	clz	r0, r0
   27984:	0940      	lsrs	r0, r0, #5
			  BDADDR_SIZE)));
}
   27986:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   27988:	2206      	movs	r2, #6
   2798a:	4631      	mov	r1, r6
   2798c:	4628      	mov	r0, r5
   2798e:	f7fd fb6f 	bl	25070 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   27992:	2800      	cmp	r0, #0
   27994:	d1ef      	bne.n	27976 <isr_rx_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
   27996:	4620      	mov	r0, r4
   27998:	e7f5      	b.n	27986 <isr_rx_ci_adva_check+0x30>
   2799a:	2000      	movs	r0, #0
   2799c:	e7f3      	b.n	27986 <isr_rx_ci_adva_check+0x30>

0002799e <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   2799e:	68c3      	ldr	r3, [r0, #12]
{
   279a0:	b570      	push	{r4, r5, r6, lr}
   279a2:	4604      	mov	r4, r0
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   279a4:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   279a6:	f7ff fd45 	bl	27434 <ticker_ticks_now_get>
   279aa:	4605      	mov	r5, r0
   279ac:	4630      	mov	r0, r6
   279ae:	f7ff ff99 	bl	278e4 <lll_evt_offset_get>
	p->remainder = 0;
   279b2:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   279b4:	1a2d      	subs	r5, r5, r0
   279b6:	6025      	str	r5, [r4, #0]
	p->remainder = 0;
   279b8:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   279ba:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   279bc:	4620      	mov	r0, r4
}
   279be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   279c2:	f7f4 bed9 	b.w	1c778 <prepare_cb>

000279c6 <isr_done>:
{
   279c6:	b510      	push	{r4, lr}
   279c8:	4604      	mov	r4, r0
	radio_status_reset();
   279ca:	f7f6 f857 	bl	1da7c <radio_status_reset>
	radio_tmr_status_reset();
   279ce:	f7f6 f905 	bl	1dbdc <radio_tmr_status_reset>
	radio_filter_status_reset();
   279d2:	f7f6 f8eb 	bl	1dbac <radio_filter_status_reset>
	radio_ar_status_reset();
   279d6:	f7f6 fa17 	bl	1de08 <radio_ar_status_reset>
	radio_rssi_status_reset();
   279da:	f7f6 f8cb 	bl	1db74 <radio_rssi_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   279de:	7b23      	ldrb	r3, [r4, #12]
   279e0:	f003 0271 	and.w	r2, r3, #113	; 0x71
   279e4:	2a01      	cmp	r2, #1
		lll->chan_map_curr = lll->chan_map;
   279e6:	bf02      	ittt	eq
   279e8:	f3c3 0242 	ubfxeq	r2, r3, #1, #3
   279ec:	f362 1306 	bfieq	r3, r2, #4, #3
   279f0:	7323      	strbeq	r3, [r4, #12]
	if (lll->chan_map_curr) {
   279f2:	7b23      	ldrb	r3, [r4, #12]
   279f4:	f013 0f70 	tst.w	r3, #112	; 0x70
   279f8:	d008      	beq.n	27a0c <isr_done+0x46>
		chan_prepare(lll);
   279fa:	4620      	mov	r0, r4
   279fc:	f7f4 fe52 	bl	1c6a4 <chan_prepare>
		radio_tx_enable();
   27a00:	f7f6 f824 	bl	1da4c <radio_tx_enable>
}
   27a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   27a08:	f7f6 b9e4 	b.w	1ddd4 <radio_tmr_end_capture>
	radio_filter_disable();
   27a0c:	f7f6 f8c4 	bl	1db98 <radio_filter_disable>
	isr_cleanup(param);
   27a10:	4620      	mov	r0, r4
}
   27a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   27a16:	f7f4 bc5b 	b.w	1c2d0 <isr_cleanup>

00027a1a <lll_adv_init>:
}
   27a1a:	2000      	movs	r0, #0
   27a1c:	4770      	bx	lr

00027a1e <lll_adv_reset>:
   27a1e:	2000      	movs	r0, #0
   27a20:	4770      	bx	lr

00027a22 <isr_race>:
	radio_status_reset();
   27a22:	f7f6 b82b 	b.w	1da7c <radio_status_reset>

00027a26 <isr_done>:
{
   27a26:	b508      	push	{r3, lr}
	isr_common_done(param);
   27a28:	f7f5 f836 	bl	1ca98 <isr_common_done>
	radio_rx_enable();
   27a2c:	f7f6 f808 	bl	1da40 <radio_rx_enable>
}
   27a30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   27a34:	f7f6 b9ce 	b.w	1ddd4 <radio_tmr_end_capture>

00027a38 <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   27a38:	68c3      	ldr	r3, [r0, #12]
{
   27a3a:	b570      	push	{r4, r5, r6, lr}
   27a3c:	4604      	mov	r4, r0
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   27a3e:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   27a40:	f7ff fcf8 	bl	27434 <ticker_ticks_now_get>
   27a44:	4605      	mov	r5, r0
   27a46:	4630      	mov	r0, r6
   27a48:	f7ff ff4c 	bl	278e4 <lll_evt_offset_get>
	p->remainder = 0;
   27a4c:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   27a4e:	1a2d      	subs	r5, r5, r0
   27a50:	6025      	str	r5, [r4, #0]
	p->remainder = 0;
   27a52:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   27a54:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   27a56:	4620      	mov	r0, r4
}
   27a58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   27a5c:	f7f4 bf4e 	b.w	1c8fc <prepare_cb>

00027a60 <isr_window>:
{
   27a60:	b508      	push	{r3, lr}
	isr_common_done(param);
   27a62:	f7f5 f819 	bl	1ca98 <isr_common_done>
	ticks_at_start = ticker_ticks_now_get() +
   27a66:	f7ff fce5 	bl	27434 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   27a6a:	1cc1      	adds	r1, r0, #3
   27a6c:	2000      	movs	r0, #0
   27a6e:	f7f6 f941 	bl	1dcf4 <radio_tmr_start_tick>
}
   27a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   27a76:	f7f6 b9ad 	b.w	1ddd4 <radio_tmr_end_capture>

00027a7a <isr_abort>:
{
   27a7a:	b513      	push	{r0, r1, r4, lr}
   27a7c:	4604      	mov	r4, r0
	radio_status_reset();
   27a7e:	f7f5 fffd 	bl	1da7c <radio_status_reset>
	radio_tmr_status_reset();
   27a82:	f7f6 f8ab 	bl	1dbdc <radio_tmr_status_reset>
	radio_filter_status_reset();
   27a86:	f7f6 f891 	bl	1dbac <radio_filter_status_reset>
	radio_ar_status_reset();
   27a8a:	f7f6 f9bd 	bl	1de08 <radio_ar_status_reset>
	radio_rssi_status_reset();
   27a8e:	f7f6 f871 	bl	1db74 <radio_rssi_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   27a92:	2300      	movs	r3, #0
   27a94:	9300      	str	r3, [sp, #0]
   27a96:	2203      	movs	r2, #3
   27a98:	4619      	mov	r1, r3
   27a9a:	4618      	mov	r0, r3
   27a9c:	f7f0 fb54 	bl	18148 <ticker_stop>
	radio_disable();
   27aa0:	f7f5 ffda 	bl	1da58 <radio_disable>
	isr_cleanup(param);
   27aa4:	4620      	mov	r0, r4
}
   27aa6:	b002      	add	sp, #8
   27aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   27aac:	f7f5 b90c 	b.w	1ccc8 <isr_cleanup>

00027ab0 <isr_rx_scan_report.isra.0>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static u32_t isr_rx_scan_report(struct lll_scan *lll, u8_t rssi_ready,
   27ab0:	b538      	push	{r3, r4, r5, lr}
   27ab2:	4605      	mov	r5, r0
				u8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	struct pdu_adv *pdu_adv_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
   27ab4:	2003      	movs	r0, #3
   27ab6:	f7f2 f817 	bl	19ae8 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   27aba:	4604      	mov	r4, r0
   27abc:	b1b0      	cbz	r0, 27aec <isr_rx_scan_report.isra.0+0x3c>
		return 1;
	}
	ull_pdu_rx_alloc();
   27abe:	f7f2 f82b 	bl	19b18 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   27ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   27ac6:	80e3      	strh	r3, [r4, #6]
			LL_ASSERT(0);
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   27ac8:	2304      	movs	r3, #4
   27aca:	7123      	strb	r3, [r4, #4]
	}

	pdu_adv_rx = (void *)node_rx->pdu;

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   27acc:	b165      	cbz	r5, 27ae8 <isr_rx_scan_report.isra.0+0x38>
				   (radio_rssi_get() & 0x7f)
   27ace:	f7f6 f84b 	bl	1db68 <radio_rssi_get>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   27ad2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   27ad6:	7720      	strb	r0, [r4, #28]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   27ad8:	4621      	mov	r1, r4
   27ada:	6820      	ldr	r0, [r4, #0]
   27adc:	f7f2 f832 	bl	19b44 <ull_rx_put>
	ull_rx_sched();
   27ae0:	f7f2 f840 	bl	19b64 <ull_rx_sched>

	return 0;
   27ae4:	2000      	movs	r0, #0
}
   27ae6:	bd38      	pop	{r3, r4, r5, pc}
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   27ae8:	207f      	movs	r0, #127	; 0x7f
   27aea:	e7f4      	b.n	27ad6 <isr_rx_scan_report.isra.0+0x26>
		return 1;
   27aec:	2001      	movs	r0, #1
   27aee:	e7fa      	b.n	27ae6 <isr_rx_scan_report.isra.0+0x36>

00027af0 <lll_scan_init>:
}
   27af0:	2000      	movs	r0, #0
   27af2:	4770      	bx	lr

00027af4 <lll_scan_reset>:
   27af4:	2000      	movs	r0, #0
   27af6:	4770      	bx	lr

00027af8 <isr_race>:
	radio_status_reset();
   27af8:	f7f5 bfc0 	b.w	1da7c <radio_status_reset>

00027afc <empty_tx_enqueue>:

	return 0;
}

static struct pdu_data *empty_tx_enqueue(struct lll_conn *lll)
{
   27afc:	b538      	push	{r3, r4, r5, lr}
	struct pdu_data *p;

	lll->empty = 1;
   27afe:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
   27b02:	f043 0304 	orr.w	r3, r3, #4
   27b06:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
{
   27b0a:	4605      	mov	r5, r0

	p = (void *)radio_pkt_empty_get();
   27b0c:	f7f5 fff6 	bl	1dafc <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   27b10:	7803      	ldrb	r3, [r0, #0]
   27b12:	2201      	movs	r2, #1
   27b14:	f362 0301 	bfi	r3, r2, #0, #2
	p->len = 0;
   27b18:	2200      	movs	r2, #0
   27b1a:	7042      	strb	r2, [r0, #1]
	p = (void *)radio_pkt_empty_get();
   27b1c:	4604      	mov	r4, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   27b1e:	7003      	strb	r3, [r0, #0]
	if (memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL)) {
   27b20:	e9d5 0110 	ldrd	r0, r1, [r5, #64]	; 0x40
   27b24:	f7ff fbb4 	bl	27290 <memq_peek>
   27b28:	7823      	ldrb	r3, [r4, #0]
   27b2a:	3800      	subs	r0, #0
   27b2c:	bf18      	it	ne
   27b2e:	2001      	movne	r0, #1
   27b30:	f360 1304 	bfi	r3, r0, #4, #1
   27b34:	7023      	strb	r3, [r4, #0]
	} else {
		p->md = 0;
	}

	return p;
}
   27b36:	4620      	mov	r0, r4
   27b38:	bd38      	pop	{r3, r4, r5, pc}

00027b3a <lll_conn_init>:
}
   27b3a:	2000      	movs	r0, #0
   27b3c:	4770      	bx	lr

00027b3e <lll_conn_reset>:
   27b3e:	2000      	movs	r0, #0
   27b40:	4770      	bx	lr

00027b42 <lll_conn_ppm_local_get>:
}
   27b42:	2014      	movs	r0, #20
   27b44:	4770      	bx	lr

00027b46 <lll_conn_is_abort_cb>:
}
   27b46:	f06f 0047 	mvn.w	r0, #71	; 0x47
   27b4a:	4770      	bx	lr

00027b4c <lll_conn_isr_abort>:
{
   27b4c:	b510      	push	{r4, lr}
   27b4e:	4604      	mov	r4, r0
	radio_status_reset();
   27b50:	f7f5 ff94 	bl	1da7c <radio_status_reset>
	radio_tmr_status_reset();
   27b54:	f7f6 f842 	bl	1dbdc <radio_tmr_status_reset>
	radio_filter_status_reset();
   27b58:	f7f6 f828 	bl	1dbac <radio_filter_status_reset>
	radio_ar_status_reset();
   27b5c:	f7f6 f954 	bl	1de08 <radio_ar_status_reset>
	radio_rssi_status_reset();
   27b60:	f7f6 f808 	bl	1db74 <radio_rssi_status_reset>
	isr_cleanup(param);
   27b64:	4620      	mov	r0, r4
}
   27b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   27b6a:	f7f5 ba35 	b.w	1cfd8 <isr_cleanup>

00027b6e <lll_conn_tx_pkt_set>:
{
   27b6e:	b510      	push	{r4, lr}
   27b70:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
   27b72:	2100      	movs	r1, #0
   27b74:	4608      	mov	r0, r1
   27b76:	f7f5 fee5 	bl	1d944 <radio_phy_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   27b7a:	2008      	movs	r0, #8
   27b7c:	2201      	movs	r2, #1
   27b7e:	211b      	movs	r1, #27
   27b80:	f7f5 ff26 	bl	1d9d0 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   27b84:	4620      	mov	r0, r4
}
   27b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_tx_set(pdu_data_tx);
   27b8a:	f7f5 bf53 	b.w	1da34 <radio_pkt_tx_set>

00027b8e <lll_conn_pdu_tx_prep>:
	if (lll->empty) {
   27b8e:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
   27b92:	075b      	lsls	r3, r3, #29
{
   27b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   27b98:	4604      	mov	r4, r0
   27b9a:	4688      	mov	r8, r1
	if (lll->empty) {
   27b9c:	d506      	bpl.n	27bac <lll_conn_pdu_tx_prep+0x1e>
		*pdu_data_tx = empty_tx_enqueue(lll);
   27b9e:	f7ff ffad 	bl	27afc <empty_tx_enqueue>
   27ba2:	f8c8 0000 	str.w	r0, [r8]
}
   27ba6:	b003      	add	sp, #12
   27ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   27bac:	e9d0 0110 	ldrd	r0, r1, [r0, #64]	; 0x40
   27bb0:	aa01      	add	r2, sp, #4
   27bb2:	f7ff fb6d 	bl	27290 <memq_peek>
	if (!link) {
   27bb6:	4681      	mov	r9, r0
   27bb8:	b960      	cbnz	r0, 27bd4 <lll_conn_pdu_tx_prep+0x46>
		p = empty_tx_enqueue(lll);
   27bba:	4620      	mov	r0, r4
   27bbc:	f7ff ff9e 	bl	27afc <empty_tx_enqueue>
   27bc0:	4605      	mov	r5, r0
	p->rfu = 0U;
   27bc2:	782b      	ldrb	r3, [r5, #0]
   27bc4:	f36f 1347 	bfc	r3, #5, #3
   27bc8:	702b      	strb	r3, [r5, #0]
	p->resv = 0U;
   27bca:	2300      	movs	r3, #0
   27bcc:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   27bce:	f8c8 5000 	str.w	r5, [r8]
   27bd2:	e7e8      	b.n	27ba6 <lll_conn_pdu_tx_prep+0x18>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   27bd4:	9f01      	ldr	r7, [sp, #4]
   27bd6:	f894 6055 	ldrb.w	r6, [r4, #85]	; 0x55
		if (!lll->packet_tx_head_len) {
   27bda:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   27bde:	3704      	adds	r7, #4
   27be0:	19bd      	adds	r5, r7, r6
		if (!lll->packet_tx_head_len) {
   27be2:	b913      	cbnz	r3, 27bea <lll_conn_pdu_tx_prep+0x5c>
			lll->packet_tx_head_len = p->len;
   27be4:	786b      	ldrb	r3, [r5, #1]
   27be6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
		if (lll->packet_tx_head_offset) {
   27bea:	b126      	cbz	r6, 27bf6 <lll_conn_pdu_tx_prep+0x68>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   27bec:	5dbb      	ldrb	r3, [r7, r6]
   27bee:	2201      	movs	r2, #1
   27bf0:	f362 0301 	bfi	r3, r2, #0, #2
   27bf4:	55bb      	strb	r3, [r7, r6]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   27bf6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
   27bfa:	1b9b      	subs	r3, r3, r6
   27bfc:	706b      	strb	r3, [r5, #1]
		p->md = 0;
   27bfe:	5dbb      	ldrb	r3, [r7, r6]
   27c00:	f36f 1304 	bfc	r3, #4, #1
   27c04:	55bb      	strb	r3, [r7, r6]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   27c06:	4620      	mov	r0, r4
   27c08:	f7ff fe4b 	bl	278a2 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   27c0c:	786b      	ldrb	r3, [r5, #1]
   27c0e:	4283      	cmp	r3, r0
			p->len = max_tx_octets;
   27c10:	bf84      	itt	hi
   27c12:	7068      	strbhi	r0, [r5, #1]
			p->md = 1;
   27c14:	5dbb      	ldrbhi	r3, [r7, r6]
		if (link->next != lll->memq_tx.tail) {
   27c16:	f8d9 2000 	ldr.w	r2, [r9]
			p->md = 1;
   27c1a:	bf84      	itt	hi
   27c1c:	f043 0310 	orrhi.w	r3, r3, #16
   27c20:	55bb      	strbhi	r3, [r7, r6]
		if (link->next != lll->memq_tx.tail) {
   27c22:	6c63      	ldr	r3, [r4, #68]	; 0x44
   27c24:	429a      	cmp	r2, r3
			p->md = 1;
   27c26:	bf1e      	ittt	ne
   27c28:	5dbb      	ldrbne	r3, [r7, r6]
   27c2a:	f043 0310 	orrne.w	r3, r3, #16
   27c2e:	55bb      	strbne	r3, [r7, r6]
   27c30:	e7c7      	b.n	27bc2 <lll_conn_pdu_tx_prep+0x34>

00027c32 <lll_conn_flush>:

void lll_conn_flush(u16_t handle, struct lll_conn *lll)
{
	/* Nothing to be flushed */
}
   27c32:	4770      	bx	lr

00027c34 <ecb_encrypt_be>:

void ecb_encrypt_be(u8_t const *const key_be, u8_t const *const clear_text_be,
		    u8_t * const cipher_text_be)
{
   27c34:	b530      	push	{r4, r5, lr}
   27c36:	b08d      	sub	sp, #52	; 0x34
   27c38:	460d      	mov	r5, r1
   27c3a:	4614      	mov	r4, r2
	struct ecb_param ecb;

	memcpy(&ecb.key[0], key_be, sizeof(ecb.key));
   27c3c:	4601      	mov	r1, r0
   27c3e:	2210      	movs	r2, #16
   27c40:	4668      	mov	r0, sp
   27c42:	f7fd fa25 	bl	25090 <memcpy>
	memcpy(&ecb.clear_text[0], clear_text_be, sizeof(ecb.clear_text));
   27c46:	2210      	movs	r2, #16
   27c48:	4629      	mov	r1, r5
   27c4a:	eb0d 0002 	add.w	r0, sp, r2
   27c4e:	f7fd fa1f 	bl	25090 <memcpy>

	do_ecb(&ecb);
   27c52:	4668      	mov	r0, sp
   27c54:	f7f5 fd80 	bl	1d758 <do_ecb>

	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
   27c58:	2210      	movs	r2, #16
   27c5a:	a908      	add	r1, sp, #32
   27c5c:	4620      	mov	r0, r4
   27c5e:	f7fd fa17 	bl	25090 <memcpy>
}
   27c62:	b00d      	add	sp, #52	; 0x34
   27c64:	bd30      	pop	{r4, r5, pc}

00027c66 <ecb_encrypt>:

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   27c66:	b570      	push	{r4, r5, r6, lr}
   27c68:	b08c      	sub	sp, #48	; 0x30
   27c6a:	460e      	mov	r6, r1
   27c6c:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   27c6e:	4601      	mov	r1, r0
   27c70:	2210      	movs	r2, #16
   27c72:	4668      	mov	r0, sp
{
   27c74:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   27c76:	f7ff fadc 	bl	27232 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   27c7a:	2210      	movs	r2, #16
   27c7c:	eb0d 0002 	add.w	r0, sp, r2
   27c80:	4631      	mov	r1, r6
   27c82:	f7ff fad6 	bl	27232 <mem_rcopy>

	do_ecb(&ecb);
   27c86:	4668      	mov	r0, sp
   27c88:	f7f5 fd66 	bl	1d758 <do_ecb>

	if (cipher_text_le) {
   27c8c:	b125      	cbz	r5, 27c98 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   27c8e:	2210      	movs	r2, #16
   27c90:	a908      	add	r1, sp, #32
   27c92:	4628      	mov	r0, r5
   27c94:	f7ff facd 	bl	27232 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   27c98:	b124      	cbz	r4, 27ca4 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   27c9a:	2210      	movs	r2, #16
   27c9c:	a908      	add	r1, sp, #32
   27c9e:	4620      	mov	r0, r4
   27ca0:	f7fd f9f6 	bl	25090 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   27ca4:	b00c      	add	sp, #48	; 0x30
   27ca6:	bd70      	pop	{r4, r5, r6, pc}

00027ca8 <radio_tx_chain_delay_get>:
}
   27ca8:	2001      	movs	r0, #1
   27caa:	4770      	bx	lr

00027cac <radio_rx_ready_delay_get>:
}
   27cac:	2029      	movs	r0, #41	; 0x29
   27cae:	4770      	bx	lr

00027cb0 <radio_rx_chain_delay_get>:
	switch (phy) {
   27cb0:	2802      	cmp	r0, #2
}
   27cb2:	bf14      	ite	ne
   27cb4:	200a      	movne	r0, #10
   27cb6:	2006      	moveq	r0, #6
   27cb8:	4770      	bx	lr

00027cba <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   27cba:	4288      	cmp	r0, r1
   27cbc:	d00c      	beq.n	27cd8 <mayfly_prio_is_equal+0x1e>
	return (caller_id == callee_id) ||
   27cbe:	b978      	cbnz	r0, 27ce0 <mayfly_prio_is_equal+0x26>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   27cc0:	1e48      	subs	r0, r1, #1
   27cc2:	2801      	cmp	r0, #1
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   27cc4:	bf8c      	ite	hi
   27cc6:	2000      	movhi	r0, #0
   27cc8:	2001      	movls	r0, #1
   27cca:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   27ccc:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   27cd0:	bf0c      	ite	eq
   27cd2:	2001      	moveq	r0, #1
   27cd4:	2000      	movne	r0, #0
   27cd6:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   27cd8:	2001      	movs	r0, #1
   27cda:	4770      	bx	lr
   27cdc:	2000      	movs	r0, #0
}
   27cde:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   27ce0:	2801      	cmp	r0, #1
   27ce2:	d0f3      	beq.n	27ccc <mayfly_prio_is_equal+0x12>
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   27ce4:	2802      	cmp	r0, #2
   27ce6:	d1f9      	bne.n	27cdc <mayfly_prio_is_equal+0x22>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   27ce8:	2901      	cmp	r1, #1
   27cea:	e7eb      	b.n	27cc4 <mayfly_prio_is_equal+0xa>

00027cec <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
   27cec:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   27cee:	2000      	movs	r0, #0
   27cf0:	f7f5 bd2a 	b.w	1d748 <cntr_cmp_set>

00027cf4 <sys_put_le32>:
	dst[1] = val >> 8;
   27cf4:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   27cf8:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   27cfa:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   27cfc:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   27cfe:	0a00      	lsrs	r0, r0, #8
   27d00:	704b      	strb	r3, [r1, #1]
   27d02:	70c8      	strb	r0, [r1, #3]
}
   27d04:	4770      	bx	lr

00027d06 <hci_vendor_read_static_addr>:
				 u8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   27d06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   27d0a:	b510      	push	{r4, lr}
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   27d0c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   27d10:	3201      	adds	r2, #1
{
   27d12:	4604      	mov	r4, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   27d14:	d106      	bne.n	27d24 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   27d16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   27d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   27d1e:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   27d20:	4293      	cmp	r3, r2
   27d22:	d044      	beq.n	27dae <hci_vendor_read_static_addr+0xa8>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   27d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   27d28:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   27d2c:	f010 0001 	ands.w	r0, r0, #1
   27d30:	d036      	beq.n	27da0 <hci_vendor_read_static_addr+0x9a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   27d32:	4621      	mov	r1, r4
   27d34:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
   27d38:	f7ff ffdc 	bl	27cf4 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   27d3c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   27d40:	7123      	strb	r3, [r4, #4]
	dst[1] = val >> 8;
   27d42:	f3c3 2307 	ubfx	r3, r3, #8, #8

		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   27d46:	f063 033f 	orn	r3, r3, #63	; 0x3f
   27d4a:	7163      	strb	r3, [r4, #5]

		/* If no public address is provided and a static address is
		 * available, then it is recommended to return an identity root
		 * key (if available) from this command.
		 */
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   27d4c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   27d50:	3101      	adds	r1, #1
   27d52:	f104 0306 	add.w	r3, r4, #6
   27d56:	d024      	beq.n	27da2 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   27d58:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   27d5c:	3101      	adds	r1, #1
   27d5e:	d020      	beq.n	27da2 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   27d60:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   27d64:	3101      	adds	r1, #1
   27d66:	d01c      	beq.n	27da2 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   27d68:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   27d6c:	3101      	adds	r1, #1
   27d6e:	d018      	beq.n	27da2 <hci_vendor_read_static_addr+0x9c>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   27d70:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   27d74:	4619      	mov	r1, r3
   27d76:	f7ff ffbd 	bl	27cf4 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   27d7a:	f104 010a 	add.w	r1, r4, #10
   27d7e:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   27d82:	f7ff ffb7 	bl	27cf4 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   27d86:	f104 010e 	add.w	r1, r4, #14
   27d8a:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   27d8e:	f7ff ffb1 	bl	27cf4 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   27d92:	f104 0112 	add.w	r1, r4, #18
   27d96:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   27d9a:	f7ff ffab 	bl	27cf4 <sys_put_le32>
		} else {
			/* Mark IR as invalid */
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
		}

		return 1;
   27d9e:	2001      	movs	r0, #1
	}

	return 0;
}
   27da0:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   27da2:	2210      	movs	r2, #16
   27da4:	2100      	movs	r1, #0
   27da6:	4618      	mov	r0, r3
   27da8:	f7fd f99d 	bl	250e6 <memset>
   27dac:	e7f7      	b.n	27d9e <hci_vendor_read_static_addr+0x98>
	return 0;
   27dae:	2000      	movs	r0, #0
   27db0:	e7f6      	b.n	27da0 <hci_vendor_read_static_addr+0x9a>

00027db2 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(u8_t ir[16], u8_t er[16])
{
   27db2:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   27db4:	2210      	movs	r2, #16
{
   27db6:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   27db8:	2100      	movs	r1, #0
   27dba:	f7fd f994 	bl	250e6 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   27dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   27dc2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   27dc6:	3301      	adds	r3, #1
   27dc8:	d023      	beq.n	27e12 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   27dca:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   27dce:	3301      	adds	r3, #1
   27dd0:	d01f      	beq.n	27e12 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   27dd2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   27dd6:	3301      	adds	r3, #1
   27dd8:	d01b      	beq.n	27e12 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   27dda:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   27dde:	3301      	adds	r3, #1
   27de0:	d017      	beq.n	27e12 <hci_vendor_read_key_hierarchy_roots+0x60>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   27de2:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   27de6:	4621      	mov	r1, r4
   27de8:	f7ff ff84 	bl	27cf4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   27dec:	1d21      	adds	r1, r4, #4
   27dee:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   27df2:	f7ff ff7f 	bl	27cf4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   27df6:	f104 0108 	add.w	r1, r4, #8
   27dfa:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   27dfe:	f7ff ff79 	bl	27cf4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   27e02:	f104 010c 	add.w	r1, r4, #12
   27e06:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   27e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   27e0e:	f7ff bf71 	b.w	27cf4 <sys_put_le32>
		(void)memset(er, 0x00, 16);
   27e12:	4620      	mov	r0, r4
   27e14:	2210      	movs	r2, #16
}
   27e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   27e1a:	2100      	movs	r1, #0
   27e1c:	f7fd b963 	b.w	250e6 <memset>

00027e20 <fixed_data_unref>:
}
   27e20:	4770      	bx	lr

00027e22 <k_uptime_get_32>:
{
   27e22:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   27e24:	f000 fb3c 	bl	284a0 <z_impl_k_uptime_ticks>
   27e28:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   27e2c:	fba0 2304 	umull	r2, r3, r0, r4
   27e30:	fb04 3301 	mla	r3, r4, r1, r3
   27e34:	0bd0      	lsrs	r0, r2, #15
}
   27e36:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   27e3a:	bd10      	pop	{r4, pc}

00027e3c <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   27e3c:	69c3      	ldr	r3, [r0, #28]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   27e3e:	685b      	ldr	r3, [r3, #4]
{
   27e40:	460a      	mov	r2, r1
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   27e42:	6819      	ldr	r1, [r3, #0]
   27e44:	f7f6 b94a 	b.w	1e0dc <net_buf_alloc_len>

00027e48 <net_buf_simple_init_with_data>:
	buf->size  = size;
   27e48:	b292      	uxth	r2, r2
	buf->__buf = data;
   27e4a:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   27e4c:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   27e4e:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   27e50:	8082      	strh	r2, [r0, #4]
}
   27e52:	4770      	bx	lr

00027e54 <net_buf_simple_push_be16>:
{
   27e54:	b510      	push	{r4, lr}
   27e56:	460c      	mov	r4, r1
	sys_put_be16(val, net_buf_simple_push(buf, sizeof(val)));
   27e58:	2102      	movs	r1, #2
   27e5a:	f7f6 fb7b 	bl	1e554 <net_buf_simple_push>
	dst[0] = val >> 8;
   27e5e:	0a23      	lsrs	r3, r4, #8
   27e60:	7003      	strb	r3, [r0, #0]
	dst[1] = val;
   27e62:	7044      	strb	r4, [r0, #1]
}
   27e64:	bd10      	pop	{r4, pc}

00027e66 <net_buf_simple_push_u8>:
{
   27e66:	b510      	push	{r4, lr}
   27e68:	460c      	mov	r4, r1
	u8_t *data = net_buf_simple_push(buf, 1);
   27e6a:	2101      	movs	r1, #1
   27e6c:	f7f6 fb72 	bl	1e554 <net_buf_simple_push>
	*data = val;
   27e70:	7004      	strb	r4, [r0, #0]
}
   27e72:	bd10      	pop	{r4, pc}

00027e74 <net_buf_simple_push_be24>:
{
   27e74:	b510      	push	{r4, lr}
   27e76:	460c      	mov	r4, r1
	sys_put_be24(val, net_buf_simple_push(buf, 3));
   27e78:	2103      	movs	r1, #3
   27e7a:	f7f6 fb6b 	bl	1e554 <net_buf_simple_push>
	dst[0] = val >> 16;
   27e7e:	0c23      	lsrs	r3, r4, #16
   27e80:	7003      	strb	r3, [r0, #0]
	dst[0] = val >> 8;
   27e82:	f3c4 2307 	ubfx	r3, r4, #8, #8
   27e86:	7043      	strb	r3, [r0, #1]
	dst[1] = val;
   27e88:	7084      	strb	r4, [r0, #2]
}
   27e8a:	bd10      	pop	{r4, pc}

00027e8c <net_buf_simple_pull_u8>:
{
   27e8c:	b510      	push	{r4, lr}
	val = buf->data[0];
   27e8e:	6803      	ldr	r3, [r0, #0]
   27e90:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   27e92:	2101      	movs	r1, #1
   27e94:	f7f6 fb80 	bl	1e598 <net_buf_simple_pull>
}
   27e98:	4620      	mov	r0, r4
   27e9a:	bd10      	pop	{r4, pc}

00027e9c <net_buf_simple_pull_le16>:
{
   27e9c:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((u16_t *)buf->data);
   27e9e:	6803      	ldr	r3, [r0, #0]
   27ea0:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   27ea2:	2102      	movs	r1, #2
   27ea4:	f7f6 fb78 	bl	1e598 <net_buf_simple_pull>
}
   27ea8:	4620      	mov	r0, r4
   27eaa:	bd10      	pop	{r4, pc}

00027eac <net_buf_simple_pull_be16>:
	val = UNALIGNED_GET((u16_t *)buf->data);
   27eac:	6803      	ldr	r3, [r0, #0]
{
   27eae:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((u16_t *)buf->data);
   27eb0:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   27eb2:	2102      	movs	r1, #2
   27eb4:	f7f6 fb70 	bl	1e598 <net_buf_simple_pull>
	return sys_be16_to_cpu(val);
   27eb8:	0220      	lsls	r0, r4, #8
   27eba:	ea40 2014 	orr.w	r0, r0, r4, lsr #8
}
   27ebe:	b280      	uxth	r0, r0
   27ec0:	bd10      	pop	{r4, pc}

00027ec2 <net_buf_simple_pull_be32>:
{
   27ec2:	b510      	push	{r4, lr}
   27ec4:	6803      	ldr	r3, [r0, #0]
   27ec6:	681c      	ldr	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   27ec8:	2104      	movs	r1, #4
   27eca:	ba24      	rev	r4, r4
   27ecc:	f7f6 fb64 	bl	1e598 <net_buf_simple_pull>
}
   27ed0:	4620      	mov	r0, r4
   27ed2:	bd10      	pop	{r4, pc}

00027ed4 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   27ed4:	6802      	ldr	r2, [r0, #0]
   27ed6:	6880      	ldr	r0, [r0, #8]
}
   27ed8:	1a10      	subs	r0, r2, r0
   27eda:	4770      	bx	lr

00027edc <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   27edc:	8883      	ldrh	r3, [r0, #4]
   27ede:	88c2      	ldrh	r2, [r0, #6]
   27ee0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   27ee2:	6803      	ldr	r3, [r0, #0]
   27ee4:	6880      	ldr	r0, [r0, #8]
   27ee6:	1a18      	subs	r0, r3, r0
}
   27ee8:	1a10      	subs	r0, r2, r0
   27eea:	4770      	bx	lr

00027eec <net_buf_simple_add_mem>:
{
   27eec:	b538      	push	{r3, r4, r5, lr}
   27eee:	460d      	mov	r5, r1
   27ef0:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   27ef2:	4611      	mov	r1, r2
   27ef4:	f7f6 fb92 	bl	1e61c <net_buf_simple_add>
   27ef8:	4622      	mov	r2, r4
   27efa:	4629      	mov	r1, r5
}
   27efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   27f00:	f7fd b8c6 	b.w	25090 <memcpy>

00027f04 <net_buf_simple_add_u8>:
{
   27f04:	b510      	push	{r4, lr}
   27f06:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   27f08:	2101      	movs	r1, #1
   27f0a:	f7f6 fb87 	bl	1e61c <net_buf_simple_add>
	*u8 = val;
   27f0e:	7004      	strb	r4, [r0, #0]
}
   27f10:	bd10      	pop	{r4, pc}

00027f12 <net_buf_simple_add_le16>:
{
   27f12:	b510      	push	{r4, lr}
   27f14:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   27f16:	2102      	movs	r1, #2
   27f18:	f7f6 fb80 	bl	1e61c <net_buf_simple_add>
	dst[0] = val;
   27f1c:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   27f1e:	0a24      	lsrs	r4, r4, #8
   27f20:	7044      	strb	r4, [r0, #1]
}
   27f22:	bd10      	pop	{r4, pc}

00027f24 <net_buf_simple_add_be16>:
{
   27f24:	b510      	push	{r4, lr}
   27f26:	460c      	mov	r4, r1
	sys_put_be16(val, net_buf_simple_add(buf, sizeof(val)));
   27f28:	2102      	movs	r1, #2
   27f2a:	f7f6 fb77 	bl	1e61c <net_buf_simple_add>
	dst[0] = val >> 8;
   27f2e:	0a23      	lsrs	r3, r4, #8
   27f30:	7003      	strb	r3, [r0, #0]
	dst[1] = val;
   27f32:	7044      	strb	r4, [r0, #1]
}
   27f34:	bd10      	pop	{r4, pc}

00027f36 <net_buf_simple_add_le24>:
{
   27f36:	b510      	push	{r4, lr}
   27f38:	460c      	mov	r4, r1
	sys_put_le24(val, net_buf_simple_add(buf, 3));
   27f3a:	2103      	movs	r1, #3
   27f3c:	f7f6 fb6e 	bl	1e61c <net_buf_simple_add>
	dst[1] = val >> 8;
   27f40:	f3c4 2307 	ubfx	r3, r4, #8, #8
	dst[0] = val;
   27f44:	7004      	strb	r4, [r0, #0]
	dst[2] = val >> 16;
   27f46:	0c24      	lsrs	r4, r4, #16
	dst[1] = val >> 8;
   27f48:	7043      	strb	r3, [r0, #1]
	dst[2] = val >> 16;
   27f4a:	7084      	strb	r4, [r0, #2]
}
   27f4c:	bd10      	pop	{r4, pc}

00027f4e <net_buf_simple_add_be32>:
{
   27f4e:	b510      	push	{r4, lr}
   27f50:	460c      	mov	r4, r1
	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   27f52:	2104      	movs	r1, #4
   27f54:	f7f6 fb62 	bl	1e61c <net_buf_simple_add>
	sys_put_be16(val >> 16, dst);
   27f58:	0c23      	lsrs	r3, r4, #16
	dst[0] = val >> 8;
   27f5a:	0e22      	lsrs	r2, r4, #24
	dst[1] = val;
   27f5c:	7043      	strb	r3, [r0, #1]
	dst[0] = val >> 8;
   27f5e:	f3c4 2307 	ubfx	r3, r4, #8, #8
   27f62:	7002      	strb	r2, [r0, #0]
   27f64:	7083      	strb	r3, [r0, #2]
	dst[1] = val;
   27f66:	70c4      	strb	r4, [r0, #3]
}
   27f68:	bd10      	pop	{r4, pc}

00027f6a <gpio_nrfx_port_get_raw>:
	return port->config->config_info;
   27f6a:	6803      	ldr	r3, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27f6c:	689b      	ldr	r3, [r3, #8]
   27f6e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   27f70:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   27f74:	600b      	str	r3, [r1, #0]
}
   27f76:	2000      	movs	r0, #0
   27f78:	4770      	bx	lr

00027f7a <gpio_nrfx_port_set_masked_raw>:
	return port->config->config_info;
   27f7a:	6803      	ldr	r3, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27f7c:	689b      	ldr	r3, [r3, #8]
   27f7e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   27f80:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   27f84:	4042      	eors	r2, r0
   27f86:	400a      	ands	r2, r1
   27f88:	4042      	eors	r2, r0
    p_reg->OUT = value;
   27f8a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   27f8e:	2000      	movs	r0, #0
   27f90:	4770      	bx	lr

00027f92 <gpio_nrfx_port_set_bits_raw>:
	return port->config->config_info;
   27f92:	6803      	ldr	r3, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27f94:	689b      	ldr	r3, [r3, #8]
   27f96:	685b      	ldr	r3, [r3, #4]
}
   27f98:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   27f9a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   27f9e:	4770      	bx	lr

00027fa0 <gpio_nrfx_port_clear_bits_raw>:
	return port->config->config_info;
   27fa0:	6803      	ldr	r3, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27fa2:	689b      	ldr	r3, [r3, #8]
   27fa4:	685b      	ldr	r3, [r3, #4]
}
   27fa6:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   27fa8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   27fac:	4770      	bx	lr

00027fae <gpio_nrfx_port_toggle_bits>:
	return port->config->config_info;
   27fae:	6803      	ldr	r3, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27fb0:	689b      	ldr	r3, [r3, #8]
   27fb2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   27fb4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   27fb8:	404b      	eors	r3, r1
    p_reg->OUT = value;
   27fba:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   27fbe:	2000      	movs	r0, #0
   27fc0:	4770      	bx	lr

00027fc2 <nrf_gpio_cfg_sense_set>:
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   27fc2:	281f      	cmp	r0, #31
{
   27fc4:	b538      	push	{r3, r4, r5, lr}
   27fc6:	4604      	mov	r4, r0
   27fc8:	460d      	mov	r5, r1
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   27fca:	d901      	bls.n	27fd0 <nrf_gpio_cfg_sense_set+0xe>
   27fcc:	f7f6 fb9e 	bl	1e70c <nrf_gpio_pin_port_decode.isra.0.part.0>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   27fd0:	00a4      	lsls	r4, r4, #2
   27fd2:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
   27fd6:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
   27fda:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   27fde:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   27fe2:	f8c4 3700 	str.w	r3, [r4, #1792]	; 0x700
}
   27fe6:	bd38      	pop	{r3, r4, r5, pc}

00027fe8 <gpio_nrfx_pin_disable_callback>:
{
   27fe8:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   27fea:	6884      	ldr	r4, [r0, #8]
	WRITE_BIT(data->int_en, pin, enable);
   27fec:	2301      	movs	r3, #1
   27fee:	fa03 f201 	lsl.w	r2, r3, r1
   27ff2:	6923      	ldr	r3, [r4, #16]
   27ff4:	ea23 0302 	bic.w	r3, r3, r2
   27ff8:	6123      	str	r3, [r4, #16]
}
   27ffa:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
   27ffc:	f7f6 bbb4 	b.w	1e768 <gpiote_pin_int_cfg>

00028000 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   28000:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   28004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   28008:	6884      	ldr	r4, [r0, #8]
{
   2800a:	4607      	mov	r7, r0
   2800c:	460e      	mov	r6, r1
   2800e:	4690      	mov	r8, r2
   28010:	4699      	mov	r9, r3
	if ((mode == GPIO_INT_MODE_EDGE) &&
   28012:	d13c      	bne.n	2808e <gpio_nrfx_pin_interrupt_configure+0x8e>
	return port->config->config_info;
   28014:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   28016:	689b      	ldr	r3, [r3, #8]
   28018:	7a1b      	ldrb	r3, [r3, #8]
   2801a:	f001 051f 	and.w	r5, r1, #31
   2801e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   28022:	2d1f      	cmp	r5, #31
   28024:	dd01      	ble.n	2802a <gpio_nrfx_pin_interrupt_configure+0x2a>
   28026:	f7f6 fb71 	bl	1e70c <nrf_gpio_pin_port_decode.isra.0.part.0>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2802a:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   2802e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   28032:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   28036:	07db      	lsls	r3, r3, #31
   28038:	d433      	bmi.n	280a2 <gpio_nrfx_pin_interrupt_configure+0xa2>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   2803a:	68e3      	ldr	r3, [r4, #12]
   2803c:	2501      	movs	r5, #1
   2803e:	40b5      	lsls	r5, r6
   28040:	431d      	orrs	r5, r3
   28042:	6923      	ldr	r3, [r4, #16]
   28044:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   28046:	2501      	movs	r5, #1
   28048:	40b5      	lsls	r5, r6
   2804a:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
   2804e:	bf14      	ite	ne
   28050:	432b      	orrne	r3, r5
   28052:	43ab      	biceq	r3, r5
   28054:	6123      	str	r3, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   28056:	69a3      	ldr	r3, [r4, #24]
   28058:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   2805c:	bf0c      	ite	eq
   2805e:	432b      	orreq	r3, r5
   28060:	43ab      	bicne	r3, r5
   28062:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   28064:	69e3      	ldr	r3, [r4, #28]
   28066:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   2806a:	bf0c      	ite	eq
   2806c:	432b      	orreq	r3, r5
   2806e:	43ab      	bicne	r3, r5
   28070:	61e3      	str	r3, [r4, #28]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   28072:	6963      	ldr	r3, [r4, #20]
   28074:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   28078:	bf0c      	ite	eq
   2807a:	431d      	orreq	r5, r3
   2807c:	ea23 0505 	bicne.w	r5, r3, r5
   28080:	6165      	str	r5, [r4, #20]
	return gpiote_pin_int_cfg(port, pin);
   28082:	4631      	mov	r1, r6
   28084:	4638      	mov	r0, r7
}
   28086:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return gpiote_pin_int_cfg(port, pin);
   2808a:	f7f6 bb6d 	b.w	1e768 <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   2808e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   28092:	d1d2      	bne.n	2803a <gpio_nrfx_pin_interrupt_configure+0x3a>
   28094:	2501      	movs	r5, #1
   28096:	fa05 f301 	lsl.w	r3, r5, r1
   2809a:	68e5      	ldr	r5, [r4, #12]
   2809c:	ea25 0503 	bic.w	r5, r5, r3
   280a0:	e7cf      	b.n	28042 <gpio_nrfx_pin_interrupt_configure+0x42>
}
   280a2:	f06f 0022 	mvn.w	r0, #34	; 0x22
   280a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000280aa <gpio_nrfx_pin_enable_callback>:
{
   280aa:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   280ac:	6884      	ldr	r4, [r0, #8]
	WRITE_BIT(data->int_en, pin, enable);
   280ae:	2301      	movs	r3, #1
   280b0:	fa03 f201 	lsl.w	r2, r3, r1
   280b4:	6923      	ldr	r3, [r4, #16]
   280b6:	4313      	orrs	r3, r2
   280b8:	6123      	str	r3, [r4, #16]
}
   280ba:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
   280bc:	f7f6 bb54 	b.w	1e768 <gpiote_pin_int_cfg>

000280c0 <flash_nrf_write_protection>:
}
   280c0:	2000      	movs	r0, #0
   280c2:	4770      	bx	lr

000280c4 <is_regular_addr_valid>:
{
   280c4:	b538      	push	{r3, r4, r5, lr}
   280c6:	4604      	mov	r4, r0
   280c8:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   280ca:	f000 f8a4 	bl	28216 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   280ce:	4284      	cmp	r4, r0
   280d0:	d209      	bcs.n	280e6 <is_regular_addr_valid+0x22>
   280d2:	2c00      	cmp	r4, #0
   280d4:	db07      	blt.n	280e6 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   280d6:	42a8      	cmp	r0, r5
   280d8:	d305      	bcc.n	280e6 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   280da:	442c      	add	r4, r5
	    len > flash_size ||
   280dc:	4284      	cmp	r4, r0
   280de:	bf8c      	ite	hi
   280e0:	2000      	movhi	r0, #0
   280e2:	2001      	movls	r0, #1
}
   280e4:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   280e6:	2000      	movs	r0, #0
   280e8:	e7fc      	b.n	280e4 <is_regular_addr_valid+0x20>

000280ea <flash_nrf_read>:
{
   280ea:	b570      	push	{r4, r5, r6, lr}
   280ec:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   280ee:	4628      	mov	r0, r5
   280f0:	4619      	mov	r1, r3
{
   280f2:	4616      	mov	r6, r2
   280f4:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   280f6:	f7ff ffe5 	bl	280c4 <is_regular_addr_valid>
   280fa:	b138      	cbz	r0, 2810c <flash_nrf_read+0x22>
	if (!len) {
   280fc:	b14c      	cbz	r4, 28112 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   280fe:	4622      	mov	r2, r4
   28100:	4629      	mov	r1, r5
   28102:	4630      	mov	r0, r6
   28104:	f7fc ffc4 	bl	25090 <memcpy>
	return 0;
   28108:	2000      	movs	r0, #0
}
   2810a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2810c:	f06f 0015 	mvn.w	r0, #21
   28110:	e7fb      	b.n	2810a <flash_nrf_read+0x20>
		return 0;
   28112:	4620      	mov	r0, r4
   28114:	e7f9      	b.n	2810a <flash_nrf_read+0x20>

00028116 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   28116:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2811a:	461e      	mov	r6, r3
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   2811c:	6843      	ldr	r3, [r0, #4]
{
   2811e:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   28120:	691b      	ldr	r3, [r3, #16]
   28122:	4669      	mov	r1, sp
{
   28124:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   28126:	aa01      	add	r2, sp, #4
   28128:	4798      	blx	r3

	while (layout_size--) {
   2812a:	e9dd 1000 	ldrd	r1, r0, [sp]
   2812e:	2300      	movs	r3, #0
   28130:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	off_t end = 0;
   28134:	461d      	mov	r5, r3
	off_t group_offs = 0;
   28136:	469e      	mov	lr, r3
	size_t page_count = 0;
   28138:	469c      	mov	ip, r3
	while (layout_size--) {
   2813a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2813e:	d102      	bne.n	28146 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   28140:	f06f 0015 	mvn.w	r0, #21
   28144:	e018      	b.n	28178 <flash_get_page_info+0x62>
		if (use_addr) {
   28146:	680a      	ldr	r2, [r1, #0]
   28148:	b1cf      	cbz	r7, 2817e <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   2814a:	6848      	ldr	r0, [r1, #4]
   2814c:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   28150:	42a5      	cmp	r5, r4
   28152:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   28156:	dd17      	ble.n	28188 <flash_get_page_info+0x72>
   28158:	b103      	cbz	r3, 2815c <flash_get_page_info+0x46>
   2815a:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   2815c:	9b00      	ldr	r3, [sp, #0]
   2815e:	685b      	ldr	r3, [r3, #4]
   28160:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   28162:	b177      	cbz	r7, 28182 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   28164:	eba4 040e 	sub.w	r4, r4, lr
   28168:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
   2816c:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   28170:	4464      	add	r4, ip
			info->start_offset = group_offs +
   28172:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   28174:	60b4      	str	r4, [r6, #8]
			return 0;
   28176:	2000      	movs	r0, #0
}
   28178:	b002      	add	sp, #8
   2817a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   2817e:	4415      	add	r5, r2
   28180:	e7e6      	b.n	28150 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   28182:	eba4 040c 	sub.w	r4, r4, ip
   28186:	e7f1      	b.n	2816c <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   28188:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   2818a:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   2818c:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   28190:	3108      	adds	r1, #8
   28192:	2301      	movs	r3, #1
   28194:	e7d1      	b.n	2813a <flash_get_page_info+0x24>

00028196 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
   28196:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   28198:	2201      	movs	r2, #1
   2819a:	f7ff bfbc 	b.w	28116 <flash_get_page_info>

0002819e <flash_page_foreach>:

	return count;
}

void flash_page_foreach(struct device *dev, flash_page_cb cb, void *data)
{
   2819e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   281a2:	6843      	ldr	r3, [r0, #4]
{
   281a4:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   281a6:	691b      	ldr	r3, [r3, #16]
{
   281a8:	4688      	mov	r8, r1
   281aa:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   281ac:	a901      	add	r1, sp, #4
   281ae:	aa02      	add	r2, sp, #8
   281b0:	4798      	blx	r3
	off_t off = 0;
   281b2:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   281b4:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   281b6:	4625      	mov	r5, r4
   281b8:	9b02      	ldr	r3, [sp, #8]
   281ba:	42ab      	cmp	r3, r5
   281bc:	d802      	bhi.n	281c4 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   281be:	b006      	add	sp, #24
   281c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   281c4:	9f01      	ldr	r7, [sp, #4]
   281c6:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   281ca:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   281cc:	687b      	ldr	r3, [r7, #4]
   281ce:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   281d0:	683a      	ldr	r2, [r7, #0]
   281d2:	42b2      	cmp	r2, r6
   281d4:	eb0a 0306 	add.w	r3, sl, r6
   281d8:	d802      	bhi.n	281e0 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   281da:	3501      	adds	r5, #1
   281dc:	469a      	mov	sl, r3
   281de:	e7eb      	b.n	281b8 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   281e0:	4649      	mov	r1, r9
   281e2:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   281e4:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   281e6:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   281e8:	47c0      	blx	r8
   281ea:	2800      	cmp	r0, #0
   281ec:	d0e7      	beq.n	281be <flash_page_foreach+0x20>
			off += page_info.size;
   281ee:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   281f0:	3601      	adds	r6, #1
			off += page_info.size;
   281f2:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   281f4:	e7ec      	b.n	281d0 <flash_page_foreach+0x32>

000281f6 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   281f6:	6882      	ldr	r2, [r0, #8]
{
   281f8:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   281fa:	e892 0003 	ldmia.w	r2, {r0, r1}
   281fe:	e883 0003 	stmia.w	r3, {r0, r1}
}
   28202:	2000      	movs	r0, #0
   28204:	4770      	bx	lr

00028206 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   28206:	f000 b8c4 	b.w	28392 <z_impl_k_busy_wait>

0002820a <flash_total_size_get>:
   2820a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2820e:	6918      	ldr	r0, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   28210:	695b      	ldr	r3, [r3, #20]
}
   28212:	4358      	muls	r0, r3
   28214:	4770      	bx	lr

00028216 <nrfx_nvmc_flash_size_get>:
    nvmc_readonly_mode_set();
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
   28216:	f7ff bff8 	b.w	2820a <flash_total_size_get>

0002821a <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2821a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2821e:	6918      	ldr	r0, [r3, #16]
}

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   28220:	4770      	bx	lr

00028222 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   28222:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28226:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   28228:	4770      	bx	lr

0002822a <arch_system_halt>:
	__asm__ volatile(
   2822a:	f04f 0220 	mov.w	r2, #32
   2822e:	f3ef 8311 	mrs	r3, BASEPRI
   28232:	f382 8811 	msr	BASEPRI, r2
   28236:	f3bf 8f6f 	isb	sy
	for (;;) {
   2823a:	e7fe      	b.n	2823a <arch_system_halt+0x10>

0002823c <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   2823c:	f7fb bd77 	b.w	23d2e <z_clock_idle_exit>

00028240 <k_mem_slab_init>:
{
   28240:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   28242:	2400      	movs	r4, #0
   28244:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   28246:	ea41 0402 	orr.w	r4, r1, r2
   2824a:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2824e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   28252:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   28254:	d10c      	bne.n	28270 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   28256:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   28258:	42a3      	cmp	r3, r4
   2825a:	d103      	bne.n	28264 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   2825c:	e9c0 0000 	strd	r0, r0, [r0]
}
   28260:	2000      	movs	r0, #0
}
   28262:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   28264:	6945      	ldr	r5, [r0, #20]
   28266:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   28268:	3401      	adds	r4, #1
		slab->free_list = p;
   2826a:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2826c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2826e:	e7f3      	b.n	28258 <k_mem_slab_init+0x18>
		return -EINVAL;
   28270:	f06f 0015 	mvn.w	r0, #21
	return rc;
   28274:	e7f5      	b.n	28262 <k_mem_slab_init+0x22>

00028276 <k_mem_pool_malloc>:
{
   28276:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   28278:	2404      	movs	r4, #4
   2827a:	190a      	adds	r2, r1, r4
   2827c:	d204      	bcs.n	28288 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   2827e:	2300      	movs	r3, #0
   28280:	4669      	mov	r1, sp
   28282:	f7f7 fd2b 	bl	1fcdc <k_mem_pool_alloc>
   28286:	b110      	cbz	r0, 2828e <k_mem_pool_malloc+0x18>
		return NULL;
   28288:	2000      	movs	r0, #0
}
   2828a:	b002      	add	sp, #8
   2828c:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   2828e:	9800      	ldr	r0, [sp, #0]
   28290:	4622      	mov	r2, r4
   28292:	a901      	add	r1, sp, #4
   28294:	f7fc fefc 	bl	25090 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   28298:	9800      	ldr	r0, [sp, #0]
   2829a:	3004      	adds	r0, #4
   2829c:	e7f5      	b.n	2828a <k_mem_pool_malloc+0x14>

0002829e <k_free>:
	if (ptr != NULL) {
   2829e:	b110      	cbz	r0, 282a6 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   282a0:	3804      	subs	r0, #4
   282a2:	f7f7 bd8b 	b.w	1fdbc <k_mem_pool_free_id>
}
   282a6:	4770      	bx	lr

000282a8 <z_impl_k_mutex_init>:
{
   282a8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   282aa:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   282ac:	e9c3 0002 	strd	r0, r0, [r3, #8]
   282b0:	e9c3 3300 	strd	r3, r3, [r3]
}
   282b4:	4770      	bx	lr

000282b6 <z_queue_node_peek>:
{
   282b6:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   282b8:	4604      	mov	r4, r0
   282ba:	b130      	cbz	r0, 282ca <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   282bc:	6802      	ldr	r2, [r0, #0]
   282be:	0793      	lsls	r3, r2, #30
   282c0:	d003      	beq.n	282ca <z_queue_node_peek+0x14>
		ret = anode->data;
   282c2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   282c4:	b109      	cbz	r1, 282ca <z_queue_node_peek+0x14>
			k_free(anode);
   282c6:	f7ff ffea 	bl	2829e <k_free>
}
   282ca:	4620      	mov	r0, r4
   282cc:	bd10      	pop	{r4, pc}

000282ce <z_impl_k_queue_init>:
	list->head = NULL;
   282ce:	2300      	movs	r3, #0
	list->tail = NULL;
   282d0:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   282d4:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   282d6:	f100 030c 	add.w	r3, r0, #12
   282da:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   282de:	4770      	bx	lr

000282e0 <k_queue_append>:
{
   282e0:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   282e2:	2300      	movs	r3, #0
   282e4:	6841      	ldr	r1, [r0, #4]
   282e6:	f7f7 bf75 	b.w	201d4 <queue_insert>

000282ea <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   282ea:	2300      	movs	r3, #0
{
   282ec:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
   282ee:	4619      	mov	r1, r3
   282f0:	f7f7 bf70 	b.w	201d4 <queue_insert>

000282f4 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   282f4:	f990 000e 	ldrsb.w	r0, [r0, #14]
   282f8:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   282fc:	4298      	cmp	r0, r3
   282fe:	bfac      	ite	ge
   28300:	2000      	movge	r0, #0
   28302:	2001      	movlt	r0, #1
   28304:	4770      	bx	lr

00028306 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   28306:	4603      	mov	r3, r0
   28308:	b920      	cbnz	r0, 28314 <z_reschedule_irqlock+0xe>
   2830a:	f3ef 8205 	mrs	r2, IPSR
   2830e:	b90a      	cbnz	r2, 28314 <z_reschedule_irqlock+0xe>
   28310:	f7dc b988 	b.w	4624 <arch_swap>
	__asm__ volatile(
   28314:	f383 8811 	msr	BASEPRI, r3
   28318:	f3bf 8f6f 	isb	sy
}
   2831c:	4770      	bx	lr

0002831e <z_reschedule_unlocked>:
	__asm__ volatile(
   2831e:	f04f 0320 	mov.w	r3, #32
   28322:	f3ef 8011 	mrs	r0, BASEPRI
   28326:	f383 8811 	msr	BASEPRI, r3
   2832a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2832e:	f7ff bfea 	b.w	28306 <z_reschedule_irqlock>

00028332 <z_priq_dumb_best>:
{
   28332:	4603      	mov	r3, r0
	return list->head == list;
   28334:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28336:	4283      	cmp	r3, r0
   28338:	d003      	beq.n	28342 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2833a:	2800      	cmp	r0, #0
   2833c:	bf38      	it	cc
   2833e:	2000      	movcc	r0, #0
   28340:	4770      	bx	lr
	struct k_thread *thread = NULL;
   28342:	2000      	movs	r0, #0
}
   28344:	4770      	bx	lr

00028346 <z_unpend_all>:
{
   28346:	b538      	push	{r3, r4, r5, lr}
   28348:	4605      	mov	r5, r0
	int need_sched = 0;
   2834a:	2000      	movs	r0, #0
	return list->head == list;
   2834c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2834e:	42a5      	cmp	r5, r4
   28350:	d000      	beq.n	28354 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   28352:	b904      	cbnz	r4, 28356 <z_unpend_all+0x10>
}
   28354:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   28356:	4620      	mov	r0, r4
   28358:	f7f8 fb14 	bl	20984 <z_unpend_thread>
		z_ready_thread(thread);
   2835c:	4620      	mov	r0, r4
   2835e:	f7f8 fc55 	bl	20c0c <z_ready_thread>
		need_sched = 1;
   28362:	2001      	movs	r0, #1
   28364:	e7f2      	b.n	2834c <z_unpend_all+0x6>

00028366 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   28366:	b15a      	cbz	r2, 28380 <z_impl_k_sem_init+0x1a>
   28368:	428a      	cmp	r2, r1
   2836a:	d309      	bcc.n	28380 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2836c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   28370:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   28374:	e9c0 0000 	strd	r0, r0, [r0]
   28378:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2837c:	2000      	movs	r0, #0
   2837e:	4770      	bx	lr
		return -EINVAL;
   28380:	f06f 0015 	mvn.w	r0, #21
}
   28384:	4770      	bx	lr

00028386 <k_is_in_isr>:
   28386:	f3ef 8005 	mrs	r0, IPSR
}
   2838a:	3800      	subs	r0, #0
   2838c:	bf18      	it	ne
   2838e:	2001      	movne	r0, #1
   28390:	4770      	bx	lr

00028392 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   28392:	f7dd bc6b 	b.w	5c6c <arch_busy_wait>

00028396 <k_thread_name_get>:
}
   28396:	305c      	adds	r0, #92	; 0x5c
   28398:	4770      	bx	lr

0002839a <z_new_thread_init>:
{
   2839a:	b510      	push	{r4, lr}
	thread_base->user_options = (u8_t)options;
   2839c:	9c02      	ldr	r4, [sp, #8]
   2839e:	7304      	strb	r4, [r0, #12]
	thread_base->prio = priority;
   283a0:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
   283a2:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   283a4:	2300      	movs	r3, #0
	node->prev = NULL;
   283a6:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   283aa:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
   283ae:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
	thread_base->thread_state = (u8_t)initial_state;
   283b2:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
   283b4:	73c3      	strb	r3, [r0, #15]
	thread->name[0] = '\0';
   283b6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
}
   283ba:	bd10      	pop	{r4, pc}

000283bc <k_work_submit_to_queue>:
{
   283bc:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   283be:	f101 0308 	add.w	r3, r1, #8
   283c2:	f3bf 8f5b 	dmb	ish
   283c6:	e853 2f00 	ldrex	r2, [r3]
   283ca:	f042 0c01 	orr.w	ip, r2, #1
   283ce:	e843 ce00 	strex	lr, ip, [r3]
   283d2:	f1be 0f00 	cmp.w	lr, #0
   283d6:	d1f6      	bne.n	283c6 <k_work_submit_to_queue+0xa>
   283d8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   283dc:	07d3      	lsls	r3, r2, #31
   283de:	d403      	bmi.n	283e8 <k_work_submit_to_queue+0x2c>
}
   283e0:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   283e4:	f7ff bf7c 	b.w	282e0 <k_queue_append>
}
   283e8:	f85d fb04 	ldr.w	pc, [sp], #4

000283ec <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   283ec:	f1a0 010c 	sub.w	r1, r0, #12
   283f0:	6900      	ldr	r0, [r0, #16]
   283f2:	f7ff bfe3 	b.w	283bc <k_work_submit_to_queue>

000283f6 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   283f6:	69c3      	ldr	r3, [r0, #28]
{
   283f8:	b570      	push	{r4, r5, r6, lr}
   283fa:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   283fc:	b913      	cbnz	r3, 28404 <work_cancel+0xe>
		return -EALREADY;
   283fe:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   28402:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28404:	f3bf 8f5b 	dmb	ish
   28408:	6883      	ldr	r3, [r0, #8]
   2840a:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   2840e:	07db      	lsls	r3, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   28410:	f100 0508 	add.w	r5, r0, #8
   28414:	d532      	bpl.n	2847c <work_cancel+0x86>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   28416:	69c2      	ldr	r2, [r0, #28]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   28418:	6813      	ldr	r3, [r2, #0]
   2841a:	2100      	movs	r1, #0
   2841c:	b913      	cbnz	r3, 28424 <work_cancel+0x2e>
			return -EINVAL;
   2841e:	f06f 0015 	mvn.w	r0, #21
   28422:	e7ee      	b.n	28402 <work_cancel+0xc>
   28424:	429c      	cmp	r4, r3
   28426:	d124      	bne.n	28472 <work_cancel+0x7c>
Z_GENLIST_REMOVE(sflist, sfnode)
   28428:	6823      	ldr	r3, [r4, #0]
   2842a:	6856      	ldr	r6, [r2, #4]
   2842c:	f023 0003 	bic.w	r0, r3, #3
   28430:	b9b1      	cbnz	r1, 28460 <work_cancel+0x6a>
   28432:	42b4      	cmp	r4, r6
	list->head = node;
   28434:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   28436:	d100      	bne.n	2843a <work_cancel+0x44>
	list->tail = node;
   28438:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2843a:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2843c:	f003 0303 	and.w	r3, r3, #3
   28440:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   28442:	2000      	movs	r0, #0
   28444:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28446:	f3bf 8f5b 	dmb	ish
   2844a:	e855 3f00 	ldrex	r3, [r5]
   2844e:	f023 0301 	bic.w	r3, r3, #1
   28452:	e845 3200 	strex	r2, r3, [r5]
   28456:	2a00      	cmp	r2, #0
   28458:	d1f7      	bne.n	2844a <work_cancel+0x54>
   2845a:	f3bf 8f5b 	dmb	ish
   2845e:	e7d0      	b.n	28402 <work_cancel+0xc>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28460:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28462:	f003 0303 	and.w	r3, r3, #3
   28466:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   28468:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2846a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2846c:	bf08      	it	eq
   2846e:	6051      	streq	r1, [r2, #4]
}
   28470:	e7e3      	b.n	2843a <work_cancel+0x44>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   28472:	6818      	ldr	r0, [r3, #0]
   28474:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   28476:	f020 0303 	bic.w	r3, r0, #3
   2847a:	e7cf      	b.n	2841c <work_cancel+0x26>
		int err = z_abort_timeout(&work->timeout);
   2847c:	300c      	adds	r0, #12
   2847e:	f7f9 ff41 	bl	22304 <z_abort_timeout>
		if (err) {
   28482:	2800      	cmp	r0, #0
   28484:	d0dd      	beq.n	28442 <work_cancel+0x4c>
   28486:	e7ba      	b.n	283fe <work_cancel+0x8>

00028488 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   28488:	2300      	movs	r3, #0
   2848a:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   2848e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   28492:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   28494:	61c3      	str	r3, [r0, #28]
}
   28496:	4770      	bx	lr

00028498 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   28498:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   2849a:	f7fa f913 	bl	226c4 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   2849e:	bd08      	pop	{r3, pc}

000284a0 <z_impl_k_uptime_ticks>:

s64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   284a0:	f7fa b910 	b.w	226c4 <z_tick_get>

000284a4 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
u64_t z_timeout_end_calc(k_timeout_t timeout)
{
   284a4:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   284a6:	1c43      	adds	r3, r0, #1
{
   284a8:	4601      	mov	r1, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   284aa:	d01e      	beq.n	284ea <z_timeout_end_calc+0x46>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   284ac:	b918      	cbnz	r0, 284b6 <z_timeout_end_calc+0x12>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   284ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   284b2:	f7fa b907 	b.w	226c4 <z_tick_get>
			return (u32_t)((t * to_hz + off) / from_hz);
   284b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   284ba:	f240 34e7 	movw	r4, #999	; 0x3e7
   284be:	2500      	movs	r5, #0
   284c0:	fbe0 4501 	umlal	r4, r5, r0, r1
   284c4:	4620      	mov	r0, r4
   284c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   284ca:	2300      	movs	r3, #0
   284cc:	4629      	mov	r1, r5
   284ce:	f7d7 fe57 	bl	180 <__aeabi_uldivmod>
   284d2:	4604      	mov	r4, r0
	return z_tick_get() + MAX(1, dt);
   284d4:	f7fa f8f6 	bl	226c4 <z_tick_get>
   284d8:	b12c      	cbz	r4, 284e6 <z_timeout_end_calc+0x42>
   284da:	4623      	mov	r3, r4
   284dc:	2200      	movs	r2, #0
   284de:	18c0      	adds	r0, r0, r3
   284e0:	eb42 0101 	adc.w	r1, r2, r1
}
   284e4:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   284e6:	2301      	movs	r3, #1
   284e8:	e7f8      	b.n	284dc <z_timeout_end_calc+0x38>
		return UINT64_MAX;
   284ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   284ee:	4601      	mov	r1, r0
   284f0:	e7f8      	b.n	284e4 <z_timeout_end_calc+0x40>

000284f2 <k_timer_init>:
	timer->status = 0U;
   284f2:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   284f4:	e9c0 1206 	strd	r1, r2, [r0, #24]
	sys_dlist_init(&w->waitq);
   284f8:	f100 0210 	add.w	r2, r0, #16
	list->tail = (sys_dnode_t *)list;
   284fc:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   28500:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   28504:	6243      	str	r3, [r0, #36]	; 0x24
	timer->user_data = NULL;
   28506:	6283      	str	r3, [r0, #40]	; 0x28
}
   28508:	4770      	bx	lr

0002850a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2850a:	b510      	push	{r4, lr}
   2850c:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2850e:	f7f9 fef9 	bl	22304 <z_abort_timeout>

	if (inactive) {
   28512:	b9d8      	cbnz	r0, 2854c <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   28514:	69e3      	ldr	r3, [r4, #28]
   28516:	b10b      	cbz	r3, 2851c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   28518:	4620      	mov	r0, r4
   2851a:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   2851c:	f104 0010 	add.w	r0, r4, #16
   28520:	2100      	movs	r1, #0
   28522:	f7f8 f8b1 	bl	20688 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   28526:	4604      	mov	r4, r0
   28528:	b180      	cbz	r0, 2854c <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   2852a:	f7f8 f8f7 	bl	2071c <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   2852e:	4620      	mov	r0, r4
   28530:	f7f8 fb6c 	bl	20c0c <z_ready_thread>
   28534:	f04f 0320 	mov.w	r3, #32
   28538:	f3ef 8011 	mrs	r0, BASEPRI
   2853c:	f383 8811 	msr	BASEPRI, r3
   28540:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   28544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   28548:	f7ff bedd 	b.w	28306 <z_reschedule_irqlock>
   2854c:	bd10      	pop	{r4, pc}

0002854e <signal_poll_event>:
{
   2854e:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   28550:	6884      	ldr	r4, [r0, #8]
{
   28552:	4605      	mov	r5, r0
   28554:	460e      	mov	r6, r1
	if (poller) {
   28556:	b19c      	cbz	r4, 28580 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   28558:	68a3      	ldr	r3, [r4, #8]
   2855a:	b95b      	cbnz	r3, 28574 <signal_poll_event+0x26>
		poller->is_polling = false;
   2855c:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
   2855e:	4618      	mov	r0, r3
	event->poller = NULL;
   28560:	2300      	movs	r3, #0
   28562:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   28564:	68eb      	ldr	r3, [r5, #12]
   28566:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2856a:	430e      	orrs	r6, r1
   2856c:	f366 3310 	bfi	r3, r6, #12, #5
   28570:	60eb      	str	r3, [r5, #12]
	return retcode;
   28572:	e004      	b.n	2857e <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   28574:	4798      	blx	r3
		poller->is_polling = false;
   28576:	2300      	movs	r3, #0
		if (retcode < 0) {
   28578:	2800      	cmp	r0, #0
		poller->is_polling = false;
   2857a:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   2857c:	daf0      	bge.n	28560 <signal_poll_event+0x12>
}
   2857e:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   28580:	4620      	mov	r0, r4
   28582:	e7ed      	b.n	28560 <signal_poll_event+0x12>

00028584 <add_event>:
{
   28584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28586:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   28588:	e9d0 2300 	ldrd	r2, r3, [r0]
   2858c:	4290      	cmp	r0, r2
   2858e:	4604      	mov	r4, r0
   28590:	460d      	mov	r5, r1
   28592:	d106      	bne.n	285a2 <add_event+0x1e>
	node->prev = list->tail;
   28594:	6863      	ldr	r3, [r4, #4]
   28596:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   28598:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2859a:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   2859c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2859e:	6065      	str	r5, [r4, #4]
}
   285a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   285a2:	2b00      	cmp	r3, #0
   285a4:	d0f6      	beq.n	28594 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   285a6:	689b      	ldr	r3, [r3, #8]
   285a8:	6879      	ldr	r1, [r7, #4]
   285aa:	6858      	ldr	r0, [r3, #4]
   285ac:	f7ff fea2 	bl	282f4 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   285b0:	2800      	cmp	r0, #0
   285b2:	d1ef      	bne.n	28594 <add_event+0x10>
	return list->head == list;
   285b4:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   285b6:	42b4      	cmp	r4, r6
   285b8:	d0ec      	beq.n	28594 <add_event+0x10>
   285ba:	2e00      	cmp	r6, #0
   285bc:	bf38      	it	cc
   285be:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   285c0:	2e00      	cmp	r6, #0
   285c2:	d0e7      	beq.n	28594 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   285c4:	68b3      	ldr	r3, [r6, #8]
   285c6:	6878      	ldr	r0, [r7, #4]
   285c8:	6859      	ldr	r1, [r3, #4]
   285ca:	f7ff fe93 	bl	282f4 <z_is_t1_higher_prio_than_t2>
   285ce:	b128      	cbz	r0, 285dc <add_event+0x58>
	node->prev = successor->prev;
   285d0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   285d2:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   285d6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   285d8:	6075      	str	r5, [r6, #4]
			return;
   285da:	e7e1      	b.n	285a0 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   285dc:	6863      	ldr	r3, [r4, #4]
   285de:	42b3      	cmp	r3, r6
   285e0:	d0d8      	beq.n	28594 <add_event+0x10>
   285e2:	6836      	ldr	r6, [r6, #0]
   285e4:	e7ec      	b.n	285c0 <add_event+0x3c>

000285e6 <z_handle_obj_poll_events>:
{
   285e6:	4603      	mov	r3, r0
	return list->head == list;
   285e8:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   285ea:	4283      	cmp	r3, r0
   285ec:	d008      	beq.n	28600 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   285ee:	e9d0 3200 	ldrd	r3, r2, [r0]
   285f2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   285f4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   285f6:	2300      	movs	r3, #0
	node->prev = NULL;
   285f8:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   285fc:	f7ff bfa7 	b.w	2854e <signal_poll_event>
}
   28600:	4770      	bx	lr

00028602 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   28602:	4770      	bx	lr
